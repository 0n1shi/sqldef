// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const STATUS = 57489
const VARIABLES = 57490
const RESTRICT = 57491
const CASCADE = 57492
const NO = 57493
const ACTION = 57494
const PERMISSIVE = 57495
const RESTRICTIVE = 57496
const PUBLIC = 57497
const CURRENT_USER = 57498
const SESSION_USER = 57499
const PAD_INDEX = 57500
const FILLFACTOR = 57501
const IGNORE_DUP_KEY = 57502
const STATISTICS_NORECOMPUTE = 57503
const STATISTICS_INCREMENTAL = 57504
const ALLOW_ROW_LOCKS = 57505
const ALLOW_PAGE_LOCKS = 57506
const BEFORE = 57507
const AFTER = 57508
const EACH = 57509
const ROW = 57510
const SCROLL = 57511
const CURSOR = 57512
const OPEN = 57513
const CLOSE = 57514
const FETCH = 57515
const PRIOR = 57516
const FIRST = 57517
const LAST = 57518
const DEALLOCATE = 57519
const INSTEAD = 57520
const OF = 57521
const DEFERRABLE = 57522
const INITIALLY = 57523
const IMMEDIATE = 57524
const DEFERRED = 57525
const CONCURRENTLY = 57526
const SQL = 57527
const SECURITY = 57528
const BEGIN = 57529
const START = 57530
const TRANSACTION = 57531
const COMMIT = 57532
const ROLLBACK = 57533
const BIT = 57534
const TINYINT = 57535
const SMALLINT = 57536
const SMALLSERIAL = 57537
const MEDIUMINT = 57538
const INT = 57539
const INTEGER = 57540
const SERIAL = 57541
const BIGINT = 57542
const BIGSERIAL = 57543
const INTNUM = 57544
const REAL = 57545
const DOUBLE = 57546
const PRECISION = 57547
const FLOAT_TYPE = 57548
const DECIMAL = 57549
const NUMERIC = 57550
const SMALLMONEY = 57551
const MONEY = 57552
const TIME = 57553
const TIMESTAMP = 57554
const DATETIME = 57555
const YEAR = 57556
const DATETIMEOFFSET = 57557
const DATETIME2 = 57558
const SMALLDATETIME = 57559
const CHAR = 57560
const VARCHAR = 57561
const VARYING = 57562
const BOOL = 57563
const CHARACTER = 57564
const VARBINARY = 57565
const NCHAR = 57566
const NVARCHAR = 57567
const NTEXT = 57568
const UUID = 57569
const TEXT = 57570
const TINYTEXT = 57571
const MEDIUMTEXT = 57572
const LONGTEXT = 57573
const CITEXT = 57574
const BLOB = 57575
const TINYBLOB = 57576
const MEDIUMBLOB = 57577
const LONGBLOB = 57578
const JSON = 57579
const JSONB = 57580
const ENUM = 57581
const GEOMETRY = 57582
const POINT = 57583
const LINESTRING = 57584
const POLYGON = 57585
const GEOMETRYCOLLECTION = 57586
const MULTIPOINT = 57587
const MULTILINESTRING = 57588
const MULTIPOLYGON = 57589
const VARIADIC = 57590
const ARRAY = 57591
const NOW = 57592
const GETDATE = 57593
const BPCHAR = 57594
const TEXT_PATTERN_OPS = 57595
const NULLX = 57596
const AUTO_INCREMENT = 57597
const APPROXNUM = 57598
const SIGNED = 57599
const UNSIGNED = 57600
const ZEROFILL = 57601
const ZONE = 57602
const AUTOINCREMENT = 57603
const DATABASES = 57604
const TABLES = 57605
const VSCHEMA_TABLES = 57606
const EXTENDED = 57607
const FULL = 57608
const PROCESSLIST = 57609
const NAMES = 57610
const CHARSET = 57611
const GLOBAL = 57612
const SESSION = 57613
const ISOLATION = 57614
const LEVEL = 57615
const READ = 57616
const WRITE = 57617
const ONLY = 57618
const REPEATABLE = 57619
const COMMITTED = 57620
const UNCOMMITTED = 57621
const SERIALIZABLE = 57622
const NEW = 57623
const CONCAT_NULL_YIELDS_NULL = 57624
const CURSOR_CLOSE_ON_COMMIT = 57625
const QUOTED_IDENTIFIER = 57626
const ARITHABORT = 57627
const FMTONLY = 57628
const NOCOUNT = 57629
const NOEXEC = 57630
const NUMERIC_ROUNDABORT = 57631
const ANSI_DEFAULTS = 57632
const ANSI_NULL_DFLT_OFF = 57633
const ANSI_NULL_DFLT_ON = 57634
const ANSI_NULLS = 57635
const ANSI_PADDING = 57636
const ANSI_WARNINGS = 57637
const FORCEPLAN = 57638
const SHOWPLAN_ALL = 57639
const SHOWPLAN_TEXT = 57640
const SHOWPLAN_XML = 57641
const IMPLICIT_TRANSACTIONS = 57642
const REMOTE_PROC_TRANSACTIONS = 57643
const XACT_ABORT = 57644
const CURRENT_TIMESTAMP = 57645
const DATABASE = 57646
const CURRENT_DATE = 57647
const CURRENT_TIME = 57648
const LOCALTIME = 57649
const LOCALTIMESTAMP = 57650
const UTC_DATE = 57651
const UTC_TIME = 57652
const UTC_TIMESTAMP = 57653
const REPLACE = 57654
const CONVERT = 57655
const CAST = 57656
const SUBSTR = 57657
const SUBSTRING = 57658
const GROUP_CONCAT = 57659
const SEPARATOR = 57660
const INHERIT = 57661
const LEAD = 57662
const LAG = 57663
const MATCH = 57664
const AGAINST = 57665
const BOOLEAN = 57666
const LANGUAGE = 57667
const WITH = 57668
const WITHOUT = 57669
const PARSER = 57670
const QUERY = 57671
const EXPANSION = 57672
const UNUSED = 57673
const VIRTUAL = 57674
const STORED = 57675
const GENERATED = 57676
const ALWAYS = 57677
const IDENTITY = 57678
const SEQUENCE = 57679
const INCREMENT = 57680
const MINVALUE = 57681
const CACHE = 57682
const CYCLE = 57683
const OWNED = 57684
const NONE = 57685
const CLUSTERED = 57686
const NONCLUSTERED = 57687
const REPLICATION = 57688
const COLUMNSTORE = 57689
const INCLUDE = 57690
const HOLDLOCK = 57691
const NOLOCK = 57692
const NOWAIT = 57693
const PAGLOCK = 57694
const ROWLOCK = 57695
const TABLELOCK = 57696
const DEFINER = 57697
const INVOKER = 57698
const TYPECAST = 57699
const CHECK = 57700
const OVER = 57701

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	130, 389,
	-2, 142,
	-1, 168,
	116, 944,
	151, 944,
	209, 944,
	210, 944,
	211, 944,
	214, 944,
	217, 944,
	220, 944,
	223, 944,
	224, 944,
	225, 944,
	226, 944,
	227, 944,
	228, 944,
	230, 944,
	232, 944,
	233, 944,
	234, 944,
	235, 944,
	236, 944,
	240, 944,
	241, 944,
	242, 944,
	243, 944,
	245, 944,
	249, 944,
	254, 944,
	255, 944,
	-2, 268,
	-1, 169,
	116, 945,
	151, 945,
	209, 945,
	210, 945,
	211, 945,
	214, 945,
	217, 945,
	220, 945,
	223, 945,
	224, 945,
	225, 945,
	226, 945,
	227, 945,
	228, 945,
	230, 945,
	232, 945,
	233, 945,
	234, 945,
	235, 945,
	236, 945,
	240, 945,
	241, 945,
	242, 945,
	243, 945,
	245, 945,
	249, 945,
	254, 945,
	255, 945,
	-2, 269,
	-1, 171,
	151, 947,
	209, 947,
	210, 947,
	211, 947,
	214, 947,
	217, 947,
	220, 947,
	223, 947,
	224, 947,
	225, 947,
	226, 947,
	227, 947,
	228, 947,
	230, 947,
	232, 947,
	233, 947,
	234, 947,
	235, 947,
	236, 947,
	240, 947,
	241, 947,
	242, 947,
	243, 947,
	245, 947,
	249, 947,
	254, 947,
	255, 947,
	-2, 303,
	-1, 179,
	151, 1014,
	209, 1014,
	210, 1014,
	211, 1014,
	214, 1014,
	217, 1014,
	220, 1014,
	223, 1014,
	224, 1014,
	225, 1014,
	226, 1014,
	227, 1014,
	228, 1014,
	230, 1014,
	232, 1014,
	233, 1014,
	234, 1014,
	235, 1014,
	236, 1014,
	240, 1014,
	241, 1014,
	242, 1014,
	243, 1014,
	245, 1014,
	249, 1014,
	254, 1014,
	255, 1014,
	-2, 323,
	-1, 180,
	151, 976,
	209, 976,
	210, 976,
	211, 976,
	214, 976,
	217, 976,
	220, 976,
	223, 976,
	224, 976,
	225, 976,
	226, 976,
	227, 976,
	228, 976,
	230, 976,
	232, 976,
	233, 976,
	234, 976,
	235, 976,
	236, 976,
	240, 976,
	241, 976,
	242, 976,
	243, 976,
	245, 976,
	249, 976,
	254, 976,
	255, 976,
	-2, 323,
	-1, 181,
	151, 972,
	209, 972,
	210, 972,
	211, 972,
	214, 972,
	217, 972,
	220, 972,
	223, 972,
	224, 972,
	225, 972,
	226, 972,
	227, 972,
	228, 972,
	230, 972,
	232, 972,
	233, 972,
	234, 972,
	235, 972,
	236, 972,
	240, 972,
	241, 972,
	242, 972,
	243, 972,
	245, 972,
	249, 972,
	254, 972,
	255, 972,
	-2, 323,
	-1, 183,
	116, 943,
	151, 943,
	209, 943,
	210, 943,
	211, 943,
	214, 943,
	217, 943,
	220, 943,
	223, 943,
	224, 943,
	225, 943,
	226, 943,
	227, 943,
	228, 943,
	230, 943,
	232, 943,
	233, 943,
	234, 943,
	235, 943,
	236, 943,
	240, 943,
	241, 943,
	242, 943,
	243, 943,
	245, 943,
	249, 943,
	254, 943,
	255, 943,
	-2, 284,
	-1, 184,
	116, 1013,
	151, 1013,
	209, 1013,
	210, 1013,
	211, 1013,
	214, 1013,
	217, 1013,
	220, 1013,
	223, 1013,
	224, 1013,
	225, 1013,
	226, 1013,
	227, 1013,
	228, 1013,
	230, 1013,
	232, 1013,
	233, 1013,
	234, 1013,
	235, 1013,
	236, 1013,
	240, 1013,
	241, 1013,
	242, 1013,
	243, 1013,
	245, 1013,
	249, 1013,
	254, 1013,
	255, 1013,
	-2, 285,
	-1, 185,
	116, 974,
	151, 974,
	209, 974,
	210, 974,
	211, 974,
	214, 974,
	217, 974,
	220, 974,
	223, 974,
	224, 974,
	225, 974,
	226, 974,
	227, 974,
	228, 974,
	230, 974,
	232, 974,
	233, 974,
	234, 974,
	235, 974,
	236, 974,
	240, 974,
	241, 974,
	242, 974,
	243, 974,
	245, 974,
	249, 974,
	254, 974,
	255, 974,
	-2, 286,
	-1, 186,
	116, 971,
	151, 971,
	209, 971,
	210, 971,
	211, 971,
	214, 971,
	217, 971,
	220, 971,
	223, 971,
	224, 971,
	225, 971,
	226, 971,
	227, 971,
	228, 971,
	230, 971,
	232, 971,
	233, 971,
	234, 971,
	235, 971,
	236, 971,
	240, 971,
	241, 971,
	242, 971,
	243, 971,
	245, 971,
	249, 971,
	254, 971,
	255, 971,
	-2, 287,
	-1, 189,
	116, 1020,
	151, 1020,
	209, 1020,
	210, 1020,
	211, 1020,
	214, 1020,
	217, 1020,
	220, 1020,
	223, 1020,
	224, 1020,
	225, 1020,
	226, 1020,
	227, 1020,
	228, 1020,
	230, 1020,
	232, 1020,
	233, 1020,
	234, 1020,
	235, 1020,
	236, 1020,
	240, 1020,
	241, 1020,
	242, 1020,
	243, 1020,
	245, 1020,
	249, 1020,
	254, 1020,
	255, 1020,
	-2, 290,
	-1, 194,
	116, 1012,
	151, 1012,
	209, 1012,
	210, 1012,
	211, 1012,
	214, 1012,
	217, 1012,
	220, 1012,
	223, 1012,
	224, 1012,
	225, 1012,
	226, 1012,
	227, 1012,
	228, 1012,
	230, 1012,
	232, 1012,
	233, 1012,
	234, 1012,
	235, 1012,
	236, 1012,
	240, 1012,
	241, 1012,
	242, 1012,
	243, 1012,
	245, 1012,
	249, 1012,
	254, 1012,
	255, 1012,
	-2, 303,
	-1, 199,
	116, 1026,
	151, 1026,
	209, 1026,
	210, 1026,
	211, 1026,
	214, 1026,
	217, 1026,
	220, 1026,
	223, 1026,
	224, 1026,
	225, 1026,
	226, 1026,
	227, 1026,
	228, 1026,
	230, 1026,
	232, 1026,
	233, 1026,
	234, 1026,
	235, 1026,
	236, 1026,
	240, 1026,
	241, 1026,
	242, 1026,
	243, 1026,
	245, 1026,
	249, 1026,
	254, 1026,
	255, 1026,
	-2, 267,
	-1, 200,
	116, 957,
	151, 957,
	209, 957,
	210, 957,
	211, 957,
	214, 957,
	217, 957,
	220, 957,
	223, 957,
	224, 957,
	225, 957,
	226, 957,
	227, 957,
	228, 957,
	230, 957,
	232, 957,
	233, 957,
	234, 957,
	235, 957,
	236, 957,
	240, 957,
	241, 957,
	242, 957,
	243, 957,
	245, 957,
	249, 957,
	254, 957,
	255, 957,
	-2, 293,
	-1, 201,
	116, 987,
	151, 987,
	209, 987,
	210, 987,
	211, 987,
	214, 987,
	217, 987,
	220, 987,
	223, 987,
	224, 987,
	225, 987,
	226, 987,
	227, 987,
	228, 987,
	230, 987,
	232, 987,
	233, 987,
	234, 987,
	235, 987,
	236, 987,
	240, 987,
	241, 987,
	242, 987,
	243, 987,
	245, 987,
	249, 987,
	254, 987,
	255, 987,
	-2, 294,
	-1, 202,
	116, 970,
	151, 970,
	209, 970,
	210, 970,
	211, 970,
	214, 970,
	217, 970,
	220, 970,
	223, 970,
	224, 970,
	225, 970,
	226, 970,
	227, 970,
	228, 970,
	230, 970,
	232, 970,
	233, 970,
	234, 970,
	235, 970,
	236, 970,
	240, 970,
	241, 970,
	242, 970,
	243, 970,
	245, 970,
	249, 970,
	254, 970,
	255, 970,
	-2, 295,
	-1, 203,
	116, 988,
	151, 988,
	209, 988,
	210, 988,
	211, 988,
	214, 988,
	217, 988,
	220, 988,
	223, 988,
	224, 988,
	225, 988,
	226, 988,
	227, 988,
	228, 988,
	230, 988,
	232, 988,
	233, 988,
	234, 988,
	235, 988,
	236, 988,
	240, 988,
	241, 988,
	242, 988,
	243, 988,
	245, 988,
	249, 988,
	254, 988,
	255, 988,
	-2, 296,
	-1, 204,
	116, 958,
	151, 958,
	209, 958,
	210, 958,
	211, 958,
	214, 958,
	217, 958,
	220, 958,
	223, 958,
	224, 958,
	225, 958,
	226, 958,
	227, 958,
	228, 958,
	230, 958,
	232, 958,
	233, 958,
	234, 958,
	235, 958,
	236, 958,
	240, 958,
	241, 958,
	242, 958,
	243, 958,
	245, 958,
	249, 958,
	254, 958,
	255, 958,
	-2, 297,
	-1, 205,
	116, 979,
	151, 979,
	209, 979,
	210, 979,
	211, 979,
	214, 979,
	217, 979,
	220, 979,
	223, 979,
	224, 979,
	225, 979,
	226, 979,
	227, 979,
	228, 979,
	230, 979,
	232, 979,
	233, 979,
	234, 979,
	235, 979,
	236, 979,
	240, 979,
	241, 979,
	242, 979,
	243, 979,
	245, 979,
	249, 979,
	254, 979,
	255, 979,
	-2, 298,
	-1, 206,
	116, 978,
	151, 978,
	209, 978,
	210, 978,
	211, 978,
	214, 978,
	217, 978,
	220, 978,
	223, 978,
	224, 978,
	225, 978,
	226, 978,
	227, 978,
	228, 978,
	230, 978,
	232, 978,
	233, 978,
	234, 978,
	235, 978,
	236, 978,
	240, 978,
	241, 978,
	242, 978,
	243, 978,
	245, 978,
	249, 978,
	254, 978,
	255, 978,
	-2, 299,
	-1, 207,
	116, 980,
	151, 980,
	209, 980,
	210, 980,
	211, 980,
	214, 980,
	217, 980,
	220, 980,
	223, 980,
	224, 980,
	225, 980,
	226, 980,
	227, 980,
	228, 980,
	230, 980,
	232, 980,
	233, 980,
	234, 980,
	235, 980,
	236, 980,
	240, 980,
	241, 980,
	242, 980,
	243, 980,
	245, 980,
	249, 980,
	254, 980,
	255, 980,
	-2, 300,
	-1, 211,
	116, 1007,
	151, 1007,
	209, 1007,
	210, 1007,
	211, 1007,
	214, 1007,
	217, 1007,
	220, 1007,
	223, 1007,
	224, 1007,
	225, 1007,
	226, 1007,
	227, 1007,
	228, 1007,
	230, 1007,
	232, 1007,
	233, 1007,
	234, 1007,
	235, 1007,
	236, 1007,
	240, 1007,
	241, 1007,
	242, 1007,
	243, 1007,
	245, 1007,
	249, 1007,
	254, 1007,
	255, 1007,
	-2, 245,
	-1, 212,
	116, 975,
	151, 975,
	209, 975,
	210, 975,
	211, 975,
	214, 975,
	217, 975,
	220, 975,
	223, 975,
	224, 975,
	225, 975,
	226, 975,
	227, 975,
	228, 975,
	230, 975,
	232, 975,
	233, 975,
	234, 975,
	235, 975,
	236, 975,
	240, 975,
	241, 975,
	242, 975,
	243, 975,
	245, 975,
	249, 975,
	254, 975,
	255, 975,
	-2, 246,
	-1, 214,
	116, 962,
	151, 962,
	209, 962,
	210, 962,
	211, 962,
	214, 962,
	217, 962,
	220, 962,
	223, 962,
	224, 962,
	225, 962,
	226, 962,
	227, 962,
	228, 962,
	230, 962,
	232, 962,
	233, 962,
	234, 962,
	235, 962,
	236, 962,
	240, 962,
	241, 962,
	242, 962,
	243, 962,
	245, 962,
	249, 962,
	254, 962,
	255, 962,
	-2, 248,
	-1, 215,
	116, 1002,
	151, 1002,
	209, 1002,
	210, 1002,
	211, 1002,
	214, 1002,
	217, 1002,
	220, 1002,
	223, 1002,
	224, 1002,
	225, 1002,
	226, 1002,
	227, 1002,
	228, 1002,
	230, 1002,
	232, 1002,
	233, 1002,
	234, 1002,
	235, 1002,
	236, 1002,
	240, 1002,
	241, 1002,
	242, 1002,
	243, 1002,
	245, 1002,
	249, 1002,
	254, 1002,
	255, 1002,
	-2, 249,
	-1, 217,
	116, 942,
	151, 942,
	209, 942,
	210, 942,
	211, 942,
	214, 942,
	217, 942,
	220, 942,
	223, 942,
	224, 942,
	225, 942,
	226, 942,
	227, 942,
	228, 942,
	230, 942,
	232, 942,
	233, 942,
	234, 942,
	235, 942,
	236, 942,
	240, 942,
	241, 942,
	242, 942,
	243, 942,
	245, 942,
	249, 942,
	254, 942,
	255, 942,
	-2, 251,
	-1, 219,
	116, 952,
	151, 952,
	209, 952,
	210, 952,
	211, 952,
	214, 952,
	217, 952,
	220, 952,
	223, 952,
	224, 952,
	225, 952,
	226, 952,
	227, 952,
	228, 952,
	230, 952,
	232, 952,
	233, 952,
	234, 952,
	235, 952,
	236, 952,
	240, 952,
	241, 952,
	242, 952,
	243, 952,
	245, 952,
	249, 952,
	254, 952,
	255, 952,
	-2, 305,
	-1, 497,
	59, 364,
	-2, 361,
	-1, 516,
	119, 772,
	-2, 231,
	-1, 534,
	119, 770,
	-2, 766,
	-1, 535,
	119, 771,
	-2, 767,
	-1, 641,
	119, 772,
	-2, 231,
	-1, 663,
	266, 781,
	-2, 679,
	-1, 695,
	266, 781,
	-2, 429,
	-1, 726,
	5, 32,
	-2, 13,
	-1, 732,
	5, 32,
	-2, 15,
	-1, 872,
	266, 781,
	-2, 429,
	-1, 887,
	116, 323,
	266, 323,
	378, 323,
	-2, 236,
	-1, 888,
	266, 288,
	378, 288,
	-2, 237,
	-1, 889,
	266, 289,
	378, 289,
	-2, 238,
	-1, 1024,
	119, 774,
	-2, 769,
	-1, 1035,
	266, 781,
	-2, 303,
	-1, 1089,
	116, 303,
	266, 303,
	378, 303,
	-2, 232,
	-1, 1103,
	266, 781,
	-2, 429,
	-1, 1162,
	58, 94,
	-2, 161,
	-1, 1165,
	58, 94,
	-2, 161,
	-1, 1214,
	5, 33,
	-2, 555,
	-1, 1284,
	5, 32,
	-2, 14,
	-1, 1295,
	187, 59,
	-2, 161,
	-1, 1338,
	58, 94,
	-2, 160,
	-1, 1457,
	86, 1001,
	-2, 90,
	-1, 1458,
	86, 960,
	-2, 91,
	-1, 1462,
	86, 948,
	-2, 756,
	-1, 1464,
	86, 981,
	-2, 758,
	-1, 1543,
	55, 46,
	57, 46,
	-2, 48,
	-1, 1700,
	5, 32,
	-2, 727,
	-1, 1725,
	5, 32,
	-2, 55,
	-1, 1793,
	5, 33,
	-2, 728,
	-1, 1822,
	5, 32,
	-2, 730,
	-1, 1843,
	5, 33,
	-2, 731,
}

const yyPrivate = 57344

const yyLast = 19837

var yyAct = [...]int16{
	535, 1632, 1718, 1802, 1752, 831, 1650, 1753, 1591, 625,
	739, 653, 33, 1566, 1749, 1691, 1129, 33, 33, 147,
	1633, 1723, 1579, 1578, 1115, 1568, 1459, 1564, 1553, 1456,
	159, 33, 33, 1443, 1710, 1133, 920, 1625, 1442, 943,
	946, 1268, 1299, 1453, 1296, 1210, 761, 1439, 1278, 26,
	1194, 1592, 1273, 1082, 958, 1171, 486, 550, 1144, 1007,
	1352, 686, 1034, 1111, 1204, 158, 900, 1074, 1023, 1071,
	896, 618, 984, 830, 636, 482, 720, 320, 286, 166,
	1098, 489, 924, 623, 161, 1337, 160, 561, 605, 593,
	721, 855, 846, 513, 254, 624, 302, 225, 334, 335,
	142, 521, 281, 269, 515, 538, 1376, 248, 284, 285,
	288, 1021, 1624, 729, 628, 1157, 1147, 1146, 9, 1260,
	788, 150, 1537, 798, 687, 1399, 798, 1148, 1112, 284,
	151, 600, 767, 272, 330, 331, 33, 33, 1149, 609,
	606, 607, 608, 33, 152, 153, 875, 1845, 279, 511,
	267, 147, 782, 1783, 785, 1841, 147, 268, 33, 1742,
	800, 801, 802, 803, 804, 805, 806, 1175, 783, 784,
	781, 807, 808, 809, 810, 787, 786, 796, 797, 789,
	790, 791, 792, 793, 794, 795, 788, 1517, 1176, 798,
	292, 729, 1833, 1157, 1147, 1146, 789, 790, 791, 792,
	793, 794, 795, 788, 1719, 1148, 798, 1803, 1804, 1805,
	1806, 1807, 1808, 1397, 1398, 275, 1149, 270, 280, 974,
	975, 251, 287, 1403, 1510, 277, 276, 1834, 147, 33,
	1430, 147, 1207, 147, 147, 1405, 147, 1782, 230, 1392,
	232, 1741, 1155, 33, 147, 147, 562, 563, 147, 33,
	244, 1367, 1154, 791, 792, 793, 794, 795, 788, 1507,
	33, 798, 154, 558, 1775, 1776, 1661, 1662, 1774, 318,
	1673, 33, 1400, 343, 234, 479, 304, 305, 306, 307,
	1729, 147, 1660, 1728, 613, 1580, 1730, 1581, 729, 1493,
	1157, 1147, 1146, 290, 910, 1150, 1151, 1153, 909, 540,
	322, 1152, 1148, 825, 917, 292, 264, 303, 1079, 1384,
	292, 1374, 344, 1149, 713, 712, 316, 1226, 1448, 346,
	1155, 1224, 1779, 1476, 147, 33, 292, 1475, 147, 729,
	1154, 1157, 1147, 1146, 231, 505, 526, 144, 528, 527,
	1737, 1736, 1676, 1148, 729, 1598, 1157, 1147, 1146, 137,
	1677, 273, 580, 340, 1149, 607, 608, 274, 1148, 525,
	1503, 892, 554, 555, 556, 557, 643, 1669, 1574, 1149,
	601, 1335, 947, 1150, 1151, 1153, 1478, 1288, 30, 1152,
	523, 1131, 799, 140, 141, 799, 949, 1516, 964, 1518,
	542, 543, 1195, 545, 1626, 548, 549, 165, 165, 564,
	296, 236, 735, 736, 787, 786, 796, 797, 789, 790,
	791, 792, 793, 794, 795, 788, 921, 1155, 798, 138,
	1819, 746, 1401, 1402, 1404, 1406, 1407, 1154, 1375, 265,
	282, 1346, 283, 769, 768, 1166, 1158, 496, 747, 504,
	582, 503, 585, 876, 491, 494, 266, 29, 799, 599,
	587, 941, 1602, 749, 278, 1170, 1176, 1778, 1155, 892,
	948, 764, 143, 27, 1597, 799, 928, 1325, 1154, 245,
	1150, 1151, 1153, 1155, 246, 611, 1152, 562, 563, 33,
	574, 139, 317, 1154, 1671, 510, 33, 1722, 315, 303,
	319, 1089, 950, 951, 952, 953, 954, 955, 956, 1721,
	1720, 136, 226, 229, 1509, 590, 135, 295, 497, 240,
	155, 1150, 1151, 1153, 1158, 341, 265, 1152, 759, 759,
	799, 149, 236, 588, 30, 266, 1150, 1151, 1153, 1687,
	250, 1740, 1152, 266, 787, 786, 796, 797, 789, 790,
	791, 792, 793, 794, 795, 788, 325, 476, 798, 328,
	1838, 332, 333, 1796, 339, 1689, 1236, 235, 1521, 6,
	7, 1583, 1671, 475, 237, 238, 477, 1409, 492, 493,
	495, 586, 147, 560, 1240, 299, 592, 239, 301, 147,
	1212, 33, 688, 1102, 33, 829, 33, 566, 828, 525,
	33, 591, 33, 252, 696, 326, 762, 763, 765, 507,
	698, 699, 1235, 701, 612, 610, 704, 705, 683, 165,
	523, 1158, 1651, 1653, 581, 481, 752, 33, 479, 685,
	1326, 1327, 1328, 1420, 815, 816, 490, 774, 243, 552,
	551, 778, 727, 707, 727, 1731, 1708, 501, 1582, 991,
	1187, 700, 568, 892, 766, 722, 572, 726, 776, 732,
	1186, 532, 1158, 989, 990, 988, 959, 960, 1185, 1671,
	945, 777, 776, 1422, 778, 815, 816, 1158, 772, 1184,
	1183, 1218, 1182, 1217, 1181, 731, 1179, 799, 778, 738,
	742, 1733, 1696, 750, 1394, 237, 238, 1075, 33, 1245,
	708, 569, 777, 776, 1652, 771, 1734, 33, 239, 1334,
	1674, 899, 1421, 826, 1075, 488, 241, 777, 776, 778,
	777, 776, 1253, 727, 1234, 1672, 1283, 1474, 890, 33,
	147, 777, 776, 904, 778, 1612, 33, 778, 777, 776,
	777, 776, 147, 500, 1611, 1396, 919, 813, 778, 777,
	776, 979, 981, 982, 147, 778, 33, 778, 980, 898,
	33, 966, 775, 962, 860, 963, 778, 33, 905, 861,
	848, 849, 850, 851, 852, 853, 854, 777, 776, 33,
	777, 776, 487, 1511, 1515, 488, 1688, 488, 879, 1504,
	523, 1353, 1514, 1353, 778, 499, 1466, 778, 947, 727,
	892, 1513, 722, 985, 913, 1610, 488, 1197, 1198, 1199,
	615, 1354, 949, 1354, 926, 894, 906, 799, 908, 893,
	541, 987, 1355, 1351, 541, 547, 33, 33, 961, 546,
	1512, 541, 1087, 965, 33, 912, 911, 682, 567, 565,
	33, 537, 1211, 787, 786, 796, 797, 789, 790, 791,
	792, 793, 794, 795, 788, 481, 957, 798, 1065, 1067,
	967, 1008, 594, 1009, 1076, 1022, 1025, 827, 969, 1180,
	907, 787, 786, 796, 797, 789, 790, 791, 792, 793,
	794, 795, 788, 727, 559, 798, 948, 615, 506, 1013,
	921, 532, 827, 1177, 861, 1015, 1010, 706, 1030, 1032,
	724, 1012, 727, 604, 1070, 603, 986, 737, 602, 1016,
	1019, 498, 33, 892, 1024, 1412, 1707, 1029, 950, 951,
	952, 953, 954, 955, 956, 935, 892, 1828, 1827, 935,
	1826, 1547, 1746, 892, 25, 1080, 921, 1083, 1084, 33,
	729, 1500, 1286, 1815, 1773, 892, 33, 723, 1795, 892,
	33, 756, 1678, 1081, 1550, 892, 1336, 740, 935, 1528,
	744, 1093, 748, 756, 1488, 1698, 481, 1629, 481, 1546,
	1699, 1286, 1487, 1271, 1104, 1548, 1105, 1546, 1094, 1091,
	1484, 1483, 1090, 756, 1480, 756, 1479, 20, 1256, 15,
	615, 1119, 1287, 740, 1286, 1173, 756, 1413, 1134, 651,
	1094, 892, 16, 722, 23, 1113, 935, 1114, 1027, 892,
	985, 935, 973, 756, 755, 716, 715, 729, 145, 1750,
	17, 18, 1707, 787, 786, 796, 797, 789, 790, 791,
	792, 793, 794, 795, 788, 1161, 1255, 798, 710, 711,
	710, 709, 33, 157, 156, 1269, 1269, 1821, 915, 786,
	796, 797, 789, 790, 791, 792, 793, 794, 795, 788,
	927, 1108, 798, 1622, 165, 1239, 1549, 615, 1107, 615,
	1106, 1200, 937, 481, 891, 796, 797, 789, 790, 791,
	792, 793, 794, 795, 788, 1088, 1174, 798, 147, 826,
	1550, 1707, 1550, 1791, 723, 914, 936, 1555, 1558, 1559,
	1560, 1556, 740, 1557, 1561, 916, 895, 1711, 1712, 1094,
	33, 1238, 1027, 986, 882, 878, 799, 743, 703, 702,
	579, 33, 940, 697, 1550, 578, 942, 1223, 579, 1659,
	579, 1575, 1449, 594, 1423, 1242, 729, 1227, 1094, 1022,
	1219, 935, 756, 877, 799, 968, 718, 717, 583, 714,
	145, 1244, 483, 1768, 1766, 145, 1738, 1711, 1712, 33,
	292, 33, 33, 33, 1481, 1280, 1272, 1270, 321, 1191,
	1190, 1258, 1169, 33, 33, 33, 33, 33, 33, 33,
	33, 1263, 1265, 33, 1264, 1168, 615, 33, 1024, 727,
	1261, 1290, 1018, 1018, 722, 1289, 1266, 727, 1110, 1109,
	1020, 33, 33, 1282, 1281, 481, 481, 19, 1086, 939,
	918, 1267, 1284, 694, 725, 693, 1068, 1363, 691, 21,
	22, 1068, 24, 33, 616, 570, 1349, 145, 316, 512,
	145, 508, 145, 145, 485, 145, 1329, 1332, 1291, 1292,
	1293, 225, 1297, 345, 145, 1361, 1362, 145, 309, 1378,
	323, 324, 1750, 1365, 1356, 1357, 1358, 1359, 1360, 1339,
	1340, 1341, 1342, 1343, 308, 297, 11, 1714, 1172, 1344,
	1345, 1196, 719, 571, 327, 233, 1370, 1391, 1100, 1428,
	145, 33, 1644, 1377, 533, 1717, 1716, 1645, 1381, 1393,
	1379, 1416, 1364, 1642, 1641, 723, 799, 33, 1643, 1646,
	1816, 1559, 1560, 147, 147, 1130, 33, 1385, 33, 1640,
	1124, 1125, 1132, 1501, 1781, 1425, 1162, 1411, 1414, 1620,
	1531, 799, 1418, 145, 845, 1436, 1024, 145, 1383, 484,
	1274, 1441, 1588, 553, 681, 33, 1451, 1789, 342, 1590,
	959, 960, 1563, 1275, 1424, 1417, 799, 1128, 1371, 33,
	1434, 1437, 1121, 1122, 1656, 680, 654, 787, 786, 796,
	797, 789, 790, 791, 792, 793, 794, 795, 788, 1465,
	577, 798, 787, 786, 796, 797, 789, 790, 791, 792,
	793, 794, 795, 788, 575, 573, 798, 242, 1072, 1160,
	1077, 1472, 934, 787, 786, 796, 797, 789, 790, 791,
	792, 793, 794, 795, 788, 734, 598, 798, 1100, 1555,
	1558, 1559, 1560, 1556, 1116, 1557, 1561, 1788, 1446, 930,
	33, 931, 932, 933, 1615, 1490, 1491, 1489, 1485, 1486,
	1519, 1117, 1494, 921, 929, 1787, 1748, 1269, 336, 337,
	338, 925, 1471, 1470, 1205, 1469, 1378, 1468, 147, 147,
	1369, 1368, 1189, 1031, 1835, 1522, 597, 596, 147, 147,
	33, 1524, 1419, 1526, 1525, 33, 1188, 502, 923, 1529,
	249, 1545, 33, 745, 938, 8, 1100, 1, 1298, 481,
	1527, 13, 1534, 12, 1530, 1690, 723, 594, 1535, 1259,
	329, 1536, 33, 33, 1594, 1595, 1544, 1538, 1209, 1539,
	880, 517, 518, 519, 1572, 824, 640, 1675, 1576, 522,
	520, 530, 531, 1596, 533, 626, 727, 1801, 1450, 1589,
	1593, 1294, 1433, 1324, 536, 1295, 271, 1321, 1322, 1323,
	147, 1254, 509, 14, 1429, 1601, 1134, 1285, 1603, 1338,
	1162, 1162, 1338, 1162, 1162, 594, 594, 733, 576, 1347,
	1348, 944, 147, 1350, 758, 257, 147, 147, 751, 478,
	28, 147, 147, 147, 147, 147, 10, 1130, 594, 1634,
	533, 145, 1446, 147, 1178, 1618, 147, 258, 145, 1619,
	147, 256, 1599, 1630, 33, 255, 33, 253, 539, 481,
	1617, 1628, 289, 164, 33, 1636, 1637, 162, 1639, 1635,
	1647, 33, 1638, 163, 167, 1655, 1454, 1562, 1584, 584,
	1097, 1658, 1159, 147, 1451, 1657, 620, 481, 1333, 811,
	1666, 1440, 1727, 1461, 1757, 1277, 1786, 1747, 1243, 842,
	799, 1073, 627, 147, 727, 978, 639, 638, 637, 1697,
	147, 780, 1445, 1540, 1554, 799, 1552, 740, 1551, 1029,
	1713, 1709, 1667, 1670, 1444, 1289, 1670, 1670, 1621, 1506,
	1695, 1686, 1123, 1431, 1427, 33, 799, 1704, 1145, 1681,
	1446, 922, 165, 1694, 481, 1446, 1446, 1446, 1446, 1446,
	1703, 1126, 1705, 1715, 1706, 1693, 5, 1156, 1143, 4,
	1446, 3, 1726, 1142, 727, 903, 1141, 1140, 1138, 1139,
	33, 1467, 1136, 1137, 1135, 1118, 881, 613, 728, 1700,
	1751, 2, 33, 33, 0, 1338, 0, 533, 1634, 145,
	0, 1754, 0, 0, 0, 727, 1743, 1634, 0, 0,
	0, 145, 0, 1732, 1759, 0, 1732, 1745, 1763, 0,
	1725, 0, 0, 145, 0, 0, 0, 1446, 0, 33,
	1760, 0, 0, 1762, 1446, 0, 1761, 0, 0, 526,
	0, 528, 527, 0, 0, 1780, 1542, 1543, 0, 0,
	727, 0, 1785, 0, 0, 0, 1790, 33, 0, 0,
	33, 33, 33, 147, 33, 1756, 481, 1800, 0, 0,
	1809, 1810, 1811, 0, 0, 1798, 1812, 1799, 1814, 0,
	0, 0, 0, 0, 1818, 0, 33, 33, 0, 1820,
	0, 0, 0, 1754, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1573, 0, 345, 1832,
	0, 481, 0, 0, 903, 903, 1836, 0, 1585, 1069,
	903, 0, 1839, 1754, 1069, 1840, 0, 1842, 972, 33,
	0, 0, 0, 0, 0, 1634, 0, 0, 594, 1600,
	0, 0, 614, 727, 0, 0, 0, 0, 0, 0,
	1627, 903, 903, 903, 903, 1631, 1670, 0, 1822, 0,
	0, 689, 0, 0, 0, 0, 0, 0, 0, 695,
	1237, 0, 727, 0, 0, 0, 0, 903, 0, 0,
	0, 0, 0, 0, 0, 1026, 1028, 1837, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 533, 0,
	0, 0, 1078, 0, 0, 0, 1068, 0, 0, 0,
	730, 1680, 730, 0, 787, 786, 796, 797, 789, 790,
	791, 792, 793, 794, 795, 788, 0, 0, 798, 0,
	165, 0, 481, 0, 0, 0, 1206, 0, 770, 0,
	481, 0, 617, 0, 0, 0, 0, 1668, 0, 0,
	0, 1092, 0, 1095, 1096, 0, 0, 0, 812, 814,
	787, 786, 796, 797, 789, 790, 791, 792, 793, 794,
	795, 788, 0, 0, 798, 0, 0, 0, 0, 0,
	695, 1127, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	0, 844, 0, 847, 847, 847, 847, 847, 847, 847,
	847, 1724, 871, 872, 873, 874, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1192, 787, 786, 796, 797,
	789, 790, 791, 792, 793, 794, 795, 788, 0, 0,
	798, 0, 0, 0, 0, 0, 481, 0, 773, 0,
	0, 903, 0, 779, 0, 1068, 0, 1248, 1758, 1724,
	695, 0, 0, 0, 1068, 0, 0, 730, 0, 0,
	1208, 0, 0, 0, 903, 0, 0, 0, 0, 0,
	0, 0, 345, 903, 1214, 1215, 0, 1216, 832, 533,
	0, 0, 0, 0, 0, 1130, 0, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 1241, 740, 740, 740, 901,
	1813, 1247, 0, 0, 0, 1249, 1250, 0, 1251, 1252,
	0, 0, 0, 0, 0, 0, 0, 0, 1257, 0,
	0, 730, 1824, 1825, 293, 294, 0, 298, 0, 0,
	300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 0, 0, 0, 310, 311, 312,
	313, 314, 0, 0, 0, 0, 0, 799, 0, 0,
	0, 0, 1068, 0, 0, 1844, 0, 0, 0, 0,
	0, 0, 0, 0, 970, 0, 0, 0, 0, 0,
	976, 977, 0, 0, 0, 0, 0, 0, 689, 0,
	345, 0, 0, 0, 0, 0, 817, 818, 819, 820,
	821, 822, 823, 799, 0, 0, 0, 0, 0, 0,
	0, 1103, 0, 0, 0, 0, 0, 856, 1366, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1120,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	1033, 1064, 145, 145, 0, 0, 0, 0, 0, 544,
	0, 0, 858, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 729, 0, 1157, 1147, 1146, 0, 799,
	0, 0, 856, 0, 0, 0, 0, 1148, 0, 1085,
	729, 0, 1157, 1147, 1146, 0, 0, 0, 1149, 1410,
	0, 0, 0, 0, 1148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1149, 1426, 858, 0, 0,
	208, 209, 210, 864, 865, 213, 866, 867, 216, 868,
	0, 218, 1014, 0, 220, 221, 222, 224, 223, 1103,
	1011, 859, 0, 0, 0, 0, 0, 0, 0, 869,
	857, 0, 1735, 0, 0, 863, 862, 983, 0, 0,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 208, 209, 210, 864, 865,
	213, 866, 867, 216, 868, 1193, 0, 903, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 145, 145, 0,
	0, 0, 1155, 0, 869, 857, 0, 145, 1570, 0,
	863, 862, 1154, 0, 1495, 1066, 1496, 1497, 0, 1155,
	1498, 1499, 0, 0, 1502, 0, 0, 0, 0, 1154,
	0, 0, 0, 0, 0, 0, 0, 730, 0, 0,
	0, 1213, 0, 1520, 0, 730, 729, 0, 1157, 1147,
	1146, 0, 870, 0, 0, 1150, 1151, 1153, 0, 0,
	1148, 1152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1149, 1150, 1151, 1153, 0, 0, 0, 1152, 1614,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 1246,
	690, 692, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 0, 0, 0, 145, 145, 870, 0, 1069,
	145, 145, 145, 145, 145, 0, 0, 0, 0, 0,
	0, 0, 1648, 0, 0, 145, 0, 0, 0, 1570,
	1276, 1279, 0, 0, 0, 0, 729, 0, 1157, 1147,
	1146, 1609, 0, 0, 0, 0, 0, 0, 0, 0,
	1148, 0, 0, 0, 0, 0, 0, 1616, 757, 760,
	0, 1149, 145, 0, 0, 0, 1201, 1202, 1203, 1331,
	0, 0, 0, 0, 0, 1155, 0, 1408, 0, 0,
	0, 0, 145, 0, 0, 1154, 0, 0, 0, 145,
	0, 0, 0, 0, 0, 0, 1158, 0, 0, 1649,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1447, 0, 817, 1158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1150, 1151,
	1153, 0, 0, 1382, 1152, 1679, 0, 0, 0, 1682,
	1683, 1684, 1685, 0, 1435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1069, 1395,
	0, 0, 0, 0, 1482, 1155, 0, 1069, 0, 0,
	0, 0, 0, 0, 0, 1154, 0, 0, 0, 0,
	0, 0, 0, 1415, 0, 0, 0, 757, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 1150, 1151,
	1153, 1739, 0, 0, 1152, 1744, 0, 0, 0, 0,
	0, 1330, 1570, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1772, 0,
	0, 0, 0, 0, 1565, 0, 0, 0, 0, 1158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1784, 0, 1372, 1373, 0, 0, 0, 0, 0, 0,
	1792, 1793, 1794, 0, 1797, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1508, 0, 1386, 1387, 1388, 1389, 1390, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1532, 1533, 1279, 0, 0,
	0, 0, 0, 0, 1829, 1830, 1831, 294, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1158,
	0, 0, 1447, 0, 0, 0, 0, 1447, 1447, 1447,
	1447, 1447, 1843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1565, 0, 1654, 1300, 1301, 1302, 1303, 1304,
	1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314,
	1315, 1316, 1317, 1318, 1319, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1447,
	0, 0, 1701, 1702, 0, 0, 1447, 1380, 1492, 0,
	0, 1623, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 730, 0, 0, 0, 0, 0, 0,
	0, 0, 1037, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1665, 0, 0, 1220,
	1221, 0, 1222, 0, 0, 0, 0, 1225, 0, 0,
	0, 0, 0, 0, 0, 0, 1755, 0, 730, 1228,
	1229, 0, 0, 1230, 1231, 0, 1232, 1233, 0, 1692,
	0, 0, 0, 0, 0, 0, 0, 1769, 1770, 1771,
	1046, 1052, 1050, 0, 0, 1047, 0, 0, 1045, 0,
	0, 1054, 0, 544, 1053, 1039, 1049, 1051, 1048, 1043,
	0, 1038, 0, 1056, 1055, 1057, 1036, 1059, 0, 0,
	0, 1063, 1060, 1062, 1061, 0, 1058, 1604, 1605, 0,
	1606, 1607, 1608, 0, 0, 1040, 1041, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1042, 1044, 0, 1755, 0,
	0, 1823, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1764, 0, 0, 1765, 0, 0, 1767, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1755, 0,
	730, 0, 0, 0, 0, 1777, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1692, 0, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1817, 832, 0, 0, 0, 0, 0, 0, 0,
	461, 450, 0, 409, 463, 379, 397, 471, 399, 400,
	436, 358, 419, 80, 394, 376, 36, 382, 351, 389,
	352, 380, 411, 49, 377, 0, 452, 422, 60, 132,
	0, 469, 63, 427, 0, 102, 73, 0, 0, 414,
	454, 417, 445, 408, 437, 366, 426, 464, 395, 432,
	465, 0, 0, 0, 534, 0, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 431, 459, 391, 474,
	0, 435, 350, 429, 0, 356, 359, 470, 457, 386,
	387, 0, 0, 0, 0, 0, 0, 0, 413, 418,
	442, 405, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1262, 0, 383, 0, 425, 0, 0, 0,
	363, 357, 0, 410, 0, 0, 0, 365, 0, 384,
	443, 0, 347, 448, 455, 407, 69, 119, 458, 404,
	403, 0, 0, 0, 1220, 104, 52, 396, 61, 440,
	472, 462, 415, 453, 381, 390, 0, 388, 92, 81,
	113, 424, 438, 90, 64, 107, 87, 112, 460, 106,
	118, 95, 42, 78, 34, 86, 91, 0, 47, 0,
	125, 126, 127, 128, 129, 130, 131, 355, 348, 385,
	446, 449, 370, 434, 360, 392, 441, 393, 416, 375,
	0, 0, 0, 0, 0, 0, 0, 101, 100, 37,
	105, 111, 45, 96, 0, 0, 0, 103, 71, 0,
	58, 98, 0, 38, 0, 0, 48, 85, 0, 0,
	0, 0, 0, 0, 108, 0, 122, 0, 0, 0,
	0, 0, 117, 40, 43, 0, 0, 0, 0, 116,
	0, 110, 72, 68, 0, 39, 109, 70, 67, 0,
	0, 50, 53, 83, 66, 84, 54, 75, 74, 76,
	0, 0, 79, 55, 0, 0, 0, 353, 0, 0,
	0, 123, 124, 354, 374, 456, 120, 0, 0, 0,
	77, 44, 56, 97, 59, 65, 89, 121, 433, 93,
	46, 114, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 369, 373, 367, 368, 420,
	421, 466, 467, 468, 444, 364, 0, 371, 372, 0,
	451, 57, 133, 134, 423, 35, 41, 62, 473, 0,
	0, 88, 51, 115, 0, 0, 398, 349, 402, 0,
	0, 0, 0, 0, 0, 0, 361, 362, 94, 0,
	406, 401, 428, 430, 439, 447, 0, 378, 412, 461,
	450, 0, 409, 463, 379, 397, 471, 399, 400, 436,
	358, 419, 80, 394, 376, 36, 382, 351, 389, 352,
	380, 411, 49, 377, 0, 452, 422, 60, 132, 0,
	469, 63, 427, 0, 102, 73, 0, 0, 414, 454,
	417, 445, 408, 437, 366, 426, 464, 395, 432, 465,
	0, 0, 0, 32, 0, 753, 0, 754, 0, 0,
	0, 0, 0, 0, 0, 431, 459, 391, 474, 0,
	435, 350, 429, 0, 356, 359, 470, 457, 386, 387,
	0, 0, 0, 0, 0, 0, 0, 413, 418, 442,
	405, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 383, 0, 425, 0, 0, 0, 363,
	357, 0, 410, 0, 0, 0, 365, 0, 384, 443,
	0, 347, 448, 455, 407, 69, 119, 458, 404, 403,
	0, 0, 0, 0, 104, 52, 396, 61, 440, 472,
	462, 415, 453, 381, 390, 0, 388, 92, 81, 113,
	424, 438, 90, 64, 107, 87, 112, 460, 106, 118,
	95, 42, 78, 34, 86, 91, 0, 47, 0, 125,
	126, 127, 128, 129, 130, 131, 355, 348, 385, 446,
	449, 370, 434, 360, 392, 441, 393, 416, 375, 0,
	0, 0, 0, 0, 0, 0, 101, 100, 37, 105,
	111, 45, 96, 0, 0, 0, 103, 71, 0, 58,
	98, 0, 38, 0, 0, 48, 85, 0, 0, 0,
	0, 0, 0, 108, 0, 122, 0, 0, 0, 0,
	0, 117, 40, 43, 0, 0, 0, 0, 116, 0,
	110, 72, 68, 0, 39, 109, 70, 67, 0, 0,
	50, 53, 83, 66, 84, 54, 75, 74, 76, 0,
	0, 79, 55, 0, 0, 0, 353, 0, 0, 0,
	123, 124, 354, 374, 456, 120, 0, 0, 0, 77,
	44, 56, 97, 59, 65, 89, 121, 433, 93, 46,
	114, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 369, 373, 367, 368, 420, 421,
	466, 467, 468, 444, 364, 0, 371, 372, 0, 451,
	57, 133, 134, 423, 35, 41, 62, 473, 0, 0,
	88, 51, 115, 0, 0, 398, 349, 402, 0, 0,
	0, 0, 0, 0, 0, 361, 362, 94, 0, 406,
	401, 428, 430, 439, 447, 0, 378, 412, 461, 450,
	0, 409, 463, 379, 397, 471, 399, 400, 436, 358,
	419, 80, 394, 376, 36, 382, 351, 389, 352, 380,
	411, 49, 377, 0, 452, 422, 60, 132, 0, 469,
	63, 427, 0, 102, 73, 0, 0, 414, 454, 417,
	445, 408, 437, 366, 426, 464, 395, 432, 465, 0,
	0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 431, 459, 391, 474, 0, 435,
	350, 429, 0, 356, 359, 470, 457, 386, 387, 0,
	0, 0, 0, 0, 0, 0, 413, 418, 442, 405,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 383, 0, 425, 0, 0, 0, 363, 357,
	0, 410, 0, 0, 0, 365, 0, 384, 443, 0,
	347, 448, 455, 407, 69, 119, 458, 404, 403, 0,
	0, 0, 0, 104, 52, 396, 61, 440, 472, 462,
	415, 453, 381, 390, 0, 388, 92, 81, 113, 424,
	438, 90, 64, 107, 87, 112, 460, 106, 118, 95,
	42, 78, 34, 86, 91, 0, 47, 0, 125, 126,
	127, 128, 129, 130, 131, 355, 348, 385, 446, 449,
	370, 434, 360, 392, 441, 393, 416, 375, 0, 0,
	0, 0, 0, 0, 0, 101, 100, 37, 105, 111,
	45, 96, 0, 0, 0, 103, 71, 0, 58, 98,
	0, 38, 0, 0, 48, 85, 0, 0, 0, 0,
	0, 0, 108, 0, 122, 0, 0, 0, 0, 0,
	117, 40, 1463, 0, 0, 0, 0, 116, 0, 110,
	72, 68, 0, 39, 109, 70, 67, 0, 0, 50,
	53, 83, 66, 84, 54, 75, 74, 76, 0, 0,
	79, 55, 0, 0, 0, 353, 0, 0, 0, 123,
	124, 354, 374, 456, 120, 0, 0, 0, 1464, 1462,
	56, 97, 59, 65, 89, 121, 433, 93, 46, 114,
	99, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 369, 373, 367, 368, 420, 421, 466,
	467, 468, 444, 364, 0, 371, 372, 0, 451, 57,
	133, 134, 423, 35, 41, 62, 473, 0, 0, 88,
	51, 115, 0, 0, 398, 349, 402, 0, 0, 0,
	0, 0, 0, 0, 361, 362, 94, 0, 406, 401,
	428, 430, 439, 447, 0, 378, 412, 461, 450, 0,
	409, 463, 379, 397, 471, 399, 400, 436, 358, 419,
	80, 394, 376, 36, 382, 351, 389, 352, 380, 411,
	49, 377, 0, 452, 422, 60, 132, 0, 469, 63,
	427, 0, 102, 73, 0, 0, 414, 454, 417, 445,
	408, 437, 366, 426, 464, 395, 432, 465, 0, 0,
	0, 32, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 431, 459, 391, 474, 0, 435, 350,
	429, 0, 356, 359, 470, 457, 386, 387, 0, 0,
	0, 0, 0, 0, 0, 413, 418, 442, 405, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 383, 0, 425, 0, 0, 0, 363, 357, 0,
	410, 0, 0, 0, 365, 0, 384, 443, 0, 347,
	448, 455, 407, 69, 119, 458, 404, 403, 0, 0,
	0, 0, 104, 52, 396, 61, 440, 472, 462, 415,
	453, 381, 390, 0, 388, 92, 81, 113, 424, 438,
	90, 64, 107, 87, 112, 460, 106, 118, 95, 42,
	78, 34, 86, 91, 0, 47, 0, 125, 126, 127,
	128, 129, 130, 131, 355, 348, 385, 446, 449, 370,
	434, 360, 392, 441, 393, 416, 375, 0, 0, 0,
	0, 0, 0, 0, 101, 100, 37, 105, 1577, 45,
	96, 0, 0, 0, 103, 71, 0, 58, 98, 0,
	38, 0, 0, 48, 85, 0, 0, 0, 0, 0,
	0, 108, 0, 122, 0, 0, 0, 0, 0, 117,
	40, 1463, 0, 0, 0, 0, 116, 0, 110, 72,
	68, 0, 39, 109, 70, 67, 0, 0, 50, 53,
	83, 66, 84, 54, 75, 74, 76, 0, 0, 79,
	55, 0, 0, 0, 353, 0, 0, 0, 123, 124,
	354, 374, 456, 120, 0, 0, 0, 1464, 1462, 56,
	97, 59, 65, 89, 121, 433, 93, 46, 114, 99,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 369, 373, 367, 368, 420, 421, 466, 467,
	468, 444, 364, 0, 371, 372, 0, 451, 57, 133,
	134, 423, 35, 41, 62, 473, 0, 0, 88, 51,
	115, 0, 0, 398, 349, 402, 0, 0, 0, 0,
	0, 0, 0, 361, 362, 94, 0, 406, 401, 428,
	430, 439, 447, 0, 378, 412, 461, 450, 0, 409,
	463, 379, 397, 471, 399, 400, 436, 358, 419, 80,
	394, 376, 36, 382, 351, 389, 352, 380, 411, 49,
	377, 0, 452, 422, 60, 132, 0, 469, 63, 427,
	0, 102, 73, 0, 0, 414, 454, 417, 445, 408,
	437, 366, 426, 464, 395, 432, 465, 0, 0, 0,
	32, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 431, 459, 391, 474, 0, 435, 350, 429,
	0, 356, 359, 470, 457, 386, 387, 0, 0, 0,
	0, 0, 0, 0, 413, 418, 442, 405, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1523, 0,
	383, 0, 425, 0, 0, 0, 363, 357, 0, 410,
	0, 0, 0, 365, 0, 384, 443, 0, 347, 448,
	455, 407, 69, 119, 458, 404, 403, 0, 0, 0,
	0, 104, 52, 396, 61, 440, 472, 462, 415, 453,
	381, 390, 0, 388, 92, 81, 113, 424, 438, 90,
	64, 107, 87, 112, 460, 106, 118, 95, 42, 78,
	34, 86, 91, 0, 47, 0, 125, 126, 127, 128,
	129, 130, 131, 355, 348, 385, 446, 449, 370, 434,
	360, 392, 441, 393, 416, 375, 0, 0, 0, 0,
	0, 0, 0, 101, 100, 37, 105, 111, 45, 96,
	0, 0, 0, 103, 71, 0, 58, 98, 0, 38,
	0, 0, 48, 85, 0, 0, 0, 0, 0, 0,
	108, 0, 122, 0, 0, 0, 0, 0, 117, 40,
	43, 0, 0, 0, 0, 116, 0, 110, 72, 68,
	0, 39, 109, 70, 67, 0, 0, 50, 53, 83,
	66, 84, 54, 75, 74, 76, 0, 0, 79, 55,
	0, 0, 0, 353, 0, 0, 0, 123, 124, 354,
	374, 456, 120, 0, 0, 0, 77, 44, 56, 97,
	59, 65, 89, 121, 433, 93, 46, 114, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 369, 373, 367, 368, 420, 421, 466, 467, 468,
	444, 364, 0, 371, 372, 0, 451, 57, 133, 134,
	423, 35, 41, 62, 473, 0, 0, 88, 51, 115,
	0, 0, 398, 349, 402, 0, 0, 0, 0, 0,
	0, 0, 361, 362, 94, 0, 406, 401, 428, 430,
	439, 447, 0, 378, 412, 461, 450, 0, 409, 463,
	379, 397, 471, 399, 400, 436, 358, 419, 80, 394,
	376, 36, 382, 351, 389, 352, 380, 411, 49, 377,
	0, 452, 422, 60, 132, 0, 469, 63, 427, 0,
	102, 73, 0, 0, 414, 454, 417, 445, 408, 437,
	366, 426, 464, 395, 432, 465, 0, 0, 0, 32,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 431, 459, 391, 474, 0, 435, 350, 429, 0,
	356, 359, 470, 457, 386, 387, 0, 0, 0, 0,
	0, 0, 0, 413, 418, 442, 405, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 383,
	0, 425, 0, 0, 0, 363, 357, 0, 410, 0,
	0, 0, 365, 0, 384, 443, 0, 347, 448, 455,
	407, 69, 119, 458, 404, 403, 0, 0, 0, 0,
	104, 52, 396, 61, 440, 472, 462, 415, 453, 381,
	390, 0, 388, 92, 81, 113, 424, 438, 90, 64,
	107, 87, 112, 460, 106, 118, 95, 42, 78, 34,
	86, 91, 0, 47, 0, 125, 126, 127, 128, 129,
	130, 131, 355, 348, 385, 446, 449, 370, 434, 360,
	392, 441, 393, 416, 375, 0, 0, 0, 0, 0,
	0, 0, 101, 100, 37, 105, 1455, 45, 96, 0,
	0, 0, 103, 71, 0, 58, 98, 0, 38, 0,
	0, 48, 85, 0, 0, 0, 0, 0, 0, 108,
	0, 122, 0, 0, 0, 0, 0, 117, 40, 1463,
	0, 0, 0, 0, 116, 0, 110, 72, 68, 0,
	39, 109, 70, 67, 0, 0, 50, 53, 83, 66,
	84, 54, 75, 74, 76, 0, 0, 79, 55, 0,
	0, 0, 353, 0, 0, 0, 123, 124, 354, 374,
	456, 120, 0, 0, 0, 1464, 1462, 1458, 1457, 59,
	65, 89, 121, 433, 93, 46, 114, 99, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	369, 373, 367, 368, 420, 421, 466, 467, 468, 444,
	364, 0, 371, 372, 0, 451, 57, 133, 134, 423,
	35, 41, 62, 473, 0, 0, 88, 51, 115, 0,
	0, 398, 349, 402, 0, 0, 0, 0, 0, 0,
	0, 361, 362, 94, 0, 406, 401, 428, 430, 439,
	447, 0, 378, 412, 461, 450, 0, 409, 463, 379,
	397, 471, 399, 400, 436, 358, 419, 80, 394, 376,
	36, 382, 351, 389, 352, 380, 411, 49, 377, 0,
	452, 422, 60, 132, 0, 469, 63, 427, 0, 102,
	73, 0, 0, 414, 454, 417, 445, 408, 437, 366,
	426, 464, 395, 432, 465, 0, 0, 0, 534, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	431, 459, 391, 474, 0, 435, 350, 429, 0, 356,
	359, 470, 457, 386, 387, 0, 0, 0, 0, 0,
	0, 0, 413, 418, 442, 405, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 383, 0,
	425, 0, 0, 0, 363, 357, 0, 410, 0, 0,
	0, 365, 0, 384, 443, 0, 347, 448, 455, 407,
	69, 119, 458, 404, 403, 0, 0, 0, 0, 104,
	52, 396, 61, 440, 472, 462, 415, 453, 381, 390,
	0, 388, 92, 81, 113, 424, 438, 90, 64, 107,
	87, 112, 460, 106, 118, 95, 42, 78, 34, 86,
	91, 0, 47, 0, 125, 126, 127, 128, 129, 130,
	131, 355, 348, 385, 446, 449, 370, 434, 360, 392,
	441, 393, 416, 375, 0, 0, 0, 0, 0, 0,
	0, 101, 100, 37, 105, 111, 45, 96, 0, 0,
	0, 103, 71, 0, 58, 98, 0, 38, 0, 0,
	48, 85, 0, 0, 0, 0, 0, 0, 108, 0,
	122, 0, 0, 0, 0, 0, 117, 40, 43, 0,
	0, 0, 0, 116, 0, 110, 72, 68, 0, 39,
	109, 70, 67, 0, 0, 50, 53, 83, 66, 84,
	54, 75, 74, 76, 0, 0, 79, 55, 0, 0,
	0, 353, 0, 0, 0, 123, 124, 354, 374, 456,
	120, 0, 0, 0, 77, 44, 56, 97, 59, 65,
	89, 121, 433, 93, 46, 114, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 369,
	373, 367, 368, 420, 421, 466, 467, 468, 444, 364,
	0, 371, 372, 0, 451, 57, 133, 134, 423, 35,
	41, 62, 473, 0, 0, 88, 51, 115, 0, 0,
	398, 349, 402, 0, 0, 0, 0, 0, 0, 0,
	361, 362, 94, 0, 406, 401, 428, 430, 439, 447,
	0, 378, 412, 461, 450, 0, 409, 463, 379, 397,
	471, 399, 400, 436, 358, 419, 80, 394, 376, 36,
	382, 351, 389, 352, 380, 411, 49, 377, 0, 452,
	422, 60, 132, 0, 469, 63, 427, 0, 102, 73,
	0, 0, 414, 454, 417, 445, 408, 437, 366, 426,
	464, 395, 432, 465, 0, 0, 0, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 480, 0, 431,
	459, 391, 474, 0, 435, 350, 429, 0, 356, 359,
	470, 457, 386, 387, 0, 0, 0, 0, 0, 0,
	0, 413, 418, 442, 405, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 383, 0, 425,
	0, 0, 0, 363, 357, 0, 410, 0, 0, 0,
	365, 0, 384, 443, 0, 347, 448, 455, 407, 69,
	119, 458, 404, 403, 0, 0, 0, 0, 104, 52,
	396, 61, 440, 472, 462, 415, 453, 381, 390, 0,
	388, 92, 81, 113, 424, 438, 90, 64, 107, 87,
	112, 460, 106, 118, 95, 42, 78, 34, 86, 91,
	0, 47, 0, 125, 126, 127, 128, 129, 130, 131,
	355, 348, 385, 446, 449, 370, 434, 360, 392, 441,
	393, 416, 375, 0, 0, 0, 0, 0, 0, 0,
	101, 100, 37, 105, 111, 45, 96, 0, 0, 0,
	103, 71, 0, 58, 98, 0, 38, 0, 0, 48,
	85, 0, 0, 0, 0, 0, 0, 108, 0, 122,
	0, 0, 0, 0, 0, 117, 40, 43, 0, 0,
	0, 0, 116, 0, 110, 72, 68, 0, 39, 109,
	70, 67, 0, 0, 50, 53, 83, 66, 84, 54,
	75, 74, 76, 0, 0, 79, 55, 0, 0, 0,
	353, 0, 0, 0, 123, 124, 354, 374, 456, 120,
	0, 0, 0, 77, 44, 56, 97, 59, 65, 89,
	121, 433, 93, 46, 114, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 369, 373,
	367, 368, 420, 421, 466, 467, 468, 444, 364, 0,
	371, 372, 0, 451, 57, 133, 134, 423, 35, 41,
	62, 473, 0, 0, 88, 51, 115, 0, 0, 398,
	349, 402, 0, 0, 0, 0, 0, 0, 0, 361,
	362, 94, 0, 406, 401, 428, 430, 439, 447, 0,
	378, 412, 461, 450, 0, 409, 463, 379, 397, 471,
	399, 400, 436, 358, 419, 80, 394, 376, 36, 382,
	351, 389, 352, 380, 411, 49, 377, 0, 452, 422,
	60, 132, 0, 469, 63, 427, 0, 102, 73, 0,
	0, 414, 454, 417, 445, 408, 437, 366, 426, 464,
	395, 432, 465, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 431, 459,
	391, 474, 0, 435, 350, 429, 0, 356, 359, 470,
	457, 386, 387, 589, 0, 0, 0, 0, 0, 0,
	413, 418, 442, 405, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 383, 0, 425, 0,
	0, 0, 363, 357, 0, 410, 0, 0, 0, 365,
	0, 384, 443, 0, 347, 448, 455, 407, 69, 119,
	458, 404, 403, 0, 0, 0, 0, 104, 52, 396,
	61, 440, 472, 462, 415, 453, 381, 390, 0, 388,
	92, 81, 113, 424, 438, 90, 64, 107, 87, 112,
	460, 106, 118, 95, 42, 78, 34, 86, 91, 0,
	47, 0, 125, 126, 127, 128, 129, 130, 131, 355,
	348, 385, 446, 449, 370, 434, 360, 392, 441, 393,
	416, 375, 0, 0, 0, 0, 0, 0, 0, 101,
	100, 37, 105, 111, 45, 96, 0, 0, 0, 103,
	71, 0, 58, 98, 0, 38, 0, 0, 48, 85,
	0, 0, 0, 0, 0, 0, 108, 0, 122, 0,
	0, 0, 0, 0, 117, 40, 43, 0, 0, 0,
	0, 116, 0, 110, 72, 68, 0, 39, 109, 70,
	67, 0, 0, 50, 53, 83, 66, 84, 54, 75,
	74, 76, 0, 0, 79, 55, 0, 0, 0, 353,
	0, 0, 0, 123, 124, 354, 374, 456, 120, 0,
	0, 0, 77, 44, 56, 97, 59, 65, 89, 121,
	433, 93, 46, 114, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 369, 373, 367,
	368, 420, 421, 466, 467, 468, 444, 364, 0, 371,
	372, 0, 451, 57, 133, 134, 423, 35, 41, 62,
	473, 0, 0, 88, 51, 115, 0, 0, 398, 349,
	402, 0, 0, 0, 0, 0, 0, 0, 361, 362,
	94, 0, 406, 401, 428, 430, 439, 447, 0, 378,
	412, 461, 450, 0, 409, 463, 379, 397, 471, 399,
	400, 436, 358, 419, 80, 394, 376, 36, 382, 351,
	389, 352, 380, 411, 49, 377, 0, 452, 422, 60,
	132, 0, 469, 63, 427, 0, 102, 73, 0, 0,
	414, 454, 417, 445, 408, 437, 366, 426, 464, 395,
	432, 465, 0, 0, 0, 146, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 431, 459, 391,
	474, 0, 435, 350, 429, 0, 356, 359, 470, 457,
	386, 387, 0, 0, 0, 0, 0, 0, 0, 413,
	418, 442, 405, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 383, 0, 425, 0, 0,
	0, 363, 357, 0, 410, 0, 0, 0, 365, 0,
	384, 443, 0, 347, 448, 455, 407, 69, 119, 458,
	404, 403, 0, 0, 0, 0, 104, 52, 396, 61,
	440, 472, 462, 415, 453, 381, 390, 0, 388, 92,
	81, 113, 424, 438, 90, 64, 107, 87, 112, 460,
	106, 118, 95, 42, 78, 34, 86, 91, 0, 47,
	0, 125, 126, 127, 128, 129, 130, 131, 355, 348,
	385, 446, 449, 370, 434, 360, 392, 441, 393, 416,
	375, 0, 0, 0, 0, 0, 0, 0, 101, 100,
	37, 105, 111, 45, 96, 0, 0, 0, 103, 71,
	0, 58, 98, 0, 38, 0, 0, 48, 85, 0,
	0, 0, 0, 0, 0, 108, 0, 122, 0, 0,
	0, 0, 0, 117, 40, 43, 0, 0, 0, 0,
	116, 0, 110, 72, 68, 0, 39, 109, 70, 67,
	0, 0, 50, 53, 83, 66, 84, 54, 75, 74,
	76, 0, 0, 79, 55, 0, 0, 0, 353, 0,
	0, 0, 123, 124, 354, 374, 456, 120, 0, 0,
	0, 77, 44, 56, 97, 59, 65, 89, 121, 433,
	93, 46, 114, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 369, 373, 367, 368,
	420, 421, 466, 467, 468, 444, 364, 0, 371, 372,
	0, 451, 57, 133, 134, 423, 35, 41, 62, 473,
	0, 0, 88, 51, 115, 0, 0, 398, 349, 402,
	0, 0, 0, 0, 0, 0, 0, 361, 362, 94,
	0, 406, 401, 428, 430, 439, 447, 0, 378, 412,
	461, 450, 0, 409, 463, 379, 397, 471, 399, 400,
	436, 358, 419, 80, 394, 376, 36, 382, 351, 389,
	352, 380, 411, 49, 377, 0, 452, 422, 60, 132,
	0, 469, 63, 427, 0, 102, 73, 0, 0, 414,
	454, 417, 445, 408, 437, 366, 426, 464, 395, 432,
	465, 0, 0, 0, 32, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 431, 459, 391, 474,
	0, 435, 350, 429, 0, 356, 359, 470, 457, 386,
	387, 0, 0, 0, 0, 0, 0, 0, 413, 418,
	442, 405, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 383, 0, 425, 0, 0, 0,
	363, 357, 0, 410, 0, 0, 0, 365, 0, 384,
	443, 0, 347, 448, 455, 407, 69, 119, 458, 404,
	403, 0, 0, 0, 0, 104, 52, 396, 61, 440,
	472, 462, 415, 453, 381, 390, 0, 388, 92, 81,
	113, 424, 438, 90, 64, 107, 87, 112, 460, 106,
	118, 95, 42, 78, 34, 86, 91, 0, 47, 0,
	125, 126, 127, 128, 129, 130, 131, 355, 348, 385,
	446, 449, 370, 434, 360, 392, 441, 393, 416, 375,
	0, 0, 0, 0, 0, 0, 0, 101, 100, 37,
	105, 111, 45, 96, 0, 0, 0, 103, 71, 0,
	58, 98, 0, 38, 0, 0, 48, 85, 0, 0,
	0, 0, 0, 0, 108, 0, 122, 0, 0, 0,
	0, 0, 117, 40, 43, 0, 0, 0, 0, 116,
	0, 110, 72, 68, 0, 39, 109, 70, 67, 0,
	0, 50, 53, 83, 66, 84, 54, 75, 74, 76,
	0, 0, 79, 55, 0, 0, 0, 353, 0, 0,
	0, 123, 124, 354, 374, 456, 120, 0, 0, 0,
	77, 44, 56, 97, 59, 65, 89, 121, 433, 93,
	46, 114, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 369, 373, 367, 368, 420,
	421, 466, 467, 468, 444, 364, 0, 371, 372, 0,
	451, 57, 133, 134, 423, 35, 41, 62, 473, 0,
	0, 88, 51, 115, 0, 0, 398, 349, 402, 0,
	0, 0, 0, 0, 0, 0, 361, 362, 94, 0,
	406, 401, 428, 430, 439, 447, 80, 378, 412, 36,
	0, 0, 622, 0, 0, 0, 49, 621, 0, 0,
	0, 60, 132, 0, 664, 63, 665, 0, 102, 73,
	0, 0, 0, 0, 655, 656, 0, 0, 0, 0,
	0, 0, 0, 0, 615, 0, 0, 534, 644, 641,
	642, 646, 647, 648, 649, 0, 0, 0, 645, 650,
	530, 531, 0, 0, 0, 0, 619, 634, 0, 663,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 631, 632, 0, 0, 0, 0, 677,
	0, 633, 0, 0, 1035, 630, 635, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	119, 0, 0, 675, 0, 0, 0, 0, 104, 52,
	0, 61, 0, 0, 0, 0, 0, 0, 0, 1037,
	0, 92, 81, 113, 0, 82, 90, 64, 107, 87,
	112, 0, 106, 118, 95, 42, 78, 34, 86, 91,
	0, 47, 0, 125, 126, 127, 128, 129, 130, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 100, 37, 105, 111, 45, 96, 1046, 1052, 1050,
	103, 71, 1047, 58, 98, 1045, 38, 0, 1054, 48,
	85, 1053, 1039, 1049, 1051, 1048, 1043, 108, 1038, 122,
	1056, 1055, 1057, 1036, 1059, 117, 40, 43, 1063, 1060,
	1062, 1061, 116, 1058, 110, 72, 68, 0, 39, 109,
	70, 67, 1040, 1041, 50, 53, 83, 66, 84, 54,
	75, 74, 76, 679, 0, 79, 55, 0, 0, 0,
	0, 0, 1042, 1044, 123, 124, 0, 0, 0, 120,
	0, 0, 0, 77, 44, 56, 97, 59, 65, 89,
	121, 0, 93, 46, 114, 99, 652, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 666, 676,
	672, 673, 670, 671, 669, 668, 667, 678, 657, 658,
	659, 660, 662, 0, 57, 133, 134, 661, 35, 41,
	62, 0, 0, 0, 88, 51, 115, 80, 0, 0,
	36, 0, 0, 622, 0, 0, 0, 49, 621, 0,
	0, 94, 60, 132, 0, 664, 63, 665, 0, 102,
	73, 0, 674, 0, 0, 655, 656, 0, 0, 0,
	0, 0, 0, 1663, 0, 615, 0, 0, 534, 644,
	641, 642, 646, 647, 648, 649, 0, 0, 0, 645,
	650, 530, 531, 1664, 0, 0, 0, 619, 634, 0,
	663, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 631, 632, 0, 0, 0, 0,
	677, 0, 633, 0, 0, 629, 630, 635, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 119, 0, 0, 675, 0, 0, 0, 0, 104,
	52, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 81, 113, 0, 82, 90, 64, 107,
	87, 112, 0, 106, 118, 95, 42, 78, 34, 86,
	91, 0, 47, 0, 125, 126, 127, 128, 129, 130,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 100, 37, 105, 111, 45, 96, 0, 0,
	0, 103, 71, 0, 58, 98, 0, 38, 0, 0,
	48, 85, 0, 0, 0, 0, 0, 0, 108, 0,
	122, 0, 0, 0, 0, 0, 117, 40, 43, 0,
	0, 0, 0, 116, 0, 110, 72, 68, 0, 39,
	109, 70, 67, 0, 0, 50, 53, 83, 66, 84,
	54, 75, 74, 76, 679, 0, 79, 55, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 0, 0, 0,
	120, 0, 0, 0, 77, 44, 56, 97, 59, 65,
	89, 121, 0, 93, 46, 114, 99, 652, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 666,
	676, 672, 673, 670, 671, 669, 668, 667, 678, 657,
	658, 659, 660, 662, 0, 57, 133, 134, 661, 35,
	41, 62, 0, 0, 0, 88, 51, 115, 80, 0,
	0, 36, 897, 0, 622, 0, 0, 0, 49, 621,
	0, 0, 94, 60, 132, 0, 664, 63, 665, 0,
	102, 73, 0, 674, 0, 0, 655, 656, 0, 0,
	0, 0, 0, 0, 0, 0, 615, 0, 0, 534,
	644, 641, 642, 646, 647, 648, 649, 0, 0, 0,
	645, 650, 530, 531, 0, 0, 0, 0, 619, 634,
	0, 663, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 631, 632, 902, 0, 0,
	0, 677, 0, 633, 0, 0, 629, 630, 635, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 119, 0, 0, 675, 0, 0, 0, 0,
	104, 52, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 81, 113, 0, 82, 90, 64,
	107, 87, 112, 0, 106, 118, 95, 42, 78, 34,
	86, 91, 0, 47, 0, 125, 126, 127, 128, 129,
	130, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 100, 37, 105, 111, 45, 96, 0,
	0, 0, 103, 71, 0, 58, 98, 0, 38, 0,
	0, 48, 85, 0, 0, 0, 0, 0, 0, 108,
	0, 122, 0, 0, 0, 0, 0, 117, 40, 43,
	0, 0, 0, 0, 116, 0, 110, 72, 68, 0,
	39, 109, 70, 67, 0, 0, 50, 53, 83, 66,
	84, 54, 75, 74, 76, 679, 0, 79, 55, 0,
	0, 0, 0, 0, 0, 0, 123, 124, 0, 0,
	0, 120, 0, 0, 0, 77, 44, 56, 97, 59,
	65, 89, 121, 0, 93, 46, 114, 99, 652, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	666, 676, 672, 673, 670, 671, 669, 668, 667, 678,
	657, 658, 659, 660, 662, 0, 57, 133, 134, 661,
	35, 41, 62, 0, 0, 0, 88, 51, 115, 80,
	0, 0, 36, 0, 0, 622, 0, 0, 0, 49,
	621, 0, 0, 94, 60, 132, 0, 664, 63, 665,
	0, 102, 73, 0, 674, 0, 0, 655, 656, 0,
	0, 0, 0, 0, 0, 0, 0, 615, 0, 892,
	534, 644, 641, 642, 646, 647, 648, 649, 0, 0,
	0, 645, 650, 530, 531, 0, 0, 0, 0, 619,
	634, 0, 663, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 631, 632, 0, 0,
	0, 0, 677, 0, 633, 0, 0, 629, 630, 635,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 119, 0, 0, 675, 0, 0, 0,
	0, 104, 52, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 81, 113, 0, 82, 90,
	64, 107, 87, 112, 0, 106, 118, 95, 42, 78,
	34, 86, 91, 0, 47, 0, 125, 126, 127, 128,
	129, 130, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 100, 37, 105, 111, 45, 96,
	0, 0, 0, 103, 71, 0, 58, 98, 0, 38,
	0, 0, 48, 85, 0, 0, 0, 0, 0, 0,
	108, 0, 122, 0, 0, 0, 0, 0, 117, 40,
	43, 0, 0, 0, 0, 116, 0, 110, 72, 68,
	0, 39, 109, 70, 67, 0, 0, 50, 53, 83,
	66, 84, 54, 75, 74, 76, 679, 0, 79, 55,
	0, 0, 0, 0, 0, 0, 0, 123, 124, 0,
	0, 0, 120, 0, 0, 0, 77, 44, 56, 97,
	59, 65, 89, 121, 0, 93, 46, 114, 99, 652,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 666, 676, 672, 673, 670, 671, 669, 668, 667,
	678, 657, 658, 659, 660, 662, 0, 57, 133, 134,
	661, 35, 41, 62, 0, 0, 0, 88, 51, 115,
	80, 0, 0, 36, 0, 0, 622, 0, 0, 0,
	49, 621, 0, 0, 94, 60, 132, 0, 664, 63,
	665, 0, 102, 73, 0, 674, 0, 0, 655, 656,
	0, 0, 0, 0, 0, 0, 0, 0, 615, 0,
	0, 534, 644, 641, 642, 646, 647, 648, 649, 0,
	0, 0, 645, 650, 530, 531, 0, 0, 0, 0,
	619, 634, 0, 663, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 631, 632, 902,
	0, 0, 0, 677, 0, 633, 0, 0, 629, 630,
	635, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 119, 0, 0, 675, 0, 0,
	0, 0, 104, 52, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 81, 113, 0, 82,
	90, 64, 107, 87, 112, 0, 106, 118, 95, 42,
	78, 34, 86, 91, 0, 47, 0, 125, 126, 127,
	128, 129, 130, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 100, 37, 105, 111, 45,
	96, 0, 0, 0, 103, 71, 0, 58, 98, 0,
	38, 0, 0, 48, 85, 0, 0, 0, 0, 0,
	0, 108, 0, 122, 0, 0, 0, 0, 0, 117,
	40, 43, 0, 0, 0, 0, 116, 0, 110, 72,
	68, 0, 39, 109, 70, 67, 0, 0, 50, 53,
	83, 66, 84, 54, 75, 74, 76, 679, 0, 79,
	55, 0, 0, 0, 0, 0, 0, 0, 123, 124,
	0, 0, 0, 120, 0, 0, 0, 77, 44, 56,
	97, 59, 65, 89, 121, 0, 93, 46, 114, 99,
	652, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 666, 676, 672, 673, 670, 671, 669, 668,
	667, 678, 657, 658, 659, 660, 662, 0, 57, 133,
	134, 661, 35, 41, 62, 0, 0, 0, 88, 51,
	115, 729, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 94, 36, 0, 0, 622,
	0, 0, 0, 49, 621, 0, 674, 0, 60, 132,
	0, 664, 63, 665, 0, 102, 73, 0, 0, 0,
	0, 655, 656, 0, 0, 0, 0, 0, 0, 0,
	0, 615, 0, 0, 534, 644, 641, 642, 646, 647,
	648, 649, 0, 0, 0, 645, 650, 530, 531, 0,
	0, 0, 0, 619, 634, 0, 663, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	631, 632, 0, 0, 0, 0, 677, 0, 633, 0,
	0, 629, 630, 635, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 119, 0, 0,
	675, 0, 0, 0, 0, 104, 52, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 81,
	113, 0, 82, 90, 64, 107, 87, 112, 0, 106,
	118, 95, 42, 78, 34, 86, 91, 0, 47, 0,
	125, 126, 127, 128, 129, 130, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 100, 37,
	105, 111, 45, 96, 0, 0, 0, 103, 71, 0,
	58, 98, 0, 38, 0, 0, 48, 85, 0, 0,
	0, 0, 0, 0, 108, 0, 122, 0, 0, 0,
	0, 0, 117, 40, 43, 0, 0, 0, 0, 116,
	0, 110, 72, 68, 0, 39, 109, 70, 67, 0,
	0, 50, 53, 83, 66, 84, 54, 75, 74, 76,
	679, 0, 79, 55, 0, 0, 0, 0, 0, 0,
	0, 123, 124, 0, 0, 0, 120, 0, 0, 0,
	77, 44, 56, 97, 59, 65, 89, 121, 0, 93,
	46, 114, 99, 652, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 666, 676, 672, 673, 670,
	671, 669, 668, 667, 678, 657, 658, 659, 660, 662,
	0, 57, 133, 134, 661, 35, 41, 62, 0, 0,
	0, 88, 51, 115, 80, 0, 0, 36, 0, 0,
	622, 0, 0, 0, 49, 621, 0, 0, 94, 60,
	132, 0, 664, 63, 665, 0, 102, 73, 0, 674,
	0, 0, 655, 656, 0, 0, 0, 0, 0, 0,
	0, 0, 615, 0, 0, 534, 644, 641, 642, 646,
	647, 648, 649, 0, 0, 0, 645, 650, 530, 531,
	0, 0, 0, 0, 619, 634, 0, 663, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 631, 632, 0, 0, 0, 0, 677, 0, 633,
	0, 0, 629, 630, 635, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 119, 0,
	0, 675, 0, 0, 0, 0, 104, 52, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	81, 113, 0, 82, 90, 64, 107, 87, 112, 0,
	106, 118, 95, 42, 78, 34, 86, 91, 0, 47,
	0, 125, 126, 127, 128, 129, 130, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 100,
	37, 105, 111, 45, 96, 0, 0, 0, 103, 71,
	0, 58, 98, 0, 38, 0, 0, 48, 85, 0,
	0, 0, 0, 0, 0, 108, 0, 122, 0, 0,
	0, 0, 0, 117, 40, 43, 0, 0, 0, 0,
	116, 0, 110, 72, 68, 0, 39, 109, 70, 67,
	0, 0, 50, 53, 83, 66, 84, 54, 75, 74,
	76, 679, 0, 79, 55, 0, 0, 0, 0, 0,
	0, 0, 123, 124, 0, 0, 0, 120, 0, 0,
	0, 77, 44, 56, 97, 59, 65, 89, 121, 0,
	93, 46, 114, 99, 652, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 666, 676, 672, 673,
	670, 671, 669, 668, 667, 678, 657, 658, 659, 660,
	662, 0, 57, 133, 134, 661, 35, 41, 62, 0,
	0, 0, 88, 51, 115, 80, 0, 0, 36, 0,
	0, 622, 0, 0, 0, 49, 0, 0, 0, 94,
	60, 132, 0, 664, 63, 665, 0, 102, 73, 0,
	674, 0, 0, 655, 656, 0, 0, 0, 0, 0,
	0, 0, 0, 615, 0, 0, 534, 644, 641, 642,
	646, 647, 648, 649, 0, 0, 0, 645, 650, 530,
	531, 0, 0, 0, 0, 0, 634, 0, 663, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 631, 632, 0, 0, 0, 0, 677, 0,
	633, 0, 0, 629, 630, 635, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 119,
	0, 0, 675, 0, 0, 0, 0, 104, 52, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 81, 113, 0, 82, 90, 64, 107, 87, 112,
	0, 106, 118, 95, 42, 78, 34, 86, 91, 0,
	47, 0, 125, 126, 127, 128, 129, 130, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	100, 37, 105, 111, 45, 96, 0, 0, 0, 103,
	71, 0, 58, 98, 0, 38, 0, 0, 48, 85,
	0, 0, 0, 0, 0, 0, 108, 0, 122, 0,
	0, 0, 0, 0, 117, 40, 43, 0, 0, 0,
	0, 116, 0, 110, 72, 68, 0, 39, 109, 70,
	67, 0, 0, 50, 53, 83, 66, 84, 54, 75,
	74, 76, 679, 0, 79, 55, 0, 0, 0, 0,
	0, 0, 0, 123, 124, 0, 0, 0, 120, 0,
	0, 0, 77, 44, 56, 97, 59, 65, 89, 121,
	0, 93, 46, 114, 99, 652, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 666, 676, 672,
	673, 670, 671, 669, 668, 667, 678, 657, 658, 659,
	660, 662, 0, 57, 133, 134, 661, 35, 41, 62,
	0, 0, 0, 88, 51, 115, 80, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	94, 60, 132, 0, 664, 63, 665, 0, 102, 73,
	0, 674, 0, 0, 655, 656, 0, 0, 0, 0,
	0, 0, 0, 0, 615, 0, 0, 534, 644, 641,
	642, 646, 647, 648, 649, 0, 0, 0, 645, 650,
	530, 531, 0, 0, 0, 0, 0, 634, 0, 663,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 631, 632, 0, 0, 0, 0, 677,
	0, 633, 0, 0, 629, 630, 635, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	119, 0, 0, 675, 0, 0, 0, 0, 104, 52,
	0, 61, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 81, 113, 0, 82, 90, 64, 107, 87,
	112, 0, 106, 118, 95, 42, 78, 34, 86, 91,
	0, 47, 0, 125, 126, 127, 128, 129, 130, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 100, 37, 105, 111, 45, 96, 0, 0, 0,
	103, 71, 0, 58, 98, 0, 38, 0, 0, 48,
	85, 0, 0, 0, 0, 0, 0, 108, 0, 122,
	0, 0, 0, 0, 0, 117, 40, 43, 0, 0,
	0, 0, 116, 0, 110, 72, 68, 0, 39, 109,
	70, 67, 0, 0, 50, 53, 83, 66, 84, 54,
	75, 74, 76, 679, 0, 79, 55, 0, 0, 0,
	0, 0, 0, 0, 123, 124, 0, 0, 0, 120,
	0, 0, 0, 77, 44, 56, 97, 59, 65, 89,
	121, 0, 93, 46, 114, 99, 652, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 666, 676,
	672, 673, 670, 671, 669, 668, 667, 678, 657, 658,
	659, 660, 662, 0, 57, 133, 134, 661, 35, 41,
	62, 0, 0, 0, 88, 51, 115, 80, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	0, 94, 60, 132, 0, 664, 63, 665, 0, 102,
	73, 0, 674, 0, 0, 655, 656, 0, 0, 0,
	0, 0, 0, 0, 0, 917, 0, 0, 534, 644,
	641, 642, 646, 647, 648, 649, 0, 0, 0, 645,
	650, 530, 531, 0, 0, 0, 0, 0, 634, 0,
	663, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 631, 632, 0, 0, 0, 0,
	677, 0, 633, 0, 0, 629, 630, 635, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 119, 0, 0, 675, 0, 0, 0, 0, 104,
	52, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 81, 113, 0, 82, 90, 64, 107,
	87, 112, 0, 106, 118, 95, 42, 78, 34, 86,
	91, 0, 47, 0, 125, 126, 127, 128, 129, 130,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 100, 37, 105, 111, 45, 96, 0, 0,
	0, 103, 71, 0, 58, 98, 0, 38, 0, 0,
	48, 85, 0, 0, 0, 0, 0, 0, 108, 0,
	122, 0, 0, 0, 0, 0, 117, 40, 43, 0,
	0, 0, 0, 116, 0, 110, 72, 68, 0, 39,
	109, 70, 67, 0, 0, 50, 53, 83, 66, 84,
	54, 75, 74, 76, 679, 0, 79, 55, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 0, 0, 0,
	120, 0, 0, 0, 77, 44, 56, 97, 59, 65,
	89, 121, 0, 93, 46, 114, 99, 652, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 666,
	676, 672, 673, 670, 671, 669, 668, 667, 678, 657,
	658, 659, 660, 662, 0, 57, 133, 134, 661, 35,
	41, 62, 0, 0, 0, 88, 51, 115, 80, 0,
	0, 36, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 191, 94, 60, 132, 0, 0, 63, 0, 0,
	102, 73, 0, 674, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1167, 0, 32,
	0, 1165, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 119, 0, 0, 0, 0, 0, 0, 0,
	104, 52, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 92, 81, 113, 0, 82, 90, 64,
	107, 87, 112, 0, 106, 118, 95, 42, 78, 34,
	86, 91, 0, 47, 0, 125, 126, 127, 128, 129,
	130, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 100, 37, 105, 111, 45, 96, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 0,
	218, 219, 85, 220, 221, 222, 224, 223, 193, 194,
	195, 199, 197, 196, 198, 170, 172, 117, 168, 171,
	177, 173, 174, 175, 189, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 190, 200, 201, 202,
	203, 204, 205, 206, 207, 0, 0, 79, 55, 0,
	0, 0, 0, 0, 0, 0, 123, 124, 0, 0,
	0, 120, 0, 0, 0, 77, 44, 56, 97, 59,
	65, 89, 121, 0, 93, 46, 114, 99, 80, 0,
	0, 36, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 191, 0, 60, 132, 0, 0, 63, 0, 0,
	102, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 133, 134, 32,
	35, 169, 62, 0, 0, 0, 88, 51, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 119, 0, 0, 0, 0, 0, 0, 0,
	104, 52, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 92, 81, 113, 0, 82, 90, 64,
	107, 87, 112, 0, 106, 118, 95, 42, 78, 34,
	86, 91, 0, 47, 0, 125, 126, 127, 128, 129,
	130, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 100, 37, 105, 111, 45, 96, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 0,
	218, 219, 85, 220, 221, 222, 224, 223, 193, 884,
	195, 199, 197, 196, 198, 170, 172, 117, 168, 883,
	177, 173, 174, 175, 189, 887, 179, 180, 181, 182,
	183, 184, 185, 186, 888, 889, 190, 200, 201, 202,
	203, 204, 205, 206, 207, 0, 0, 79, 55, 885,
	0, 0, 0, 0, 0, 0, 123, 124, 0, 0,
	0, 120, 0, 0, 0, 77, 44, 56, 97, 59,
	65, 89, 121, 0, 93, 46, 114, 99, 80, 0,
	0, 36, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 191, 0, 60, 132, 0, 0, 63, 0, 0,
	102, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 133, 134, 32,
	35, 169, 62, 0, 0, 0, 88, 51, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 119, 0, 0, 0, 0, 0, 0, 0,
	104, 52, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 92, 81, 113, 0, 82, 90, 64,
	107, 87, 112, 0, 106, 118, 95, 42, 78, 34,
	86, 91, 0, 47, 0, 125, 126, 127, 128, 129,
	130, 131, 0, 0, 0, 0, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 100, 37, 105, 111, 45, 96, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 0,
	218, 219, 85, 220, 221, 222, 224, 223, 193, 194,
	195, 199, 197, 196, 198, 170, 172, 117, 168, 171,
	177, 173, 174, 175, 189, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 190, 200, 201, 202,
	203, 204, 205, 206, 207, 0, 0, 79, 55, 0,
	0, 0, 0, 0, 0, 0, 123, 124, 0, 0,
	0, 120, 0, 0, 0, 77, 44, 56, 97, 59,
	65, 89, 121, 0, 93, 46, 114, 99, 80, 0,
	0, 36, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 191, 0, 60, 132, 0, 0, 63, 0, 0,
	102, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 133, 134, 32,
	35, 169, 62, 0, 0, 0, 88, 51, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 119, 0, 0, 0, 0, 0, 0, 0,
	104, 52, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 92, 81, 113, 0, 82, 90, 64,
	107, 87, 112, 0, 106, 118, 95, 42, 78, 34,
	86, 91, 0, 47, 0, 125, 126, 127, 128, 129,
	130, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 100, 37, 105, 111, 45, 96, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 0,
	218, 219, 85, 220, 221, 222, 224, 223, 193, 194,
	195, 199, 197, 196, 198, 170, 172, 117, 168, 171,
	177, 173, 174, 175, 189, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 190, 200, 201, 202,
	203, 204, 205, 206, 207, 0, 0, 79, 55, 0,
	0, 0, 0, 0, 0, 0, 123, 124, 0, 0,
	0, 120, 0, 0, 0, 77, 44, 56, 97, 59,
	65, 89, 121, 0, 93, 46, 114, 99, 80, 0,
	0, 36, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 0, 0, 60, 132, 0, 0, 63, 0, 0,
	102, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 133, 134, 32,
	35, 169, 62, 0, 0, 0, 88, 51, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 119, 0, 0, 0, 0, 0, 0, 0,
	104, 52, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 81, 113, 0, 82, 90, 64,
	107, 87, 112, 0, 106, 118, 95, 42, 78, 34,
	86, 91, 0, 47, 0, 125, 126, 127, 128, 129,
	130, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 100, 37, 105, 111, 45, 96, 0,
	0, 0, 103, 71, 0, 58, 98, 0, 38, 0,
	0, 48, 85, 0, 0, 0, 0, 0, 0, 108,
	0, 122, 0, 0, 0, 0, 0, 117, 40, 43,
	0, 0, 0, 0, 116, 0, 110, 72, 68, 0,
	39, 109, 70, 67, 0, 0, 50, 53, 83, 66,
	84, 54, 75, 74, 76, 0, 0, 79, 55, 0,
	0, 0, 0, 0, 0, 0, 123, 124, 0, 0,
	0, 120, 0, 0, 0, 77, 44, 56, 97, 59,
	65, 89, 121, 0, 93, 46, 114, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 36, 0, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 0, 60, 132, 0,
	0, 63, 0, 0, 102, 73, 57, 133, 134, 0,
	35, 41, 62, 0, 0, 0, 88, 51, 115, 0,
	684, 0, 0, 534, 0, 516, 517, 518, 519, 0,
	0, 0, 0, 94, 522, 520, 530, 531, 0, 0,
	0, 0, 0, 0, 799, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 119, 0, 0, 0,
	0, 0, 0, 0, 104, 52, 0, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 81, 113,
	0, 82, 90, 64, 107, 87, 112, 0, 106, 118,
	95, 42, 78, 34, 86, 91, 0, 47, 0, 125,
	126, 127, 128, 129, 130, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 100, 37, 105,
	111, 45, 96, 0, 0, 0, 103, 71, 0, 58,
	98, 0, 38, 0, 0, 48, 85, 0, 0, 0,
	0, 0, 0, 108, 0, 122, 0, 0, 0, 0,
	0, 117, 40, 43, 0, 0, 0, 0, 116, 0,
	110, 72, 68, 0, 39, 109, 70, 67, 0, 0,
	50, 53, 83, 66, 84, 54, 75, 74, 76, 0,
	0, 524, 529, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 0, 0, 0, 120, 0, 0, 0, 77,
	44, 56, 97, 59, 65, 89, 121, 0, 93, 46,
	114, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 526, 0, 528, 527, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	57, 133, 134, 0, 35, 41, 62, 0, 0, 0,
	88, 51, 115, 80, 0, 0, 36, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 94, 60, 132,
	0, 0, 63, 0, 0, 102, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 514, 0, 0, 534, 0, 516, 517, 518, 519,
	0, 0, 0, 0, 0, 522, 520, 530, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 119, 0, 0,
	0, 0, 0, 0, 0, 104, 52, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 81,
	113, 0, 82, 90, 64, 107, 87, 112, 0, 106,
	118, 95, 42, 78, 34, 86, 91, 0, 47, 0,
	125, 126, 127, 128, 129, 130, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 100, 37,
	105, 111, 45, 96, 0, 0, 0, 103, 71, 0,
	58, 98, 0, 38, 0, 0, 48, 85, 0, 0,
	0, 0, 0, 0, 108, 0, 122, 0, 0, 0,
	0, 0, 117, 40, 43, 0, 0, 0, 0, 116,
	0, 110, 72, 68, 0, 39, 109, 70, 67, 0,
	0, 50, 53, 83, 66, 84, 54, 75, 74, 76,
	0, 0, 524, 529, 0, 0, 0, 0, 0, 0,
	0, 123, 124, 0, 0, 0, 120, 0, 0, 0,
	77, 44, 56, 97, 59, 65, 89, 121, 0, 93,
	46, 114, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 36, 0, 0,
	0, 0, 0, 0, 49, 526, 0, 528, 527, 60,
	132, 0, 0, 63, 0, 0, 102, 73, 0, 0,
	0, 57, 133, 134, 0, 35, 41, 62, 0, 0,
	0, 88, 51, 115, 0, 32, 644, 1017, 642, 646,
	647, 648, 649, 0, 0, 0, 645, 650, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 119, 0,
	0, 0, 0, 0, 0, 0, 104, 52, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	81, 113, 0, 82, 90, 64, 107, 87, 112, 0,
	106, 118, 95, 42, 78, 34, 86, 91, 0, 47,
	0, 125, 126, 127, 128, 129, 130, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 100,
	37, 105, 111, 45, 96, 0, 0, 0, 103, 71,
	0, 58, 98, 0, 38, 0, 0, 48, 85, 0,
	0, 0, 0, 0, 0, 108, 0, 122, 0, 0,
	0, 0, 0, 117, 40, 43, 0, 0, 0, 0,
	116, 0, 110, 72, 68, 0, 39, 109, 70, 67,
	0, 0, 50, 53, 83, 66, 84, 54, 75, 74,
	76, 0, 0, 79, 55, 0, 0, 0, 0, 0,
	0, 0, 123, 124, 0, 0, 0, 120, 0, 0,
	0, 77, 44, 56, 97, 59, 65, 89, 121, 0,
	93, 46, 114, 99, 0, 0, 0, 0, 80, 0,
	0, 36, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 0, 0, 60, 132, 0, 0, 63, 0, 0,
	102, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 57, 133, 134, 0, 35, 41, 62, 32,
	0, 31, 88, 51, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 69, 119, 0, 0, 0, 260, 0, 259, 0,
	261, 262, 0, 61, 0, 0, 263, 266, 0, 0,
	0, 0, 0, 92, 81, 113, 0, 82, 90, 64,
	107, 87, 112, 0, 106, 118, 95, 42, 78, 34,
	86, 91, 0, 47, 0, 125, 126, 127, 128, 129,
	130, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 100, 37, 105, 111, 45, 96, 0,
	0, 0, 103, 71, 0, 58, 98, 0, 38, 0,
	0, 48, 85, 0, 0, 0, 0, 0, 0, 108,
	0, 122, 0, 0, 0, 0, 0, 117, 40, 43,
	0, 0, 0, 0, 116, 0, 110, 72, 68, 0,
	39, 109, 70, 67, 0, 0, 50, 53, 83, 66,
	84, 54, 75, 74, 76, 0, 0, 79, 55, 0,
	0, 0, 0, 0, 0, 0, 123, 124, 0, 0,
	0, 120, 0, 0, 0, 77, 44, 56, 97, 59,
	65, 89, 121, 0, 93, 46, 114, 99, 0, 0,
	0, 0, 80, 0, 0, 36, 0, 1099, 0, 0,
	0, 0, 49, 0, 0, 0, 0, 60, 132, 0,
	0, 63, 0, 0, 102, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 133, 134, 0,
	35, 41, 62, 32, 0, 1101, 88, 51, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	777, 776, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 778, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 119, 0, 0, 0,
	0, 0, 0, 0, 104, 52, 0, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 81, 113,
	0, 82, 90, 64, 107, 87, 112, 0, 106, 118,
	95, 42, 78, 34, 86, 91, 0, 47, 0, 125,
	126, 127, 128, 129, 130, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 100, 37, 105,
	111, 45, 96, 0, 0, 0, 103, 71, 0, 58,
	98, 0, 38, 0, 0, 48, 85, 0, 0, 0,
	0, 0, 0, 108, 0, 122, 0, 0, 0, 0,
	0, 117, 40, 43, 0, 0, 0, 0, 116, 0,
	110, 72, 68, 0, 39, 109, 70, 67, 0, 0,
	50, 53, 83, 66, 84, 54, 75, 74, 76, 0,
	0, 79, 55, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 0, 0, 0, 120, 0, 0, 0, 77,
	44, 56, 97, 59, 65, 89, 121, 0, 93, 46,
	114, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 36, 0, 0,
	0, 0, 0, 0, 49, 0, 0, 0, 0, 60,
	132, 0, 0, 63, 0, 0, 102, 73, 0, 0,
	57, 133, 134, 0, 35, 41, 62, 0, 0, 0,
	88, 51, 115, 1167, 0, 32, 0, 1165, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 119, 0,
	0, 0, 0, 0, 0, 0, 104, 52, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	81, 113, 0, 82, 90, 64, 107, 87, 112, 0,
	106, 118, 95, 42, 78, 34, 86, 91, 0, 47,
	0, 125, 126, 127, 128, 129, 130, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 100,
	37, 105, 111, 45, 96, 0, 0, 0, 103, 71,
	0, 58, 98, 0, 38, 0, 0, 48, 85, 0,
	0, 0, 0, 0, 0, 108, 0, 122, 0, 0,
	0, 0, 0, 117, 40, 43, 0, 0, 0, 0,
	116, 0, 110, 72, 68, 0, 39, 109, 70, 67,
	0, 0, 50, 53, 83, 66, 84, 54, 75, 74,
	76, 0, 0, 79, 55, 0, 0, 0, 0, 0,
	0, 0, 123, 124, 0, 0, 0, 120, 0, 0,
	0, 77, 44, 56, 97, 59, 65, 89, 121, 0,
	93, 46, 114, 99, 0, 729, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	0, 0, 60, 132, 0, 0, 63, 0, 0, 102,
	73, 0, 57, 133, 134, 0, 35, 41, 62, 0,
	0, 0, 88, 51, 115, 615, 0, 0, 146, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 119, 0, 0, 0, 0, 0, 0, 0, 104,
	52, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 81, 113, 0, 82, 90, 64, 107,
	87, 112, 0, 106, 118, 95, 42, 78, 34, 86,
	91, 0, 47, 0, 125, 126, 127, 128, 129, 130,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 100, 37, 105, 111, 45, 96, 0, 0,
	0, 103, 71, 0, 58, 98, 0, 38, 0, 0,
	48, 85, 0, 0, 0, 0, 0, 0, 108, 0,
	122, 0, 0, 0, 0, 0, 117, 40, 43, 0,
	0, 0, 0, 116, 0, 110, 72, 68, 0, 39,
	109, 70, 67, 0, 0, 50, 53, 83, 66, 84,
	54, 75, 74, 76, 0, 0, 79, 55, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 0, 0, 0,
	120, 0, 0, 0, 77, 44, 56, 97, 59, 65,
	89, 121, 0, 93, 46, 114, 99, 0, 0, 0,
	0, 80, 0, 0, 36, 0, 1569, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 60, 132, 0, 0,
	63, 0, 0, 102, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 133, 134, 0, 35,
	41, 62, 146, 0, 1571, 88, 51, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 119, 0, 0, 0, 0,
	0, 0, 0, 104, 52, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 81, 113, 0,
	82, 90, 64, 107, 87, 112, 0, 106, 118, 95,
	42, 78, 34, 86, 91, 0, 47, 0, 125, 126,
	127, 128, 129, 130, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 100, 37, 105, 111,
	45, 96, 0, 0, 0, 103, 71, 0, 58, 98,
	0, 38, 0, 0, 48, 85, 0, 0, 0, 0,
	0, 0, 108, 0, 122, 0, 0, 0, 0, 0,
	117, 40, 43, 0, 0, 0, 0, 116, 0, 110,
	72, 68, 0, 39, 109, 70, 67, 0, 0, 50,
	53, 83, 66, 84, 54, 75, 74, 76, 0, 0,
	79, 55, 0, 0, 0, 0, 0, 0, 0, 123,
	124, 0, 0, 0, 120, 0, 0, 0, 77, 44,
	56, 97, 59, 65, 89, 121, 0, 93, 46, 114,
	99, 0, 729, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 36, 0, 0,
	0, 0, 0, 0, 49, 0, 0, 0, 0, 60,
	132, 0, 0, 63, 0, 0, 102, 73, 0, 57,
	133, 134, 0, 35, 41, 62, 0, 0, 0, 88,
	51, 115, 615, 0, 0, 32, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 119, 0,
	0, 0, 0, 0, 0, 0, 104, 52, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	81, 113, 0, 82, 90, 64, 107, 87, 112, 0,
	106, 118, 95, 42, 78, 34, 86, 91, 0, 47,
	0, 125, 126, 127, 128, 129, 130, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 100,
	37, 105, 111, 45, 96, 0, 0, 0, 103, 71,
	0, 58, 98, 0, 38, 0, 0, 48, 85, 0,
	0, 0, 0, 0, 0, 108, 0, 122, 0, 0,
	0, 0, 0, 117, 40, 43, 0, 0, 0, 0,
	116, 0, 110, 72, 68, 0, 39, 109, 70, 67,
	0, 0, 50, 53, 83, 66, 84, 54, 75, 74,
	76, 0, 0, 79, 55, 0, 0, 0, 0, 0,
	0, 0, 123, 124, 0, 0, 0, 120, 0, 0,
	0, 77, 44, 56, 97, 59, 65, 89, 121, 0,
	93, 46, 114, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	0, 0, 60, 132, 0, 0, 63, 0, 0, 102,
	73, 0, 57, 133, 134, 0, 35, 41, 62, 0,
	0, 0, 88, 51, 115, 615, 0, 0, 146, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 119, 0, 0, 0, 0, 0, 0, 0, 104,
	52, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 81, 113, 0, 82, 90, 64, 107,
	87, 112, 0, 106, 118, 95, 42, 78, 34, 86,
	91, 0, 47, 0, 125, 126, 127, 128, 129, 130,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 100, 37, 105, 111, 45, 96, 0, 0,
	0, 103, 71, 0, 58, 98, 0, 38, 0, 0,
	48, 85, 0, 0, 0, 0, 0, 0, 108, 0,
	122, 0, 0, 0, 0, 0, 117, 40, 43, 0,
	0, 0, 0, 116, 0, 110, 72, 68, 0, 39,
	109, 70, 67, 0, 0, 50, 53, 83, 66, 84,
	54, 75, 74, 76, 0, 0, 79, 55, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 0, 0, 0,
	120, 0, 0, 0, 77, 44, 56, 97, 59, 65,
	89, 121, 0, 93, 46, 114, 99, 0, 0, 0,
	0, 80, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 60, 132, 0, 0,
	63, 0, 0, 102, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 133, 134, 0, 35,
	41, 62, 146, 0, 148, 88, 51, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 119, 0, 0, 0, 0,
	0, 0, 0, 104, 52, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 81, 113, 0,
	82, 90, 64, 107, 87, 112, 0, 106, 118, 95,
	42, 78, 34, 86, 91, 0, 47, 0, 125, 126,
	127, 128, 129, 130, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 100, 37, 105, 111,
	45, 96, 0, 0, 0, 103, 71, 0, 58, 98,
	0, 38, 0, 0, 48, 85, 0, 0, 0, 0,
	0, 0, 108, 0, 122, 0, 0, 0, 0, 0,
	117, 40, 43, 0, 0, 0, 0, 116, 0, 110,
	72, 68, 0, 39, 109, 70, 67, 0, 0, 50,
	53, 83, 66, 84, 54, 75, 74, 76, 0, 0,
	79, 55, 0, 0, 0, 0, 0, 0, 0, 123,
	124, 0, 0, 0, 120, 0, 0, 0, 77, 44,
	56, 97, 59, 65, 89, 121, 0, 93, 46, 114,
	99, 0, 0, 0, 0, 80, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 49, 1587, 0, 0, 0,
	60, 132, 0, 0, 63, 0, 0, 102, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 57,
	133, 134, 0, 35, 41, 62, 32, 0, 1586, 88,
	51, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1613, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 119,
	0, 0, 0, 0, 0, 0, 0, 104, 52, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 81, 113, 0, 82, 90, 64, 107, 87, 112,
	0, 106, 118, 95, 42, 78, 34, 86, 91, 0,
	47, 0, 125, 126, 127, 128, 129, 130, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	100, 37, 105, 111, 45, 96, 0, 0, 0, 103,
	71, 0, 58, 98, 0, 38, 0, 0, 48, 85,
	0, 0, 0, 0, 0, 0, 108, 0, 122, 0,
	0, 0, 0, 0, 117, 40, 43, 0, 0, 0,
	0, 116, 0, 110, 72, 68, 0, 39, 109, 70,
	67, 0, 0, 50, 53, 83, 66, 84, 54, 75,
	74, 76, 0, 0, 79, 55, 0, 0, 0, 0,
	0, 0, 0, 123, 124, 0, 0, 0, 120, 0,
	0, 0, 77, 44, 56, 97, 59, 65, 89, 121,
	0, 93, 46, 114, 99, 0, 0, 0, 0, 80,
	0, 0, 36, 0, 1569, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 60, 132, 0, 0, 63, 0,
	0, 102, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 133, 134, 0, 35, 41, 62,
	146, 0, 1571, 88, 51, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 119, 0, 0, 0, 0, 0, 0,
	0, 104, 52, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 81, 113, 0, 1567, 90,
	64, 107, 87, 112, 0, 106, 118, 95, 42, 78,
	34, 86, 91, 0, 47, 0, 125, 126, 127, 128,
	129, 130, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 100, 37, 105, 111, 45, 96,
	0, 0, 0, 103, 71, 0, 58, 98, 0, 38,
	0, 0, 48, 85, 0, 0, 0, 0, 0, 0,
	108, 0, 122, 0, 0, 0, 0, 0, 117, 40,
	43, 0, 0, 0, 0, 116, 0, 110, 72, 68,
	0, 39, 109, 70, 67, 0, 0, 50, 53, 83,
	66, 84, 54, 75, 74, 76, 0, 0, 79, 55,
	0, 0, 0, 0, 0, 0, 0, 123, 124, 0,
	0, 0, 120, 0, 0, 0, 77, 44, 56, 97,
	59, 65, 89, 121, 0, 93, 46, 114, 99, 0,
	0, 0, 0, 80, 0, 0, 36, 0, 0, 0,
	0, 0, 1541, 49, 0, 0, 0, 0, 60, 132,
	0, 0, 63, 0, 0, 102, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 133, 134,
	0, 35, 41, 62, 146, 0, 148, 88, 51, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 119, 0, 0,
	0, 0, 0, 0, 0, 104, 52, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 81,
	113, 0, 82, 90, 64, 107, 87, 112, 0, 106,
	118, 95, 42, 78, 34, 86, 91, 0, 47, 0,
	125, 126, 127, 128, 129, 130, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 100, 37,
	105, 111, 45, 96, 0, 0, 0, 103, 71, 0,
	58, 98, 0, 38, 0, 0, 48, 85, 0, 0,
	0, 0, 0, 0, 108, 0, 122, 0, 0, 0,
	0, 0, 117, 40, 43, 0, 0, 0, 0, 116,
	0, 110, 72, 68, 0, 39, 109, 70, 67, 0,
	0, 50, 53, 83, 66, 84, 54, 75, 74, 76,
	0, 0, 79, 55, 0, 0, 0, 0, 0, 0,
	0, 123, 124, 0, 0, 0, 120, 0, 0, 0,
	77, 44, 56, 97, 59, 65, 89, 121, 0, 93,
	46, 114, 99, 0, 0, 0, 1438, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 36, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 60, 132,
	0, 0, 63, 0, 0, 102, 73, 0, 0, 0,
	0, 57, 133, 134, 0, 35, 41, 62, 0, 0,
	0, 88, 51, 115, 146, 0, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 119, 0, 0,
	0, 0, 0, 0, 0, 104, 52, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 81,
	113, 0, 82, 90, 64, 107, 87, 112, 0, 106,
	118, 95, 42, 78, 34, 86, 91, 0, 47, 0,
	125, 126, 127, 128, 129, 130, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 100, 37,
	105, 111, 45, 96, 0, 0, 0, 103, 71, 0,
	58, 98, 0, 38, 0, 0, 48, 85, 0, 0,
	0, 0, 0, 0, 108, 0, 122, 0, 0, 0,
	0, 0, 117, 40, 43, 0, 0, 0, 0, 116,
	0, 110, 72, 68, 0, 39, 109, 70, 67, 0,
	0, 50, 53, 83, 66, 84, 54, 75, 74, 76,
	0, 0, 79, 55, 0, 0, 0, 0, 0, 0,
	0, 123, 124, 0, 0, 0, 120, 0, 0, 0,
	77, 44, 56, 97, 59, 65, 89, 121, 0, 93,
	46, 114, 99, 0, 0, 0, 0, 80, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	0, 0, 60, 132, 0, 0, 63, 0, 0, 102,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 133, 134, 0, 35, 41, 62, 534, 0,
	148, 88, 51, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 119, 0, 0, 0, 0, 0, 0, 0, 104,
	52, 0, 61, 0, 0, 0, 595, 0, 0, 0,
	0, 0, 92, 81, 113, 0, 82, 90, 64, 107,
	87, 112, 0, 106, 118, 95, 42, 78, 34, 86,
	91, 0, 47, 0, 125, 126, 127, 128, 129, 130,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 100, 37, 105, 111, 45, 96, 0, 0,
	0, 103, 71, 0, 58, 98, 0, 38, 0, 0,
	48, 85, 0, 0, 0, 0, 0, 0, 108, 0,
	122, 0, 0, 0, 0, 0, 117, 40, 43, 0,
	0, 0, 0, 116, 0, 110, 72, 68, 0, 39,
	109, 70, 67, 0, 0, 50, 53, 83, 66, 84,
	54, 75, 74, 76, 0, 0, 79, 55, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 0, 0, 0,
	120, 0, 0, 0, 77, 44, 56, 97, 59, 65,
	89, 121, 0, 93, 46, 114, 99, 0, 0, 0,
	0, 80, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 60, 132, 0, 0,
	63, 0, 0, 102, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 133, 134, 0, 35,
	41, 62, 146, 0, 148, 88, 51, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 119, 0, 0, 0, 0,
	0, 0, 0, 104, 52, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 81, 113, 0,
	82, 90, 64, 107, 87, 112, 0, 106, 118, 95,
	42, 78, 34, 86, 91, 0, 47, 0, 125, 126,
	127, 128, 129, 130, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 100, 37, 105, 111,
	45, 96, 0, 0, 0, 103, 71, 0, 58, 98,
	0, 38, 0, 0, 48, 85, 0, 0, 0, 0,
	0, 0, 108, 0, 122, 0, 0, 0, 0, 0,
	117, 40, 43, 0, 0, 0, 0, 116, 0, 110,
	72, 68, 0, 39, 109, 70, 67, 0, 0, 50,
	53, 83, 66, 84, 54, 75, 74, 76, 0, 0,
	79, 55, 0, 0, 0, 0, 0, 0, 0, 123,
	124, 0, 0, 0, 120, 0, 0, 0, 77, 44,
	56, 97, 59, 65, 89, 121, 247, 93, 46, 114,
	99, 80, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 60, 132, 0, 0,
	63, 0, 0, 102, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 57,
	133, 134, 32, 35, 41, 62, 0, 0, 0, 88,
	51, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 119, 0, 0, 0, 0,
	0, 0, 0, 104, 52, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 81, 113, 0,
	82, 90, 64, 107, 87, 112, 0, 106, 118, 95,
	42, 78, 34, 86, 91, 0, 47, 0, 125, 126,
	127, 128, 129, 130, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 101, 100, 37, 105, 111,
	45, 96, 0, 0, 0, 103, 71, 0, 58, 98,
	0, 38, 0, 0, 48, 85, 0, 0, 0, 0,
	0, 0, 108, 0, 122, 0, 0, 0, 0, 0,
	117, 40, 43, 0, 0, 0, 0, 116, 0, 110,
	72, 68, 0, 39, 109, 70, 67, 0, 0, 50,
	53, 83, 66, 84, 54, 75, 74, 76, 0, 0,
	79, 55, 0, 0, 0, 0, 0, 0, 0, 123,
	124, 0, 0, 0, 120, 0, 0, 0, 77, 44,
	56, 97, 59, 65, 89, 121, 0, 93, 46, 114,
	99, 0, 0, 0, 0, 80, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	60, 132, 0, 0, 63, 0, 0, 102, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 57,
	133, 134, 0, 35, 41, 62, 534, 0, 148, 88,
	51, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 119,
	0, 0, 0, 0, 0, 0, 0, 104, 52, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 81, 113, 0, 82, 90, 64, 107, 87, 112,
	0, 106, 118, 95, 42, 78, 34, 86, 91, 0,
	47, 0, 125, 126, 127, 128, 129, 130, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	100, 37, 105, 111, 45, 96, 0, 0, 0, 103,
	71, 0, 58, 98, 0, 38, 0, 0, 48, 85,
	0, 0, 0, 0, 0, 0, 108, 0, 122, 0,
	0, 0, 0, 0, 117, 40, 43, 0, 0, 0,
	0, 116, 0, 110, 72, 68, 0, 39, 109, 70,
	67, 0, 0, 50, 53, 83, 66, 84, 54, 75,
	74, 76, 0, 0, 79, 55, 0, 0, 0, 0,
	0, 0, 0, 123, 124, 0, 0, 0, 120, 0,
	0, 0, 77, 44, 56, 97, 59, 65, 89, 121,
	0, 93, 46, 114, 99, 80, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	60, 132, 0, 0, 63, 0, 0, 102, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 133, 134, 32, 35, 41, 62,
	0, 0, 0, 88, 51, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 119,
	0, 0, 0, 0, 0, 0, 0, 104, 52, 0,
	61, 0, 0, 0, 741, 0, 0, 0, 0, 0,
	92, 81, 113, 0, 82, 90, 64, 107, 87, 112,
	0, 106, 118, 95, 42, 78, 34, 86, 91, 0,
	47, 0, 125, 126, 127, 128, 129, 130, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	100, 37, 105, 111, 45, 96, 0, 0, 0, 103,
	71, 0, 58, 98, 0, 38, 0, 0, 48, 85,
	0, 0, 0, 0, 0, 0, 108, 0, 122, 0,
	0, 0, 0, 0, 117, 40, 43, 0, 0, 0,
	0, 116, 0, 110, 72, 68, 0, 39, 109, 70,
	67, 0, 0, 50, 53, 83, 66, 84, 54, 75,
	74, 76, 0, 0, 79, 55, 0, 0, 0, 0,
	0, 0, 0, 123, 124, 0, 0, 0, 120, 0,
	0, 0, 77, 44, 56, 97, 59, 65, 89, 121,
	0, 93, 46, 114, 99, 0, 0, 0, 0, 80,
	0, 0, 36, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 60, 132, 0, 0, 63, 0,
	0, 102, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 133, 134, 0, 35, 41, 62,
	146, 0, 148, 88, 51, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 119, 0, 0, 0, 0, 0, 0,
	0, 104, 52, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 81, 113, 0, 82, 90,
	64, 107, 87, 112, 0, 106, 118, 95, 42, 78,
	34, 86, 91, 0, 47, 0, 125, 126, 127, 128,
	129, 130, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 100, 37, 105, 111, 45, 96,
	0, 0, 0, 103, 71, 0, 58, 98, 0, 38,
	0, 0, 48, 85, 0, 0, 0, 0, 0, 0,
	108, 0, 122, 0, 0, 0, 0, 0, 117, 40,
	43, 0, 0, 0, 0, 116, 0, 110, 72, 68,
	0, 39, 109, 70, 67, 0, 0, 50, 53, 83,
	66, 84, 54, 75, 74, 76, 0, 0, 79, 55,
	0, 0, 0, 0, 0, 0, 0, 123, 124, 0,
	0, 0, 120, 0, 0, 0, 77, 44, 56, 97,
	59, 65, 89, 121, 0, 93, 46, 114, 99, 0,
	0, 0, 0, 80, 0, 0, 36, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 60, 132,
	0, 0, 63, 0, 0, 102, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 133, 134,
	0, 35, 41, 62, 146, 0, 1571, 88, 51, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 119, 0, 0,
	0, 0, 0, 0, 0, 104, 52, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 81,
	113, 0, 82, 90, 64, 107, 87, 112, 0, 106,
	118, 95, 42, 78, 34, 86, 91, 0, 47, 0,
	125, 126, 127, 128, 129, 130, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 100, 37,
	105, 111, 45, 96, 0, 0, 0, 103, 71, 0,
	58, 98, 0, 38, 0, 0, 48, 85, 0, 0,
	0, 0, 0, 0, 108, 0, 122, 0, 0, 0,
	0, 0, 117, 40, 43, 0, 0, 0, 0, 116,
	0, 110, 72, 68, 0, 39, 109, 70, 67, 0,
	0, 50, 53, 83, 66, 84, 54, 75, 74, 76,
	0, 0, 79, 55, 0, 0, 0, 0, 0, 0,
	0, 123, 124, 0, 0, 0, 120, 0, 0, 0,
	77, 44, 56, 97, 59, 65, 89, 121, 0, 93,
	46, 114, 99, 80, 0, 0, 36, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 60, 132,
	0, 0, 63, 0, 0, 102, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 133, 134, 32, 35, 41, 62, 0, 0,
	0, 88, 51, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 119, 0, 0,
	0, 0, 0, 0, 0, 104, 52, 0, 61, 0,
	0, 0, 595, 0, 0, 0, 0, 0, 92, 81,
	113, 0, 82, 90, 64, 107, 87, 112, 0, 106,
	118, 95, 42, 78, 34, 86, 91, 0, 47, 0,
	125, 126, 127, 128, 129, 130, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 100, 37,
	105, 111, 45, 96, 0, 0, 0, 103, 71, 0,
	58, 98, 0, 38, 0, 0, 48, 85, 0, 0,
	0, 0, 0, 0, 108, 0, 122, 0, 0, 0,
	0, 0, 117, 40, 43, 0, 0, 0, 0, 116,
	0, 110, 72, 68, 0, 39, 109, 70, 67, 0,
	0, 50, 53, 83, 66, 84, 54, 75, 74, 76,
	0, 0, 79, 55, 0, 0, 0, 0, 0, 0,
	0, 123, 124, 0, 0, 0, 120, 0, 0, 0,
	77, 44, 56, 97, 59, 65, 89, 121, 0, 93,
	46, 114, 99, 0, 0, 0, 0, 80, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	0, 0, 60, 132, 0, 0, 63, 0, 0, 102,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 133, 134, 0, 35, 41, 62, 32, 0,
	1101, 88, 51, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 119, 0, 0, 0, 0, 0, 0, 0, 104,
	52, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 81, 113, 0, 82, 90, 64, 107,
	87, 112, 0, 106, 118, 95, 42, 78, 34, 86,
	91, 0, 47, 0, 125, 126, 127, 128, 129, 130,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 100, 37, 105, 111, 45, 96, 0, 0,
	0, 103, 71, 0, 58, 98, 0, 38, 0, 0,
	48, 85, 0, 0, 0, 0, 0, 0, 108, 0,
	122, 0, 0, 0, 0, 0, 117, 40, 43, 0,
	0, 0, 0, 116, 0, 110, 72, 68, 0, 39,
	109, 70, 67, 0, 0, 50, 53, 83, 66, 84,
	54, 75, 74, 76, 0, 0, 79, 55, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 0, 0, 0,
	120, 0, 0, 0, 77, 44, 56, 97, 59, 65,
	89, 121, 0, 93, 46, 114, 99, 80, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	0, 0, 60, 132, 0, 0, 63, 0, 0, 102,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 133, 134, 32, 35,
	41, 62, 0, 0, 0, 88, 51, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 119, 0, 0, 143, 0, 0, 0, 0, 104,
	52, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 81, 113, 0, 82, 90, 64, 107,
	87, 112, 0, 106, 118, 95, 42, 78, 34, 86,
	91, 0, 47, 0, 125, 126, 127, 128, 129, 130,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 100, 37, 105, 111, 45, 96, 0, 0,
	0, 103, 71, 0, 58, 98, 0, 38, 0, 0,
	48, 85, 0, 0, 0, 0, 0, 0, 108, 0,
	122, 0, 0, 0, 0, 0, 117, 40, 43, 0,
	0, 0, 0, 116, 0, 110, 72, 68, 0, 39,
	109, 70, 67, 0, 0, 50, 53, 83, 66, 84,
	54, 75, 74, 76, 0, 0, 79, 55, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 0, 0, 0,
	120, 0, 0, 0, 77, 44, 56, 97, 59, 65,
	89, 121, 0, 93, 46, 114, 99, 0, 0, 0,
	0, 80, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 60, 132, 0, 0,
	63, 0, 0, 102, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 133, 134, 0, 35,
	41, 62, 32, 0, 31, 88, 51, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 119, 0, 0, 0, 0,
	0, 0, 0, 104, 52, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 81, 113, 0,
	82, 90, 64, 107, 87, 112, 0, 106, 118, 95,
	42, 78, 34, 86, 91, 0, 47, 0, 125, 126,
	127, 128, 129, 130, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 100, 37, 105, 111,
	45, 96, 0, 0, 0, 103, 71, 0, 58, 98,
	0, 38, 0, 0, 48, 85, 0, 0, 0, 0,
	0, 0, 108, 0, 122, 0, 0, 0, 0, 0,
	117, 40, 43, 0, 0, 0, 0, 116, 0, 110,
	72, 68, 0, 39, 109, 70, 67, 0, 0, 50,
	53, 83, 66, 84, 54, 75, 74, 76, 0, 0,
	79, 55, 0, 0, 0, 0, 0, 0, 0, 123,
	124, 0, 0, 0, 120, 0, 0, 0, 77, 44,
	56, 97, 59, 65, 89, 121, 0, 93, 46, 114,
	99, 80, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 60, 132, 0, 0,
	63, 0, 0, 102, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 57,
	133, 134, 32, 35, 41, 62, 0, 0, 0, 88,
	51, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 119, 0, 0, 0, 0,
	0, 0, 0, 104, 52, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 81, 113, 0,
	82, 90, 64, 107, 87, 112, 0, 106, 118, 95,
	42, 78, 34, 86, 91, 0, 47, 0, 125, 126,
	127, 128, 129, 130, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 100, 37, 105, 111,
	45, 96, 0, 0, 0, 103, 71, 0, 58, 98,
	0, 38, 0, 0, 48, 85, 0, 0, 0, 0,
	0, 0, 108, 0, 122, 0, 0, 0, 0, 0,
	117, 40, 43, 0, 0, 0, 0, 116, 0, 110,
	72, 68, 0, 39, 109, 70, 67, 0, 0, 50,
	53, 83, 66, 84, 54, 75, 74, 76, 0, 0,
	79, 55, 0, 0, 0, 0, 0, 0, 0, 123,
	124, 0, 0, 0, 120, 0, 0, 0, 77, 44,
	56, 97, 59, 65, 89, 121, 0, 93, 46, 114,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 57,
	133, 134, 0, 35, 41, 62, 0, 0, 0, 88,
	51, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94,
}

var yyPact = [...]int16{
	437, -1000, -259, -1000, -1000, 1200, 848, 329, -1000, -1000,
	-1000, 19193, 376, 371, 217, 349, 19473, 18909, 17781, 392,
	327, -1000, -234, -217, -1000, -67, 381, -1000, 976, -1000,
	11440, 11440, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 16933, 19473, 327, 131, 327,
	1211, 503, 19473, 628, 1354, 509, -1000, -1000, -1000, 327,
	17781, -1000, -1000, -1000, -1000, 16653, 186, 12920, 79, -156,
	18, -1000, -1000, -1000, -1000, -1000, 1094, -1000, -1000, -1000,
	1094, 270, 1199, 1094, 1199, -1000, 1094, 1199, 68, 68,
	68, 68, 68, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1198, 1182, -1000, 1094, 1094, 1094, 1094, 1094, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1162, 260,
	1162, 1102, 1102, -1000, -1000, 79, 1186, 17781, 19473, 1210,
	17781, -238, 17781, 17781, 1420, 17781, -1000, -1000, -1000, 157,
	382, 1304, 11440, 6556, 17781, -1000, 420, 17781, 5818, 1085,
	1285, -1000, -1000, -1000, -1000, -1000, -1000, 1168, 718, 19473,
	297, 299, 386, 378, 842, -1000, -1000, -1000, 714, -1000,
	19473, -1000, 1448, -1000, -1000, 294, -1000, 292, 627, 817,
	17781, 1165, 133, 1163, 12345, 768, -1000, -274, -1000, 23,
	-1000, -1000, 758, 68, 68, 1094, 68, 756, 68, 68,
	-1000, -1000, 514, 1292, 514, 514, 514, 514, 813, 813,
	-97, -97, -1000, -1000, -1000, -1000, 766, 1162, -1000, -1000,
	-1000, 765, -1000, 17781, 19473, 1159, 1209, 17781, 1352, 348,
	-1000, -1000, 1351, 1337, 1061, -1000, -1000, 156, -1000, 382,
	-1000, 1420, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1083, 304, 396, 6187, -1000,
	-1000, -1000, -1000, 186, -1000, 18345, -1000, 1437, 1377, 307,
	-5, -1000, 839, 836, -1000, 834, -1000, -1000, -6, -1000,
	-224, 100, 16, -1000, -1000, 1003, -1000, 1158, 9276, 1322,
	-1000, 1295, 764, -1000, 12014, -1000, -250, -1000, -1000, -1000,
	-250, -1000, -1000, -1000, 1003, -1000, 1152, 1149, -1000, 1147,
	-1000, -1000, 1003, 475, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1055, 514, 514, 68, 514, 1051, 1050, 514, 514,
	-1000, -1000, 828, 574, -1000, -1000, -1000, -1000, 973, -1000,
	971, -1000, 87, 86, -1000, 1082, -1000, 948, 1081, 1208,
	16369, 17781, 1148, 1120, 327, 1120, 1376, 232, 17781, 1420,
	17497, 1420, 1053, 19473, 291, 19473, -1000, -1000, 315, 3604,
	-1000, 5818, 946, -1000, 249, 1094, 430, 430, -231, 287,
	286, 1003, -1000, -1000, -1000, -1000, -220, -1000, -1000, -1000,
	-1000, 627, -1000, 1147, 9276, -1000, 17497, 694, -1000, 9276,
	74, 1003, 1003, -1000, -1000, 504, -1000, -1000, -1000, 9938,
	9938, 9938, 9938, 9938, 9938, 9938, -1000, -1000, -1000, -1000,
	37, -250, -1000, 821, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 469, 466, -1000, 8945, 1003, 1003, 1003, 1003, 1003,
	1003, 1003, 1003, 9276, 1003, 1275, 1003, 1003, 1003, 1003,
	1003, 1003, 1003, 1003, 2196, 1003, 1003, 1003, 1003, -1000,
	90, -1000, 1076, 1047, 1429, 1046, -1000, 10880, -1000, 845,
	-1000, 751, -1000, 747, 1038, 7940, 6925, -1000, -1000, -1000,
	514, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 68,
	799, 68, 21, 17, 763, -1000, 762, 16369, 19473, 17781,
	1037, 1075, -1000, 248, 1144, 17497, -1000, 1408, 1453, -1000,
	1120, 17781, -1000, 333, 1403, -1000, -1000, 1363, -1000, 1074,
	-1000, -1000, 1063, 17781, 1143, 19473, -1000, -1000, 305, 19473,
	-1000, -1000, -1000, -1000, -1000, 317, 18345, 1305, -1000, -1000,
	-1000, 699, -1000, -1000, 684, 219, 697, -1000, 19473, -220,
	9276, -1000, 1003, 585, 944, -130, 9276, 9276, 670, 538,
	9938, 744, 559, 9938, 9938, 9938, 9938, 9938, 9938, 9938,
	9938, 9938, 9938, 9938, 9938, 9938, 9938, 9938, 792, 2141,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 826, -1000, 1120, 12636, 12636, 11, 11, 11,
	11, 11, 11, 11720, -1000, -267, -1000, -1000, 5449, 6925,
	845, 941, 663, 8945, 8602, 8602, 7278, 9276, 9938, 17217,
	8602, 1356, 622, 663, 17217, 1361, -1000, 845, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 71, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 8602, 8602, 8602, 8602, 9276, 1142, 759, -1000, 1017,
	-250, 1003, -1000, 254, 134, -1000, -1000, 68, -1000, -1000,
	-156, -1000, -1000, -1000, -1000, -1000, 845, 8602, 933, 941,
	-1000, 13204, -1000, 464, 1003, -1000, 514, -1000, 514, -1000,
	-1000, 1002, 1000, 993, 1133, 1132, -237, 758, 16369, 939,
	1387, 1405, 1120, 1321, 1258, -1000, 845, 1314, 19473, -1000,
	-1000, -1000, -1000, -1000, 197, 19473, 2560, 1360, -1000, 13496,
	1119, 1106, 319, 1204, 733, 111, -1000, 824, 590, 798,
	588, 586, 584, 583, 572, 564, 554, -1000, -1000, -1000,
	-1000, -1000, 1447, -1000, -1000, -1000, 1432, 1104, -1000, 1103,
	585, 9276, 224, 1207, -1000, -1000, 538, 571, -1000, -1000,
	726, -1000, -1000, 1935, -1000, -1000, -1000, -1000, 744, 9938,
	9938, 9938, 1282, 1935, 1869, 962, 937, 11, 146, 146,
	8, 8, 8, 8, 8, 91, 91, -1000, -1000, -1000,
	-1000, -111, -1000, 1094, 260, 845, -1000, -250, 796, -1000,
	-1000, 771, 1003, 461, -1000, -1000, -1000, 9276, -1000, 845,
	933, 13204, 933, 616, 1073, 10269, 1094, -1000, 1094, 1102,
	-1000, -1000, 106, 1094, 102, -1000, -1000, -1000, -1000, 1102,
	-1000, -1000, -1000, -1000, -1000, 1094, 1094, -1000, -1000, 1094,
	1094, -1000, 1094, 1094, 691, 545, 1823, 1044, -1000, 455,
	933, 8602, -1000, 605, -1000, 9276, 845, 17781, -1000, -1000,
	933, 845, 1071, 933, 933, 654, -1000, 968, 920, 1094,
	-1000, -1000, -1000, 933, 8602, -257, -1000, -1000, -1000, 18629,
	-1000, -1000, 3235, 8602, -1000, -1000, -1000, -1000, -237, 16369,
	18345, 1415, 1101, 905, 1415, 1301, 9276, 9276, 1408, -1000,
	1120, -1000, -1000, 1356, -1000, -1000, 648, -1000, 1120, 927,
	-1000, 192, -1000, 2560, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1408, -1000, -1000, -1000, 19473, 2616,
	19473, 19473, 19473, 429, 9607, 9276, -1000, -1000, -1000, 617,
	187, 888, 10600, 13496, 13496, 10600, 13496, 13496, 18345, 18345,
	284, -1000, 19473, -1000, -157, 733, 19473, -1000, 750, -1000,
	-1000, 727, 749, 727, 727, 727, 727, 727, 430, 430,
	19473, 18345, 224, 585, -1000, -85, 1431, -1000, -1000, -1000,
	-1000, 1282, 1935, 1261, -1000, 9938, 9938, 83, -1000, 49,
	-1000, -250, 6925, 663, -1000, -1000, -1000, 2861, 792, 9276,
	-1000, 250, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2861, 9938, 9938, 9938, 9938, 9938,
	5449, -101, 911, 599, -1000, 9276, 652, -1000, -1000, -1000,
	-1000, -1000, -1000, -136, 67, -1000, -1000, -1000, -1000, -1000,
	1003, -1000, -1000, 448, 845, 1415, 847, 929, 317, 9276,
	17497, -237, 317, -1000, 1443, 527, 645, 1067, -1000, 631,
	1387, 845, 1224, -1000, -1000, -113, 19473, 9276, 2470, -1000,
	1387, 329, 16085, 14659, 1065, 11160, -1000, 5080, 729, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 19473, 1426, 1424, 1422, 1421, 2314,
	74, 634, 123, 119, 9276, 191, -1000, -1000, 10600, -1000,
	-1000, -1000, -1000, -1000, 918, 916, 1098, 1003, 913, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 627, 627, 904, 896, -1000, 224, -1000, 430, 430,
	-1000, 9938, 1935, 1935, 12, -1000, 771, -1000, -1000, 845,
	1094, 845, 585, -1000, -1000, 845, 732, 912, 1246, 303,
	760, -1000, 1003, -76, -1000, 663, 9276, -1000, -1000, -1000,
	161, 757, 728, 719, 711, 31, -1000, 1404, 401, 4711,
	-1000, 317, 1415, 317, 1204, 663, 891, 1415, 1204, -1000,
	1270, 9276, 9276, 9276, -1000, 1301, -1000, 8602, -1000, -1000,
	-253, -1000, 663, -1000, -1000, 2560, 1301, 15795, 17781, 910,
	-1000, 1025, 1355, -1000, -1000, -1000, 1309, 13789, 15511, 19473,
	181, -1000, -1000, 1064, 4342, -4, -1000, -1000, -1000, 552,
	442, 15227, -1000, 1291, -1000, -1000, 2616, 1302, -1000, -1000,
	-1000, -1000, -1000, 2560, 2560, 2560, 2560, 663, -1000, -1000,
	267, 18345, 19473, -1000, 733, -1000, -1000, 313, 317, -1000,
	-1000, -1000, 1935, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	9938, 9938, -1000, 9938, 9938, 9938, 845, 734, 663, 671,
	-1000, 662, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14943,
	-1000, 1398, 845, -1000, 1204, 317, -1000, -1000, -1000, 317,
	-1000, 1268, 663, 663, -1000, -1000, 1042, 9276, -265, -1000,
	237, 17781, -1000, 237, 902, 14659, 17781, -1000, -1000, 17217,
	14659, 14659, 14659, 14659, 14659, -1000, 1255, 1240, -1000, 1239,
	1228, 1245, 17781, -1000, 887, 13789, 560, 1003, -1000, 18065,
	-1000, -1000, -1000, 11440, 1325, 3973, 1064, -4, 1062, -1000,
	-8, -26, 7609, 6925, 514, -1000, -1000, -1000, -1000, -1000,
	19473, 282, -1000, 338, 185, 323, 144, -1000, 153, 884,
	845, -1000, 17781, 1204, 732, 732, 732, 732, 433, -1000,
	-1000, -1000, -1000, -1000, 436, 9276, -1000, -1000, -1000, 1204,
	-1000, 1415, 14659, 663, 597, 924, 1003, -1000, 1415, 14659,
	1023, -1000, 1024, -1000, 550, 1355, 1093, 1203, 1043, -1000,
	-1000, -1000, -1000, 1232, -1000, 1231, -1000, -1000, -1000, -1000,
	-139, 370, 369, 357, 19473, -1000, 1120, -1000, 1062, -4,
	-11, -1000, -1000, -1000, -1000, 663, 549, -1000, -1000, -1000,
	-1000, 2560, 596, 612, 2297, -1000, 141, -1000, -1000, -1000,
	1090, -1000, -1000, -1000, -1000, -1000, 845, 190, -187, 6925,
	865, -1000, 663, -1000, 1413, 1057, -1000, 1188, 17217, 1003,
	-1000, 14366, 19473, 1408, 1023, -1000, 1408, 17217, 9276, -1000,
	-1000, 9276, 1088, -1000, 9276, -1000, -1000, -1000, -1000, 1087,
	1003, 1003, 1003, 877, -1000, -1000, -1000, -1000, -23, -31,
	-1000, 9276, -1000, 322, 118, -1000, -1000, -1000, 19473, -1000,
	1263, -105, -194, -1000, -1000, 845, 9276, 1411, 1391, -1000,
	1299, 955, 1026, -1000, -1000, 8271, 845, 881, 434, 877,
	1387, -1000, 1387, -1000, 663, 663, 17497, 663, -159, 17497,
	17497, 17497, 14073, 19473, -1000, -1000, -1000, 663, -1000, 2560,
	875, -1000, 1249, -1000, -1000, -1000, -1000, 9276, 9276, 273,
	-1000, 1003, -1000, -1000, 1001, 19473, 19473, -1000, -1000, -1000,
	862, 860, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 858,
	858, 858, 560, -1000, 107, -1000, -116, 663, 1045, 1435,
	-1000, 1003, -1000, 1120, 431, -1000, -1000, -1000, -159, -1000,
	-1000, -1000, -139, -1000, -191, 17217, 1026, 845, 19473, -1000,
	-1000, -200, 849, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1701, 73, 58, 1698, 1695, 1694, 1693, 1692, 1689,
	1688, 1687, 1686, 1683, 1681, 1679, 1678, 1677, 1676, 82,
	1671, 1661, 1658, 69, 1654, 1652, 1651, 1649, 64, 53,
	70, 66, 1443, 1648, 27, 38, 33, 1644, 34, 1641,
	1640, 47, 1638, 28, 1636, 1634, 318, 1633, 1632, 6,
	41, 71, 95, 1631, 1629, 83, 1606, 1628, 1627, 74,
	1626, 1625, 72, 5, 4, 11, 7, 1622, 114, 9,
	1621, 67, 1619, 1618, 1617, 1616, 36, 1615, 48, 54,
	24, 52, 1614, 10, 63, 37, 21, 14, 1, 43,
	23, 1613, 20, 29, 22, 1612, 49, 1609, 100, 1608,
	1602, 75, 0, 366, 26, 80, 1600, 1599, 1598, 989,
	68, 25, 13, 1597, 59, 1596, 62, 91, 30, 84,
	79, 1594, 86, 1593, 1587, 1583, 1993, 400, 101, 96,
	57, 1582, 1578, 78, 87, 269, 77, 263, 435, 65,
	1577, 1575, 1571, 94, 1567, 46, 81, 16, 306, 1564,
	1556, 1550, 1549, 1548, 107, 1545, 89, 1544, 76, 90,
	55, 39, 40, 1541, 1540, 1538, 1537, 61, 1527, 1524,
	1523, 50, 1522, 1521, 88, 56, 103, 93, 104, 1516,
	1514, 60, 274, 99, 1513, 98, 35, 8, 51, 1512,
	44, 1511, 1508, 1507, 2, 3, 1505, 1503, 1497, 1496,
	1495, 1488, 45, 1480, 1479, 1475, 15, 1473, 1471, 42,
	1468, 1467, 1465, 1464, 1463, 1346, 1064, 1461, 85, 1460,
	1431, 92,
}

var yyR1 = [...]uint8{
	0, 211, 212, 212, 1, 1, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 15, 15, 15, 15, 15, 214, 214, 2,
	2, 3, 4, 4, 5, 5, 6, 6, 22, 22,
	7, 8, 8, 8, 217, 217, 41, 41, 85, 85,
	9, 9, 9, 9, 10, 10, 191, 191, 190, 192,
	192, 11, 11, 11, 11, 11, 184, 184, 184, 184,
	184, 12, 12, 187, 187, 187, 13, 13, 13, 90,
	90, 94, 94, 94, 95, 95, 95, 95, 203, 203,
	115, 115, 213, 213, 218, 218, 218, 218, 218, 218,
	218, 182, 182, 182, 182, 183, 183, 183, 183, 185,
	185, 186, 186, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 189, 189, 100, 100, 165, 165, 165,
	166, 166, 166, 166, 166, 166, 168, 168, 169, 169,
	107, 107, 170, 170, 18, 150, 151, 151, 151, 151,
	151, 151, 151, 138, 138, 118, 118, 118, 118, 118,
	118, 118, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	176, 176, 176, 176, 176, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 178, 179, 180, 172, 172, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 128, 128, 128, 128, 128, 128, 171,
	171, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	122, 122, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 121, 121, 121, 121, 121, 121, 121, 121,
	123, 123, 123, 123, 123, 123, 123, 123, 119, 119,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 125, 125, 125, 125, 125, 125, 125,
	125, 137, 137, 126, 126, 135, 135, 136, 136, 136,
	127, 127, 127, 134, 134, 134, 131, 131, 132, 132,
	133, 133, 133, 129, 129, 129, 130, 130, 130, 140,
	161, 161, 161, 163, 163, 164, 164, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 149, 149,
	181, 181, 160, 160, 160, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 148, 148, 158, 158, 159, 159,
	156, 156, 156, 157, 143, 143, 143, 143, 143, 144,
	145, 145, 145, 145, 141, 142, 174, 174, 174, 207,
	207, 207, 207, 207, 207, 208, 208, 175, 175, 146,
	146, 147, 147, 154, 154, 154, 154, 219, 219, 152,
	152, 152, 153, 153, 153, 220, 19, 20, 20, 21,
	21, 21, 25, 25, 25, 23, 23, 24, 24, 30,
	30, 29, 29, 31, 31, 31, 31, 106, 106, 106,
	105, 105, 204, 204, 204, 204, 204, 33, 33, 34,
	34, 35, 35, 36, 36, 36, 194, 194, 193, 193,
	195, 195, 195, 195, 195, 195, 48, 48, 83, 83,
	83, 86, 86, 37, 37, 37, 37, 38, 38, 39,
	39, 40, 40, 113, 113, 112, 112, 112, 111, 111,
	42, 42, 42, 44, 43, 43, 43, 43, 45, 45,
	47, 47, 46, 46, 49, 49, 49, 49, 50, 50,
	84, 84, 32, 32, 32, 32, 32, 32, 32, 97,
	97, 52, 52, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 61, 61, 61, 61, 61, 61, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	28, 28, 62, 62, 62, 68, 63, 63, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 59, 59, 59, 59, 59,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 221, 221, 60, 60,
	60, 60, 26, 26, 26, 26, 26, 114, 114, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 117, 117, 117, 117, 117, 117, 117, 117, 72,
	72, 27, 27, 70, 70, 71, 99, 99, 73, 73,
	69, 69, 69, 196, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 74, 74, 75, 75, 205, 205,
	206, 76, 76, 77, 77, 78, 79, 79, 79, 80,
	80, 80, 80, 81, 81, 81, 54, 54, 54, 54,
	54, 54, 82, 82, 82, 82, 87, 87, 64, 64,
	66, 66, 65, 67, 88, 88, 92, 89, 89, 93,
	93, 93, 93, 93, 16, 17, 91, 91, 91, 108,
	108, 108, 98, 98, 96, 96, 103, 103, 104, 104,
	109, 109, 109, 110, 110, 197, 197, 197, 198, 198,
	198, 199, 199, 200, 201, 201, 202, 210, 210, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 215,
	216,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 7, 10, 7, 11, 11, 9, 14,
	5, 8, 11, 13, 13, 6, 7, 1, 1, 4,
	6, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	8, 8, 7, 6, 1, 1, 1, 3, 0, 4,
	3, 4, 5, 4, 2, 6, 1, 3, 2, 0,
	1, 2, 2, 2, 3, 5, 0, 2, 2, 2,
	2, 3, 5, 1, 2, 3, 7, 5, 9, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 0, 3, 0, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 1, 1, 1, 3, 1,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 1, 4, 0, 3, 0, 2, 2,
	0, 2, 2, 2, 2, 2, 0, 2, 0, 3,
	0, 1, 0, 2, 4, 4, 0, 1, 3, 3,
	3, 3, 3, 2, 2, 3, 1, 1, 1, 1,
	1, 0, 2, 2, 3, 2, 4, 2, 4, 2,
	2, 3, 2, 3, 2, 7, 9, 3, 3, 6,
	9, 9, 6, 6, 8, 8, 5, 8, 7, 4,
	2, 4, 6, 2, 4, 2, 1, 1, 1, 2,
	1, 1, 1, 3, 1, 2, 1, 1, 2, 0,
	4, 3, 4, 3, 3, 3, 3, 3, 3, 3,
	2, 4, 6, 2, 3, 2, 3, 1, 3, 0,
	2, 0, 3, 3, 2, 2, 2, 2, 2, 3,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 2, 2, 2, 2, 1, 1,
	1, 3, 3, 2, 2, 2, 1, 1, 1, 1,
	4, 4, 4, 4, 4, 1, 5, 2, 2, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 3, 0, 5, 0, 3, 5,
	0, 3, 3, 0, 3, 3, 0, 1, 0, 1,
	0, 2, 1, 0, 3, 3, 0, 1, 2, 6,
	0, 1, 4, 1, 2, 1, 3, 2, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	1, 1, 0, 2, 5, 2, 3, 3, 2, 3,
	2, 2, 3, 4, 1, 1, 1, 1, 1, 3,
	3, 2, 2, 1, 2, 5, 5, 8, 8, 13,
	1, 1, 2, 2, 10, 7, 0, 1, 1, 0,
	1, 1, 1, 2, 2, 1, 2, 0, 3, 0,
	1, 1, 3, 0, 4, 1, 3, 2, 1, 1,
	2, 1, 1, 1, 1, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 3, 6, 4, 7, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 0, 4, 1, 3,
	1, 1, 1, 1, 1, 1, 4, 8, 1, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	0, 4, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	6, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 2, 4, 5, 5, 6, 4,
	4, 4, 6, 6, 6, 6, 6, 8, 8, 6,
	8, 8, 9, 7, 5, 4, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 2, 2, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 0, 2,
	1, 3, 5, 3, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 3, 0, 2, 1, 3,
	1, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 5, 3, 1, 3, 1, 2, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 2, 0, 2,
	2, 0, 1, 4, 1, 3, 2, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}

var yyChk = [...]int16{
	-1000, -211, -1, -14, -15, -18, 122, 123, -212, 377,
	-150, 56, -207, -208, -170, 131, 144, 162, 163, 349,
	129, 361, 362, 146, 364, 76, -96, 134, -151, -138,
	-103, 61, 59, -102, 169, 340, 21, 204, 218, 250,
	238, 341, 167, 239, 286, 207, 295, 173, 221, 28,
	256, 347, 141, 257, 261, 268, 287, 336, 215, 289,
	33, 143, 342, 37, 159, 290, 259, 253, 248, 131,
	252, 213, 247, 41, 263, 262, 264, 285, 168, 267,
	18, 154, 157, 258, 260, 222, 170, 161, 346, 291,
	158, 171, 153, 294, 363, 166, 208, 288, 216, 297,
	203, 202, 40, 212, 140, 205, 164, 160, 229, 251,
	246, 206, 162, 155, 296, 348, 244, 237, 165, 132,
	281, 292, 231, 276, 277, 175, 176, 177, 178, 179,
	180, 181, 34, 337, 338, 130, 130, 132, 202, 132,
	-103, -103, -98, 135, -46, -109, 59, -102, 61, 129,
	-98, 364, 361, 362, 329, 129, 58, 57, -139, -118,
	-122, -119, -124, -123, -125, -103, -120, -121, 238, 341,
	235, 239, 236, 241, 242, 243, 116, 240, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 244,
	256, 31, 151, 228, 229, 230, 233, 232, 234, 231,
	257, 258, 259, 260, 261, 262, 263, 264, 209, 210,
	211, 212, 213, 214, 215, 216, 217, 218, 220, 221,
	223, 224, 225, 227, 226, -139, -103, 54, 201, -103,
	-98, 203, -98, 54, -182, 54, 19, 182, 183, 195,
	-103, 78, 23, 119, -98, -46, -46, 293, -154, -219,
	344, 35, -138, -140, -143, -141, -142, -155, -144, 138,
	136, 140, 141, 146, -148, 130, 147, 71, 78, -176,
	138, -179, 54, 272, 278, 136, 147, 146, 375, 69,
	139, 23, 351, 353, 29, 30, -133, 378, 266, -131,
	275, -126, 56, -126, -126, 237, -127, 56, -126, -127,
	-126, -127, -129, 239, -129, -129, -129, -129, 56, 56,
	-126, -126, -126, -126, -126, -135, 56, 222, -135, -135,
	-136, 56, -136, 54, 55, -46, -103, 54, -46, -203,
	372, 373, -46, -46, -185, -183, 8, 9, 10, -46,
	196, -182, 24, -118, -110, -109, -101, 127, 183, 352,
	77, 23, 25, 272, 278, 182, 80, 116, 16, 81,
	189, 361, 362, 115, 330, 122, 50, 322, 323, 320,
	187, 332, 333, 321, 279, 194, 20, 29, 372, 10,
	26, 149, 22, 109, 124, 184, 84, 85, 152, 24,
	150, 73, 190, 192, 19, 53, 142, 11, 351, 13,
	14, 366, 353, 135, 134, 96, 365, 130, 48, 8,
	118, 27, 373, 93, 44, 147, 193, 46, 94, 17,
	324, 325, 32, 339, 156, 111, 51, 38, 367, 78,
	368, 71, 54, 293, 188, 76, 15, 49, 157, 369,
	144, 191, 95, 125, 329, 47, 185, 370, 128, 186,
	6, 335, 31, 148, 45, 129, 280, 83, 133, 72,
	163, 5, 146, 9, 52, 55, 326, 327, 328, 36,
	82, 12, 145, 343, 74, -46, 127, -46, -152, -104,
	69, -103, -101, 57, 34, 56, -175, 54, 78, -146,
	-103, 147, -148, -148, 59, -148, 59, 130, 59, 71,
	19, -103, 9, 147, 147, -175, 61, -46, 56, -172,
	352, 16, 56, -177, 56, -178, 61, 62, 63, 64,
	71, -128, 70, -52, 267, -59, 320, 323, 322, 268,
	72, 73, -103, -109, 59, -102, -180, 63, 379, -132,
	276, 63, -129, -129, -126, -129, 63, 59, -129, -129,
	-130, 116, 115, 31, -130, -130, -130, -130, -137, 61,
	-137, -134, 343, 344, -134, 63, -135, 63, -46, -103,
	56, 54, -46, 23, 132, 23, -165, 23, 54, 57,
	196, -182, -185, 55, -107, 138, -143, 146, 127, 86,
	-104, -154, -159, -156, -103, 147, 10, 9, 19, 142,
	136, 375, 59, 59, 59, -174, 146, 361, 362, 363,
	-176, 375, -128, 268, -215, 56, 56, -32, -51, 78,
	-56, 29, 24, -55, -52, -69, -196, -67, -68, 116,
	117, 105, 106, 113, 79, 118, -59, -57, -58, -60,
	-199, 61, 62, -103, 60, 70, 63, 64, 65, 66,
	71, -109, 298, -65, -215, 46, 47, 330, 331, 332,
	333, 339, 334, 81, 36, 38, 320, 328, 327, 326,
	324, 325, 322, 323, 374, 135, 321, 111, 329, 265,
	23, 29, 63, -177, 56, -178, -167, 374, -167, -215,
	-126, 56, -126, 56, 56, -215, 119, 58, -130, -130,
	-129, -130, 58, 58, -130, -130, 59, 59, 116, 58,
	57, 58, 228, 228, 57, 58, 57, 56, 55, 54,
	-158, -159, -59, -103, -46, 56, -2, -3, -4, 6,
	-215, -98, -2, -166, 19, 170, 171, -46, -183, -83,
	-103, 147, -185, 54, -103, -214, 130, 147, -103, 138,
	-143, -153, -104, 61, 63, 58, 57, -126, -157, 270,
	-126, -145, 166, 167, 31, 168, -145, 363, 147, 147,
	-215, -174, -175, -32, -83, 58, 77, 76, 93, -32,
	-53, 96, 78, 94, 95, 80, 102, 101, 112, 105,
	106, 107, 108, 109, 110, 111, 103, 104, 115, 374,
	86, 87, 88, 89, 90, 91, 92, 97, 98, 99,
	100, -97, -215, -68, -215, 120, 121, -56, -56, -56,
	-56, -56, -56, -56, -200, 266, -167, 61, 119, 119,
	-2, -63, -32, -215, -215, -215, -215, -215, -215, -215,
	-215, -215, -72, -32, -215, 39, -221, -215, -221, -221,
	-221, -221, -221, -221, -221, -117, 116, 239, 151, 230,
	-120, -119, 245, 244, 212, 213, 215, 216, 218, 238,
	341, -215, -215, -215, -215, 56, 353, 57, 58, -177,
	61, 267, 58, 239, 229, 269, 118, 245, 254, 255,
	-118, -216, 58, 58, 58, 58, -30, 22, -29, -63,
	-31, -32, 107, -109, -104, -130, -129, 61, -129, 277,
	277, 63, 63, -158, -103, -46, 58, 56, 56, -83,
	-76, 15, -21, 5, -19, -220, -2, -46, 133, 21,
	6, 8, 9, 10, 19, 57, 23, -46, -213, 56,
	-103, 146, -103, -161, -163, 343, -162, 55, 143, 69,
	175, 176, 177, 178, 179, 180, 181, -156, -79, 25,
	26, -175, 54, 71, 169, -175, 54, -146, -103, -174,
	-32, -215, -216, 58, 349, 350, -32, -32, -61, 71,
	78, 72, 73, -56, -62, -65, -68, 67, 96, 94,
	95, 80, -56, -56, -56, -56, -56, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -114, 59, 61,
	-122, 229, -117, -120, 221, 59, -55, 61, -103, -55,
	-103, 378, -104, -110, -101, -104, -216, 57, -216, -2,
	-29, -32, -29, -32, -116, 116, 235, 151, 230, 224,
	254, 255, 274, 228, 275, 217, 209, 214, 227, 225,
	211, 226, 210, 223, 220, 233, 232, 234, 245, 236,
	241, 243, 242, 240, -32, -69, -56, -69, -103, -109,
	-29, -23, 22, -70, -71, 82, -69, 19, -216, 237,
	-29, -30, -29, -29, -29, -32, 56, 63, 58, 237,
	-134, -133, -216, -29, 57, -216, -216, -106, -105, 23,
	-103, 61, 119, -215, -130, -130, 58, 58, 58, 56,
	56, -84, 365, -158, 58, -80, 17, 16, -5, -3,
	-215, 21, 22, -25, 42, 43, -20, -216, 23, -147,
	-103, 184, -103, -186, -188, -6, -8, -7, -10, -9,
	-11, -12, -13, -16, -3, -22, 10, 9, 20, 31,
	188, 189, 194, 190, 145, 135, -17, 8, 329, -100,
	19, -218, -103, 105, 86, 61, -138, 57, 56, 56,
	136, -160, 54, -162, 343, 56, 345, 59, -149, 86,
	61, 86, 86, 86, 86, 86, 86, 86, 9, 10,
	56, 56, -216, -32, -171, 168, 54, 71, 72, 73,
	-62, -56, -56, -56, -28, 152, 77, 343, -216, -201,
	-202, 61, 119, -32, -216, -216, -216, 57, 55, 57,
	-126, -126, -126, -136, 215, -126, 215, -136, -126, -126,
	-126, -126, -126, -126, 23, 57, 11, 57, 57, 11,
	119, -216, -29, -73, -71, 84, -32, -216, -109, -216,
	-216, -216, -216, 58, -173, 58, 58, -216, -31, -204,
	376, -105, 107, -110, -30, -84, -158, -159, -50, 12,
	56, 58, -50, -81, 19, 32, -32, -77, -78, -32,
	-76, -2, -23, 68, -2, -168, 57, 55, 185, -188,
	-76, -19, -19, -19, -191, -103, -190, -19, -210, -209,
	299, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, -103, -103, -103, -184, 38, 191, 192, 193, -51,
	-56, -32, -51, -99, 82, 184, 58, -218, -103, -218,
	-218, -218, -218, -218, -159, -159, 147, -103, -164, -162,
	-103, 63, -181, 54, 74, 63, -181, -181, -181, -181,
	-181, -145, -145, -147, -159, -171, -216, 336, 10, 9,
	-28, 77, -56, -56, 228, 379, 57, -167, -104, -116,
	116, -114, -32, -129, 59, -116, -56, -56, -56, -56,
	-56, -104, 340, -76, 85, -32, 83, 349, 350, 58,
	205, 355, 356, 156, 357, 168, 358, 359, -215, 119,
	-216, -50, 58, 58, -161, -32, -83, -84, -161, 9,
	96, 57, 18, 57, -79, -80, -216, -24, 45, -169,
	343, -103, -32, -189, -188, 204, -80, -96, 11, -41,
	-46, -34, -35, -36, -37, -48, -68, -215, -46, 57,
	-192, -118, 186, -89, -115, 206, -93, 288, 287, -104,
	298, -91, 286, 239, 285, -181, 57, -103, 11, 11,
	11, 11, -188, 204, 83, 204, 204, -32, 185, 58,
	58, 56, -215, 58, 57, -175, -175, 58, 58, -171,
	-145, -145, -56, 277, -202, -216, -216, -216, -216, -216,
	19, 57, -216, 57, 19, -215, -27, 335, -32, 343,
	63, 16, 63, 63, 63, 63, 356, 156, 358, 16,
	-216, 157, -76, 107, -161, -50, -161, -160, 58, -50,
	-160, 40, -32, -32, -78, -81, -29, 375, -188, -81,
	-47, 27, -46, -46, -41, -217, 57, 11, 55, 31,
	57, -42, -44, -43, -45, 44, 48, 50, 45, 46,
	47, 51, -113, 23, -34, -215, -112, 157, -111, 23,
	-109, 61, -190, -103, 187, 57, -89, 206, -90, -94,
	289, 291, 86, 119, -108, -103, 61, 29, 31, -209,
	27, -187, -188, -186, -187, -187, -197, 197, 78, -159,
	-103, -162, 139, -161, -56, -56, -56, -56, -56, -216,
	61, 63, 63, 360, -109, 16, -216, -160, -161, -161,
	41, -33, 11, -32, 377, -85, 157, -46, -85, 55,
	-34, -46, -88, -92, -69, -35, -36, -36, -35, -36,
	44, 44, 44, 49, 44, 49, 44, -43, -109, -216,
	-49, 52, 134, 53, -215, -111, 19, -93, -90, 57,
	290, 292, 293, 54, 74, -32, -104, -130, -103, 85,
	-188, 377, 377, 85, 377, -198, 198, 197, 58, -216,
	-46, -160, -216, -216, -216, -216, -26, 96, 343, 119,
	-205, -206, -32, -160, -50, -34, 85, -54, 31, 36,
	-2, -215, -215, -50, -34, -50, -50, 57, 86, -39,
	-38, 54, 55, -40, 54, -38, 44, 44, -194, 343,
	130, 130, 130, -86, -103, -2, -94, -95, 294, 291,
	297, 86, -188, 85, 84, 85, 200, 199, 56, -216,
	341, 51, 346, -104, -216, -76, 57, -74, 13, -87,
	54, -88, -64, -66, -65, -215, -2, -82, -103, -86,
	-76, -50, -76, -92, -32, -32, 56, -32, 56, -215,
	-215, -215, -216, 57, 291, 295, 296, -32, 135, 204,
	-147, 41, 342, 347, -216, -206, -75, 14, 16, 28,
	-87, 57, -216, -216, -216, 57, 119, -216, -80, -80,
	-83, -193, -195, 366, 367, 368, 369, 370, 371, -83,
	-83, -83, -112, -103, -187, 58, 41, -32, -63, 147,
	-66, 36, -2, -215, -103, -103, 58, 58, 57, -216,
	-216, -216, -49, 85, 343, 9, -64, -2, 119, -195,
	-194, 346, -88, -216, -103, 347,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 764, 1, 3,
	6, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	762, 390, 391, 392, 395, 0, 0, 765, 0, 147,
	161, 161, 766, 767, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 0, 0, 762, 0, 762,
	0, 0, 0, 0, 0, 502, 770, 771, 772, 762,
	0, 396, 393, 394, 143, 0, 403, 0, 153, 320,
	316, 156, 157, 158, 159, 160, 303, 241, -2, -2,
	303, -2, 310, 303, 310, 275, 303, 310, 323, -2,
	-2, -2, 323, -2, -2, -2, -2, 288, 289, -2,
	954, 0, 260, 303, -2, 303, 303, 303, 266, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 242, 243,
	244, -2, -2, 247, -2, -2, 250, -2, 305, -2,
	305, 307, 307, 258, 259, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 0,
	0, 0, 161, 0, 0, 144, 0, 0, 145, 405,
	0, 408, 148, 149, 150, 151, 152, 0, 397, 399,
	0, 1008, 956, 0, 0, 364, 365, 163, 0, 165,
	0, 167, 0, 169, 170, 0, 172, 174, 397, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 322, 318,
	317, 240, 0, 323, 323, 303, 323, 0, 323, 323,
	277, 278, 326, 0, 326, 326, 326, 326, 0, 0,
	313, 313, 263, 264, 265, 252, 0, 305, 254, 255,
	256, 0, 257, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 0, 127, 0, 109, 105, 106, 107, 0,
	104, 0, 763, 20, 503, 773, 774, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 0, 140, 0, 0, 409,
	411, 768, 769, 403, 407, 0, 374, 0, 0, 0,
	400, 355, 0, 0, 358, 0, 360, -2, 386, 164,
	0, 0, 0, 171, 173, 0, 177, 178, 781, 0,
	207, 0, 0, 190, 0, 193, -2, 196, 197, 198,
	231, 200, 201, 202, 983, 204, 303, 303, 227, 959,
	521, 522, 0, 0, -2, -2, 205, 206, 321, 155,
	319, 0, 326, 326, 323, 326, 0, 0, 326, 326,
	279, 327, 0, 0, 280, 281, 282, 283, 0, 301,
	0, 261, 0, 0, 262, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 762, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 399, 25, 141, 0, 0,
	410, 406, 0, 368, 303, 303, 0, 0, 0, 0,
	0, 0, 356, 357, 359, 362, 386, 387, 388, 189,
	166, 397, 168, 0, 781, 1039, 0, 0, 512, 781,
	517, 519, 0, 558, 559, 560, 561, 562, 563, 781,
	781, 781, 781, 781, 781, 781, 590, 591, 592, 593,
	0, -2, 695, 690, 697, 698, 699, 700, 701, 702,
	703, 0, 0, 743, 781, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 0, 0, 626, 626, 626, 626,
	626, 626, 626, 626, 0, 0, 0, 0, 0, 782,
	0, 208, 0, 0, 0, 0, 195, 161, 199, 0,
	223, 0, 225, 0, 0, -2, 0, 304, 270, 271,
	326, 272, 311, 312, 273, 274, 328, 324, 325, 323,
	0, 323, 0, 0, 0, 308, 0, 0, 0, 0,
	0, 366, 367, 303, 0, 0, -2, 711, 0, 415,
	0, 0, -2, 0, 0, 128, 129, 0, 110, 108,
	468, 469, 0, 0, 92, 0, 27, 28, 400, 399,
	26, 404, 412, 413, 414, 330, 0, 716, 372, 373,
	371, 397, 380, 381, 0, 0, 397, 398, 399, 386,
	781, 363, 0, 0, 0, 0, 781, 781, 0, 515,
	781, 0, 0, 781, 781, 781, 781, 781, 781, 781,
	781, 781, 781, 781, 781, 781, 781, 781, 0, 0,
	539, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 518, 0, 532, 0, 0, 0, 581, 582, 583,
	584, 585, 586, 587, 594, 0, 694, 696, 0, 0,
	32, 0, 556, 781, 781, 781, 781, 781, 781, 0,
	781, 425, 0, 680, 0, 0, 617, 0, 618, 619,
	620, 621, 622, 623, 624, 625, 671, 0, 673, 674,
	675, 676, 677, 678, 245, 246, 248, 249, 251, 268,
	269, 781, -2, 781, 781, 781, 186, 0, 191, 0,
	231, 0, 194, 303, 303, 234, 235, -2, -2, -2,
	320, 203, 1040, 224, 226, 228, 0, 781, 0, 0,
	431, 437, 433, 0, 0, 276, 326, 302, 326, 314,
	315, 0, 0, 0, 0, 0, 510, 1039, 0, 0,
	719, 0, 0, 419, 422, 417, 32, 0, 0, 131,
	132, 133, 134, 135, 0, 0, 0, 125, 21, 94,
	0, 0, 400, 352, 331, 0, 333, 0, 348, 0,
	0, 0, 0, 0, 0, 0, 0, 369, 370, 717,
	718, 375, 0, 382, 383, 376, 0, 0, 400, 0,
	0, 781, 229, 179, 182, 183, 513, 514, 516, 533,
	0, 535, 537, 523, 524, 552, 553, 554, 0, 781,
	781, 781, 550, 528, 0, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 578, 637, 638,
	579, 0, 589, 303, 305, 0, 576, 231, 0, 577,
	588, 0, 691, 0, -2, 693, 555, 781, 742, 32,
	0, 437, 0, 0, 0, -2, 303, 642, 303, 307,
	645, 646, 647, 303, 650, 652, 653, 654, 655, 307,
	657, 658, 659, 660, 661, 303, 303, 664, 665, 303,
	303, 668, 303, 303, 0, 560, 0, 0, 690, 0,
	0, 781, 426, 688, 683, 781, 0, 0, 627, 672,
	0, 0, 430, 0, 0, 0, 209, 0, 0, -2,
	233, 239, 595, 0, 781, 442, 599, 434, 438, 0,
	440, 441, 0, -2, 291, 292, 306, 309, 510, 0,
	0, 508, 0, 0, 508, 723, 781, 781, 711, 34,
	0, 420, 421, 425, 423, 424, 416, 33, 0, 136,
	401, 0, 470, 18, 111, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 711, 415, 415, 415, 0, 415,
	0, 0, 0, 66, 781, 781, 754, 38, 39, 686,
	0, 0, -2, 94, 94, -2, 94, 94, 0, 0,
	0, 329, 0, 334, 0, 0, 0, 337, 0, 349,
	339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 229, 0, 175, 0, 0, 534, 536, 538,
	525, 550, 529, 0, 526, 781, 781, 0, 520, 0,
	784, 231, 0, 557, -2, 600, 601, 0, 0, 781,
	639, 323, 643, 644, 648, 649, 651, 656, 662, 663,
	666, 667, 669, 670, 0, 781, 781, 781, 781, 781,
	0, 0, 711, 0, 684, 781, 0, 615, 616, 628,
	629, 630, 631, 0, 0, 188, 192, 596, 432, 597,
	0, 439, 435, 0, 0, 508, 0, 0, 330, 781,
	0, 510, 330, 29, 0, 0, 720, 712, 713, 716,
	719, 32, 427, 418, -2, 138, 0, 781, 0, 112,
	719, 764, 0, 0, 54, -2, 56, 0, 0, 787,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 61, 62, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 512, 0, 781, 0, 93, 95, -2, 96,
	97, 98, 99, 100, 0, 0, 0, 353, 0, 335,
	340, 338, 341, 350, 351, 342, 343, 344, 345, 346,
	347, 397, 397, 0, 0, 385, 229, 230, 0, 0,
	527, 781, 551, 530, 0, 783, 0, 786, 692, 0,
	303, 0, 0, 640, 641, 0, 0, 0, 0, 0,
	0, 691, 0, 681, 614, 689, 781, 184, 185, 187,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	598, 330, 508, 330, 352, 509, 0, 508, 352, 724,
	0, 781, 781, 781, 715, 723, 35, 781, 428, 16,
	0, 402, 137, 17, 123, 0, 723, 0, 0, 0,
	46, 0, 449, 451, 452, 453, 483, 0, 485, 0,
	0, 58, 60, 50, 0, 1015, 747, -2, -2, 0,
	0, 0, -2, 947, -2, 755, 0, 64, 67, 68,
	69, 70, 71, 0, 0, 0, 0, 687, 126, 22,
	775, 0, 0, 332, 0, 377, 378, 0, 330, 176,
	180, 181, 531, 580, 785, 602, 605, 603, 604, 606,
	781, 781, 609, 781, 781, 781, 0, 0, 685, 0,
	211, 0, 213, 214, 215, 216, 217, 218, 219, 0,
	443, 0, 0, 436, 352, 330, 10, 8, 511, 330,
	12, 0, 721, 722, 714, 30, 447, 781, 0, 122,
	48, 0, 501, -2, 0, 0, 0, 44, 45, 0,
	0, 0, 0, 0, 0, 490, 0, 0, 493, 0,
	0, 0, 0, 484, 0, 0, 504, 986, 486, 0,
	488, 489, 57, 161, 0, 0, 51, 1015, 53, 79,
	0, 0, 781, 0, 326, 759, 760, 761, 757, 788,
	0, 0, 73, 0, 0, 0, 778, 776, 0, 0,
	0, 336, 0, 352, 0, 0, 0, 0, 632, 613,
	682, 210, 212, 221, 0, 781, 445, 7, 11, 352,
	725, 508, 0, 139, 0, 0, 0, 500, 508, 0,
	508, 47, 508, 744, 0, 450, 479, 481, 0, 476,
	491, 492, 494, 0, 496, 0, 498, 499, 454, 455,
	456, 0, 0, 0, 0, 487, 0, 748, 52, 0,
	0, 82, 83, 749, 750, 751, 0, 753, 65, 72,
	74, 0, 0, 77, 0, 24, 0, 777, 23, 354,
	0, 384, 608, 607, 610, 611, 0, 0, 0, 0,
	0, 708, 710, 9, 704, 448, 124, 736, 0, 0,
	-2, 0, 0, 711, 508, 43, 711, 0, 781, 473,
	480, 781, 0, 474, 781, 475, 495, 497, 466, 0,
	0, 0, 0, 0, 471, -2, 80, 81, 0, 0,
	87, 781, 75, 0, 0, 19, 779, 780, 0, 612,
	0, 0, 0, 222, 444, 0, 781, 706, 0, 36,
	0, 736, 726, 738, 740, 781, 32, 0, 732, 0,
	719, 42, 719, 745, 746, 477, 0, 482, 0, 0,
	0, 0, 485, 0, 84, 85, 86, 752, 76, 0,
	0, 633, 0, 636, 446, 709, 31, 781, 781, 0,
	37, 0, 741, -2, 0, 0, 0, 49, 41, 40,
	0, 0, 458, 460, 461, 462, 463, 464, 465, 0,
	0, 0, 504, 472, 0, 379, 634, 707, 705, 0,
	739, 0, -2, 0, 734, 733, 478, 457, 0, 505,
	506, 507, 456, 78, 0, 0, 729, 32, 0, 459,
	467, 0, 737, -2, 735, 635,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 377,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 378, 3, 379, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:405
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:410
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:411
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:419
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:424
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:444
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:464
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:485
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:501
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:518
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:537
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:548
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:560
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:571
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:587
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      []Statement{yyDollar[11].statement},
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:601
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:615
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[4].colIdent,
					TableName: yyDollar[8].tableName,
					Time:      yyDollar[5].str,
					Event:     yyDollar[6].strs,
					Body:      yyDollar[12].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:629
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:640
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 22:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:646
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 23:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:660
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 24:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:674
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:693
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:702
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:717
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 30:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:725
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 31:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:732
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:738
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:742
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:748
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:752
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:759
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:771
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:783
		{
			yyVAL.str = InsertStr
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:787
		{
			yyVAL.str = ReplaceStr
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:793
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:799
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:803
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:807
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:812
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:813
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:817
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:821
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:826
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:830
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:836
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:840
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:844
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:848
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:854
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:858
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:871
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:875
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:881
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:886
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:890
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:896
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:903
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:910
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:917
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:925
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:935
		{
			yyVAL.str = ""
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:939
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:943
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:947
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:951
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:957
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:964
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:974
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:978
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:982
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 76:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:989
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:998
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 78:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1006
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1017
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1021
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1027
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1031
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1035
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1041
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1045
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1049
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1053
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1059
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1063
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1069
		{
			yyVAL.str = SessionStr
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1073
		{
			yyVAL.str = GlobalStr
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1078
		{
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1079
		{
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1083
		{
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1084
		{
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1085
		{
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1086
		{
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1087
		{
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1088
		{
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1089
		{
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1093
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1097
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1101
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1105
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1111
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1115
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1119
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1124
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1130
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1134
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1140
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1144
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1150
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1162
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1174
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1181
		{
			yyVAL.empty = struct{}{}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1183
		{
			yyVAL.empty = struct{}{}
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1186
		{
			yyVAL.bytes = nil
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1190
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1194
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1199
		{
			yyVAL.bytes = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1203
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1207
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1211
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1215
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1219
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1224
		{
			yyVAL.expr = nil
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1228
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1233
		{
			yyVAL.expr = nil
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1237
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1242
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1246
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1251
		{
			yyVAL.bytes = nil
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1255
		{
			yyVAL.bytes = nil
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1261
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1268
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1274
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1278
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1283
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1287
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1291
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1295
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1299
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1305
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1310
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1316
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1327
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1332
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1338
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1351
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1356
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1361
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1366
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1372
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1377
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1382
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1387
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1392
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1397
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1402
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1407
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1412
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1421
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1431
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1436
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1441
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1448
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1455
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1463
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1468
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1473
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1478
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1484
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1490
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1496
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1502
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1509
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1513
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 192:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1517
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1521
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1525
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1531
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1535
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1539
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1543
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1547
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1551
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1555
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1559
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1563
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1569
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1575
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1581
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1587
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1591
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1596
		{
			yyVAL.sequence = &Sequence{}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1600
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1605
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1610
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1615
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1620
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1625
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1630
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1635
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1640
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1645
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1650
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1655
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1660
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1667
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1671
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1675
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1679
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1683
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1687
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1692
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1696
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1701
		{
			yyVAL.bytes = nil
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1715
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1720
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1754
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1922
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1926
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1930
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 292:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1987
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1992
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1997
		{
			yyVAL.optVal = nil
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2001
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2006
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2010
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2018
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2022
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2028
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2036
		{
			yyVAL.optVal = nil
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2040
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2044
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2053
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2057
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2061
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2066
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2070
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2075
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2079
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2084
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2088
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2092
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2097
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2101
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2105
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2110
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2114
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2118
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2124
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2129
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2133
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2137
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2143
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2147
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2153
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2157
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2163
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2167
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2172
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2176
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2180
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2184
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2188
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2192
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2196
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2200
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2204
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2210
		{
			yyVAL.str = ""
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2214
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2220
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2224
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2230
		{
			yyVAL.indexPartition = nil
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2234
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 354:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2238
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2244
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2248
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2252
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2256
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2260
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2264
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2268
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2272
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2276
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2282
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2286
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2292
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2297
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2303
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2307
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2313
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2318
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2322
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2332
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 375:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2337
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 376:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2344
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 377:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2351
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 378:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2358
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 379:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2367
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2379
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2383
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2387
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2391
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 384:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2397
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 385:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2408
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2418
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2422
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2426
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2432
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2436
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2440
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2444
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2448
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2452
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2458
		{
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2459
		{
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2463
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2467
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2472
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2479
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2483
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2490
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2494
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2500
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2504
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2509
		{
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2510
		{
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2514
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2518
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2522
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2528
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2532
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2536
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2541
		{
			setAllowComments(yylex, true)
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2545
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2551
		{
			yyVAL.bytes2 = nil
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2555
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2561
		{
			yyVAL.str = UnionStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2565
		{
			yyVAL.str = UnionAllStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2569
		{
			yyVAL.str = UnionDistinctStr
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2574
		{
			yyVAL.str = ""
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2578
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2582
		{
			yyVAL.str = SQLCacheStr
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2587
		{
			yyVAL.str = ""
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2591
		{
			yyVAL.str = DistinctStr
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2596
		{
			yyVAL.str = ""
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2600
		{
			yyVAL.str = StraightJoinHint
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2605
		{
			yyVAL.selectExprs = nil
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2609
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2615
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2619
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2625
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2629
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2633
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 436:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2637
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2642
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2646
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2650
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2657
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2662
		{
			yyVAL.overExpr = nil
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2666
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2670
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2674
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2678
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2683
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2687
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2693
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2697
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2707
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2711
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2715
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2720
		{
			yyVAL.strs = []string{}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2724
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2730
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2734
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2740
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2744
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2748
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2752
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2756
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2760
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2766
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 467:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2770
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2776
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2781
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2785
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2791
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2795
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2808
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2812
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2816
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2820
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2826
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2828
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2832
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2834
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2838
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2840
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2843
		{
			yyVAL.empty = struct{}{}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2845
		{
			yyVAL.empty = struct{}{}
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2848
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2852
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2856
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2863
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2869
		{
			yyVAL.str = JoinStr
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2873
		{
			yyVAL.str = JoinStr
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2877
		{
			yyVAL.str = JoinStr
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2883
		{
			yyVAL.str = StraightJoinStr
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2889
		{
			yyVAL.str = LeftJoinStr
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2893
		{
			yyVAL.str = LeftJoinStr
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2897
		{
			yyVAL.str = RightJoinStr
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2901
		{
			yyVAL.str = RightJoinStr
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2907
		{
			yyVAL.str = NaturalJoinStr
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2911
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2921
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2925
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2931
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2935
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2940
		{
			yyVAL.indexHints = nil
		}
	case 505:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2944
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2948
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2952
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2957
		{
			yyVAL.expr = nil
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2961
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2966
		{
			yyVAL.columns = nil
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2970
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2976
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2980
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2984
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2988
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2992
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2996
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3000
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3006
		{
			yyVAL.str = ""
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3010
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3016
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3020
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3026
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3030
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3034
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3038
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 527:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3042
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3046
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3050
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3054
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 531:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3058
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3062
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3068
		{
			yyVAL.str = IsNullStr
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3072
		{
			yyVAL.str = IsNotNullStr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3076
		{
			yyVAL.str = IsTrueStr
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3080
		{
			yyVAL.str = IsNotTrueStr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3084
		{
			yyVAL.str = IsFalseStr
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3088
		{
			yyVAL.str = IsNotFalseStr
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3094
		{
			yyVAL.str = EqualStr
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3098
		{
			yyVAL.str = LessThanStr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3102
		{
			yyVAL.str = GreaterThanStr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3106
		{
			yyVAL.str = LessEqualStr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3110
		{
			yyVAL.str = GreaterEqualStr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3114
		{
			yyVAL.str = NotEqualStr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3118
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3122
		{
			yyVAL.str = PosixRegexStr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3126
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3130
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3134
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3139
		{
			yyVAL.expr = nil
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3143
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3149
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3153
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3157
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3163
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3169
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3173
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3179
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3183
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3187
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3191
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3195
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3199
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3203
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3207
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3211
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3215
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3219
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3223
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3227
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3231
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3235
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3239
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3243
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3247
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3251
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3255
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3259
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3263
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 580:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3267
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3271
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3275
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3279
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3287
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3301
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3305
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3309
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3317
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3325
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3333
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3343
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3347
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 597:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3351
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 598:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3355
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3359
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3369
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3373
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 602:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3377
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 603:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3381
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 604:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3385
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 605:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3389
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3393
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 607:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3397
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 608:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3401
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 609:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3405
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 610:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3409
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 611:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3413
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 612:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3417
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 613:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3421
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3425
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3429
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3434
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3444
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3448
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3452
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3456
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3461
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3466
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3471
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3476
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3480
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3494
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3498
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3502
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3506
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3512
		{
			yyVAL.str = ""
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3516
		{
			yyVAL.str = BooleanModeStr
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3520
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 635:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3524
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3528
		{
			yyVAL.str = QueryExpansionStr
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3534
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3538
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3544
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3548
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3552
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3556
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3560
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3564
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3570
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3574
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3578
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3582
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3586
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3590
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3594
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3598
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3602
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3606
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3610
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3614
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3618
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3622
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3626
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3630
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3634
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3638
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3642
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3646
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3650
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3654
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3658
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3662
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3666
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3670
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3676
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3680
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3684
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3688
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3692
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3696
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3700
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3704
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3709
		{
			yyVAL.expr = nil
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3713
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3718
		{
			yyVAL.str = string("")
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3722
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3728
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3732
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3738
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3743
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3745
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3748
		{
			yyVAL.expr = nil
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3752
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3758
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3762
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 692:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3766
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3772
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3778
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3782
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3787
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3792
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3796
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3800
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3804
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3808
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3812
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3816
		{
			yyVAL.expr = &NullVal{}
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3821
		{
			yyVAL.exprs = nil
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3825
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 706:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3830
		{
			yyVAL.expr = nil
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3834
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3840
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3844
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3850
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3855
		{
			yyVAL.orderBy = nil
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3859
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3865
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3869
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3875
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3880
		{
			yyVAL.str = AscScr
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3884
		{
			yyVAL.str = AscScr
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3888
		{
			yyVAL.str = DescScr
		}
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3893
		{
			yyVAL.limit = nil
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3897
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3901
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 722:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3905
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3910
		{
			yyVAL.str = ""
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3914
		{
			yyVAL.str = ForUpdateStr
		}
	case 725:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3918
		{
			yyVAL.str = ShareModeStr
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3931
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3935
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3939
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 729:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3944
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3948
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 731:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3952
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3959
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3963
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3967
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 735:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3971
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3976
		{
			yyVAL.updateExprs = nil
		}
	case 737:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3980
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3986
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3990
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3996
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4000
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4006
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4012
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4022
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4026
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4032
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4038
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4042
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4048
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4052
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4056
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4065
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4071
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4077
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4084
		{
			yyVAL.bytes = []byte("charset")
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4091
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4095
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4099
		{
			yyVAL.expr = &Default{}
		}
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4104
		{
			yyVAL.empty = struct{}{}
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4106
		{
			yyVAL.empty = struct{}{}
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4109
		{
			yyVAL.str = ""
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4111
		{
			yyVAL.str = IgnoreStr
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4115
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4119
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4126
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4132
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4136
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4141
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4148
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4154
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4158
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4162
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4168
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4172
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4176
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4182
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4186
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4200
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4204
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4217
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4221
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4499
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4508
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
