// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const VINDEX = 57489
const VINDEXES = 57490
const STATUS = 57491
const VARIABLES = 57492
const RESTRICT = 57493
const CASCADE = 57494
const NO = 57495
const ACTION = 57496
const PERMISSIVE = 57497
const RESTRICTIVE = 57498
const PUBLIC = 57499
const CURRENT_USER = 57500
const SESSION_USER = 57501
const PAD_INDEX = 57502
const FILLFACTOR = 57503
const IGNORE_DUP_KEY = 57504
const STATISTICS_NORECOMPUTE = 57505
const STATISTICS_INCREMENTAL = 57506
const ALLOW_ROW_LOCKS = 57507
const ALLOW_PAGE_LOCKS = 57508
const BEFORE = 57509
const AFTER = 57510
const EACH = 57511
const ROW = 57512
const SCROLL = 57513
const CURSOR = 57514
const OPEN = 57515
const CLOSE = 57516
const FETCH = 57517
const PRIOR = 57518
const FIRST = 57519
const LAST = 57520
const DEALLOCATE = 57521
const INSTEAD = 57522
const OF = 57523
const DEFERRABLE = 57524
const INITIALLY = 57525
const IMMEDIATE = 57526
const DEFERRED = 57527
const CONCURRENTLY = 57528
const SQL = 57529
const SECURITY = 57530
const BEGIN = 57531
const START = 57532
const TRANSACTION = 57533
const COMMIT = 57534
const ROLLBACK = 57535
const BIT = 57536
const TINYINT = 57537
const SMALLINT = 57538
const SMALLSERIAL = 57539
const MEDIUMINT = 57540
const INT = 57541
const INTEGER = 57542
const SERIAL = 57543
const BIGINT = 57544
const BIGSERIAL = 57545
const INTNUM = 57546
const REAL = 57547
const DOUBLE = 57548
const PRECISION = 57549
const FLOAT_TYPE = 57550
const DECIMAL = 57551
const NUMERIC = 57552
const SMALLMONEY = 57553
const MONEY = 57554
const TIME = 57555
const TIMESTAMP = 57556
const DATETIME = 57557
const YEAR = 57558
const DATETIMEOFFSET = 57559
const DATETIME2 = 57560
const SMALLDATETIME = 57561
const CHAR = 57562
const VARCHAR = 57563
const VARYING = 57564
const BOOL = 57565
const CHARACTER = 57566
const VARBINARY = 57567
const NCHAR = 57568
const NVARCHAR = 57569
const NTEXT = 57570
const UUID = 57571
const TEXT = 57572
const TINYTEXT = 57573
const MEDIUMTEXT = 57574
const LONGTEXT = 57575
const CITEXT = 57576
const BLOB = 57577
const TINYBLOB = 57578
const MEDIUMBLOB = 57579
const LONGBLOB = 57580
const JSON = 57581
const JSONB = 57582
const ENUM = 57583
const GEOMETRY = 57584
const POINT = 57585
const LINESTRING = 57586
const POLYGON = 57587
const GEOMETRYCOLLECTION = 57588
const MULTIPOINT = 57589
const MULTILINESTRING = 57590
const MULTIPOLYGON = 57591
const VARIADIC = 57592
const ARRAY = 57593
const NOW = 57594
const GETDATE = 57595
const BPCHAR = 57596
const TEXT_PATTERN_OPS = 57597
const NULLX = 57598
const AUTO_INCREMENT = 57599
const APPROXNUM = 57600
const SIGNED = 57601
const UNSIGNED = 57602
const ZEROFILL = 57603
const ZONE = 57604
const AUTOINCREMENT = 57605
const DATABASES = 57606
const TABLES = 57607
const VITESS_KEYSPACES = 57608
const VITESS_SHARDS = 57609
const VITESS_TABLETS = 57610
const VSCHEMA_TABLES = 57611
const EXTENDED = 57612
const FULL = 57613
const PROCESSLIST = 57614
const NAMES = 57615
const CHARSET = 57616
const GLOBAL = 57617
const SESSION = 57618
const ISOLATION = 57619
const LEVEL = 57620
const READ = 57621
const WRITE = 57622
const ONLY = 57623
const REPEATABLE = 57624
const COMMITTED = 57625
const UNCOMMITTED = 57626
const SERIALIZABLE = 57627
const NEW = 57628
const CONCAT_NULL_YIELDS_NULL = 57629
const CURSOR_CLOSE_ON_COMMIT = 57630
const QUOTED_IDENTIFIER = 57631
const ARITHABORT = 57632
const FMTONLY = 57633
const NOCOUNT = 57634
const NOEXEC = 57635
const NUMERIC_ROUNDABORT = 57636
const ANSI_DEFAULTS = 57637
const ANSI_NULL_DFLT_OFF = 57638
const ANSI_NULL_DFLT_ON = 57639
const ANSI_NULLS = 57640
const ANSI_PADDING = 57641
const ANSI_WARNINGS = 57642
const FORCEPLAN = 57643
const SHOWPLAN_ALL = 57644
const SHOWPLAN_TEXT = 57645
const SHOWPLAN_XML = 57646
const IMPLICIT_TRANSACTIONS = 57647
const REMOTE_PROC_TRANSACTIONS = 57648
const XACT_ABORT = 57649
const CURRENT_TIMESTAMP = 57650
const DATABASE = 57651
const CURRENT_DATE = 57652
const CURRENT_TIME = 57653
const LOCALTIME = 57654
const LOCALTIMESTAMP = 57655
const UTC_DATE = 57656
const UTC_TIME = 57657
const UTC_TIMESTAMP = 57658
const REPLACE = 57659
const CONVERT = 57660
const CAST = 57661
const SUBSTR = 57662
const SUBSTRING = 57663
const GROUP_CONCAT = 57664
const SEPARATOR = 57665
const INHERIT = 57666
const LEAD = 57667
const LAG = 57668
const MATCH = 57669
const AGAINST = 57670
const BOOLEAN = 57671
const LANGUAGE = 57672
const WITH = 57673
const WITHOUT = 57674
const PARSER = 57675
const QUERY = 57676
const EXPANSION = 57677
const UNUSED = 57678
const VIRTUAL = 57679
const STORED = 57680
const GENERATED = 57681
const ALWAYS = 57682
const IDENTITY = 57683
const SEQUENCE = 57684
const INCREMENT = 57685
const MINVALUE = 57686
const CACHE = 57687
const CYCLE = 57688
const OWNED = 57689
const NONE = 57690
const CLUSTERED = 57691
const NONCLUSTERED = 57692
const REPLICATION = 57693
const COLUMNSTORE = 57694
const INCLUDE = 57695
const HOLDLOCK = 57696
const NOLOCK = 57697
const NOWAIT = 57698
const PAGLOCK = 57699
const ROWLOCK = 57700
const TABLELOCK = 57701
const DEFINER = 57702
const INVOKER = 57703
const TYPECAST = 57704
const CHECK = 57705
const OVER = 57706

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 26,
	-2, 4,
	-1, 29,
	130, 403,
	-2, 160,
	-1, 35,
	166, 511,
	167, 511,
	-2, 501,
	-1, 281,
	119, 899,
	-2, 895,
	-1, 282,
	119, 900,
	-2, 896,
	-1, 283,
	119, 901,
	-2, 246,
	-1, 325,
	268, 910,
	-2, 790,
	-1, 359,
	86, 1151,
	-2, 85,
	-1, 360,
	86, 1101,
	-2, 86,
	-1, 366,
	86, 1080,
	-2, 868,
	-1, 368,
	86, 1125,
	-2, 870,
	-1, 629,
	268, 910,
	-2, 539,
	-1, 679,
	268, 910,
	-2, 539,
	-1, 709,
	55, 40,
	57, 40,
	-2, 42,
	-1, 741,
	116, 1075,
	251, 1075,
	257, 1075,
	-2, 282,
	-1, 742,
	116, 1076,
	251, 1076,
	257, 1076,
	-2, 283,
	-1, 743,
	251, 1078,
	257, 1078,
	-2, 317,
	-1, 744,
	251, 1079,
	257, 1079,
	-2, 317,
	-1, 745,
	251, 1180,
	257, 1180,
	-2, 324,
	-1, 746,
	251, 1126,
	257, 1126,
	-2, 317,
	-1, 747,
	251, 1131,
	257, 1131,
	-2, 324,
	-1, 748,
	116, 1129,
	251, 1129,
	257, 1129,
	-2, 289,
	-1, 750,
	116, 1179,
	251, 1179,
	257, 1179,
	-2, 324,
	-1, 751,
	251, 1165,
	257, 1165,
	-2, 337,
	-1, 752,
	251, 1171,
	257, 1171,
	-2, 337,
	-1, 753,
	251, 1119,
	257, 1119,
	-2, 337,
	-1, 754,
	251, 1115,
	257, 1115,
	-2, 337,
	-1, 756,
	116, 1074,
	251, 1074,
	257, 1074,
	-2, 298,
	-1, 757,
	116, 1169,
	251, 1169,
	257, 1169,
	-2, 299,
	-1, 758,
	116, 1117,
	251, 1117,
	257, 1117,
	-2, 300,
	-1, 759,
	116, 1114,
	251, 1114,
	257, 1114,
	-2, 301,
	-1, 760,
	116, 1106,
	251, 1106,
	257, 1106,
	-2, 302,
	-1, 762,
	116, 1178,
	251, 1178,
	257, 1178,
	-2, 304,
	-1, 765,
	116, 1087,
	251, 1087,
	257, 1087,
	-2, 274,
	-1, 766,
	116, 1167,
	251, 1167,
	257, 1167,
	-2, 317,
	-1, 767,
	116, 1168,
	251, 1168,
	257, 1168,
	-2, 317,
	-1, 768,
	116, 1088,
	251, 1088,
	257, 1088,
	-2, 317,
	-1, 769,
	116, 1089,
	251, 1089,
	257, 1089,
	-2, 317,
	-1, 770,
	116, 1090,
	251, 1090,
	257, 1090,
	-2, 317,
	-1, 771,
	116, 1158,
	251, 1158,
	257, 1158,
	-2, 280,
	-1, 772,
	116, 1192,
	251, 1192,
	257, 1192,
	-2, 281,
	-1, 773,
	116, 1098,
	251, 1098,
	257, 1098,
	-2, 307,
	-1, 774,
	116, 1135,
	251, 1135,
	257, 1135,
	-2, 308,
	-1, 775,
	116, 1113,
	251, 1113,
	257, 1113,
	-2, 309,
	-1, 776,
	116, 1136,
	251, 1136,
	257, 1136,
	-2, 310,
	-1, 777,
	116, 1099,
	251, 1099,
	257, 1099,
	-2, 311,
	-1, 778,
	116, 1123,
	251, 1123,
	257, 1123,
	-2, 312,
	-1, 779,
	116, 1122,
	251, 1122,
	257, 1122,
	-2, 313,
	-1, 780,
	116, 1124,
	251, 1124,
	257, 1124,
	-2, 314,
	-1, 781,
	116, 1073,
	251, 1073,
	257, 1073,
	-2, 256,
	-1, 782,
	116, 1170,
	251, 1170,
	257, 1170,
	-2, 257,
	-1, 783,
	116, 1159,
	251, 1159,
	257, 1159,
	-2, 258,
	-1, 784,
	116, 1161,
	251, 1161,
	257, 1161,
	-2, 259,
	-1, 785,
	116, 1118,
	251, 1118,
	257, 1118,
	-2, 260,
	-1, 786,
	116, 1103,
	251, 1103,
	257, 1103,
	-2, 261,
	-1, 787,
	116, 1104,
	251, 1104,
	257, 1104,
	-2, 262,
	-1, 788,
	116, 1152,
	251, 1152,
	257, 1152,
	-2, 263,
	-1, 789,
	116, 1071,
	251, 1071,
	257, 1071,
	-2, 264,
	-1, 790,
	116, 1072,
	251, 1072,
	257, 1072,
	-2, 265,
	-1, 791,
	116, 1143,
	251, 1143,
	257, 1143,
	-2, 319,
	-1, 792,
	116, 1092,
	251, 1092,
	257, 1092,
	-2, 319,
	-1, 793,
	116, 1096,
	251, 1096,
	257, 1096,
	-2, 319,
	-1, 794,
	116, 1091,
	251, 1091,
	257, 1091,
	-2, 321,
	-1, 795,
	116, 1130,
	251, 1130,
	257, 1130,
	-2, 321,
	-1, 796,
	116, 1121,
	251, 1121,
	257, 1121,
	-2, 272,
	-1, 797,
	116, 1160,
	251, 1160,
	257, 1160,
	-2, 273,
	-1, 874,
	119, 903,
	-2, 898,
	-1, 942,
	268, 910,
	-2, 317,
	-1, 943,
	57, 317,
	59, 317,
	241, 317,
	-2, 1078,
	-1, 944,
	57, 752,
	-2, 1087,
	-1, 945,
	57, 317,
	-2, 1088,
	-1, 946,
	57, 321,
	-2, 1091,
	-1, 947,
	57, 755,
	-2, 1106,
	-1, 949,
	57, 317,
	-2, 1126,
	-1, 950,
	57, 758,
	-2, 1157,
	-1, 951,
	57, 317,
	-2, 1167,
	-1, 952,
	57, 761,
	-2, 1176,
	-1, 953,
	57, 763,
	-2, 1071,
	-1, 954,
	57, 764,
	-2, 1073,
	-1, 955,
	57, 765,
	-2, 1103,
	-1, 956,
	57, 766,
	-2, 1121,
	-1, 957,
	57, 321,
	-2, 1130,
	-1, 958,
	57, 768,
	-2, 1159,
	-1, 959,
	57, 769,
	-2, 1160,
	-1, 960,
	57, 770,
	-2, 1170,
	-1, 961,
	57, 771,
	-2, 1096,
	-1, 962,
	57, 772,
	-2, 1143,
	-1, 963,
	57, 317,
	-2, 1089,
	-1, 964,
	57, 317,
	-2, 1090,
	-1, 965,
	57, 775,
	-2, 1158,
	-1, 966,
	57, 776,
	-2, 1165,
	-1, 967,
	57, 317,
	-2, 1180,
	-1, 968,
	57, 779,
	-2, 1129,
	-1, 969,
	57, 317,
	-2, 1131,
	-1, 970,
	57, 317,
	-2, 1179,
	-1, 1046,
	142, 413,
	-2, 1085,
	-1, 1172,
	268, 910,
	-2, 539,
	-1, 1195,
	5, 27,
	-2, 665,
	-1, 1238,
	5, 26,
	-2, 839,
	-1, 1287,
	59, 378,
	-2, 375,
	-1, 1304,
	119, 901,
	-2, 246,
	-1, 1569,
	5, 26,
	-2, 94,
	-1, 1571,
	5, 26,
	-2, 96,
	-1, 1624,
	5, 27,
	-2, 840,
	-1, 1698,
	5, 26,
	-2, 95,
	-1, 1732,
	5, 26,
	-2, 842,
	-1, 1813,
	58, 107,
	-2, 179,
	-1, 1816,
	58, 107,
	-2, 179,
	-1, 1888,
	189, 53,
	-2, 179,
	-1, 1927,
	58, 107,
	-2, 178,
	-1, 1952,
	5, 27,
	-2, 843,
	-1, 2111,
	5, 26,
	-2, 49,
}

const yyPrivate = 57344

const yyLast = 21690

var yyAct = [...]int16{
	370, 1788, 2067, 1747, 1945, 1791, 1937, 732, 1744, 1120,
	1891, 1889, 807, 560, 1844, 1784, 994, 1276, 633, 1657,
	298, 277, 1564, 1254, 544, 1634, 1867, 1241, 731, 1474,
	287, 1926, 1505, 1279, 95, 1563, 2068, 95, 1517, 857,
	632, 3, 1475, 1012, 701, 1647, 1959, 21, 265, 1357,
	53, 1302, 286, 703, 1187, 1041, 1471, 1129, 282, 1128,
	1309, 95, 95, 614, 1035, 1106, 995, 1259, 315, 258,
	941, 1056, 365, 931, 899, 95, 1051, 813, 988, 1177,
	1183, 719, 927, 1246, 95, 1101, 95, 361, 264, 1088,
	980, 876, 95, 566, 1032, 1340, 351, 1817, 1082, 1630,
	718, 510, 991, 269, 705, 344, 358, 690, 346, 849,
	739, 345, 259, 260, 261, 262, 285, 734, 733, 657,
	575, 1165, 1322, 46, 926, 48, 25, 26, 1420, 1074,
	92, 273, 1070, 1071, 2092, 52, 1070, 1803, 1635, 1636,
	1637, 1638, 1639, 1640, 1512, 1425, 2059, 290, 1804, 615,
	589, 1534, 1785, 599, 599, 1117, 1118, 1059, 354, 1518,
	518, 1663, 500, 1979, 1519, 1520, 2049, 1521, 519, 520,
	2123, 515, 1066, 512, 1054, 1300, 1671, 1748, 517, 279,
	523, 1055, 524, 1977, 1978, 2030, 2117, 1950, 531, 1849,
	1848, 1750, 355, 583, 2042, 586, 1184, 1185, 353, 1038,
	2104, 601, 602, 603, 604, 605, 606, 607, 349, 584,
	585, 582, 608, 609, 610, 611, 588, 587, 597, 598,
	590, 591, 592, 593, 594, 595, 596, 589, 1121, 1996,
	599, 1255, 1180, 2029, 1466, 1949, 1974, 95, 1618, 1062,
	521, 1057, 1067, 1497, 1073, 1267, 1498, 1499, 1266, 1064,
	1063, 1268, 1810, 590, 591, 592, 593, 594, 595, 596,
	589, 1983, 1809, 599, 720, 1749, 721, 282, 282, 846,
	1525, 1026, 1027, 1025, 552, 1985, 847, 1603, 1602, 282,
	592, 593, 594, 595, 596, 589, 1601, 1324, 599, 1076,
	628, 1089, 282, 282, 282, 282, 282, 282, 282, 1751,
	1752, 1753, 1754, 1755, 1756, 1757, 1202, 1805, 1806, 1808,
	1078, 569, 1980, 1807, 1458, 1182, 985, 282, 1078, 568,
	1418, 1417, 1416, 1615, 257, 1314, 282, 1316, 1315, 1102,
	90, 86, 87, 533, 88, 1209, 1207, 2100, 2121, 2017,
	805, 2115, 2114, 2073, 95, 2101, 1614, 559, 1134, 1835,
	2064, 95, 95, 95, 588, 587, 597, 598, 590, 591,
	592, 593, 594, 595, 596, 589, 505, 1884, 599, 1790,
	1763, 2048, 2116, 2050, 1868, 1576, 1577, 1060, 2102, 1519,
	1520, 361, 1660, 1061, 548, 549, 1938, 1398, 1513, 992,
	588, 587, 597, 598, 590, 591, 592, 593, 594, 595,
	596, 589, 1712, 815, 599, 588, 587, 597, 598, 590,
	591, 592, 593, 594, 595, 596, 589, 600, 600, 599,
	542, 587, 597, 598, 590, 591, 592, 593, 594, 595,
	596, 589, 616, 1583, 599, 1052, 1823, 54, 507, 1939,
	685, 1729, 1665, 1664, 1294, 1293, 815, 662, 1281, 709,
	1584, 49, 1053, 1511, 663, 1419, 2082, 84, 559, 1068,
	1593, 1069, 2120, 511, 2072, 1981, 1982, 1984, 1986, 1987,
	1746, 620, 621, 622, 623, 624, 625, 626, 1672, 2041,
	559, 814, 526, 1065, 1849, 1701, 83, 1523, 84, 1917,
	1013, 1015, 1612, 1081, 600, 825, 1089, 1103, 349, 2097,
	804, 588, 587, 597, 598, 590, 591, 592, 593, 594,
	595, 596, 589, 1037, 508, 599, 1299, 1258, 95, 1658,
	1659, 1661, 1655, 95, 1257, 1256, 95, 600, 89, 95,
	1948, 798, 1413, 95, 1655, 1286, 588, 587, 597, 598,
	590, 591, 592, 593, 594, 595, 596, 589, 504, 716,
	599, 710, 600, 503, 95, 522, 588, 587, 597, 598,
	590, 591, 592, 593, 594, 595, 596, 589, 816, 817,
	599, 95, 1014, 282, 282, 516, 236, 85, 2108, 1721,
	282, 818, 282, 1399, 1840, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	1627, 1836, 618, 619, 873, 834, 1287, 803, 1542, 1408,
	806, 816, 817, 1222, 821, 1171, 855, 860, 820, 822,
	723, 1395, 826, 1053, 818, 829, 631, 579, 1218, 532,
	282, 852, 600, 1034, 1033, 574, 282, 282, 282, 282,
	282, 282, 282, 282, 1918, 1919, 1920, 282, 930, 1552,
	848, 877, 874, 1284, 832, 648, 933, 1158, 858, 859,
	1860, 1859, 545, 546, 547, 1858, 550, 862, 600, 573,
	572, 972, 974, 554, 1217, 854, 937, 982, 572, 282,
	282, 282, 282, 600, 2112, 95, 574, 282, 95, 95,
	95, 95, 95, 1857, 574, 1856, 1855, 870, 600, 525,
	95, 872, 1403, 95, 1854, 1852, 1553, 95, 929, 573,
	572, 905, 95, 95, 853, 938, 939, 996, 663, 902,
	904, 977, 304, 282, 1052, 1199, 574, 1198, 1396, 1573,
	878, 1394, 2110, 573, 572, 921, 924, 618, 619, 1269,
	361, 1053, 1159, 937, 1244, 1397, 573, 572, 1031, 722,
	574, 1468, 2113, 978, 981, 1278, 1020, 986, 1765, 989,
	990, 875, 987, 574, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 600,
	1611, 993, 1278, 810, 1402, 364, 1761, 501, 528, 529,
	530, 981, 509, 1227, 1762, 513, 514, 998, 999, 997,
	1001, 95, 1000, 682, 95, 1960, 1009, 95, 1277, 1021,
	1278, 1017, 1018, 95, 600, 95, 573, 572, 1023, 50,
	973, 95, 1022, 2016, 95, 1961, 95, 1135, 1039, 95,
	879, 537, 1278, 574, 600, 349, 349, 349, 349, 349,
	2085, 1219, 1090, 1091, 1092, 1093, 1085, 1853, 2084, 1087,
	349, 866, 868, 869, 282, 282, 282, 282, 867, 349,
	2047, 1108, 588, 587, 597, 598, 590, 591, 592, 593,
	594, 595, 596, 589, 1167, 2046, 599, 1216, 1104, 1105,
	873, 1728, 282, 282, 282, 588, 587, 597, 598, 590,
	591, 592, 593, 594, 595, 596, 589, 1111, 883, 599,
	1114, 539, 2045, 1119, 541, 559, 1115, 1960, 1962, 1127,
	2008, 1133, 881, 882, 880, 1290, 1683, 1136, 1958, 1870,
	1153, 1325, 1154, 573, 572, 1155, 2043, 1961, 874, 282,
	573, 572, 1775, 538, 540, 1331, 282, 573, 572, 1330,
	574, 1682, 1691, 282, 824, 1690, 1325, 574, 1530, 877,
	1166, 1168, 1169, 1170, 574, 835, 836, 837, 838, 839,
	840, 841, 842, 364, 364, 364, 364, 1289, 364, 843,
	844, 1325, 1173, 2044, 1347, 364, 1108, 1345, 1321, 282,
	1688, 900, 282, 901, 95, 650, 651, 652, 653, 654,
	655, 656, 1188, 1104, 1105, 1375, 573, 572, 577, 50,
	1595, 1341, 1296, 1470, 630, 630, 82, 1190, 1850, 1179,
	1882, 2128, 1205, 574, 1516, 692, 695, 696, 697, 693,
	95, 694, 698, 1210, 54, 1247, 1248, 1515, 878, 1652,
	2103, 559, 1238, 588, 587, 597, 598, 590, 591, 592,
	593, 594, 595, 596, 589, 1514, 1261, 599, 1263, 1736,
	2056, 1652, 2037, 558, 1882, 2036, 1989, 1224, 2033, 2032,
	1272, 1174, 1175, 1176, 1262, 1288, 343, 559, 95, 1270,
	1226, 282, 1376, 1372, 1367, 1123, 1377, 1374, 1373, 364,
	2022, 559, 1371, 1295, 1251, 913, 725, 1652, 2019, 1652,
	2018, 1313, 831, 1378, 1652, 1990, 1736, 1935, 536, 830,
	1370, 1736, 1787, 1736, 1772, 1925, 1264, 1736, 559, 1879,
	95, 1739, 1738, 1873, 95, 811, 95, 1736, 1737, 1652,
	1651, 1872, 620, 1311, 809, 1282, 1283, 1285, 588, 587,
	597, 598, 590, 591, 592, 593, 594, 595, 596, 589,
	600, 534, 599, 1494, 559, 1781, 1358, 1626, 559, 1559,
	1558, 1555, 1556, 1555, 1554, 1191, 559, 935, 559, 95,
	95, 282, 527, 600, 1297, 46, 1883, 349, 1882, 1326,
	1327, 1780, 1329, 282, 1332, 1333, 1779, 1343, 1344, 282,
	282, 687, 559, 1334, 917, 1336, 1337, 1338, 1339, 1346,
	1236, 1342, 282, 1776, 1368, 1237, 1410, 730, 729, 46,
	1695, 282, 1708, 1684, 1674, 1472, 1348, 1365, 1242, 686,
	1352, 1363, 1354, 1549, 1548, 50, 1543, 935, 282, 282,
	282, 282, 282, 282, 738, 738, 799, 802, 282, 1731,
	1124, 1243, 1126, 713, 275, 687, 1362, 282, 1598, 1406,
	54, 46, 1221, 282, 282, 282, 364, 1465, 282, 50,
	1156, 282, 1421, 1473, 1412, 1411, 1243, 364, 364, 364,
	364, 364, 364, 364, 364, 1423, 1019, 996, 712, 1426,
	282, 364, 364, 996, 1455, 1467, 687, 714, 1242, 712,
	1478, 808, 1191, 1361, 1191, 2027, 1362, 1459, 1220, 2003,
	1496, 50, 1482, 1457, 1622, 874, 1502, 915, 1504, 577,
	687, 1242, 364, 1652, 282, 1673, 1476, 914, 1481, 1483,
	1572, 600, 1495, 918, 1561, 1560, 1161, 1557, 1273, 1024,
	1191, 1200, 919, 920, 1313, 588, 587, 597, 598, 590,
	591, 592, 593, 594, 595, 596, 589, 916, 1503, 599,
	715, 923, 923, 856, 50, 2118, 2024, 1878, 1864, 925,
	1863, 282, 95, 1524, 364, 1531, 1311, 1820, 1414, 1415,
	1819, 1783, 95, 1522, 975, 1782, 1774, 1713, 1533, 975,
	1710, 1565, 1535, 1696, 1541, 1078, 1178, 1107, 1568, 692,
	695, 696, 697, 693, 658, 694, 698, 1540, 1538, 316,
	47, 1845, 1527, 95, 1569, 1489, 1571, 1460, 1461, 1462,
	1463, 1464, 1487, 1350, 282, 1102, 600, 1301, 1275, 975,
	1247, 1248, 1109, 1110, 282, 1095, 1094, 1083, 1546, 660,
	1579, 1544, 1545, 1580, 1547, 64, 1364, 1550, 1551, 1869,
	1562, 1472, 1351, 1410, 1250, 1113, 828, 47, 364, 1586,
	812, 553, 1006, 62, 1253, 270, 364, 1007, 1567, 1588,
	350, 1004, 1252, 501, 1003, 1594, 1005, 1008, 1578, 696,
	697, 1002, 2079, 1591, 556, 557, 2028, 57, 59, 60,
	61, 282, 1407, 1162, 647, 1604, 2076, 1274, 282, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 1590,
	263, 561, 1335, 728, 95, 535, 1529, 1205, 1620, 1125,
	661, 563, 567, 2066, 562, 858, 859, 1210, 676, 659,
	1714, 827, 1570, 580, 665, 664, 1528, 1360, 1355, 1353,
	819, 700, 271, 272, 1112, 850, 1648, 282, 1272, 1662,
	1621, 1629, 364, 282, 364, 1703, 2093, 1704, 1705, 1706,
	1707, 1668, 738, 1575, 1646, 1510, 983, 1644, 266, 2051,
	1702, 634, 364, 1313, 1942, 1829, 267, 1667, 54, 1941,
	645, 282, 1825, 95, 1243, 2013, 2012, 1685, 1130, 1131,
	1132, 58, 2011, 2010, 1976, 1975, 1400, 570, 364, 1509,
	1508, 1565, 1862, 1861, 1675, 1311, 1837, 1292, 851, 56,
	1641, 1642, 1643, 1600, 1797, 8, 1692, 1358, 1648, 95,
	1794, 7, 1369, 600, 1795, 6, 1793, 5, 1582, 1036,
	1709, 1698, 282, 282, 677, 282, 282, 282, 711, 1700,
	51, 1, 1699, 861, 1890, 1716, 66, 1670, 65, 1944,
	543, 543, 543, 543, 1719, 543, 1424, 506, 1116, 1186,
	627, 1686, 543, 1717, 1687, 302, 1689, 2099, 2071, 288,
	1633, 2004, 1887, 1999, 1916, 577, 1720, 1320, 1058, 1694,
	47, 1871, 1298, 67, 1995, 1730, 1732, 282, 1697, 1881,
	613, 1574, 282, 1359, 617, 1760, 1379, 1122, 1356, 1141,
	1764, 1936, 1955, 1745, 1654, 1758, 934, 936, 1743, 1044,
	1271, 1476, 499, 1759, 629, 63, 1851, 282, 1766, 1045,
	1043, 1042, 1040, 984, 1768, 1072, 635, 636, 637, 638,
	639, 640, 641, 642, 643, 1323, 646, 1565, 649, 649,
	649, 649, 649, 649, 649, 649, 1075, 678, 679, 680,
	681, 737, 1786, 735, 1748, 736, 740, 244, 356, 1260,
	702, 699, 1812, 724, 1366, 1792, 349, 571, 1750, 1846,
	1393, 1392, 1137, 1401, 845, 1011, 1802, 1157, 364, 551,
	246, 1838, 612, 1265, 363, 1842, 1479, 1843, 565, 1280,
	1827, 282, 1940, 1824, 1839, 1225, 644, 979, 289, 865,
	1291, 301, 1777, 282, 1778, 300, 299, 1235, 581, 348,
	683, 1722, 1723, 1318, 1724, 1725, 1726, 1874, 691, 689,
	1476, 688, 1249, 1565, 1245, 347, 1876, 863, 864, 1597,
	282, 282, 1877, 1821, 1617, 1880, 1834, 555, 1875, 1160,
	24, 55, 1749, 342, 19, 18, 17, 20, 1885, 16,
	282, 1921, 1924, 1349, 15, 14, 28, 1811, 282, 1802,
	1801, 13, 1933, 1934, 364, 798, 1928, 1929, 1930, 1931,
	1932, 12, 1956, 1886, 1951, 11, 1751, 1752, 1753, 1754,
	1755, 1756, 1757, 10, 932, 1970, 9, 1800, 996, 1799,
	634, 1798, 1796, 940, 971, 4, 268, 22, 364, 2,
	0, 1968, 1969, 0, 282, 0, 1991, 1971, 0, 1994,
	0, 0, 1972, 0, 364, 1993, 2005, 0, 0, 0,
	0, 0, 1988, 1963, 1964, 1965, 1966, 1967, 0, 0,
	0, 0, 0, 543, 0, 0, 0, 0, 0, 0,
	0, 2000, 0, 0, 543, 543, 543, 543, 543, 543,
	543, 543, 1802, 0, 0, 2002, 0, 2007, 543, 543,
	0, 0, 282, 282, 0, 364, 0, 0, 2020, 0,
	0, 0, 0, 0, 0, 0, 0, 1030, 2014, 975,
	0, 2026, 1480, 1260, 0, 975, 1077, 1181, 0, 1802,
	0, 0, 0, 0, 0, 0, 0, 0, 1992, 0,
	0, 1189, 0, 1192, 1193, 0, 2034, 2035, 0, 1922,
	0, 1195, 1196, 1197, 364, 2039, 2040, 2052, 1506, 2054,
	2038, 0, 0, 0, 0, 0, 2055, 47, 0, 2058,
	0, 0, 0, 0, 0, 2062, 2061, 2053, 0, 2065,
	2070, 2057, 2069, 0, 0, 635, 1318, 1847, 282, 2075,
	2074, 1223, 2078, 0, 0, 0, 1229, 2081, 2060, 0,
	1231, 1232, 0, 1233, 1234, 0, 2083, 2077, 0, 1802,
	0, 0, 95, 1792, 0, 0, 0, 0, 0, 0,
	282, 0, 2089, 1802, 1802, 1802, 2090, 2088, 0, 0,
	0, 2005, 0, 1566, 0, 0, 0, 350, 350, 350,
	350, 350, 0, 95, 0, 0, 0, 1581, 1163, 1164,
	1585, 567, 702, 1587, 1016, 0, 0, 0, 2107, 0,
	0, 350, 0, 1589, 2096, 2109, 1885, 2096, 0, 0,
	0, 0, 0, 0, 0, 1802, 0, 1802, 1802, 0,
	2124, 1592, 0, 282, 2125, 0, 0, 0, 0, 0,
	0, 364, 0, 2119, 2111, 597, 598, 590, 591, 592,
	593, 594, 595, 596, 589, 0, 0, 599, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2096, 0, 0, 0, 0, 0, 0, 1802,
	1194, 0, 46, 1802, 48, 25, 26, 0, 0, 2106,
	0, 0, 0, 0, 0, 0, 1803, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1804, 0, 543,
	0, 543, 71, 76, 0, 68, 0, 0, 0, 0,
	1631, 0, 0, 1631, 1631, 1631, 1228, 1645, 72, 543,
	79, 0, 0, 658, 364, 0, 364, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 74, 69, 0,
	0, 0, 0, 0, 1422, 0, 0, 0, 0, 0,
	1631, 2129, 0, 0, 0, 1318, 0, 1676, 660, 0,
	1147, 0, 0, 1172, 0, 364, 0, 0, 0, 0,
	0, 0, 0, 0, 1146, 0, 0, 0, 0, 0,
	0, 0, 0, 1566, 1693, 0, 0, 0, 0, 0,
	0, 1631, 0, 0, 0, 364, 364, 0, 0, 0,
	0, 1810, 2126, 0, 1151, 1711, 0, 0, 0, 0,
	0, 1809, 0, 1493, 1145, 0, 1715, 0, 666, 667,
	668, 669, 670, 671, 672, 673, 674, 675, 0, 906,
	907, 0, 908, 909, 910, 912, 911, 564, 903, 661,
	0, 0, 0, 0, 0, 0, 0, 676, 659, 1734,
	1735, 0, 0, 665, 664, 0, 1805, 1806, 1808, 0,
	0, 0, 1807, 46, 0, 48, 25, 26, 1142, 1139,
	1140, 93, 1138, 0, 256, 1506, 0, 1803, 0, 0,
	0, 1239, 1240, 0, 0, 0, 0, 1767, 1804, 0,
	0, 0, 0, 0, 0, 276, 0, 0, 93, 93,
	70, 0, 1149, 1152, 0, 0, 0, 0, 0, 350,
	0, 600, 93, 0, 0, 0, 0, 0, 0, 1566,
	0, 93, 0, 93, 1789, 0, 0, 0, 75, 93,
	0, 0, 0, 1813, 0, 1456, 1631, 0, 0, 0,
	77, 78, 2098, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 677, 0, 0, 0, 0, 0, 1841,
	0, 0, 1469, 0, 0, 1599, 0, 0, 0, 0,
	46, 0, 48, 25, 26, 0, 0, 0, 1484, 1485,
	1606, 0, 1486, 0, 1803, 1488, 1144, 0, 0, 0,
	0, 0, 1810, 0, 0, 1804, 0, 0, 0, 0,
	49, 0, 1809, 0, 1500, 1566, 1506, 0, 0, 1607,
	1608, 0, 0, 1609, 1610, 0, 0, 1613, 0, 1143,
	0, 0, 0, 0, 0, 0, 1888, 0, 1913, 1914,
	1915, 1623, 1624, 1625, 0, 1628, 1927, 1813, 1813, 1927,
	1813, 1813, 1506, 1506, 0, 543, 0, 1805, 1806, 1808,
	0, 0, 0, 1807, 0, 0, 0, 0, 0, 0,
	975, 0, 0, 1953, 0, 0, 0, 0, 1954, 0,
	0, 0, 1957, 0, 93, 0, 0, 0, 0, 0,
	1148, 0, 0, 0, 0, 0, 1789, 1506, 0, 0,
	1681, 0, 0, 0, 0, 1385, 0, 0, 1150, 1810,
	0, 1631, 0, 0, 0, 1997, 0, 0, 0, 1809,
	46, 738, 48, 25, 26, 0, 0, 0, 0, 46,
	0, 48, 25, 26, 1803, 0, 0, 1477, 0, 47,
	0, 0, 0, 1803, 0, 1804, 0, 0, 1596, 2009,
	0, 0, 0, 0, 1804, 0, 1490, 1491, 1492, 0,
	1927, 0, 0, 0, 1805, 1806, 1808, 0, 0, 1718,
	1807, 2023, 0, 0, 0, 0, 1386, 0, 0, 0,
	2015, 1727, 1388, 1381, 1382, 0, 1389, 1384, 1383, 0,
	0, 93, 1391, 1387, 0, 1526, 0, 0, 93, 707,
	93, 49, 0, 1390, 0, 1740, 1741, 1742, 2095, 0,
	1380, 0, 1536, 0, 0, 1619, 0, 0, 629, 0,
	1079, 1080, 634, 1084, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 1771, 0, 0, 2063, 0, 0, 0,
	0, 0, 0, 1096, 1097, 1098, 1099, 1100, 46, 1810,
	48, 25, 26, 47, 0, 47, 0, 1506, 1810, 1809,
	0, 0, 1803, 0, 2080, 0, 0, 0, 1809, 0,
	0, 1669, 0, 1804, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1826, 1828, 0, 1830, 1831, 1832, 1833,
	0, 0, 0, 0, 0, 0, 738, 0, 0, 2094,
	0, 0, 0, 0, 1805, 1806, 1808, 0, 49, 0,
	1807, 0, 0, 1805, 1806, 1808, 0, 0, 0, 1807,
	2001, 0, 0, 0, 0, 1605, 0, 0, 0, 0,
	0, 0, 0, 1865, 0, 0, 0, 0, 0, 0,
	0, 364, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1789, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 1616, 242, 0, 0,
	93, 0, 0, 93, 0, 0, 93, 1810, 0, 0,
	833, 0, 0, 0, 0, 0, 0, 1809, 0, 0,
	0, 1943, 0, 252, 0, 0, 0, 0, 1947, 0,
	0, 93, 0, 1952, 0, 0, 0, 0, 0, 0,
	0, 1769, 0, 1666, 0, 0, 1773, 0, 93, 1201,
	1203, 0, 1204, 0, 0, 0, 1206, 833, 1208, 0,
	1973, 0, 1805, 1806, 1808, 0, 0, 0, 1807, 0,
	1211, 1212, 0, 0, 1213, 0, 1214, 1215, 49, 0,
	237, 0, 0, 0, 0, 0, 239, 49, 0, 0,
	0, 0, 0, 245, 241, 0, 629, 0, 0, 0,
	47, 0, 0, 0, 0, 0, 0, 276, 0, 0,
	0, 0, 0, 0, 276, 276, 0, 0, 0, 976,
	276, 0, 0, 0, 976, 243, 0, 0, 350, 247,
	2021, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1866, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 1733, 276, 276, 276, 276,
	0, 0, 93, 0, 976, 93, 93, 93, 93, 93,
	0, 0, 0, 0, 0, 0, 0, 1010, 0, 0,
	93, 0, 0, 0, 707, 1923, 0, 0, 1328, 93,
	93, 0, 46, 23, 48, 25, 26, 0, 1770, 0,
	0, 0, 0, 0, 1946, 238, 49, 0, 0, 0,
	0, 0, 41, 0, 0, 1172, 0, 27, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 36, 0,
	0, 0, 50, 0, 1822, 240, 0, 248, 249, 250,
	251, 255, 0, 0, 0, 0, 254, 253, 1998, 0,
	0, 1477, 0, 47, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2105, 0, 0, 0, 93, 0,
	0, 93, 0, 0, 93, 0, 0, 0, 0, 0,
	93, 0, 93, 0, 0, 0, 0, 0, 93, 0,
	0, 93, 0, 93, 0, 0, 93, 0, 29, 30,
	32, 31, 34, 0, 0, 0, 2025, 634, 0, 0,
	2130, 2131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 833, 35, 42, 43, 0, 0, 44,
	45, 33, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899,
	1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909,
	1910, 1911, 1912, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 0, 37, 38, 0, 39, 40, 0, 0, 0,
	0, 0, 1946, 0, 0, 0, 276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1537, 1539, 0, 0, 1429, 0, 0, 0, 0,
	0, 0, 0, 0, 2091, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 276, 0, 0, 0,
	0, 1230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2031, 1438, 1444, 1442, 0, 0,
	1439, 0, 0, 1437, 0, 0, 1446, 93, 0, 1445,
	1431, 1441, 1443, 1440, 1435, 0, 1430, 0, 1448, 1447,
	1449, 1428, 1451, 0, 0, 0, 1454, 1433, 1453, 1452,
	49, 1450, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 948, 0, 0, 1201, 1203, 0, 1204, 0, 0,
	1206, 0, 1208, 0, 0, 93, 0, 0, 1319, 0,
	1434, 1436, 0, 0, 1211, 1212, 0, 0, 1213, 0,
	1214, 1215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 93, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1653, 1656, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1404, 1405, 276, 0,
	0, 0, 0, 0, 0, 0, 2122, 0, 0, 0,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 0, 0, 1653, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 976, 0, 0, 0, 0, 0,
	976, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1319, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 707, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1319, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1319, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1319, 0, 485, 474, 0, 433, 487, 403, 421, 495,
	423, 424, 460, 382, 443, 162, 418, 400, 99, 406,
	375, 413, 376, 404, 435, 123, 401, 0, 476, 446,
	137, 232, 233, 493, 140, 451, 0, 186, 150, 0,
	0, 438, 478, 441, 469, 432, 461, 390, 450, 488,
	419, 456, 489, 0, 0, 976, 369, 0, 1649, 0,
	1650, 0, 0, 0, 0, 0, 112, 0, 455, 483,
	415, 498, 0, 459, 374, 453, 0, 380, 383, 494,
	481, 410, 411, 0, 0, 0, 0, 0, 0, 0,
	437, 442, 466, 429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 407, 0, 449, 0,
	0, 0, 387, 381, 0, 434, 0, 0, 0, 389,
	0, 408, 467, 0, 371, 472, 479, 431, 146, 213,
	482, 428, 427, 169, 0, 115, 0, 192, 127, 420,
	138, 464, 496, 486, 439, 477, 405, 414, 117, 412,
	176, 163, 204, 448, 462, 174, 141, 196, 170, 203,
	484, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 379, 372, 409, 470, 473, 394, 458, 384, 416,
	465, 417, 440, 399, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 2087,
	0, 377, 0, 187, 206, 223, 224, 378, 398, 480,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 457, 177, 114, 205, 183,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 393, 397, 391, 392, 444, 445, 490, 491,
	492, 468, 388, 0, 395, 396, 0, 475, 132, 234,
	235, 447, 98, 106, 139, 497, 220, 0, 171, 125,
	207, 0, 0, 422, 373, 426, 0, 0, 0, 0,
	0, 0, 0, 385, 386, 178, 0, 430, 425, 452,
	454, 463, 471, 0, 402, 436, 0, 111, 485, 474,
	0, 433, 487, 403, 421, 495, 423, 424, 460, 382,
	443, 162, 418, 400, 99, 406, 375, 413, 376, 404,
	435, 123, 401, 0, 476, 446, 137, 232, 233, 493,
	140, 451, 0, 186, 150, 0, 0, 438, 478, 441,
	469, 432, 461, 390, 450, 488, 419, 456, 489, 0,
	0, 0, 281, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 455, 483, 415, 498, 0, 459,
	374, 453, 0, 380, 383, 494, 481, 410, 411, 0,
	0, 0, 0, 0, 0, 0, 437, 442, 466, 429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	871, 0, 407, 0, 449, 0, 0, 0, 387, 381,
	0, 434, 0, 0, 0, 389, 0, 408, 467, 0,
	371, 472, 479, 431, 146, 213, 482, 428, 427, 169,
	0, 115, 0, 192, 127, 420, 138, 464, 496, 486,
	439, 477, 405, 414, 117, 412, 176, 163, 204, 448,
	462, 174, 141, 196, 170, 203, 484, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 379, 372, 409,
	470, 473, 394, 458, 384, 416, 465, 417, 440, 399,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 377, 0, 187,
	206, 223, 224, 378, 398, 480, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 457, 177, 114, 205, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 393, 397,
	391, 392, 444, 445, 490, 491, 492, 468, 388, 0,
	395, 396, 0, 475, 132, 234, 235, 447, 98, 106,
	139, 497, 220, 0, 171, 125, 207, 0, 0, 422,
	373, 426, 0, 0, 0, 0, 0, 0, 0, 385,
	386, 178, 0, 430, 425, 452, 454, 463, 471, 0,
	402, 436, 0, 111, 485, 474, 0, 433, 487, 403,
	421, 495, 423, 424, 460, 382, 443, 162, 418, 400,
	99, 406, 375, 413, 376, 404, 435, 123, 401, 0,
	476, 446, 137, 232, 233, 493, 140, 451, 0, 186,
	150, 0, 0, 438, 478, 441, 469, 432, 461, 390,
	450, 488, 419, 456, 489, 0, 0, 0, 369, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	455, 483, 415, 498, 0, 459, 374, 453, 0, 380,
	383, 494, 481, 410, 411, 1501, 0, 0, 0, 0,
	0, 0, 437, 442, 466, 429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 407, 0,
	449, 0, 0, 0, 387, 381, 0, 434, 0, 0,
	0, 389, 0, 408, 467, 0, 371, 472, 479, 431,
	146, 213, 482, 428, 427, 169, 0, 115, 0, 192,
	127, 420, 138, 464, 496, 486, 439, 477, 405, 414,
	117, 412, 176, 163, 204, 448, 462, 174, 141, 196,
	170, 203, 484, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 379, 372, 409, 470, 473, 394, 458,
	384, 416, 465, 417, 440, 399, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 377, 0, 187, 206, 223, 224, 378,
	398, 480, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 457, 177, 114,
	205, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 393, 397, 391, 392, 444, 445,
	490, 491, 492, 468, 388, 0, 395, 396, 0, 475,
	132, 234, 235, 447, 98, 106, 139, 497, 220, 0,
	171, 125, 207, 0, 0, 422, 373, 426, 0, 0,
	0, 0, 0, 0, 0, 385, 386, 178, 0, 430,
	425, 452, 454, 463, 471, 0, 402, 436, 0, 111,
	485, 474, 0, 433, 487, 403, 421, 495, 423, 424,
	460, 382, 443, 162, 418, 400, 99, 406, 375, 413,
	376, 404, 435, 123, 401, 0, 476, 446, 137, 232,
	233, 493, 140, 451, 0, 186, 150, 0, 0, 438,
	478, 441, 469, 432, 461, 390, 450, 488, 419, 456,
	489, 0, 0, 0, 281, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 455, 483, 415, 498,
	0, 459, 374, 453, 0, 380, 383, 494, 481, 410,
	411, 0, 0, 0, 0, 0, 0, 0, 437, 442,
	466, 429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 407, 0, 449, 0, 0, 0,
	387, 381, 0, 434, 0, 0, 0, 389, 0, 408,
	467, 0, 371, 472, 479, 431, 146, 213, 482, 428,
	427, 169, 0, 115, 0, 192, 127, 420, 138, 464,
	496, 486, 439, 477, 405, 414, 117, 412, 176, 163,
	204, 448, 462, 174, 141, 196, 170, 203, 484, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 379,
	372, 409, 470, 473, 394, 458, 384, 416, 465, 417,
	440, 399, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 377,
	0, 187, 206, 223, 224, 378, 398, 480, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 457, 177, 114, 205, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	393, 397, 391, 392, 444, 445, 490, 491, 492, 468,
	388, 0, 395, 396, 0, 475, 132, 234, 235, 447,
	98, 106, 139, 497, 220, 0, 171, 125, 207, 0,
	0, 422, 373, 426, 0, 0, 0, 0, 0, 0,
	0, 385, 386, 178, 0, 430, 425, 452, 454, 463,
	471, 0, 402, 436, 0, 111, 485, 474, 0, 433,
	487, 403, 421, 495, 423, 424, 460, 382, 443, 162,
	418, 400, 99, 406, 375, 413, 376, 404, 435, 123,
	401, 0, 476, 446, 137, 232, 233, 493, 140, 451,
	0, 186, 150, 0, 0, 438, 478, 441, 469, 432,
	461, 390, 450, 488, 419, 456, 489, 0, 0, 0,
	369, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 455, 483, 415, 498, 0, 459, 374, 453,
	0, 380, 383, 494, 481, 410, 411, 0, 0, 0,
	0, 0, 0, 0, 437, 442, 466, 429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1409, 0,
	407, 0, 449, 0, 0, 0, 387, 381, 0, 434,
	0, 0, 0, 389, 0, 408, 467, 0, 371, 472,
	479, 431, 146, 213, 482, 428, 427, 169, 0, 115,
	0, 192, 127, 420, 138, 464, 496, 486, 439, 477,
	405, 414, 117, 412, 176, 163, 204, 448, 462, 174,
	141, 196, 170, 203, 484, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 379, 372, 409, 470, 473,
	394, 458, 384, 416, 465, 417, 440, 399, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 377, 0, 187, 206, 223,
	224, 378, 398, 480, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 457,
	177, 114, 205, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 393, 397, 391, 392,
	444, 445, 490, 491, 492, 468, 388, 0, 395, 396,
	0, 475, 132, 234, 235, 447, 98, 106, 139, 497,
	220, 0, 171, 125, 207, 0, 0, 422, 373, 426,
	0, 0, 0, 0, 0, 0, 0, 385, 386, 178,
	0, 430, 425, 452, 454, 463, 471, 0, 402, 436,
	0, 111, 485, 474, 0, 433, 487, 403, 421, 495,
	423, 424, 460, 382, 443, 162, 418, 400, 99, 406,
	375, 413, 376, 404, 435, 123, 401, 0, 476, 446,
	137, 232, 233, 493, 140, 451, 0, 186, 150, 0,
	0, 438, 478, 441, 469, 432, 461, 390, 450, 488,
	419, 456, 489, 50, 0, 0, 369, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 455, 483,
	415, 498, 0, 459, 374, 453, 0, 380, 383, 494,
	481, 410, 411, 0, 0, 0, 0, 0, 0, 0,
	437, 442, 466, 429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 407, 0, 449, 0,
	0, 0, 387, 381, 0, 434, 0, 0, 0, 389,
	0, 408, 467, 0, 371, 472, 479, 431, 146, 213,
	482, 428, 427, 169, 0, 115, 0, 192, 127, 420,
	138, 464, 496, 486, 439, 477, 405, 414, 117, 412,
	176, 163, 204, 448, 462, 174, 141, 196, 170, 203,
	484, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 379, 372, 409, 470, 473, 394, 458, 384, 416,
	465, 417, 440, 399, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 377, 0, 187, 206, 223, 224, 378, 398, 480,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 457, 177, 114, 205, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 393, 397, 391, 392, 444, 445, 490, 491,
	492, 468, 388, 0, 395, 396, 0, 475, 132, 234,
	235, 447, 98, 106, 139, 497, 220, 0, 171, 125,
	207, 0, 0, 422, 373, 426, 0, 0, 0, 0,
	0, 0, 0, 385, 386, 178, 0, 430, 425, 452,
	454, 463, 471, 0, 402, 436, 0, 111, 485, 474,
	0, 433, 487, 403, 421, 495, 423, 424, 460, 382,
	443, 162, 418, 400, 99, 406, 375, 413, 376, 404,
	435, 123, 401, 0, 476, 446, 137, 232, 233, 493,
	140, 451, 0, 186, 150, 0, 0, 438, 478, 441,
	469, 432, 461, 390, 450, 488, 419, 456, 489, 0,
	0, 0, 369, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 455, 483, 415, 498, 0, 459,
	374, 453, 0, 380, 383, 494, 481, 410, 411, 0,
	0, 0, 0, 0, 0, 0, 437, 442, 466, 429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 407, 0, 449, 0, 0, 0, 387, 381,
	0, 434, 0, 0, 0, 389, 0, 408, 467, 0,
	371, 472, 479, 431, 146, 213, 482, 428, 427, 169,
	0, 115, 0, 192, 127, 420, 138, 464, 496, 486,
	439, 477, 405, 414, 117, 412, 176, 163, 204, 448,
	462, 174, 141, 196, 170, 203, 484, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 379, 372, 409,
	470, 473, 394, 458, 384, 416, 465, 417, 440, 399,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 367, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 377, 0, 187,
	206, 223, 224, 378, 398, 480, 216, 217, 218, 219,
	0, 0, 0, 368, 366, 131, 181, 135, 142, 172,
	221, 457, 177, 114, 205, 183, 362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 393, 397,
	391, 392, 444, 445, 490, 491, 492, 468, 388, 0,
	395, 396, 0, 475, 132, 234, 235, 447, 98, 106,
	139, 497, 220, 0, 171, 125, 207, 0, 0, 422,
	373, 426, 0, 0, 0, 0, 0, 0, 0, 385,
	386, 178, 0, 430, 425, 452, 454, 463, 471, 0,
	402, 436, 0, 111, 485, 474, 0, 433, 487, 403,
	421, 495, 423, 424, 460, 382, 443, 162, 418, 400,
	99, 406, 375, 413, 376, 404, 435, 123, 401, 0,
	476, 446, 137, 232, 233, 493, 140, 451, 0, 186,
	150, 0, 0, 438, 478, 441, 469, 432, 461, 390,
	450, 488, 419, 456, 489, 0, 0, 0, 94, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	455, 483, 415, 498, 0, 459, 374, 453, 0, 380,
	383, 494, 481, 410, 411, 0, 0, 0, 0, 0,
	0, 0, 437, 442, 466, 429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 407, 0,
	449, 0, 0, 0, 387, 381, 0, 434, 0, 0,
	0, 389, 0, 408, 467, 0, 371, 472, 479, 431,
	146, 213, 482, 428, 427, 169, 0, 115, 0, 192,
	127, 420, 138, 464, 496, 486, 439, 477, 405, 414,
	117, 412, 176, 163, 204, 448, 462, 174, 141, 196,
	170, 203, 484, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 379, 372, 409, 470, 473, 394, 458,
	384, 416, 465, 417, 440, 399, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 377, 0, 187, 206, 223, 224, 378,
	398, 480, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 457, 177, 114,
	205, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 393, 397, 391, 392, 444, 445,
	490, 491, 492, 468, 388, 0, 395, 396, 0, 475,
	132, 234, 235, 447, 98, 106, 139, 497, 220, 0,
	171, 125, 207, 0, 0, 422, 373, 426, 0, 0,
	0, 0, 0, 0, 0, 385, 386, 178, 0, 430,
	425, 452, 454, 463, 471, 0, 402, 436, 0, 111,
	485, 474, 0, 433, 487, 403, 421, 495, 423, 424,
	460, 382, 443, 162, 418, 400, 99, 406, 375, 413,
	376, 404, 435, 123, 401, 0, 476, 446, 137, 232,
	233, 493, 140, 451, 0, 186, 150, 0, 0, 438,
	478, 441, 469, 432, 461, 390, 450, 488, 419, 456,
	489, 0, 0, 0, 369, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 455, 483, 415, 498,
	0, 459, 374, 453, 0, 380, 383, 494, 481, 410,
	411, 0, 0, 0, 0, 0, 0, 0, 437, 442,
	466, 429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 407, 0, 449, 0, 0, 0,
	387, 381, 0, 434, 0, 0, 0, 389, 0, 408,
	467, 0, 371, 472, 479, 431, 146, 213, 482, 428,
	427, 169, 0, 115, 0, 192, 127, 420, 138, 464,
	496, 486, 439, 477, 405, 414, 117, 412, 176, 163,
	204, 448, 462, 174, 141, 196, 170, 203, 484, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 379,
	372, 409, 470, 473, 394, 458, 384, 416, 465, 417,
	440, 399, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 717, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 367, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 377,
	0, 187, 206, 223, 224, 378, 398, 480, 216, 217,
	218, 219, 0, 0, 0, 368, 366, 131, 181, 135,
	142, 172, 221, 457, 177, 114, 205, 183, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	393, 397, 391, 392, 444, 445, 490, 491, 492, 468,
	388, 0, 395, 396, 0, 475, 132, 234, 235, 447,
	98, 106, 139, 497, 220, 0, 171, 125, 207, 0,
	0, 422, 373, 426, 0, 0, 0, 0, 0, 0,
	0, 385, 386, 178, 0, 430, 425, 452, 454, 463,
	471, 0, 402, 436, 0, 111, 485, 474, 0, 433,
	487, 403, 421, 495, 423, 424, 460, 382, 443, 162,
	418, 400, 99, 406, 375, 413, 376, 404, 435, 123,
	401, 0, 476, 446, 137, 232, 233, 493, 140, 451,
	0, 186, 150, 0, 0, 438, 478, 441, 469, 432,
	461, 390, 450, 488, 419, 456, 489, 0, 0, 0,
	369, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 455, 483, 415, 498, 0, 459, 374, 453,
	0, 380, 383, 494, 481, 410, 411, 0, 0, 0,
	0, 0, 0, 0, 437, 442, 466, 429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	407, 0, 449, 0, 0, 0, 387, 381, 0, 434,
	0, 0, 0, 389, 0, 408, 467, 0, 371, 472,
	479, 431, 146, 213, 482, 428, 427, 169, 0, 115,
	0, 192, 127, 420, 138, 464, 496, 486, 439, 477,
	405, 414, 117, 412, 176, 163, 204, 448, 462, 174,
	141, 196, 170, 203, 484, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 379, 372, 409, 470, 473,
	394, 458, 384, 416, 465, 417, 440, 399, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 357,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 367, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 377, 0, 187, 206, 223,
	224, 378, 398, 480, 216, 217, 218, 219, 0, 0,
	0, 368, 366, 360, 359, 135, 142, 172, 221, 457,
	177, 114, 205, 183, 362, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 393, 397, 391, 392,
	444, 445, 490, 491, 492, 468, 388, 0, 395, 396,
	0, 475, 132, 234, 235, 447, 98, 106, 139, 497,
	220, 0, 171, 125, 207, 0, 0, 422, 373, 426,
	0, 0, 0, 0, 0, 0, 0, 385, 386, 178,
	0, 430, 425, 452, 454, 463, 471, 0, 402, 436,
	0, 111, 485, 474, 0, 433, 487, 403, 421, 495,
	423, 424, 460, 382, 443, 162, 418, 400, 99, 406,
	375, 413, 376, 404, 435, 123, 401, 0, 476, 446,
	137, 232, 233, 493, 140, 451, 0, 186, 150, 0,
	0, 438, 478, 441, 469, 432, 461, 390, 450, 488,
	419, 456, 489, 0, 0, 0, 369, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 455, 483,
	415, 498, 0, 459, 374, 453, 0, 380, 383, 494,
	481, 410, 411, 0, 0, 0, 0, 0, 0, 0,
	437, 442, 466, 429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 407, 0, 449, 0,
	0, 0, 387, 381, 0, 434, 0, 0, 0, 389,
	0, 408, 467, 0, 371, 472, 479, 431, 146, 213,
	482, 428, 427, 169, 0, 115, 0, 192, 127, 420,
	138, 464, 496, 486, 439, 477, 405, 414, 117, 412,
	176, 163, 204, 448, 462, 174, 141, 196, 170, 203,
	484, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 379, 372, 409, 470, 473, 394, 458, 384, 416,
	465, 417, 440, 399, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 377, 0, 187, 206, 223, 224, 378, 398, 480,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 457, 177, 114, 205, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 393, 397, 391, 392, 444, 445, 490, 491,
	492, 468, 388, 0, 395, 396, 0, 475, 132, 234,
	235, 447, 98, 106, 139, 497, 220, 0, 171, 125,
	207, 0, 0, 422, 373, 426, 0, 0, 0, 0,
	0, 0, 0, 385, 386, 178, 0, 430, 425, 452,
	454, 463, 471, 162, 402, 436, 99, 111, 0, 284,
	0, 0, 0, 123, 280, 0, 0, 0, 137, 232,
	233, 326, 140, 327, 0, 186, 150, 0, 0, 0,
	0, 317, 318, 0, 0, 0, 0, 0, 0, 1028,
	0, 50, 0, 0, 281, 305, 283, 303, 307, 308,
	309, 310, 0, 0, 112, 306, 311, 312, 313, 1029,
	0, 0, 0, 278, 296, 0, 325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 0, 0, 0, 0, 339, 0, 295, 0,
	0, 291, 292, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	337, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 341, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	328, 338, 334, 335, 332, 333, 331, 330, 329, 340,
	319, 320, 321, 322, 324, 0, 132, 234, 235, 323,
	98, 106, 139, 0, 220, 0, 171, 125, 207, 162,
	0, 0, 99, 928, 0, 284, 0, 0, 0, 123,
	280, 0, 0, 178, 137, 232, 233, 326, 140, 327,
	0, 186, 150, 0, 336, 111, 0, 317, 318, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	281, 305, 283, 303, 307, 308, 309, 310, 0, 0,
	112, 306, 311, 312, 313, 0, 0, 0, 0, 278,
	296, 0, 325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 274, 0,
	0, 0, 339, 0, 295, 0, 0, 291, 292, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 337, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 341, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 328, 338, 334, 335,
	332, 333, 331, 330, 329, 340, 319, 320, 321, 322,
	324, 0, 132, 234, 235, 323, 98, 106, 139, 0,
	220, 0, 171, 125, 207, 162, 0, 0, 99, 0,
	0, 284, 0, 0, 0, 123, 280, 0, 0, 178,
	137, 232, 233, 326, 140, 327, 0, 186, 150, 0,
	336, 111, 0, 317, 318, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 559, 281, 305, 283, 303,
	307, 308, 309, 310, 0, 0, 112, 306, 311, 312,
	313, 0, 0, 0, 0, 278, 296, 0, 325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 0, 0, 0, 0, 339, 0,
	295, 0, 0, 291, 292, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 337, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 341, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 328, 338, 334, 335, 332, 333, 331, 330,
	329, 340, 319, 320, 321, 322, 324, 0, 132, 234,
	235, 323, 98, 106, 139, 0, 220, 0, 171, 125,
	207, 162, 0, 0, 99, 0, 0, 284, 0, 0,
	0, 123, 280, 0, 0, 178, 137, 232, 233, 326,
	140, 327, 0, 186, 150, 0, 336, 111, 0, 317,
	318, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 281, 305, 283, 303, 307, 308, 309, 310,
	0, 0, 112, 306, 311, 312, 313, 0, 0, 0,
	0, 278, 296, 0, 325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	274, 0, 0, 0, 339, 0, 295, 0, 0, 291,
	292, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 337, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	341, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 328, 338,
	334, 335, 332, 333, 331, 330, 329, 340, 319, 320,
	321, 322, 324, 0, 132, 234, 235, 323, 98, 106,
	139, 0, 220, 0, 171, 125, 207, 162, 0, 0,
	99, 0, 0, 284, 0, 0, 0, 123, 280, 0,
	0, 178, 137, 232, 233, 326, 140, 327, 0, 186,
	150, 0, 336, 111, 0, 317, 318, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 281, 305,
	283, 303, 307, 308, 309, 310, 0, 0, 112, 306,
	311, 312, 313, 0, 0, 0, 0, 278, 296, 0,
	325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	339, 0, 295, 0, 0, 942, 292, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 337, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	944, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	954, 960, 958, 191, 148, 955, 134, 182, 953, 102,
	0, 962, 122, 167, 961, 946, 957, 959, 956, 951,
	198, 945, 222, 964, 963, 965, 943, 967, 211, 105,
	109, 970, 949, 969, 968, 208, 966, 201, 149, 145,
	0, 104, 199, 147, 144, 947, 948, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 341, 0, 158, 130,
	0, 0, 0, 0, 0, 950, 952, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 328, 338, 334, 335, 332, 333,
	331, 330, 329, 340, 319, 320, 321, 322, 324, 0,
	132, 234, 235, 323, 98, 106, 139, 0, 220, 0,
	171, 125, 207, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 178, 99, 0,
	0, 284, 0, 0, 0, 123, 280, 0, 336, 111,
	137, 232, 233, 326, 140, 327, 0, 186, 150, 0,
	0, 0, 0, 317, 318, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 281, 305, 283, 303,
	307, 308, 309, 310, 0, 0, 112, 306, 311, 312,
	313, 0, 0, 0, 0, 278, 296, 0, 325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 0, 0, 0, 0, 339, 0,
	295, 0, 0, 291, 292, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 337, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 341, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 328, 338, 334, 335, 332, 333, 331, 330,
	329, 340, 319, 320, 321, 322, 324, 0, 132, 234,
	235, 323, 98, 106, 139, 0, 220, 0, 171, 125,
	207, 162, 0, 0, 99, 0, 0, 284, 0, 0,
	0, 123, 280, 0, 0, 178, 137, 232, 233, 326,
	140, 327, 0, 186, 150, 0, 336, 111, 0, 317,
	318, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 281, 305, 283, 303, 307, 308, 309, 310,
	0, 0, 112, 306, 311, 312, 313, 0, 0, 0,
	0, 278, 296, 0, 325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	0, 0, 0, 0, 339, 0, 295, 0, 0, 291,
	292, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 337, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	341, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 328, 338,
	334, 335, 332, 333, 331, 330, 329, 340, 319, 320,
	321, 322, 324, 0, 132, 234, 235, 323, 98, 106,
	139, 0, 220, 0, 171, 125, 207, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 178, 137, 232, 233, 326, 140, 327, 0, 186,
	150, 0, 336, 111, 0, 317, 318, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 281, 305,
	283, 303, 307, 308, 309, 310, 0, 0, 112, 306,
	311, 312, 313, 0, 0, 0, 0, 0, 296, 0,
	325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	339, 0, 295, 0, 0, 291, 292, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 337, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 2127, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 341, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 328, 338, 334, 335, 332, 333,
	331, 330, 329, 340, 319, 320, 321, 322, 324, 0,
	132, 234, 235, 323, 98, 106, 139, 0, 220, 0,
	171, 125, 207, 162, 0, 0, 99, 0, 0, 284,
	0, 0, 0, 123, 0, 0, 0, 178, 137, 232,
	233, 326, 140, 327, 0, 186, 150, 0, 336, 111,
	0, 317, 318, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 281, 305, 283, 303, 307, 308,
	309, 310, 0, 0, 112, 306, 311, 312, 313, 0,
	0, 0, 0, 0, 296, 0, 325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 0, 0, 0, 0, 339, 0, 295, 0,
	0, 291, 292, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	337, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 341, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	328, 338, 334, 335, 332, 333, 331, 330, 329, 340,
	319, 320, 321, 322, 324, 0, 132, 234, 235, 323,
	98, 106, 139, 0, 220, 0, 171, 125, 207, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 178, 137, 232, 233, 326, 140, 327,
	0, 186, 150, 0, 336, 111, 0, 317, 318, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	281, 305, 283, 303, 307, 308, 309, 310, 0, 0,
	112, 306, 311, 312, 313, 0, 0, 0, 0, 0,
	296, 0, 325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 0, 0,
	0, 0, 339, 0, 295, 0, 0, 291, 292, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 337, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 341, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 328, 338, 334, 335,
	332, 333, 331, 330, 329, 340, 319, 320, 321, 322,
	324, 0, 132, 234, 235, 323, 98, 106, 139, 0,
	220, 0, 171, 125, 207, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 178,
	137, 232, 233, 326, 140, 327, 0, 186, 150, 0,
	336, 111, 0, 317, 318, 0, 0, 0, 0, 0,
	0, 0, 0, 1202, 0, 0, 281, 305, 283, 303,
	307, 308, 309, 310, 0, 0, 112, 306, 311, 312,
	313, 0, 0, 0, 0, 0, 296, 0, 325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 0, 0, 0, 0, 339, 0,
	295, 0, 0, 291, 292, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 337, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	222, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 341, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 328, 338, 334, 335, 332, 333, 331, 330,
	329, 340, 319, 320, 321, 322, 324, 0, 132, 234,
	235, 323, 98, 106, 139, 0, 220, 0, 171, 125,
	207, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 178, 137, 232, 233, 0,
	140, 0, 0, 186, 150, 0, 336, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1532,
	0, 0, 281, 0, 1304, 1305, 1306, 1307, 0, 0,
	0, 0, 112, 1310, 1308, 312, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 1312, 1317, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1314, 0,
	1316, 1315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 234, 235, 0, 98, 106,
	139, 0, 220, 0, 171, 125, 207, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 178, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1303, 0, 0, 281, 0,
	1304, 1305, 1306, 1307, 0, 0, 0, 0, 112, 1310,
	1308, 312, 313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 1312, 1317,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1314, 0, 1316, 1315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 234, 235, 0, 98, 106, 139, 0, 220, 0,
	171, 125, 207, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 178, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 0, 1304, 1305, 1306, 1307,
	0, 0, 0, 0, 112, 1310, 1308, 312, 313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 1312, 1317, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	1314, 0, 1316, 1315, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 132, 234, 235, 0,
	98, 106, 139, 0, 220, 0, 171, 125, 207, 0,
	369, 305, 922, 303, 307, 308, 309, 310, 0, 0,
	112, 306, 311, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 764,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 0, 132, 234, 235, 0, 98, 106, 139, 0,
	220, 0, 171, 125, 207, 1818, 0, 369, 0, 1816,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 1815, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1814, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 749, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 765,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 0,
	791, 792, 167, 793, 794, 795, 797, 796, 766, 767,
	768, 772, 770, 769, 771, 743, 745, 211, 741, 744,
	750, 746, 747, 748, 762, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 763, 773, 774, 775,
	776, 777, 778, 779, 780, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 764, 0, 137, 232, 233, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	234, 235, 369, 98, 742, 139, 0, 220, 0, 171,
	125, 207, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 749,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 765, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 2006, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 0, 791, 792, 167, 793, 794,
	795, 797, 796, 766, 767, 768, 772, 770, 769, 771,
	743, 745, 211, 741, 744, 750, 746, 747, 748, 762,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 763, 773, 774, 775, 776, 777, 778, 779, 780,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 0, 0, 0, 0,
	162, 0, 0, 99, 0, 576, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 234, 235, 0, 98, 742,
	139, 369, 220, 578, 171, 125, 207, 0, 0, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 573, 572,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 574, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 764, 0,
	137, 232, 233, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 234, 235, 369, 98, 106, 139,
	0, 220, 0, 171, 125, 207, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 765, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 225, 226, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 0, 791,
	792, 167, 793, 794, 795, 797, 796, 766, 767, 768,
	772, 770, 769, 771, 743, 745, 211, 741, 744, 750,
	746, 747, 748, 762, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 763, 773, 774, 775, 776,
	777, 778, 779, 780, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 223, 224, 0, 0, 0,
	216, 217, 218, 219, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 221, 0, 177, 114, 205, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 132, 234,
	235, 0, 98, 742, 139, 0, 220, 0, 171, 125,
	207, 1818, 0, 369, 0, 1816, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	1815, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1814,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 0, 0, 0,
	0, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 232, 233, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 234, 235, 0, 98,
	106, 139, 369, 220, 502, 171, 125, 207, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1052, 146, 213, 0, 0, 0, 1047,
	0, 1046, 0, 1048, 1049, 0, 138, 0, 0, 1050,
	1053, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 234, 235, 369, 98, 106,
	139, 0, 220, 0, 171, 125, 207, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 917, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 1678,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 1677,
	209, 156, 161, 159, 208, 1679, 201, 149, 145, 0,
	104, 199, 147, 144, 1680, 920, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 916,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 0, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 137,
	232, 233, 0, 140, 0, 0, 186, 150, 0, 132,
	234, 235, 0, 98, 106, 139, 0, 220, 0, 171,
	125, 207, 50, 0, 0, 94, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 112, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 0, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 0,
	0, 0, 0, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 234, 235,
	0, 98, 106, 139, 94, 220, 96, 171, 125, 207,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 234, 235, 0,
	98, 106, 139, 281, 220, 96, 171, 125, 207, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	2086, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 1507, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 132, 234, 235, 0, 98,
	106, 139, 0, 220, 0, 171, 125, 207, 50, 0,
	0, 94, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 112, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 706, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 234, 235, 0, 98, 106, 139,
	94, 220, 708, 171, 125, 207, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 0, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 132, 234, 235, 0, 98, 106, 139, 0,
	220, 0, 171, 125, 207, 50, 0, 0, 369, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 0, 0, 0, 0, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 234, 235, 0, 98, 106, 139, 94, 220, 96,
	171, 125, 207, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 823, 177, 114, 205,
	183, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 232, 233, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 800, 0, 132,
	234, 235, 369, 98, 106, 139, 0, 220, 0, 171,
	125, 207, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 801, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 0, 0, 0, 0,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 727, 0, 0, 0, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 234, 235, 0, 98, 106,
	139, 369, 220, 726, 171, 125, 207, 0, 0, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 706, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 234, 235, 0, 98, 106, 139,
	94, 220, 708, 171, 125, 207, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 704, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 0, 0, 0, 0, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 684, 123, 0,
	0, 0, 0, 137, 232, 233, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 234, 235, 0, 98, 106, 139, 94,
	220, 96, 171, 125, 207, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 225, 226, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 222, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 223, 224,
	0, 0, 0, 216, 217, 218, 219, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 221, 0, 177,
	114, 205, 183, 0, 0, 0, 352, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 0, 0,
	0, 132, 234, 235, 0, 98, 106, 139, 0, 220,
	0, 171, 125, 207, 94, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 234, 235, 0,
	98, 106, 139, 94, 220, 96, 171, 125, 207, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 0, 0, 0,
	0, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 232, 233, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 234, 235, 0, 98,
	106, 139, 94, 220, 96, 171, 125, 207, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 137, 232, 233, 0, 140, 0, 0, 186, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 234, 235, 369, 98, 106,
	139, 0, 220, 0, 171, 125, 207, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 1507, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 225, 226, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 222, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 223, 224, 0, 0,
	0, 216, 217, 218, 219, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 221, 0, 177, 114, 205,
	183, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 232, 233, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	234, 235, 369, 98, 106, 139, 0, 220, 0, 171,
	125, 207, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	1632, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	225, 226, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 222, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 223, 224, 0, 0, 0, 216, 217, 218, 219,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	221, 0, 177, 114, 205, 183, 0, 0, 0, 0,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 137, 232, 233, 0, 140,
	0, 0, 186, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 234, 235, 0, 98, 106,
	139, 281, 220, 96, 171, 125, 207, 0, 0, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 0, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 225,
	226, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 222, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	223, 224, 0, 0, 0, 216, 217, 218, 219, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 221,
	0, 177, 114, 205, 183, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 232, 233, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 234, 235, 0, 98, 106, 139,
	94, 220, 708, 171, 125, 207, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 222, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 223,
	224, 0, 0, 0, 216, 217, 218, 219, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 221, 0,
	177, 114, 205, 183, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 137,
	232, 233, 0, 140, 0, 0, 186, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 234, 235, 369, 98, 106, 139, 0,
	220, 0, 171, 125, 207, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 0, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 225, 226, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 222,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 223, 224, 0, 0, 0, 216,
	217, 218, 219, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 221, 0, 177, 114, 205, 183, 0,
	0, 0, 0, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 137, 232,
	233, 0, 140, 0, 0, 186, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 234, 235,
	0, 98, 106, 139, 369, 220, 578, 171, 125, 207,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 222, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 223, 224, 0, 0, 0, 216, 217,
	218, 219, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 221, 0, 177, 114, 205, 183, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 137, 232, 233,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 234, 235, 0,
	98, 106, 139, 369, 220, 502, 171, 125, 207, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 225, 226, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 222, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 223, 224, 0, 0, 0, 216, 217, 218,
	219, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 221, 0, 177, 114, 205, 183, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 137, 232, 233, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 234, 235, 369, 98,
	106, 139, 0, 220, 0, 171, 125, 207, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 222, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 223, 224, 0,
	0, 0, 216, 217, 218, 219, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 221, 0, 177, 114,
	205, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 234, 235, 0, 98, 106, 139, 0, 220, 0,
	171, 125, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
}

var yyPact = [...]int16{
	3046, -1000, -247, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1543, 1584, -1000, -1000, -1000, -1000, -1000, 1369, 2074,
	354, 448, 202, 18724, 447, 2824, 19013, -1000, 116, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1235, -1000, -1000,
	-1000, -1000, -1000, 1531, 1540, 1235, 1501, 9243, -1000, 323,
	16112, 18435, 7501, -1000, 21024, 423, 418, 234, 382, 21309,
	328, 328, 21309, 21309, 19013, 446, 328, -1000, -209, -198,
	-1000, -94, 426, 19013, -1000, 19013, 347, 1103, 347, 347,
	347, 19013, -1000, 510, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 19013, 1082, 1464, 772,
	5997, 5997, 5997, 5997, 218, 5997, -14, 1387, -1000, -1000,
	-1000, -1000, 5997, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1422, 973, 1472, 10263, 10263, 1543, -1000,
	1235, -1000, -1000, 1566, -1000, 13782, 508, -1000, 10263, 115,
	1288, -1000, -1000, -230, 1288, -1000, -1000, 482, -1000, -1000,
	-1000, 11271, 11271, 11271, 11271, 11271, 11271, 11271, -1000, -1000,
	-1000, -1000, 22, -1000, 943, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 507, -1000, 9927, 1288, 1288, 1288,
	1288, 1288, 1288, 1288, 1288, 10263, 1288, 1435, 1288, 1288,
	1288, 1288, 1288, 1288, 1288, 1288, 1268, 1288, 1288, 1288,
	1288, -1000, 735, 18140, 1178, 1335, -1000, -1000, -1000, 1498,
	15236, 17851, 19013, 1222, -1000, 1283, 7125, -30, -1000, -1000,
	-1000, 663, 501, 17562, -1000, -1000, -1000, 1462, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1140,
	-1000, 14067, 14067, 17273, 21309, 328, 368, 135, 328, 1226,
	1065, 705, 1056, 1386, 427, 1497, 328, 19013, -1000, -1000,
	-1000, -1000, 16988, 5997, 362, 19013, 1487, 1382, 19013, 1040,
	1033, -1000, 6749, -1000, 5997, 5997, 5997, 5997, 5997, 5997,
	5997, 5997, -1000, -1000, -1000, -1000, -1000, -1000, 5997, 5997,
	-1000, -13, -1000, 19013, -1000, 1503, -1000, -1000, -1000, -1000,
	-1000, 1579, 535, 657, 497, 1286, -1000, 633, 1531, 973,
	19013, -1000, 10263, 10263, 780, -1000, 20735, -1000, -1000, 4493,
	542, 11271, 763, 818, 11271, 11271, 11271, 11271, 11271, 11271,
	11271, 11271, 11271, 11271, 11271, 11271, 11271, 11271, 11271, 922,
	2107, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1026, -1000, 1066, -1000, 1235, 12911, 12911,
	39, 39, 39, 39, 39, 39, 20446, -1000, -259, 8571,
	-1000, 7877, 973, 1100, 593, 9927, 9243, 9243, 9579, 10263,
	11271, 19872, 9243, 1503, 672, 593, 19872, 1527, -1000, 973,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 77,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9243, 9243,
	9243, 9243, -1000, 232, 19013, -1000, 19872, 16112, 16112, 16112,
	16112, 16112, -1000, 1417, 1410, -1000, 1407, 1398, 1413, 19013,
	-1000, 1124, 15236, 438, 1288, -1000, 20161, -1000, -1000, 232,
	1211, 16112, 19013, -1000, -1000, 6373, 1283, -30, 1262, -1000,
	-22, -26, 8235, 7877, 518, -1000, -1000, -1000, -1000, 164,
	14653, 103, -139, 12, -1000, -1000, -1000, -1000, -1000, 1319,
	-1000, -1000, -1000, 1319, 254, 1361, 1319, 1361, -1000, 1319,
	1361, 50, 50, 50, 50, 50, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1360, 1359, -1000, 1319, 1319, 1319, 1319,
	1319, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1349, 273, 1349, 1321, 1321, -1000, -1000, 103, 1358,
	19013, 21309, 1381, 19013, 328, -222, 19013, -120, 1016, 5997,
	1475, 5997, 19013, 1560, 19013, -1000, -1000, -1000, 150, 14067,
	19013, -1000, 2245, 19013, -1000, 19013, -1000, -1000, 19013, 5997,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 646, -1000, -1000, -1000, 1271,
	-1000, -1000, 1433, 10263, 10263, 5245, 10263, -1000, -1000, -1000,
	1472, -1000, -1000, 542, 601, -1000, -1000, 880, -1000, -1000,
	-1000, -1000, 496, 1288, -1000, 1027, -1000, -1000, -1000, -1000,
	763, 11271, 11271, 11271, 1224, 1027, 932, 2032, 319, 39,
	173, 173, 38, 38, 38, 38, 38, 148, 148, -1000,
	-1000, -1000, -1000, -116, -1000, 1319, 1349, 273, 1349, 1321,
	1321, -1000, -1000, 973, 76, -152, -1000, -1000, -1000, -1000,
	-1000, -1000, -230, 944, -1000, -1000, 931, 973, 9243, 1098,
	1100, -1000, 13782, -1000, -1000, 10263, -1000, 973, 1098, 1098,
	670, 1264, 11607, 1319, -1000, 1319, 1321, -1000, -1000, 1319,
	119, 1319, 118, -1000, -1000, -1000, -1000, 1321, -1000, -1000,
	-1000, -1000, -1000, 1319, 1319, -1000, -1000, 1319, -1000, 1319,
	1319, 854, 617, 784, 1231, -1000, 494, 1098, 9243, 709,
	-1000, 10263, 973, 19013, -1000, -1000, 1098, 973, 1263, 1098,
	1098, 1159, 1288, -1000, 1244, -1000, 658, 1335, 1356, 1380,
	971, -1000, -1000, -1000, -1000, 1408, -1000, 1400, -1000, -1000,
	-1000, -1000, -117, 395, 394, 387, 21309, -1000, 1552, 16112,
	1219, -1000, -1000, 1262, -30, -51, -1000, -1000, -1000, -1000,
	593, 653, -1000, -1000, 1010, 7877, 1261, 1443, -1000, -1000,
	-1000, -1000, -1000, -1000, 1352, 754, 21309, 301, 305, 594,
	476, 1006, -1000, -1000, -1000, 896, -1000, 21309, -1000, 1578,
	-1000, -1000, 298, -1000, 297, 677, 941, 19013, 159, 1351,
	12279, 915, -1000, -262, -1000, 9, -1000, -1000, 908, 50,
	50, 1319, 50, 876, 50, 50, -1000, -1000, 518, 1461,
	518, 518, 518, 518, 940, 940, -152, -152, -1000, -1000,
	-1000, -1000, 914, 1349, -1000, -1000, -1000, 911, -1000, 19013,
	21309, 1347, 1378, 19013, 1496, 19013, -1000, -1000, -1000, 1495,
	-1000, 7877, -1000, -1000, -1000, -1000, -1000, 1494, 1229, -1000,
	-1000, -1000, -1000, 384, -1000, -1000, 1371, -1000, 936, 2536,
	598, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 230, 456, -1000, 5997, -1000, 690, 19013, 19013,
	9243, -1000, 1431, 593, 593, 490, -1000, -1000, -1000, -1000,
	-1000, 5621, 9243, -1000, 1224, 1027, 455, -1000, 11271, 11271,
	92, -1000, -1000, -1000, 91, 90, 71, -1000, -230, -1000,
	1098, 9243, -236, -1000, 593, -1000, -1000, -1000, 3134, 922,
	10263, -1000, 908, 255, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3134, 11271, 11271, 11271,
	11271, 11271, 5245, -111, 1225, 666, -1000, 10263, 920, -1000,
	-1000, -1000, -1000, -1000, -1000, 1377, 19872, 1288, -1000, 16699,
	21309, 1543, 19872, 10263, 10263, -1000, -1000, 10263, 1346, -1000,
	10263, -1000, -1000, -1000, -1000, 1339, 1288, 1288, 1288, 1086,
	-1000, 1543, 1219, -1000, -1000, -1000, -53, -54, -1000, 10263,
	-1000, 4869, -1000, 164, -1000, 19298, -1000, 1570, 1526, 311,
	8, -1000, 986, 968, -1000, 955, -1000, -1000, 13, -1000,
	-201, 107, 0, -1000, -1000, 1288, -1000, 1336, 1493, -1000,
	1467, 885, -1000, 11943, -228, -1000, -1000, -1000, -230, -1000,
	-1000, -1000, 1288, -1000, 1332, 1331, -1000, 1318, 1288, 489,
	-1000, -1000, -1000, -1000, -1000, 1158, 518, 518, 50, 518,
	1156, 1155, 518, 518, -1000, 590, -1000, -1000, -1000, -1000,
	1096, -1000, 1094, -1000, -1000, 1260, -1000, 1092, 1259, 1376,
	15814, 19013, 1322, 1235, 1489, 1235, 1253, -1000, 643, 1524,
	203, 19013, 1560, 1560, 21309, -1000, 303, 21309, -1000, -1000,
	21309, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	21309, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 19013, -1000, -1000, -1000, -1000, -1000, 21309, 322,
	-1000, -1000, 939, 10263, -1000, -1000, 1227, -1000, 7877, -1000,
	-1000, 973, -1000, 11271, 1027, 1027, 7, -1, -2, -1000,
	931, -1000, -1000, -1000, -1000, 1288, 973, 1319, 1319, -1000,
	1319, 1321, -1000, 1319, 119, 1319, 118, -1000, -1000, -1000,
	-1000, 1321, -1000, -1000, -1000, -1000, -1000, 1319, 1319, -1000,
	-1000, 1319, -1000, 1319, 1319, 973, 847, -1000, -1000, 973,
	400, 761, 435, 289, 304, -1000, 1288, -102, -1000, 593,
	10263, -1000, 1470, 1151, 1237, -1000, -1000, 8907, 973, 1090,
	481, 1086, 1531, -1000, 593, 593, 593, 19583, 593, -233,
	19583, 19583, 19583, 16401, 21309, 1531, -1000, -1000, -1000, -1000,
	593, 4117, -1000, 7877, 1062, -1000, 262, 1319, 351, 351,
	-207, 296, 295, 1288, -1000, -1000, -1000, -1000, -202, -1000,
	-1000, -1000, -1000, 677, -1000, 1318, 10263, 19583, 120, -1000,
	1248, 1146, 12615, -1000, 14938, -1000, 973, -1000, 883, -1000,
	858, 1145, 7877, -1000, -1000, -1000, 518, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 50, 919, 50, 882, -1000, 879,
	15814, 21309, 19013, 1142, 1246, -1000, 250, 1317, 19583, -1000,
	1235, -1000, 7877, 4117, 352, 1529, -1000, -1000, 1521, -1000,
	1179, 1314, 21309, -1000, -1000, 256, -1000, 1311, -1000, -1000,
	-1000, -1000, 1483, 21309, -1000, -1000, 593, 1552, 16112, -1000,
	1027, -1000, -1000, -1000, -1000, 422, -1000, -1000, -1000, -1000,
	-1000, 11271, 11271, -1000, 11271, 11271, 11271, 973, 820, 593,
	294, -1000, 1288, -1000, -1000, 1193, 21309, 21309, -1000, -1000,
	1060, -1000, -1000, 1054, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1050, 1050, 1050, 438, -1000, -1000, -1000, -1000, -1000,
	-1000, 122, 19298, 1480, -1000, -1000, -1000, 732, -1000, -1000,
	723, 199, 704, -1000, 21309, -202, 10263, -1000, 1288, 847,
	1046, 10263, 1310, 869, -1000, 1135, -1000, 76, -152, -1000,
	-1000, -1000, -1000, -1000, -1000, 1288, -1000, 518, -1000, 518,
	1118, 1113, 1087, 1309, 1305, -218, 15814, 1044, -1000, -1000,
	-1000, 21309, -1000, -1000, -1000, -1000, -1000, 183, 2732, -1000,
	14364, 1304, 1301, 19583, 1288, 300, 1549, 1243, -1000, 1009,
	973, 1539, 400, 400, 400, 400, 253, -1000, -1000, 1577,
	-1000, 1288, -1000, 1235, 465, -1000, 21309, -1000, -1000, -233,
	-1000, -1000, -1000, -117, 1337, 1679, 134, -1000, 949, 619,
	786, 618, 610, 609, 607, 579, 575, 574, -1000, -1000,
	-1000, 1574, -1000, -1000, -1000, 1572, 1294, -1000, 1292, 847,
	10263, 204, 1375, 861, -1000, 1063, 1055, -1000, -1000, -1000,
	-1000, -218, 15814, 19298, 1552, 1291, 1051, 1552, 1111, -1000,
	180, 2732, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1543, 21309, 2898, 21309, 21309, 21309, 451, 10935,
	10263, -1000, 1047, 13208, 14364, 14364, 13208, 14364, 14364, 19298,
	19298, 1039, 229, 292, 1545, 1538, -1000, 973, -1000, 10263,
	-1000, -1000, -1000, -1000, 973, 184, -164, 19872, 1237, 973,
	21309, -1000, -1000, -1000, -1000, 21309, -1000, -161, 1679, 21309,
	-1000, 855, -1000, -1000, 751, 845, 751, 751, 751, 751,
	751, 351, 351, 21309, 19298, 204, 847, -1000, -105, 1565,
	-171, 105, -1000, -1000, 1552, 998, 1037, 122, 19583, -218,
	122, -119, 21309, 10263, 2604, -1000, 1531, 1232, 13493, -1000,
	853, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 21309, 1562, 1561, 1555,
	1554, 2464, 115, 740, 133, -1000, -1000, 13208, -1000, -1000,
	-1000, -1000, -1000, 1032, 1030, 1226, 1023, -1000, 21309, 1290,
	-1000, 10263, 10263, -1000, 1228, -1000, 593, -1000, 1425, -114,
	-167, 1221, -1000, -1000, 1288, 1001, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 677, 677,
	997, 994, -1000, 204, -1000, 351, 351, -1000, -1000, -1000,
	131, 910, 839, 812, 797, 10, -1000, 1533, 122, 1552,
	122, 1337, 992, 1552, 1337, -1000, -234, -1000, 593, -1000,
	-1000, 2732, 1472, 21309, 161, -1000, -1000, -1000, 2898, 1476,
	-1000, -1000, -1000, -1000, -1000, 2732, 2732, 2732, -1000, 265,
	-120, -1000, 229, 1440, 19298, 593, 1160, 10263, -1000, 1421,
	-1000, 21309, -1000, 1679, -1000, -1000, 317, 122, -1000, -1000,
	-1000, 785, -1000, 777, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15525, 1337, 122, -1000, -1000, -1000, 122, -1000, 10263,
	-248, -1000, -1000, 14067, 1517, -1000, 21309, 2613, -1000, 117,
	2357, 137, -1000, 146, -1000, -1000, 219, 972, -1000, -148,
	973, -1000, 19013, 1337, -1000, -1000, -1000, 459, -1000, -1000,
	1337, 593, 647, 1235, -1000, -1000, -1000, 599, 668, -1000,
	140, -1000, 212, -1000, -165, -1000, 1289, -1000, 7877, -1000,
	-1000, -1000, 327, 132, -1000, -1000, 1288, -182, 21309, -1000,
	-1000, 2732, 10599, -1000, 953, 2166, 400, 973, -1000, -1000,
	-1000, -1000,
}

var yyPgo = [...]int16{
	0, 1879, 40, 47, 1877, 1876, 1875, 1606, 1604, 1600,
	1594, 1872, 1871, 1869, 1867, 1866, 1863, 1855, 1851, 1841,
	1840, 1837, 1836, 1835, 1834, 1829, 1827, 1826, 1825, 1824,
	1443, 1823, 1821, 1820, 109, 1819, 1817, 1816, 1814, 79,
	78, 82, 73, 1234, 1809, 44, 111, 108, 1805, 83,
	1804, 1802, 198, 1801, 107, 1799, 1798, 96, 1790, 1789,
	43, 27, 21, 52, 1788, 1787, 116, 179, 1786, 1785,
	20, 1781, 1779, 91, 18, 29, 68, 42, 1778, 147,
	30, 1777, 90, 1776, 1775, 1773, 1772, 50, 1768, 93,
	39, 48, 13, 1766, 99, 15, 102, 67, 56, 16,
	192, 100, 1764, 66, 106, 81, 1763, 1006, 1762, 1760,
	1759, 1757, 1754, 1753, 699, 101, 1752, 1751, 1750, 72,
	0, 722, 24, 120, 1747, 1744, 1743, 2337, 121, 104,
	53, 1741, 69, 420, 74, 1738, 1737, 70, 119, 7,
	117, 110, 1736, 118, 1735, 1733, 1731, 1966, 98, 60,
	89, 94, 1726, 1715, 1705, 80, 85, 65, 95, 97,
	28, 1702, 1701, 1700, 55, 1699, 19, 33, 1, 76,
	1696, 1695, 1692, 1690, 45, 64, 1689, 32, 1684, 35,
	22, 14, 8, 3, 1683, 1682, 1681, 6, 1679, 49,
	1678, 9, 1677, 12, 1676, 1673, 1671, 63, 1669, 1664,
	1663, 26, 1662, 1661, 38, 17, 71, 51, 1658, 1657,
	46, 77, 57, 1654, 59, 5, 2, 36, 1653, 11,
	1652, 1651, 1650, 23, 25, 1649, 1648, 1647, 1645, 1640,
	1639, 54, 1638, 1637, 1636, 1634, 1629, 4, 1628, 1626,
	10, 1624, 1621, 1620, 1389, 1053, 1618, 1610, 31, 1609,
	1608, 1602, 1571, 655,
}

var yyR1 = [...]uint8{
	0, 242, 243, 243, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 6, 3, 4, 4, 5, 5,
	7, 7, 33, 33, 8, 9, 9, 9, 246, 246,
	52, 52, 96, 96, 10, 10, 10, 10, 11, 11,
	220, 220, 219, 221, 221, 12, 12, 12, 12, 12,
	213, 213, 213, 213, 213, 13, 13, 216, 216, 14,
	14, 14, 101, 101, 105, 105, 105, 106, 106, 106,
	106, 233, 233, 232, 232, 135, 135, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 247, 247, 248, 248, 248,
	248, 248, 248, 248, 211, 211, 211, 211, 212, 212,
	212, 214, 214, 215, 215, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 218, 218, 195, 195, 195,
	196, 196, 196, 196, 196, 196, 198, 198, 199, 199,
	125, 125, 193, 193, 192, 191, 191, 190, 190, 189,
	200, 200, 22, 171, 172, 172, 172, 172, 172, 172,
	172, 159, 159, 139, 139, 139, 139, 139, 139, 139,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 206, 206, 206, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	208, 209, 202, 202, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 149, 149,
	149, 149, 149, 149, 201, 201, 197, 197, 197, 197,
	197, 197, 197, 197, 143, 143, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 142, 142, 142, 142,
	142, 142, 142, 142, 144, 144, 144, 144, 144, 144,
	144, 144, 140, 140, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 146, 146, 146,
	146, 146, 146, 146, 146, 158, 158, 147, 147, 156,
	156, 157, 157, 157, 148, 148, 148, 155, 155, 155,
	152, 152, 153, 153, 154, 154, 154, 150, 150, 150,
	151, 151, 151, 161, 182, 182, 182, 184, 184, 185,
	185, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 170, 170, 210, 210, 181, 181, 181, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 169, 169,
	179, 179, 180, 180, 177, 177, 177, 178, 164, 164,
	164, 164, 164, 165, 166, 166, 166, 166, 162, 163,
	204, 204, 204, 238, 238, 238, 238, 238, 238, 239,
	239, 205, 205, 167, 167, 168, 168, 175, 175, 175,
	175, 249, 249, 173, 173, 174, 174, 174, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 250, 250, 251, 251, 251, 251, 251,
	251, 251, 188, 186, 186, 187, 187, 17, 18, 18,
	18, 18, 18, 19, 19, 23, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 112,
	112, 109, 109, 110, 110, 111, 111, 111, 113, 113,
	113, 136, 136, 136, 25, 25, 27, 27, 28, 29,
	26, 26, 26, 26, 26, 252, 30, 31, 31, 32,
	32, 32, 36, 36, 36, 34, 34, 35, 35, 41,
	41, 40, 40, 42, 42, 42, 42, 124, 124, 124,
	123, 123, 234, 234, 234, 234, 234, 44, 44, 45,
	45, 46, 46, 47, 47, 47, 223, 223, 222, 222,
	224, 224, 224, 224, 224, 224, 59, 59, 94, 94,
	94, 97, 97, 48, 48, 48, 48, 49, 49, 50,
	50, 51, 51, 131, 131, 130, 130, 130, 129, 129,
	53, 53, 53, 55, 54, 54, 54, 54, 56, 56,
	58, 58, 57, 57, 60, 60, 60, 60, 61, 61,
	95, 95, 43, 43, 43, 43, 43, 43, 43, 108,
	108, 63, 63, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 72, 72, 72, 72, 72, 72, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	39, 39, 73, 73, 73, 79, 74, 74, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 70, 70, 70, 70, 70,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 253, 253, 71, 71,
	71, 71, 37, 37, 37, 37, 37, 134, 134, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 138, 138, 138, 138, 138, 138, 138, 138,
	83, 83, 38, 38, 81, 81, 82, 84, 84, 80,
	80, 80, 225, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 85, 85, 86, 86, 235, 235,
	236, 236, 237, 87, 87, 88, 88, 89, 90, 90,
	90, 91, 91, 91, 91, 92, 92, 92, 65, 65,
	65, 65, 65, 65, 93, 93, 93, 93, 98, 98,
	75, 75, 77, 77, 76, 78, 99, 99, 103, 100,
	100, 104, 104, 104, 104, 104, 20, 21, 102, 102,
	102, 126, 126, 126, 114, 114, 115, 115, 107, 107,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	117, 117, 117, 118, 118, 121, 121, 122, 122, 127,
	127, 127, 128, 128, 226, 226, 226, 227, 227, 227,
	228, 228, 229, 230, 230, 231, 241, 241, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 244, 245, 132, 133,
	133, 133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 5, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 8, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 2, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 7,
	5, 9, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 0, 3, 1, 1, 1, 1, 2, 13, 12,
	14, 12, 13, 12, 7, 8, 7, 5, 5, 5,
	11, 11, 9, 5, 8, 0, 3, 0, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 1, 1,
	1, 1, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 1, 4, 0, 2, 2,
	0, 2, 2, 2, 2, 2, 0, 2, 0, 3,
	0, 1, 0, 2, 1, 0, 2, 1, 3, 3,
	0, 2, 4, 4, 0, 1, 3, 3, 3, 3,
	3, 2, 2, 3, 1, 1, 1, 1, 1, 0,
	2, 2, 3, 2, 4, 2, 4, 2, 2, 3,
	2, 3, 2, 7, 9, 3, 3, 6, 9, 9,
	8, 8, 5, 8, 7, 4, 2, 4, 6, 2,
	1, 1, 1, 2, 1, 1, 1, 3, 3, 1,
	2, 1, 1, 2, 0, 4, 3, 4, 3, 3,
	3, 3, 3, 3, 3, 2, 4, 6, 2, 3,
	2, 3, 1, 3, 0, 2, 0, 3, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 2,
	2, 2, 1, 1, 1, 3, 3, 2, 2, 2,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 1,
	5, 2, 2, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 3, 3, 0, 3, 3,
	0, 1, 0, 1, 0, 2, 1, 0, 3, 3,
	0, 1, 2, 6, 0, 1, 4, 1, 2, 1,
	3, 2, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 1, 1, 0, 2, 5, 2,
	3, 3, 2, 3, 2, 2, 3, 4, 1, 1,
	1, 1, 1, 3, 3, 2, 2, 1, 2, 5,
	5, 8, 8, 13, 1, 1, 2, 2, 10, 7,
	0, 1, 1, 0, 1, 1, 1, 2, 2, 1,
	2, 0, 3, 0, 1, 1, 3, 0, 4, 1,
	3, 2, 1, 1, 2, 1, 1, 1, 6, 11,
	13, 13, 6, 7, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 3,
	6, 4, 2, 4, 2, 2, 2, 2, 3, 1,
	1, 0, 1, 0, 1, 0, 2, 2, 0, 2,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 3, 4, 4, 5, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 0, 4, 1, 3,
	1, 1, 1, 1, 1, 1, 4, 8, 1, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	0, 4, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	6, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 2, 4, 5, 5, 6, 4,
	4, 4, 6, 6, 6, 6, 6, 8, 8, 6,
	8, 8, 9, 7, 5, 4, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 1, 2, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 2, 2, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 3, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 3, 0, 2, 0, 3,
	1, 3, 1, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 5, 3, 1, 3, 1, 2,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 2, 0, 2, 2,
	0, 1, 4, 1, 3, 2, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -242, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -23, -24, -25, -27, -28, -29,
	-26, -3, -4, 7, -33, 9, 10, 31, -22, 122,
	123, 125, 124, 155, 126, 148, 52, 206, 207, 209,
	210, 26, 149, 150, 153, 154, 6, -244, 8, 334,
	56, -243, 382, -87, 15, -32, 5, -30, -252, -30,
	-30, -30, -30, -171, 56, -238, -239, -200, 131, 164,
	326, 128, 144, 162, 163, 354, 129, 366, 367, 146,
	369, 76, -107, 132, 134, 129, 129, 130, 132, 326,
	128, 129, -57, -127, 59, -120, 61, 171, 345, 21,
	206, 219, 220, 211, 252, 240, 346, 169, 237, 241,
	291, 380, 69, 209, 300, 138, 175, 151, 232, 235,
	234, 226, 223, 28, 258, 352, 225, 141, 259, 263,
	270, 292, 341, 216, 217, 294, 256, 33, 143, 347,
	37, 159, 295, 261, 255, 250, 131, 254, 215, 249,
	41, 229, 265, 264, 266, 290, 243, 170, 269, 245,
	227, 244, 18, 154, 157, 260, 262, 224, 172, 136,
	161, 351, 296, 222, 158, 173, 153, 299, 368, 168,
	210, 293, 218, 302, 205, 204, 40, 276, 236, 213,
	228, 214, 140, 207, 166, 247, 160, 230, 231, 253,
	212, 248, 208, 162, 155, 301, 277, 353, 246, 242,
	238, 239, 167, 132, 164, 165, 283, 284, 285, 286,
	349, 297, 233, 278, 279, 177, 178, 179, 180, 181,
	182, 183, 34, 35, 342, 343, 129, 116, 241, 122,
	281, 130, 33, 161, -136, 129, -109, 165, 283, 284,
	285, 286, 59, 293, 292, 287, -127, 208, -132, -132,
	-132, -132, -132, -30, -2, -91, 17, 16, -5, -3,
	-244, 21, 22, -42, 107, -43, -127, -62, 78, -67,
	29, 59, -120, 61, 24, -66, -63, -80, -225, -78,
	-79, 116, 117, 105, 106, 113, 79, 118, -70, -68,
	-69, -71, -228, 62, -121, 60, 70, 63, 64, 65,
	66, 71, 72, 73, 303, -76, -244, 46, 47, 335,
	336, 337, 338, 344, 339, 81, 36, 38, 325, 333,
	332, 331, 329, 330, 327, 328, 379, 135, 326, 111,
	334, 267, -31, -107, -45, -46, -47, -48, -59, -79,
	-244, -57, 11, -52, -57, -100, -135, 208, -104, 293,
	292, -122, 303, -102, -121, -119, 291, 241, 290, 59,
	-120, 127, 185, 357, 77, 23, 25, 274, 280, 184,
	80, 116, 16, 81, 191, 366, 367, 115, 335, 122,
	50, 327, 328, 325, 189, 337, 338, 326, 281, 196,
	20, 29, 377, 10, 26, 149, 22, 109, 124, 186,
	84, 85, 152, 24, 150, 73, 192, 194, 19, 53,
	142, 11, 356, 13, 14, 371, 358, 135, 134, 96,
	370, 130, 48, 8, 118, 27, 378, 93, 44, 147,
	195, 46, 94, 17, 329, 330, 32, 344, 156, 111,
	51, 38, 372, 78, 373, 71, 54, 298, 190, 76,
	15, 49, 157, 374, 144, 193, 95, 125, 334, 47,
	187, 375, 128, 188, 6, 340, 31, 148, 45, 129,
	282, 83, 133, 72, 163, 5, 146, 9, 52, 55,
	331, 332, 333, 36, 82, 12, 145, 348, 74, -172,
	-159, -121, 61, 130, 130, 132, -233, 204, 132, -121,
	-115, 135, -115, -121, -121, -57, 129, -115, 369, 366,
	367, 334, 129, -57, -57, -114, 135, 59, -114, -114,
	-114, -57, 119, -57, 59, 31, 326, 59, 161, 129,
	162, 132, -133, -244, -122, -133, -133, -133, 166, 167,
	-133, -110, 288, 54, -133, -36, 42, 43, -245, 58,
	-92, 19, 32, -43, -127, -88, -89, -43, -87, -2,
	11, -124, 77, 76, 93, -123, 23, -121, 61, 119,
	-43, -64, 96, 78, 94, 95, 80, 102, 101, 112,
	105, 106, 107, 108, 109, 110, 111, 103, 104, 115,
	379, 86, 87, 88, 89, 90, 91, 92, 97, 98,
	99, 100, -108, -244, -197, 379, -79, -244, 120, 121,
	-67, -67, -67, -67, -67, -67, -67, -229, 268, -244,
	61, 119, -2, -74, -43, -244, -244, -244, -244, -244,
	-244, -244, -244, -244, -83, -43, -244, 39, -253, -244,
	-253, -253, -253, -253, -253, -253, -253, -138, 116, 241,
	151, 232, -141, -140, 247, 246, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 240, 346, -244, -244,
	-244, -244, 68, -58, 27, -57, 31, 57, -53, -55,
	-54, -56, 44, 48, 50, 45, 46, 47, 51, -131,
	23, -45, -244, -130, 157, -129, 23, -127, 61, -57,
	-52, -246, 57, 11, 55, 57, -100, 208, -101, -105,
	294, 296, 86, 119, -126, -121, 61, 29, 31, 58,
	57, -160, -139, -143, -140, -145, -144, -146, -121, -141,
	-142, 240, 346, 237, 241, 238, 243, 244, 245, 116,
	242, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 246, 258, 31, 151, 230, 231, 232, 235,
	234, 236, 233, 259, 260, 261, 262, 263, 264, 265,
	266, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 222, 223, 225, 226, 227, 229, 228, -160, -121,
	54, 203, -121, -115, 132, 205, -115, -193, 55, 59,
	78, 59, 54, -211, 54, 19, 184, 185, 197, 23,
	-115, -57, -57, 298, -133, 133, -57, 24, 54, -57,
	59, 59, -128, -127, -119, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -112, 282, 289, -57, -34,
	22, 9, 96, 57, 18, 119, 57, -90, 25, 26,
	-91, -245, -57, -43, -43, -72, 71, 78, 72, 73,
	-123, 107, -128, -122, -119, -67, -73, -76, -79, 67,
	96, 94, 95, 80, -67, -67, -67, -67, -67, -67,
	-67, -67, -67, -67, -67, -67, -67, -67, -67, -134,
	59, 61, -143, 231, -138, -141, 222, 223, 225, 226,
	227, 229, 228, 59, 241, 231, 271, 118, 247, 256,
	257, -66, 61, -121, -66, -121, 383, -41, 22, -40,
	-74, -42, -43, -122, -245, 57, -245, -2, -40, -40,
	-43, -137, 116, 237, 151, 232, 226, 256, 257, 243,
	276, 230, 277, 219, 211, 216, 229, 227, 213, 228,
	212, 225, 222, 235, 234, 236, 247, 238, 245, 244,
	242, -43, -80, -67, -80, -121, -127, -40, -34, -81,
	-82, 82, -80, 19, -245, 239, -40, -41, -40, -40,
	-40, -96, 157, -57, -99, -103, -80, -46, -47, -47,
	-46, -47, 44, 44, 44, 49, 44, 49, 44, -54,
	-127, -245, -60, 52, 134, 53, -244, -129, -96, 55,
	-45, -57, -104, -101, 57, 295, 297, 298, 54, 74,
	-43, -122, -151, 116, 115, -175, -249, 349, 35, -159,
	-161, -164, -162, -163, -176, -165, 138, 136, 140, 141,
	146, -169, 130, 147, 71, 78, -206, 138, -208, 54,
	274, 280, 136, 147, 146, 380, 69, 139, 356, 358,
	29, 30, -154, 383, 268, -152, 277, -147, 56, -147,
	-147, 239, -148, 56, -147, -148, -147, -148, -150, 241,
	-150, -150, -150, -150, 56, 56, -147, -147, -147, -147,
	-147, -156, 56, 224, -156, -156, -157, 56, -157, 54,
	55, -57, -121, 54, -57, -115, -232, 377, 378, -57,
	-191, 348, -192, 59, -133, 24, -133, -57, -214, -212,
	8, 9, 10, -57, 198, -139, -57, -116, 127, 124,
	125, -188, 123, 274, 241, 69, 29, 15, 335, 157,
	353, 59, 158, -57, -57, -57, -133, -111, 11, 96,
	-35, 45, 40, -43, -43, -128, -89, -92, 71, 72,
	73, 119, -244, -73, -67, -67, -67, -39, 152, 77,
	348, -245, 239, -155, 348, 349, -230, -231, 61, -245,
	-40, 57, -245, -245, -43, -245, -245, -245, 57, 55,
	57, -147, 56, -147, -147, -157, -147, 217, -147, 217,
	-157, -147, -147, -147, -147, -147, 23, 57, 11, 57,
	57, 11, 119, -245, -40, -84, -82, 84, -43, -245,
	-127, -245, -245, -245, -245, -65, 31, 36, -2, -244,
	-244, -61, 57, 12, 86, -50, -49, 54, 55, -51,
	54, -49, 44, 44, -223, 348, 130, 130, 130, -97,
	-121, -61, -45, -61, -105, -106, 299, 296, 302, 86,
	59, -173, -122, 57, 34, 56, -205, 54, 78, -167,
	-121, 147, -169, -169, 59, -169, 59, 130, 59, 71,
	19, -121, 9, 147, 147, -205, 61, -57, -202, 357,
	16, 56, -207, 56, 61, 62, 63, 64, 71, -149,
	70, -63, 269, -70, 325, 328, 327, 270, -121, -127,
	-209, 63, 384, -153, 278, 63, -150, -150, -147, -150,
	63, 59, -150, -150, -151, 31, -151, -151, -151, -151,
	-158, 61, -158, -155, -155, 63, -156, 63, -57, -121,
	56, 54, -57, 23, -57, 23, -190, -189, -122, -195,
	23, 54, 57, -211, 55, -132, -125, 138, -164, -251,
	164, 146, 137, 142, 141, 59, 136, 140, 157, -194,
	164, 137, 138, 142, 141, 59, 130, 147, 136, 140,
	157, 146, -117, -118, 133, 23, 130, 147, 157, 127,
	-133, -113, 94, 12, -127, -127, -40, 41, 119, 107,
	-122, -41, -39, 77, -67, -67, 230, 230, 230, 384,
	57, -197, -245, -42, -234, 381, -137, 116, 237, 151,
	232, 226, 256, 243, 276, 230, 277, 219, 211, 216,
	229, 227, 213, 228, 212, 225, 222, 235, 234, 236,
	247, 238, 245, 244, 242, -134, -43, -150, 59, -137,
	-67, -67, -67, -67, -67, -122, 345, -87, 85, -43,
	83, -98, 54, -99, -75, -77, -76, -244, -2, -93,
	-121, -97, -87, -103, -43, -43, -43, 56, -43, 56,
	-244, -244, -244, -245, 57, -87, -61, 296, 300, 301,
	-43, 86, -122, -175, -180, -177, -121, 147, 10, 9,
	19, 142, 136, 380, 59, 59, 59, -204, 146, 366,
	367, 368, -206, 380, -149, 270, -244, 56, 23, 29,
	63, -207, 56, -197, 379, -197, -244, -147, 56, -147,
	56, 56, 119, 58, -151, -151, -150, -151, 58, 58,
	-151, -151, 59, 116, 58, 57, 58, 57, 58, 57,
	56, 55, 54, -179, -180, -70, -121, -57, 56, -2,
	23, -2, 57, 86, -196, 19, 172, 173, -57, -212,
	-214, -121, -250, 130, 147, -121, -132, -121, -132, -121,
	-57, -132, -121, 138, -164, 61, -43, -44, 11, -245,
	-67, 279, 279, 279, -231, -244, -245, -245, -245, -245,
	-245, 19, 57, -245, 57, 19, -244, -38, 340, -43,
	28, -98, 57, -245, -245, -245, 57, 119, -245, -91,
	-94, -121, 147, -222, -224, 371, 372, 373, 374, 375,
	376, -94, -94, -94, -130, -121, -91, -174, -122, 61,
	63, 58, 57, -147, -178, 272, -147, -166, 168, 169,
	31, 170, -166, 368, 147, 147, -244, -204, -205, -43,
	-94, 56, 358, 57, 58, -207, -121, 241, 231, 247,
	256, -245, 58, 58, 58, -122, -151, -150, 61, -150,
	63, 63, -179, -121, -57, 58, 56, -94, -2, -189,
	-174, 133, 21, 6, 8, 9, 10, 19, 23, -247,
	56, -121, 146, 56, 27, -121, -61, -45, -245, -235,
	-87, 157, -67, -67, -67, -67, -67, -245, 61, 147,
	-77, 36, -2, -244, -121, -121, 57, 58, 58, 57,
	-245, -245, -245, -60, -182, -184, 348, -183, 55, 143,
	69, 177, 178, 179, 180, 181, 182, 183, -177, -90,
	-205, 54, 71, 171, -205, 54, -167, -121, -204, -43,
	-244, -245, 58, -43, 56, 63, 58, -151, -151, 58,
	58, 58, 56, 56, -95, 370, -179, 58, -168, -121,
	186, -215, -217, -7, -9, -8, -11, -10, -12, -13,
	-14, -20, -3, 20, 31, 190, 191, 196, 192, 145,
	135, -21, -248, -121, 105, 86, 61, -159, 57, 56,
	56, -94, -244, 136, -85, 13, -245, -87, -245, 16,
	-245, -245, -245, -245, -37, 96, 348, 9, -75, -2,
	119, -121, -224, -223, -181, 54, -183, 348, 56, 350,
	59, -170, 86, 61, 86, 86, 86, 86, 86, 86,
	86, 9, 10, 56, 56, -245, -43, -201, 170, 54,
	58, -203, 58, 58, -95, -179, -180, -61, 56, 58,
	-61, -198, 57, 55, 187, -217, -87, -220, -121, -219,
	-241, -240, 304, 305, 306, 307, 308, 309, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 323, 324, -121, -121, -121, -213, 38, 193, 194,
	195, -62, -67, -43, -62, 58, -248, -121, -248, -248,
	-248, -248, -248, -180, -180, 58, -186, -187, 157, 147,
	-86, 14, 16, -245, -236, -237, -43, -245, 346, 51,
	351, -99, -245, -121, -121, -185, -183, -121, 63, -210,
	54, 74, 63, -210, -210, -210, -210, -210, -166, -166,
	-168, -180, -201, -245, 341, 10, 9, 354, 355, 58,
	207, 360, 361, 156, 362, 170, 363, 364, -61, 58,
	58, -182, -94, -95, -182, -199, 348, -121, -43, -218,
	-217, 206, -91, 57, -221, -139, 188, -210, 57, -121,
	11, 11, 11, 11, -217, 206, 83, 206, 58, 58,
	-193, -245, 57, -121, 56, -43, -74, 57, 41, 347,
	352, -244, 58, 57, -205, -205, 58, 58, -201, -166,
	-166, 348, 63, 16, 63, 63, 63, 63, 361, 156,
	363, 16, -182, -61, -182, -181, 58, -61, -181, 380,
	-217, -92, -219, -121, 189, -240, 27, -216, -217, -215,
	-216, -226, 199, 78, -191, -187, 36, -180, -237, 41,
	-121, -183, 139, -182, 63, 63, 365, -127, -181, -182,
	-182, -43, 382, 19, -121, 85, -217, 382, 85, -227,
	200, 199, 159, 58, 348, -245, -57, -181, 119, -181,
	85, -2, 85, 84, 202, 201, 160, 351, 56, -122,
	135, 206, -244, 352, -168, -216, -67, 156, 58, 85,
	-245, -245,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 823, 0, 525, 525, 525, 525, 525, 0, -2,
	878, 0, 0, 0, 0, -2, 515, 516, 0, 518,
	519, 1208, 1208, 1208, 1208, 1208, 525, 0, 32, 33,
	1206, 1, 3, 831, 0, 0, 529, 910, 527, 878,
	0, 0, 0, 87, 164, 0, 0, 0, 0, 0,
	876, 876, 0, 0, 0, 0, 876, 404, 405, 406,
	409, 0, 0, 0, 879, 0, 874, 0, 874, 874,
	874, 0, 474, 612, 899, 900, 901, 1067, 1068, 1069,
	1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
	1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
	1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
	1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
	1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
	1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
	1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
	1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
	1200, 1201, 1202, 1203, 1204, 1205, 0, 0, 0, 0,
	1209, 1209, 1209, 1209, 0, 1209, 503, 492, 494, 495,
	496, 497, 1209, 512, 513, 502, 514, 517, 520, 521,
	522, 523, 524, 532, 26, 835, 910, 910, 823, 28,
	0, 530, 531, 0, 543, 547, 0, 622, 910, 627,
	629, -2, -2, -2, 0, 668, 669, 670, 671, 672,
	673, 910, 910, 910, 910, 910, 910, 910, 700, 701,
	702, 703, 0, 805, 799, 807, 808, 809, 810, 811,
	812, 813, 631, 632, 0, 855, 910, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, 736, 736,
	736, 736, 736, 736, 736, 736, 0, 0, 0, 0,
	0, 911, 526, 0, 0, 559, 561, 562, 563, 593,
	0, 595, 0, 0, 40, 44, 0, 1172, 859, -2,
	-2, 0, 0, 0, 897, 898, -2, 1079, -2, 895,
	896, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 0,
	165, 179, 179, 0, 0, 876, 0, 0, 876, 152,
	0, 0, 0, 0, 0, 0, 876, 0, 410, 407,
	408, 161, 0, 1209, 0, 0, 0, 0, 0, 0,
	0, 473, 0, 475, 1209, 1209, 1209, 1209, 1209, 1209,
	1209, 1209, 484, 1210, 1211, 485, 486, 487, 1209, 1209,
	489, 0, 504, 0, 498, 535, 533, 534, 27, 1207,
	22, 0, 0, 832, 0, 824, 825, 828, 831, 26,
	0, 544, 910, 910, 0, 548, 0, 550, 551, 0,
	625, 910, 0, 0, 910, 910, 910, 910, 910, 910,
	910, 910, 910, 910, 910, 910, 910, 910, 910, 0,
	0, 649, 650, 651, 652, 653, 654, 655, 656, 657,
	658, 659, 628, 0, 804, 0, 642, 0, 0, 0,
	691, 692, 693, 694, 695, 696, 697, 704, 0, -2,
	806, 0, 26, 0, 666, 910, 910, 910, 910, 910,
	910, 0, 910, 535, 0, 791, 0, 0, 727, 0,
	728, 729, 730, 731, 732, 733, 734, 735, 782, 0,
	784, 785, 786, 787, 788, 789, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 282, 283, 910, -2,
	910, 910, 528, 42, 0, 611, 0, 0, 0, 0,
	0, 0, 600, 0, 0, 603, 0, 0, 0, 0,
	594, 0, 0, 614, 1134, 596, 0, 598, 599, -2,
	0, 0, 0, 38, 39, 0, 45, 1172, 47, 72,
	0, 0, 910, 0, 340, 871, 872, 873, 869, 417,
	0, 171, 334, 330, 174, 175, 176, 177, 178, 317,
	255, -2, -2, -2, -2, -2, -2, -2, -2, 317,
	-2, -2, -2, -2, -2, 337, -2, -2, -2, -2,
	-2, 303, -2, 1094, 0, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 172, 0,
	0, 0, 0, 0, 876, 0, 0, 155, 0, 1209,
	0, 1209, 0, 0, 0, 114, 115, 116, 0, 179,
	0, 162, 0, 0, 440, 0, 468, 875, 0, 1209,
	471, 472, 613, 902, 903, 476, 477, 478, 479, 480,
	481, 482, 483, 488, 491, 505, 499, 500, 493, 537,
	536, 836, 0, 910, 910, 0, 910, 827, 829, 830,
	835, 29, 24, 623, 624, 626, 643, 0, 645, 647,
	549, 545, 0, 800, -2, 633, 634, 662, 663, 664,
	0, 910, 910, 910, 660, 638, 0, 674, 675, 676,
	677, 678, 679, 680, 681, 682, 683, 684, 685, 688,
	747, 748, 689, 0, 699, 317, 319, 319, 319, 321,
	321, 272, 273, 0, 0, 327, 249, 250, 251, 252,
	253, 686, 246, 0, 687, 698, 0, 0, 910, 0,
	0, 541, 547, 802, 665, 910, 854, 26, 0, 0,
	0, 0, -2, -2, -2, -2, -2, -2, 756, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 0, 670, 0, 0, 799, 0, 0, 910, 797,
	794, 910, 0, 0, 737, 783, 0, 0, 540, 0,
	0, 0, 0, 610, 618, 856, 0, 560, 589, 591,
	0, 586, 601, 602, 604, 0, 606, 0, 608, 609,
	564, 565, 566, 0, 0, 0, 0, 597, 618, 0,
	618, 41, 860, 46, 0, 0, 75, 76, 861, 862,
	863, 0, 865, 341, 0, 163, 419, 0, 422, 166,
	167, 168, 169, 170, 0, 411, -2, 1139, 1162, 1097,
	0, 0, 378, 379, 181, 0, 183, 0, 185, 0,
	187, 188, 0, 190, 192, 411, 0, 0, 0, 0,
	0, 0, 180, 0, 336, 332, 331, 254, 0, 337,
	337, 317, 337, 0, 337, 337, 291, 292, 340, 0,
	340, 340, 340, 340, 0, 0, 327, 327, 277, 278,
	279, 266, 0, 319, 268, 269, 270, 0, 271, 0,
	0, 0, 0, 0, 0, 0, 82, 83, 84, 0,
	97, 0, 153, 154, 98, 877, 99, 137, 0, 121,
	118, 119, 120, 0, 117, 103, 0, 1208, 150, 0,
	890, 441, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 0, 0, 467, 1209, 470, 508, 0, 0,
	910, 538, 0, 833, 834, 0, 826, 23, 644, 646,
	648, 0, -2, 635, 660, 639, 0, 636, 910, 910,
	0, 630, 247, 248, 0, 0, 0, 913, 246, 705,
	0, 910, 552, 709, 667, -2, 710, 711, 0, 0,
	910, 749, 1206, 337, 753, 754, 757, 759, 760, 762,
	767, 773, 774, 777, 780, 781, 0, 910, 910, 910,
	910, 910, 0, 0, 823, 0, 795, 910, 0, 725,
	726, 738, 739, 740, 741, 848, 0, 0, -2, 0,
	0, 823, 0, 910, 910, 583, 590, 910, 0, 584,
	910, 585, 605, 607, 576, 0, 0, 0, 0, 0,
	581, 823, 618, 37, 73, 74, 0, 0, 80, 910,
	342, 0, 423, 417, 421, 0, 388, 0, 0, 0,
	414, 369, 0, 0, 372, 0, 374, -2, 400, 182,
	0, 0, 0, 189, 191, 0, 195, 196, 0, 222,
	0, 0, 206, 0, -2, 210, 211, 212, 246, 214,
	215, 216, 1128, 219, 317, 317, 242, 1100, 0, 0,
	220, 221, 335, 173, 333, 0, 340, 340, 337, 340,
	0, 0, 340, 340, 293, 0, 294, 295, 296, 297,
	0, 315, 0, 275, 276, 0, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 156, 157, 0, 140,
	0, 0, 0, 0, 0, 428, 0, 413, 432, 1208,
	0, 151, 455, 456, 457, 458, 459, 460, 461, 1208,
	0, 442, 443, 444, 445, 446, 447, 448, 449, 450,
	451, 452, 0, 1208, 891, 892, 893, 894, 0, 0,
	469, 490, 0, 910, 506, 507, 557, 837, 0, 546,
	801, 0, 637, 910, 661, 640, 0, 0, 0, 912,
	0, 915, 706, 542, 707, 0, 0, 317, 317, 752,
	317, 321, 755, 317, 758, 317, 761, 763, 764, 765,
	766, 321, 768, 769, 770, 771, 772, 317, 317, 775,
	776, 317, 779, 317, 317, 0, 0, 750, 751, 0,
	0, 0, 0, 0, 0, 800, 0, 792, 724, 798,
	910, 30, 0, 848, 838, 850, 852, 910, 26, 0,
	844, 0, 831, 857, 619, 858, 587, 0, 592, 0,
	0, 0, 0, 595, 0, 831, 36, 77, 78, 79,
	864, 0, 424, 420, 0, 382, 317, 317, 0, 0,
	0, 0, 0, 0, 370, 371, 373, 376, 400, 401,
	402, 205, 184, 411, 186, 0, 910, 0, 0, 223,
	0, 0, 0, 209, 0, 213, 0, 238, 0, 240,
	0, 0, 0, 318, 284, 285, 340, 286, 325, 326,
	287, 288, 338, 339, 337, 0, 337, 0, 322, 0,
	0, 0, 0, 0, 380, 381, 317, 0, 0, -2,
	0, -2, 0, 0, 0, 0, 138, 139, 0, 122,
	0, 105, 0, 453, 454, 414, 434, 0, 435, 437,
	438, 439, 0, 413, 433, 509, 510, 618, 0, 708,
	641, 690, 328, 329, 914, 0, 712, 715, 713, 714,
	716, 910, 910, 719, 910, 910, 910, 0, 0, 796,
	0, 31, 0, 853, -2, 0, 0, 0, 43, 34,
	0, 578, 579, 0, 568, 570, 571, 572, 573, 574,
	575, 0, 0, 0, 614, 582, 35, 418, 425, 426,
	427, 344, 0, 828, 386, 387, 385, 411, 394, 395,
	0, 0, 411, 412, 413, 400, 910, 377, 0, 0,
	0, 910, 202, 0, 207, 0, 218, 1079, 327, 251,
	252, 217, 239, 241, 243, 0, 290, 340, 316, 340,
	0, 0, 0, 0, 0, 620, 0, 0, -2, 158,
	159, 0, 141, 142, 143, 144, 145, 0, 0, 104,
	107, 0, 0, 0, 0, 414, 814, 558, 553, 0,
	0, 0, 0, 0, 0, 0, 742, 723, 793, 0,
	851, 0, -2, 0, 846, 845, 0, 588, 567, 0,
	615, 616, 617, 566, 366, 345, 0, 347, 0, 362,
	0, 0, 0, 0, 0, 0, 0, 0, 383, 384,
	389, 0, 396, 397, 390, 0, 0, 414, 0, 0,
	910, 244, 197, 0, 224, 0, 0, 305, 306, 320,
	323, 620, 0, 0, 618, 0, 0, 618, 146, 415,
	0, 102, 123, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 823, 0, 525, 0, 0, 0, 60, 910,
	910, 866, 0, -2, 107, 107, -2, 107, 107, 0,
	0, 0, 0, 0, 816, 0, 554, 0, 555, 910,
	718, 717, 720, 721, 0, 0, 0, 0, 841, 26,
	0, 580, 569, 577, 343, 0, 348, 0, 0, 0,
	351, 0, 363, 353, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 244, 0, 193, 0, 0,
	0, 0, 204, 208, 618, 0, 0, 344, 0, 620,
	344, 148, 0, 910, 0, 124, 831, 48, -2, 50,
	0, 916, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 55, 56, 57, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 106, 108, -2, 109, 110,
	111, 112, 113, 0, 0, 152, 0, 463, 0, 0,
	25, 910, 910, 556, 819, 820, 822, 722, 0, 0,
	0, 849, -2, 847, 367, 0, 349, 354, 352, 355,
	364, 365, 356, 357, 358, 359, 360, 361, 411, 411,
	0, 0, 399, 244, 245, 0, 0, 200, 201, 203,
	0, 0, 0, 0, 0, 0, 235, 0, 344, 618,
	344, 366, 0, 618, 366, 100, 0, 416, 147, 101,
	135, 0, 835, 0, 0, 52, 54, 867, 0, 58,
	61, 62, 63, 64, 65, 0, 0, 0, 429, 904,
	155, 462, 0, 0, 0, 817, 815, 910, 743, 0,
	746, 0, 346, 0, 391, 392, 0, 344, 194, 198,
	199, 0, 226, 0, 228, 229, 230, 231, 232, 233,
	234, 0, 366, 344, 91, 89, 621, 344, 93, 910,
	0, 134, 51, 179, 0, 917, 0, 0, 67, 0,
	0, 907, 905, 0, 436, 464, 0, 0, 821, 744,
	0, 350, 0, 366, 225, 227, 236, 0, 88, 92,
	366, 149, 0, 0, 59, 66, 68, 0, 70, 431,
	0, 906, 0, 430, 0, 368, 0, 398, 0, 90,
	136, -2, 0, 0, 908, 909, 0, 0, 0, 237,
	69, 0, 910, 745, 0, 0, 0, 0, 393, 71,
	465, 466,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 382,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 383, 3, 384, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:418
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:423
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:424
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:428
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:451
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:459
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:465
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 25:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:472
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:478
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:482
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:488
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:492
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:499
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:511
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:523
		{
			yyVAL.str = InsertStr
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:527
		{
			yyVAL.str = ReplaceStr
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:533
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:539
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:543
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:547
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:552
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:553
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:557
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:561
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:566
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:570
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:576
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:580
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:584
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:588
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:594
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:598
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:611
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:615
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:621
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:626
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:630
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:636
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:643
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:650
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:657
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:665
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:675
		{
			yyVAL.str = ""
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:679
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:683
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:687
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:691
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:697
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:704
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:714
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:718
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:725
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:734
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:742
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:753
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:757
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:763
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:767
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:771
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:777
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:781
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:785
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:789
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:794
		{
			yyVAL.str = ""
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:798
		{
			yyVAL.str = yyDollar[3].str
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:804
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:808
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:814
		{
			yyVAL.str = SessionStr
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:818
		{
			yyVAL.str = GlobalStr
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:824
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 88:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:829
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 89:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:849
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:869
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 91:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:890
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 92:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:906
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 93:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:923
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 94:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:942
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 95:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:950
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:       CreateSqlSecurityStr,
				SecurityType: yyDollar[3].str,
				Name:         yyDollar[6].tableName.ToViewName(),
				Definition:   yyDollar[8].selStmt,
			}}
		}
	case 96:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:959
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:967
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:975
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:979
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:983
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 101:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:995
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 102:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1006
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1017
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 104:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1028
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1033
		{
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1034
		{
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1038
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1039
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1040
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1041
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1042
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1043
		{
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1044
		{
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1048
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1052
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1056
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1060
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1066
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1070
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1074
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1080
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1084
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1090
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1094
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1100
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1112
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1124
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1131
		{
			yyVAL.bytes = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1135
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1139
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1144
		{
			yyVAL.bytes = nil
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1148
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1152
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1156
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1160
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1164
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1169
		{
			yyVAL.expr = nil
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1173
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1178
		{
			yyVAL.expr = nil
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1182
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1187
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1191
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1196
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1200
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1206
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1211
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1216
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1222
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1227
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1233
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1238
		{
			yyVAL.bytes = nil
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1242
		{
			yyVAL.bytes = nil
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1248
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1255
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1261
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1265
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1270
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1274
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1278
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1282
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1286
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1292
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1297
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1303
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1314
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1319
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1325
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1338
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1343
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1348
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1353
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1359
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1364
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1369
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1374
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1379
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1384
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1389
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1394
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1399
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1408
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1418
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1423
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1428
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1435
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1442
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1450
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1455
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1461
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1467
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1473
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1479
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1486
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1490
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1494
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1500
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1504
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1508
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1512
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1516
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1520
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1524
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1528
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1532
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1536
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1540
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1546
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1552
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1558
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1562
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1567
		{
			yyVAL.sequence = &Sequence{}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1571
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1576
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1581
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1586
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1591
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1596
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1601
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1606
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1611
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1616
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1621
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1626
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 237:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1631
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1638
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1642
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1646
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1650
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1654
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1658
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1663
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1667
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1672
		{
			yyVAL.bytes = nil
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1685
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1690
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1696
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 306:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1957
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1962
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1967
		{
			yyVAL.optVal = nil
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1971
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1976
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1980
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1988
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1992
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 323:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1998
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2006
		{
			yyVAL.optVal = nil
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2010
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2014
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2023
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2027
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2031
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2036
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2040
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2045
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2049
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2054
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2058
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2062
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2067
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2071
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2075
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2080
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2084
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2088
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2094
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2099
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2103
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2107
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2113
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2117
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2123
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2127
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2133
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2137
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2142
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2146
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2150
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2154
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2158
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2162
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2166
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2170
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2174
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2180
		{
			yyVAL.str = ""
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2184
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2190
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2194
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2200
		{
			yyVAL.indexPartition = nil
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2204
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 368:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2208
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2214
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2218
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2222
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2226
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2230
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2234
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2238
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2242
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2246
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2252
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2256
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2262
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2267
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2273
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2277
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2283
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2288
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2292
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2302
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2307
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2314
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 391:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2321
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 392:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2328
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 393:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2337
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2349
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2353
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2357
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2361
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 398:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2367
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 399:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2378
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2388
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2392
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2396
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2402
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2406
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2410
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2414
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2418
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2422
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2428
		{
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2429
		{
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2433
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2437
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2442
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2449
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2453
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2460
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2464
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2470
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2474
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2479
		{
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2480
		{
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2484
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2488
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2494
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2498
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2502
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2508
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 429:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2512
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 430:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2526
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 431:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2540
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 432:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2559
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 433:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2568
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 434:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2577
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 435:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2581
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 436:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2585
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 437:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2598
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2608
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 439:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2613
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2618
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 441:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2622
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 462:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2654
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2660
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2664
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 465:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2670
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 466:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2674
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2680
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2686
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2694
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2699
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2707
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2711
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2717
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2721
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2726
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2732
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2736
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2740
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2745
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2749
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2753
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2757
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2761
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2765
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2769
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2773
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2777
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2781
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2785
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2789
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2799
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2803
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2807
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2811
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2815
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2819
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2823
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2833
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2839
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2843
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2849
		{
			yyVAL.str = ""
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2853
		{
			yyVAL.str = "extended "
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2859
		{
			yyVAL.str = ""
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2863
		{
			yyVAL.str = "full "
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2869
		{
			yyVAL.str = ""
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2873
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2877
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2883
		{
			yyVAL.showFilter = nil
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2887
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2891
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2897
		{
			yyVAL.str = ""
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2901
		{
			yyVAL.str = SessionStr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2905
		{
			yyVAL.str = GlobalStr
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2911
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2915
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2921
		{
			yyVAL.statement = &Begin{}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2925
		{
			yyVAL.statement = &Begin{}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2931
		{
			yyVAL.statement = &Commit{}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2937
		{
			yyVAL.statement = &Rollback{}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2943
		{
			yyVAL.statement = &OtherRead{}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2947
		{
			yyVAL.statement = &OtherRead{}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2951
		{
			yyVAL.statement = &OtherRead{}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2955
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2959
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2964
		{
			setAllowComments(yylex, true)
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2968
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2974
		{
			yyVAL.bytes2 = nil
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2978
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2984
		{
			yyVAL.str = UnionStr
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2988
		{
			yyVAL.str = UnionAllStr
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2992
		{
			yyVAL.str = UnionDistinctStr
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2997
		{
			yyVAL.str = ""
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3001
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3005
		{
			yyVAL.str = SQLCacheStr
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3010
		{
			yyVAL.str = ""
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3014
		{
			yyVAL.str = DistinctStr
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3019
		{
			yyVAL.str = ""
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3023
		{
			yyVAL.str = StraightJoinHint
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3028
		{
			yyVAL.selectExprs = nil
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3032
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3038
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3042
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3048
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3052
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3056
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3060
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3065
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3069
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3073
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3080
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3085
		{
			yyVAL.overExpr = nil
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3089
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3093
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3097
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 556:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3101
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy, OrderBy: yyDollar[4].orderBy}
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3106
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3110
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3116
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3120
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3130
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3134
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3138
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3143
		{
			yyVAL.strs = []string{}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3147
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3153
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3157
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3167
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3171
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3175
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3179
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3183
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3189
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 577:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3193
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3199
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3204
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3208
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3214
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3218
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3231
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3235
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3239
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3243
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3249
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3251
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3255
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3257
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3261
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3263
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3266
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3268
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3271
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3275
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3279
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3286
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3292
		{
			yyVAL.str = JoinStr
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3296
		{
			yyVAL.str = JoinStr
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3300
		{
			yyVAL.str = JoinStr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3306
		{
			yyVAL.str = StraightJoinStr
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3312
		{
			yyVAL.str = LeftJoinStr
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3316
		{
			yyVAL.str = LeftJoinStr
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3320
		{
			yyVAL.str = RightJoinStr
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3324
		{
			yyVAL.str = RightJoinStr
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3330
		{
			yyVAL.str = NaturalJoinStr
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3334
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3344
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3348
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3354
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3358
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3363
		{
			yyVAL.indexHints = nil
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3367
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3371
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3375
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3380
		{
			yyVAL.expr = nil
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3384
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3389
		{
			yyVAL.columns = nil
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3393
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3399
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3403
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3407
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3411
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3415
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3419
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3423
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3429
		{
			yyVAL.str = ""
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3433
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3439
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3443
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3449
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3453
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3457
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3461
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 637:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3465
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3469
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3473
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 640:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3477
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 641:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3481
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3485
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3491
		{
			yyVAL.str = IsNullStr
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3495
		{
			yyVAL.str = IsNotNullStr
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3499
		{
			yyVAL.str = IsTrueStr
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3503
		{
			yyVAL.str = IsNotTrueStr
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3507
		{
			yyVAL.str = IsFalseStr
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3511
		{
			yyVAL.str = IsNotFalseStr
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3517
		{
			yyVAL.str = EqualStr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3521
		{
			yyVAL.str = LessThanStr
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3525
		{
			yyVAL.str = GreaterThanStr
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3529
		{
			yyVAL.str = LessEqualStr
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3533
		{
			yyVAL.str = GreaterEqualStr
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3537
		{
			yyVAL.str = NotEqualStr
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3541
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3545
		{
			yyVAL.str = PosixRegexStr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3549
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3553
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3557
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3562
		{
			yyVAL.expr = nil
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3566
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3572
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3576
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3580
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3586
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3592
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3596
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3602
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3606
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3610
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3614
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3618
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3622
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3626
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3630
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3634
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3638
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3642
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3646
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3650
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3654
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3658
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3662
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3666
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3670
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3674
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3678
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3682
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3686
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 690:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3690
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3694
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3698
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3702
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3710
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3724
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3728
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3732
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3740
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3748
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3756
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3766
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 706:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3770
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 707:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3774
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 708:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3778
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3782
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3792
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3796
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 712:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3800
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 713:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3804
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 714:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3808
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 715:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3812
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 716:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3816
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 717:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3820
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 718:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3824
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 719:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3828
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 720:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3832
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 721:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3836
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 722:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3840
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 723:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3844
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 724:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3848
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 725:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3852
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3857
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3867
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3871
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3875
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3879
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3884
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3889
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3894
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3899
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3903
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3917
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3921
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3925
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3929
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3935
		{
			yyVAL.str = ""
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3939
		{
			yyVAL.str = BooleanModeStr
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3943
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 745:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3947
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3951
		{
			yyVAL.str = QueryExpansionStr
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3957
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3961
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3967
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3971
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3975
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3979
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3983
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3987
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3993
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3997
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4001
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4005
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4009
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4013
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4017
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4021
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4025
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4029
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4033
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4037
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4041
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4045
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4049
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4053
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4057
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4061
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4065
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4069
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4073
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4077
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4081
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4085
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4089
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4093
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4097
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4103
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4107
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4111
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4115
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4119
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4123
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4127
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4131
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4136
		{
			yyVAL.expr = nil
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4140
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4145
		{
			yyVAL.str = string("")
		}
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4149
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4155
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4159
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 796:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4165
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4170
		{
			yyVAL.expr = nil
		}
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4174
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4180
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4184
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 801:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4188
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4194
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4200
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4204
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4208
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4213
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4218
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4222
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4226
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4230
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4234
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4238
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4242
		{
			yyVAL.expr = &NullVal{}
		}
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4247
		{
			yyVAL.exprs = nil
		}
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4251
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4256
		{
			yyVAL.expr = nil
		}
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4260
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 818:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4265
		{
			yyVAL.partitionBy = nil
		}
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4269
		{
			yyVAL.partitionBy = yyDollar[3].partitionBy
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4275
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4279
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4285
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4290
		{
			yyVAL.orderBy = nil
		}
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4294
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4300
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4304
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4310
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 828:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4315
		{
			yyVAL.str = AscScr
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4319
		{
			yyVAL.str = AscScr
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4323
		{
			yyVAL.str = DescScr
		}
	case 831:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4328
		{
			yyVAL.limit = nil
		}
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4332
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 833:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4336
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 834:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4340
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 835:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4345
		{
			yyVAL.str = ""
		}
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4349
		{
			yyVAL.str = ForUpdateStr
		}
	case 837:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4353
		{
			yyVAL.str = ShareModeStr
		}
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4366
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4370
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4374
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 841:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4379
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 842:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4383
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 843:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4387
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4394
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4398
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4402
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 847:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4406
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4411
		{
			yyVAL.updateExprs = nil
		}
	case 849:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4415
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4421
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4425
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4431
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4435
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4441
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4447
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4457
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4461
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4467
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4473
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4477
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4483
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4487
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4491
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 864:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4496
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4500
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4506
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4512
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4519
		{
			yyVAL.bytes = []byte("charset")
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4526
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4530
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4534
		{
			yyVAL.expr = &Default{}
		}
	case 874:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4539
		{
			yyVAL.byt = 0
		}
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4541
		{
			yyVAL.byt = 1
		}
	case 876:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4544
		{
			yyVAL.empty = struct{}{}
		}
	case 877:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4546
		{
			yyVAL.empty = struct{}{}
		}
	case 878:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4549
		{
			yyVAL.str = ""
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4551
		{
			yyVAL.str = IgnoreStr
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4555
		{
			yyVAL.empty = struct{}{}
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4557
		{
			yyVAL.empty = struct{}{}
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4559
		{
			yyVAL.empty = struct{}{}
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4561
		{
			yyVAL.empty = struct{}{}
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4563
		{
			yyVAL.empty = struct{}{}
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4565
		{
			yyVAL.empty = struct{}{}
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4567
		{
			yyVAL.empty = struct{}{}
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4569
		{
			yyVAL.empty = struct{}{}
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4571
		{
			yyVAL.empty = struct{}{}
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4573
		{
			yyVAL.empty = struct{}{}
		}
	case 890:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4576
		{
			yyVAL.empty = struct{}{}
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4578
		{
			yyVAL.empty = struct{}{}
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4580
		{
			yyVAL.empty = struct{}{}
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4584
		{
			yyVAL.empty = struct{}{}
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4586
		{
			yyVAL.empty = struct{}{}
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4590
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4594
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4601
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4607
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4611
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4616
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4623
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 904:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4629
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4633
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 906:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4637
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 907:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4643
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4647
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4651
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 910:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4657
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4661
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 912:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4668
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4675
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4679
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4686
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4692
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 917:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4696
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5012
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5021
		{
			decNesting(yylex)
		}
	case 1208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:5026
		{
			forceEOF(yylex)
		}
	case 1209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:5031
		{
			forceEOF(yylex)
		}
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5035
		{
			forceEOF(yylex)
		}
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5039
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
