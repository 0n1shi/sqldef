// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const VINDEX = 57489
const VINDEXES = 57490
const STATUS = 57491
const VARIABLES = 57492
const RESTRICT = 57493
const CASCADE = 57494
const NO = 57495
const ACTION = 57496
const PERMISSIVE = 57497
const RESTRICTIVE = 57498
const PUBLIC = 57499
const CURRENT_USER = 57500
const SESSION_USER = 57501
const PAD_INDEX = 57502
const FILLFACTOR = 57503
const IGNORE_DUP_KEY = 57504
const STATISTICS_NORECOMPUTE = 57505
const STATISTICS_INCREMENTAL = 57506
const ALLOW_ROW_LOCKS = 57507
const ALLOW_PAGE_LOCKS = 57508
const BEFORE = 57509
const AFTER = 57510
const EACH = 57511
const ROW = 57512
const SCROLL = 57513
const CURSOR = 57514
const OPEN = 57515
const CLOSE = 57516
const FETCH = 57517
const PRIOR = 57518
const FIRST = 57519
const LAST = 57520
const DEALLOCATE = 57521
const INSTEAD = 57522
const OF = 57523
const DEFERRABLE = 57524
const INITIALLY = 57525
const IMMEDIATE = 57526
const DEFERRED = 57527
const CONCURRENTLY = 57528
const SQL = 57529
const SECURITY = 57530
const BEGIN = 57531
const START = 57532
const TRANSACTION = 57533
const COMMIT = 57534
const ROLLBACK = 57535
const BIT = 57536
const TINYINT = 57537
const SMALLINT = 57538
const SMALLSERIAL = 57539
const MEDIUMINT = 57540
const INT = 57541
const INTEGER = 57542
const SERIAL = 57543
const BIGINT = 57544
const BIGSERIAL = 57545
const INTNUM = 57546
const REAL = 57547
const DOUBLE = 57548
const PRECISION = 57549
const FLOAT_TYPE = 57550
const DECIMAL = 57551
const NUMERIC = 57552
const SMALLMONEY = 57553
const MONEY = 57554
const TIME = 57555
const TIMESTAMP = 57556
const DATETIME = 57557
const YEAR = 57558
const DATETIMEOFFSET = 57559
const DATETIME2 = 57560
const SMALLDATETIME = 57561
const CHAR = 57562
const VARCHAR = 57563
const VARYING = 57564
const BOOL = 57565
const CHARACTER = 57566
const VARBINARY = 57567
const NCHAR = 57568
const NVARCHAR = 57569
const NTEXT = 57570
const UUID = 57571
const TEXT = 57572
const TINYTEXT = 57573
const MEDIUMTEXT = 57574
const LONGTEXT = 57575
const CITEXT = 57576
const BLOB = 57577
const TINYBLOB = 57578
const MEDIUMBLOB = 57579
const LONGBLOB = 57580
const JSON = 57581
const JSONB = 57582
const ENUM = 57583
const GEOMETRY = 57584
const POINT = 57585
const LINESTRING = 57586
const POLYGON = 57587
const GEOMETRYCOLLECTION = 57588
const MULTIPOINT = 57589
const MULTILINESTRING = 57590
const MULTIPOLYGON = 57591
const VARIADIC = 57592
const ARRAY = 57593
const NOW = 57594
const GETDATE = 57595
const BPCHAR = 57596
const TEXT_PATTERN_OPS = 57597
const NULLX = 57598
const AUTO_INCREMENT = 57599
const APPROXNUM = 57600
const SIGNED = 57601
const UNSIGNED = 57602
const ZEROFILL = 57603
const ZONE = 57604
const AUTOINCREMENT = 57605
const DATABASES = 57606
const TABLES = 57607
const VITESS_KEYSPACES = 57608
const VITESS_SHARDS = 57609
const VITESS_TABLETS = 57610
const VSCHEMA_TABLES = 57611
const EXTENDED = 57612
const FULL = 57613
const PROCESSLIST = 57614
const NAMES = 57615
const CHARSET = 57616
const GLOBAL = 57617
const SESSION = 57618
const ISOLATION = 57619
const LEVEL = 57620
const READ = 57621
const WRITE = 57622
const ONLY = 57623
const REPEATABLE = 57624
const COMMITTED = 57625
const UNCOMMITTED = 57626
const SERIALIZABLE = 57627
const NEW = 57628
const CURRENT_TIMESTAMP = 57629
const DATABASE = 57630
const CURRENT_DATE = 57631
const CURRENT_TIME = 57632
const LOCALTIME = 57633
const LOCALTIMESTAMP = 57634
const UTC_DATE = 57635
const UTC_TIME = 57636
const UTC_TIMESTAMP = 57637
const REPLACE = 57638
const CONVERT = 57639
const CAST = 57640
const SUBSTR = 57641
const SUBSTRING = 57642
const GROUP_CONCAT = 57643
const SEPARATOR = 57644
const INHERIT = 57645
const LEAD = 57646
const LAG = 57647
const MATCH = 57648
const AGAINST = 57649
const BOOLEAN = 57650
const LANGUAGE = 57651
const WITH = 57652
const WITHOUT = 57653
const PARSER = 57654
const QUERY = 57655
const EXPANSION = 57656
const UNUSED = 57657
const VIRTUAL = 57658
const STORED = 57659
const GENERATED = 57660
const ALWAYS = 57661
const IDENTITY = 57662
const SEQUENCE = 57663
const INCREMENT = 57664
const MINVALUE = 57665
const CACHE = 57666
const CYCLE = 57667
const OWNED = 57668
const NONE = 57669
const CLUSTERED = 57670
const NONCLUSTERED = 57671
const REPLICATION = 57672
const COLUMNSTORE = 57673
const INCLUDE = 57674
const HOLDLOCK = 57675
const NOLOCK = 57676
const NOWAIT = 57677
const PAGLOCK = 57678
const ROWLOCK = 57679
const TABLELOCK = 57680
const DEFINER = 57681
const INVOKER = 57682
const TYPECAST = 57683
const CHECK = 57684
const OVER = 57685

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	130, 403,
	-2, 160,
	-1, 36,
	166, 511,
	167, 511,
	-2, 501,
	-1, 286,
	119, 901,
	-2, 897,
	-1, 287,
	119, 902,
	-2, 898,
	-1, 288,
	119, 903,
	-2, 246,
	-1, 330,
	268, 912,
	-2, 789,
	-1, 362,
	86, 1130,
	-2, 86,
	-1, 363,
	86, 1080,
	-2, 87,
	-1, 369,
	86, 1059,
	-2, 868,
	-1, 371,
	86, 1104,
	-2, 870,
	-1, 634,
	268, 912,
	-2, 539,
	-1, 683,
	268, 912,
	-2, 539,
	-1, 712,
	55, 41,
	57, 41,
	-2, 43,
	-1, 744,
	116, 1054,
	251, 1054,
	257, 1054,
	-2, 282,
	-1, 745,
	116, 1055,
	251, 1055,
	257, 1055,
	-2, 283,
	-1, 746,
	251, 1057,
	257, 1057,
	-2, 317,
	-1, 747,
	251, 1058,
	257, 1058,
	-2, 317,
	-1, 748,
	251, 1159,
	257, 1159,
	-2, 324,
	-1, 749,
	251, 1105,
	257, 1105,
	-2, 317,
	-1, 750,
	251, 1110,
	257, 1110,
	-2, 324,
	-1, 751,
	116, 1108,
	251, 1108,
	257, 1108,
	-2, 289,
	-1, 753,
	116, 1158,
	251, 1158,
	257, 1158,
	-2, 324,
	-1, 754,
	251, 1144,
	257, 1144,
	-2, 337,
	-1, 755,
	251, 1150,
	257, 1150,
	-2, 337,
	-1, 756,
	251, 1098,
	257, 1098,
	-2, 337,
	-1, 757,
	251, 1094,
	257, 1094,
	-2, 337,
	-1, 759,
	116, 1053,
	251, 1053,
	257, 1053,
	-2, 298,
	-1, 760,
	116, 1148,
	251, 1148,
	257, 1148,
	-2, 299,
	-1, 761,
	116, 1096,
	251, 1096,
	257, 1096,
	-2, 300,
	-1, 762,
	116, 1093,
	251, 1093,
	257, 1093,
	-2, 301,
	-1, 763,
	116, 1085,
	251, 1085,
	257, 1085,
	-2, 302,
	-1, 765,
	116, 1157,
	251, 1157,
	257, 1157,
	-2, 304,
	-1, 768,
	116, 1066,
	251, 1066,
	257, 1066,
	-2, 274,
	-1, 769,
	116, 1146,
	251, 1146,
	257, 1146,
	-2, 317,
	-1, 770,
	116, 1147,
	251, 1147,
	257, 1147,
	-2, 317,
	-1, 771,
	116, 1067,
	251, 1067,
	257, 1067,
	-2, 317,
	-1, 772,
	116, 1068,
	251, 1068,
	257, 1068,
	-2, 317,
	-1, 773,
	116, 1069,
	251, 1069,
	257, 1069,
	-2, 317,
	-1, 774,
	116, 1137,
	251, 1137,
	257, 1137,
	-2, 280,
	-1, 775,
	116, 1171,
	251, 1171,
	257, 1171,
	-2, 281,
	-1, 776,
	116, 1077,
	251, 1077,
	257, 1077,
	-2, 307,
	-1, 777,
	116, 1114,
	251, 1114,
	257, 1114,
	-2, 308,
	-1, 778,
	116, 1092,
	251, 1092,
	257, 1092,
	-2, 309,
	-1, 779,
	116, 1115,
	251, 1115,
	257, 1115,
	-2, 310,
	-1, 780,
	116, 1078,
	251, 1078,
	257, 1078,
	-2, 311,
	-1, 781,
	116, 1102,
	251, 1102,
	257, 1102,
	-2, 312,
	-1, 782,
	116, 1101,
	251, 1101,
	257, 1101,
	-2, 313,
	-1, 783,
	116, 1103,
	251, 1103,
	257, 1103,
	-2, 314,
	-1, 784,
	116, 1052,
	251, 1052,
	257, 1052,
	-2, 256,
	-1, 785,
	116, 1149,
	251, 1149,
	257, 1149,
	-2, 257,
	-1, 786,
	116, 1138,
	251, 1138,
	257, 1138,
	-2, 258,
	-1, 787,
	116, 1140,
	251, 1140,
	257, 1140,
	-2, 259,
	-1, 788,
	116, 1097,
	251, 1097,
	257, 1097,
	-2, 260,
	-1, 789,
	116, 1082,
	251, 1082,
	257, 1082,
	-2, 261,
	-1, 790,
	116, 1083,
	251, 1083,
	257, 1083,
	-2, 262,
	-1, 791,
	116, 1131,
	251, 1131,
	257, 1131,
	-2, 263,
	-1, 792,
	116, 1050,
	251, 1050,
	257, 1050,
	-2, 264,
	-1, 793,
	116, 1051,
	251, 1051,
	257, 1051,
	-2, 265,
	-1, 794,
	116, 1122,
	251, 1122,
	257, 1122,
	-2, 319,
	-1, 795,
	116, 1071,
	251, 1071,
	257, 1071,
	-2, 319,
	-1, 796,
	116, 1075,
	251, 1075,
	257, 1075,
	-2, 319,
	-1, 797,
	116, 1070,
	251, 1070,
	257, 1070,
	-2, 321,
	-1, 798,
	116, 1109,
	251, 1109,
	257, 1109,
	-2, 321,
	-1, 799,
	116, 1100,
	251, 1100,
	257, 1100,
	-2, 272,
	-1, 800,
	116, 1139,
	251, 1139,
	257, 1139,
	-2, 273,
	-1, 882,
	119, 905,
	-2, 900,
	-1, 950,
	268, 912,
	-2, 317,
	-1, 951,
	57, 317,
	59, 317,
	241, 317,
	-2, 1057,
	-1, 952,
	57, 751,
	-2, 1066,
	-1, 953,
	57, 317,
	-2, 1067,
	-1, 954,
	57, 321,
	-2, 1070,
	-1, 955,
	57, 754,
	-2, 1085,
	-1, 957,
	57, 317,
	-2, 1105,
	-1, 958,
	57, 757,
	-2, 1136,
	-1, 959,
	57, 317,
	-2, 1146,
	-1, 960,
	57, 760,
	-2, 1155,
	-1, 961,
	57, 762,
	-2, 1050,
	-1, 962,
	57, 763,
	-2, 1052,
	-1, 963,
	57, 764,
	-2, 1082,
	-1, 964,
	57, 765,
	-2, 1100,
	-1, 965,
	57, 321,
	-2, 1109,
	-1, 966,
	57, 767,
	-2, 1138,
	-1, 967,
	57, 768,
	-2, 1139,
	-1, 968,
	57, 769,
	-2, 1149,
	-1, 969,
	57, 770,
	-2, 1075,
	-1, 970,
	57, 771,
	-2, 1122,
	-1, 971,
	57, 317,
	-2, 1068,
	-1, 972,
	57, 317,
	-2, 1069,
	-1, 973,
	57, 774,
	-2, 1137,
	-1, 974,
	57, 775,
	-2, 1144,
	-1, 975,
	57, 317,
	-2, 1159,
	-1, 976,
	57, 778,
	-2, 1108,
	-1, 977,
	57, 317,
	-2, 1110,
	-1, 978,
	57, 317,
	-2, 1158,
	-1, 1053,
	142, 413,
	-2, 1064,
	-1, 1183,
	268, 912,
	-2, 539,
	-1, 1206,
	5, 28,
	-2, 665,
	-1, 1248,
	5, 27,
	-2, 841,
	-1, 1297,
	59, 378,
	-2, 375,
	-1, 1314,
	119, 903,
	-2, 246,
	-1, 1581,
	5, 27,
	-2, 95,
	-1, 1583,
	5, 27,
	-2, 97,
	-1, 1636,
	5, 28,
	-2, 842,
	-1, 1710,
	5, 27,
	-2, 96,
	-1, 1744,
	5, 27,
	-2, 844,
	-1, 1822,
	58, 108,
	-2, 179,
	-1, 1825,
	58, 108,
	-2, 179,
	-1, 1898,
	189, 54,
	-2, 179,
	-1, 1914,
	58, 108,
	-2, 178,
	-1, 1938,
	5, 28,
	-2, 845,
	-1, 2092,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 22077

var yyAct = [...]int16{
	373, 1800, 2048, 1576, 1931, 735, 1924, 1803, 1759, 1899,
	2049, 1127, 1854, 560, 1669, 1877, 810, 1286, 638, 1796,
	1001, 1575, 1646, 282, 734, 1251, 1264, 1529, 1945, 303,
	1517, 320, 1486, 1289, 1019, 96, 265, 1487, 96, 1483,
	858, 1367, 291, 21, 706, 1659, 1756, 53, 1113, 1198,
	1312, 1642, 547, 704, 1048, 1913, 1135, 1063, 1136, 619,
	287, 907, 96, 96, 1319, 292, 1042, 1002, 939, 1108,
	295, 1269, 284, 935, 1188, 368, 96, 259, 949, 816,
	1350, 1194, 1058, 722, 1256, 96, 988, 96, 884, 995,
	566, 1089, 721, 96, 349, 637, 3, 513, 361, 269,
	1826, 998, 708, 572, 290, 580, 693, 742, 348, 1039,
	274, 1432, 1332, 737, 736, 347, 364, 661, 1081, 1170,
	934, 260, 261, 262, 263, 2073, 52, 271, 278, 48,
	26, 27, 352, 1647, 1648, 1649, 1650, 1651, 1652, 1077,
	1524, 1814, 1437, 264, 358, 2041, 620, 594, 1845, 1546,
	604, 604, 28, 593, 592, 602, 603, 595, 596, 597,
	598, 599, 600, 601, 594, 1797, 503, 604, 356, 588,
	515, 591, 1626, 559, 521, 520, 1675, 606, 607, 608,
	609, 610, 611, 612, 1533, 589, 590, 587, 613, 614,
	615, 616, 593, 592, 602, 603, 595, 596, 597, 598,
	599, 600, 601, 594, 1124, 1125, 604, 652, 1965, 1531,
	1532, 2104, 1080, 522, 523, 1530, 593, 592, 602, 603,
	595, 596, 597, 598, 599, 600, 601, 594, 1310, 2012,
	604, 2098, 1077, 1078, 2031, 1963, 1964, 1936, 96, 592,
	602, 603, 595, 596, 597, 598, 599, 600, 601, 594,
	1683, 1859, 604, 545, 1858, 2085, 1820, 1066, 1195, 1196,
	1045, 1095, 1128, 1982, 2024, 1265, 1819, 287, 287, 1191,
	2011, 1478, 1073, 1960, 1061, 1935, 1630, 524, 723, 1277,
	724, 1062, 1276, 1509, 287, 1278, 597, 598, 599, 600,
	601, 594, 1537, 1032, 604, 1510, 1511, 287, 287, 287,
	287, 287, 287, 287, 1033, 1034, 1969, 849, 555, 1615,
	1614, 1815, 1816, 1818, 850, 1627, 568, 1817, 1613, 1334,
	1971, 1083, 287, 633, 1470, 1096, 1324, 1193, 1326, 1325,
	1430, 287, 992, 1429, 1213, 1085, 1428, 1220, 559, 1069,
	1109, 1064, 1074, 1218, 258, 2102, 2001, 96, 808, 1071,
	1070, 508, 2096, 2095, 96, 96, 96, 1966, 2081, 2054,
	621, 2082, 1141, 1525, 2046, 1894, 569, 1802, 1775, 625,
	626, 627, 628, 629, 630, 631, 1085, 1588, 1589, 1846,
	1878, 593, 592, 602, 603, 595, 596, 597, 598, 599,
	600, 601, 594, 605, 605, 604, 2097, 593, 592, 602,
	603, 595, 596, 597, 598, 599, 600, 601, 594, 2083,
	605, 604, 364, 1624, 1531, 1532, 1925, 1431, 2030, 1408,
	2032, 551, 552, 510, 352, 1904, 999, 1623, 1595, 1059,
	1926, 1724, 540, 1741, 49, 91, 87, 88, 1677, 89,
	1676, 54, 1304, 1523, 1303, 1596, 1060, 1291, 666, 605,
	2063, 1405, 1605, 1832, 667, 1713, 2101, 593, 592, 602,
	603, 595, 596, 597, 598, 599, 600, 601, 594, 1535,
	514, 604, 529, 605, 1020, 1022, 1672, 1067, 85, 84,
	2053, 85, 2078, 1068, 559, 828, 807, 511, 1268, 1967,
	1968, 1970, 1972, 1973, 1267, 605, 548, 549, 550, 1266,
	553, 507, 542, 525, 719, 544, 1096, 557, 1110, 593,
	592, 602, 603, 595, 596, 597, 598, 599, 600, 601,
	594, 96, 506, 604, 713, 519, 96, 1859, 2023, 96,
	801, 1684, 96, 237, 541, 543, 96, 605, 1075, 1425,
	1076, 654, 655, 656, 657, 658, 659, 660, 1309, 1934,
	1667, 1667, 86, 1044, 1409, 2089, 1021, 96, 1406, 1088,
	1850, 1404, 1072, 593, 592, 602, 603, 595, 596, 597,
	598, 599, 600, 601, 594, 1407, 96, 604, 287, 287,
	1905, 1906, 1907, 1733, 1639, 287, 1554, 287, 623, 624,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 861, 806, 1417, 1296, 809,
	1233, 837, 90, 1670, 1671, 1673, 1182, 823, 856, 885,
	593, 592, 602, 603, 595, 596, 597, 598, 599, 600,
	601, 594, 726, 636, 604, 287, 584, 881, 605, 535,
	1564, 287, 287, 287, 287, 287, 287, 287, 287, 853,
	1294, 1413, 287, 938, 605, 835, 1041, 1040, 886, 883,
	882, 577, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 579, 539, 1297,
	579, 863, 1870, 287, 287, 287, 287, 878, 96, 941,
	287, 96, 96, 96, 96, 96, 1060, 1565, 1869, 1165,
	1868, 1867, 1866, 96, 880, 1865, 96, 1864, 818, 1862,
	96, 980, 982, 913, 605, 96, 96, 990, 981, 667,
	910, 1059, 1585, 912, 937, 2093, 287, 1279, 929, 932,
	1254, 946, 947, 1412, 818, 725, 945, 985, 1060, 593,
	592, 602, 603, 595, 596, 597, 598, 599, 600, 601,
	594, 2091, 986, 604, 1480, 1003, 989, 994, 1238, 2094,
	989, 352, 352, 352, 352, 352, 605, 891, 1027, 817,
	1288, 364, 993, 813, 996, 997, 352, 1774, 1300, 1038,
	827, 889, 890, 888, 1166, 352, 1005, 1006, 309, 1008,
	1189, 838, 839, 840, 841, 842, 843, 844, 845, 1004,
	574, 945, 1007, 1946, 96, 846, 847, 96, 1016, 1777,
	96, 57, 1024, 1030, 1025, 1341, 96, 1029, 96, 1340,
	605, 2025, 1773, 1947, 96, 1229, 354, 96, 1142, 96,
	1299, 1863, 96, 1288, 1046, 2066, 59, 60, 61, 62,
	63, 2065, 1092, 578, 577, 1094, 1288, 1115, 1287, 2029,
	2000, 2028, 367, 925, 504, 287, 287, 287, 287, 512,
	579, 93, 516, 517, 2027, 1111, 1112, 1948, 2026, 287,
	1944, 1228, 1288, 819, 820, 1172, 1787, 605, 595, 596,
	597, 598, 599, 600, 601, 594, 821, 82, 604, 357,
	287, 287, 287, 1210, 1703, 1209, 874, 876, 877, 819,
	820, 1740, 518, 875, 1702, 1122, 1179, 1180, 1181, 881,
	1542, 526, 821, 527, 578, 577, 1335, 1357, 1227, 534,
	885, 602, 603, 595, 596, 597, 598, 599, 600, 601,
	594, 579, 882, 604, 623, 624, 50, 287, 1355, 72,
	77, 855, 69, 1700, 287, 1695, 1331, 887, 1171, 1199,
	1335, 287, 1607, 859, 860, 73, 1694, 80, 1178, 886,
	559, 1335, 1185, 1186, 1187, 50, 923, 1115, 528, 1351,
	635, 578, 577, 74, 75, 70, 922, 1184, 578, 577,
	854, 908, 926, 909, 83, 1111, 1112, 287, 579, 1860,
	287, 927, 928, 1154, 1880, 579, 605, 1528, 1306, 578,
	577, 635, 1527, 1216, 578, 577, 924, 1153, 578, 577,
	1892, 2109, 578, 577, 1221, 1482, 579, 1097, 1098, 1099,
	1100, 579, 54, 625, 1526, 579, 1201, 96, 1298, 579,
	367, 367, 367, 367, 1280, 367, 1130, 1158, 578, 577,
	1664, 2084, 367, 1748, 2038, 346, 921, 1152, 1664, 2019,
	559, 1271, 834, 1273, 833, 579, 1892, 2018, 531, 532,
	533, 2015, 2014, 1975, 536, 559, 1131, 814, 1133, 582,
	1760, 2006, 559, 1252, 1237, 96, 1235, 812, 287, 537,
	1272, 558, 530, 570, 1762, 1912, 1163, 1664, 2003, 1893,
	1305, 1892, 1261, 1889, 1248, 1282, 1883, 352, 1664, 2002,
	1882, 1149, 1146, 1147, 1793, 1145, 1792, 1323, 1664, 1976,
	1748, 1922, 1748, 1799, 1791, 1274, 71, 96, 1748, 1784,
	1321, 96, 1788, 96, 1748, 559, 1751, 1750, 1748, 1749,
	1707, 605, 1664, 1663, 1696, 1156, 1159, 1686, 1292, 1293,
	1295, 1506, 559, 716, 76, 1638, 559, 1561, 367, 1571,
	1570, 1567, 1568, 1567, 1566, 728, 78, 79, 1761, 81,
	1202, 559, 943, 559, 690, 559, 96, 96, 733, 732,
	1720, 23, 1484, 688, 96, 1252, 605, 1560, 1555, 1253,
	1356, 1368, 712, 1352, 287, 1353, 1354, 717, 23, 715,
	287, 287, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 54,
	1378, 1743, 1420, 287, 1372, 1344, 1253, 1346, 1347, 1348,
	1349, 1371, 287, 1246, 1372, 1026, 689, 715, 1247, 1151,
	1373, 50, 1375, 1232, 690, 23, 2009, 943, 1989, 287,
	287, 287, 287, 287, 287, 1422, 1634, 690, 50, 287,
	1664, 1202, 690, 1685, 1584, 1573, 1572, 287, 1202, 1569,
	1283, 1252, 1150, 287, 287, 287, 1031, 1423, 287, 1433,
	1424, 287, 1426, 1427, 1202, 1211, 718, 1485, 857, 1231,
	50, 1435, 1467, 271, 2099, 50, 2008, 1888, 1874, 1488,
	287, 1873, 1829, 1479, 1828, 1795, 1477, 1794, 1438, 1516,
	1786, 1725, 1155, 741, 741, 802, 805, 1722, 1508, 1494,
	1708, 1472, 1473, 1474, 1475, 1476, 1471, 1553, 1085, 882,
	1157, 243, 1003, 1114, 287, 367, 1580, 1552, 1003, 1507,
	1495, 1550, 1493, 50, 1539, 1501, 367, 367, 367, 367,
	367, 367, 367, 367, 1514, 1499, 1360, 253, 1109, 1311,
	367, 367, 1758, 1323, 1285, 1490, 1102, 824, 1336, 1337,
	1515, 1339, 825, 1342, 1343, 829, 1321, 1101, 832, 1534,
	865, 287, 96, 1090, 1543, 1257, 1258, 1536, 1116, 1117,
	582, 65, 96, 367, 1545, 811, 1374, 1855, 1547, 1879,
	1574, 1484, 1361, 851, 1260, 695, 698, 699, 700, 696,
	1577, 697, 701, 1120, 238, 1257, 1258, 831, 815, 556,
	240, 1013, 870, 96, 1011, 1263, 1014, 246, 242, 1012,
	869, 1262, 931, 931, 287, 1010, 1410, 321, 47, 1009,
	933, 96, 1395, 275, 276, 367, 287, 2060, 2010, 1416,
	1592, 1591, 1167, 2057, 1015, 983, 699, 700, 573, 244,
	983, 1177, 1176, 248, 1284, 1609, 1556, 1557, 1345, 1559,
	561, 731, 1562, 1563, 571, 538, 1541, 1598, 1632, 1581,
	2047, 1583, 1726, 562, 1606, 47, 1132, 1600, 859, 860,
	1422, 830, 1582, 270, 1610, 1540, 1469, 1370, 983, 353,
	1365, 1603, 1616, 287, 1363, 822, 703, 272, 273, 573,
	287, 352, 1216, 1396, 2074, 1719, 1587, 1522, 1612, 1398,
	1391, 1392, 1221, 1399, 1394, 1393, 96, 367, 1175, 1401,
	1397, 266, 2033, 54, 1000, 367, 1174, 1839, 1835, 239,
	1400, 267, 504, 1834, 1729, 1633, 1715, 1390, 1716, 1717,
	1718, 1641, 1872, 1253, 1997, 1996, 1674, 1995, 1994, 287,
	575, 1714, 1028, 1871, 1658, 287, 1137, 1138, 1139, 1847,
	1656, 1962, 1961, 1680, 1653, 1654, 1655, 1302, 1679, 241,
	852, 249, 250, 251, 252, 256, 1660, 56, 1282, 58,
	255, 254, 1379, 287, 1323, 96, 695, 698, 699, 700,
	696, 1594, 697, 701, 1521, 1520, 1043, 1321, 1809, 8,
	1721, 1682, 714, 1119, 1704, 1687, 1806, 7, 1807, 6,
	1558, 367, 1577, 367, 1805, 5, 51, 1697, 1, 67,
	66, 741, 1930, 1731, 1436, 509, 1123, 1197, 632, 307,
	2080, 367, 2052, 293, 287, 287, 1711, 287, 287, 287,
	1118, 1712, 1709, 1121, 1645, 1990, 1126, 1368, 1660, 1897,
	1985, 1903, 1134, 1330, 1140, 367, 1065, 1881, 1308, 68,
	1143, 862, 1981, 1160, 1891, 1161, 1586, 1369, 1162, 546,
	546, 546, 546, 1389, 546, 1732, 1488, 1129, 1698, 1366,
	1148, 546, 1742, 1923, 1941, 1757, 1666, 1051, 1710, 287,
	1281, 502, 64, 1861, 287, 1052, 1050, 1772, 47, 1049,
	1047, 1755, 1776, 1079, 1333, 1770, 1734, 1735, 1082, 1736,
	1737, 1738, 740, 618, 738, 1780, 1771, 622, 739, 287,
	1778, 743, 245, 359, 702, 727, 1376, 576, 1403, 942,
	944, 1402, 1144, 1411, 848, 1164, 554, 634, 247, 582,
	1798, 1804, 617, 1744, 1173, 991, 1275, 366, 1577, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 1491, 651,
	653, 653, 653, 653, 653, 653, 653, 653, 565, 682,
	683, 684, 685, 1833, 1813, 1728, 1856, 1236, 649, 987,
	294, 705, 873, 306, 1852, 1488, 1848, 1830, 1821, 1837,
	305, 304, 1853, 287, 864, 1245, 1018, 586, 351, 686,
	694, 692, 691, 1259, 1255, 287, 350, 1419, 1629, 1886,
	1844, 868, 25, 55, 277, 19, 18, 17, 20, 1789,
	16, 1790, 1270, 1884, 1895, 1084, 1885, 15, 14, 29,
	287, 287, 1887, 13, 1577, 1890, 12, 11, 1699, 10,
	1701, 367, 1920, 1921, 9, 287, 287, 1812, 1811, 1810,
	287, 1849, 1290, 1908, 1911, 1808, 4, 1813, 287, 268,
	801, 22, 2, 1301, 1928, 0, 0, 0, 0, 0,
	0, 1896, 0, 0, 0, 0, 1328, 1942, 1937, 0,
	0, 280, 0, 0, 0, 1956, 0, 1230, 1957, 1915,
	1916, 1917, 1918, 1919, 0, 0, 1954, 1955, 0, 0,
	0, 1958, 1909, 0, 287, 1949, 1950, 1951, 1952, 1953,
	0, 1307, 0, 0, 1991, 1986, 1359, 0, 0, 1979,
	1974, 0, 0, 1003, 0, 0, 0, 367, 0, 1998,
	0, 593, 592, 602, 603, 595, 596, 597, 598, 599,
	600, 601, 594, 1988, 1977, 604, 0, 1980, 1813, 2004,
	1978, 0, 0, 1358, 546, 0, 0, 1362, 0, 1364,
	0, 367, 1813, 0, 1190, 546, 546, 546, 546, 546,
	546, 546, 546, 0, 0, 0, 0, 0, 0, 546,
	546, 367, 2016, 2017, 0, 2020, 2021, 2022, 593, 592,
	602, 603, 595, 596, 597, 598, 599, 600, 601, 594,
	2037, 0, 604, 2040, 0, 0, 0, 0, 2042, 2044,
	1418, 2035, 2043, 1192, 2051, 2039, 0, 0, 2050, 0,
	287, 1804, 2058, 2056, 2059, 0, 2055, 1200, 0, 1203,
	1204, 2034, 367, 2036, 2062, 0, 0, 1206, 1207, 1208,
	0, 1813, 0, 0, 96, 983, 0, 0, 1492, 1270,
	47, 983, 287, 1813, 1813, 1813, 0, 2069, 0, 0,
	0, 1991, 0, 0, 0, 0, 0, 0, 640, 2077,
	0, 1895, 2077, 0, 96, 0, 2064, 1234, 0, 0,
	367, 0, 1240, 0, 1518, 1241, 1242, 2088, 1243, 1244,
	0, 0, 2070, 0, 2090, 1760, 2071, 0, 0, 0,
	0, 0, 1813, 0, 1813, 1813, 0, 0, 0, 1762,
	0, 2105, 1328, 0, 287, 2106, 0, 0, 353, 353,
	353, 353, 353, 0, 0, 0, 0, 2077, 0, 0,
	0, 0, 0, 705, 0, 1023, 271, 0, 48, 26,
	27, 0, 353, 271, 0, 48, 26, 27, 563, 567,
	1814, 0, 2100, 0, 0, 662, 1813, 1814, 0, 1578,
	1813, 28, 0, 0, 0, 585, 0, 0, 28, 0,
	0, 0, 0, 1593, 0, 0, 1597, 0, 0, 1599,
	2092, 0, 0, 1761, 0, 0, 2107, 0, 605, 1601,
	664, 0, 0, 0, 0, 0, 0, 0, 1579, 0,
	0, 0, 0, 639, 0, 0, 0, 1604, 1590, 0,
	0, 0, 650, 0, 0, 2110, 367, 1763, 1764, 1765,
	1766, 1767, 1768, 1769, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 0, 0, 0, 0, 0, 0, 1602,
	546, 0, 546, 0, 0, 605, 0, 0, 0, 0,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	546, 0, 0, 0, 0, 1820, 0, 94, 0, 0,
	257, 665, 1820, 0, 0, 1819, 0, 0, 0, 680,
	663, 0, 1819, 0, 0, 669, 668, 0, 0, 0,
	0, 0, 281, 1434, 94, 94, 0, 0, 1643, 0,
	0, 1643, 1643, 1643, 0, 1657, 0, 0, 94, 1183,
	0, 0, 367, 0, 367, 0, 0, 94, 1385, 94,
	1815, 1816, 1818, 0, 0, 94, 1817, 1815, 1816, 1818,
	0, 0, 0, 1817, 0, 0, 0, 0, 1643, 0,
	0, 0, 0, 1328, 0, 1688, 0, 0, 23, 24,
	48, 26, 27, 367, 0, 271, 0, 48, 26, 27,
	0, 1505, 0, 0, 681, 0, 0, 1857, 42, 1814,
	0, 1578, 1705, 28, 0, 0, 0, 0, 0, 1643,
	28, 0, 0, 367, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 1723, 37, 1386, 1382, 1377, 50, 1387,
	1384, 1383, 0, 0, 1727, 1381, 0, 0, 0, 0,
	0, 1706, 0, 0, 0, 0, 1388, 0, 0, 0,
	0, 0, 0, 1380, 0, 0, 1249, 1250, 0, 0,
	0, 0, 0, 0, 2079, 0, 0, 1746, 1747, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 0, 353, 0, 0, 0, 0, 871,
	872, 0, 0, 1518, 30, 31, 33, 32, 35, 0,
	94, 0, 0, 0, 0, 1779, 0, 0, 0, 271,
	0, 48, 26, 27, 1820, 0, 0, 0, 0, 0,
	36, 43, 44, 1814, 1819, 45, 46, 34, 0, 0,
	0, 0, 0, 0, 28, 0, 0, 1578, 0, 0,
	0, 0, 1801, 0, 0, 1611, 940, 0, 0, 0,
	0, 1822, 639, 0, 1643, 948, 979, 0, 0, 0,
	1618, 0, 271, 0, 48, 26, 27, 0, 0, 1815,
	1816, 1818, 0, 0, 0, 1817, 1814, 1851, 38, 39,
	0, 40, 41, 0, 0, 0, 0, 28, 2076, 1619,
	1620, 0, 0, 1621, 1622, 0, 0, 1625, 0, 0,
	0, 0, 1086, 1087, 0, 1091, 0, 0, 1093, 94,
	0, 1635, 1636, 1637, 0, 1640, 94, 710, 94, 0,
	546, 0, 0, 1578, 1518, 1103, 1104, 1105, 1106, 1107,
	0, 0, 0, 0, 0, 0, 0, 1037, 1820, 0,
	0, 0, 0, 1898, 1900, 1901, 1902, 0, 1819, 0,
	0, 1914, 1822, 1822, 1914, 1822, 1822, 1518, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1693, 0, 0, 0, 0, 0, 983, 0, 0, 1939,
	0, 0, 0, 0, 1940, 49, 0, 0, 1943, 0,
	0, 1820, 49, 1815, 1816, 1818, 0, 0, 0, 1817,
	0, 1819, 1801, 1518, 0, 1489, 0, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1643, 0, 0,
	0, 1983, 0, 0, 1502, 1503, 1504, 741, 0, 0,
	0, 271, 1993, 48, 26, 27, 0, 0, 0, 1730,
	0, 0, 0, 1914, 0, 1814, 1815, 1816, 1818, 0,
	0, 1739, 1817, 0, 2007, 0, 28, 0, 0, 0,
	0, 0, 1999, 1538, 0, 0, 1168, 1169, 0, 567,
	0, 0, 0, 0, 0, 1752, 1753, 1754, 0, 0,
	1548, 0, 0, 94, 0, 0, 634, 0, 94, 0,
	0, 94, 0, 0, 94, 0, 0, 0, 836, 0,
	0, 0, 0, 1783, 0, 0, 1212, 1214, 0, 1215,
	0, 0, 0, 1217, 0, 1219, 49, 0, 2045, 94,
	0, 47, 0, 47, 0, 0, 0, 1222, 1223, 0,
	0, 1224, 0, 1225, 1226, 0, 0, 1518, 94, 0,
	0, 0, 2061, 0, 0, 0, 0, 836, 0, 0,
	0, 0, 0, 1836, 1838, 1205, 1840, 1841, 1842, 1843,
	1820, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	1819, 0, 0, 0, 741, 0, 2075, 0, 353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	662, 0, 0, 0, 0, 1617, 0, 281, 0, 0,
	0, 1239, 0, 1875, 281, 281, 0, 0, 0, 984,
	281, 0, 0, 0, 984, 1815, 1816, 1818, 367, 0,
	0, 1817, 0, 0, 0, 664, 0, 0, 1801, 0,
	2087, 1987, 0, 0, 0, 0, 1628, 0, 0, 0,
	0, 0, 0, 0, 1338, 281, 281, 281, 281, 0,
	94, 0, 984, 94, 94, 94, 94, 94, 0, 1929,
	0, 0, 0, 0, 0, 1017, 1933, 0, 94, 0,
	0, 1938, 710, 0, 0, 0, 0, 94, 94, 0,
	0, 0, 0, 1678, 0, 670, 671, 672, 673, 674,
	675, 676, 677, 678, 679, 0, 914, 915, 1959, 916,
	917, 918, 920, 919, 0, 911, 665, 0, 0, 0,
	0, 0, 0, 0, 680, 663, 0, 0, 0, 0,
	669, 668, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 634, 0, 49, 0,
	47, 0, 0, 0, 0, 2005, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 94,
	0, 0, 94, 0, 0, 0, 0, 0, 94, 0,
	94, 0, 0, 0, 0, 0, 94, 0, 0, 94,
	0, 94, 1489, 0, 94, 1745, 0, 0, 0, 681,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 1468, 0, 1439, 0, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 1782, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1481, 0, 0, 0, 0, 1183, 0, 0, 0, 0,
	1441, 0, 0, 0, 0, 1496, 1497, 0, 0, 1498,
	0, 0, 1500, 0, 0, 0, 0, 0, 0, 0,
	1549, 1551, 0, 2086, 1831, 0, 0, 0, 0, 0,
	0, 1512, 0, 0, 0, 0, 0, 0, 0, 281,
	0, 1489, 0, 47, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 1456, 1454, 0, 0, 1451, 0, 0, 1449, 2111,
	2112, 1458, 0, 0, 1457, 1443, 1453, 1455, 1452, 1447,
	0, 1442, 0, 1460, 1459, 1461, 1440, 1463, 0, 281,
	0, 1466, 1445, 1465, 1464, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 1448, 0, 0, 94,
	0, 0, 0, 0, 0, 1212, 1214, 0, 1215, 0,
	0, 1217, 0, 1219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1222, 1223, 0, 0, 1224,
	0, 1225, 1226, 0, 0, 1608, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	1329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1665, 1668, 0, 0, 0, 94,
	0, 0, 0, 94, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 1631, 0, 0, 0, 2013, 0,
	0, 639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1414, 1415,
	0, 0, 0, 0, 1665, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 0, 0, 0,
	1681, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 984,
	0, 0, 0, 0, 0, 984, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1781, 0, 0, 0, 0, 1785, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1329, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1876, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1910, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1927, 639, 0, 0,
	0, 1932, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 710, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1984, 0, 1329, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1329, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1932, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2072, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 488, 477,
	0, 436, 490, 406, 424, 498, 426, 427, 463, 385,
	446, 163, 421, 403, 100, 409, 378, 416, 379, 407,
	438, 124, 404, 0, 479, 449, 138, 233, 234, 496,
	141, 454, 0, 187, 151, 0, 0, 441, 481, 444,
	472, 435, 464, 393, 453, 491, 422, 459, 492, 0,
	0, 0, 372, 0, 1661, 0, 1662, 1329, 0, 0,
	0, 0, 113, 0, 458, 486, 418, 501, 0, 462,
	377, 456, 0, 383, 386, 497, 484, 413, 414, 0,
	0, 0, 0, 0, 0, 0, 440, 445, 469, 432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 410, 0, 452, 0, 0, 0, 390, 384,
	984, 437, 0, 0, 0, 392, 0, 411, 470, 0,
	374, 475, 482, 434, 147, 214, 485, 431, 430, 170,
	0, 116, 0, 193, 128, 423, 139, 467, 499, 489,
	442, 480, 408, 417, 118, 415, 177, 164, 205, 451,
	465, 175, 142, 197, 171, 204, 487, 215, 216, 195,
	213, 180, 108, 158, 98, 169, 176, 0, 117, 0,
	226, 227, 228, 229, 230, 231, 232, 382, 375, 412,
	473, 476, 397, 461, 387, 419, 468, 420, 443, 402,
	0, 0, 0, 0, 0, 0, 0, 186, 185, 101,
	194, 203, 114, 181, 104, 201, 190, 192, 149, 134,
	135, 183, 102, 103, 0, 174, 123, 168, 127, 122,
	161, 191, 152, 198, 199, 119, 223, 121, 120, 189,
	109, 211, 212, 106, 110, 210, 157, 162, 160, 209,
	196, 202, 150, 146, 0, 105, 200, 148, 145, 137,
	0, 125, 129, 166, 144, 167, 130, 154, 153, 155,
	0, 0, 159, 131, 0, 0, 0, 380, 0, 188,
	207, 224, 225, 381, 401, 483, 217, 218, 219, 220,
	0, 0, 0, 156, 111, 132, 182, 136, 143, 173,
	222, 460, 178, 115, 206, 184, 2068, 396, 400, 394,
	395, 447, 448, 493, 494, 495, 471, 391, 0, 398,
	399, 0, 478, 133, 235, 236, 450, 99, 107, 140,
	500, 221, 0, 172, 126, 208, 94, 0, 425, 376,
	429, 0, 0, 0, 0, 0, 0, 0, 388, 389,
	179, 0, 433, 428, 455, 457, 466, 474, 0, 405,
	439, 0, 112, 488, 477, 0, 436, 490, 406, 424,
	498, 426, 427, 463, 385, 446, 163, 421, 403, 100,
	409, 378, 416, 379, 407, 438, 124, 404, 0, 479,
	449, 138, 233, 234, 496, 141, 454, 0, 187, 151,
	0, 0, 441, 481, 444, 472, 435, 464, 393, 453,
	491, 422, 459, 492, 0, 0, 0, 286, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 458,
	486, 418, 501, 0, 462, 377, 456, 0, 383, 386,
	497, 484, 413, 414, 0, 0, 0, 0, 0, 0,
	0, 440, 445, 469, 432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 879, 0, 410, 0, 452,
	0, 0, 0, 390, 384, 0, 437, 0, 0, 0,
	392, 0, 411, 470, 0, 374, 475, 482, 434, 147,
	214, 485, 431, 430, 170, 0, 116, 0, 193, 128,
	423, 139, 467, 499, 489, 442, 480, 408, 417, 118,
	415, 177, 164, 205, 451, 465, 175, 142, 197, 171,
	204, 487, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 382, 375, 412, 473, 476, 397, 461, 387,
	419, 468, 420, 443, 402, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 380, 0, 188, 207, 224, 225, 381, 401,
	483, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 460, 178, 115, 206,
	184, 0, 396, 400, 394, 395, 447, 448, 493, 494,
	495, 471, 391, 0, 398, 399, 0, 478, 133, 235,
	236, 450, 99, 107, 140, 500, 221, 0, 172, 126,
	208, 0, 0, 425, 376, 429, 0, 0, 0, 0,
	0, 0, 0, 388, 389, 179, 0, 433, 428, 455,
	457, 466, 474, 0, 405, 439, 0, 112, 488, 477,
	0, 436, 490, 406, 424, 498, 426, 427, 463, 385,
	446, 163, 421, 403, 100, 409, 378, 416, 379, 407,
	438, 124, 404, 0, 479, 449, 138, 233, 234, 496,
	141, 454, 0, 187, 151, 0, 0, 441, 481, 444,
	472, 435, 464, 393, 453, 491, 422, 459, 492, 0,
	0, 0, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 458, 486, 418, 501, 0, 462,
	377, 456, 0, 383, 386, 497, 484, 413, 414, 1513,
	0, 0, 0, 0, 0, 0, 440, 445, 469, 432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 410, 0, 452, 0, 0, 0, 390, 384,
	0, 437, 0, 0, 0, 392, 0, 411, 470, 0,
	374, 475, 482, 434, 147, 214, 485, 431, 430, 170,
	0, 116, 0, 193, 128, 423, 139, 467, 499, 489,
	442, 480, 408, 417, 118, 415, 177, 164, 205, 451,
	465, 175, 142, 197, 171, 204, 487, 215, 216, 195,
	213, 180, 108, 158, 98, 169, 176, 0, 117, 0,
	226, 227, 228, 229, 230, 231, 232, 382, 375, 412,
	473, 476, 397, 461, 387, 419, 468, 420, 443, 402,
	0, 0, 0, 0, 0, 0, 0, 186, 185, 101,
	194, 203, 114, 181, 104, 201, 190, 192, 149, 134,
	135, 183, 102, 103, 0, 174, 123, 168, 127, 122,
	161, 191, 152, 198, 199, 119, 223, 121, 120, 189,
	109, 211, 212, 106, 110, 210, 157, 162, 160, 209,
	196, 202, 150, 146, 0, 105, 200, 148, 145, 137,
	0, 125, 129, 166, 144, 167, 130, 154, 153, 155,
	0, 0, 159, 131, 0, 0, 0, 380, 0, 188,
	207, 224, 225, 381, 401, 483, 217, 218, 219, 220,
	0, 0, 0, 156, 111, 132, 182, 136, 143, 173,
	222, 460, 178, 115, 206, 184, 0, 396, 400, 394,
	395, 447, 448, 493, 494, 495, 471, 391, 0, 398,
	399, 0, 478, 133, 235, 236, 450, 99, 107, 140,
	500, 221, 0, 172, 126, 208, 0, 0, 425, 376,
	429, 0, 0, 0, 0, 0, 0, 0, 388, 389,
	179, 0, 433, 428, 455, 457, 466, 474, 0, 405,
	439, 0, 112, 488, 477, 0, 436, 490, 406, 424,
	498, 426, 427, 463, 385, 446, 163, 421, 403, 100,
	409, 378, 416, 379, 407, 438, 124, 404, 0, 479,
	449, 138, 233, 234, 496, 141, 454, 0, 187, 151,
	0, 0, 441, 481, 444, 472, 435, 464, 393, 453,
	491, 422, 459, 492, 0, 0, 0, 286, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 458,
	486, 418, 501, 0, 462, 377, 456, 0, 383, 386,
	497, 484, 413, 414, 0, 0, 0, 0, 0, 0,
	0, 440, 445, 469, 432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 410, 0, 452,
	0, 0, 0, 390, 384, 0, 437, 0, 0, 0,
	392, 0, 411, 470, 0, 374, 475, 482, 434, 147,
	214, 485, 431, 430, 170, 0, 116, 0, 193, 128,
	423, 139, 467, 499, 489, 442, 480, 408, 417, 118,
	415, 177, 164, 205, 451, 465, 175, 142, 197, 171,
	204, 487, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 382, 375, 412, 473, 476, 397, 461, 387,
	419, 468, 420, 443, 402, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 380, 0, 188, 207, 224, 225, 381, 401,
	483, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 460, 178, 115, 206,
	184, 0, 396, 400, 394, 395, 447, 448, 493, 494,
	495, 471, 391, 0, 398, 399, 0, 478, 133, 235,
	236, 450, 99, 107, 140, 500, 221, 0, 172, 126,
	208, 0, 0, 425, 376, 429, 0, 0, 0, 0,
	0, 0, 0, 388, 389, 179, 0, 433, 428, 455,
	457, 466, 474, 0, 405, 439, 0, 112, 488, 477,
	0, 436, 490, 406, 424, 498, 426, 427, 463, 385,
	446, 163, 421, 403, 100, 409, 378, 416, 379, 407,
	438, 124, 404, 0, 479, 449, 138, 233, 234, 496,
	141, 454, 0, 187, 151, 0, 0, 441, 481, 444,
	472, 435, 464, 393, 453, 491, 422, 459, 492, 0,
	0, 0, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 458, 486, 418, 501, 0, 462,
	377, 456, 0, 383, 386, 497, 484, 413, 414, 0,
	0, 0, 0, 0, 0, 0, 440, 445, 469, 432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 0, 410, 0, 452, 0, 0, 0, 390, 384,
	0, 437, 0, 0, 0, 392, 0, 411, 470, 0,
	374, 475, 482, 434, 147, 214, 485, 431, 430, 170,
	0, 116, 0, 193, 128, 423, 139, 467, 499, 489,
	442, 480, 408, 417, 118, 415, 177, 164, 205, 451,
	465, 175, 142, 197, 171, 204, 487, 215, 216, 195,
	213, 180, 108, 158, 98, 169, 176, 0, 117, 0,
	226, 227, 228, 229, 230, 231, 232, 382, 375, 412,
	473, 476, 397, 461, 387, 419, 468, 420, 443, 402,
	0, 0, 0, 0, 0, 0, 0, 186, 185, 101,
	194, 203, 114, 181, 104, 201, 190, 192, 149, 134,
	135, 183, 102, 103, 0, 174, 123, 168, 127, 122,
	161, 191, 152, 198, 199, 119, 223, 121, 120, 189,
	109, 211, 212, 106, 110, 210, 157, 162, 160, 209,
	196, 202, 150, 146, 0, 105, 200, 148, 145, 137,
	0, 125, 129, 166, 144, 167, 130, 154, 153, 155,
	0, 0, 159, 131, 0, 0, 0, 380, 0, 188,
	207, 224, 225, 381, 401, 483, 217, 218, 219, 220,
	0, 0, 0, 156, 111, 132, 182, 136, 143, 173,
	222, 460, 178, 115, 206, 184, 0, 396, 400, 394,
	395, 447, 448, 493, 494, 495, 471, 391, 0, 398,
	399, 0, 478, 133, 235, 236, 450, 99, 107, 140,
	500, 221, 0, 172, 126, 208, 0, 0, 425, 376,
	429, 0, 0, 0, 0, 0, 0, 0, 388, 389,
	179, 0, 433, 428, 455, 457, 466, 474, 0, 405,
	439, 0, 112, 488, 477, 0, 436, 490, 406, 424,
	498, 426, 427, 463, 385, 446, 163, 421, 403, 100,
	409, 378, 416, 379, 407, 438, 124, 404, 0, 479,
	449, 138, 233, 234, 496, 141, 454, 0, 187, 151,
	0, 0, 441, 481, 444, 472, 435, 464, 393, 453,
	491, 422, 459, 492, 50, 0, 0, 372, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 458,
	486, 418, 501, 0, 462, 377, 456, 0, 383, 386,
	497, 484, 413, 414, 0, 0, 0, 0, 0, 0,
	0, 440, 445, 469, 432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 410, 0, 452,
	0, 0, 0, 390, 384, 0, 437, 0, 0, 0,
	392, 0, 411, 470, 0, 374, 475, 482, 434, 147,
	214, 485, 431, 430, 170, 0, 116, 0, 193, 128,
	423, 139, 467, 499, 489, 442, 480, 408, 417, 118,
	415, 177, 164, 205, 451, 465, 175, 142, 197, 171,
	204, 487, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 382, 375, 412, 473, 476, 397, 461, 387,
	419, 468, 420, 443, 402, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 380, 0, 188, 207, 224, 225, 381, 401,
	483, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 460, 178, 115, 206,
	184, 0, 396, 400, 394, 395, 447, 448, 493, 494,
	495, 471, 391, 0, 398, 399, 0, 478, 133, 235,
	236, 450, 99, 107, 140, 500, 221, 0, 172, 126,
	208, 0, 0, 425, 376, 429, 0, 0, 0, 0,
	0, 0, 0, 388, 389, 179, 0, 433, 428, 455,
	457, 466, 474, 0, 405, 439, 0, 112, 488, 477,
	0, 436, 490, 406, 424, 498, 426, 427, 463, 385,
	446, 163, 421, 403, 100, 409, 378, 416, 379, 407,
	438, 124, 404, 0, 479, 449, 138, 233, 234, 496,
	141, 454, 0, 187, 151, 0, 0, 441, 481, 444,
	472, 435, 464, 393, 453, 491, 422, 459, 492, 0,
	0, 0, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 458, 486, 418, 501, 0, 462,
	377, 456, 0, 383, 386, 497, 484, 413, 414, 0,
	0, 0, 0, 0, 0, 0, 440, 445, 469, 432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 410, 0, 452, 0, 0, 0, 390, 384,
	0, 437, 0, 0, 0, 392, 0, 411, 470, 0,
	374, 475, 482, 434, 147, 214, 485, 431, 430, 170,
	0, 116, 0, 193, 128, 423, 139, 467, 499, 489,
	442, 480, 408, 417, 118, 415, 177, 164, 205, 451,
	465, 175, 142, 197, 171, 204, 487, 215, 216, 195,
	213, 180, 108, 158, 98, 169, 176, 0, 117, 0,
	226, 227, 228, 229, 230, 231, 232, 382, 375, 412,
	473, 476, 397, 461, 387, 419, 468, 420, 443, 402,
	0, 0, 0, 0, 0, 0, 0, 186, 185, 101,
	194, 203, 114, 181, 104, 201, 190, 192, 149, 134,
	135, 183, 102, 103, 0, 174, 123, 168, 127, 122,
	161, 191, 152, 198, 199, 119, 223, 121, 120, 189,
	109, 211, 212, 106, 370, 210, 157, 162, 160, 209,
	196, 202, 150, 146, 0, 105, 200, 148, 145, 137,
	0, 125, 129, 166, 144, 167, 130, 154, 153, 155,
	0, 0, 159, 131, 0, 0, 0, 380, 0, 188,
	207, 224, 225, 381, 401, 483, 217, 218, 219, 220,
	0, 0, 0, 371, 369, 132, 182, 136, 143, 173,
	222, 460, 178, 115, 206, 184, 365, 396, 400, 394,
	395, 447, 448, 493, 494, 495, 471, 391, 0, 398,
	399, 0, 478, 133, 235, 236, 450, 99, 107, 140,
	500, 221, 0, 172, 126, 208, 0, 0, 425, 376,
	429, 0, 0, 0, 0, 0, 0, 0, 388, 389,
	179, 0, 433, 428, 455, 457, 466, 474, 0, 405,
	439, 0, 112, 488, 477, 0, 436, 490, 406, 424,
	498, 426, 427, 463, 385, 446, 163, 421, 403, 100,
	409, 378, 416, 379, 407, 438, 124, 404, 0, 479,
	449, 138, 233, 234, 496, 141, 454, 0, 187, 151,
	0, 0, 441, 481, 444, 472, 435, 464, 393, 453,
	491, 422, 459, 492, 0, 0, 0, 95, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 458,
	486, 418, 501, 0, 462, 377, 456, 0, 383, 386,
	497, 484, 413, 414, 0, 0, 0, 0, 0, 0,
	0, 440, 445, 469, 432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 410, 0, 452,
	0, 0, 0, 390, 384, 0, 437, 0, 0, 0,
	392, 0, 411, 470, 0, 374, 475, 482, 434, 147,
	214, 485, 431, 430, 170, 0, 116, 0, 193, 128,
	423, 139, 467, 499, 489, 442, 480, 408, 417, 118,
	415, 177, 164, 205, 451, 465, 175, 142, 197, 171,
	204, 487, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 382, 375, 412, 473, 476, 397, 461, 387,
	419, 468, 420, 443, 402, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 380, 0, 188, 207, 224, 225, 381, 401,
	483, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 460, 178, 115, 206,
	184, 0, 396, 400, 394, 395, 447, 448, 493, 494,
	495, 471, 391, 0, 398, 399, 0, 478, 133, 235,
	236, 450, 99, 107, 140, 500, 221, 0, 172, 126,
	208, 0, 0, 425, 376, 429, 0, 0, 0, 0,
	0, 0, 0, 388, 389, 179, 0, 433, 428, 455,
	457, 466, 474, 0, 405, 439, 0, 112, 488, 477,
	0, 436, 490, 406, 424, 498, 426, 427, 463, 385,
	446, 163, 421, 403, 100, 409, 378, 416, 379, 407,
	438, 124, 404, 0, 479, 449, 138, 233, 234, 496,
	141, 454, 0, 187, 151, 0, 0, 441, 481, 444,
	472, 435, 464, 393, 453, 491, 422, 459, 492, 0,
	0, 0, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 458, 486, 418, 501, 0, 462,
	377, 456, 0, 383, 386, 497, 484, 413, 414, 0,
	0, 0, 0, 0, 0, 0, 440, 445, 469, 432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 410, 0, 452, 0, 0, 0, 390, 384,
	0, 437, 0, 0, 0, 392, 0, 411, 470, 0,
	374, 475, 482, 434, 147, 214, 485, 431, 430, 170,
	0, 116, 0, 193, 128, 423, 139, 467, 499, 489,
	442, 480, 408, 417, 118, 415, 177, 164, 205, 451,
	465, 175, 142, 197, 171, 204, 487, 215, 216, 195,
	213, 180, 108, 158, 98, 169, 176, 0, 117, 0,
	226, 227, 228, 229, 230, 231, 232, 382, 375, 412,
	473, 476, 397, 461, 387, 419, 468, 420, 443, 402,
	0, 0, 0, 0, 0, 0, 0, 186, 185, 101,
	194, 720, 114, 181, 104, 201, 190, 192, 149, 134,
	135, 183, 102, 103, 0, 174, 123, 168, 127, 122,
	161, 191, 152, 198, 199, 119, 223, 121, 120, 189,
	109, 211, 212, 106, 370, 210, 157, 162, 160, 209,
	196, 202, 150, 146, 0, 105, 200, 148, 145, 137,
	0, 125, 129, 166, 144, 167, 130, 154, 153, 155,
	0, 0, 159, 131, 0, 0, 0, 380, 0, 188,
	207, 224, 225, 381, 401, 483, 217, 218, 219, 220,
	0, 0, 0, 371, 369, 132, 182, 136, 143, 173,
	222, 460, 178, 115, 206, 184, 365, 396, 400, 394,
	395, 447, 448, 493, 494, 495, 471, 391, 0, 398,
	399, 0, 478, 133, 235, 236, 450, 99, 107, 140,
	500, 221, 0, 172, 126, 208, 0, 0, 425, 376,
	429, 0, 0, 0, 0, 0, 0, 0, 388, 389,
	179, 0, 433, 428, 455, 457, 466, 474, 0, 405,
	439, 0, 112, 488, 477, 0, 436, 490, 406, 424,
	498, 426, 427, 463, 385, 446, 163, 421, 403, 100,
	409, 378, 416, 379, 407, 438, 124, 404, 0, 479,
	449, 138, 233, 234, 496, 141, 454, 0, 187, 151,
	0, 0, 441, 481, 444, 472, 435, 464, 393, 453,
	491, 422, 459, 492, 0, 0, 0, 372, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 458,
	486, 418, 501, 0, 462, 377, 456, 0, 383, 386,
	497, 484, 413, 414, 0, 0, 0, 0, 0, 0,
	0, 440, 445, 469, 432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 410, 0, 452,
	0, 0, 0, 390, 384, 0, 437, 0, 0, 0,
	392, 0, 411, 470, 0, 374, 475, 482, 434, 147,
	214, 485, 431, 430, 170, 0, 116, 0, 193, 128,
	423, 139, 467, 499, 489, 442, 480, 408, 417, 118,
	415, 177, 164, 205, 451, 465, 175, 142, 197, 171,
	204, 487, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 382, 375, 412, 473, 476, 397, 461, 387,
	419, 468, 420, 443, 402, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 360, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 370,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 380, 0, 188, 207, 224, 225, 381, 401,
	483, 217, 218, 219, 220, 0, 0, 0, 371, 369,
	363, 362, 136, 143, 173, 222, 460, 178, 115, 206,
	184, 365, 396, 400, 394, 395, 447, 448, 493, 494,
	495, 471, 391, 0, 398, 399, 0, 478, 133, 235,
	236, 450, 99, 107, 140, 500, 221, 0, 172, 126,
	208, 0, 0, 425, 376, 429, 0, 0, 0, 0,
	0, 0, 0, 388, 389, 179, 0, 433, 428, 455,
	457, 466, 474, 0, 405, 439, 0, 112, 488, 477,
	0, 436, 490, 406, 424, 498, 426, 427, 463, 385,
	446, 163, 421, 403, 100, 409, 378, 416, 379, 407,
	438, 124, 404, 0, 479, 449, 138, 233, 234, 496,
	141, 454, 0, 187, 151, 0, 0, 441, 481, 444,
	472, 435, 464, 393, 453, 491, 422, 459, 492, 0,
	0, 0, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 458, 486, 418, 501, 0, 462,
	377, 456, 0, 383, 386, 497, 484, 413, 414, 0,
	0, 0, 0, 0, 0, 0, 440, 445, 469, 432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 410, 0, 452, 0, 0, 0, 390, 384,
	0, 437, 0, 0, 0, 392, 0, 411, 470, 0,
	374, 475, 482, 434, 147, 214, 485, 431, 430, 170,
	0, 116, 0, 193, 128, 423, 139, 467, 499, 489,
	442, 480, 408, 417, 118, 415, 177, 164, 205, 451,
	465, 175, 142, 197, 171, 204, 487, 215, 216, 195,
	213, 180, 108, 158, 98, 169, 176, 0, 117, 0,
	226, 227, 228, 229, 230, 231, 232, 382, 375, 412,
	473, 476, 397, 461, 387, 419, 468, 420, 443, 402,
	0, 0, 0, 0, 0, 0, 0, 186, 185, 101,
	194, 203, 114, 181, 104, 201, 190, 192, 149, 134,
	135, 183, 102, 103, 0, 174, 123, 168, 127, 122,
	161, 191, 152, 198, 199, 119, 223, 121, 120, 189,
	109, 211, 212, 106, 110, 210, 157, 162, 160, 209,
	196, 202, 150, 146, 0, 105, 200, 148, 145, 137,
	0, 125, 129, 166, 144, 167, 130, 154, 153, 155,
	0, 0, 159, 131, 0, 0, 0, 380, 0, 188,
	207, 224, 225, 381, 401, 483, 217, 218, 219, 220,
	0, 0, 0, 156, 111, 132, 182, 136, 143, 173,
	222, 460, 178, 115, 206, 184, 0, 396, 400, 394,
	395, 447, 448, 493, 494, 495, 471, 391, 0, 398,
	399, 0, 478, 133, 235, 236, 450, 99, 107, 140,
	500, 221, 0, 172, 126, 208, 0, 0, 425, 376,
	429, 0, 0, 0, 0, 0, 0, 0, 388, 389,
	179, 0, 433, 428, 455, 457, 466, 474, 163, 405,
	439, 100, 112, 0, 289, 0, 0, 0, 124, 285,
	0, 0, 0, 138, 233, 234, 331, 141, 0, 0,
	187, 151, 0, 0, 0, 0, 322, 323, 0, 0,
	0, 0, 0, 0, 1035, 0, 50, 0, 0, 286,
	310, 288, 308, 312, 313, 314, 315, 0, 0, 113,
	311, 316, 317, 318, 1036, 0, 0, 0, 283, 301,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 299, 0, 0, 0,
	0, 343, 0, 300, 0, 0, 296, 297, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 341, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 177, 164, 205, 0, 165, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 345, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 319, 332, 342, 338, 339, 336, 337,
	335, 334, 333, 344, 324, 325, 326, 327, 329, 0,
	133, 235, 236, 328, 99, 107, 140, 0, 221, 0,
	172, 126, 208, 163, 0, 0, 100, 936, 0, 289,
	0, 0, 0, 124, 285, 0, 0, 179, 138, 233,
	234, 331, 141, 0, 0, 187, 151, 0, 340, 112,
	0, 322, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 286, 310, 288, 308, 312, 313,
	314, 315, 0, 0, 113, 311, 316, 317, 318, 0,
	0, 0, 0, 283, 301, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 299, 279, 0, 0, 0, 343, 0, 300, 0,
	0, 296, 297, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 214, 0, 0,
	341, 170, 0, 116, 0, 193, 128, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 177, 164,
	205, 0, 165, 175, 142, 197, 171, 204, 0, 215,
	216, 195, 213, 180, 108, 158, 98, 169, 176, 0,
	117, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	185, 101, 194, 203, 114, 181, 104, 201, 190, 192,
	149, 134, 135, 183, 102, 103, 0, 174, 123, 168,
	127, 122, 161, 191, 152, 198, 199, 119, 223, 121,
	120, 189, 109, 211, 212, 106, 110, 210, 157, 162,
	160, 209, 196, 202, 150, 146, 0, 105, 200, 148,
	145, 137, 0, 125, 129, 166, 144, 167, 130, 154,
	153, 155, 345, 0, 159, 131, 0, 0, 0, 0,
	0, 188, 207, 224, 225, 0, 0, 0, 217, 218,
	219, 220, 0, 0, 0, 156, 111, 132, 182, 136,
	143, 173, 222, 0, 178, 115, 206, 184, 319, 332,
	342, 338, 339, 336, 337, 335, 334, 333, 344, 324,
	325, 326, 327, 329, 0, 133, 235, 236, 328, 99,
	107, 140, 0, 221, 0, 172, 126, 208, 163, 0,
	0, 100, 0, 0, 289, 0, 0, 0, 124, 285,
	0, 0, 179, 138, 233, 234, 331, 141, 0, 0,
	187, 151, 0, 340, 112, 0, 322, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 559, 286,
	310, 288, 308, 312, 313, 314, 315, 0, 0, 113,
	311, 316, 317, 318, 0, 0, 0, 0, 283, 301,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 299, 0, 0, 0,
	0, 343, 0, 300, 0, 0, 296, 297, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 341, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 177, 164, 205, 0, 165, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 345, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 319, 332, 342, 338, 339, 336, 337,
	335, 334, 333, 344, 324, 325, 326, 327, 329, 0,
	133, 235, 236, 328, 99, 107, 140, 0, 221, 0,
	172, 126, 208, 163, 0, 0, 100, 0, 0, 289,
	0, 0, 0, 124, 285, 0, 0, 179, 138, 233,
	234, 331, 141, 0, 0, 187, 151, 0, 340, 112,
	0, 322, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 286, 310, 288, 308, 312, 313,
	314, 315, 0, 0, 113, 311, 316, 317, 318, 0,
	0, 0, 0, 283, 301, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 299, 279, 0, 0, 0, 343, 0, 300, 0,
	0, 296, 297, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 214, 0, 0,
	341, 170, 0, 116, 0, 193, 128, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 177, 164,
	205, 0, 165, 175, 142, 197, 171, 204, 0, 215,
	216, 195, 213, 180, 108, 158, 98, 169, 176, 0,
	117, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	185, 101, 194, 203, 114, 181, 104, 201, 190, 192,
	149, 134, 135, 183, 102, 103, 0, 174, 123, 168,
	127, 122, 161, 191, 152, 198, 199, 119, 223, 121,
	120, 189, 109, 211, 212, 106, 110, 210, 157, 162,
	160, 209, 196, 202, 150, 146, 0, 105, 200, 148,
	145, 137, 0, 125, 129, 166, 144, 167, 130, 154,
	153, 155, 345, 0, 159, 131, 0, 0, 0, 0,
	0, 188, 207, 224, 225, 0, 0, 0, 217, 218,
	219, 220, 0, 0, 0, 156, 111, 132, 182, 136,
	143, 173, 222, 0, 178, 115, 206, 184, 319, 332,
	342, 338, 339, 336, 337, 335, 334, 333, 344, 324,
	325, 326, 327, 329, 0, 133, 235, 236, 328, 99,
	107, 140, 0, 221, 0, 172, 126, 208, 163, 0,
	0, 100, 0, 0, 289, 0, 0, 0, 124, 285,
	0, 0, 179, 138, 233, 234, 331, 141, 0, 0,
	187, 151, 0, 340, 112, 0, 322, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 286,
	310, 288, 308, 312, 313, 314, 315, 0, 0, 113,
	311, 316, 317, 318, 0, 0, 0, 0, 283, 301,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 299, 0, 0, 0,
	0, 343, 0, 300, 0, 0, 950, 297, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 341, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 952, 0, 177, 164, 205, 0, 165, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 962, 968, 966, 192, 149, 963, 135, 183, 961,
	103, 0, 970, 123, 168, 969, 954, 965, 967, 964,
	959, 199, 953, 223, 972, 971, 973, 951, 975, 212,
	106, 110, 978, 957, 977, 976, 209, 974, 202, 150,
	146, 0, 105, 200, 148, 145, 955, 956, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 345, 0, 159,
	131, 0, 0, 0, 0, 0, 958, 960, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 319, 332, 342, 338, 339, 336, 337,
	335, 334, 333, 344, 324, 325, 326, 327, 329, 0,
	133, 235, 236, 328, 99, 107, 140, 0, 221, 0,
	172, 126, 208, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 163, 0, 179, 100, 0,
	0, 289, 0, 0, 0, 124, 285, 0, 340, 112,
	138, 233, 234, 331, 141, 0, 0, 187, 151, 0,
	0, 0, 0, 322, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 286, 310, 288, 308,
	312, 313, 314, 315, 0, 0, 113, 311, 316, 317,
	318, 0, 0, 0, 0, 283, 301, 0, 330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 299, 0, 0, 0, 0, 343, 0,
	300, 0, 0, 296, 297, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 341, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 345, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	319, 332, 342, 338, 339, 336, 337, 335, 334, 333,
	344, 324, 325, 326, 327, 329, 0, 133, 235, 236,
	328, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 289, 0, 0, 0,
	124, 285, 0, 0, 179, 138, 233, 234, 331, 141,
	0, 0, 187, 151, 0, 340, 112, 0, 322, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 286, 310, 288, 308, 312, 313, 314, 315, 0,
	0, 113, 311, 316, 317, 318, 0, 0, 0, 0,
	283, 301, 0, 330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 299, 0,
	0, 0, 0, 343, 0, 300, 0, 0, 296, 297,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 341, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 345,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 319, 332, 342, 338, 339,
	336, 337, 335, 334, 333, 344, 324, 325, 326, 327,
	329, 0, 133, 235, 236, 328, 99, 107, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 179,
	138, 233, 234, 331, 141, 0, 0, 187, 151, 0,
	340, 112, 0, 322, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 286, 310, 288, 308,
	312, 313, 314, 315, 0, 0, 113, 311, 316, 317,
	318, 0, 0, 0, 0, 0, 301, 0, 330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 299, 0, 0, 0, 0, 343, 0,
	300, 0, 0, 296, 297, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 341, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 2108, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 345, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	319, 332, 342, 338, 339, 336, 337, 335, 334, 333,
	344, 324, 325, 326, 327, 329, 0, 133, 235, 236,
	328, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 289, 0, 0, 0,
	124, 0, 0, 0, 179, 138, 233, 234, 331, 141,
	0, 0, 187, 151, 0, 340, 112, 0, 322, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 286, 310, 288, 308, 312, 313, 314, 315, 0,
	0, 113, 311, 316, 317, 318, 0, 0, 0, 0,
	0, 301, 0, 330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 299, 0,
	0, 0, 0, 343, 0, 300, 0, 0, 296, 297,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 341, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 345,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 319, 332, 342, 338, 339,
	336, 337, 335, 334, 333, 344, 324, 325, 326, 327,
	329, 0, 133, 235, 236, 328, 99, 107, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 179,
	138, 233, 234, 331, 141, 0, 0, 187, 151, 0,
	340, 112, 0, 322, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 286, 310, 288, 308,
	312, 313, 314, 315, 0, 0, 113, 311, 316, 317,
	318, 0, 0, 0, 0, 0, 301, 0, 330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 299, 0, 0, 0, 0, 343, 0,
	300, 0, 0, 296, 297, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 341, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 345, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	319, 332, 342, 338, 339, 336, 337, 335, 334, 333,
	344, 324, 325, 326, 327, 329, 0, 133, 235, 236,
	328, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 179, 138, 233, 234, 331, 141,
	0, 0, 187, 151, 0, 340, 112, 0, 322, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 1213, 0,
	0, 286, 310, 288, 308, 312, 313, 314, 315, 0,
	0, 113, 311, 316, 317, 318, 0, 0, 0, 0,
	0, 301, 0, 330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 299, 0,
	0, 0, 0, 343, 0, 300, 0, 0, 296, 297,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 341, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 345,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 319, 332, 342, 338, 339,
	336, 337, 335, 334, 333, 344, 324, 325, 326, 327,
	329, 0, 133, 235, 236, 328, 99, 107, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 179,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	340, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1544, 0, 0, 286, 0, 1314, 1315,
	1316, 1317, 0, 0, 0, 0, 113, 1320, 1318, 317,
	318, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 1322, 1327, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 1324, 0, 1326, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 179, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 286, 0, 1314, 1315, 1316, 1317, 0, 0, 0,
	0, 113, 1320, 1318, 317, 318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 1322, 1327, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 0, 1324, 0, 1326, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 235, 236, 0, 99, 107, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 179,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 1314, 1315,
	1316, 1317, 0, 0, 0, 0, 113, 1320, 1318, 317,
	318, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 1322, 1327, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 1324, 0, 1326, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 179, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 310, 930, 308, 312, 313, 314, 315, 0,
	0, 113, 311, 316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 235, 236, 0, 99, 107, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 767, 179,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1827, 0, 372, 0, 1825, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1824, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1823, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 752, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 768, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 0, 794,
	795, 168, 796, 797, 798, 800, 799, 769, 770, 771,
	775, 773, 772, 774, 746, 748, 212, 744, 747, 753,
	749, 750, 751, 765, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 766, 776, 777, 778, 779,
	780, 781, 782, 783, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 745, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 767, 179, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 752, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 768, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	1992, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 0, 794, 795, 168, 796, 797, 798,
	800, 799, 769, 770, 771, 775, 773, 772, 774, 746,
	748, 212, 744, 747, 753, 749, 750, 751, 765, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	766, 776, 777, 778, 779, 780, 781, 782, 783, 0,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 235, 236, 0, 99, 745, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	581, 0, 0, 0, 0, 124, 0, 0, 0, 179,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 372, 0, 583, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 578, 577, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 767, 179, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 752, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 768, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 0, 794, 795, 168, 796, 797, 798,
	800, 799, 769, 770, 771, 775, 773, 772, 774, 746,
	748, 212, 744, 747, 753, 749, 750, 751, 765, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	766, 776, 777, 778, 779, 780, 781, 782, 783, 0,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 235, 236, 0, 99, 745, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 179,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1827, 0, 372, 0, 1825, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1824, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1823, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 179, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 505, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1059, 147, 214, 0, 0, 0, 1054, 0,
	1053, 0, 1055, 1056, 0, 139, 0, 0, 1057, 1060,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 235, 236, 0, 99, 107, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 179,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 925, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 1690, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 1689, 210,
	157, 162, 160, 209, 1691, 202, 150, 146, 0, 105,
	200, 148, 145, 1692, 928, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 924, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	23, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	0, 0, 163, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 124, 0, 179, 0, 0, 138, 233, 234,
	0, 141, 0, 0, 187, 151, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 95, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 214, 0, 0, 0,
	170, 0, 116, 0, 193, 128, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 177, 164, 205,
	0, 165, 175, 142, 197, 171, 204, 0, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 235, 236, 0, 99, 107,
	140, 0, 221, 0, 172, 126, 208, 163, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 179, 138, 233, 234, 0, 141, 0, 0, 187,
	151, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 214, 0, 0, 0, 170, 0, 116, 0, 193,
	128, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 177, 164, 205, 0, 165, 175, 142, 197,
	171, 204, 0, 215, 216, 195, 213, 180, 108, 158,
	98, 169, 176, 0, 117, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 185, 101, 194, 203, 114, 181,
	104, 201, 190, 192, 149, 134, 135, 183, 102, 103,
	0, 174, 123, 168, 127, 122, 161, 191, 152, 198,
	199, 119, 223, 121, 120, 189, 109, 211, 212, 106,
	110, 210, 157, 162, 160, 209, 196, 202, 150, 146,
	0, 105, 200, 148, 145, 137, 0, 125, 129, 166,
	144, 167, 130, 154, 153, 155, 0, 0, 159, 131,
	0, 0, 0, 0, 0, 188, 207, 224, 225, 0,
	0, 0, 217, 218, 219, 220, 0, 0, 0, 156,
	111, 132, 182, 136, 143, 173, 222, 0, 178, 115,
	206, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	235, 236, 0, 99, 107, 140, 0, 221, 0, 172,
	126, 208, 163, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 124, 2067, 0, 0, 179, 138, 233, 234,
	0, 141, 0, 0, 187, 151, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 214, 0, 0, 0,
	170, 0, 116, 0, 193, 128, 0, 139, 0, 0,
	0, 1519, 0, 0, 0, 118, 0, 177, 164, 205,
	0, 165, 175, 142, 197, 171, 204, 0, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 235, 236, 0, 99, 107,
	140, 0, 221, 0, 172, 126, 208, 163, 0, 0,
	100, 0, 709, 0, 0, 0, 0, 124, 0, 0,
	0, 179, 138, 233, 234, 0, 141, 0, 0, 187,
	151, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 0,
	711, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 214, 0, 0, 0, 170, 0, 116, 0, 193,
	128, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 177, 164, 205, 0, 165, 175, 142, 197,
	171, 204, 0, 215, 216, 195, 213, 180, 108, 158,
	98, 169, 176, 0, 117, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 185, 101, 194, 203, 114, 181,
	104, 201, 190, 192, 149, 134, 135, 183, 102, 103,
	0, 174, 123, 168, 127, 122, 161, 191, 152, 198,
	199, 119, 223, 121, 120, 189, 109, 211, 212, 106,
	110, 210, 157, 162, 160, 209, 196, 202, 150, 146,
	0, 105, 200, 148, 145, 137, 0, 125, 129, 166,
	144, 167, 130, 154, 153, 155, 0, 0, 159, 131,
	0, 0, 0, 0, 0, 188, 207, 224, 225, 0,
	0, 0, 217, 218, 219, 220, 0, 0, 0, 156,
	111, 132, 182, 136, 143, 173, 222, 0, 178, 115,
	206, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	235, 236, 0, 99, 107, 140, 0, 221, 0, 172,
	126, 208, 163, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 179, 138, 233, 234,
	0, 141, 0, 0, 187, 151, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 95, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 214, 0, 0, 0,
	170, 0, 116, 0, 193, 128, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 177, 164, 205,
	0, 165, 175, 142, 197, 171, 204, 0, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 235, 236, 23, 99, 107,
	140, 0, 221, 0, 172, 126, 208, 0, 0, 163,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 124,
	0, 179, 0, 0, 138, 233, 234, 0, 141, 0,
	0, 187, 151, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	372, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 214, 0, 0, 0, 170, 0, 116,
	0, 193, 128, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 177, 164, 205, 0, 165, 175,
	142, 197, 171, 204, 0, 215, 216, 195, 213, 180,
	108, 158, 98, 169, 176, 0, 117, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 185, 101, 194, 203,
	114, 181, 104, 201, 190, 192, 149, 134, 135, 183,
	102, 103, 0, 174, 123, 168, 127, 122, 161, 191,
	152, 198, 199, 119, 223, 121, 120, 189, 109, 211,
	212, 106, 110, 210, 157, 162, 160, 209, 196, 202,
	150, 146, 0, 105, 200, 148, 145, 137, 0, 125,
	129, 166, 144, 167, 130, 154, 153, 155, 0, 0,
	159, 131, 0, 0, 0, 0, 0, 188, 207, 224,
	225, 0, 0, 0, 217, 218, 219, 220, 0, 0,
	0, 156, 111, 132, 182, 136, 143, 173, 222, 0,
	178, 115, 206, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 235, 236, 0, 99, 107, 140, 0, 221,
	0, 172, 126, 208, 163, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 179, 138,
	233, 234, 0, 141, 0, 0, 187, 151, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 372, 0, 0, 0, 866,
	0, 0, 867, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 0, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 159, 131, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 235, 236, 0,
	99, 107, 140, 0, 221, 0, 172, 126, 208, 163,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 0, 179, 138, 233, 234, 0, 141, 0,
	0, 187, 151, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 214, 0, 0, 0, 170, 0, 116,
	0, 193, 128, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 177, 164, 205, 0, 165, 175,
	142, 197, 171, 204, 0, 215, 216, 195, 213, 180,
	108, 158, 98, 169, 176, 0, 117, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 185, 101, 194, 203,
	114, 181, 104, 201, 190, 192, 149, 134, 135, 183,
	102, 103, 0, 174, 123, 168, 127, 122, 161, 191,
	152, 198, 199, 119, 223, 121, 120, 189, 109, 211,
	212, 106, 110, 210, 157, 162, 160, 209, 196, 202,
	150, 146, 0, 105, 200, 148, 145, 137, 0, 125,
	129, 166, 144, 167, 130, 154, 153, 155, 0, 0,
	159, 131, 0, 0, 0, 0, 0, 188, 207, 224,
	225, 0, 0, 0, 217, 218, 219, 220, 0, 0,
	0, 156, 111, 132, 182, 136, 143, 173, 222, 826,
	178, 115, 206, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 235, 236, 0, 99, 107, 140, 0, 221,
	0, 172, 126, 208, 163, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 179, 138,
	233, 234, 0, 141, 0, 0, 187, 151, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	803, 0, 0, 0, 0, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 0, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 804,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 159, 131, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 235, 236, 0,
	99, 107, 140, 0, 221, 0, 172, 126, 208, 163,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 124,
	730, 0, 0, 179, 138, 233, 234, 0, 141, 0,
	0, 187, 151, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	372, 0, 729, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 214, 0, 0, 0, 170, 0, 116,
	0, 193, 128, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 177, 164, 205, 0, 165, 175,
	142, 197, 171, 204, 0, 215, 216, 195, 213, 180,
	108, 158, 98, 169, 176, 0, 117, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 185, 101, 194, 203,
	114, 181, 104, 201, 190, 192, 149, 134, 135, 183,
	102, 103, 0, 174, 123, 168, 127, 122, 161, 191,
	152, 198, 199, 119, 223, 121, 120, 189, 109, 211,
	212, 106, 110, 210, 157, 162, 160, 209, 196, 202,
	150, 146, 0, 105, 200, 148, 145, 137, 0, 125,
	129, 166, 144, 167, 130, 154, 153, 155, 0, 0,
	159, 131, 0, 0, 0, 0, 0, 188, 207, 224,
	225, 0, 0, 0, 217, 218, 219, 220, 0, 0,
	0, 156, 111, 132, 182, 136, 143, 173, 222, 0,
	178, 115, 206, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 235, 236, 0, 99, 107, 140, 0, 221,
	0, 172, 126, 208, 163, 0, 0, 100, 0, 709,
	0, 0, 0, 0, 124, 0, 0, 0, 179, 138,
	233, 234, 0, 141, 0, 0, 187, 151, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 711, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 0, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 707, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 159, 131, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 235, 236, 0,
	99, 107, 140, 0, 221, 0, 172, 126, 208, 163,
	0, 0, 100, 0, 0, 0, 0, 0, 687, 124,
	0, 0, 0, 179, 138, 233, 234, 0, 141, 0,
	0, 187, 151, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 214, 0, 0, 0, 170, 0, 116,
	0, 193, 128, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 177, 164, 205, 0, 165, 175,
	142, 197, 171, 204, 0, 215, 216, 195, 213, 180,
	108, 158, 98, 169, 176, 0, 117, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 185, 101, 194, 203,
	114, 181, 104, 201, 190, 192, 149, 134, 135, 183,
	102, 103, 0, 174, 123, 168, 127, 122, 161, 191,
	152, 198, 199, 119, 223, 121, 120, 189, 109, 211,
	212, 106, 110, 210, 157, 162, 160, 209, 196, 202,
	150, 146, 0, 105, 200, 148, 145, 137, 0, 125,
	129, 166, 144, 167, 130, 154, 153, 155, 0, 0,
	159, 131, 0, 0, 0, 0, 0, 188, 207, 224,
	225, 0, 0, 0, 217, 218, 219, 220, 0, 0,
	0, 156, 111, 132, 182, 136, 143, 173, 222, 0,
	178, 115, 206, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 235, 236, 0, 99, 107, 140, 355, 221,
	0, 172, 126, 208, 0, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 179, 0,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 179, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 235, 236, 0, 99, 107, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 179,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 179, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 1519,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 235, 236, 0, 99, 107, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 179,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 1644, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 179, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 235, 236, 0, 99, 107, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 179,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 711, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 179, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 235, 236, 0, 99, 107, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 179,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	605, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 372, 0, 583, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 179, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 505, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 235, 236, 0, 99, 107, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 179,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 112,
}

var yyPact = [...]int16{
	2332, -1000, -235, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1498, 1562, -1000, -1000, -1000, -1000, -1000, -1000, 1315,
	811, 347, 423, 307, 18882, 404, 1278, 19197, -1000, 136,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1219, -1000, -1000,
	-1000, -1000, -1000, 1494, 1505, 1267, 1466, 1381, -1000, 8785,
	344, 16044, 18567, 7148, -1000, 21402, 392, 371, 219, 355,
	21717, 335, 335, 21717, 21717, 19197, 396, 335, -1000, -174,
	-132, -1000, -36, 374, 19197, -1000, 19197, 337, 1023, 337,
	337, 337, 19197, -1000, 520, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 19197, 1020, 1424,
	373, 5728, 5728, 5728, 5728, 255, 5728, 20, 1345, -1000,
	-1000, -1000, -1000, 5728, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 992, 1431, 9742, 9742, 1498, -1000,
	1219, -1000, -1000, -1000, 1416, -1000, -1000, 732, 1529, -1000,
	13207, 517, -1000, 9742, 91, 1214, -1000, -1000, -212, 1214,
	-1000, -1000, 468, -1000, -1000, -1000, 10687, 10687, 10687, 10687,
	10687, 10687, 10687, -1000, -1000, -1000, -1000, 55, -1000, 909,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 514,
	-1000, 9427, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
	9742, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
	2029, 1214, 1214, 1214, 1214, -1000, 18251, 1185, 1532, -1000,
	-1000, -1000, 1463, 14784, 17936, 19197, 1132, -1000, 1209, 6793,
	-16, -1000, -1000, -1000, 649, 513, 17621, -1000, -1000, -1000,
	1420, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1111, -1000, 13522, 13522, 17306, 21717, 335, 354,
	143, 335, 1320, 1018, 695, 1008, 1344, 715, 1462, 335,
	19197, -1000, -1000, -1000, -1000, 16991, 5728, 352, 19197, 1447,
	1343, 19197, 995, 993, -1000, 6438, -1000, 5728, 5728, 5728,
	5728, 5728, 5728, 5728, 5728, -1000, -1000, -1000, -1000, -1000,
	-1000, 5728, 5728, -1000, 25, -1000, 19197, -1000, -1000, -1000,
	-1000, 1551, 553, 923, 499, 1211, -1000, 928, 1494, 992,
	1381, 16676, 1365, -1000, -1000, 19197, -1000, 9742, 9742, 825,
	-1000, 21087, -1000, -1000, 4308, 587, 10687, 880, 687, 10687,
	10687, 10687, 10687, 10687, 10687, 10687, 10687, 10687, 10687, 10687,
	10687, 10687, 10687, 10687, 922, 2734, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 987, -1000,
	735, -1000, 1219, 12262, 12262, 36, 36, 36, 36, 36,
	36, 20772, -1000, -242, 8155, -1000, 7503, 992, 1105, 962,
	9427, 8785, 8785, 9100, 9742, 10687, 20142, 8785, 1467, 678,
	962, 20142, -1000, 992, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 93, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 8785, 8785, 8785, 8785, 269, 19197, -1000, 20142,
	16044, 16044, 16044, 16044, 16044, -1000, 1375, 1371, -1000, 1360,
	1357, 1390, 19197, -1000, 1107, 14784, 422, 1214, -1000, 20457,
	-1000, -1000, 269, 1160, 16044, 19197, -1000, -1000, 6083, 1209,
	-16, 1199, -1000, -2, 7, 7840, 7503, 541, -1000, -1000,
	-1000, -1000, 225, 14152, 203, -150, 44, -1000, -1000, -1000,
	-1000, -1000, 1252, -1000, -1000, -1000, 1252, 320, 1307, 1252,
	1307, -1000, 1252, 1307, 84, 84, 84, 84, 84, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1301, 1290, -1000, 1252,
	1252, 1252, 1252, 1252, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1282, 284, 1282, 1257, 1257, -1000,
	-1000, 203, 1314, 19197, 21717, 1339, 19197, 335, -152, 19197,
	-65, 977, 5728, 1442, 5728, 19197, 1538, 19197, -1000, -1000,
	-1000, 164, 13522, 19197, -1000, 978, 19197, -1000, 19197, -1000,
	-1000, 19197, 5728, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 688, -1000,
	-1000, -1000, -1000, 1392, 9742, 9742, 5018, 9742, -1000, -1000,
	-1000, 1431, -1000, 1467, 1497, -1000, 1406, 1405, 8785, -1000,
	-1000, 587, 584, -1000, -1000, 835, -1000, -1000, -1000, -1000,
	497, 1214, -1000, 519, -1000, -1000, -1000, -1000, 880, 10687,
	10687, 10687, 638, 519, 1877, 818, 137, 36, 179, 179,
	35, 35, 35, 35, 35, 773, 773, -1000, -1000, -1000,
	-1000, -58, -1000, 1252, 1282, 284, 1282, 1257, 1257, -1000,
	-1000, 992, 88, -69, -1000, -1000, -1000, -1000, -1000, -1000,
	-212, 940, -1000, -1000, 888, 992, 8785, 1103, 1105, -1000,
	13207, -1000, -1000, 9742, -1000, 992, 1103, 1103, 838, 1208,
	11002, 1252, -1000, 1252, 1257, -1000, -1000, 1252, 126, 1252,
	120, -1000, -1000, -1000, -1000, 1257, -1000, -1000, -1000, -1000,
	-1000, 1252, 1252, -1000, -1000, 1252, -1000, 1252, 1252, 895,
	814, 1820, 1212, -1000, 491, 1103, 8785, 674, -1000, 9742,
	992, -1000, -1000, 1103, 992, 1207, 1103, 1103, 1182, 1214,
	-1000, 1194, -1000, 644, 1532, 1311, 1330, 1341, -1000, -1000,
	-1000, -1000, 1367, -1000, 1361, -1000, -1000, -1000, -1000, -62,
	369, 364, 358, 21717, -1000, 1521, 16044, 1167, -1000, -1000,
	1199, -16, -17, -1000, -1000, -1000, -1000, 962, 641, -1000,
	-1000, 975, 7503, 1193, 1410, -1000, -1000, -1000, -1000, -1000,
	-1000, 1288, 794, 21717, 300, 299, 591, 549, 969, -1000,
	-1000, -1000, 759, -1000, 21717, -1000, 1548, -1000, -1000, 297,
	-1000, 295, 692, 937, 19197, 212, 1283, 11632, 883, -1000,
	-251, -1000, 41, -1000, -1000, 853, 84, 84, 1252, 84,
	756, 84, 84, -1000, -1000, 541, 1417, 541, 541, 541,
	541, 908, 908, -69, -69, -1000, -1000, -1000, -1000, 875,
	1282, -1000, -1000, -1000, 854, -1000, 19197, 21717, 1280, 1328,
	19197, 1461, 19197, -1000, -1000, -1000, 1457, -1000, 7503, -1000,
	-1000, -1000, -1000, -1000, 1454, 1157, -1000, -1000, -1000, -1000,
	689, -1000, -1000, 1321, -1000, 2249, 1363, 428, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 262,
	427, -1000, 5728, -1000, 639, 19197, 19197, 1388, 962, 962,
	488, -1000, -1000, 19197, -1000, -1000, -1000, -1000, 1191, -1000,
	-1000, -1000, 5373, 8785, -1000, 638, 519, 462, -1000, 10687,
	10687, 106, -1000, -1000, -1000, 103, 100, 54, -1000, -212,
	-1000, 1103, 8785, -218, -1000, 962, -1000, -1000, -1000, 2969,
	922, 9742, -1000, 853, 265, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2969, 10687, 10687,
	10687, 10687, 10687, 5018, -53, 1184, 669, -1000, 9742, 932,
	-1000, -1000, -1000, -1000, -1000, 1327, 20142, 1214, -1000, 16361,
	21717, 1498, 20142, 9742, 9742, -1000, -1000, 9742, 1279, -1000,
	9742, -1000, -1000, -1000, -1000, 1269, 1214, 1214, 1214, 1084,
	-1000, 1498, 1167, -1000, -1000, -1000, -13, -5, -1000, 9742,
	-1000, 4663, -1000, 225, -1000, 19512, -1000, 1575, 1478, 301,
	4, -1000, 965, 943, -1000, 938, -1000, -1000, 69, -1000,
	-163, 110, 22, -1000, -1000, 1214, -1000, 1268, 1452, -1000,
	1427, 847, -1000, 11317, -209, -1000, -1000, -1000, -212, -1000,
	-1000, -1000, 1214, -1000, 1265, 1261, -1000, 1251, 1214, 467,
	-1000, -1000, -1000, -1000, -1000, 1120, 541, 541, 84, 541,
	1119, 1089, 541, 541, -1000, 581, -1000, -1000, -1000, -1000,
	1096, -1000, 1094, -1000, -1000, 1192, -1000, 1092, 1190, 1326,
	15414, 19197, 1260, 1219, 1449, 1219, 1187, -1000, 636, 1477,
	205, 19197, 1538, 1538, 21717, -1000, 298, 21717, -1000, -1000,
	21717, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	21717, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 19197, -1000, -1000, -1000, -1000, -1000, 21717, 314,
	-1000, -1000, 891, 9742, -1000, -1000, -1000, 7503, -1000, 1521,
	16044, -1000, -1000, 992, -1000, 10687, 519, 519, 39, 31,
	30, -1000, 888, -1000, -1000, -1000, -1000, 1214, 992, 1252,
	1252, -1000, 1252, 1257, -1000, 1252, 126, 1252, 120, -1000,
	-1000, -1000, -1000, 1257, -1000, -1000, -1000, -1000, -1000, 1252,
	1252, -1000, -1000, 1252, -1000, 1252, 1252, 992, 902, -1000,
	-1000, 992, 280, 408, 356, 115, 296, -1000, 1214, -43,
	-1000, 962, 9742, -1000, 1430, 1118, 1179, -1000, -1000, 8470,
	992, 1088, 465, 1084, 1494, -1000, 962, 962, 962, 19827,
	962, -217, 19827, 19827, 19827, 15729, 21717, 1494, -1000, -1000,
	-1000, -1000, 962, 3953, -1000, 7503, 1075, -1000, 279, 1252,
	445, 445, -171, 293, 291, 1214, -1000, -1000, -1000, -1000,
	-136, -1000, -1000, -1000, -1000, 692, -1000, 1251, 9742, 19827,
	194, -1000, 1186, 1079, 11947, -1000, 14467, -1000, 992, -1000,
	898, -1000, 887, 1076, 7503, -1000, -1000, -1000, 541, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 84, 882, 84, 841,
	-1000, 831, 15414, 21717, 19197, 1072, 1183, -1000, 278, 1244,
	19827, -1000, 1219, -1000, 7503, 3953, 322, 1520, -1000, -1000,
	1476, -1000, 1147, 1241, 21717, -1000, -1000, 285, -1000, 1235,
	-1000, -1000, -1000, -1000, 1435, 21717, -1000, -1000, 962, 1511,
	1180, -1000, 519, -1000, -1000, -1000, -1000, 426, -1000, -1000,
	-1000, -1000, -1000, 10687, 10687, -1000, 10687, 10687, 10687, 992,
	840, 962, 286, -1000, 1214, -1000, -1000, 1165, 21717, 21717,
	-1000, -1000, 1071, -1000, -1000, 1069, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1067, 1067, 1067, 422, -1000, -1000, -1000,
	-1000, -1000, -1000, 1015, 19512, 1443, -1000, -1000, -1000, 768,
	-1000, -1000, 706, 197, 755, -1000, 21717, -136, 9742, -1000,
	1214, 902, 1061, 9742, 1234, 813, -1000, 1064, -1000, 88,
	-69, -1000, -1000, -1000, -1000, -1000, -1000, 1214, -1000, 541,
	-1000, 541, 1056, 1048, 1046, 1231, 1229, -184, 15414, 1055,
	-1000, -1000, -1000, 21717, -1000, -1000, -1000, -1000, -1000, 181,
	2127, -1000, 13837, 1228, 1226, 19827, 1214, 317, 1509, 1502,
	-1000, 1007, 992, 1501, 280, 280, 280, 280, 52, -1000,
	-1000, 1540, -1000, 1214, -1000, 1219, 441, -1000, 21717, -1000,
	-1000, -217, -1000, -1000, -1000, -62, 1323, 2030, 198, -1000,
	930, 623, 770, 621, 619, 616, 615, 614, 612, 596,
	-1000, -1000, -1000, 1534, -1000, -1000, -1000, 1522, 1225, -1000,
	1222, 902, 9742, 210, 1325, 936, -1000, 1042, 1038, -1000,
	-1000, -1000, -1000, -184, 15414, 19512, 1521, 1221, 1035, 1521,
	1034, -1000, 178, 2127, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1498, 21717, 21717, 21717, 21717, 387, 10372,
	9742, 1027, 12577, 13837, 13837, 12577, 13837, 13837, 19512, 19512,
	1053, 259, 283, -1000, 9742, 9742, -1000, 992, -1000, 9742,
	-1000, -1000, -1000, -1000, 992, 224, -93, 20142, 1179, 992,
	21717, -1000, -1000, -1000, -1000, 21717, -1000, -78, 2030, 21717,
	-1000, 807, -1000, -1000, 749, 804, 749, 749, 749, 749,
	749, 445, 445, 21717, 19512, 210, 902, -1000, -47, 1542,
	-98, 150, -1000, -1000, 1521, 1005, 1051, 1015, 19827, -184,
	1015, -64, 21717, 9742, 2685, -1000, 1494, 1171, 12892, -1000,
	-1000, -1000, -1000, 21717, 1527, 1526, 1524, 1523, 2516, 91,
	767, 140, -1000, -1000, 12577, -1000, -1000, -1000, -1000, -1000,
	1041, 1030, 1320, 1014, -1000, 21717, 1220, 962, 1170, -1000,
	1169, -1000, 962, -1000, 1387, -56, -102, 1016, -1000, -1000,
	1214, 1004, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 692, 692, 999, 991, -1000, 210,
	-1000, 445, 445, -1000, -1000, -1000, 201, 805, 801, 788,
	786, 78, -1000, 1496, 1015, 1521, 1015, 1323, 986, 1521,
	1323, -1000, -214, -1000, 962, -1000, -1000, 2127, 1431, 21717,
	175, -1000, -1000, 1433, -1000, -1000, -1000, -1000, -1000, 2127,
	2127, 2127, -1000, 281, -65, -1000, 259, 1397, 19512, 9742,
	-1000, 1386, -1000, 21717, -1000, 2030, -1000, -1000, 311, 1015,
	-1000, -1000, -1000, 778, -1000, 772, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 15099, 1323, 1015, -1000, -1000, -1000, 1015,
	-1000, 9742, -236, -1000, -1000, 13522, 1475, 21717, 2463, -1000,
	121, 2339, 158, -1000, 162, -1000, -1000, 250, 983, -1000,
	-72, 992, -1000, 19197, 1323, -1000, -1000, -1000, 436, -1000,
	-1000, 1323, 962, 666, 1219, -1000, -1000, -1000, 640, 675,
	-1000, 151, -1000, 236, -1000, -99, -1000, 1218, -1000, 7503,
	-1000, -1000, -1000, 321, 139, -1000, -1000, 1214, -120, 21717,
	-1000, -1000, 2127, 10057, -1000, 953, 2120, 280, 992, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1852, 95, 43, 1851, 1849, 1846, 1604, 1598, 1596,
	1588, 1845, 1839, 1838, 1837, 1834, 1829, 1827, 1826, 1823,
	1819, 1818, 1817, 1810, 1808, 1807, 1806, 1805, 811, 1804,
	1803, 1802, 103, 1801, 110, 1800, 1798, 74, 89, 73,
	68, 1871, 1797, 53, 108, 94, 1796, 84, 1794, 1793,
	168, 1792, 106, 1791, 1790, 826, 1789, 1788, 34, 25,
	23, 42, 1787, 1785, 104, 72, 1784, 1781, 1780, 29,
	1773, 1772, 88, 18, 32, 31, 37, 1770, 70, 65,
	1769, 86, 1768, 1767, 1765, 1763, 47, 1758, 90, 40,
	36, 13, 1748, 51, 19, 101, 71, 39, 20, 144,
	92, 1737, 67, 98, 83, 1736, 1734, 984, 1732, 1728,
	1726, 1725, 1724, 1723, 968, 97, 1722, 1721, 1718, 75,
	0, 788, 52, 105, 1717, 1716, 1715, 2222, 119, 102,
	44, 1714, 77, 253, 61, 1713, 1712, 78, 117, 5,
	113, 107, 1711, 114, 1708, 1704, 1702, 1815, 91, 64,
	261, 109, 1698, 1694, 1693, 81, 69, 48, 80, 100,
	24, 1690, 1689, 1686, 54, 1685, 14, 33, 1, 82,
	1683, 1682, 1681, 1680, 45, 66, 1677, 30, 1676, 21,
	3, 12, 46, 8, 1675, 1674, 1673, 6, 1670, 41,
	1669, 11, 1667, 16, 1663, 1657, 1656, 59, 1654, 1652,
	1649, 15, 1648, 1647, 27, 17, 57, 50, 1646, 1643,
	28, 79, 58, 1641, 56, 7, 2, 10, 1640, 9,
	1639, 1635, 1634, 26, 22, 1623, 1622, 1620, 1619, 1618,
	1617, 49, 1616, 1615, 1614, 1613, 1612, 4, 1610, 1609,
	1608, 1606, 1417, 1081, 1592, 1590, 55, 1586, 1581, 1572,
	1569, 207,
}

var yyR1 = [...]uint8{
	0, 240, 241, 241, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 244,
	244, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 220, 220, 219, 221, 221, 12, 12, 12, 12,
	12, 213, 213, 213, 213, 213, 13, 13, 216, 216,
	14, 14, 14, 100, 100, 104, 104, 104, 105, 105,
	105, 105, 233, 233, 232, 232, 135, 135, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 245, 245, 246, 246,
	246, 246, 246, 246, 246, 211, 211, 211, 211, 212,
	212, 212, 214, 214, 215, 215, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 218, 218, 195, 195, 195,
	196, 196, 196, 196, 196, 196, 198, 198, 199, 199,
	125, 125, 193, 193, 192, 191, 191, 190, 190, 189,
	200, 200, 20, 171, 172, 172, 172, 172, 172, 172,
	172, 159, 159, 139, 139, 139, 139, 139, 139, 139,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 206, 206, 206, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	208, 209, 202, 202, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 149, 149,
	149, 149, 149, 149, 201, 201, 197, 197, 197, 197,
	197, 197, 197, 197, 143, 143, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 142, 142, 142, 142,
	142, 142, 142, 142, 144, 144, 144, 144, 144, 144,
	144, 144, 140, 140, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 146, 146, 146,
	146, 146, 146, 146, 146, 158, 158, 147, 147, 156,
	156, 157, 157, 157, 148, 148, 148, 155, 155, 155,
	152, 152, 153, 153, 154, 154, 154, 150, 150, 150,
	151, 151, 151, 161, 182, 182, 182, 184, 184, 185,
	185, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 170, 170, 210, 210, 181, 181, 181, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 169, 169,
	179, 179, 180, 180, 177, 177, 177, 178, 164, 164,
	164, 164, 164, 165, 166, 166, 166, 166, 162, 163,
	204, 204, 204, 238, 238, 238, 238, 238, 238, 239,
	239, 205, 205, 167, 167, 168, 168, 175, 175, 175,
	175, 247, 247, 173, 173, 174, 174, 174, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 248, 248, 249, 249, 249, 249, 249,
	249, 249, 188, 186, 186, 187, 187, 17, 18, 18,
	18, 18, 18, 19, 19, 21, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 112,
	112, 109, 109, 110, 110, 111, 111, 111, 113, 113,
	113, 136, 136, 136, 23, 23, 25, 25, 26, 27,
	24, 24, 24, 24, 24, 250, 28, 29, 29, 30,
	30, 30, 34, 34, 34, 32, 32, 33, 33, 39,
	39, 38, 38, 40, 40, 40, 40, 124, 124, 124,
	123, 123, 234, 234, 234, 234, 234, 42, 42, 43,
	43, 44, 44, 45, 45, 45, 223, 223, 222, 222,
	224, 224, 224, 224, 224, 224, 57, 57, 93, 93,
	93, 96, 96, 46, 46, 46, 46, 47, 47, 48,
	48, 49, 49, 131, 131, 130, 130, 130, 129, 129,
	51, 51, 51, 53, 52, 52, 52, 52, 54, 54,
	56, 56, 55, 55, 58, 58, 58, 58, 59, 59,
	94, 94, 41, 41, 41, 41, 41, 41, 41, 108,
	108, 61, 61, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 71, 71, 71, 71, 71, 71, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	37, 37, 72, 72, 72, 78, 73, 73, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 69, 69, 69, 69, 69,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 251, 251, 70, 70, 70,
	70, 35, 35, 35, 35, 35, 134, 134, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 138, 138, 138, 138, 138, 138, 138, 138, 82,
	82, 36, 36, 80, 80, 81, 83, 83, 79, 79,
	79, 225, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 66, 66, 66, 84, 84, 85, 85,
	235, 235, 236, 236, 237, 86, 86, 87, 87, 88,
	89, 89, 89, 90, 90, 90, 90, 91, 91, 91,
	63, 63, 63, 63, 63, 63, 92, 92, 92, 92,
	97, 97, 74, 74, 76, 76, 75, 77, 98, 98,
	102, 99, 99, 103, 103, 103, 103, 103, 101, 101,
	101, 126, 126, 126, 106, 106, 114, 114, 115, 115,
	107, 107, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 117, 117, 117, 118, 118, 121, 121, 122,
	122, 127, 127, 127, 128, 128, 226, 226, 226, 227,
	227, 227, 228, 228, 229, 230, 230, 231, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 242, 243, 132, 133, 133,
	133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 0, 3, 1, 1, 1, 1, 2, 13,
	12, 14, 12, 13, 12, 7, 8, 7, 5, 5,
	5, 11, 11, 9, 5, 8, 0, 3, 0, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 1,
	1, 1, 1, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 1, 4, 0, 2, 2,
	0, 2, 2, 2, 2, 2, 0, 2, 0, 3,
	0, 1, 0, 2, 1, 0, 2, 1, 3, 3,
	0, 2, 4, 4, 0, 1, 3, 3, 3, 3,
	3, 2, 2, 3, 1, 1, 1, 1, 1, 0,
	2, 2, 3, 2, 4, 2, 4, 2, 2, 3,
	2, 3, 2, 7, 9, 3, 3, 6, 9, 9,
	8, 8, 5, 8, 7, 4, 2, 4, 6, 2,
	1, 1, 1, 2, 1, 1, 1, 3, 3, 1,
	2, 1, 1, 2, 0, 4, 3, 4, 3, 3,
	3, 3, 3, 3, 3, 2, 4, 6, 2, 3,
	2, 3, 1, 3, 0, 2, 0, 3, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 2,
	2, 2, 1, 1, 1, 3, 3, 2, 2, 2,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 1,
	5, 2, 2, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 3, 3, 0, 3, 3,
	0, 1, 0, 1, 0, 2, 1, 0, 3, 3,
	0, 1, 2, 6, 0, 1, 4, 1, 2, 1,
	3, 2, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 1, 1, 0, 2, 5, 2,
	3, 3, 2, 3, 2, 2, 3, 4, 1, 1,
	1, 1, 1, 3, 3, 2, 2, 1, 2, 5,
	5, 8, 8, 13, 1, 1, 2, 2, 10, 7,
	0, 1, 1, 0, 1, 1, 1, 2, 2, 1,
	2, 0, 3, 0, 1, 1, 3, 0, 4, 1,
	3, 2, 1, 1, 2, 1, 1, 1, 6, 11,
	13, 13, 6, 7, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 3,
	6, 4, 2, 4, 2, 2, 2, 2, 3, 1,
	1, 0, 1, 0, 1, 0, 2, 2, 0, 2,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 3, 4, 4, 5, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 0, 4, 1, 3,
	1, 1, 1, 1, 1, 1, 4, 8, 1, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	0, 4, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	6, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 2, 4, 5, 5, 6, 4,
	4, 4, 6, 6, 6, 6, 6, 8, 8, 6,
	8, 8, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 1, 2, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 2, 2, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 3, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 1, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 5, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 2, 0,
	2, 2, 0, 1, 4, 1, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}

var yyChk = [...]int16{
	-1000, -240, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 31, -20,
	122, 123, 125, 124, 155, 126, 148, 52, 206, 207,
	209, 210, 26, 149, 150, 153, 154, -242, 8, 313,
	56, -241, 361, -86, 15, -30, 5, -28, -250, -28,
	-28, -28, -28, -28, -171, 56, -238, -239, -200, 131,
	164, 305, 128, 144, 162, 163, 333, 129, 345, 346,
	146, 348, 76, -107, 132, 134, 129, 129, 130, 132,
	305, 128, 129, -55, -127, 59, -120, 61, 171, 324,
	21, 206, 219, 220, 211, 252, 240, 325, 169, 237,
	241, 291, 359, 69, 209, 300, 138, 175, 151, 232,
	235, 234, 226, 223, 28, 258, 331, 225, 141, 259,
	263, 270, 292, 320, 216, 217, 294, 256, 33, 143,
	326, 37, 159, 295, 261, 255, 250, 131, 254, 215,
	249, 41, 229, 265, 264, 266, 290, 243, 170, 269,
	245, 227, 244, 18, 154, 157, 260, 262, 224, 172,
	136, 161, 330, 296, 222, 158, 173, 153, 299, 347,
	168, 210, 293, 218, 302, 205, 204, 40, 276, 236,
	213, 228, 214, 140, 207, 166, 247, 160, 230, 231,
	253, 212, 248, 208, 162, 155, 301, 277, 332, 246,
	242, 238, 239, 167, 132, 164, 165, 283, 284, 285,
	286, 328, 297, 233, 278, 279, 177, 178, 179, 180,
	181, 182, 183, 34, 35, 321, 322, 129, 116, 241,
	122, 281, 130, 33, 161, -136, 129, -109, 165, 283,
	284, 285, 286, 59, 293, 292, 287, -127, 208, -132,
	-132, -132, -132, -132, -2, -90, 17, 16, -5, -3,
	-242, 6, 21, 22, -34, 42, 43, -29, -40, 107,
	-41, -127, -60, 78, -65, 29, 59, -120, 61, 24,
	-64, -61, -79, -225, -77, -78, 116, 117, 105, 106,
	113, 79, 118, -69, -67, -68, -70, -228, 62, -121,
	60, 70, 63, 64, 65, 66, 71, 72, 73, 303,
	-75, -242, 46, 47, 314, 315, 316, 317, 323, 318,
	81, 36, 304, 312, 311, 310, 308, 309, 306, 307,
	358, 135, 305, 111, 313, 267, -107, -43, -44, -45,
	-46, -57, -78, -242, -55, 11, -50, -55, -99, -135,
	208, -103, 293, 292, -122, 303, -101, -121, -119, 291,
	241, 290, 59, -120, 127, 185, 336, 77, 23, 25,
	274, 280, 184, 80, 116, 16, 81, 191, 345, 346,
	115, 314, 122, 50, 306, 307, 304, 189, 316, 317,
	305, 281, 196, 20, 29, 356, 10, 26, 149, 22,
	109, 124, 186, 84, 85, 152, 24, 150, 73, 192,
	194, 19, 53, 142, 11, 335, 13, 14, 350, 337,
	135, 134, 96, 349, 130, 48, 8, 118, 27, 357,
	93, 44, 147, 195, 46, 94, 17, 308, 309, 32,
	323, 156, 111, 51, 38, 351, 78, 352, 71, 54,
	298, 190, 76, 15, 49, 157, 353, 144, 193, 95,
	125, 313, 47, 187, 354, 128, 188, 6, 319, 31,
	148, 45, 129, 282, 83, 133, 72, 163, 5, 146,
	9, 52, 55, 310, 311, 312, 36, 82, 12, 145,
	327, 74, -172, -159, -121, 61, 130, 130, 132, -233,
	204, 132, -121, -115, 135, -115, -121, -121, -55, 129,
	-115, 348, 345, 346, 313, 129, -55, -55, -114, 135,
	59, -114, -114, -114, -55, 119, -55, 59, 31, 305,
	59, 161, 129, 162, 132, -133, -242, -122, -133, -133,
	-133, 166, 167, -133, -110, 288, 54, -133, -243, 58,
	-91, 19, 32, -41, -127, -87, -88, -41, -86, -2,
	-28, 38, -32, 22, 68, 11, -124, 77, 76, 93,
	-123, 23, -121, 61, 119, -41, -62, 96, 78, 94,
	95, 80, 102, 101, 112, 105, 106, 107, 108, 109,
	110, 111, 103, 104, 115, 358, 86, 87, 88, 89,
	90, 91, 92, 97, 98, 99, 100, -108, -242, -197,
	358, -78, -242, 120, 121, -65, -65, -65, -65, -65,
	-65, -65, -229, 268, -242, 61, 119, -2, -73, -41,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -82,
	-41, -242, -251, -242, -251, -251, -251, -251, -251, -251,
	-251, -138, 116, 241, 151, 232, -141, -140, 247, 246,
	211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	240, 325, -242, -242, -242, -242, -56, 27, -55, 31,
	57, -51, -53, -52, -54, 44, 48, 50, 45, 46,
	47, 51, -131, 23, -43, -242, -130, 157, -129, 23,
	-127, 61, -55, -50, -244, 57, 11, 55, 57, -99,
	208, -100, -104, 294, 296, 86, 119, -126, -121, 61,
	29, 31, 58, 57, -160, -139, -143, -140, -145, -144,
	-146, -121, -141, -142, 240, 325, 237, 241, 238, 243,
	244, 245, 116, 242, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 246, 258, 31, 151, 230,
	231, 232, 235, 234, 236, 233, 259, 260, 261, 262,
	263, 264, 265, 266, 211, 212, 213, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 225, 226, 227, 229,
	228, -160, -121, 54, 203, -121, -115, 132, 205, -115,
	-193, 55, 59, 78, 59, 54, -211, 54, 19, 184,
	185, 197, 23, -115, -55, -55, 298, -133, 133, -55,
	24, 54, -55, 59, 59, -128, -127, -119, -133, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, -112, 282,
	289, -55, 9, 96, 57, 18, 119, 57, -89, 25,
	26, -90, -243, -34, -66, -121, 63, 66, -33, 45,
	-55, -41, -41, -71, 71, 78, 72, 73, -123, 107,
	-128, -122, -119, -65, -72, -75, -78, 67, 96, 94,
	95, 80, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -134, 59, 61,
	-143, 231, -138, -141, 222, 223, 225, 226, 227, 229,
	228, 59, 241, 231, 271, 118, 247, 256, 257, -64,
	61, -121, -64, -121, 362, -39, 22, -38, -73, -40,
	-41, -122, -243, 57, -243, -2, -38, -38, -41, -137,
	116, 237, 151, 232, 226, 256, 257, 243, 276, 230,
	277, 219, 211, 216, 229, 227, 213, 228, 212, 225,
	222, 235, 234, 236, 247, 238, 245, 244, 242, -41,
	-79, -65, -79, -121, -127, -38, -32, -80, -81, 82,
	-79, -243, 239, -38, -39, -38, -38, -38, -95, 157,
	-55, -98, -102, -79, -44, -45, -45, -44, -45, 44,
	44, 44, 49, 44, 49, 44, -52, -127, -243, -58,
	52, 134, 53, -242, -129, -95, 55, -43, -55, -103,
	-100, 57, 295, 297, 298, 54, 74, -41, -122, -151,
	116, 115, -175, -247, 328, 35, -159, -161, -164, -162,
	-163, -176, -165, 138, 136, 140, 141, 146, -169, 130,
	147, 71, 78, -206, 138, -208, 54, 274, 280, 136,
	147, 146, 359, 69, 139, 335, 337, 29, 30, -154,
	362, 268, -152, 277, -147, 56, -147, -147, 239, -148,
	56, -147, -148, -147, -148, -150, 241, -150, -150, -150,
	-150, 56, 56, -147, -147, -147, -147, -147, -156, 56,
	224, -156, -156, -157, 56, -157, 54, 55, -55, -121,
	54, -55, -115, -232, 356, 357, -55, -191, 327, -192,
	59, -133, 24, -133, -55, -214, -212, 8, 9, 10,
	-55, 198, -139, -55, -116, 127, 124, 125, -188, 123,
	274, 241, 69, 29, 15, 314, 157, 332, 59, 158,
	-55, -55, -55, -133, -111, 11, 96, 40, -41, -41,
	-128, -88, -91, -106, 19, 11, 36, 36, -38, 71,
	72, 73, 119, -242, -72, -65, -65, -65, -37, 152,
	77, 327, -243, 239, -155, 327, 328, -230, -231, 61,
	-243, -38, 57, -243, -243, -41, -243, -243, -243, 57,
	55, 57, -147, 56, -147, -147, -157, -147, 217, -147,
	217, -157, -147, -147, -147, -147, -147, 23, 57, 11,
	57, 57, 11, 119, -243, -38, -83, -81, 84, -41,
	-243, -243, -243, -243, -243, -63, 31, 36, -2, -242,
	-242, -59, 57, 12, 86, -48, -47, 54, 55, -49,
	54, -47, 44, 44, -223, 327, 130, 130, 130, -96,
	-121, -59, -43, -59, -104, -105, 299, 296, 302, 86,
	59, -173, -122, 57, 34, 56, -205, 54, 78, -167,
	-121, 147, -169, -169, 59, -169, 59, 130, 59, 71,
	19, -121, 9, 147, 147, -205, 61, -55, -202, 336,
	16, 56, -207, 56, 61, 62, 63, 64, 71, -149,
	70, -61, 269, -69, 304, 307, 306, 270, -121, -127,
	-209, 63, 363, -153, 278, 63, -150, -150, -147, -150,
	63, 59, -150, -150, -151, 31, -151, -151, -151, -151,
	-158, 61, -158, -155, -155, 63, -156, 63, -55, -121,
	56, 54, -55, 23, -55, 23, -190, -189, -122, -195,
	23, 54, 57, -211, 55, -132, -125, 138, -164, -249,
	164, 146, 137, 142, 141, 59, 136, 140, 157, -194,
	164, 137, 138, 142, 141, 59, 130, 147, 136, 140,
	157, 146, -117, -118, 133, 23, 130, 147, 157, 127,
	-133, -113, 94, 12, -127, -127, 41, 119, -55, -42,
	11, 107, -122, -39, -37, 77, -65, -65, 230, 230,
	230, 363, 57, -197, -243, -40, -234, 360, -137, 116,
	237, 151, 232, 226, 256, 243, 276, 230, 277, 219,
	211, 216, 229, 227, 213, 228, 212, 225, 222, 235,
	234, 236, 247, 238, 245, 244, 242, -134, -41, -150,
	59, -137, -65, -65, -65, -65, -65, -122, 324, -86,
	85, -41, 83, -97, 54, -98, -74, -76, -75, -242,
	-2, -92, -121, -96, -86, -102, -41, -41, -41, 56,
	-41, 56, -242, -242, -242, -243, 57, -86, -59, 296,
	300, 301, -41, 86, -122, -175, -180, -177, -121, 147,
	10, 9, 19, 142, 136, 359, 59, 59, 59, -204,
	146, 345, 346, 347, -206, 359, -149, 270, -242, 56,
	23, 29, 63, -207, 56, -197, 358, -197, -242, -147,
	56, -147, 56, 56, 119, 58, -151, -151, -150, -151,
	58, 58, -151, -151, 59, 116, 58, 57, 58, 57,
	58, 57, 56, 55, 54, -179, -180, -69, -121, -55,
	56, -2, 23, -2, 57, 86, -196, 19, 172, 173,
	-55, -212, -214, -121, -248, 130, 147, -121, -132, -121,
	-132, -121, -55, -132, -121, 138, -164, 61, -41, -59,
	-43, -243, -65, 279, 279, 279, -231, -242, -243, -243,
	-243, -243, -243, 19, 57, -243, 57, 19, -242, -36,
	319, -41, 28, -97, 57, -243, -243, -243, 57, 119,
	-243, -90, -93, -121, 147, -222, -224, 350, 351, 352,
	353, 354, 355, -93, -93, -93, -130, -121, -90, -174,
	-122, 61, 63, 58, 57, -147, -178, 272, -147, -166,
	168, 169, 31, 170, -166, 347, 147, 147, -242, -204,
	-205, -41, -93, 56, 337, 57, 58, -207, -121, 241,
	231, 247, 256, -243, 58, 58, 58, -122, -151, -150,
	61, -150, 63, 63, -179, -121, -55, 58, 56, -93,
	-2, -189, -174, 133, 21, 6, 8, 9, 10, 19,
	23, -245, 56, -121, 146, 56, 27, -121, -84, 13,
	-243, -235, -86, 157, -65, -65, -65, -65, -65, -243,
	61, 147, -76, 36, -2, -242, -121, -121, 57, 58,
	58, 57, -243, -243, -243, -58, -182, -184, 327, -183,
	55, 143, 69, 177, 178, 179, 180, 181, 182, 183,
	-177, -89, -205, 54, 71, 171, -205, 54, -167, -121,
	-204, -41, -242, -243, 58, -41, 56, 63, 58, -151,
	-151, 58, 58, 58, 56, 56, -94, 349, -179, 58,
	-168, -121, 186, -215, -217, -7, -9, -8, -11, -10,
	-12, -13, -14, -3, 20, 190, 191, 196, 192, 145,
	135, -246, -121, 105, 86, 61, -159, 57, 56, 56,
	-93, -242, 136, -85, 14, 16, -243, -86, -243, 16,
	-243, -243, -243, -243, -35, 96, 327, 9, -74, -2,
	119, -121, -224, -223, -181, 54, -183, 327, 56, 329,
	59, -170, 86, 61, 86, 86, 86, 86, 86, 86,
	86, 9, 10, 56, 56, -243, -41, -201, 170, 54,
	58, -203, 58, 58, -94, -179, -180, -59, 56, 58,
	-59, -198, 57, 55, 187, -217, -86, -220, -121, -219,
	-121, -121, -121, -213, 38, 193, 194, 195, -60, -65,
	-41, -60, 58, -246, -121, -246, -246, -246, -246, -246,
	-180, -180, 58, -186, -187, 157, 147, -41, -73, -243,
	-236, -237, -41, -243, 325, 51, 330, -98, -243, -121,
	-121, -185, -183, -121, 63, -210, 54, 74, 63, -210,
	-210, -210, -210, -210, -166, -166, -168, -180, -201, -243,
	320, 10, 9, 333, 334, 58, 207, 339, 340, 156,
	341, 170, 342, 343, -59, 58, 58, -182, -93, -94,
	-182, -199, 327, -121, -41, -218, -217, 206, -90, 57,
	-221, -139, 188, -121, 11, 11, 11, 11, -217, 206,
	83, 206, 58, 58, -193, -243, 57, -121, 56, 57,
	41, 326, 331, -242, 58, 57, -205, -205, 58, 58,
	-201, -166, -166, 327, 63, 16, 63, 63, 63, 63,
	340, 156, 342, 16, -182, -59, -182, -181, 58, -59,
	-181, 359, -217, -91, -219, -121, 189, 27, -216, -217,
	-215, -216, -226, 199, 78, -191, -187, 36, -180, -237,
	41, -121, -183, 139, -182, 63, 63, 344, -127, -181,
	-182, -182, -41, 361, 19, -121, 85, -217, 361, 85,
	-227, 200, 199, 159, 58, 327, -243, -55, -181, 119,
	-181, 85, -2, 85, 84, 202, 201, 160, 330, 56,
	-122, 135, 206, -242, 331, -168, -216, -65, 156, 58,
	85, -243, -243,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 825, 0, 525, 525, 525, 525, 525, 525, 0,
	-2, 880, 0, 0, 0, 0, -2, 515, 516, 0,
	518, 519, 1187, 1187, 1187, 1187, 1187, 0, 33, 34,
	1185, 1, 3, 833, 0, 0, 529, 532, 527, 912,
	880, 0, 0, 0, 88, 164, 0, 0, 0, 0,
	0, 878, 878, 0, 0, 0, 0, 878, 404, 405,
	406, 409, 0, 0, 0, 881, 0, 876, 0, 876,
	876, 876, 0, 474, 612, 901, 902, 903, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
	1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107,
	1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
	1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
	1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
	1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
	1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,
	1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 1182, 1183, 1184, 0, 0, 0,
	0, 1188, 1188, 1188, 1188, 0, 1188, 503, 492, 494,
	495, 496, 497, 1188, 512, 513, 502, 514, 517, 520,
	521, 522, 523, 524, 27, 837, 912, 912, 825, 29,
	0, 525, 530, 531, 535, 533, 534, 526, 0, 543,
	547, 0, 622, 912, 627, 629, -2, -2, -2, 0,
	668, 669, 670, 671, 672, 673, 912, 912, 912, 912,
	912, 912, 912, 700, 701, 702, 703, 0, 804, 798,
	806, 807, 808, 809, 810, 811, 812, 631, 632, 0,
	857, 912, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 735, 735, 735, 735, 735, 735, 735, 735,
	0, 0, 0, 0, 0, 913, 0, 0, 559, 561,
	562, 563, 593, 0, 595, 0, 0, 41, 45, 0,
	1151, 861, -2, -2, 0, 0, 0, 899, 900, -2,
	1058, -2, 897, 898, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 0, 165, 179, 179, 0, 0, 878, 0,
	0, 878, 152, 0, 0, 0, 0, 0, 0, 878,
	0, 410, 407, 408, 161, 0, 1188, 0, 0, 0,
	0, 0, 0, 0, 473, 0, 475, 1188, 1188, 1188,
	1188, 1188, 1188, 1188, 1188, 484, 1189, 1190, 485, 486,
	487, 1188, 1188, 489, 0, 504, 0, 498, 28, 1186,
	22, 0, 0, 834, 0, 826, 827, 830, 833, 27,
	532, 0, 537, 536, 528, 0, 544, 912, 912, 0,
	548, 0, 550, 551, 0, 625, 912, 0, 0, 912,
	912, 912, 912, 912, 912, 912, 912, 912, 912, 912,
	912, 912, 912, 912, 0, 0, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 628, 0, 803,
	0, 642, 0, 0, 0, 691, 692, 693, 694, 695,
	696, 697, 704, 0, -2, 805, 0, 27, 0, 666,
	912, 912, 912, 912, 912, 912, 0, 912, 535, 0,
	790, 0, 726, 0, 727, 728, 729, 730, 731, 732,
	733, 734, 781, 0, 783, 784, 785, 786, 787, 788,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	282, 283, 912, -2, 912, 912, 43, 0, 611, 0,
	0, 0, 0, 0, 0, 600, 0, 0, 603, 0,
	0, 0, 0, 594, 0, 0, 614, 1113, 596, 0,
	598, 599, -2, 0, 0, 0, 39, 40, 0, 46,
	1151, 48, 73, 0, 0, 912, 0, 340, 871, 872,
	873, 869, 417, 0, 171, 334, 330, 174, 175, 176,
	177, 178, 317, 255, -2, -2, -2, -2, -2, -2,
	-2, -2, 317, -2, -2, -2, -2, -2, 337, -2,
	-2, -2, -2, -2, 303, -2, 1073, 0, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 172, 0, 0, 0, 0, 0, 878, 0, 0,
	155, 0, 1188, 0, 1188, 0, 0, 0, 115, 116,
	117, 0, 179, 0, 162, 0, 0, 440, 0, 468,
	877, 0, 1188, 471, 472, 613, 904, 905, 476, 477,
	478, 479, 480, 481, 482, 483, 488, 491, 505, 499,
	500, 493, 838, 0, 912, 912, 0, 912, 829, 831,
	832, 837, 30, 535, 0, 813, 0, 0, 912, 538,
	25, 623, 624, 626, 643, 0, 645, 647, 549, 545,
	0, 799, -2, 633, 634, 662, 663, 664, 0, 912,
	912, 912, 660, 638, 0, 674, 675, 676, 677, 678,
	679, 680, 681, 682, 683, 684, 685, 688, 746, 747,
	689, 0, 699, 317, 319, 319, 319, 321, 321, 272,
	273, 0, 0, 327, 249, 250, 251, 252, 253, 686,
	246, 0, 687, 698, 0, 0, 912, 0, 0, 541,
	547, 801, 665, 912, 856, 27, 0, 0, 0, 0,
	-2, -2, -2, -2, -2, -2, 755, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 0,
	670, 0, 0, 798, 0, 0, 912, 796, 793, 912,
	0, 736, 782, 0, 0, 540, 0, 0, 0, 0,
	610, 618, 858, 0, 560, 589, 591, 0, 586, 601,
	602, 604, 0, 606, 0, 608, 609, 564, 565, 566,
	0, 0, 0, 0, 597, 618, 0, 618, 42, 862,
	47, 0, 0, 76, 77, 863, 864, 865, 0, 867,
	341, 0, 163, 419, 0, 422, 166, 167, 168, 169,
	170, 0, 411, -2, 1118, 1141, 1076, 0, 0, 378,
	379, 181, 0, 183, 0, 185, 0, 187, 188, 0,
	190, 192, 411, 0, 0, 0, 0, 0, 0, 180,
	0, 336, 332, 331, 254, 0, 337, 337, 317, 337,
	0, 337, 337, 291, 292, 340, 0, 340, 340, 340,
	340, 0, 0, 327, 327, 277, 278, 279, 266, 0,
	319, 268, 269, 270, 0, 271, 0, 0, 0, 0,
	0, 0, 0, 83, 84, 85, 0, 98, 0, 153,
	154, 99, 879, 100, 137, 0, 122, 119, 120, 121,
	0, 118, 104, 0, 1187, 150, 0, 892, 441, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 0,
	0, 467, 1188, 470, 508, 0, 0, 0, 835, 836,
	0, 828, 23, 0, 874, 875, 814, 815, 557, 644,
	646, 648, 0, -2, 635, 660, 639, 0, 636, 912,
	912, 0, 630, 247, 248, 0, 0, 0, 915, 246,
	705, 0, 912, 552, 709, 667, -2, 710, 711, 0,
	0, 912, 748, 1185, 337, 752, 753, 756, 758, 759,
	761, 766, 772, 773, 776, 779, 780, 0, 912, 912,
	912, 912, 912, 0, 0, 825, 0, 794, 912, 0,
	725, 737, 738, 739, 740, 850, 0, 0, -2, 0,
	0, 825, 0, 912, 912, 583, 590, 912, 0, 584,
	912, 585, 605, 607, 576, 0, 0, 0, 0, 0,
	581, 825, 618, 38, 74, 75, 0, 0, 81, 912,
	342, 0, 423, 417, 421, 0, 388, 0, 0, 0,
	414, 369, 0, 0, 372, 0, 374, -2, 400, 182,
	0, 0, 0, 189, 191, 0, 195, 196, 0, 222,
	0, 0, 206, 0, -2, 210, 211, 212, 246, 214,
	215, 216, 1107, 219, 317, 317, 242, 1079, 0, 0,
	220, 221, 335, 173, 333, 0, 340, 340, 337, 340,
	0, 0, 340, 340, 293, 0, 294, 295, 296, 297,
	0, 315, 0, 275, 276, 0, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 156, 157, 0, 140,
	0, 0, 0, 0, 0, 428, 0, 413, 432, 1187,
	0, 151, 455, 456, 457, 458, 459, 460, 461, 1187,
	0, 442, 443, 444, 445, 446, 447, 448, 449, 450,
	451, 452, 0, 1187, 893, 894, 895, 896, 0, 0,
	469, 490, 0, 912, 506, 507, 839, 0, 24, 618,
	0, 546, 800, 0, 637, 912, 661, 640, 0, 0,
	0, 914, 0, 917, 706, 542, 707, 0, 0, 317,
	317, 751, 317, 321, 754, 317, 757, 317, 760, 762,
	763, 764, 765, 321, 767, 768, 769, 770, 771, 317,
	317, 774, 775, 317, 778, 317, 317, 0, 0, 749,
	750, 0, 0, 0, 0, 0, 0, 799, 0, 791,
	724, 797, 912, 31, 0, 850, 840, 852, 854, 912,
	27, 0, 846, 0, 833, 859, 619, 860, 587, 0,
	592, 0, 0, 0, 0, 595, 0, 833, 37, 78,
	79, 80, 866, 0, 424, 420, 0, 382, 317, 317,
	0, 0, 0, 0, 0, 0, 370, 371, 373, 376,
	400, 401, 402, 205, 184, 411, 186, 0, 912, 0,
	0, 223, 0, 0, 0, 209, 0, 213, 0, 238,
	0, 240, 0, 0, 0, 318, 284, 285, 340, 286,
	325, 326, 287, 288, 338, 339, 337, 0, 337, 0,
	322, 0, 0, 0, 0, 0, 380, 381, 317, 0,
	0, -2, 0, -2, 0, 0, 0, 0, 138, 139,
	0, 123, 0, 106, 0, 453, 454, 414, 434, 0,
	435, 437, 438, 439, 0, 413, 433, 509, 510, 816,
	558, 708, 641, 690, 328, 329, 916, 0, 712, 715,
	713, 714, 716, 912, 912, 719, 912, 912, 912, 0,
	0, 795, 0, 32, 0, 855, -2, 0, 0, 0,
	44, 35, 0, 578, 579, 0, 568, 570, 571, 572,
	573, 574, 575, 0, 0, 0, 614, 582, 36, 418,
	425, 426, 427, 344, 0, 830, 386, 387, 385, 411,
	394, 395, 0, 0, 411, 412, 413, 400, 912, 377,
	0, 0, 0, 912, 202, 0, 207, 0, 218, 1058,
	327, 251, 252, 217, 239, 241, 243, 0, 290, 340,
	316, 340, 0, 0, 0, 0, 0, 620, 0, 0,
	-2, 158, 159, 0, 141, 142, 143, 144, 145, 0,
	0, 105, 108, 0, 0, 0, 0, 414, 818, 0,
	553, 0, 0, 0, 0, 0, 0, 0, 741, 723,
	792, 0, 853, 0, -2, 0, 848, 847, 0, 588,
	567, 0, 615, 616, 617, 566, 366, 345, 0, 347,
	0, 362, 0, 0, 0, 0, 0, 0, 0, 0,
	383, 384, 389, 0, 396, 397, 390, 0, 0, 414,
	0, 0, 912, 244, 197, 0, 224, 0, 0, 305,
	306, 320, 323, 620, 0, 0, 618, 0, 0, 618,
	146, 415, 0, 103, 124, 126, 127, 128, 129, 130,
	131, 132, 133, 825, 0, 0, 0, 0, 61, 912,
	912, 0, -2, 108, 108, -2, 108, 108, 0, 0,
	0, 0, 0, 26, 912, 912, 554, 0, 555, 912,
	718, 717, 720, 721, 0, 0, 0, 0, 843, 27,
	0, 580, 569, 577, 343, 0, 348, 0, 0, 0,
	351, 0, 363, 353, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 244, 0, 193, 0, 0,
	0, 0, 204, 208, 618, 0, 0, 344, 0, 620,
	344, 148, 0, 912, 0, 125, 833, 49, -2, 51,
	56, 57, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 107, 109, -2, 110, 111, 112, 113, 114,
	0, 0, 152, 0, 463, 0, 0, 819, 817, 556,
	821, 822, 824, 722, 0, 0, 0, 851, -2, 849,
	367, 0, 349, 354, 352, 355, 364, 365, 356, 357,
	358, 359, 360, 361, 411, 411, 0, 0, 399, 244,
	245, 0, 0, 200, 201, 203, 0, 0, 0, 0,
	0, 0, 235, 0, 344, 618, 344, 366, 0, 618,
	366, 101, 0, 416, 147, 102, 135, 0, 837, 0,
	0, 53, 55, 59, 62, 63, 64, 65, 66, 0,
	0, 0, 429, 906, 155, 462, 0, 0, 0, 912,
	742, 0, 745, 0, 346, 0, 391, 392, 0, 344,
	194, 198, 199, 0, 226, 0, 228, 229, 230, 231,
	232, 233, 234, 0, 366, 344, 92, 90, 621, 344,
	94, 912, 0, 134, 52, 179, 0, 0, 0, 68,
	0, 0, 909, 907, 0, 436, 464, 0, 0, 823,
	743, 0, 350, 0, 366, 225, 227, 236, 0, 89,
	93, 366, 149, 0, 0, 60, 67, 69, 0, 71,
	431, 0, 908, 0, 430, 0, 368, 0, 398, 0,
	91, 136, -2, 0, 0, 910, 911, 0, 0, 0,
	237, 70, 0, 912, 744, 0, 0, 0, 0, 393,
	72, 465, 466,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 361,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 362, 3, 363, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:411
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:416
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:417
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:421
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:444
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:452
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:456
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:462
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:469
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:475
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:479
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:485
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:489
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:496
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:508
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:520
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:524
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:530
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:536
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:540
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:544
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:549
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:550
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:554
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:558
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:563
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:567
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:573
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:577
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:581
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:585
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:591
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:595
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:608
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:612
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:618
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:623
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:627
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:633
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:640
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:647
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:654
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:662
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:672
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:676
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:680
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:684
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:688
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:694
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:701
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:711
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:715
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:722
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:731
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:739
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:750
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:754
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:760
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:764
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:768
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:774
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:778
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:782
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:786
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:791
		{
			yyVAL.str = ""
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:795
		{
			yyVAL.str = yyDollar[3].str
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:801
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:805
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:811
		{
			yyVAL.str = SessionStr
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:815
		{
			yyVAL.str = GlobalStr
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:821
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 89:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:826
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:846
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 91:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:866
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 92:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:887
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 93:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:903
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 94:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:920
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:939
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:947
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:       CreateSqlSecurityStr,
				SecurityType: yyDollar[3].str,
				Name:         yyDollar[6].tableName.ToViewName(),
				Definition:   yyDollar[8].selStmt,
			}}
		}
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:956
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:964
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:972
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:976
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:980
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 102:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:992
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 103:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1003
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1014
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 105:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1025
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1030
		{
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1031
		{
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1035
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1036
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1037
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1038
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1039
		{
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1040
		{
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1041
		{
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1045
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1049
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1053
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1057
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1063
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1067
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1071
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1077
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1081
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1087
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1091
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1097
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1108
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1120
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1127
		{
			yyVAL.bytes = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1131
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1135
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1140
		{
			yyVAL.bytes = nil
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1144
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1148
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1152
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1156
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1160
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1165
		{
			yyVAL.expr = nil
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1169
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1174
		{
			yyVAL.expr = nil
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1178
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1183
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1187
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1192
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1196
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1202
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1207
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1212
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1218
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1223
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1229
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1234
		{
			yyVAL.bytes = nil
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1238
		{
			yyVAL.bytes = nil
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1244
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1251
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1257
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1261
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1266
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1270
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1274
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1278
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1282
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1288
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1293
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1299
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1310
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1315
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1321
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1334
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1339
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1344
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1349
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1355
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1360
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1365
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1370
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1375
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1380
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1385
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1390
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1395
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1404
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1414
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1419
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1424
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1431
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1438
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1446
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1451
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1457
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1463
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1469
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1475
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1482
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1486
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1490
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1496
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1500
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1504
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1508
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1512
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1516
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1520
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1524
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1528
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1532
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1536
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1542
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1548
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1554
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1558
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1563
		{
			yyVAL.sequence = &Sequence{}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1567
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1572
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1577
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1582
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1587
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1592
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1597
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1602
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1607
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1612
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1617
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1622
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 237:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1627
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1634
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1638
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1642
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1646
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1650
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1654
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1659
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1663
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1668
		{
			yyVAL.bytes = nil
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1681
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1686
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1692
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1696
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 306:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1953
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1958
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1963
		{
			yyVAL.optVal = nil
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1967
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1972
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1976
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1984
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1988
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 323:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1994
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2002
		{
			yyVAL.optVal = nil
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2006
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2010
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2019
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2023
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2027
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2032
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2036
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2041
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2045
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2050
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2054
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2058
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2063
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2067
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2071
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2076
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2080
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2084
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2090
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2095
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2099
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2103
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2109
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2113
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2119
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2123
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2129
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2133
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2138
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2142
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2146
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2150
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2154
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2158
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2162
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2166
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2170
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2176
		{
			yyVAL.str = ""
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2180
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2186
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2190
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2196
		{
			yyVAL.indexPartition = nil
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2200
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 368:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2204
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2210
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2214
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2218
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2222
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2226
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2230
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2234
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2238
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2242
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2248
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2252
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2258
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2263
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2269
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2273
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2279
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2284
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2288
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2298
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2303
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2310
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 391:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2317
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 392:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2324
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 393:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2333
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2345
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2349
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2353
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2357
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 398:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2363
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 399:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2374
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2384
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2388
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2392
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2398
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2402
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2406
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2410
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2414
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2418
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2424
		{
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2425
		{
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2429
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2433
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2438
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2445
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2449
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2456
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2460
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2466
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2470
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2475
		{
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2476
		{
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2480
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2484
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2490
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2494
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2498
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2504
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 429:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2508
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 430:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2522
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 431:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2536
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 432:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2555
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 433:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2564
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 434:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2573
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 435:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2577
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 436:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2581
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 437:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2594
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2604
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 439:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2609
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2614
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 441:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2618
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 462:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2650
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2656
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2660
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 465:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2666
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 466:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2670
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2676
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2682
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2690
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2695
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2703
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2707
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2713
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2717
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2722
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2728
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2732
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2736
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2741
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2745
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2749
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2753
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2757
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2761
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2765
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2769
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2773
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2777
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2781
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2785
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2795
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2799
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2803
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2807
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2811
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2815
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2819
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2829
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2835
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2839
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2845
		{
			yyVAL.str = ""
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2849
		{
			yyVAL.str = "extended "
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2855
		{
			yyVAL.str = ""
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2859
		{
			yyVAL.str = "full "
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2865
		{
			yyVAL.str = ""
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2869
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2873
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2879
		{
			yyVAL.showFilter = nil
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2883
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2887
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2893
		{
			yyVAL.str = ""
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2897
		{
			yyVAL.str = SessionStr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2901
		{
			yyVAL.str = GlobalStr
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2907
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2911
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2917
		{
			yyVAL.statement = &Begin{}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2921
		{
			yyVAL.statement = &Begin{}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2927
		{
			yyVAL.statement = &Commit{}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2933
		{
			yyVAL.statement = &Rollback{}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2939
		{
			yyVAL.statement = &OtherRead{}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2943
		{
			yyVAL.statement = &OtherRead{}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2947
		{
			yyVAL.statement = &OtherRead{}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2951
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2955
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2960
		{
			setAllowComments(yylex, true)
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2964
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2970
		{
			yyVAL.bytes2 = nil
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2974
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2980
		{
			yyVAL.str = UnionStr
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2984
		{
			yyVAL.str = UnionAllStr
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2988
		{
			yyVAL.str = UnionDistinctStr
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2993
		{
			yyVAL.str = ""
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2997
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3001
		{
			yyVAL.str = SQLCacheStr
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3006
		{
			yyVAL.str = ""
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3010
		{
			yyVAL.str = DistinctStr
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3015
		{
			yyVAL.str = ""
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3019
		{
			yyVAL.str = StraightJoinHint
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3024
		{
			yyVAL.selectExprs = nil
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3028
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3034
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3038
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3044
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3048
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3052
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3056
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3061
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3065
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3069
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3076
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3081
		{
			yyVAL.overExpr = nil
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3085
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3089
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3093
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 556:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3097
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy, OrderBy: yyDollar[4].orderBy}
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3102
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3106
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3112
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3116
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3126
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3130
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3134
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3139
		{
			yyVAL.strs = []string{}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3143
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3149
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3153
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3159
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3167
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3171
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3175
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3179
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3185
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 577:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3189
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3195
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3200
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3204
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3210
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3214
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3227
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3231
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3235
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3239
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3245
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3247
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3251
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3253
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3257
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3259
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3262
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3264
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3267
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3271
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3275
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3282
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3288
		{
			yyVAL.str = JoinStr
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3292
		{
			yyVAL.str = JoinStr
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3296
		{
			yyVAL.str = JoinStr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3302
		{
			yyVAL.str = StraightJoinStr
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3308
		{
			yyVAL.str = LeftJoinStr
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3312
		{
			yyVAL.str = LeftJoinStr
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3316
		{
			yyVAL.str = RightJoinStr
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3320
		{
			yyVAL.str = RightJoinStr
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3326
		{
			yyVAL.str = NaturalJoinStr
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3330
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3340
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3344
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3350
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3354
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3359
		{
			yyVAL.indexHints = nil
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3363
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3367
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3371
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3376
		{
			yyVAL.expr = nil
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3380
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3385
		{
			yyVAL.columns = nil
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3389
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3395
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3399
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3403
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3407
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3411
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3415
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3419
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3425
		{
			yyVAL.str = ""
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3429
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3435
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3439
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3445
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3449
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3453
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3457
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 637:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3461
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3465
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3469
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 640:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3473
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 641:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3477
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3481
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3487
		{
			yyVAL.str = IsNullStr
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3491
		{
			yyVAL.str = IsNotNullStr
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3495
		{
			yyVAL.str = IsTrueStr
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3499
		{
			yyVAL.str = IsNotTrueStr
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3503
		{
			yyVAL.str = IsFalseStr
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3507
		{
			yyVAL.str = IsNotFalseStr
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3513
		{
			yyVAL.str = EqualStr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3517
		{
			yyVAL.str = LessThanStr
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3521
		{
			yyVAL.str = GreaterThanStr
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3525
		{
			yyVAL.str = LessEqualStr
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3529
		{
			yyVAL.str = GreaterEqualStr
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3533
		{
			yyVAL.str = NotEqualStr
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3537
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3541
		{
			yyVAL.str = PosixRegexStr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3545
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3549
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3553
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3558
		{
			yyVAL.expr = nil
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3562
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3568
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3572
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3576
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3582
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3588
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3592
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3598
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3602
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3606
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3610
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3614
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3618
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3622
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3626
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3630
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3634
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3638
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3642
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3646
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3650
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3654
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3658
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3662
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3666
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3670
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3674
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3678
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3682
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 690:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3686
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3690
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3694
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3698
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3706
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3720
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3724
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3728
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3736
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3744
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3752
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3762
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 706:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3766
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 707:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3770
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 708:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3774
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3778
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3788
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3792
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 712:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3796
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 713:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3800
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 714:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3804
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 715:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3808
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 716:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3812
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 717:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3816
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 718:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3820
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 719:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3824
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 720:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3828
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 721:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3832
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 722:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3836
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 723:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3840
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 724:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3844
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 725:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3848
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3858
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3862
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3866
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3870
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3875
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3880
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3885
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3890
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3894
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3908
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3912
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3916
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3920
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3926
		{
			yyVAL.str = ""
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3930
		{
			yyVAL.str = BooleanModeStr
		}
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3934
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 744:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3938
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3942
		{
			yyVAL.str = QueryExpansionStr
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3948
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3952
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3958
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3962
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3966
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3970
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3974
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3978
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3984
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3988
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3992
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3996
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4000
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4004
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4008
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4012
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4016
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4020
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4024
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4028
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4032
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4036
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4040
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4044
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4048
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4052
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4056
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4060
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4064
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4068
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4072
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4076
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4080
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4084
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4088
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4094
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4098
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4102
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4106
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4110
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4114
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4118
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4122
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4127
		{
			yyVAL.expr = nil
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4131
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4136
		{
			yyVAL.str = string("")
		}
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4140
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4146
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4150
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 795:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4156
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4161
		{
			yyVAL.expr = nil
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4165
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4171
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4175
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 800:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4179
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4185
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4191
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4195
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4199
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4204
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4209
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4213
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4217
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4221
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4225
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4229
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4233
		{
			yyVAL.expr = &NullVal{}
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4239
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4248
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4252
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4257
		{
			yyVAL.exprs = nil
		}
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4261
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 818:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4266
		{
			yyVAL.expr = nil
		}
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4270
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4275
		{
			yyVAL.partitionBy = nil
		}
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4279
		{
			yyVAL.partitionBy = yyDollar[3].partitionBy
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4285
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4289
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4295
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4300
		{
			yyVAL.orderBy = nil
		}
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4304
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4310
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4314
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4320
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4325
		{
			yyVAL.str = AscScr
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4329
		{
			yyVAL.str = AscScr
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4333
		{
			yyVAL.str = DescScr
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4338
		{
			yyVAL.limit = nil
		}
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4342
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 835:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4346
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 836:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4350
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4355
		{
			yyVAL.str = ""
		}
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4359
		{
			yyVAL.str = ForUpdateStr
		}
	case 839:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4363
		{
			yyVAL.str = ShareModeStr
		}
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4376
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4380
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4384
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 843:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4389
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 844:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4393
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 845:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4397
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4404
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4408
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4412
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 849:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4416
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 850:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4421
		{
			yyVAL.updateExprs = nil
		}
	case 851:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4425
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4431
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4435
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4441
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4445
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4451
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4457
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4467
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4471
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4477
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4483
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4487
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4493
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4497
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4501
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 866:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4506
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4510
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4517
		{
			yyVAL.bytes = []byte("charset")
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4524
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4528
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4532
		{
			yyVAL.expr = &Default{}
		}
	case 876:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4541
		{
			yyVAL.byt = 0
		}
	case 877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4543
		{
			yyVAL.byt = 1
		}
	case 878:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4546
		{
			yyVAL.empty = struct{}{}
		}
	case 879:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4548
		{
			yyVAL.empty = struct{}{}
		}
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4551
		{
			yyVAL.str = ""
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4553
		{
			yyVAL.str = IgnoreStr
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4557
		{
			yyVAL.empty = struct{}{}
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4559
		{
			yyVAL.empty = struct{}{}
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4561
		{
			yyVAL.empty = struct{}{}
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4563
		{
			yyVAL.empty = struct{}{}
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4565
		{
			yyVAL.empty = struct{}{}
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4567
		{
			yyVAL.empty = struct{}{}
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4569
		{
			yyVAL.empty = struct{}{}
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4571
		{
			yyVAL.empty = struct{}{}
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4573
		{
			yyVAL.empty = struct{}{}
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4575
		{
			yyVAL.empty = struct{}{}
		}
	case 892:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4578
		{
			yyVAL.empty = struct{}{}
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4580
		{
			yyVAL.empty = struct{}{}
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4582
		{
			yyVAL.empty = struct{}{}
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4586
		{
			yyVAL.empty = struct{}{}
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4588
		{
			yyVAL.empty = struct{}{}
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4592
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4596
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4603
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4609
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4613
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4618
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4625
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 906:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4631
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4635
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4639
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 909:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4645
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4649
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4653
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 912:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4659
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4663
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 914:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4670
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4677
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4681
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4688
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4981
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4990
		{
			decNesting(yylex)
		}
	case 1187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4995
		{
			forceEOF(yylex)
		}
	case 1188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:5000
		{
			forceEOF(yylex)
		}
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5004
		{
			forceEOF(yylex)
		}
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5008
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
