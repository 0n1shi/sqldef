// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const STATUS = 57489
const VARIABLES = 57490
const RESTRICT = 57491
const CASCADE = 57492
const NO = 57493
const ACTION = 57494
const PERMISSIVE = 57495
const RESTRICTIVE = 57496
const PUBLIC = 57497
const CURRENT_USER = 57498
const SESSION_USER = 57499
const PAD_INDEX = 57500
const FILLFACTOR = 57501
const IGNORE_DUP_KEY = 57502
const STATISTICS_NORECOMPUTE = 57503
const STATISTICS_INCREMENTAL = 57504
const ALLOW_ROW_LOCKS = 57505
const ALLOW_PAGE_LOCKS = 57506
const BEFORE = 57507
const AFTER = 57508
const EACH = 57509
const ROW = 57510
const SCROLL = 57511
const CURSOR = 57512
const OPEN = 57513
const CLOSE = 57514
const FETCH = 57515
const PRIOR = 57516
const FIRST = 57517
const LAST = 57518
const DEALLOCATE = 57519
const INSTEAD = 57520
const OF = 57521
const DEFERRABLE = 57522
const INITIALLY = 57523
const IMMEDIATE = 57524
const DEFERRED = 57525
const CONCURRENTLY = 57526
const SQL = 57527
const SECURITY = 57528
const BEGIN = 57529
const START = 57530
const TRANSACTION = 57531
const COMMIT = 57532
const ROLLBACK = 57533
const BIT = 57534
const TINYINT = 57535
const SMALLINT = 57536
const SMALLSERIAL = 57537
const MEDIUMINT = 57538
const INT = 57539
const INTEGER = 57540
const SERIAL = 57541
const BIGINT = 57542
const BIGSERIAL = 57543
const INTNUM = 57544
const REAL = 57545
const DOUBLE = 57546
const PRECISION = 57547
const FLOAT_TYPE = 57548
const DECIMAL = 57549
const NUMERIC = 57550
const SMALLMONEY = 57551
const MONEY = 57552
const TIME = 57553
const TIMESTAMP = 57554
const DATETIME = 57555
const YEAR = 57556
const DATETIMEOFFSET = 57557
const DATETIME2 = 57558
const SMALLDATETIME = 57559
const CHAR = 57560
const VARCHAR = 57561
const VARYING = 57562
const BOOL = 57563
const CHARACTER = 57564
const VARBINARY = 57565
const NCHAR = 57566
const NVARCHAR = 57567
const NTEXT = 57568
const UUID = 57569
const TEXT = 57570
const TINYTEXT = 57571
const MEDIUMTEXT = 57572
const LONGTEXT = 57573
const CITEXT = 57574
const BLOB = 57575
const TINYBLOB = 57576
const MEDIUMBLOB = 57577
const LONGBLOB = 57578
const JSON = 57579
const JSONB = 57580
const ENUM = 57581
const GEOMETRY = 57582
const POINT = 57583
const LINESTRING = 57584
const POLYGON = 57585
const GEOMETRYCOLLECTION = 57586
const MULTIPOINT = 57587
const MULTILINESTRING = 57588
const MULTIPOLYGON = 57589
const VARIADIC = 57590
const ARRAY = 57591
const NOW = 57592
const GETDATE = 57593
const BPCHAR = 57594
const TEXT_PATTERN_OPS = 57595
const NULLX = 57596
const AUTO_INCREMENT = 57597
const APPROXNUM = 57598
const SIGNED = 57599
const UNSIGNED = 57600
const ZEROFILL = 57601
const ZONE = 57602
const AUTOINCREMENT = 57603
const DATABASES = 57604
const TABLES = 57605
const VSCHEMA_TABLES = 57606
const EXTENDED = 57607
const FULL = 57608
const PROCESSLIST = 57609
const NAMES = 57610
const CHARSET = 57611
const GLOBAL = 57612
const SESSION = 57613
const ISOLATION = 57614
const LEVEL = 57615
const READ = 57616
const WRITE = 57617
const ONLY = 57618
const REPEATABLE = 57619
const COMMITTED = 57620
const UNCOMMITTED = 57621
const SERIALIZABLE = 57622
const NEW = 57623
const CONCAT_NULL_YIELDS_NULL = 57624
const CURSOR_CLOSE_ON_COMMIT = 57625
const QUOTED_IDENTIFIER = 57626
const ARITHABORT = 57627
const FMTONLY = 57628
const NOCOUNT = 57629
const NOEXEC = 57630
const NUMERIC_ROUNDABORT = 57631
const ANSI_DEFAULTS = 57632
const ANSI_NULL_DFLT_OFF = 57633
const ANSI_NULL_DFLT_ON = 57634
const ANSI_NULLS = 57635
const ANSI_PADDING = 57636
const ANSI_WARNINGS = 57637
const FORCEPLAN = 57638
const SHOWPLAN_ALL = 57639
const SHOWPLAN_TEXT = 57640
const SHOWPLAN_XML = 57641
const IMPLICIT_TRANSACTIONS = 57642
const REMOTE_PROC_TRANSACTIONS = 57643
const XACT_ABORT = 57644
const CURRENT_TIMESTAMP = 57645
const DATABASE = 57646
const CURRENT_DATE = 57647
const CURRENT_TIME = 57648
const LOCALTIME = 57649
const LOCALTIMESTAMP = 57650
const UTC_DATE = 57651
const UTC_TIME = 57652
const UTC_TIMESTAMP = 57653
const REPLACE = 57654
const CONVERT = 57655
const CAST = 57656
const SUBSTR = 57657
const SUBSTRING = 57658
const GROUP_CONCAT = 57659
const SEPARATOR = 57660
const INHERIT = 57661
const LEAD = 57662
const LAG = 57663
const MATCH = 57664
const AGAINST = 57665
const BOOLEAN = 57666
const LANGUAGE = 57667
const WITH = 57668
const WITHOUT = 57669
const PARSER = 57670
const QUERY = 57671
const EXPANSION = 57672
const UNUSED = 57673
const VIRTUAL = 57674
const STORED = 57675
const GENERATED = 57676
const ALWAYS = 57677
const IDENTITY = 57678
const SEQUENCE = 57679
const INCREMENT = 57680
const MINVALUE = 57681
const CACHE = 57682
const CYCLE = 57683
const OWNED = 57684
const NONE = 57685
const CLUSTERED = 57686
const NONCLUSTERED = 57687
const REPLICATION = 57688
const COLUMNSTORE = 57689
const INCLUDE = 57690
const HOLDLOCK = 57691
const NOLOCK = 57692
const NOWAIT = 57693
const PAGLOCK = 57694
const ROWLOCK = 57695
const TABLELOCK = 57696
const DEFINER = 57697
const INVOKER = 57698
const TYPECAST = 57699
const CHECK = 57700
const OVER = 57701

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	130, 386,
	-2, 143,
	-1, 461,
	59, 361,
	-2, 358,
	-1, 480,
	119, 772,
	-2, 232,
	-1, 498,
	119, 770,
	-2, 766,
	-1, 499,
	119, 771,
	-2, 767,
	-1, 603,
	119, 772,
	-2, 232,
	-1, 625,
	266, 781,
	-2, 679,
	-1, 660,
	266, 781,
	-2, 426,
	-1, 690,
	5, 33,
	-2, 13,
	-1, 696,
	5, 33,
	-2, 15,
	-1, 832,
	266, 781,
	-2, 426,
	-1, 978,
	119, 774,
	-2, 769,
	-1, 989,
	266, 781,
	-2, 300,
	-1, 1058,
	266, 781,
	-2, 426,
	-1, 1118,
	58, 95,
	-2, 162,
	-1, 1121,
	58, 95,
	-2, 162,
	-1, 1170,
	5, 34,
	-2, 552,
	-1, 1240,
	5, 33,
	-2, 14,
	-1, 1253,
	187, 60,
	-2, 162,
	-1, 1294,
	58, 95,
	-2, 161,
	-1, 1416,
	86, 950,
	-2, 92,
	-1, 1420,
	86, 943,
	-2, 756,
	-1, 1502,
	55, 47,
	57, 47,
	-2, 49,
	-1, 1661,
	5, 33,
	-2, 727,
	-1, 1686,
	5, 33,
	-2, 56,
	-1, 1754,
	5, 34,
	-2, 728,
	-1, 1784,
	5, 33,
	-2, 730,
	-1, 1805,
	5, 34,
	-2, 731,
}

const yyPrivate = 57344

const yyLast = 17541

var yyAct = [...]int16{
	499, 1593, 1679, 1763, 1712, 985, 1611, 615, 1713, 795,
	1392, 1525, 33, 1709, 587, 1652, 1084, 33, 33, 110,
	1684, 1594, 1070, 1538, 1671, 1527, 123, 1537, 1512, 1400,
	1414, 33, 33, 1586, 1401, 1087, 901, 874, 1090, 1523,
	1257, 703, 1411, 1254, 1397, 1166, 1234, 685, 725, 889,
	1127, 1229, 513, 26, 1101, 1393, 1150, 913, 590, 988,
	962, 651, 1160, 580, 1066, 1025, 122, 1028, 284, 446,
	450, 1308, 684, 1039, 939, 878, 1053, 605, 977, 250,
	568, 124, 453, 585, 598, 130, 850, 125, 556, 30,
	794, 854, 586, 477, 104, 105, 198, 822, 189, 218,
	33, 33, 479, 298, 299, 1332, 485, 502, 129, 129,
	212, 233, 975, 252, 110, 1583, 9, 113, 1293, 1216,
	110, 563, 33, 752, 1494, 762, 762, 652, 746, 248,
	749, 294, 295, 1417, 1067, 813, 764, 765, 766, 767,
	768, 769, 770, 115, 747, 748, 745, 771, 772, 773,
	774, 751, 750, 760, 761, 753, 754, 755, 756, 757,
	758, 759, 752, 569, 1406, 762, 570, 571, 1807, 731,
	266, 755, 756, 757, 758, 759, 752, 190, 193, 762,
	572, 116, 117, 107, 753, 754, 755, 756, 757, 758,
	759, 752, 110, 33, 762, 110, 475, 110, 110, 30,
	110, 1474, 835, 1353, 1354, 1744, 33, 110, 110, 929,
	930, 1803, 110, 33, 693, 1702, 1114, 1104, 1103, 194,
	898, 196, 1132, 1743, 33, 251, 1131, 215, 1105, 1680,
	207, 1796, 306, 525, 526, 33, 1467, 1386, 1163, 1106,
	1701, 1348, 1323, 1464, 118, 110, 1764, 1765, 1766, 1767,
	1768, 1769, 1539, 1648, 1540, 286, 493, 1224, 751, 750,
	760, 761, 753, 754, 755, 756, 757, 758, 759, 752,
	290, 1690, 762, 1734, 1689, 279, 309, 1691, 208, 1735,
	1736, 25, 1621, 129, 210, 307, 1622, 1623, 110, 33,
	445, 1450, 110, 1795, 524, 864, 863, 504, 254, 789,
	521, 454, 267, 1036, 871, 259, 33, 1355, 490, 256,
	492, 491, 465, 469, 268, 269, 270, 271, 1340, 1330,
	677, 517, 518, 519, 520, 676, 496, 1182, 280, 1180,
	1739, 1634, 1433, 489, 20, 1245, 15, 195, 101, 1697,
	1696, 487, 1637, 1112, 1638, 543, 443, 304, 1533, 16,
	1635, 23, 1244, 1111, 919, 1554, 289, 1557, 200, 292,
	564, 296, 297, 1086, 303, 1151, 532, 17, 18, 699,
	700, 228, 438, 1587, 460, 710, 441, 229, 570, 571,
	1781, 1302, 733, 545, 763, 763, 875, 732, 468, 728,
	467, 455, 711, 199, 230, 1561, 1107, 1108, 1110, 548,
	544, 1473, 1109, 1475, 896, 1359, 562, 550, 102, 471,
	1126, 713, 693, 1738, 1114, 1104, 1103, 1361, 114, 1460,
	846, 1461, 27, 882, 763, 537, 1105, 1331, 506, 846,
	103, 508, 1683, 511, 512, 1283, 846, 1106, 763, 200,
	1682, 260, 1681, 33, 100, 461, 99, 1612, 1614, 119,
	33, 112, 531, 763, 1356, 551, 535, 440, 742, 282,
	283, 1800, 230, 751, 750, 760, 761, 753, 754, 755,
	756, 757, 758, 759, 752, 574, 1556, 762, 579, 751,
	750, 760, 761, 753, 754, 755, 756, 757, 758, 759,
	752, 1633, 1376, 762, 281, 6, 7, 555, 267, 836,
	1649, 779, 780, 751, 750, 760, 761, 753, 754, 755,
	756, 757, 758, 759, 752, 1132, 1466, 762, 723, 1757,
	445, 201, 202, 723, 726, 727, 729, 557, 1478, 1613,
	1700, 763, 474, 1650, 203, 110, 214, 1115, 1122, 1692,
	549, 1112, 110, 1542, 33, 458, 653, 33, 1365, 33,
	29, 1111, 1196, 33, 19, 33, 496, 529, 554, 663,
	1168, 665, 1057, 489, 668, 669, 21, 22, 793, 24,
	527, 487, 648, 575, 523, 792, 553, 573, 661, 33,
	263, 650, 737, 265, 206, 1631, 1669, 743, 1284, 1285,
	1286, 691, 1192, 691, 1107, 1108, 1110, 456, 457, 459,
	1109, 671, 201, 202, 1357, 1358, 1360, 1362, 1363, 730,
	1378, 687, 515, 514, 1541, 203, 229, 846, 686, 1143,
	738, 704, 796, 1142, 708, 946, 712, 690, 740, 696,
	445, 807, 445, 230, 1141, 741, 740, 1693, 1191, 944,
	945, 943, 707, 777, 742, 736, 1140, 702, 706, 1377,
	735, 714, 742, 33, 1209, 695, 704, 1139, 672, 1174,
	216, 1173, 33, 1138, 1137, 790, 855, 1657, 741, 740,
	853, 691, 741, 740, 1135, 741, 740, 1694, 664, 844,
	741, 740, 1432, 33, 110, 742, 716, 1350, 443, 742,
	33, 1088, 742, 914, 915, 1029, 110, 742, 1029, 688,
	1201, 779, 780, 741, 740, 902, 701, 452, 921, 1190,
	33, 741, 740, 917, 33, 209, 204, 859, 1352, 904,
	742, 33, 934, 936, 937, 827, 451, 828, 742, 935,
	129, 873, 452, 33, 852, 1115, 763, 452, 1309, 445,
	925, 1424, 487, 839, 741, 740, 931, 932, 918, 691,
	452, 1239, 763, 940, 867, 1309, 464, 1571, 1310, 687,
	868, 742, 741, 740, 1569, 1468, 686, 704, 815, 816,
	817, 818, 819, 820, 821, 1310, 763, 848, 577, 742,
	33, 33, 505, 1631, 1570, 880, 510, 895, 33, 942,
	509, 897, 847, 903, 33, 858, 916, 505, 557, 1472,
	613, 920, 739, 796, 941, 1471, 987, 1018, 463, 912,
	923, 892, 1469, 1470, 924, 922, 1311, 1019, 1021, 108,
	741, 740, 1307, 1030, 505, 905, 906, 907, 908, 909,
	910, 911, 1044, 691, 1153, 1154, 1155, 742, 866, 865,
	647, 1042, 530, 845, 860, 965, 862, 528, 869, 968,
	501, 828, 691, 963, 577, 964, 33, 972, 972, 791,
	881, 967, 978, 970, 973, 974, 1167, 791, 1136, 861,
	445, 445, 984, 986, 522, 470, 890, 846, 1024, 875,
	1133, 1022, 969, 33, 1790, 1789, 1022, 670, 983, 890,
	1788, 33, 1242, 1777, 1506, 33, 1733, 846, 693, 567,
	1114, 1104, 1103, 1756, 846, 1037, 566, 1040, 1041, 720,
	1639, 846, 1105, 1059, 108, 1060, 1509, 846, 1368, 1038,
	108, 1706, 846, 1106, 1046, 1048, 976, 979, 890, 1485,
	1292, 1074, 1149, 1055, 565, 245, 1129, 462, 1507, 693,
	1505, 248, 249, 720, 1445, 1068, 875, 1091, 1242, 1444,
	687, 940, 1514, 1517, 1518, 1519, 1515, 686, 1516, 1520,
	1085, 693, 1672, 1673, 1659, 1590, 236, 1505, 1089, 1660,
	1441, 1440, 1118, 720, 1437, 720, 1436, 1630, 720, 1369,
	1225, 243, 1581, 231, 1049, 846, 33, 1169, 1049, 577,
	232, 1783, 108, 900, 1225, 108, 1710, 108, 108, 1668,
	108, 1227, 941, 890, 1069, 981, 846, 308, 108, 890,
	928, 577, 108, 1117, 720, 719, 680, 679, 1156, 674,
	675, 674, 673, 121, 120, 1509, 1508, 1112, 1049, 1243,
	1212, 1242, 110, 790, 1211, 1202, 1063, 1111, 1195, 1668,
	1116, 1062, 1061, 542, 1668, 108, 1045, 870, 239, 497,
	234, 244, 1509, 891, 849, 33, 841, 838, 241, 240,
	667, 666, 1179, 1055, 662, 541, 33, 1752, 542, 981,
	1509, 1620, 1183, 1534, 1407, 1379, 1049, 1232, 1235, 1175,
	1107, 1108, 1110, 890, 1194, 720, 1109, 542, 108, 837,
	693, 678, 108, 447, 1246, 1200, 682, 681, 577, 1198,
	1728, 1726, 1698, 1672, 1673, 1710, 33, 1458, 33, 33,
	33, 1236, 256, 1223, 1438, 1226, 285, 110, 1289, 33,
	33, 33, 33, 33, 33, 33, 33, 978, 1221, 33,
	691, 1217, 1055, 33, 1147, 445, 1219, 1222, 691, 1248,
	577, 1214, 687, 557, 1238, 1220, 1247, 33, 33, 686,
	1146, 751, 750, 760, 761, 753, 754, 755, 756, 757,
	758, 759, 752, 1319, 1125, 762, 1237, 1124, 1305, 33,
	1065, 1064, 1300, 1301, 1240, 1287, 1290, 1043, 1249, 1250,
	1251, 1338, 1255, 1253, 237, 1279, 1280, 1281, 189, 894,
	238, 976, 872, 1317, 1318, 1320, 1294, 1118, 1118, 1294,
	1118, 1118, 557, 557, 689, 1321, 1303, 1351, 659, 658,
	1306, 1312, 1313, 1314, 1315, 1316, 656, 578, 533, 280,
	1326, 1115, 476, 472, 1085, 557, 582, 33, 449, 1333,
	902, 1371, 273, 1335, 272, 1337, 1349, 261, 1295, 1296,
	1297, 1298, 1299, 33, 904, 11, 445, 287, 288, 1388,
	1341, 110, 110, 546, 33, 1675, 33, 1128, 1152, 1381,
	683, 534, 291, 246, 197, 247, 978, 1605, 1372, 1631,
	1603, 1394, 1606, 1384, 445, 1604, 1678, 616, 1677, 497,
	1409, 1291, 1607, 33, 1518, 1519, 1602, 242, 1601, 1079,
	1080, 1399, 1373, 1380, 1778, 33, 840, 481, 482, 483,
	1390, 1742, 1334, 1395, 704, 486, 484, 494, 495, 1579,
	1404, 1488, 809, 448, 1547, 516, 1230, 646, 903, 1750,
	1387, 1549, 1522, 914, 915, 439, 305, 1228, 1423, 1231,
	1347, 129, 1083, 445, 497, 108, 1076, 1077, 1617, 645,
	1026, 1434, 108, 1430, 540, 538, 536, 205, 1339, 1435,
	905, 906, 907, 908, 909, 910, 911, 1031, 1465, 888,
	1425, 1514, 1517, 1518, 1519, 1515, 33, 1516, 1520, 698,
	561, 1071, 1294, 1447, 1448, 1749, 1574, 1476, 1451, 1446,
	1072, 875, 1748, 1489, 1490, 1235, 1708, 1225, 1442, 1443,
	884, 1429, 885, 886, 887, 1145, 110, 110, 300, 301,
	302, 877, 1479, 1428, 1427, 883, 110, 110, 33, 1426,
	1325, 1324, 1797, 33, 1375, 1398, 560, 559, 1144, 466,
	33, 1484, 879, 213, 763, 1487, 1491, 1504, 709, 893,
	8, 1, 1256, 1492, 13, 12, 1651, 1215, 293, 33,
	33, 1503, 1550, 445, 1552, 1370, 1498, 1495, 1497, 1374,
	1165, 1531, 788, 602, 1636, 1535, 1555, 1493, 588, 1762,
	691, 857, 1408, 1252, 1404, 1548, 1389, 1282, 500, 235,
	1553, 1551, 1210, 473, 14, 1385, 1241, 110, 1560, 1367,
	697, 539, 497, 1304, 108, 1532, 1558, 899, 1091, 722,
	445, 221, 715, 442, 28, 10, 108, 1544, 1134, 1334,
	1582, 110, 488, 493, 222, 110, 110, 220, 219, 217,
	110, 110, 110, 110, 110, 503, 557, 1559, 1130, 253,
	258, 128, 110, 1595, 126, 110, 127, 131, 1412, 110,
	1521, 1543, 1576, 33, 547, 33, 1589, 1052, 775, 1596,
	1688, 1419, 1599, 33, 1591, 1597, 1598, 1626, 1600, 1608,
	33, 1717, 1585, 1233, 1616, 490, 1747, 492, 491, 1409,
	1501, 1502, 110, 1404, 1619, 1618, 1707, 1199, 1404, 1404,
	1404, 1404, 1404, 806, 1027, 589, 933, 601, 600, 691,
	1653, 927, 110, 1404, 599, 1658, 1022, 744, 1481, 1403,
	1483, 110, 1499, 308, 1513, 1511, 1628, 1510, 1674, 857,
	857, 1670, 1402, 1580, 1023, 857, 1497, 1247, 1497, 1023,
	129, 1463, 445, 1642, 1647, 983, 33, 1078, 1383, 1102,
	445, 1656, 876, 1081, 1676, 5, 1482, 1629, 1113, 1654,
	1665, 1486, 857, 857, 857, 857, 1100, 4, 980, 982,
	1404, 691, 3, 1099, 1687, 1695, 1098, 1097, 1095, 1404,
	1096, 33, 857, 1093, 1032, 1033, 1034, 1094, 1035, 1092,
	1073, 1711, 692, 33, 33, 1588, 1562, 2, 1714, 0,
	1592, 0, 691, 497, 1595, 1724, 1627, 1661, 1725, 0,
	0, 1727, 0, 1595, 1719, 0, 0, 1585, 0, 1705,
	1723, 0, 0, 1685, 1047, 0, 1050, 1051, 1737, 33,
	0, 0, 1720, 1577, 0, 1722, 0, 1578, 1686, 0,
	0, 0, 1653, 0, 0, 1741, 0, 691, 0, 0,
	0, 796, 1746, 0, 1082, 1751, 1641, 33, 445, 0,
	33, 33, 33, 110, 33, 0, 0, 1022, 0, 0,
	1718, 1685, 0, 1759, 1773, 1760, 1022, 576, 0, 0,
	1775, 1497, 0, 1716, 1779, 796, 0, 33, 33, 1780,
	1714, 1782, 0, 0, 0, 0, 654, 0, 1761, 1148,
	0, 1770, 1771, 1772, 660, 0, 1085, 0, 0, 0,
	1794, 0, 0, 0, 1703, 0, 0, 0, 1798, 0,
	0, 1714, 0, 0, 1801, 0, 1585, 1802, 0, 1804,
	0, 33, 0, 0, 704, 0, 0, 704, 704, 704,
	691, 1774, 1595, 1164, 694, 0, 694, 0, 781, 782,
	783, 784, 785, 786, 787, 0, 857, 1170, 1171, 0,
	1172, 1497, 1204, 0, 1786, 1787, 0, 0, 1655, 0,
	691, 0, 734, 0, 0, 0, 1784, 1664, 0, 1666,
	857, 1667, 0, 0, 0, 0, 0, 0, 308, 857,
	0, 776, 778, 0, 0, 497, 0, 0, 1197, 0,
	0, 0, 0, 0, 1203, 1022, 1799, 0, 1806, 0,
	0, 1205, 1206, 660, 1207, 1208, 255, 0, 0, 0,
	0, 0, 1213, 0, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 0, 808, 0, 810, 811, 812, 814,
	814, 814, 814, 814, 814, 814, 814, 108, 831, 832,
	833, 834, 0, 1721, 693, 0, 1114, 1104, 1103, 0,
	0, 0, 693, 0, 1114, 1104, 1103, 0, 1105, 0,
	0, 693, 0, 1114, 1104, 1103, 1105, 0, 0, 1106,
	0, 0, 0, 0, 0, 1105, 0, 1106, 0, 0,
	0, 0, 0, 0, 0, 660, 1106, 0, 0, 0,
	0, 938, 694, 0, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 0,
	0, 0, 693, 1322, 1114, 1104, 1103, 308, 0, 0,
	1457, 0, 0, 0, 0, 0, 1105, 0, 0, 0,
	0, 0, 0, 0, 926, 0, 0, 1106, 0, 0,
	1776, 257, 0, 0, 262, 0, 0, 264, 0, 1020,
	750, 760, 761, 753, 754, 755, 756, 757, 758, 759,
	752, 0, 0, 762, 274, 275, 276, 277, 278, 0,
	0, 108, 108, 1112, 0, 0, 694, 0, 0, 0,
	0, 1112, 0, 1111, 1366, 0, 0, 0, 0, 0,
	1112, 1111, 0, 0, 0, 797, 0, 0, 0, 0,
	1111, 1382, 751, 750, 760, 761, 753, 754, 755, 756,
	757, 758, 759, 752, 0, 0, 762, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1107, 1108, 1110, 0,
	0, 0, 1109, 0, 1107, 1108, 1110, 0, 0, 0,
	1109, 1112, 0, 1107, 1108, 1110, 0, 0, 0, 1109,
	0, 1111, 1327, 0, 0, 0, 1058, 0, 0, 0,
	0, 0, 0, 0, 0, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 1075, 0, 751, 750, 760, 761,
	753, 754, 755, 756, 757, 758, 759, 752, 0, 0,
	762, 1157, 1158, 1159, 1107, 1108, 1110, 0, 0, 1452,
	1109, 1453, 1454, 0, 857, 1455, 1456, 0, 1193, 1459,
	0, 0, 0, 0, 0, 0, 108, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 1529, 1477, 0,
	0, 0, 0, 0, 0, 0, 781, 751, 750, 760,
	761, 753, 754, 755, 756, 757, 758, 759, 752, 0,
	0, 762, 751, 750, 760, 761, 753, 754, 755, 756,
	757, 758, 759, 752, 0, 0, 762, 1115, 0, 0,
	0, 0, 0, 0, 1058, 1115, 1162, 0, 0, 0,
	0, 0, 0, 0, 1115, 0, 0, 0, 1161, 0,
	0, 0, 0, 0, 0, 0, 0, 1573, 0, 0,
	751, 750, 760, 761, 753, 754, 755, 756, 757, 758,
	759, 752, 0, 0, 762, 1740, 0, 0, 0, 0,
	0, 108, 763, 1632, 0, 108, 108, 1568, 0, 1023,
	108, 108, 108, 108, 108, 1115, 0, 0, 0, 0,
	0, 0, 1609, 1575, 0, 108, 0, 0, 0, 1529,
	0, 0, 0, 0, 0, 0, 0, 0, 1288, 823,
	751, 750, 760, 761, 753, 754, 755, 756, 757, 758,
	759, 752, 0, 694, 762, 763, 0, 0, 0, 0,
	0, 694, 108, 1496, 0, 0, 0, 1610, 0, 0,
	0, 0, 0, 0, 825, 0, 0, 655, 657, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 1328, 1329,
	0, 108, 760, 761, 753, 754, 755, 756, 757, 758,
	759, 752, 0, 1640, 762, 0, 0, 1643, 1644, 1645,
	1646, 0, 0, 823, 0, 0, 0, 0, 1342, 1343,
	1344, 1345, 1346, 0, 0, 0, 0, 0, 0, 763,
	0, 0, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 0, 0, 721, 724, 0, 0, 825, 0,
	0, 0, 0, 826, 0, 0, 0, 0, 0, 0,
	1023, 132, 824, 0, 0, 0, 0, 830, 829, 1023,
	0, 693, 0, 1114, 1104, 1103, 0, 0, 693, 0,
	1114, 1104, 1103, 0, 0, 1105, 0, 0, 0, 0,
	763, 1699, 1105, 0, 1364, 1704, 1106, 0, 0, 0,
	0, 0, 0, 1106, 0, 763, 172, 173, 174, 175,
	176, 177, 178, 179, 180, 181, 0, 182, 183, 0,
	184, 185, 186, 188, 187, 0, 966, 826, 1732, 1405,
	0, 0, 0, 1529, 0, 132, 824, 0, 0, 0,
	0, 830, 829, 693, 0, 1114, 1104, 1103, 0, 1745,
	1584, 0, 0, 763, 1449, 0, 0, 1105, 0, 1753,
	1754, 1755, 0, 1758, 133, 0, 0, 0, 1106, 693,
	0, 1114, 1104, 1103, 721, 0, 0, 0, 0, 0,
	0, 1439, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 0, 0, 0, 1023, 0,
	1112, 0, 0, 0, 0, 0, 0, 1112, 0, 0,
	1111, 0, 0, 763, 1791, 1792, 1793, 1111, 0, 0,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 1805, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 1108, 1110, 0, 0, 0, 1109,
	1107, 1108, 1110, 763, 0, 0, 1109, 0, 0, 0,
	0, 0, 1112, 0, 0, 0, 1431, 0, 0, 0,
	0, 0, 1111, 1524, 1563, 1564, 0, 1565, 1566, 1567,
	0, 0, 0, 0, 0, 0, 0, 0, 1112, 0,
	0, 0, 1336, 0, 0, 0, 0, 0, 1111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 1108, 1110, 0, 0,
	0, 1109, 0, 0, 0, 0, 0, 991, 0, 0,
	0, 1391, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1107, 1108, 1110, 0, 0, 0, 1109, 1258, 1259,
	1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269,
	1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 0,
	0, 0, 1405, 0, 0, 0, 0, 1405, 1405, 1405,
	1405, 1405, 0, 0, 1115, 1000, 1006, 1004, 0, 0,
	1001, 1115, 1524, 999, 1615, 0, 1008, 0, 0, 1007,
	993, 1003, 1005, 1002, 997, 0, 992, 0, 1010, 1009,
	1011, 990, 1013, 0, 0, 0, 1017, 1014, 1016, 1015,
	0, 1012, 0, 0, 0, 0, 0, 0, 0, 0,
	994, 995, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1405,
	996, 998, 0, 0, 1662, 1663, 1115, 0, 1405, 0,
	0, 0, 0, 0, 0, 0, 1176, 1177, 0, 1178,
	0, 0, 0, 0, 1181, 0, 0, 0, 0, 0,
	0, 0, 1115, 0, 0, 694, 1184, 1185, 0, 0,
	1186, 1187, 0, 1188, 1189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1715, 0,
	694, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1729,
	1730, 1731, 0, 0, 0, 0, 0, 0, 424, 413,
	0, 372, 426, 342, 360, 434, 362, 363, 399, 321,
	382, 58, 357, 339, 36, 345, 314, 352, 315, 343,
	374, 43, 340, 0, 415, 385, 49, 96, 0, 432,
	52, 390, 0, 75, 56, 0, 0, 377, 417, 380,
	408, 371, 400, 329, 389, 427, 358, 395, 428, 0,
	0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
	1715, 0, 0, 1785, 394, 422, 354, 437, 0, 398,
	313, 392, 0, 319, 322, 433, 420, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 376, 381, 405, 368,
	0, 1715, 0, 694, 0, 0, 0, 0, 0, 0,
	0, 0, 346, 0, 388, 0, 0, 0, 326, 320,
	0, 373, 0, 0, 0, 328, 0, 347, 406, 0,
	310, 411, 418, 370, 55, 84, 421, 367, 366, 0,
	0, 0, 0, 0, 0, 359, 50, 403, 435, 425,
	378, 416, 344, 353, 0, 351, 67, 59, 80, 387,
	401, 65, 53, 78, 62, 79, 423, 77, 83, 70,
	38, 57, 34, 61, 66, 0, 42, 0, 89, 90,
	91, 92, 93, 94, 95, 318, 311, 348, 409, 412,
	333, 397, 323, 355, 404, 356, 379, 338, 0, 0,
	0, 0, 0, 0, 0, 74, 73, 37, 76, 1413,
	40, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	0, 0, 0, 1176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 87,
	88, 317, 337, 419, 85, 0, 0, 0, 1422, 1420,
	1416, 1415, 48, 54, 64, 86, 396, 68, 41, 81,
	72, 1418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 336, 330, 331, 383, 384, 429,
	430, 431, 407, 327, 0, 334, 335, 0, 414, 47,
	97, 98, 386, 35, 0, 51, 436, 0, 0, 63,
	45, 82, 0, 0, 361, 312, 365, 0, 0, 0,
	0, 0, 0, 0, 324, 325, 69, 0, 369, 364,
	391, 393, 402, 410, 0, 341, 375, 424, 413, 0,
	372, 426, 342, 360, 434, 362, 363, 399, 321, 382,
	58, 357, 339, 36, 345, 314, 352, 315, 343, 374,
	43, 340, 0, 415, 385, 49, 96, 0, 432, 52,
	390, 0, 75, 56, 0, 0, 377, 417, 380, 408,
	371, 400, 329, 389, 427, 358, 395, 428, 0, 0,
	0, 32, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 394, 422, 354, 437, 0, 398, 313,
	392, 0, 319, 322, 433, 420, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 376, 381, 405, 368, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 388, 0, 0, 0, 326, 320, 0,
	373, 0, 0, 0, 328, 0, 347, 406, 0, 310,
	411, 418, 370, 55, 84, 421, 367, 366, 0, 0,
	0, 0, 0, 0, 359, 50, 403, 435, 425, 378,
	416, 344, 353, 0, 351, 67, 59, 80, 387, 401,
	65, 53, 78, 62, 79, 423, 77, 83, 70, 38,
	57, 34, 61, 66, 0, 42, 0, 89, 90, 91,
	92, 93, 94, 95, 318, 311, 348, 409, 412, 333,
	397, 323, 355, 404, 356, 379, 338, 0, 0, 0,
	0, 0, 0, 0, 74, 73, 37, 76, 1536, 40,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 0, 0, 87, 88,
	317, 337, 419, 85, 0, 0, 0, 1422, 1420, 46,
	0, 48, 54, 64, 86, 396, 68, 41, 81, 72,
	1418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 332, 336, 330, 331, 383, 384, 429, 430,
	431, 407, 327, 0, 334, 335, 0, 414, 47, 97,
	98, 386, 35, 0, 51, 436, 0, 0, 63, 45,
	82, 0, 0, 361, 312, 365, 0, 0, 0, 0,
	0, 0, 0, 324, 325, 69, 0, 369, 364, 391,
	393, 402, 410, 0, 341, 375, 424, 413, 0, 372,
	426, 342, 360, 434, 362, 363, 399, 321, 382, 58,
	357, 339, 36, 345, 314, 352, 315, 343, 374, 43,
	340, 0, 415, 385, 49, 96, 0, 432, 52, 390,
	0, 75, 56, 0, 0, 377, 417, 380, 408, 371,
	400, 329, 389, 427, 358, 395, 428, 0, 0, 0,
	32, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 394, 422, 354, 437, 0, 398, 313, 392,
	0, 319, 322, 433, 420, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 376, 381, 405, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	346, 0, 388, 0, 0, 0, 326, 320, 0, 373,
	0, 0, 0, 328, 0, 347, 406, 0, 310, 411,
	418, 370, 55, 84, 421, 367, 366, 0, 0, 0,
	0, 0, 0, 359, 50, 403, 435, 425, 378, 416,
	344, 353, 0, 351, 67, 59, 80, 387, 401, 65,
	53, 78, 62, 79, 423, 77, 83, 70, 38, 57,
	34, 61, 66, 0, 42, 0, 89, 90, 91, 92,
	93, 94, 95, 318, 311, 348, 409, 412, 333, 397,
	323, 355, 404, 356, 379, 338, 0, 0, 0, 0,
	0, 0, 0, 74, 73, 37, 76, 0, 40, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 87, 88, 317,
	337, 419, 85, 0, 0, 0, 1422, 1420, 46, 0,
	48, 54, 64, 86, 396, 68, 41, 81, 72, 1418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 336, 330, 331, 383, 384, 429, 430, 431,
	407, 327, 0, 334, 335, 0, 414, 47, 97, 98,
	386, 35, 0, 51, 436, 0, 0, 63, 45, 82,
	0, 0, 361, 312, 365, 0, 0, 0, 0, 0,
	0, 0, 324, 325, 69, 0, 369, 364, 391, 393,
	402, 410, 0, 341, 375, 424, 413, 0, 372, 426,
	342, 360, 434, 362, 363, 399, 321, 382, 58, 357,
	339, 36, 345, 314, 352, 315, 343, 374, 43, 340,
	0, 415, 385, 49, 96, 0, 432, 52, 390, 0,
	75, 56, 0, 0, 377, 417, 380, 408, 371, 400,
	329, 389, 427, 358, 395, 428, 0, 0, 0, 498,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 394, 422, 354, 437, 0, 398, 313, 392, 0,
	319, 322, 433, 420, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 376, 381, 405, 368, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1218, 0, 346,
	0, 388, 0, 0, 0, 326, 320, 0, 373, 0,
	0, 0, 328, 0, 347, 406, 0, 310, 411, 418,
	370, 55, 84, 421, 367, 366, 0, 0, 0, 0,
	0, 0, 359, 50, 403, 435, 425, 378, 416, 344,
	353, 0, 351, 67, 59, 80, 387, 401, 65, 53,
	78, 62, 79, 423, 77, 83, 70, 38, 57, 34,
	61, 66, 0, 42, 0, 89, 90, 91, 92, 93,
	94, 95, 318, 311, 348, 409, 412, 333, 397, 323,
	355, 404, 356, 379, 338, 0, 0, 0, 0, 0,
	0, 0, 74, 73, 37, 76, 0, 40, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 0, 0, 0, 87, 88, 317, 337,
	419, 85, 0, 0, 0, 0, 39, 46, 0, 48,
	54, 64, 86, 396, 68, 41, 81, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	332, 336, 330, 331, 383, 384, 429, 430, 431, 407,
	327, 0, 334, 335, 0, 414, 47, 97, 98, 386,
	35, 0, 51, 436, 0, 0, 63, 45, 82, 0,
	0, 361, 312, 365, 0, 0, 0, 0, 0, 0,
	0, 324, 325, 69, 0, 369, 364, 391, 393, 402,
	410, 0, 341, 375, 424, 413, 0, 372, 426, 342,
	360, 434, 362, 363, 399, 321, 382, 58, 357, 339,
	36, 345, 314, 352, 315, 343, 374, 43, 340, 0,
	415, 385, 49, 96, 0, 432, 52, 390, 0, 75,
	56, 0, 0, 377, 417, 380, 408, 371, 400, 329,
	389, 427, 358, 395, 428, 0, 0, 0, 32, 0,
	717, 0, 718, 0, 0, 0, 0, 0, 0, 0,
	394, 422, 354, 437, 0, 398, 313, 392, 0, 319,
	322, 433, 420, 349, 350, 0, 0, 0, 0, 0,
	0, 0, 376, 381, 405, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	388, 0, 0, 0, 326, 320, 0, 373, 0, 0,
	0, 328, 0, 347, 406, 0, 310, 411, 418, 370,
	55, 84, 421, 367, 366, 0, 0, 0, 0, 0,
	0, 359, 50, 403, 435, 425, 378, 416, 344, 353,
	0, 351, 67, 59, 80, 387, 401, 65, 53, 78,
	62, 79, 423, 77, 83, 70, 38, 57, 34, 61,
	66, 0, 42, 0, 89, 90, 91, 92, 93, 94,
	95, 318, 311, 348, 409, 412, 333, 397, 323, 355,
	404, 356, 379, 338, 0, 0, 0, 0, 0, 0,
	0, 74, 73, 37, 76, 0, 40, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 87, 88, 317, 337, 419,
	85, 0, 0, 0, 0, 39, 46, 0, 48, 54,
	64, 86, 396, 68, 41, 81, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	336, 330, 331, 383, 384, 429, 430, 431, 407, 327,
	0, 334, 335, 0, 414, 47, 97, 98, 386, 35,
	0, 51, 436, 0, 0, 63, 45, 82, 0, 0,
	361, 312, 365, 0, 0, 0, 0, 0, 0, 0,
	324, 325, 69, 0, 369, 364, 391, 393, 402, 410,
	0, 341, 375, 424, 413, 0, 372, 426, 342, 360,
	434, 362, 363, 399, 321, 382, 58, 357, 339, 36,
	345, 314, 352, 315, 343, 374, 43, 340, 0, 415,
	385, 49, 96, 0, 432, 52, 390, 0, 75, 56,
	0, 0, 377, 417, 380, 408, 371, 400, 329, 389,
	427, 358, 395, 428, 0, 0, 0, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 394,
	422, 354, 437, 0, 398, 313, 392, 0, 319, 322,
	433, 420, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 376, 381, 405, 368, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 346, 0, 388,
	0, 0, 0, 326, 320, 0, 373, 0, 0, 0,
	328, 0, 347, 406, 0, 310, 411, 418, 370, 55,
	84, 421, 367, 366, 0, 0, 0, 0, 0, 0,
	359, 50, 403, 435, 425, 378, 416, 344, 353, 0,
	351, 67, 59, 80, 387, 401, 65, 53, 78, 62,
	79, 423, 77, 83, 70, 38, 57, 34, 61, 66,
	0, 42, 0, 89, 90, 91, 92, 93, 94, 95,
	318, 311, 348, 409, 412, 333, 397, 323, 355, 404,
	356, 379, 338, 0, 0, 0, 0, 0, 0, 0,
	74, 73, 37, 76, 0, 40, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 0, 0, 0, 87, 88, 317, 337, 419, 85,
	0, 0, 0, 0, 39, 46, 0, 48, 54, 64,
	86, 396, 68, 41, 81, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 336,
	330, 331, 383, 384, 429, 430, 431, 407, 327, 0,
	334, 335, 0, 414, 47, 97, 98, 386, 35, 0,
	51, 436, 0, 0, 63, 45, 82, 0, 0, 361,
	312, 365, 0, 0, 0, 0, 0, 0, 0, 324,
	325, 69, 0, 369, 364, 391, 393, 402, 410, 0,
	341, 375, 424, 413, 0, 372, 426, 342, 360, 434,
	362, 363, 399, 321, 382, 58, 357, 339, 36, 345,
	314, 352, 315, 343, 374, 43, 340, 0, 415, 385,
	49, 96, 0, 432, 52, 390, 0, 75, 56, 0,
	0, 377, 417, 380, 408, 371, 400, 329, 389, 427,
	358, 395, 428, 0, 0, 0, 498, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 394, 422,
	354, 437, 0, 398, 313, 392, 0, 319, 322, 433,
	420, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	376, 381, 405, 368, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 346, 0, 388, 0,
	0, 0, 326, 320, 0, 373, 0, 0, 0, 328,
	0, 347, 406, 0, 310, 411, 418, 370, 55, 84,
	421, 367, 366, 0, 0, 0, 0, 0, 0, 359,
	50, 403, 435, 425, 378, 416, 344, 353, 0, 351,
	67, 59, 80, 387, 401, 65, 53, 78, 62, 79,
	423, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 318,
	311, 348, 409, 412, 333, 397, 323, 355, 404, 356,
	379, 338, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 87, 88, 317, 337, 419, 85, 0,
	0, 0, 0, 39, 46, 0, 48, 54, 64, 86,
	396, 68, 41, 81, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 336, 330,
	331, 383, 384, 429, 430, 431, 407, 327, 0, 334,
	335, 0, 414, 47, 97, 98, 386, 35, 0, 51,
	436, 0, 0, 63, 45, 82, 0, 0, 361, 312,
	365, 0, 0, 0, 0, 0, 0, 0, 324, 325,
	69, 0, 369, 364, 391, 393, 402, 410, 0, 341,
	375, 424, 413, 0, 372, 426, 342, 360, 434, 362,
	363, 399, 321, 382, 58, 357, 339, 36, 345, 314,
	352, 315, 343, 374, 43, 340, 0, 415, 385, 49,
	96, 0, 432, 52, 390, 0, 75, 56, 0, 0,
	377, 417, 380, 408, 371, 400, 329, 389, 427, 358,
	395, 428, 0, 0, 0, 32, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 444, 0, 394, 422, 354,
	437, 0, 398, 313, 392, 0, 319, 322, 433, 420,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 376,
	381, 405, 368, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 388, 0, 0,
	0, 326, 320, 0, 373, 0, 0, 0, 328, 0,
	347, 406, 0, 310, 411, 418, 370, 55, 84, 421,
	367, 366, 0, 0, 0, 0, 0, 0, 359, 50,
	403, 435, 425, 378, 416, 344, 353, 0, 351, 67,
	59, 80, 387, 401, 65, 53, 78, 62, 79, 423,
	77, 83, 70, 38, 57, 34, 61, 66, 0, 42,
	0, 89, 90, 91, 92, 93, 94, 95, 318, 311,
	348, 409, 412, 333, 397, 323, 355, 404, 356, 379,
	338, 0, 0, 0, 0, 0, 0, 0, 74, 73,
	37, 76, 0, 40, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 87, 88, 317, 337, 419, 85, 0, 0,
	0, 0, 39, 46, 0, 48, 54, 64, 86, 396,
	68, 41, 81, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 336, 330, 331,
	383, 384, 429, 430, 431, 407, 327, 0, 334, 335,
	0, 414, 47, 97, 98, 386, 35, 0, 51, 436,
	0, 0, 63, 45, 82, 0, 0, 361, 312, 365,
	0, 0, 0, 0, 0, 0, 0, 324, 325, 69,
	0, 369, 364, 391, 393, 402, 410, 0, 341, 375,
	424, 413, 0, 372, 426, 342, 360, 434, 362, 363,
	399, 321, 382, 58, 357, 339, 36, 345, 314, 352,
	315, 343, 374, 43, 340, 0, 415, 385, 49, 96,
	0, 432, 52, 390, 0, 75, 56, 0, 0, 377,
	417, 380, 408, 371, 400, 329, 389, 427, 358, 395,
	428, 0, 0, 0, 32, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 394, 422, 354, 437,
	0, 398, 313, 392, 0, 319, 322, 433, 420, 349,
	350, 552, 0, 0, 0, 0, 0, 0, 376, 381,
	405, 368, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 388, 0, 0, 0,
	326, 320, 0, 373, 0, 0, 0, 328, 0, 347,
	406, 0, 310, 411, 418, 370, 55, 84, 421, 367,
	366, 0, 0, 0, 0, 0, 0, 359, 50, 403,
	435, 425, 378, 416, 344, 353, 0, 351, 67, 59,
	80, 387, 401, 65, 53, 78, 62, 79, 423, 77,
	83, 70, 38, 57, 34, 61, 66, 0, 42, 0,
	89, 90, 91, 92, 93, 94, 95, 318, 311, 348,
	409, 412, 333, 397, 323, 355, 404, 356, 379, 338,
	0, 0, 0, 0, 0, 0, 0, 74, 73, 37,
	76, 0, 40, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 87, 88, 317, 337, 419, 85, 0, 0, 0,
	0, 39, 46, 0, 48, 54, 64, 86, 396, 68,
	41, 81, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 336, 330, 331, 383,
	384, 429, 430, 431, 407, 327, 0, 334, 335, 0,
	414, 47, 97, 98, 386, 35, 0, 51, 436, 0,
	0, 63, 45, 82, 0, 0, 361, 312, 365, 0,
	0, 0, 0, 0, 0, 0, 324, 325, 69, 0,
	369, 364, 391, 393, 402, 410, 0, 341, 375, 424,
	413, 0, 372, 426, 342, 360, 434, 362, 363, 399,
	321, 382, 58, 357, 339, 36, 345, 314, 352, 315,
	343, 374, 43, 340, 0, 415, 385, 49, 96, 0,
	432, 52, 390, 0, 75, 56, 0, 0, 377, 417,
	380, 408, 371, 400, 329, 389, 427, 358, 395, 428,
	0, 0, 0, 109, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 394, 422, 354, 437, 0,
	398, 313, 392, 0, 319, 322, 433, 420, 349, 350,
	0, 0, 0, 0, 0, 0, 0, 376, 381, 405,
	368, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 388, 0, 0, 0, 326,
	320, 0, 373, 0, 0, 0, 328, 0, 347, 406,
	0, 310, 411, 418, 370, 55, 84, 421, 367, 366,
	0, 0, 0, 0, 0, 0, 359, 50, 403, 435,
	425, 378, 416, 344, 353, 0, 351, 67, 59, 80,
	387, 401, 65, 53, 78, 62, 79, 423, 77, 83,
	70, 38, 57, 34, 61, 66, 0, 42, 0, 89,
	90, 91, 92, 93, 94, 95, 318, 311, 348, 409,
	412, 333, 397, 323, 355, 404, 356, 379, 338, 0,
	0, 0, 0, 0, 0, 0, 74, 73, 37, 76,
	0, 40, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 316, 0, 0, 0,
	87, 88, 317, 337, 419, 85, 0, 0, 0, 0,
	39, 46, 0, 48, 54, 64, 86, 396, 68, 41,
	81, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 332, 336, 330, 331, 383, 384,
	429, 430, 431, 407, 327, 0, 334, 335, 0, 414,
	47, 97, 98, 386, 35, 0, 51, 436, 0, 0,
	63, 45, 82, 0, 0, 361, 312, 365, 0, 0,
	0, 0, 0, 0, 0, 324, 325, 69, 0, 369,
	364, 391, 393, 402, 410, 0, 341, 375, 424, 413,
	0, 372, 426, 342, 360, 434, 362, 363, 399, 321,
	382, 58, 357, 339, 36, 345, 314, 352, 315, 343,
	374, 43, 340, 0, 415, 385, 49, 96, 0, 432,
	52, 390, 0, 75, 56, 0, 0, 377, 417, 380,
	408, 371, 400, 329, 389, 427, 358, 395, 428, 0,
	0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 394, 422, 354, 437, 0, 398,
	313, 392, 0, 319, 322, 433, 420, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 376, 381, 405, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 346, 0, 388, 0, 0, 0, 326, 320,
	0, 373, 0, 0, 0, 328, 0, 347, 406, 0,
	310, 411, 418, 370, 55, 84, 421, 367, 366, 0,
	0, 0, 0, 0, 0, 359, 50, 403, 435, 425,
	378, 416, 344, 353, 0, 351, 67, 59, 80, 387,
	401, 65, 53, 78, 62, 79, 423, 77, 83, 70,
	38, 57, 34, 61, 66, 0, 42, 0, 89, 90,
	91, 92, 93, 94, 95, 318, 311, 348, 409, 412,
	333, 397, 323, 355, 404, 356, 379, 338, 0, 0,
	0, 0, 0, 0, 0, 74, 73, 37, 76, 0,
	40, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 87,
	88, 317, 337, 419, 85, 0, 0, 0, 0, 39,
	46, 0, 48, 54, 64, 86, 396, 68, 41, 81,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 336, 330, 331, 383, 384, 429,
	430, 431, 407, 327, 0, 334, 335, 0, 414, 47,
	97, 98, 386, 35, 0, 51, 436, 0, 0, 63,
	45, 82, 0, 0, 361, 312, 365, 0, 0, 0,
	0, 0, 0, 0, 324, 325, 69, 0, 369, 364,
	391, 393, 402, 410, 58, 341, 375, 36, 0, 0,
	584, 0, 0, 0, 43, 583, 0, 0, 0, 49,
	96, 0, 626, 52, 627, 0, 75, 56, 0, 0,
	0, 0, 617, 618, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 498, 606, 603, 604, 608,
	609, 610, 611, 0, 0, 0, 607, 612, 494, 495,
	0, 0, 0, 0, 581, 596, 0, 625, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 593, 594, 0, 0, 0, 0, 642, 0, 595,
	0, 0, 989, 592, 597, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 84, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 0, 0, 0, 0, 0, 991, 0, 67,
	59, 80, 0, 0, 65, 53, 78, 62, 79, 0,
	77, 83, 70, 38, 57, 34, 61, 66, 0, 42,
	0, 89, 90, 91, 92, 93, 94, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 73,
	37, 76, 0, 40, 71, 1000, 1006, 1004, 0, 0,
	1001, 0, 0, 999, 0, 0, 1008, 0, 60, 1007,
	993, 1003, 1005, 1002, 997, 0, 992, 0, 1010, 1009,
	1011, 990, 1013, 0, 0, 0, 1017, 1014, 1016, 1015,
	628, 1012, 0, 0, 0, 0, 0, 0, 0, 0,
	994, 995, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 644, 0, 629, 630, 0, 0, 0, 0, 0,
	996, 998, 87, 88, 0, 0, 0, 85, 0, 0,
	0, 0, 39, 46, 0, 48, 54, 64, 86, 0,
	68, 41, 81, 72, 614, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 631, 641, 637, 638,
	635, 636, 634, 633, 632, 643, 619, 620, 621, 622,
	624, 0, 47, 97, 98, 623, 35, 0, 51, 0,
	0, 0, 63, 45, 82, 58, 0, 0, 36, 0,
	0, 584, 0, 0, 0, 43, 583, 0, 0, 69,
	49, 96, 0, 626, 52, 627, 0, 75, 56, 0,
	639, 0, 0, 617, 618, 0, 0, 0, 0, 0,
	0, 1624, 0, 577, 0, 0, 498, 606, 603, 604,
	608, 609, 610, 611, 0, 0, 0, 607, 612, 494,
	495, 1625, 0, 0, 0, 581, 596, 0, 625, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 593, 594, 0, 0, 0, 0, 642, 0,
	595, 0, 0, 591, 592, 597, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 84,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 59, 80, 0, 0, 65, 53, 78, 62, 79,
	0, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 644, 0, 629, 630, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 0, 0, 85, 0,
	0, 0, 0, 39, 46, 0, 48, 54, 64, 86,
	0, 68, 41, 81, 72, 614, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 631, 641, 637,
	638, 635, 636, 634, 633, 632, 643, 619, 620, 621,
	622, 624, 0, 47, 97, 98, 623, 35, 0, 51,
	0, 0, 0, 63, 45, 82, 58, 0, 0, 36,
	851, 0, 584, 0, 0, 0, 43, 583, 0, 0,
	69, 49, 96, 0, 626, 52, 627, 0, 75, 56,
	0, 639, 0, 0, 617, 618, 0, 0, 0, 0,
	0, 0, 0, 0, 577, 0, 0, 498, 606, 603,
	604, 608, 609, 610, 611, 0, 0, 0, 607, 612,
	494, 495, 0, 0, 0, 0, 581, 596, 0, 625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 593, 594, 856, 0, 0, 0, 642,
	0, 595, 0, 0, 591, 592, 597, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	84, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 59, 80, 0, 0, 65, 53, 78, 62,
	79, 0, 77, 83, 70, 38, 57, 34, 61, 66,
	0, 42, 0, 89, 90, 91, 92, 93, 94, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 73, 37, 76, 0, 40, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 628, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 644, 0, 629, 630, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 0, 0, 0, 85,
	0, 0, 0, 0, 39, 46, 0, 48, 54, 64,
	86, 0, 68, 41, 81, 72, 614, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 631, 641,
	637, 638, 635, 636, 634, 633, 632, 643, 619, 620,
	621, 622, 624, 0, 47, 97, 98, 623, 35, 0,
	51, 0, 0, 0, 63, 45, 82, 58, 0, 0,
	36, 0, 0, 584, 0, 0, 0, 43, 583, 0,
	0, 69, 49, 96, 0, 626, 52, 627, 0, 75,
	56, 0, 639, 0, 0, 617, 618, 0, 0, 0,
	0, 0, 0, 0, 0, 577, 0, 846, 498, 606,
	603, 604, 608, 609, 610, 611, 0, 0, 0, 607,
	612, 494, 495, 0, 0, 0, 0, 581, 596, 0,
	625, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 593, 594, 0, 0, 0, 0,
	642, 0, 595, 0, 0, 591, 592, 597, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 84, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 67, 59, 80, 0, 0, 65, 53, 78,
	62, 79, 0, 77, 83, 70, 38, 57, 34, 61,
	66, 0, 42, 0, 89, 90, 91, 92, 93, 94,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 73, 37, 76, 0, 40, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 628, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 644, 0, 629, 630, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 0, 0,
	85, 0, 0, 0, 0, 39, 46, 0, 48, 54,
	64, 86, 0, 68, 41, 81, 72, 614, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 631,
	641, 637, 638, 635, 636, 634, 633, 632, 643, 619,
	620, 621, 622, 624, 0, 47, 97, 98, 623, 35,
	0, 51, 0, 0, 0, 63, 45, 82, 58, 0,
	0, 36, 0, 0, 584, 0, 0, 0, 43, 583,
	0, 0, 69, 49, 96, 0, 626, 52, 627, 0,
	75, 56, 0, 639, 0, 0, 617, 618, 0, 0,
	0, 0, 0, 0, 0, 0, 577, 0, 0, 498,
	606, 603, 604, 608, 609, 610, 611, 0, 0, 0,
	607, 612, 494, 495, 0, 0, 0, 0, 581, 596,
	0, 625, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 593, 594, 856, 0, 0,
	0, 642, 0, 595, 0, 0, 591, 592, 597, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 84, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 59, 80, 0, 0, 65, 53,
	78, 62, 79, 0, 77, 83, 70, 38, 57, 34,
	61, 66, 0, 42, 0, 89, 90, 91, 92, 93,
	94, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 73, 37, 76, 0, 40, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 644, 0, 629, 630, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 0, 0,
	0, 85, 0, 0, 0, 0, 39, 46, 0, 48,
	54, 64, 86, 0, 68, 41, 81, 72, 614, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	631, 641, 637, 638, 635, 636, 634, 633, 632, 643,
	619, 620, 621, 622, 624, 0, 47, 97, 98, 623,
	35, 0, 51, 0, 0, 0, 63, 45, 82, 693,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 69, 36, 0, 0, 584, 0, 0,
	0, 43, 583, 0, 639, 0, 49, 96, 0, 626,
	52, 627, 0, 75, 56, 0, 0, 0, 0, 617,
	618, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 0, 498, 606, 603, 604, 608, 609, 610, 611,
	0, 0, 0, 607, 612, 494, 495, 0, 0, 0,
	0, 581, 596, 0, 625, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 593, 594,
	0, 0, 0, 0, 642, 0, 595, 0, 0, 591,
	592, 597, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 84, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 59, 80, 0,
	0, 65, 53, 78, 62, 79, 0, 77, 83, 70,
	38, 57, 34, 61, 66, 0, 42, 0, 89, 90,
	91, 92, 93, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 73, 37, 76, 0,
	40, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 628, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 644, 0,
	629, 630, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 0, 0, 85, 0, 0, 0, 0, 39,
	46, 0, 48, 54, 64, 86, 0, 68, 41, 81,
	72, 614, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 631, 641, 637, 638, 635, 636, 634,
	633, 632, 643, 619, 620, 621, 622, 624, 0, 47,
	97, 98, 623, 35, 0, 51, 0, 0, 0, 63,
	45, 82, 58, 0, 0, 36, 0, 0, 584, 0,
	0, 0, 43, 583, 0, 0, 69, 49, 96, 0,
	626, 52, 627, 0, 75, 56, 0, 639, 0, 0,
	617, 618, 0, 0, 0, 0, 0, 0, 0, 0,
	577, 0, 0, 498, 606, 603, 604, 608, 609, 610,
	611, 0, 0, 0, 607, 612, 494, 495, 0, 0,
	0, 0, 581, 596, 0, 625, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 593,
	594, 0, 0, 0, 0, 642, 0, 595, 0, 0,
	591, 592, 597, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 84, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 59, 80,
	0, 0, 65, 53, 78, 62, 79, 0, 77, 83,
	70, 38, 57, 34, 61, 66, 0, 42, 0, 89,
	90, 91, 92, 93, 94, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 73, 37, 76,
	0, 40, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 644,
	0, 629, 630, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 0, 0, 0, 85, 0, 0, 0, 0,
	39, 46, 0, 48, 54, 64, 86, 0, 68, 41,
	81, 72, 614, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 631, 641, 637, 638, 635, 636,
	634, 633, 632, 643, 619, 620, 621, 622, 624, 0,
	47, 97, 98, 623, 35, 0, 51, 0, 0, 0,
	63, 45, 82, 58, 0, 0, 36, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 155, 69, 49, 96,
	0, 0, 52, 0, 0, 75, 56, 0, 639, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1123, 0, 32, 0, 1121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 0, 0, 0, 0, 0, 156, 0, 67, 59,
	80, 0, 0, 65, 53, 78, 62, 79, 0, 77,
	83, 70, 38, 57, 34, 61, 66, 0, 42, 0,
	89, 90, 91, 92, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 73, 37,
	76, 0, 40, 71, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 0, 182, 183, 60, 184, 185,
	186, 188, 187, 157, 158, 159, 163, 161, 160, 162,
	134, 136, 0, 132, 135, 141, 137, 138, 139, 153,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 154, 164, 165, 166, 167, 168, 169, 170, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 0, 0, 85, 0, 0, 0,
	0, 39, 46, 0, 48, 54, 64, 86, 0, 68,
	41, 81, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 97, 98, 0, 35, 133, 51, 0, 0,
	0, 63, 45, 82, 58, 0, 0, 36, 0, 0,
	584, 0, 0, 0, 43, 0, 0, 0, 69, 49,
	96, 0, 626, 52, 627, 0, 75, 56, 0, 0,
	0, 0, 617, 618, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 498, 606, 603, 604, 608,
	609, 610, 611, 0, 0, 0, 607, 612, 494, 495,
	0, 0, 0, 0, 0, 596, 0, 625, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 593, 594, 0, 0, 0, 0, 642, 0, 595,
	0, 0, 591, 592, 597, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 84, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
	59, 80, 0, 0, 65, 53, 78, 62, 79, 0,
	77, 83, 70, 38, 57, 34, 61, 66, 0, 42,
	0, 89, 90, 91, 92, 93, 94, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 73,
	37, 76, 0, 40, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 644, 0, 629, 630, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 0, 0, 0, 85, 0, 0,
	0, 0, 39, 46, 0, 48, 54, 64, 86, 0,
	68, 41, 81, 72, 614, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 631, 641, 637, 638,
	635, 636, 634, 633, 632, 643, 619, 620, 621, 622,
	624, 0, 47, 97, 98, 623, 35, 0, 51, 0,
	0, 0, 63, 45, 82, 58, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 69,
	49, 96, 0, 626, 52, 627, 0, 75, 56, 0,
	639, 0, 0, 617, 618, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 498, 606, 603, 604,
	608, 609, 610, 611, 0, 0, 0, 607, 612, 494,
	495, 0, 0, 0, 0, 0, 596, 0, 625, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 593, 594, 0, 0, 0, 0, 642, 0,
	595, 0, 0, 591, 592, 597, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 84,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 59, 80, 0, 0, 65, 53, 78, 62, 79,
	0, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 644, 0, 629, 630, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 0, 0, 85, 0,
	0, 0, 0, 39, 46, 0, 48, 54, 64, 86,
	0, 68, 41, 81, 72, 614, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 631, 641, 637,
	638, 635, 636, 634, 633, 632, 643, 619, 620, 621,
	622, 624, 0, 47, 97, 98, 623, 35, 0, 51,
	0, 0, 0, 63, 45, 82, 58, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 43, 0, 0, 0,
	69, 49, 96, 0, 626, 52, 627, 0, 75, 56,
	0, 639, 0, 0, 617, 618, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 0, 0, 498, 606, 603,
	604, 608, 609, 610, 611, 0, 0, 0, 607, 612,
	494, 495, 0, 0, 0, 0, 0, 596, 0, 625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 593, 594, 0, 0, 0, 0, 642,
	0, 595, 0, 0, 591, 592, 597, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	84, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 59, 80, 0, 0, 65, 53, 78, 62,
	79, 0, 77, 83, 70, 38, 57, 34, 61, 66,
	0, 42, 0, 89, 90, 91, 92, 93, 94, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 73, 37, 76, 0, 40, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 628, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 644, 0, 629, 630, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 0, 0, 0, 85,
	0, 0, 0, 0, 39, 46, 0, 48, 54, 64,
	86, 0, 68, 41, 81, 72, 614, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 631, 641,
	637, 638, 635, 636, 634, 633, 632, 643, 619, 620,
	621, 622, 624, 0, 47, 97, 98, 623, 35, 0,
	51, 0, 0, 0, 63, 45, 82, 58, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 43, 0, 0,
	155, 69, 49, 96, 0, 0, 52, 0, 0, 75,
	56, 0, 639, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 32, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 0, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 67, 59, 80, 0, 0, 65, 53, 78,
	62, 79, 0, 77, 83, 70, 38, 57, 34, 61,
	66, 0, 42, 0, 89, 90, 91, 92, 93, 94,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 73, 37, 76, 0, 40, 71, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 0, 182,
	183, 60, 184, 185, 186, 188, 187, 157, 158, 159,
	163, 161, 160, 162, 134, 136, 0, 132, 135, 141,
	137, 138, 139, 153, 142, 143, 144, 145, 146, 147,
	148, 149, 150, 151, 152, 154, 164, 165, 166, 167,
	168, 169, 170, 171, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 0, 0,
	85, 0, 0, 0, 0, 39, 46, 0, 48, 54,
	64, 86, 0, 68, 41, 81, 72, 58, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 43, 0, 0,
	155, 0, 49, 96, 0, 0, 52, 0, 0, 75,
	56, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 97, 98, 32, 35,
	133, 51, 0, 0, 0, 63, 45, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 67, 59, 80, 0, 0, 65, 53, 78,
	62, 79, 0, 77, 83, 70, 38, 57, 34, 61,
	66, 0, 42, 0, 89, 90, 91, 92, 93, 94,
	95, 0, 0, 0, 0, 1410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 73, 37, 76, 0, 40, 71, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 0, 182,
	183, 60, 184, 185, 186, 188, 187, 157, 158, 159,
	163, 161, 160, 162, 134, 136, 0, 132, 135, 141,
	137, 138, 139, 153, 142, 143, 144, 145, 146, 147,
	148, 149, 150, 151, 152, 154, 164, 165, 166, 167,
	168, 169, 170, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 0, 0,
	85, 0, 0, 0, 0, 39, 46, 0, 48, 54,
	64, 86, 0, 68, 41, 81, 72, 58, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 43, 0, 0,
	155, 0, 49, 96, 0, 0, 52, 0, 0, 75,
	56, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 97, 98, 32, 35,
	133, 51, 0, 0, 0, 63, 45, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 67, 59, 80, 0, 0, 65, 53, 78,
	62, 79, 0, 77, 83, 70, 38, 57, 34, 61,
	66, 0, 42, 0, 89, 90, 91, 92, 93, 94,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 73, 37, 76, 0, 40, 71, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 0, 182,
	183, 60, 184, 185, 186, 188, 187, 157, 158, 159,
	163, 161, 160, 162, 134, 136, 0, 132, 135, 141,
	137, 138, 139, 153, 142, 143, 144, 145, 146, 147,
	148, 149, 150, 151, 152, 154, 164, 165, 166, 167,
	168, 169, 170, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 0, 0,
	85, 0, 0, 0, 0, 39, 46, 0, 48, 54,
	64, 86, 0, 68, 41, 81, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 49, 96, 0, 0,
	52, 0, 0, 75, 56, 47, 97, 98, 0, 35,
	133, 51, 0, 0, 0, 63, 45, 82, 0, 649,
	0, 0, 498, 0, 480, 481, 482, 483, 0, 0,
	0, 0, 69, 486, 484, 494, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 59, 80, 0,
	0, 65, 53, 78, 62, 79, 0, 77, 83, 70,
	38, 57, 34, 61, 66, 0, 42, 0, 89, 90,
	91, 92, 93, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 73, 37, 76, 0,
	40, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	488, 493, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 0, 0, 85, 0, 0, 0, 0, 39,
	46, 0, 48, 54, 64, 86, 0, 68, 41, 81,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 490, 0, 492, 491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	97, 98, 0, 35, 0, 51, 0, 0, 0, 63,
	45, 82, 58, 0, 0, 36, 0, 0, 0, 0,
	0, 0, 43, 0, 0, 0, 69, 49, 96, 0,
	0, 52, 0, 0, 75, 56, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	478, 0, 0, 498, 0, 480, 481, 482, 483, 0,
	0, 0, 0, 0, 486, 484, 494, 495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 59, 80,
	0, 0, 65, 53, 78, 62, 79, 0, 77, 83,
	70, 38, 57, 34, 61, 66, 0, 42, 0, 89,
	90, 91, 92, 93, 94, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 73, 37, 76,
	0, 40, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 36, 60, 0, 0, 0,
	0, 0, 43, 0, 0, 0, 0, 49, 96, 0,
	0, 52, 0, 0, 75, 56, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 0, 32, 0, 0, 0, 0, 0, 0,
	0, 488, 493, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 0, 0, 0, 85, 0, 0, 0, 0,
	39, 46, 0, 48, 54, 64, 86, 0, 68, 41,
	81, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 490, 0, 492, 491, 0, 0,
	0, 0, 0, 0, 0, 55, 84, 0, 0, 0,
	47, 97, 98, 0, 35, 0, 51, 50, 0, 0,
	63, 45, 82, 0, 0, 0, 0, 67, 59, 80,
	0, 0, 65, 53, 78, 62, 79, 69, 77, 83,
	70, 38, 57, 34, 61, 66, 0, 42, 0, 89,
	90, 91, 92, 93, 94, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 73, 37, 76,
	0, 40, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 36, 60, 0, 0, 0,
	0, 0, 43, 0, 0, 0, 0, 49, 96, 0,
	0, 52, 0, 0, 75, 56, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 0, 32, 606, 971, 604, 608, 609, 610,
	611, 0, 0, 0, 607, 612, 0, 0, 0, 0,
	87, 88, 0, 0, 0, 85, 0, 0, 0, 0,
	39, 46, 0, 48, 54, 64, 86, 0, 68, 41,
	81, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 84, 0, 0, 0,
	47, 97, 98, 0, 35, 0, 51, 50, 0, 0,
	63, 45, 82, 0, 0, 0, 0, 67, 59, 80,
	0, 0, 65, 53, 78, 62, 79, 69, 77, 83,
	70, 38, 57, 34, 61, 66, 0, 42, 763, 89,
	90, 91, 92, 93, 94, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 73, 37, 76,
	0, 40, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	49, 96, 0, 0, 52, 0, 0, 75, 56, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 32, 0, 31, 0,
	87, 88, 0, 0, 0, 85, 0, 0, 0, 0,
	39, 46, 0, 48, 54, 64, 86, 0, 68, 41,
	81, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 97, 98, 0, 35, 0, 51, 229, 55, 84,
	63, 45, 82, 224, 0, 223, 0, 225, 226, 0,
	50, 0, 0, 227, 230, 0, 0, 69, 0, 0,
	67, 59, 80, 0, 0, 65, 53, 78, 62, 79,
	0, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 36, 0, 1054, 0, 0, 0, 0, 43,
	0, 0, 0, 44, 49, 96, 0, 0, 52, 0,
	0, 75, 56, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 0, 0, 85, 0,
	32, 0, 1056, 39, 46, 0, 48, 54, 64, 86,
	0, 68, 41, 81, 72, 0, 0, 741, 740, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 97, 98, 0, 35, 0, 51,
	0, 0, 0, 63, 45, 82, 0, 0, 0, 0,
	0, 0, 55, 84, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 50, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 67, 59, 80, 0, 0, 65,
	53, 78, 62, 79, 0, 77, 83, 70, 38, 57,
	34, 61, 66, 0, 42, 0, 89, 90, 91, 92,
	93, 94, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 73, 37, 76, 0, 40, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 49, 96, 0, 0,
	52, 0, 0, 75, 56, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1123, 0, 32, 0, 1121, 0, 0, 87, 88, 0,
	0, 0, 85, 0, 0, 0, 0, 39, 46, 0,
	48, 54, 64, 86, 0, 68, 41, 81, 72, 1120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 47, 97, 98,
	0, 35, 0, 51, 55, 84, 0, 63, 45, 82,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 67, 59, 80, 0,
	0, 65, 53, 78, 62, 79, 0, 77, 83, 70,
	38, 57, 34, 61, 66, 0, 42, 0, 89, 90,
	91, 92, 93, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 73, 37, 76, 0,
	40, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 693, 0, 0, 0, 60, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 36, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 49, 96,
	0, 0, 52, 0, 0, 75, 56, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 577, 0, 0, 109, 0, 111, 0, 0, 87,
	88, 0, 0, 0, 85, 0, 0, 0, 0, 39,
	46, 0, 48, 54, 64, 86, 0, 68, 41, 81,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	97, 98, 0, 35, 0, 51, 55, 84, 0, 63,
	45, 82, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 67, 59,
	80, 0, 0, 65, 53, 78, 62, 79, 0, 77,
	83, 70, 38, 57, 34, 61, 66, 0, 42, 0,
	89, 90, 91, 92, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 73, 37,
	76, 0, 40, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 36, 60, 1528, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 49, 96,
	0, 0, 52, 0, 0, 75, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 109, 0, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 0, 0, 85, 0, 0, 0,
	0, 39, 46, 0, 48, 54, 64, 86, 0, 68,
	41, 81, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 84, 0, 0,
	0, 47, 97, 98, 0, 35, 0, 51, 50, 0,
	0, 63, 45, 82, 0, 0, 0, 0, 67, 59,
	80, 0, 1526, 65, 53, 78, 62, 79, 69, 77,
	83, 70, 38, 57, 34, 61, 66, 0, 42, 0,
	89, 90, 91, 92, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 73, 37,
	76, 0, 40, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 36, 60, 1528, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 49, 96,
	0, 0, 52, 0, 0, 75, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 109, 0, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 0, 0, 85, 0, 0, 0,
	0, 39, 46, 0, 48, 54, 64, 86, 0, 68,
	41, 81, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 84, 0, 0,
	0, 47, 97, 98, 0, 35, 0, 51, 50, 0,
	0, 63, 45, 82, 0, 0, 0, 0, 67, 59,
	80, 0, 0, 65, 53, 78, 62, 79, 69, 77,
	83, 70, 38, 57, 34, 61, 66, 0, 42, 0,
	89, 90, 91, 92, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 73, 37,
	76, 0, 40, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 693, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	49, 96, 0, 0, 52, 0, 0, 75, 56, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 32, 0, 0, 0,
	0, 87, 88, 0, 0, 0, 85, 0, 0, 0,
	0, 39, 46, 0, 48, 54, 64, 86, 0, 68,
	41, 81, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 97, 98, 0, 35, 0, 51, 55, 84,
	0, 63, 45, 82, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	67, 59, 80, 0, 0, 65, 53, 78, 62, 79,
	0, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 43, 0, 0,
	0, 0, 49, 96, 0, 0, 52, 0, 0, 75,
	56, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 577, 0, 0, 109, 0,
	111, 0, 0, 87, 88, 0, 0, 0, 85, 0,
	0, 0, 0, 39, 46, 0, 48, 54, 64, 86,
	0, 68, 41, 81, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 97, 98, 0, 35, 0, 51,
	55, 84, 0, 63, 45, 82, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 67, 59, 80, 0, 0, 65, 53, 78,
	62, 79, 0, 77, 83, 70, 38, 57, 34, 61,
	66, 0, 42, 0, 89, 90, 91, 92, 93, 94,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 73, 37, 76, 0, 40, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	36, 60, 0, 0, 0, 0, 0, 43, 0, 0,
	0, 0, 49, 96, 0, 0, 52, 0, 0, 75,
	56, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 0, 109, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 0, 0,
	85, 0, 0, 0, 0, 39, 46, 0, 48, 54,
	64, 86, 0, 68, 41, 81, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 84, 0, 0, 0, 47, 97, 98, 0, 35,
	0, 51, 50, 0, 0, 63, 45, 82, 0, 0,
	0, 0, 67, 59, 80, 0, 0, 65, 53, 78,
	62, 79, 69, 77, 83, 70, 38, 57, 34, 61,
	66, 0, 42, 0, 89, 90, 91, 92, 93, 94,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 73, 37, 76, 0, 40, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 36, 0, 0, 0, 0, 0, 0, 43,
	1546, 0, 0, 0, 49, 96, 0, 0, 52, 0,
	0, 75, 56, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	32, 0, 1545, 0, 0, 87, 88, 0, 0, 0,
	85, 0, 0, 0, 0, 39, 46, 0, 48, 54,
	64, 86, 0, 68, 41, 81, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 97, 98, 0, 35,
	0, 51, 55, 84, 0, 63, 45, 82, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 0, 0, 1572,
	0, 0, 69, 0, 67, 59, 80, 0, 0, 65,
	53, 78, 62, 79, 0, 77, 83, 70, 38, 57,
	34, 61, 66, 0, 42, 0, 89, 90, 91, 92,
	93, 94, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 73, 37, 76, 0, 40, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 36, 60, 0, 0, 0, 0, 1500, 43,
	0, 0, 0, 0, 49, 96, 0, 0, 52, 0,
	0, 75, 56, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 0,
	109, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	0, 0, 85, 0, 0, 0, 0, 39, 46, 0,
	48, 54, 64, 86, 0, 68, 41, 81, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 84, 0, 0, 0, 47, 97, 98,
	0, 35, 0, 51, 50, 0, 0, 63, 45, 82,
	0, 0, 0, 0, 67, 59, 80, 0, 0, 65,
	53, 78, 62, 79, 69, 77, 83, 70, 38, 57,
	34, 61, 66, 0, 42, 0, 89, 90, 91, 92,
	93, 94, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 73, 37, 76, 0, 40, 71,
	0, 0, 1396, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 36, 60, 0, 0, 0, 0, 0, 43,
	0, 0, 0, 0, 49, 96, 0, 0, 52, 0,
	0, 75, 56, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 0,
	109, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	0, 0, 85, 0, 0, 0, 0, 39, 46, 0,
	48, 54, 64, 86, 0, 68, 41, 81, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 84, 0, 0, 0, 47, 97, 98,
	0, 35, 0, 51, 50, 0, 0, 63, 45, 82,
	0, 0, 0, 0, 67, 59, 80, 0, 0, 65,
	53, 78, 62, 79, 69, 77, 83, 70, 38, 57,
	34, 61, 66, 0, 42, 0, 89, 90, 91, 92,
	93, 94, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 73, 37, 76, 0, 40, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 49, 96, 0, 0,
	52, 0, 0, 75, 56, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 498, 0, 111, 0, 0, 87, 88, 0,
	0, 0, 85, 0, 0, 0, 0, 39, 46, 0,
	48, 54, 64, 86, 0, 68, 41, 81, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 47, 97, 98,
	0, 35, 0, 51, 55, 84, 0, 63, 45, 82,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 0,
	558, 0, 0, 0, 69, 0, 67, 59, 80, 0,
	0, 65, 53, 78, 62, 79, 0, 77, 83, 70,
	38, 57, 34, 61, 66, 0, 42, 0, 89, 90,
	91, 92, 93, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 73, 37, 76, 0,
	40, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 36, 60, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 49, 96, 0, 0,
	52, 0, 0, 75, 56, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	0, 0, 109, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 0, 0, 85, 0, 0, 0, 0, 39,
	46, 0, 48, 54, 64, 86, 0, 68, 41, 81,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 84, 0, 0, 0, 47,
	97, 98, 0, 35, 0, 51, 50, 0, 0, 63,
	45, 82, 0, 0, 0, 0, 67, 59, 80, 0,
	0, 65, 53, 78, 62, 79, 69, 77, 83, 70,
	38, 57, 34, 61, 66, 0, 42, 0, 89, 90,
	91, 92, 93, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 73, 37, 76, 0,
	40, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 36, 60, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 49, 96, 0, 0,
	52, 0, 0, 75, 56, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 44,
	0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 0, 0, 85, 0, 0, 0, 0, 39,
	46, 0, 48, 54, 64, 86, 211, 68, 41, 81,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 84, 0, 0, 0, 47,
	97, 98, 0, 35, 0, 51, 50, 0, 0, 63,
	45, 82, 0, 0, 0, 0, 67, 59, 80, 0,
	0, 65, 53, 78, 62, 79, 69, 77, 83, 70,
	38, 57, 34, 61, 66, 0, 42, 0, 89, 90,
	91, 92, 93, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 74, 73, 37, 76, 0,
	40, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 36, 60, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 49, 96, 0, 0,
	52, 0, 0, 75, 56, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	0, 0, 498, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 0, 0, 85, 0, 0, 0, 0, 39,
	46, 0, 48, 54, 64, 86, 0, 68, 41, 81,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 84, 0, 0, 0, 47,
	97, 98, 0, 35, 0, 51, 50, 0, 0, 63,
	45, 82, 0, 0, 0, 0, 67, 59, 80, 0,
	0, 65, 53, 78, 62, 79, 69, 77, 83, 70,
	38, 57, 34, 61, 66, 0, 42, 0, 89, 90,
	91, 92, 93, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 73, 37, 76, 0,
	40, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 36, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 49, 96,
	0, 0, 52, 0, 0, 75, 56, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 0, 0, 87,
	88, 0, 0, 0, 85, 0, 0, 0, 0, 39,
	46, 0, 48, 54, 64, 86, 0, 68, 41, 81,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	97, 98, 0, 35, 0, 51, 55, 84, 0, 63,
	45, 82, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 0, 705, 0, 0, 0, 69, 0, 67, 59,
	80, 0, 0, 65, 53, 78, 62, 79, 0, 77,
	83, 70, 38, 57, 34, 61, 66, 0, 42, 0,
	89, 90, 91, 92, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 73, 37,
	76, 0, 40, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 36, 60, 0, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 49, 96,
	0, 0, 52, 0, 0, 75, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 109, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 0, 0, 85, 0, 0, 0,
	0, 39, 46, 0, 48, 54, 64, 86, 0, 68,
	41, 81, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 84, 0, 0,
	0, 47, 97, 98, 0, 35, 0, 51, 50, 0,
	0, 63, 45, 82, 0, 0, 0, 0, 67, 59,
	80, 0, 0, 65, 53, 78, 62, 79, 69, 77,
	83, 70, 38, 57, 34, 61, 66, 0, 42, 0,
	89, 90, 91, 92, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 73, 37,
	76, 0, 40, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 36, 60, 0, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 49, 96,
	0, 0, 52, 0, 0, 75, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 109, 0, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 0, 0, 85, 0, 0, 0,
	0, 39, 46, 0, 48, 54, 64, 86, 0, 68,
	41, 81, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 84, 0, 0,
	0, 47, 97, 98, 0, 35, 0, 51, 50, 0,
	0, 63, 45, 82, 0, 0, 0, 0, 67, 59,
	80, 0, 0, 65, 53, 78, 62, 79, 69, 77,
	83, 70, 38, 57, 34, 61, 66, 0, 42, 0,
	89, 90, 91, 92, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 73, 37,
	76, 0, 40, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	49, 96, 0, 0, 52, 0, 0, 75, 56, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 32, 0, 0, 0,
	0, 87, 88, 0, 0, 0, 85, 0, 0, 0,
	0, 39, 46, 0, 48, 54, 64, 86, 0, 68,
	41, 81, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 97, 98, 0, 35, 0, 51, 55, 84,
	0, 63, 45, 82, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 0, 558, 0, 0, 0, 69, 0,
	67, 59, 80, 0, 0, 65, 53, 78, 62, 79,
	0, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 36, 60,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	49, 96, 0, 0, 52, 0, 0, 75, 56, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 32, 0, 1056, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 0, 0, 85, 0,
	0, 0, 0, 39, 46, 0, 48, 54, 64, 86,
	0, 68, 41, 81, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 84,
	0, 0, 0, 47, 97, 98, 0, 35, 0, 51,
	50, 0, 0, 63, 45, 82, 0, 0, 0, 0,
	67, 59, 80, 0, 0, 65, 53, 78, 62, 79,
	69, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 36, 60,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	49, 96, 0, 0, 52, 0, 0, 75, 56, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 0, 0, 85, 0,
	0, 0, 0, 39, 46, 0, 48, 54, 64, 86,
	0, 68, 41, 81, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 84,
	0, 0, 106, 47, 97, 98, 0, 35, 0, 51,
	50, 0, 0, 63, 45, 82, 0, 0, 0, 0,
	67, 59, 80, 0, 0, 65, 53, 78, 62, 79,
	69, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 36, 60,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	49, 96, 0, 0, 52, 0, 0, 75, 56, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 32, 0, 31, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 0, 0, 85, 0,
	0, 0, 0, 39, 46, 0, 48, 54, 64, 86,
	0, 68, 41, 81, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 84,
	0, 0, 0, 47, 97, 98, 0, 35, 0, 51,
	50, 0, 0, 63, 45, 82, 0, 0, 0, 0,
	67, 59, 80, 0, 0, 65, 53, 78, 62, 79,
	69, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 36, 60,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	49, 96, 0, 0, 52, 0, 0, 75, 56, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 0, 0, 85, 0,
	0, 0, 0, 39, 46, 0, 48, 54, 64, 86,
	0, 68, 41, 81, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 84,
	0, 0, 0, 47, 97, 98, 0, 35, 0, 51,
	50, 0, 0, 63, 45, 82, 0, 0, 0, 0,
	67, 59, 80, 0, 0, 65, 53, 78, 62, 79,
	69, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 0, 0, 85, 0,
	0, 0, 0, 39, 46, 0, 48, 54, 64, 86,
	0, 68, 41, 81, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 97, 98, 0, 35, 0, 51,
	0, 0, 0, 63, 45, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69,
}

var yyPact = [...]int16{
	373, -1000, -261, -1000, -1000, 1189, 205, 288, -1000, -1000,
	-1000, 16977, 316, 314, 206, 298, 17177, 16777, 15965, 322,
	283, -1000, -221, -180, -1000, -85, 320, -1000, 966, -1000,
	11219, 11219, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15353,
	17177, 283, 134, 283, 1210, 339, 638, 1324, 465, -1000,
	-1000, -1000, 283, 15965, 637, -1000, -1000, -1000, -1000, 15153,
	192, 12457, 912, -153, 23, -1000, -1000, -1000, -1000, -1000,
	1056, -1000, -1000, -1000, 1056, 68, 1181, 1056, 1181, -1000,
	1056, 1181, 63, 63, 63, 63, 63, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1178, 1176, -1000, 1056, 1056, 1056,
	1056, 1056, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1163, 272, 1163, 1060, 1060, -1000, -1000, 912,
	1193, 15965, 17177, 1208, 15965, -241, 15965, 15965, 1390, 15965,
	-1000, -1000, -1000, 151, 1302, 11219, 6284, 15965, -1000, 1301,
	330, 15965, 5546, 1036, 1279, -1000, -1000, -1000, -1000, -1000,
	-1000, 1172, 672, 17177, 244, 247, 486, 315, 878, -1000,
	-1000, -1000, 737, -1000, 17177, -1000, 1410, -1000, -1000, 243,
	-1000, 241, 629, 814, 15965, 1167, 180, 1166, 11844, 787,
	-1000, -272, -1000, 21, -1000, -1000, 761, 63, 1056, -1000,
	63, 727, 63, 63, -1000, -1000, 497, 1284, 497, 497,
	497, 497, 813, 813, -110, -110, -1000, -1000, -1000, -1000,
	784, 1163, -1000, -1000, -1000, 779, -1000, 15965, 17177, 1162,
	1207, 15965, 1323, 293, -1000, -1000, 1322, 1321, 1011, -1000,
	-1000, 149, -1000, 420, -1000, 17177, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1198, -1000,
	261, 328, 5915, -1000, -1000, -1000, -1000, 192, -1000, 16377,
	-1000, 1407, 1351, 264, -15, -1000, 875, 847, -1000, 840,
	-1000, -1000, 17, -1000, -183, 100, -12, -1000, -1000, 1042,
	-1000, 1161, 9004, 1316, -1000, 1288, 777, -1000, 11513, -1000,
	-247, -1000, -1000, -1000, -247, -1000, -1000, -1000, 1042, -1000,
	1160, 1153, -1000, 1152, -1000, -1000, 1042, 459, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1006, 497, 63, 497, 1003,
	1002, 497, 497, -1000, -1000, 828, 542, -1000, -1000, -1000,
	-1000, 964, -1000, 962, -1000, 97, 92, -1000, 1034, -1000,
	959, 1041, 1206, 14953, 15965, 1148, 1084, 283, 1084, 1350,
	199, 15965, 1390, 15765, 1390, 420, 17177, 245, 17177, -1000,
	-1000, 273, 4439, -1000, 5546, 957, -1000, 253, 1056, 358,
	358, -194, 240, 235, 1042, -1000, -1000, -1000, -1000, -195,
	-1000, -1000, -1000, -1000, 629, -1000, 9004, -1000, 15765, 744,
	-1000, 9004, 50, 1042, 1042, -1000, -1000, 381, -1000, -1000,
	-1000, 9997, 9997, 9997, 9997, 9997, 9997, 9997, -1000, -1000,
	-1000, -1000, 33, -247, -1000, 798, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 456, 449, -1000, 8673, 1042, 1042, 1042,
	1042, 1042, 1042, 1042, 1042, 9004, 1042, 1273, 1042, 1042,
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 2223,
	1042, 1042, 1042, 1042, -1000, 146, -1000, 1032, 999, 1235,
	998, -1000, 10659, -1000, 853, -1000, 734, -1000, 719, 996,
	7668, 6653, -1000, -1000, 497, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 63, 808, 63, 19, 18, 776, -1000,
	775, 14953, 17177, 15965, 989, 1028, -1000, 248, 1136, 15765,
	-1000, 1366, 1396, -1000, 1084, 15965, -1000, 290, 1384, -1000,
	-1000, 1340, -1000, 1026, -1000, -1000, 1030, 1390, 1133, 17177,
	-1000, -1000, 258, 17177, -1000, -1000, -1000, -1000, -1000, 650,
	16377, 1298, -1000, -1000, -1000, 659, -1000, -1000, 677, 185,
	654, -1000, 17177, -195, 9004, -1000, 1042, 559, 952, -140,
	9004, 9004, 651, 365, 9997, 722, 545, 9997, 9997, 9997,
	9997, 9997, 9997, 9997, 9997, 9997, 9997, 9997, 9997, 9997,
	9997, 9997, 794, 2297, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 823, -1000, 1084, 12244,
	12244, 10, 10, 10, 10, 10, 10, 12044, -1000, -266,
	-1000, -1000, 5177, 6653, 853, 948, 627, 8673, 8330, 8330,
	7006, 9004, 9997, 15553, 8330, 1318, 613, 627, 15553, 1338,
	853, 853, 853, -1000, 853, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 66, -1000, -1000, -1000, -1000, -1000,
	-1000, 8330, 8330, 8330, 8330, 9004, 1121, 769, -1000, 988,
	-247, -1000, -1000, -1000, -153, -1000, -1000, -1000, -1000, -1000,
	853, 8330, 927, 948, -1000, 12681, -1000, 443, 1042, -1000,
	497, -1000, 497, -1000, -1000, 984, 983, 978, 1115, 1114,
	-231, 761, 14953, 946, 1354, 1364, 1084, 1315, 1247, -1000,
	853, 1309, 17177, -1000, -1000, -1000, -1000, -1000, 179, 609,
	17177, 2563, 986, -1000, 12893, 1111, 1108, 274, 1203, 1175,
	170, -1000, 821, 588, 807, 578, 577, 571, 560, 548,
	537, 533, -1000, -1000, -1000, -1000, -1000, 1409, -1000, -1000,
	-1000, 1385, 1094, -1000, 1078, 559, 9004, 197, 1204, -1000,
	-1000, 365, 551, -1000, -1000, 763, -1000, -1000, 2239, -1000,
	-1000, -1000, -1000, 722, 9997, 9997, 9997, 2116, 2239, 2179,
	2289, 1928, 10, 64, 64, 11, 11, 11, 11, 11,
	79, 79, -1000, -1000, -1000, -1000, -105, -1000, 1056, 853,
	-1000, -247, 806, -1000, -1000, 805, 1042, 441, -1000, -1000,
	-1000, 9004, -1000, 853, 927, 12681, 927, 604, 1022, 10328,
	1056, -1000, 1056, 1060, -1000, -1000, 114, 1056, 112, -1000,
	-1000, -1000, -1000, 1060, -1000, -1000, -1000, -1000, -1000, 1056,
	1056, -1000, -1000, 1056, 1056, -1000, 1056, 1056, 686, 581,
	2131, 1027, -1000, 433, 927, 8330, -1000, 616, -1000, 9004,
	853, 15965, -1000, -1000, -1000, -1000, -1000, 927, 853, 1019,
	927, 927, 596, -1000, 976, 972, -1000, -1000, 927, 8330,
	-257, -1000, -1000, -1000, 16577, -1000, -1000, 4070, 8330, -1000,
	-1000, -1000, -1000, -231, 14953, 16377, 1375, 1059, 943, 1375,
	1297, 9004, 9004, 1366, -1000, 1084, -1000, -1000, 1318, -1000,
	-1000, 683, -1000, 1084, 974, -1000, 167, 131, 9004, -1000,
	2563, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1366, -1000, -1000, -1000, 17177, 2459, 17177, 17177, 17177,
	397, 9666, 9004, -1000, -1000, -1000, 15965, 872, 9335, 12893,
	12893, 9335, 12893, 12893, 16377, 16377, 234, -1000, 17177, -1000,
	-123, 1175, 17177, -1000, 759, -1000, -1000, 701, 753, 701,
	701, 701, 701, 701, 358, 358, 17177, 16377, 197, 559,
	-1000, -94, 1401, -1000, -1000, -1000, -1000, 2116, 2239, 2055,
	-1000, 9997, 9997, 91, -1000, 48, -1000, -247, 6653, 627,
	-1000, -1000, -1000, 2586, 794, 9004, -1000, 259, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2586, 9997, 9997, 9997, 9997, 9997, 5177, -99, 931, 602,
	-1000, 9004, 635, -1000, -1000, -1000, -1000, -1000, -1000, -146,
	249, -1000, -1000, -1000, -1000, -1000, 1042, -1000, -1000, 429,
	853, 1375, 860, 921, 650, 9004, 15765, -231, 650, -1000,
	1405, 396, 592, 1018, -1000, 668, 1354, 853, 1228, -1000,
	-1000, -106, 17177, 9004, 2537, 2563, 627, -1000, 1354, 288,
	14741, 13929, 1017, 10939, -1000, 2963, 684, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 17177, 1398, 1393, 1392, 1380, 2472, 50, 599,
	128, 1330, -1000, -1000, 9335, -1000, -1000, -1000, -1000, -1000,
	918, 916, 1058, 1042, 913, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 629, 629, 891,
	886, -1000, 197, -1000, 358, 358, -1000, 9997, 2239, 2239,
	14, -1000, 805, -1000, -1000, 853, 1056, 853, 559, -1000,
	-1000, 853, 378, 1981, 1050, 362, 402, -1000, 1042, -92,
	-1000, 627, 9004, -1000, -1000, -1000, 173, 749, 750, 742,
	736, 45, -1000, 1361, 371, 4808, -1000, 650, 1375, 650,
	1203, 627, 871, 1375, 1203, -1000, 1271, 9004, 9004, 9004,
	-1000, 1297, -1000, 8330, -1000, -1000, -251, -1000, 627, -1000,
	-1000, 2563, 1986, -1000, 1297, 14541, 15965, 883, -1000, 995,
	1317, -1000, -1000, -1000, 1299, 13105, 13305, 17177, 161, -1000,
	-1000, 1016, 3332, -37, -1000, -1000, -1000, 528, 424, 14341,
	-1000, 1283, -1000, -1000, 2459, 1294, -1000, -1000, -1000, -1000,
	-1000, 2563, 2563, 2563, 609, 171, -1000, 279, 16377, 17177,
	-1000, 1175, -1000, -1000, 256, 650, -1000, -1000, -1000, 2239,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 9997, 9997, -1000,
	9997, 9997, 9997, 853, 703, 627, 721, -1000, 694, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 14129, -1000, 1360, 853,
	-1000, 1203, 650, -1000, -1000, -1000, 650, -1000, 1268, 627,
	627, -1000, -1000, 971, 9004, -262, 2465, -1000, -1000, 216,
	15965, -1000, 216, 910, 13929, 15965, -1000, -1000, 15553, 13929,
	13929, 13929, 13929, 13929, -1000, 1244, 1242, -1000, 1226, 1223,
	1238, 15965, -1000, 859, 13105, 395, 1042, -1000, 16165, -1000,
	-1000, -1000, 11219, 1319, 3701, 1016, -37, 1014, -1000, -8,
	-6, 7337, 6653, 497, -1000, -1000, -1000, -1000, -1000, 17177,
	892, 1926, 406, 127, 165, 144, -1000, 147, 852, 853,
	-1000, 15965, 1203, 378, 378, 378, 378, 157, -1000, -1000,
	-1000, -1000, -1000, 414, 9004, -1000, -1000, -1000, 1203, -1000,
	1375, 13929, 627, 582, -1000, -1000, 933, 1042, -1000, 1375,
	13929, 968, -1000, 982, -1000, 500, 1317, 1049, 1201, 908,
	-1000, -1000, -1000, -1000, 1234, -1000, 1232, -1000, -1000, -1000,
	-1000, -114, 312, 310, 302, 17177, -1000, 1084, -1000, 1014,
	-37, -20, -1000, -1000, -1000, -1000, 627, 453, -1000, -1000,
	-1000, 2563, 552, 593, 2563, -1000, -1000, 140, -1000, -1000,
	-1000, 1046, -1000, -1000, -1000, -1000, -1000, 853, 189, -131,
	6653, 864, -1000, 627, -1000, 1373, 1013, -1000, 1051, 15553,
	1042, -1000, 13717, 17177, 1366, 968, -1000, 1366, 15553, 9004,
	-1000, -1000, 9004, 1045, -1000, 9004, -1000, -1000, -1000, -1000,
	1044, 1042, 1042, 1042, 839, -1000, -1000, -1000, -1000, -18,
	-16, -1000, 9004, 278, 126, 1918, -1000, -1000, 17177, -1000,
	1260, -119, -142, -1000, -1000, 853, 9004, 1368, 1359, -1000,
	1291, 942, 1010, -1000, -1000, 7999, 853, 846, 400, 839,
	1354, -1000, 1354, -1000, 627, 627, 15765, 627, -120, 15765,
	15765, 15765, 13505, 17177, -1000, -1000, -1000, 627, -1000, 2563,
	1935, 835, -1000, 1253, -1000, -1000, -1000, -1000, 9004, 9004,
	233, -1000, 1042, -1000, -1000, 955, 17177, 17177, -1000, -1000,
	-1000, 832, 827, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	819, 819, 819, 395, -1000, 208, -1000, -1000, -112, 627,
	1012, 1403, -1000, 1042, -1000, 1084, 342, -1000, -1000, -1000,
	-120, -1000, -1000, -1000, -114, -1000, -135, 15553, 1010, 853,
	17177, -1000, -1000, -179, 987, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1667, 90, 54, 1662, 1660, 1659, 1657, 1653, 1650,
	1648, 1647, 1646, 1643, 1642, 1637, 1636, 1628, 1625, 75,
	1623, 1622, 1619, 65, 1618, 1617, 1614, 1611, 62, 73,
	86, 91, 5, 1603, 39, 29, 34, 1602, 24, 1601,
	1598, 44, 1597, 28, 1595, 1594, 164, 1592, 1589, 6,
	257, 63, 92, 1587, 1585, 83, 1226, 1584, 1578, 84,
	1577, 1576, 74, 9, 4, 7, 8, 1575, 58, 14,
	1574, 67, 1573, 1567, 1566, 1556, 37, 1553, 46, 57,
	22, 51, 1551, 41, 64, 33, 20, 13, 1, 42,
	27, 1541, 21, 30, 23, 1540, 53, 1538, 117, 35,
	49, 69, 0, 77, 133, 76, 1537, 1534, 1531, 800,
	78, 25, 11, 1530, 60, 1528, 59, 97, 26, 87,
	85, 1527, 81, 1526, 1524, 1521, 1520, 1886, 441, 106,
	170, 52, 1519, 1515, 79, 294, 275, 68, 300, 538,
	66, 1509, 1508, 1507, 99, 1504, 48, 82, 16, 371,
	1498, 1495, 1494, 1493, 1492, 110, 1491, 88, 1489, 72,
	47, 50, 220, 36, 1487, 1483, 1481, 1480, 61, 1476,
	1475, 1474, 56, 1473, 1472, 80, 70, 111, 93, 102,
	1469, 1468, 71, 96, 104, 1467, 103, 38, 10, 55,
	1466, 43, 1463, 1462, 1459, 2, 3, 1458, 1456, 1454,
	1453, 1452, 1450, 45, 1438, 1437, 1436, 15, 1435, 1434,
	40, 1432, 1431, 1430, 1429, 1428, 1277, 843, 1427, 118,
	1423, 1422, 135,
}

var yyR1 = [...]uint8{
	0, 212, 213, 213, 1, 1, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 15, 15, 15, 15, 15, 215, 215,
	2, 2, 3, 4, 4, 5, 5, 6, 6, 22,
	22, 7, 8, 8, 8, 218, 218, 41, 41, 85,
	85, 9, 9, 9, 9, 10, 10, 192, 192, 191,
	193, 193, 11, 11, 11, 11, 11, 185, 185, 185,
	185, 185, 12, 12, 188, 188, 188, 13, 13, 13,
	90, 90, 94, 94, 94, 95, 95, 95, 95, 204,
	204, 115, 115, 214, 214, 219, 219, 219, 219, 219,
	219, 219, 183, 183, 183, 183, 184, 184, 184, 184,
	186, 186, 187, 187, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 190, 190, 100, 100, 166, 166,
	166, 167, 167, 167, 167, 167, 167, 169, 169, 170,
	170, 107, 107, 171, 171, 18, 151, 152, 152, 152,
	152, 152, 152, 152, 139, 139, 118, 118, 118, 118,
	118, 118, 118, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 177, 177, 177, 177, 177, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 179, 180, 181, 173, 173,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 129, 129, 129, 129, 129, 129,
	172, 172, 168, 168, 168, 168, 122, 122, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 121, 121,
	121, 121, 121, 121, 121, 121, 123, 123, 123, 123,
	123, 123, 123, 123, 119, 119, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 126, 126,
	125, 125, 125, 125, 125, 125, 125, 125, 138, 138,
	127, 127, 136, 136, 137, 137, 137, 128, 128, 128,
	135, 135, 135, 132, 132, 133, 133, 134, 134, 134,
	130, 130, 130, 131, 131, 131, 141, 162, 162, 162,
	164, 164, 165, 165, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 150, 150, 182, 182, 161,
	161, 161, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 149, 149, 159, 159, 160, 160, 157, 157, 157,
	158, 144, 144, 144, 144, 144, 145, 146, 146, 146,
	146, 142, 143, 175, 175, 175, 208, 208, 208, 208,
	208, 208, 209, 209, 176, 176, 147, 147, 148, 148,
	155, 155, 155, 155, 220, 220, 153, 153, 153, 154,
	154, 154, 221, 19, 20, 20, 21, 21, 21, 25,
	25, 25, 23, 23, 24, 24, 30, 30, 29, 29,
	31, 31, 31, 31, 106, 106, 106, 105, 105, 205,
	205, 205, 205, 205, 33, 33, 34, 34, 35, 35,
	36, 36, 36, 195, 195, 194, 194, 196, 196, 196,
	196, 196, 196, 48, 48, 83, 83, 83, 86, 86,
	37, 37, 37, 37, 38, 38, 39, 39, 40, 40,
	113, 113, 112, 112, 112, 111, 111, 42, 42, 42,
	44, 43, 43, 43, 43, 45, 45, 47, 47, 46,
	46, 49, 49, 49, 49, 50, 50, 84, 84, 32,
	32, 32, 32, 32, 32, 32, 97, 97, 52, 52,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	61, 61, 61, 61, 61, 61, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 28, 28, 62,
	62, 62, 68, 63, 63, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 59, 59, 59, 59, 59, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 222, 222, 60, 60,
	60, 60, 26, 26, 26, 26, 26, 114, 114, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 117, 117, 117, 117, 117, 117, 117, 117, 72,
	72, 27, 27, 70, 70, 71, 99, 99, 73, 73,
	69, 69, 69, 197, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 74, 74, 75, 75, 206, 206,
	207, 76, 76, 77, 77, 78, 79, 79, 79, 80,
	80, 80, 80, 81, 81, 81, 54, 54, 54, 54,
	54, 54, 82, 82, 82, 82, 87, 87, 64, 64,
	66, 66, 65, 67, 88, 88, 92, 89, 89, 93,
	93, 93, 93, 93, 16, 17, 91, 91, 91, 108,
	108, 108, 98, 98, 96, 96, 103, 103, 104, 104,
	109, 109, 109, 110, 110, 198, 198, 198, 199, 199,
	199, 200, 200, 201, 202, 202, 203, 211, 211, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 216, 217,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 7, 10, 7, 11, 11, 9, 13,
	16, 5, 8, 11, 13, 13, 6, 7, 1, 1,
	4, 6, 10, 1, 3, 1, 3, 7, 8, 1,
	1, 8, 8, 7, 6, 1, 1, 1, 3, 0,
	4, 3, 4, 5, 4, 2, 6, 1, 3, 2,
	0, 1, 2, 2, 2, 3, 5, 0, 2, 2,
	2, 2, 3, 5, 1, 2, 3, 7, 5, 9,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 0, 3, 0, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 1, 1, 1, 3,
	1, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 4, 0, 3, 0, 2,
	2, 0, 2, 2, 2, 2, 2, 0, 2, 0,
	3, 0, 1, 0, 2, 4, 4, 0, 1, 3,
	3, 3, 3, 3, 2, 2, 3, 1, 1, 1,
	1, 1, 0, 2, 2, 3, 2, 4, 2, 4,
	2, 2, 3, 2, 3, 2, 7, 9, 3, 3,
	6, 9, 9, 6, 6, 8, 8, 5, 8, 7,
	4, 2, 4, 6, 2, 4, 2, 1, 1, 1,
	2, 1, 1, 1, 3, 1, 2, 1, 1, 2,
	0, 4, 3, 4, 3, 3, 3, 3, 3, 3,
	3, 2, 4, 6, 2, 3, 2, 3, 1, 3,
	0, 2, 0, 2, 2, 3, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
	2, 2, 2, 2, 1, 1, 1, 3, 3, 2,
	2, 2, 1, 1, 1, 1, 4, 5, 4, 4,
	4, 1, 2, 2, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 3, 3,
	0, 3, 3, 0, 1, 0, 1, 0, 2, 1,
	0, 3, 3, 0, 1, 2, 6, 0, 1, 4,
	1, 2, 1, 3, 2, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 1, 1, 0,
	2, 5, 2, 3, 3, 2, 3, 2, 2, 3,
	4, 1, 1, 1, 1, 1, 3, 3, 2, 2,
	1, 2, 5, 5, 8, 8, 13, 1, 1, 2,
	2, 10, 7, 0, 1, 1, 0, 1, 1, 1,
	2, 2, 1, 2, 0, 3, 0, 1, 1, 3,
	0, 4, 1, 3, 2, 1, 1, 2, 1, 1,
	1, 1, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	3, 6, 4, 7, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 0, 4, 1, 3, 1, 1, 1,
	1, 1, 1, 4, 8, 1, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 0, 4, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 6, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 1, 1, 1,
	1, 2, 4, 5, 5, 6, 4, 4, 4, 6,
	6, 6, 6, 6, 8, 8, 6, 8, 8, 9,
	7, 5, 4, 4, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 2, 2, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 0, 2,
	1, 3, 5, 3, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 3, 0, 2, 1, 3,
	1, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 5, 3, 1, 3, 1, 2, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 2, 0, 2,
	2, 0, 1, 4, 1, 3, 2, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -212, -1, -14, -15, -18, 122, 123, -213, 377,
	-151, 56, -208, -209, -171, 131, 144, 162, 163, 349,
	129, 361, 362, 146, 364, 76, -96, 134, -152, -139,
	-103, 61, 59, -102, 169, 340, 21, 204, 167, 286,
	207, 295, 173, 28, 256, 347, 287, 336, 289, 33,
	143, 342, 37, 159, 290, 131, 41, 168, 18, 154,
	222, 170, 161, 346, 291, 158, 171, 153, 294, 363,
	166, 208, 297, 203, 202, 40, 205, 164, 160, 162,
	155, 296, 348, 165, 132, 281, 292, 276, 277, 175,
	176, 177, 178, 179, 180, 181, 34, 337, 338, 130,
	130, 132, 202, 132, -103, -103, 135, -46, -109, 59,
	-102, 61, 129, -98, 135, 364, 361, 362, 329, 129,
	58, 57, -140, -118, -122, -119, -124, -123, -125, -103,
	-120, -121, 238, 341, 235, 239, 236, 241, 242, 243,
	116, 240, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 244, 256, 31, 151, 228, 229, 230,
	233, 232, 234, 231, 257, 258, 259, 260, 261, 262,
	263, 264, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 220, 221, 223, 224, 225, 227, 226, -140,
	-103, 54, 201, -103, -98, 203, -98, 54, -183, 54,
	19, 182, 183, 195, 78, 23, 119, -98, -46, 78,
	-46, 293, -155, -220, 344, 35, -139, -141, -144, -142,
	-143, -156, -145, 138, 136, 140, 141, 146, -149, 130,
	147, 71, 78, -177, 138, -180, 54, 272, 278, 136,
	147, 146, 375, 69, 139, 23, 351, 353, 29, 30,
	-134, 378, 266, -132, 275, -127, 56, -127, -126, 237,
	-128, 56, -127, -128, -127, -128, -130, 239, -130, -130,
	-130, -130, 56, 56, -127, -127, -127, -127, -127, -136,
	56, 222, -136, -136, -137, 56, -137, 54, 55, -46,
	-103, 54, -46, -204, 372, 373, -46, -46, -186, -184,
	8, 9, 10, -46, 196, 24, -118, -110, -109, -101,
	127, 183, 352, 77, 23, 25, 272, 278, 182, 80,
	116, 16, 81, 189, 361, 362, 115, 330, 122, 50,
	322, 323, 320, 187, 332, 333, 321, 279, 194, 20,
	29, 372, 10, 26, 149, 22, 109, 124, 184, 84,
	85, 152, 24, 150, 73, 190, 192, 19, 53, 142,
	11, 351, 13, 14, 366, 353, 135, 134, 96, 365,
	130, 48, 8, 118, 27, 373, 93, 44, 147, 193,
	46, 94, 17, 324, 325, 32, 339, 156, 111, 51,
	38, 367, 78, 368, 71, 54, 293, 188, 76, 15,
	49, 157, 369, 144, 191, 95, 125, 329, 47, 185,
	370, 128, 186, 6, 335, 31, 148, 45, 129, 280,
	83, 133, 72, 163, 5, 146, 9, 52, 55, 326,
	327, 328, 36, 82, 12, 145, 343, 74, -46, 24,
	127, -46, -153, -104, 69, -103, -101, 57, 34, 56,
	-176, 54, 78, -147, -103, 147, -149, -149, 59, -149,
	59, 130, 59, 71, 19, -103, 9, 147, 147, -176,
	61, -46, 56, -173, 352, 16, 56, -178, 56, -179,
	61, 62, 63, 64, 71, -129, 70, -52, 267, -59,
	320, 323, 322, 268, 72, 73, -103, -109, 59, -102,
	-181, 63, 379, -133, 276, 63, -130, -127, -130, 63,
	59, -130, -130, -131, 116, 115, 31, -131, -131, -131,
	-131, -138, 61, -138, -135, 343, 344, -135, 63, -136,
	63, -46, -103, 56, 54, -46, 23, 132, 23, -166,
	23, 54, 57, 196, -183, -103, 55, -107, 138, -144,
	146, 127, 86, -104, -155, -160, -157, -103, 147, 10,
	9, 19, 142, 136, 375, 59, 59, 59, -175, 146,
	361, 362, 363, -177, 375, -129, -216, 56, 56, -32,
	-51, 78, -56, 29, 24, -55, -52, -69, -197, -67,
	-68, 116, 117, 105, 106, 113, 79, 118, -59, -57,
	-58, -60, -200, 61, 62, -103, 60, 70, 63, 64,
	65, 66, 71, -109, 298, -65, -216, 46, 47, 330,
	331, 332, 333, 339, 334, 81, 36, 38, 244, 267,
	268, 320, 328, 327, 326, 324, 325, 322, 323, 374,
	135, 321, 111, 329, 265, 23, 29, 63, -178, 56,
	-179, -168, 374, -168, -216, -127, 56, -127, 56, 56,
	-216, 119, 58, -131, -130, -131, 58, 58, -131, -131,
	59, 59, 116, 58, 57, 58, 228, 228, 57, 58,
	57, 56, 55, 54, -159, -160, -59, -103, -46, 56,
	-2, -3, -4, 6, -216, -98, -2, -167, 19, 170,
	171, -46, -184, -83, -103, 147, -186, -183, -103, -215,
	130, 147, -103, 138, -144, -154, -104, 61, 63, 58,
	57, -127, -158, 270, -127, -146, 166, 167, 31, 168,
	-146, 363, 147, 147, -216, -175, -176, -32, -83, 58,
	77, 76, 93, -32, -53, 96, 78, 94, 95, 80,
	102, 101, 112, 105, 106, 107, 108, 109, 110, 111,
	103, 104, 115, 374, 86, 87, 88, 89, 90, 91,
	92, 97, 98, 99, 100, -97, -216, -68, -216, 120,
	121, -56, -56, -56, -56, -56, -56, -56, -201, 266,
	-168, 61, 119, 119, -2, -63, -32, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -72, -32, -216, 39,
	-216, -216, -216, -222, -216, -222, -222, -222, -222, -222,
	-222, -222, -117, 116, 239, 151, 230, -120, -119, 245,
	244, -216, -216, -216, -216, 56, 353, 57, 58, -178,
	61, 58, 269, 118, -118, -217, 58, 58, 58, 58,
	-30, 22, -29, -63, -31, -32, 107, -109, -104, -131,
	-130, 61, -130, 277, 277, 63, 63, -159, -103, -46,
	58, 56, 56, -83, -76, 15, -21, 5, -19, -221,
	-2, -46, 133, 21, 6, 8, 9, 10, 19, -100,
	57, 23, -186, -214, 56, -103, 146, -103, -162, -164,
	343, -163, 55, 143, 69, 175, 176, 177, 178, 179,
	180, 181, -157, -79, 25, 26, -176, 54, 71, 169,
	-176, 54, -147, -103, -175, -32, -216, -217, 58, 349,
	350, -32, -32, -61, 71, 78, 72, 73, -56, -62,
	-65, -68, 67, 96, 94, 95, 80, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-56, -56, -114, 59, 61, -122, 229, -117, -120, 59,
	-55, 61, -103, -55, -103, 378, -104, -110, -101, -104,
	-217, 57, -217, -2, -29, -32, -29, -32, -116, 116,
	235, 151, 230, 224, 254, 255, 274, 228, 275, 217,
	209, 214, 227, 225, 211, 226, 210, 223, 220, 233,
	232, 234, 245, 236, 241, 243, 242, 240, -32, -69,
	-56, -69, -103, -109, -29, -23, 22, -70, -71, 82,
	-69, 19, -217, -217, -217, -217, 237, -29, -30, -29,
	-29, -29, -32, 56, 63, 58, -134, -217, -29, 57,
	-217, -217, -106, -105, 23, -103, 61, 119, -216, -131,
	-131, 58, 58, 58, 56, 56, -84, 365, -159, 58,
	-80, 17, 16, -5, -3, -216, 21, 22, -25, 42,
	43, -20, -217, 23, -148, -103, 184, -99, 82, -103,
	-187, -189, -6, -8, -7, -10, -9, -11, -12, -13,
	-16, -3, -22, 10, 9, 20, 31, 188, 189, 194,
	190, 145, 135, -17, 8, 329, 54, -219, -103, 105,
	86, 61, -139, 57, 56, 56, 136, -161, 54, -163,
	343, 56, 345, 59, -150, 86, 61, 86, 86, 86,
	86, 86, 86, 86, 9, 10, 56, 56, -217, -32,
	-172, 168, 54, 71, 72, 73, -62, -56, -56, -56,
	-28, 152, 77, 343, -217, -202, -203, 61, 119, -32,
	-217, -217, -217, 57, 55, 57, -127, -127, -127, -137,
	215, -127, 215, -137, -127, -127, -127, -127, -127, -127,
	23, 57, 11, 57, 57, 11, 119, -217, -29, -73,
	-71, 84, -32, -217, -109, -217, -217, -217, -217, 58,
	-174, 58, 58, -217, -31, -205, 376, -105, 107, -110,
	-30, -84, -159, -160, -50, 12, 56, 58, -50, -81,
	19, 32, -32, -77, -78, -32, -76, -2, -23, 68,
	-2, -169, 57, 55, 185, 204, -32, -189, -76, -19,
	-19, -19, -192, -103, -191, -19, -211, -210, 299, 300,
	301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, -103,
	-103, -103, -185, 38, 191, 192, 193, -51, -56, -32,
	-51, -46, 58, -219, -103, -219, -219, -219, -219, -219,
	-160, -160, 147, -103, -165, -163, -103, 63, -182, 54,
	74, 63, -182, -182, -182, -182, -182, -146, -146, -148,
	-160, -172, -217, 336, 10, 9, -28, 77, -56, -56,
	228, 379, 57, -168, -104, -116, 116, -114, -32, -130,
	59, -116, -56, -56, -56, -56, -56, -104, 340, -76,
	85, -32, 83, 349, 350, 58, 205, 355, 356, 156,
	357, 168, 358, 359, -216, 119, -217, -50, 58, 58,
	-162, -32, -83, -84, -162, 9, 96, 57, 18, 57,
	-79, -80, -217, -24, 45, -170, 343, -103, -32, -190,
	-189, 204, -188, -189, -80, -96, 11, -41, -46, -34,
	-35, -36, -37, -48, -68, -216, -46, 57, -193, -118,
	186, -89, -115, 206, -93, 288, 287, -104, 298, -91,
	286, 239, 285, -182, 57, -103, 11, 11, 11, 11,
	-189, 204, 83, 204, -100, 19, 58, 58, 56, -216,
	58, 57, -176, -176, 58, 58, -172, -146, -146, -56,
	277, -203, -217, -217, -217, -217, -217, 19, 57, -217,
	57, 19, -216, -27, 335, -32, 343, 63, 16, 63,
	63, 63, 63, 356, 156, 358, 16, -217, 157, -76,
	107, -162, -50, -162, -161, 58, -50, -161, 40, -32,
	-32, -78, -81, -29, 375, -189, 377, -189, -81, -47,
	27, -46, -46, -41, -218, 57, 11, 55, 31, 57,
	-42, -44, -43, -45, 44, 48, 50, 45, 46, 47,
	51, -113, 23, -34, -216, -112, 157, -111, 23, -109,
	61, -191, -103, 187, 57, -89, 206, -90, -94, 289,
	291, 86, 119, -108, -103, 61, 29, 31, -210, 27,
	-188, -187, -188, -99, 184, -198, 197, 78, -160, -103,
	-163, 139, -162, -56, -56, -56, -56, -56, -217, 61,
	63, 63, 360, -109, 16, -217, -161, -162, -162, 41,
	-33, 11, -32, 377, 85, -189, -85, 157, -46, -85,
	55, -34, -46, -88, -92, -69, -35, -36, -36, -35,
	-36, 44, 44, 44, 49, 44, 49, 44, -43, -109,
	-217, -49, 52, 134, 53, -216, -111, 19, -93, -90,
	57, 290, 292, 293, 54, 74, -32, -104, -131, -103,
	85, 377, 377, 85, 204, 185, -199, 198, 197, 58,
	-217, -46, -161, -217, -217, -217, -217, -26, 96, 343,
	119, -206, -207, -32, -161, -50, -34, 85, -54, 31,
	36, -2, -216, -216, -50, -34, -50, -50, 57, 86,
	-39, -38, 54, 55, -40, 54, -38, 44, 44, -195,
	343, 130, 130, 130, -86, -103, -2, -94, -95, 294,
	291, 297, 86, 85, 84, -188, 200, 199, 56, -217,
	341, 51, 346, -104, -217, -76, 57, -74, 13, -87,
	54, -88, -64, -66, -65, -216, -2, -82, -103, -86,
	-76, -50, -76, -92, -32, -32, 56, -32, 56, -216,
	-216, -216, -217, 57, 291, 295, 296, -32, 135, 204,
	377, -148, 41, 342, 347, -217, -207, -75, 14, 16,
	28, -87, 57, -217, -217, -217, 57, 119, -217, -80,
	-80, -83, -194, -196, 366, 367, 368, 369, 370, 371,
	-83, -83, -83, -112, -103, -188, 85, 58, 41, -32,
	-63, 147, -66, 36, -2, -216, -103, -103, 58, 58,
	57, -217, -217, -217, -49, 85, 343, 9, -64, -2,
	119, -196, -195, 346, -88, -217, -103, 347,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 764, 1, 3,
	6, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	762, 387, 388, 389, 392, 0, 0, 765, 0, 148,
	162, 162, 766, 767, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 0,
	0, 762, 0, 762, 0, 0, 0, 0, 499, 770,
	771, 772, 762, 0, 0, 393, 390, 391, 144, 0,
	400, 0, 154, 317, 313, 157, 158, 159, 160, 161,
	300, 237, 264, 265, 300, 288, 307, 300, 307, 271,
	300, 307, 320, 320, 320, 320, 320, 279, 280, 281,
	282, 283, 284, 285, 948, 0, 256, 300, 300, 300,
	300, 300, 262, 263, 290, 291, 292, 293, 294, 295,
	296, 297, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 302, 302, 302, 304, 304, 254, 255, 155,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 0, 0, 162, 0, 0, 145, 0,
	0, 0, 146, 402, 0, 405, 149, 150, 151, 152,
	153, 0, 394, 396, 0, 0, 0, 0, 0, 361,
	362, 164, 0, 166, 0, 168, 0, 170, 171, 0,
	173, 175, 394, 0, 0, 0, 0, 0, 0, 0,
	163, 0, 319, 315, 314, 236, 0, 320, 300, 289,
	320, 0, 320, 320, 272, 273, 323, 0, 323, 323,
	323, 323, 0, 0, 310, 310, 259, 260, 261, 248,
	0, 302, 250, 251, 252, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 0, 128, 0, 110,
	106, 107, 108, 0, 105, 0, 21, 500, 773, 774,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 0, 763,
	141, 0, 0, 406, 408, 768, 769, 400, 404, 0,
	371, 0, 0, 0, 397, 352, 0, 0, 355, 0,
	357, -2, 383, 165, 0, 0, 0, 172, 174, 0,
	178, 179, 781, 0, 208, 0, 0, 191, 0, 194,
	-2, 197, 198, 199, 232, 201, 202, 203, 0, 205,
	300, 300, 228, 0, 518, 519, 0, 0, -2, -2,
	206, 207, 318, 156, 316, 0, 323, 320, 323, 0,
	0, 323, 323, 274, 324, 0, 0, 275, 276, 277,
	278, 0, 298, 0, 257, 0, 0, 258, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 762, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 396, 26,
	142, 0, 0, 407, 403, 0, 365, 300, 300, 0,
	0, 0, 0, 0, 0, 353, 354, 356, 359, 383,
	384, 385, 190, 167, 394, 169, 781, 1003, 0, 0,
	509, 781, 514, 516, 0, 555, 556, 557, 558, 559,
	560, 781, 781, 781, 781, 781, 781, 781, 587, 588,
	589, 590, 0, -2, 695, 690, 697, 698, 699, 700,
	701, 702, 703, 0, 0, 743, 781, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, 0, 0,
	0, 626, 626, 626, 626, 626, 626, 626, 626, 0,
	0, 0, 0, 0, 782, 0, 209, 0, 0, 0,
	0, 196, 162, 200, 0, 224, 0, 226, 0, 0,
	-2, 0, 301, 266, 323, 268, 308, 309, 269, 270,
	325, 321, 322, 320, 0, 320, 0, 0, 0, 305,
	0, 0, 0, 0, 0, 363, 364, 300, 0, 0,
	-2, 711, 0, 412, 0, 0, -2, 0, 0, 129,
	130, 126, 111, 109, 465, 466, 0, 0, 93, 0,
	28, 29, 397, 396, 27, 401, 409, 410, 411, 327,
	0, 716, 369, 370, 368, 394, 377, 378, 0, 0,
	394, 395, 396, 383, 781, 360, 0, 0, 0, 0,
	781, 781, 0, 512, 781, 0, 0, 781, 781, 781,
	781, 781, 781, 781, 781, 781, 781, 781, 781, 781,
	781, 781, 0, 0, 536, 537, 538, 539, 540, 541,
	542, 543, 544, 545, 546, 515, 0, 529, 0, 0,
	0, 578, 579, 580, 581, 582, 583, 584, 591, 0,
	694, 696, 0, 0, 33, 0, 553, 781, 781, 781,
	781, 781, 781, 0, 781, 422, 0, 680, 0, 0,
	0, 0, 0, 617, 0, 618, 619, 620, 621, 622,
	623, 624, 625, 671, 0, 673, 674, 675, 676, 677,
	678, 781, -2, 781, 781, 781, 187, 0, 192, 0,
	232, 195, 233, 234, 317, 204, 1004, 225, 227, 229,
	0, 781, 0, 0, 428, 434, 430, 0, 0, 267,
	323, 299, 323, 311, 312, 0, 0, 0, 0, 0,
	507, 1003, 0, 0, 719, 0, 0, 416, 419, 414,
	33, 0, 0, 132, 133, 134, 135, 136, 0, 686,
	0, 0, 0, 22, 95, 0, 0, 397, 349, 328,
	0, 330, 0, 345, 0, 0, 0, 0, 0, 0,
	0, 0, 366, 367, 717, 718, 372, 0, 379, 380,
	373, 0, 0, 397, 0, 0, 781, 230, 180, 183,
	184, 510, 511, 513, 530, 0, 532, 534, 520, 521,
	549, 550, 551, 0, 781, 781, 781, 547, 525, 0,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 575, 637, 638, 576, 0, 586, 300, 0,
	573, 232, 0, 574, 585, 0, 691, 0, -2, 693,
	552, 781, 742, 33, 0, 434, 0, 0, 0, -2,
	300, 642, 300, 304, 645, 646, 647, 300, 650, 652,
	653, 654, 655, 304, 657, 658, 659, 660, 661, 300,
	300, 664, 665, 300, 300, 668, 300, 300, 0, 557,
	0, 0, 690, 0, 0, 781, 423, 688, 683, 781,
	0, 0, 614, 615, 616, 627, 672, 0, 0, 427,
	0, 0, 0, 210, 0, 0, 235, 592, 0, 781,
	439, 596, 431, 435, 0, 437, 438, 0, -2, 286,
	287, 303, 306, 507, 0, 0, 505, 0, 0, 505,
	723, 781, 781, 711, 35, 0, 417, 418, 422, 420,
	421, 413, 34, 0, 137, 398, 0, 0, 781, 467,
	18, 112, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 711, 412, 412, 412, 0, 412, 0, 0, 0,
	67, 781, 781, 754, 39, 40, 0, 0, -2, 95,
	95, -2, 95, 95, 0, 0, 0, 326, 0, 331,
	0, 0, 0, 334, 0, 346, 336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 230, 0,
	176, 0, 0, 531, 533, 535, 522, 547, 526, 0,
	523, 781, 781, 0, 517, 0, 784, 232, 0, 554,
	-2, 597, 598, 0, 0, 781, 639, 320, 643, 644,
	648, 649, 651, 656, 662, 663, 666, 667, 669, 670,
	0, 781, 781, 781, 781, 781, 0, 0, 711, 0,
	684, 781, 0, 612, 613, 628, 629, 630, 631, 0,
	0, 189, 193, 593, 429, 594, 0, 436, 432, 0,
	0, 505, 0, 0, 327, 781, 0, 507, 327, 30,
	0, 0, 720, 712, 713, 716, 719, 33, 424, 415,
	-2, 139, 0, 781, 127, 0, 687, 113, 719, 764,
	0, 0, 55, -2, 57, 0, 0, 787, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 62,
	63, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	509, 126, 94, 96, -2, 97, 98, 99, 100, 101,
	0, 0, 0, 350, 0, 332, 337, 335, 338, 347,
	348, 339, 340, 341, 342, 343, 344, 394, 394, 0,
	0, 382, 230, 231, 0, 0, 524, 781, 548, 527,
	0, 783, 0, 786, 692, 0, 300, 0, 0, 640,
	641, 0, 0, 0, 0, 0, 0, 691, 0, 681,
	611, 689, 781, 185, 186, 188, 0, 0, 0, 0,
	0, 0, 221, 0, 0, 0, 595, 327, 505, 327,
	349, 506, 0, 505, 349, 724, 0, 781, 781, 781,
	715, 723, 36, 781, 425, 16, 0, 399, 138, 17,
	124, 0, 0, 74, 723, 0, 0, 0, 47, 0,
	446, 448, 449, 450, 480, 0, 482, 0, 0, 59,
	61, 51, 0, 0, 747, 91, -2, 0, 0, 0,
	-2, 0, 758, 755, 0, 65, 68, 69, 70, 71,
	72, 0, 0, 0, 686, 0, 23, 775, 0, 0,
	329, 0, 374, 375, 0, 327, 177, 181, 182, 528,
	577, 785, 599, 602, 600, 601, 603, 781, 781, 606,
	781, 781, 781, 0, 0, 685, 0, 212, 0, 214,
	215, 216, 217, 218, 219, 220, 0, 440, 0, 0,
	433, 349, 327, 10, 8, 508, 327, 12, 0, 721,
	722, 714, 31, 444, 781, 0, 0, 75, 123, 49,
	0, 498, -2, 0, 0, 0, 45, 46, 0, 0,
	0, 0, 0, 0, 487, 0, 0, 490, 0, 0,
	0, 0, 481, 0, 0, 501, 0, 483, 0, 485,
	486, 58, 162, 0, 0, 52, 0, 54, 80, 0,
	0, 781, 0, 323, 759, 760, 761, 757, 788, 0,
	0, 0, 0, 0, 0, 778, 776, 0, 0, 0,
	333, 0, 349, 0, 0, 0, 0, 632, 610, 682,
	211, 213, 222, 0, 781, 442, 7, 11, 349, 725,
	505, 0, 140, 0, 19, 76, 0, 0, 497, 505,
	0, 505, 48, 505, 744, 0, 447, 476, 478, 0,
	473, 488, 489, 491, 0, 493, 0, 495, 496, 451,
	452, 453, 0, 0, 0, 0, 484, 0, 748, 53,
	0, 0, 83, 84, 749, 750, 751, 0, 753, 66,
	73, 0, 0, 78, 0, 127, 25, 0, 777, 24,
	351, 0, 381, 605, 604, 607, 608, 0, 0, 0,
	0, 0, 708, 710, 9, 704, 445, 125, 736, 0,
	0, -2, 0, 0, 711, 505, 44, 711, 0, 781,
	470, 477, 781, 0, 471, 781, 472, 492, 494, 463,
	0, 0, 0, 0, 0, 468, -2, 81, 82, 0,
	0, 88, 781, 0, 0, 0, 779, 780, 0, 609,
	0, 0, 0, 223, 441, 0, 781, 706, 0, 37,
	0, 736, 726, 738, 740, 781, 33, 0, 732, 0,
	719, 43, 719, 745, 746, 474, 0, 479, 0, 0,
	0, 0, 482, 0, 85, 86, 87, 752, 77, 0,
	0, 0, 633, 0, 636, 443, 709, 32, 781, 781,
	0, 38, 0, 741, -2, 0, 0, 0, 50, 42,
	41, 0, 0, 455, 457, 458, 459, 460, 461, 462,
	0, 0, 0, 501, 469, 0, 20, 376, 634, 707,
	705, 0, 739, 0, -2, 0, 734, 733, 475, 454,
	0, 502, 503, 504, 453, 79, 0, 0, 729, 33,
	0, 456, 464, 0, 737, -2, 735, 635,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 377,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 378, 3, 379, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:406
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:411
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:412
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:420
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:425
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:445
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:465
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:486
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:502
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:519
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:538
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:549
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:561
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:572
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:588
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      []Statement{yyDollar[11].statement},
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:602
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:616
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:629
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[6].colIdent,
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:643
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:654
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 23:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:660
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 24:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:674
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:688
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:707
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:716
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:731
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:739
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 32:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:746
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:752
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:756
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:762
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:766
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:773
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:785
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:797
		{
			yyVAL.str = InsertStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:801
		{
			yyVAL.str = ReplaceStr
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:807
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:813
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:817
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:821
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:826
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:827
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:831
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:835
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:840
		{
			yyVAL.partitions = nil
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:844
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:850
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:854
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:858
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:862
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:868
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:872
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:885
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:889
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:895
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:900
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:904
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:910
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:917
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:924
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:931
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:939
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:949
		{
			yyVAL.str = ""
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:953
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:957
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:961
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:965
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:971
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:978
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:988
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:992
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:996
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 77:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1003
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1012
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 79:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1020
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1031
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1035
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1041
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1045
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1049
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1055
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1059
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1063
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1067
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1073
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1077
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1083
		{
			yyVAL.str = SessionStr
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1087
		{
			yyVAL.str = GlobalStr
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1092
		{
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1093
		{
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1097
		{
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1098
		{
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1099
		{
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1100
		{
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1101
		{
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1102
		{
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1103
		{
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1107
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1111
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1115
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1119
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1125
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1129
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1133
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1138
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1144
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1148
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1154
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1158
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1164
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1176
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1188
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1195
		{
			yyVAL.empty = struct{}{}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1197
		{
			yyVAL.empty = struct{}{}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1200
		{
			yyVAL.bytes = nil
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1204
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1208
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1213
		{
			yyVAL.bytes = nil
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1217
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1221
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1225
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1229
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1233
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1238
		{
			yyVAL.expr = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1242
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1247
		{
			yyVAL.expr = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1251
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1256
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1260
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1265
		{
			yyVAL.bytes = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1269
		{
			yyVAL.bytes = nil
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1275
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1282
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1288
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1292
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1297
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1301
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1305
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1309
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1313
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1319
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1324
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1330
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1341
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1346
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1352
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1365
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1370
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1375
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1380
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1386
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1391
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1396
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1401
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1406
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1411
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1416
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1421
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1426
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1435
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1445
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1450
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1455
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1462
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1469
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1477
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1482
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1487
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1492
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1498
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1504
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1510
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1516
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1523
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1527
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 193:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1531
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1535
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1539
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1545
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1549
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1553
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1557
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1561
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1565
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1569
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1573
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1577
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1583
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1589
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1595
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1601
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1605
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1610
		{
			yyVAL.sequence = &Sequence{}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1614
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1619
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1624
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1629
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1634
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1639
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1644
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1649
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1654
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1659
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1664
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1669
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1674
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1681
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1685
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1689
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1693
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1697
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1701
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1706
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1710
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1715
		{
			yyVAL.bytes = nil
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1724
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1729
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 287:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1957
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1961
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2001
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2006
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2011
		{
			yyVAL.optVal = nil
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2015
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2020
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2024
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2032
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2036
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2042
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2050
		{
			yyVAL.optVal = nil
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2054
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2058
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2067
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2071
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2075
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2080
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2084
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2089
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2093
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2098
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2102
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2106
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2111
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2115
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2119
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2124
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2128
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2132
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2138
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2143
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2147
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2151
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2157
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2161
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2167
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2171
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2177
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2181
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2186
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2190
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2194
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2198
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2202
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2206
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2210
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2214
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2218
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2224
		{
			yyVAL.str = ""
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2228
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2234
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2238
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2244
		{
			yyVAL.indexPartition = nil
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2248
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2252
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2258
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2262
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2266
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2270
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2274
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2278
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2282
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2286
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2290
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2296
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2300
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2306
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2311
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2317
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2321
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2327
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2332
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2336
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2346
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 372:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2351
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 373:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2358
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 374:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2365
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 375:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2372
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 376:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2381
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2393
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2397
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2401
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2405
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 381:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2411
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 382:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2422
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2432
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2436
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2440
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2446
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2450
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2454
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2458
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2462
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2466
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2472
		{
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2473
		{
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2477
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2481
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2486
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2493
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2497
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2504
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2508
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2514
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2518
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2523
		{
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2524
		{
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2528
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2532
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2536
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2542
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2546
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2550
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2555
		{
			setAllowComments(yylex, true)
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2559
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2565
		{
			yyVAL.bytes2 = nil
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2569
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2575
		{
			yyVAL.str = UnionStr
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2579
		{
			yyVAL.str = UnionAllStr
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2583
		{
			yyVAL.str = UnionDistinctStr
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2588
		{
			yyVAL.str = ""
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2592
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2596
		{
			yyVAL.str = SQLCacheStr
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2601
		{
			yyVAL.str = ""
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2605
		{
			yyVAL.str = DistinctStr
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2610
		{
			yyVAL.str = ""
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2614
		{
			yyVAL.str = StraightJoinHint
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2619
		{
			yyVAL.selectExprs = nil
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2623
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2629
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2633
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2639
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2643
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2647
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 433:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2651
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2656
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2660
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2664
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2671
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2676
		{
			yyVAL.overExpr = nil
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2680
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 441:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2684
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2688
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2692
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2697
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2701
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2707
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2711
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2721
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2725
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2729
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2734
		{
			yyVAL.strs = []string{}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2738
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2744
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2748
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2754
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2758
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2762
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2766
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2770
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2774
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2780
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 464:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2784
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2790
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2795
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2799
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2805
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2809
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2822
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2826
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2830
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2834
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2840
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2842
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2846
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2848
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2852
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2854
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2857
		{
			yyVAL.empty = struct{}{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2859
		{
			yyVAL.empty = struct{}{}
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2862
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2866
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2870
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2877
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2883
		{
			yyVAL.str = JoinStr
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2887
		{
			yyVAL.str = JoinStr
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2891
		{
			yyVAL.str = JoinStr
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2897
		{
			yyVAL.str = StraightJoinStr
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2903
		{
			yyVAL.str = LeftJoinStr
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2907
		{
			yyVAL.str = LeftJoinStr
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2911
		{
			yyVAL.str = RightJoinStr
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2915
		{
			yyVAL.str = RightJoinStr
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2921
		{
			yyVAL.str = NaturalJoinStr
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2925
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2935
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2939
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2945
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2949
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2954
		{
			yyVAL.indexHints = nil
		}
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2958
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2962
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 504:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2966
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2971
		{
			yyVAL.expr = nil
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2975
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2980
		{
			yyVAL.columns = nil
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2984
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2990
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2994
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2998
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3002
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3006
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3010
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3014
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3020
		{
			yyVAL.str = ""
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3024
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3030
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3034
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3040
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3044
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3048
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3052
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 524:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3056
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3060
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3064
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 527:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3068
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 528:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3072
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3076
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3082
		{
			yyVAL.str = IsNullStr
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3086
		{
			yyVAL.str = IsNotNullStr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3090
		{
			yyVAL.str = IsTrueStr
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3094
		{
			yyVAL.str = IsNotTrueStr
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3098
		{
			yyVAL.str = IsFalseStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3102
		{
			yyVAL.str = IsNotFalseStr
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3108
		{
			yyVAL.str = EqualStr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3112
		{
			yyVAL.str = LessThanStr
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3116
		{
			yyVAL.str = GreaterThanStr
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3120
		{
			yyVAL.str = LessEqualStr
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3124
		{
			yyVAL.str = GreaterEqualStr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3128
		{
			yyVAL.str = NotEqualStr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3132
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3136
		{
			yyVAL.str = PosixRegexStr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3140
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3144
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3148
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3153
		{
			yyVAL.expr = nil
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3157
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3163
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3167
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3171
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3177
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3183
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3187
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3193
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3197
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3201
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3205
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3209
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3213
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3217
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3221
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3225
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3229
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3233
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3237
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3241
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3245
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3249
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3253
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3257
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3261
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3265
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3269
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3273
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3277
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 577:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3281
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3285
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3289
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3293
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3301
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3315
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3319
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3323
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3331
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3339
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3347
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3357
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 593:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3361
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 594:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3365
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 595:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3369
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3373
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3383
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3387
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 599:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3391
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 600:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3395
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 601:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3399
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 602:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3403
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 603:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3407
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 604:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3411
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 605:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3415
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3419
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 607:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3423
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 608:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3427
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 609:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3431
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 610:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3435
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3439
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3443
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3448
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3452
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3456
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3460
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3470
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3474
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3478
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3482
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3487
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3492
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3497
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3502
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3506
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3520
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3524
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3528
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3532
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3538
		{
			yyVAL.str = ""
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3542
		{
			yyVAL.str = BooleanModeStr
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3546
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 635:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3550
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3554
		{
			yyVAL.str = QueryExpansionStr
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3560
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3564
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3570
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3574
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3578
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3582
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3586
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3590
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3596
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3600
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3604
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3608
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3612
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3616
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3620
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3624
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3628
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3632
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3636
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3640
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3644
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3648
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3652
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3656
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3660
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3664
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3668
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3672
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3676
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3680
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3684
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3688
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3692
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3696
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3702
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3706
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3710
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3714
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3718
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3722
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3726
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3730
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3735
		{
			yyVAL.expr = nil
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3739
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3744
		{
			yyVAL.str = string("")
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3748
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3754
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3758
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3764
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3769
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3771
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3774
		{
			yyVAL.expr = nil
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3778
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3784
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3788
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 692:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3792
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3798
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3804
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3808
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3813
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3818
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3822
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3826
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3830
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3834
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3838
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3842
		{
			yyVAL.expr = &NullVal{}
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3847
		{
			yyVAL.exprs = nil
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3851
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 706:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3856
		{
			yyVAL.expr = nil
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3860
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3866
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3870
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3876
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3881
		{
			yyVAL.orderBy = nil
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3885
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3891
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3895
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3901
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3906
		{
			yyVAL.str = AscScr
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3910
		{
			yyVAL.str = AscScr
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3914
		{
			yyVAL.str = DescScr
		}
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.limit = nil
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3923
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3927
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 722:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3931
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3936
		{
			yyVAL.str = ""
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3940
		{
			yyVAL.str = ForUpdateStr
		}
	case 725:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3944
		{
			yyVAL.str = ShareModeStr
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3957
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3961
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3965
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 729:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3970
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3974
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 731:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3978
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3985
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3989
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3993
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 735:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3997
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4002
		{
			yyVAL.updateExprs = nil
		}
	case 737:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4006
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4012
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4016
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4022
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4026
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4032
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4038
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4048
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4052
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4058
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4064
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4068
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4074
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4078
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4082
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4087
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4091
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4097
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4103
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4110
		{
			yyVAL.bytes = []byte("charset")
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4117
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4121
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4125
		{
			yyVAL.expr = &Default{}
		}
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4130
		{
			yyVAL.empty = struct{}{}
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4132
		{
			yyVAL.empty = struct{}{}
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4135
		{
			yyVAL.str = ""
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4137
		{
			yyVAL.str = IgnoreStr
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4141
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4145
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4152
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4158
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4162
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4167
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4174
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4180
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4184
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4188
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4194
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4198
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4202
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4208
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4212
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4219
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4226
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4230
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4237
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4243
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4247
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4489
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4498
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
