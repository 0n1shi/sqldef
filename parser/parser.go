// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const POSIX_REGEX = 57427
const POSIX_REGEX_CI = 57428
const POSIX_NOT_REGEX = 57429
const POSIX_NOT_REGEX_CI = 57430
const SHIFT_LEFT = 57431
const SHIFT_RIGHT = 57432
const DIV = 57433
const MOD = 57434
const UNARY = 57435
const COLLATE = 57436
const BINARY = 57437
const UNDERSCORE_BINARY = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const SCHEMA = 57448
const TABLE = 57449
const INDEX = 57450
const MATERIALIZED = 57451
const VIEW = 57452
const TO = 57453
const IGNORE = 57454
const IF = 57455
const PRIMARY = 57456
const COLUMN = 57457
const CONSTRAINT = 57458
const REFERENCES = 57459
const SPATIAL = 57460
const FULLTEXT = 57461
const FOREIGN = 57462
const KEY_BLOCK_SIZE = 57463
const POLICY = 57464
const WHILE = 57465
const UNIQUE = 57466
const KEY = 57467
const SHOW = 57468
const DESCRIBE = 57469
const EXPLAIN = 57470
const DATE = 57471
const ESCAPE = 57472
const REPAIR = 57473
const OPTIMIZE = 57474
const TRUNCATE = 57475
const MAXVALUE = 57476
const PARTITION = 57477
const REORGANIZE = 57478
const LESS = 57479
const THAN = 57480
const PROCEDURE = 57481
const TRIGGER = 57482
const TYPE = 57483
const VINDEX = 57484
const VINDEXES = 57485
const STATUS = 57486
const VARIABLES = 57487
const RESTRICT = 57488
const CASCADE = 57489
const NO = 57490
const ACTION = 57491
const PERMISSIVE = 57492
const RESTRICTIVE = 57493
const PUBLIC = 57494
const CURRENT_USER = 57495
const SESSION_USER = 57496
const PAD_INDEX = 57497
const FILLFACTOR = 57498
const IGNORE_DUP_KEY = 57499
const STATISTICS_NORECOMPUTE = 57500
const STATISTICS_INCREMENTAL = 57501
const ALLOW_ROW_LOCKS = 57502
const ALLOW_PAGE_LOCKS = 57503
const BEFORE = 57504
const AFTER = 57505
const EACH = 57506
const ROW = 57507
const SCROLL = 57508
const CURSOR = 57509
const OPEN = 57510
const CLOSE = 57511
const FETCH = 57512
const PRIOR = 57513
const FIRST = 57514
const LAST = 57515
const DEALLOCATE = 57516
const DEFERRABLE = 57517
const INITIALLY = 57518
const IMMEDIATE = 57519
const DEFERRED = 57520
const CONCURRENTLY = 57521
const BEGIN = 57522
const START = 57523
const TRANSACTION = 57524
const COMMIT = 57525
const ROLLBACK = 57526
const BIT = 57527
const TINYINT = 57528
const SMALLINT = 57529
const SMALLSERIAL = 57530
const MEDIUMINT = 57531
const INT = 57532
const INTEGER = 57533
const SERIAL = 57534
const BIGINT = 57535
const BIGSERIAL = 57536
const INTNUM = 57537
const REAL = 57538
const DOUBLE = 57539
const PRECISION = 57540
const FLOAT_TYPE = 57541
const DECIMAL = 57542
const NUMERIC = 57543
const SMALLMONEY = 57544
const MONEY = 57545
const TIME = 57546
const TIMESTAMP = 57547
const DATETIME = 57548
const YEAR = 57549
const DATETIMEOFFSET = 57550
const DATETIME2 = 57551
const SMALLDATETIME = 57552
const CHAR = 57553
const VARCHAR = 57554
const VARYING = 57555
const BOOL = 57556
const CHARACTER = 57557
const VARBINARY = 57558
const NCHAR = 57559
const NVARCHAR = 57560
const NTEXT = 57561
const UUID = 57562
const TEXT = 57563
const TINYTEXT = 57564
const MEDIUMTEXT = 57565
const LONGTEXT = 57566
const CITEXT = 57567
const BLOB = 57568
const TINYBLOB = 57569
const MEDIUMBLOB = 57570
const LONGBLOB = 57571
const JSON = 57572
const JSONB = 57573
const ENUM = 57574
const GEOMETRY = 57575
const POINT = 57576
const LINESTRING = 57577
const POLYGON = 57578
const GEOMETRYCOLLECTION = 57579
const MULTIPOINT = 57580
const MULTILINESTRING = 57581
const MULTIPOLYGON = 57582
const VARIADIC = 57583
const ARRAY = 57584
const NOW = 57585
const GETDATE = 57586
const BPCHAR = 57587
const TEXT_PATTERN_OPS = 57588
const NULLX = 57589
const AUTO_INCREMENT = 57590
const APPROXNUM = 57591
const SIGNED = 57592
const UNSIGNED = 57593
const ZEROFILL = 57594
const ZONE = 57595
const AUTOINCREMENT = 57596
const DATABASES = 57597
const TABLES = 57598
const VITESS_KEYSPACES = 57599
const VITESS_SHARDS = 57600
const VITESS_TABLETS = 57601
const VSCHEMA_TABLES = 57602
const EXTENDED = 57603
const FULL = 57604
const PROCESSLIST = 57605
const NAMES = 57606
const CHARSET = 57607
const GLOBAL = 57608
const SESSION = 57609
const ISOLATION = 57610
const LEVEL = 57611
const READ = 57612
const WRITE = 57613
const ONLY = 57614
const REPEATABLE = 57615
const COMMITTED = 57616
const UNCOMMITTED = 57617
const SERIALIZABLE = 57618
const NEW = 57619
const CURRENT_TIMESTAMP = 57620
const DATABASE = 57621
const CURRENT_DATE = 57622
const CURRENT_TIME = 57623
const LOCALTIME = 57624
const LOCALTIMESTAMP = 57625
const UTC_DATE = 57626
const UTC_TIME = 57627
const UTC_TIMESTAMP = 57628
const REPLACE = 57629
const CONVERT = 57630
const CAST = 57631
const SUBSTR = 57632
const SUBSTRING = 57633
const GROUP_CONCAT = 57634
const SEPARATOR = 57635
const INHERIT = 57636
const MATCH = 57637
const AGAINST = 57638
const BOOLEAN = 57639
const LANGUAGE = 57640
const WITH = 57641
const WITHOUT = 57642
const PARSER = 57643
const QUERY = 57644
const EXPANSION = 57645
const UNUSED = 57646
const VIRTUAL = 57647
const STORED = 57648
const GENERATED = 57649
const ALWAYS = 57650
const IDENTITY = 57651
const SEQUENCE = 57652
const INCREMENT = 57653
const MINVALUE = 57654
const CACHE = 57655
const CYCLE = 57656
const OWNED = 57657
const NONE = 57658
const CLUSTERED = 57659
const NONCLUSTERED = 57660
const REPLICATION = 57661
const INCLUDE = 57662
const HOLDLOCK = 57663
const NOLOCK = 57664
const NOWAIT = 57665
const PAGLOCK = 57666
const ROWLOCK = 57667
const TABLELOCK = 57668
const TYPECAST = 57669
const CHECK = 57670

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	127, 143,
	-2, 133,
	-1, 36,
	161, 473,
	162, 473,
	-2, 463,
	-1, 274,
	114, 829,
	-2, 825,
	-1, 275,
	114, 830,
	-2, 826,
	-1, 317,
	259, 839,
	-2, 723,
	-1, 349,
	81, 1054,
	-2, 82,
	-1, 350,
	81, 1004,
	-2, 83,
	-1, 356,
	81, 983,
	-2, 796,
	-1, 358,
	81, 1028,
	-2, 798,
	-1, 612,
	259, 839,
	-2, 501,
	-1, 661,
	259, 839,
	-2, 501,
	-1, 690,
	52, 41,
	54, 41,
	-2, 43,
	-1, 852,
	114, 832,
	-2, 828,
	-1, 1109,
	259, 839,
	-2, 501,
	-1, 1130,
	5, 28,
	-2, 622,
	-1, 1156,
	5, 27,
	-2, 769,
	-1, 1204,
	56, 351,
	-2, 348,
	-1, 1445,
	5, 27,
	-2, 90,
	-1, 1446,
	5, 27,
	-2, 91,
	-1, 1503,
	5, 28,
	-2, 770,
	-1, 1604,
	5, 27,
	-2, 772,
	-1, 1773,
	5, 28,
	-2, 773,
	-1, 1928,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 19195

var yyAct = [...]int{
	275, 1881, 1880, 1659, 525, 1763, 1702, 1746, 615, 3,
	1571, 1735, 1055, 1619, 538, 1193, 1509, 1662, 1532, 782,
	21, 1616, 253, 1159, 1725, 616, 1570, 270, 279, 1360,
	937, 1513, 307, 1196, 290, 91, 1172, 53, 91, 489,
	1390, 955, 341, 828, 980, 1361, 1267, 278, 1357, 684,
	1219, 1047, 986, 682, 1063, 1119, 252, 1064, 610, 979,
	938, 1177, 91, 91, 360, 247, 1225, 1780, 351, 282,
	360, 1332, 1001, 360, 360, 91, 257, 88, 66, 877,
	91, 907, 91, 355, 788, 902, 1114, 996, 91, 1122,
	975, 700, 1252, 1164, 925, 544, 854, 487, 1825, 699,
	934, 686, 336, 1042, 348, 344, 671, 335, 558, 248,
	249, 250, 251, 277, 714, 334, 550, 500, 720, 715,
	639, 1326, 504, 1096, 505, 262, 1236, 495, 895, 345,
	512, 339, 1514, 1515, 1516, 1517, 1518, 1519, 566, 1017,
	569, 266, 1907, 905, 1014, 1397, 584, 585, 586, 587,
	588, 589, 590, 272, 567, 568, 565, 591, 592, 593,
	594, 571, 570, 580, 581, 573, 574, 575, 576, 577,
	578, 579, 572, 52, 1873, 582, 572, 611, 582, 582,
	1417, 1736, 1538, 343, 259, 1030, 48, 26, 27, 1403,
	573, 574, 575, 576, 577, 578, 579, 572, 1673, 497,
	582, 1493, 537, 501, 1693, 490, 491, 1941, 28, 571,
	570, 580, 581, 573, 574, 575, 576, 577, 578, 579,
	572, 1404, 1546, 582, 1217, 1845, 91, 1016, 1864, 1934,
	360, 360, 360, 360, 1707, 360, 537, 1798, 1799, 1771,
	1919, 1706, 360, 571, 570, 580, 581, 573, 574, 575,
	576, 577, 578, 579, 572, 1123, 1124, 582, 575, 576,
	577, 578, 579, 572, 1800, 1056, 582, 547, 514, 360,
	1857, 1322, 1816, 1173, 1844, 1352, 1770, 571, 570, 580,
	581, 573, 574, 575, 576, 577, 578, 579, 572, 1795,
	1497, 582, 502, 1408, 546, 571, 570, 580, 581, 573,
	574, 575, 576, 577, 578, 579, 572, 630, 1679, 582,
	86, 82, 83, 1185, 84, 701, 1184, 702, 1678, 1186,
	1384, 1385, 969, 970, 1383, 968, 819, 1230, 533, 1232,
	1231, 523, 1477, 820, 91, 1657, 1476, 1021, 609, 1238,
	1019, 91, 91, 91, 1031, 1329, 597, 360, 1121, 929,
	1328, 351, 1593, 296, 360, 1021, 1486, 1484, 246, 1398,
	1804, 897, 1939, 1674, 1675, 1677, 1915, 1014, 1835, 1676,
	1878, 896, 1043, 1886, 1806, 1916, 666, 899, 1932, 1931,
	77, 1661, 490, 491, 518, 690, 900, 901, 1741, 1003,
	580, 581, 573, 574, 575, 576, 577, 578, 579, 572,
	1635, 898, 582, 1010, 1751, 999, 1863, 1801, 1865, 583,
	339, 1000, 583, 583, 790, 1325, 1933, 354, 1451, 1452,
	1726, 529, 530, 494, 1917, 1764, 498, 499, 1305, 1694,
	790, 935, 71, 75, 583, 68, 1457, 601, 602, 603,
	604, 605, 606, 607, 1684, 1765, 644, 645, 72, 1601,
	76, 1586, 520, 1458, 1540, 522, 997, 583, 1539, 1535,
	1406, 1396, 789, 1211, 1210, 1198, 73, 74, 69, 1006,
	1894, 1002, 1011, 998, 1467, 1938, 697, 496, 507, 1008,
	1007, 80, 49, 85, 519, 521, 1203, 1577, 79, 360,
	80, 583, 1885, 798, 493, 1547, 503, 1302, 492, 1176,
	583, 1175, 91, 1174, 91, 360, 1707, 91, 779, 225,
	91, 81, 1306, 1923, 91, 1698, 360, 360, 360, 360,
	360, 360, 360, 360, 1912, 583, 691, 1856, 1031, 1506,
	360, 360, 1024, 1216, 1044, 91, 1425, 1802, 1803, 1805,
	1807, 1808, 1769, 583, 794, 1530, 795, 1530, 1314, 799,
	360, 1141, 802, 57, 91, 1204, 1201, 1752, 1753, 1754,
	360, 1108, 526, 527, 528, 826, 531, 851, 704, 831,
	488, 614, 998, 535, 791, 792, 562, 821, 59, 60,
	61, 62, 63, 354, 354, 354, 354, 713, 354, 513,
	791, 792, 1533, 1534, 1536, 354, 840, 807, 855, 1303,
	360, 360, 1301, 1004, 1433, 70, 599, 600, 360, 1005,
	956, 958, 977, 976, 823, 360, 1304, 557, 1310, 908,
	780, 781, 560, 1718, 517, 997, 1091, 912, 632, 633,
	634, 635, 636, 637, 638, 856, 583, 805, 904, 997,
	556, 555, 998, 1717, 1137, 992, 852, 991, 1716, 993,
	994, 555, 917, 919, 1715, 995, 998, 557, 927, 1434,
	1930, 1714, 1012, 861, 1013, 1713, 91, 557, 848, 91,
	91, 91, 91, 91, 833, 1292, 1712, 859, 860, 858,
	1710, 91, 1448, 1009, 91, 1187, 850, 1136, 91, 1162,
	957, 703, 912, 91, 91, 1309, 939, 360, 880, 926,
	354, 351, 882, 645, 881, 360, 1092, 706, 936, 974,
	1929, 360, 1927, 891, 893, 981, 1354, 926, 853, 1146,
	1195, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 964, 1637, 339, 339,
	339, 339, 339, 923, 1293, 785, 963, 931, 599, 600,
	1295, 1288, 1289, 339, 1296, 1291, 1290, 1634, 552, 1195,
	1298, 1294, 339, 913, 914, 1858, 1897, 556, 555, 922,
	506, 1297, 941, 942, 1834, 944, 940, 918, 1287, 943,
	360, 91, 91, 50, 557, 360, 952, 360, 91, 960,
	91, 961, 1781, 857, 360, 1896, 1862, 91, 966, 91,
	1711, 965, 91, 360, 930, 537, 932, 933, 1859, 984,
	1020, 1782, 1620, 548, 844, 846, 847, 829, 830, 1600,
	845, 556, 555, 1053, 1054, 1622, 556, 555, 1049, 78,
	1062, 851, 1068, 1356, 1861, 1860, 797, 1633, 557, 1086,
	1783, 1087, 719, 557, 1088, 1207, 1098, 808, 809, 810,
	811, 812, 813, 814, 815, 509, 510, 511, 354, 1195,
	1779, 816, 817, 556, 555, 1239, 1134, 1080, 1133, 354,
	354, 354, 354, 354, 354, 354, 354, 1045, 1046, 1728,
	557, 1079, 1135, 354, 354, 556, 555, 1194, 825, 1647,
	333, 855, 1069, 1206, 1566, 556, 555, 1565, 1621, 1105,
	1106, 1107, 557, 835, 1413, 1259, 1257, 360, 1084, 1195,
	852, 1558, 557, 560, 1708, 1239, 354, 1078, 1563, 1032,
	1033, 1034, 1035, 1097, 824, 878, 1120, 879, 856, 1469,
	556, 555, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1049,
	1557, 556, 555, 1156, 1239, 50, 1253, 557, 1213, 613,
	613, 1739, 1946, 892, 892, 1110, 1527, 1918, 557, 1401,
	360, 894, 1400, 91, 1608, 1904, 1527, 1869, 354, 1399,
	1075, 1072, 1073, 1205, 1071, 1527, 1852, 537, 920, 1188,
	360, 1058, 1104, 920, 981, 1179, 231, 1181, 1045, 1046,
	1739, 1851, 360, 1848, 1847, 1840, 537, 1527, 1837, 1527,
	1836, 1608, 1761, 360, 1082, 1085, 1608, 1644, 783, 890,
	241, 804, 91, 1111, 1112, 1113, 1180, 1608, 537, 1145,
	803, 920, 1611, 1610, 1190, 1212, 1608, 1609, 1527, 1526,
	1380, 537, 339, 1505, 537, 1440, 1439, 1169, 1436, 1437,
	1436, 1435, 1128, 537, 910, 537, 1868, 1126, 786, 1229,
	354, 784, 91, 360, 1214, 668, 537, 360, 354, 1182,
	515, 1268, 1227, 508, 354, 226, 488, 1143, 711, 710,
	536, 228, 1814, 1740, 1732, 1739, 1618, 1731, 234, 230,
	23, 1199, 1200, 1202, 1077, 1730, 1656, 1652, 1651, 360,
	1648, 1584, 91, 91, 1262, 673, 676, 677, 678, 674,
	91, 675, 679, 1559, 1154, 1165, 1166, 1155, 694, 360,
	232, 1549, 1358, 1319, 236, 1160, 1059, 1076, 1061, 1426,
	1317, 1246, 1272, 1248, 1249, 1250, 1251, 50, 1255, 1256,
	1254, 54, 1161, 1050, 1089, 23, 1274, 962, 354, 693,
	354, 259, 1315, 48, 26, 27, 1351, 719, 1258, 695,
	1275, 693, 667, 1273, 1160, 1673, 354, 1081, 360, 360,
	1161, 1271, 1603, 1128, 1272, 28, 1364, 910, 1823, 23,
	1128, 1501, 1527, 1083, 668, 1140, 668, 668, 1548, 1327,
	354, 1353, 50, 939, 1447, 1359, 227, 1438, 1362, 939,
	360, 1189, 360, 360, 981, 1320, 981, 1368, 1321, 1568,
	1567, 259, 1160, 1389, 1382, 967, 1128, 1345, 1240, 1241,
	1331, 1243, 1244, 1245, 1344, 1947, 50, 1381, 1139, 696,
	1367, 1369, 827, 50, 1935, 852, 229, 1842, 237, 238,
	239, 240, 244, 1813, 1734, 1733, 1388, 243, 242, 1722,
	673, 676, 677, 678, 674, 1402, 675, 679, 50, 1387,
	1721, 1681, 1093, 1680, 1658, 1229, 1646, 1587, 1424, 1021,
	560, 91, 360, 1048, 1443, 1679, 1423, 1421, 1227, 1323,
	1324, 1414, 91, 1445, 1446, 1678, 1407, 360, 1410, 360,
	1416, 1405, 1375, 1418, 1373, 1260, 1261, 839, 360, 1043,
	1346, 1347, 1348, 1349, 1350, 1218, 1192, 1165, 1166, 1247,
	91, 1037, 1036, 1441, 65, 1703, 360, 1727, 1569, 1444,
	1358, 1168, 801, 1178, 1453, 360, 787, 534, 91, 1319,
	1674, 1675, 1677, 1171, 949, 1170, 1676, 946, 1455, 950,
	1454, 1427, 1428, 354, 1430, 1431, 1432, 945, 1891, 947,
	1471, 1843, 1464, 1460, 948, 1197, 1313, 551, 951, 1620,
	677, 678, 1462, 263, 264, 1889, 1208, 1103, 539, 1468,
	549, 1102, 1622, 709, 516, 1412, 1465, 1879, 1234, 1499,
	540, 1472, 829, 830, 360, 1588, 1060, 360, 360, 360,
	91, 360, 1475, 800, 1411, 1270, 1265, 339, 360, 1482,
	1264, 1508, 981, 1520, 1521, 1522, 793, 1579, 681, 1580,
	1581, 1582, 260, 261, 1525, 640, 1263, 551, 1500, 1101,
	354, 360, 1578, 1537, 1908, 1583, 1450, 1100, 360, 1395,
	1307, 254, 1543, 1866, 1687, 255, 360, 1545, 1429, 1523,
	1560, 54, 1190, 1686, 1591, 1621, 1161, 1831, 1830, 49,
	642, 1829, 354, 1542, 1828, 91, 1797, 1796, 360, 360,
	1229, 553, 1268, 981, 1065, 1066, 1067, 360, 1394, 1393,
	1720, 1719, 354, 1227, 1695, 1209, 1550, 822, 360, 1623,
	1624, 1625, 1626, 1627, 1628, 1629, 1474, 56, 1572, 1668,
	8, 1665, 7, 1333, 1666, 6, 58, 1574, 1664, 5,
	1277, 1456, 692, 1576, 1575, 354, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 360, 360, 920, 51,
	1, 1366, 1178, 1604, 920, 1118, 608, 643, 1335, 294,
	1561, 1914, 1884, 280, 1512, 658, 641, 1824, 360, 1744,
	1819, 647, 646, 1750, 1362, 1022, 1023, 1025, 1026, 1027,
	360, 1028, 1029, 354, 1729, 354, 1391, 1602, 1632, 1215,
	67, 1815, 1738, 1636, 1449, 1269, 1286, 1057, 1038, 1039,
	1040, 1266, 1041, 1074, 1762, 1615, 1776, 1617, 1630, 360,
	91, 1529, 1631, 1638, 1234, 989, 978, 486, 360, 64,
	1640, 1709, 990, 988, 987, 985, 1663, 712, 360, 1337,
	1015, 1237, 1018, 1342, 1653, 1336, 718, 716, 717, 721,
	1334, 233, 1572, 346, 1682, 1672, 1340, 680, 659, 360,
	705, 554, 1655, 1705, 1697, 1442, 1300, 1299, 832, 1338,
	1339, 1562, 1070, 1564, 1308, 818, 1090, 532, 235, 595,
	1459, 1704, 1461, 1696, 1099, 1183, 1362, 353, 1365, 1341,
	1343, 1463, 543, 1700, 1594, 1595, 1685, 1596, 1597, 1598,
	1590, 1144, 1701, 1649, 627, 1650, 924, 281, 843, 1466,
	293, 292, 291, 834, 1742, 1153, 1592, 564, 354, 338,
	664, 672, 670, 669, 360, 360, 360, 360, 1167, 1163,
	337, 360, 360, 1672, 1316, 1737, 909, 911, 1496, 1692,
	838, 1759, 1760, 1572, 25, 55, 265, 19, 18, 360,
	268, 17, 928, 20, 360, 16, 1755, 1758, 360, 15,
	1743, 14, 29, 1767, 13, 1282, 12, 11, 10, 9,
	1777, 1671, 360, 360, 939, 1791, 1772, 1510, 1670, 1669,
	1510, 1510, 1510, 1792, 1524, 360, 1667, 4, 1789, 1790,
	360, 354, 256, 1820, 1809, 1811, 360, 22, 1793, 2,
	0, 360, 0, 954, 0, 0, 0, 1832, 0, 1812,
	1810, 0, 1672, 0, 1510, 360, 1822, 0, 1572, 1234,
	0, 1551, 0, 0, 0, 0, 1672, 0, 0, 354,
	0, 1838, 1784, 1785, 1786, 1787, 1788, 0, 0, 0,
	1283, 1279, 1276, 0, 1284, 1281, 1280, 1573, 0, 0,
	76, 354, 354, 0, 0, 1849, 1850, 0, 0, 0,
	1585, 1285, 0, 0, 360, 1854, 1855, 0, 1278, 1853,
	0, 1589, 0, 1874, 360, 0, 1872, 0, 0, 0,
	1871, 1876, 1756, 1867, 1870, 1242, 1663, 1875, 1883, 0,
	0, 0, 1672, 360, 0, 0, 1888, 360, 0, 308,
	47, 1887, 1882, 1890, 1672, 1672, 1672, 0, 0, 1606,
	1607, 0, 1893, 0, 0, 0, 0, 91, 0, 0,
	0, 0, 0, 0, 1895, 0, 0, 1903, 360, 0,
	360, 1391, 1911, 0, 1742, 1911, 0, 0, 0, 1900,
	0, 1902, 1901, 1639, 0, 91, 1905, 47, 0, 0,
	0, 1672, 1922, 1672, 1672, 258, 0, 1924, 0, 0,
	0, 340, 0, 0, 0, 0, 0, 1928, 0, 0,
	0, 1573, 1654, 1925, 360, 0, 0, 1926, 1936, 0,
	0, 1660, 0, 1937, 0, 0, 360, 1921, 0, 1942,
	0, 1510, 1943, 0, 0, 1911, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 541, 545, 0, 0, 0,
	1672, 1117, 1699, 0, 1672, 0, 0, 0, 0, 0,
	0, 0, 563, 1125, 0, 1127, 0, 0, 0, 0,
	0, 0, 0, 1130, 1131, 1132, 0, 0, 0, 0,
	0, 0, 0, 1142, 0, 0, 0, 0, 1148, 0,
	0, 1149, 1150, 1151, 1152, 0, 0, 0, 0, 617,
	0, 0, 1573, 0, 0, 0, 0, 0, 628, 0,
	0, 0, 0, 0, 0, 0, 0, 1745, 1747, 1748,
	1749, 0, 0, 0, 1391, 1391, 0, 0, 0, 0,
	0, 1420, 1422, 0, 0, 0, 0, 0, 0, 920,
	0, 0, 1774, 0, 0, 0, 0, 1775, 0, 0,
	0, 1778, 0, 0, 0, 0, 0, 0, 542, 0,
	0, 0, 0, 0, 0, 1660, 1391, 0, 0, 524,
	524, 524, 524, 0, 524, 0, 0, 1573, 1391, 0,
	0, 524, 0, 1817, 1944, 0, 0, 0, 0, 719,
	0, 0, 0, 89, 1827, 0, 245, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1841, 0,
	0, 0, 0, 596, 0, 0, 598, 1494, 269, 0,
	89, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 1479, 1480, 612, 1481, 89, 0,
	89, 1483, 0, 1485, 0, 0, 89, 0, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 1510, 629, 631,
	631, 631, 631, 631, 631, 631, 631, 1877, 660, 661,
	662, 663, 1490, 0, 0, 0, 0, 0, 0, 0,
	683, 0, 0, 1491, 0, 0, 1391, 1330, 0, 0,
	1892, 0, 1528, 1531, 571, 570, 580, 581, 573, 574,
	575, 576, 577, 578, 579, 572, 0, 0, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 719, 0, 1909, 0, 571, 570, 580, 581, 573,
	574, 575, 576, 577, 578, 579, 572, 0, 1379, 582,
	0, 0, 0, 0, 0, 0, 841, 842, 0, 571,
	570, 580, 581, 573, 574, 575, 576, 577, 578, 579,
	572, 0, 0, 582, 0, 0, 0, 354, 0, 0,
	0, 0, 0, 1138, 0, 0, 0, 0, 0, 1660,
	0, 0, 0, 0, 89, 571, 570, 580, 581, 573,
	574, 575, 576, 577, 578, 579, 572, 0, 0, 582,
	0, 0, 0, 906, 0, 0, 0, 0, 0, 617,
	0, 0, 915, 916, 0, 571, 570, 580, 581, 573,
	574, 575, 576, 577, 578, 579, 572, 0, 0, 582,
	0, 0, 0, 0, 0, 0, 1115, 0, 0, 0,
	0, 0, 0, 0, 524, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 524, 524, 524, 524, 524,
	524, 524, 524, 0, 0, 0, 0, 0, 0, 524,
	524, 0, 0, 0, 1528, 0, 0, 0, 0, 0,
	0, 1473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 1478, 973, 0, 0, 0, 0, 89,
	688, 89, 0, 0, 0, 1487, 1488, 1489, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1116, 0, 0, 1502, 1503, 1504, 0, 1507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 47, 0,
	0, 0, 583, 0, 0, 571, 570, 580, 581, 573,
	574, 575, 576, 577, 578, 579, 572, 0, 618, 582,
	571, 570, 580, 581, 573, 574, 575, 576, 577, 578,
	579, 572, 0, 583, 582, 0, 0, 0, 0, 0,
	1556, 0, 0, 0, 0, 570, 580, 581, 573, 574,
	575, 576, 577, 578, 579, 572, 0, 583, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 340, 340,
	340, 340, 340, 0, 0, 1094, 1095, 0, 545, 0,
	0, 0, 0, 683, 0, 959, 0, 0, 0, 0,
	0, 0, 340, 583, 0, 0, 0, 0, 0, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1599, 0, 0,
	89, 0, 89, 583, 0, 89, 0, 0, 89, 0,
	0, 0, 806, 0, 0, 0, 642, 0, 0, 0,
	0, 1612, 1613, 1614, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 1129, 0, 0, 0, 1643, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 0, 1147, 0, 0,
	0, 806, 0, 0, 524, 0, 524, 0, 0, 0,
	0, 0, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 524, 883, 884, 0, 885, 886, 887, 889,
	888, 0, 0, 643, 0, 1688, 1689, 1690, 1691, 0,
	0, 658, 641, 0, 0, 0, 0, 647, 646, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 269, 269,
	0, 0, 0, 921, 269, 0, 0, 0, 921, 0,
	0, 1109, 0, 583, 0, 0, 0, 0, 0, 0,
	0, 0, 1723, 0, 0, 0, 0, 0, 583, 259,
	0, 48, 26, 27, 0, 0, 0, 0, 0, 269,
	269, 269, 269, 1673, 89, 0, 921, 89, 89, 89,
	89, 89, 583, 28, 0, 0, 0, 0, 0, 953,
	0, 0, 89, 0, 659, 0, 688, 0, 0, 0,
	0, 89, 89, 1768, 0, 0, 0, 0, 1773, 0,
	0, 0, 259, 0, 48, 26, 27, 0, 0, 23,
	24, 48, 26, 27, 1157, 1158, 1673, 0, 0, 0,
	0, 0, 0, 1913, 0, 1794, 28, 0, 0, 42,
	0, 0, 0, 28, 0, 259, 0, 48, 26, 27,
	0, 0, 340, 0, 0, 0, 0, 0, 0, 1673,
	0, 259, 37, 48, 26, 27, 50, 0, 0, 28,
	0, 0, 0, 1839, 0, 1673, 0, 0, 0, 0,
	0, 0, 0, 1679, 0, 28, 1910, 1355, 0, 89,
	89, 0, 0, 1678, 0, 0, 89, 259, 89, 48,
	26, 27, 1370, 1371, 0, 89, 1372, 89, 0, 1374,
	89, 1673, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 28, 0, 0, 0, 0, 0, 0, 1386, 0,
	30, 31, 33, 32, 35, 806, 1679, 0, 1674, 1675,
	1677, 0, 0, 0, 1676, 0, 1678, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 36, 43, 44, 0,
	0, 45, 46, 34, 0, 0, 0, 0, 0, 1679,
	0, 0, 0, 0, 0, 0, 0, 0, 524, 1678,
	0, 0, 0, 0, 0, 1679, 0, 0, 0, 0,
	0, 1674, 1675, 1677, 0, 1678, 0, 1676, 0, 0,
	0, 0, 0, 1920, 0, 0, 0, 0, 0, 0,
	38, 39, 269, 40, 41, 0, 0, 0, 0, 0,
	0, 1679, 0, 0, 1674, 1675, 1677, 0, 0, 0,
	1676, 1678, 269, 0, 0, 0, 1833, 0, 0, 0,
	1674, 1675, 1677, 0, 0, 1363, 1676, 47, 0, 0,
	0, 1470, 1821, 0, 0, 1948, 1949, 49, 0, 0,
	0, 0, 0, 0, 1376, 1377, 1378, 0, 0, 0,
	0, 89, 0, 0, 0, 0, 1674, 1675, 1677, 0,
	0, 0, 1676, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 0, 1409, 0, 617, 0, 0, 0, 0, 0,
	49, 0, 0, 0, 0, 0, 0, 49, 1419, 0,
	89, 0, 0, 1235, 612, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	1544, 0, 0, 0, 47, 47, 0, 0, 0, 49,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	1311, 1312, 0, 0, 0, 0, 0, 340, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 921, 0, 0, 0, 0, 0, 921,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1641, 0, 0, 0, 0, 1645, 1541, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1235,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 1724, 0, 0, 0, 0, 0, 0,
	0, 1363, 0, 0, 1605, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1757, 0, 0, 0, 0, 0, 89, 1766, 617, 0,
	0, 0, 0, 1642, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 612, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1683, 0,
	0, 1818, 0, 0, 0, 0, 0, 0, 688, 0,
	0, 0, 0, 1363, 0, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 118, 0, 1235, 0, 132, 0, 135, 0,
	0, 179, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	359, 0, 1235, 89, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	571, 570, 580, 581, 573, 574, 575, 576, 577, 578,
	579, 572, 0, 0, 582, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1906, 0, 0, 0, 0, 0,
	141, 206, 0, 0, 0, 164, 0, 110, 0, 185,
	122, 0, 133, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 171, 158, 197, 0, 159, 169, 136, 189,
	165, 196, 0, 207, 208, 187, 205, 174, 102, 152,
	92, 163, 170, 0, 111, 1846, 218, 219, 220, 221,
	222, 223, 224, 0, 0, 0, 1235, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 186, 195, 108, 175, 98, 193, 182, 184,
	143, 128, 129, 177, 96, 97, 0, 168, 117, 162,
	121, 116, 155, 183, 146, 190, 191, 113, 215, 115,
	114, 181, 103, 203, 204, 100, 104, 202, 151, 156,
	154, 201, 188, 194, 144, 140, 0, 99, 192, 142,
	139, 131, 0, 119, 123, 160, 138, 161, 124, 148,
	147, 149, 0, 0, 153, 125, 0, 0, 0, 0,
	0, 180, 199, 216, 217, 0, 0, 1235, 209, 210,
	211, 212, 0, 0, 0, 150, 105, 126, 176, 130,
	137, 167, 214, 0, 172, 109, 198, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 47, 0,
	0, 0, 0, 0, 921, 127, 0, 93, 101, 134,
	0, 213, 0, 166, 120, 200, 0, 0, 0, 0,
	0, 0, 0, 1940, 0, 0, 0, 0, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 583, 106,
	0, 0, 1235, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 472, 461, 0,
	422, 474, 392, 410, 482, 412, 413, 448, 372, 431,
	157, 407, 390, 94, 395, 365, 402, 366, 393, 424,
	118, 391, 463, 434, 132, 480, 135, 439, 0, 179,
	145, 0, 0, 426, 465, 429, 456, 421, 449, 380,
	438, 475, 408, 444, 476, 0, 0, 0, 359, 0,
	982, 983, 0, 0, 0, 0, 0, 107, 0, 443,
	470, 404, 485, 447, 364, 441, 0, 370, 373, 481,
	468, 399, 400, 1191, 0, 0, 0, 0, 0, 0,
	425, 430, 453, 418, 0, 1899, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 396, 0, 437, 0,
	0, 0, 377, 371, 0, 423, 0, 0, 0, 379,
	0, 397, 454, 89, 361, 459, 466, 420, 141, 206,
	469, 417, 416, 164, 0, 110, 0, 185, 122, 409,
	133, 451, 483, 473, 427, 464, 394, 403, 112, 401,
	171, 158, 197, 436, 159, 169, 136, 189, 165, 196,
	471, 207, 208, 187, 205, 174, 102, 152, 92, 163,
	170, 0, 111, 0, 218, 219, 220, 221, 222, 223,
	224, 369, 362, 398, 457, 460, 384, 446, 374, 405,
	452, 406, 428, 389, 0, 0, 0, 0, 0, 95,
	186, 195, 108, 175, 98, 193, 182, 184, 143, 128,
	129, 177, 96, 97, 0, 168, 117, 162, 121, 116,
	155, 183, 146, 190, 191, 113, 215, 115, 114, 181,
	103, 203, 204, 100, 104, 202, 151, 156, 154, 201,
	188, 194, 144, 140, 0, 99, 192, 142, 139, 131,
	0, 119, 123, 160, 138, 161, 124, 148, 147, 149,
	0, 0, 153, 125, 0, 0, 0, 367, 0, 180,
	199, 216, 217, 368, 388, 467, 209, 210, 211, 212,
	0, 0, 0, 150, 105, 126, 176, 130, 137, 167,
	214, 445, 172, 109, 198, 178, 0, 383, 387, 381,
	382, 432, 433, 477, 478, 479, 455, 378, 0, 385,
	386, 0, 462, 127, 435, 93, 101, 134, 484, 213,
	0, 166, 120, 200, 0, 0, 411, 363, 415, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 173, 419,
	414, 440, 442, 450, 458, 472, 461, 106, 422, 474,
	392, 410, 482, 412, 413, 448, 372, 431, 157, 407,
	390, 94, 395, 365, 402, 366, 393, 424, 118, 391,
	463, 434, 132, 480, 135, 439, 0, 179, 145, 0,
	0, 426, 465, 429, 456, 421, 449, 380, 438, 475,
	408, 444, 476, 0, 0, 0, 359, 0, 982, 983,
	0, 0, 0, 0, 0, 107, 0, 443, 470, 404,
	485, 447, 364, 441, 0, 370, 373, 481, 468, 399,
	400, 0, 0, 0, 0, 0, 0, 0, 425, 430,
	453, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 396, 0, 437, 0, 0, 0,
	377, 371, 0, 423, 0, 0, 0, 379, 0, 397,
	454, 0, 361, 459, 466, 420, 141, 206, 469, 417,
	416, 164, 0, 110, 0, 185, 122, 409, 133, 451,
	483, 473, 427, 464, 394, 403, 112, 401, 171, 158,
	197, 436, 159, 169, 136, 189, 165, 196, 471, 207,
	208, 187, 205, 174, 102, 152, 92, 163, 170, 0,
	111, 0, 218, 219, 220, 221, 222, 223, 224, 369,
	362, 398, 457, 460, 384, 446, 374, 405, 452, 406,
	428, 389, 0, 0, 0, 0, 0, 95, 186, 195,
	108, 175, 98, 193, 182, 184, 143, 128, 129, 177,
	96, 97, 0, 168, 117, 162, 121, 116, 155, 183,
	146, 190, 191, 113, 215, 115, 114, 181, 103, 203,
	204, 100, 104, 202, 151, 156, 154, 201, 188, 194,
	144, 140, 0, 99, 192, 142, 139, 131, 0, 119,
	123, 160, 138, 161, 124, 148, 147, 149, 0, 0,
	153, 125, 0, 0, 0, 367, 0, 180, 199, 216,
	217, 368, 388, 467, 209, 210, 211, 212, 0, 0,
	0, 150, 105, 126, 176, 130, 137, 167, 214, 445,
	172, 109, 198, 178, 0, 383, 387, 381, 382, 432,
	433, 477, 478, 479, 455, 378, 0, 385, 386, 0,
	462, 127, 435, 93, 101, 134, 484, 213, 0, 166,
	120, 200, 0, 0, 411, 363, 415, 0, 0, 0,
	0, 0, 0, 0, 375, 376, 173, 419, 414, 440,
	442, 450, 458, 472, 461, 106, 422, 474, 392, 410,
	482, 412, 413, 448, 372, 431, 157, 407, 390, 94,
	395, 365, 402, 366, 393, 424, 118, 391, 463, 434,
	132, 480, 135, 439, 0, 179, 145, 0, 0, 426,
	465, 429, 456, 421, 449, 380, 438, 475, 408, 444,
	476, 0, 0, 0, 359, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 443, 470, 404, 485, 447,
	364, 441, 0, 370, 373, 481, 468, 399, 400, 0,
	0, 0, 0, 0, 0, 0, 425, 430, 453, 418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1318, 0, 396, 0, 437, 0, 0, 0, 377, 371,
	0, 423, 0, 0, 0, 379, 0, 397, 454, 0,
	361, 459, 466, 420, 141, 206, 469, 417, 416, 164,
	0, 110, 0, 185, 122, 409, 133, 451, 483, 473,
	427, 464, 394, 403, 112, 401, 171, 158, 197, 436,
	159, 169, 136, 189, 165, 196, 471, 207, 208, 187,
	205, 174, 102, 152, 92, 163, 170, 0, 111, 0,
	218, 219, 220, 221, 222, 223, 224, 369, 362, 398,
	457, 460, 384, 446, 374, 405, 452, 406, 428, 389,
	0, 0, 0, 0, 0, 95, 186, 195, 108, 175,
	98, 193, 182, 184, 143, 128, 129, 177, 96, 97,
	0, 168, 117, 162, 121, 116, 155, 183, 146, 190,
	191, 113, 215, 115, 114, 181, 103, 203, 204, 100,
	104, 202, 151, 156, 154, 201, 188, 194, 144, 140,
	0, 99, 192, 142, 139, 131, 0, 119, 123, 160,
	138, 161, 124, 148, 147, 149, 0, 0, 153, 125,
	0, 0, 0, 367, 0, 180, 199, 216, 217, 368,
	388, 467, 209, 210, 211, 212, 0, 0, 0, 150,
	105, 126, 176, 130, 137, 167, 214, 445, 172, 109,
	198, 178, 0, 383, 387, 381, 382, 432, 433, 477,
	478, 479, 455, 378, 0, 385, 386, 0, 462, 127,
	435, 93, 101, 134, 484, 213, 0, 166, 120, 200,
	0, 0, 411, 363, 415, 0, 0, 0, 0, 0,
	0, 0, 375, 376, 173, 419, 414, 440, 442, 450,
	458, 472, 461, 106, 422, 474, 392, 410, 482, 412,
	413, 448, 372, 431, 157, 407, 390, 94, 395, 365,
	402, 366, 393, 424, 118, 391, 463, 434, 132, 480,
	135, 439, 0, 179, 145, 0, 0, 426, 465, 429,
	456, 421, 449, 380, 438, 475, 408, 444, 476, 50,
	0, 0, 359, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 443, 470, 404, 485, 447, 364, 441,
	0, 370, 373, 481, 468, 399, 400, 0, 0, 0,
	0, 0, 0, 0, 425, 430, 453, 418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	396, 0, 437, 0, 0, 0, 377, 371, 0, 423,
	0, 0, 0, 379, 0, 397, 454, 0, 361, 459,
	466, 420, 141, 206, 469, 417, 416, 164, 0, 110,
	0, 185, 122, 409, 133, 451, 483, 473, 427, 464,
	394, 403, 112, 401, 171, 158, 197, 436, 159, 169,
	136, 189, 165, 196, 471, 207, 208, 187, 205, 174,
	102, 152, 92, 163, 170, 0, 111, 0, 218, 219,
	220, 221, 222, 223, 224, 369, 362, 398, 457, 460,
	384, 446, 374, 405, 452, 406, 428, 389, 0, 0,
	0, 0, 0, 95, 186, 195, 108, 175, 98, 193,
	182, 184, 143, 128, 129, 177, 96, 97, 0, 168,
	117, 162, 121, 116, 155, 183, 146, 190, 191, 113,
	215, 115, 114, 181, 103, 203, 204, 100, 104, 202,
	151, 156, 154, 201, 188, 194, 144, 140, 0, 99,
	192, 142, 139, 131, 0, 119, 123, 160, 138, 161,
	124, 148, 147, 149, 0, 0, 153, 125, 0, 0,
	0, 367, 0, 180, 199, 216, 217, 368, 388, 467,
	209, 210, 211, 212, 0, 0, 0, 150, 105, 126,
	176, 130, 137, 167, 214, 445, 172, 109, 198, 178,
	0, 383, 387, 381, 382, 432, 433, 477, 478, 479,
	455, 378, 0, 385, 386, 0, 462, 127, 435, 93,
	101, 134, 484, 213, 0, 166, 120, 200, 0, 0,
	411, 363, 415, 0, 0, 0, 0, 0, 0, 0,
	375, 376, 173, 419, 414, 440, 442, 450, 458, 472,
	461, 106, 422, 474, 392, 410, 482, 412, 413, 448,
	372, 431, 157, 407, 390, 94, 395, 365, 402, 366,
	393, 424, 118, 391, 463, 434, 132, 480, 135, 439,
	0, 179, 145, 0, 0, 426, 465, 429, 456, 421,
	449, 380, 438, 475, 408, 444, 476, 0, 0, 0,
	359, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 443, 470, 404, 485, 447, 364, 441, 0, 370,
	373, 481, 468, 399, 400, 0, 0, 0, 0, 0,
	0, 0, 425, 430, 453, 418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 396, 0,
	437, 0, 0, 0, 377, 371, 0, 423, 0, 0,
	0, 379, 0, 397, 454, 0, 361, 459, 466, 420,
	141, 206, 469, 417, 416, 164, 0, 110, 0, 185,
	122, 409, 133, 451, 483, 473, 427, 464, 394, 403,
	112, 401, 171, 158, 197, 436, 159, 169, 136, 189,
	165, 196, 471, 207, 208, 187, 205, 174, 102, 152,
	92, 163, 170, 0, 111, 0, 218, 219, 220, 221,
	222, 223, 224, 369, 362, 398, 457, 460, 384, 446,
	374, 405, 452, 406, 428, 389, 0, 0, 0, 0,
	0, 95, 186, 195, 108, 175, 98, 193, 182, 184,
	143, 128, 129, 177, 96, 97, 0, 168, 117, 162,
	121, 116, 155, 183, 146, 190, 191, 113, 215, 115,
	114, 181, 103, 203, 204, 100, 357, 202, 151, 156,
	154, 201, 188, 194, 144, 140, 0, 99, 192, 142,
	139, 131, 0, 119, 123, 160, 138, 161, 124, 148,
	147, 149, 0, 0, 153, 125, 0, 0, 0, 367,
	0, 180, 199, 216, 217, 368, 388, 467, 209, 210,
	211, 212, 0, 0, 0, 358, 356, 126, 176, 130,
	137, 167, 214, 445, 172, 109, 198, 178, 352, 383,
	387, 381, 382, 432, 433, 477, 478, 479, 455, 378,
	0, 385, 386, 0, 462, 127, 435, 93, 101, 134,
	484, 213, 0, 166, 120, 200, 0, 0, 411, 363,
	415, 0, 0, 0, 0, 0, 0, 0, 375, 376,
	173, 419, 414, 440, 442, 450, 458, 472, 461, 106,
	422, 474, 392, 410, 482, 412, 413, 448, 372, 431,
	157, 407, 390, 94, 395, 365, 402, 366, 393, 424,
	118, 391, 463, 434, 132, 480, 135, 439, 0, 179,
	145, 0, 0, 426, 465, 429, 456, 421, 449, 380,
	438, 475, 408, 444, 476, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 443,
	470, 404, 485, 447, 364, 441, 0, 370, 373, 481,
	468, 399, 400, 0, 0, 0, 0, 0, 0, 0,
	425, 430, 453, 418, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 849, 0, 396, 0, 437, 0,
	0, 0, 377, 371, 0, 423, 0, 0, 0, 379,
	0, 397, 454, 0, 361, 459, 466, 420, 141, 206,
	469, 417, 416, 164, 0, 110, 0, 185, 122, 409,
	133, 451, 483, 473, 427, 464, 394, 403, 112, 401,
	171, 158, 197, 436, 159, 169, 136, 189, 165, 196,
	471, 207, 208, 187, 205, 174, 102, 152, 92, 163,
	170, 0, 111, 0, 218, 219, 220, 221, 222, 223,
	224, 369, 362, 398, 457, 460, 384, 446, 374, 405,
	452, 406, 428, 389, 0, 0, 0, 0, 0, 95,
	186, 195, 108, 175, 98, 193, 182, 184, 143, 128,
	129, 177, 96, 97, 0, 168, 117, 162, 121, 116,
	155, 183, 146, 190, 191, 113, 215, 115, 114, 181,
	103, 203, 204, 100, 104, 202, 151, 156, 154, 201,
	188, 194, 144, 140, 0, 99, 192, 142, 139, 131,
	0, 119, 123, 160, 138, 161, 124, 148, 147, 149,
	0, 0, 153, 125, 0, 0, 0, 367, 0, 180,
	199, 216, 217, 368, 388, 467, 209, 210, 211, 212,
	0, 0, 0, 150, 105, 126, 176, 130, 137, 167,
	214, 445, 172, 109, 198, 178, 0, 383, 387, 381,
	382, 432, 433, 477, 478, 479, 455, 378, 0, 385,
	386, 0, 462, 127, 435, 93, 101, 134, 484, 213,
	0, 166, 120, 200, 0, 0, 411, 363, 415, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 173, 419,
	414, 440, 442, 450, 458, 472, 461, 106, 422, 474,
	392, 410, 482, 412, 413, 448, 372, 431, 157, 407,
	390, 94, 395, 365, 402, 366, 393, 424, 118, 391,
	463, 434, 132, 480, 135, 439, 0, 179, 145, 0,
	0, 426, 465, 429, 456, 421, 449, 380, 438, 475,
	408, 444, 476, 0, 0, 0, 359, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 443, 470, 404,
	485, 447, 364, 441, 0, 370, 373, 481, 468, 399,
	400, 0, 0, 0, 0, 0, 0, 0, 425, 430,
	453, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 396, 0, 437, 0, 0, 0,
	377, 371, 0, 423, 0, 0, 0, 379, 0, 397,
	454, 0, 361, 459, 466, 420, 141, 206, 469, 417,
	416, 164, 0, 110, 0, 185, 122, 409, 133, 451,
	483, 473, 427, 464, 394, 403, 112, 401, 171, 158,
	197, 436, 159, 169, 136, 189, 165, 196, 471, 207,
	208, 187, 205, 174, 102, 152, 92, 163, 170, 0,
	111, 0, 218, 219, 220, 221, 222, 223, 224, 369,
	362, 398, 457, 460, 384, 446, 374, 405, 452, 406,
	428, 389, 0, 0, 0, 0, 0, 95, 186, 698,
	108, 175, 98, 193, 182, 184, 143, 128, 129, 177,
	96, 97, 0, 168, 117, 162, 121, 116, 155, 183,
	146, 190, 191, 113, 215, 115, 114, 181, 103, 203,
	204, 100, 357, 202, 151, 156, 154, 201, 188, 194,
	144, 140, 0, 99, 192, 142, 139, 131, 0, 119,
	123, 160, 138, 161, 124, 148, 147, 149, 0, 0,
	153, 125, 0, 0, 0, 367, 0, 180, 199, 216,
	217, 368, 388, 467, 209, 210, 211, 212, 0, 0,
	0, 358, 356, 126, 176, 130, 137, 167, 214, 445,
	172, 109, 198, 178, 352, 383, 387, 381, 382, 432,
	433, 477, 478, 479, 455, 378, 0, 385, 386, 0,
	462, 127, 435, 93, 101, 134, 484, 213, 0, 166,
	120, 200, 0, 0, 411, 363, 415, 0, 0, 0,
	0, 0, 0, 0, 375, 376, 173, 419, 414, 440,
	442, 450, 458, 472, 461, 106, 422, 474, 392, 410,
	482, 412, 413, 448, 372, 431, 157, 407, 390, 94,
	395, 365, 402, 366, 393, 424, 118, 391, 463, 434,
	132, 480, 135, 439, 0, 179, 145, 0, 0, 426,
	465, 429, 456, 421, 449, 380, 438, 475, 408, 444,
	476, 0, 0, 0, 359, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 443, 470, 404, 485, 447,
	364, 441, 0, 370, 373, 481, 468, 399, 400, 0,
	0, 0, 0, 0, 0, 0, 425, 430, 453, 418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 396, 0, 437, 0, 0, 0, 377, 371,
	0, 423, 0, 0, 0, 379, 0, 397, 454, 0,
	361, 459, 466, 420, 141, 206, 469, 417, 416, 164,
	0, 110, 0, 185, 122, 409, 133, 451, 483, 473,
	427, 464, 394, 403, 112, 401, 171, 158, 197, 436,
	159, 169, 136, 189, 165, 196, 471, 207, 208, 187,
	205, 174, 102, 152, 92, 163, 170, 0, 111, 0,
	218, 219, 220, 221, 222, 223, 224, 369, 362, 398,
	457, 460, 384, 446, 374, 405, 452, 406, 428, 389,
	0, 0, 0, 0, 0, 95, 186, 347, 108, 175,
	98, 193, 182, 184, 143, 128, 129, 177, 96, 97,
	0, 168, 117, 162, 121, 116, 155, 183, 146, 190,
	191, 113, 215, 115, 114, 181, 103, 203, 204, 100,
	357, 202, 151, 156, 154, 201, 188, 194, 144, 140,
	0, 99, 192, 142, 139, 131, 0, 119, 123, 160,
	138, 161, 124, 148, 147, 149, 0, 0, 153, 125,
	0, 0, 0, 367, 0, 180, 199, 216, 217, 368,
	388, 467, 209, 210, 211, 212, 0, 0, 0, 358,
	356, 350, 349, 130, 137, 167, 214, 445, 172, 109,
	198, 178, 352, 383, 387, 381, 382, 432, 433, 477,
	478, 479, 455, 378, 0, 385, 386, 0, 462, 127,
	435, 93, 101, 134, 484, 213, 0, 166, 120, 200,
	0, 0, 411, 363, 415, 0, 0, 0, 0, 0,
	0, 0, 375, 376, 173, 419, 414, 440, 442, 450,
	458, 472, 461, 106, 422, 474, 392, 410, 482, 412,
	413, 448, 372, 431, 157, 407, 390, 94, 395, 365,
	402, 366, 393, 424, 118, 391, 463, 434, 132, 480,
	135, 439, 0, 179, 145, 0, 0, 426, 465, 429,
	456, 421, 449, 380, 438, 475, 408, 444, 476, 0,
	0, 0, 359, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 443, 470, 404, 485, 447, 364, 441,
	0, 370, 373, 481, 468, 399, 400, 0, 0, 0,
	0, 0, 0, 0, 425, 430, 453, 418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	396, 0, 437, 0, 0, 0, 377, 371, 0, 423,
	0, 0, 0, 379, 0, 397, 454, 0, 361, 459,
	466, 420, 141, 206, 469, 417, 416, 164, 0, 110,
	0, 185, 122, 409, 133, 451, 483, 473, 427, 464,
	394, 403, 112, 401, 171, 158, 197, 436, 159, 169,
	136, 189, 165, 196, 471, 207, 208, 187, 205, 174,
	102, 152, 92, 163, 170, 0, 111, 0, 218, 219,
	220, 221, 222, 223, 224, 369, 362, 398, 457, 460,
	384, 446, 374, 405, 452, 406, 428, 389, 0, 0,
	0, 0, 0, 95, 186, 195, 108, 175, 98, 193,
	182, 184, 143, 128, 129, 177, 96, 97, 0, 168,
	117, 162, 121, 116, 155, 183, 146, 190, 191, 113,
	215, 115, 114, 181, 103, 203, 204, 100, 104, 202,
	151, 156, 154, 201, 188, 194, 144, 140, 0, 99,
	192, 142, 139, 131, 0, 119, 123, 160, 138, 161,
	124, 148, 147, 149, 0, 0, 153, 125, 0, 0,
	0, 367, 0, 180, 199, 216, 217, 368, 388, 467,
	209, 210, 211, 212, 0, 0, 0, 150, 105, 126,
	176, 130, 137, 167, 214, 445, 172, 109, 198, 178,
	0, 383, 387, 381, 382, 432, 433, 477, 478, 479,
	455, 378, 0, 385, 386, 0, 462, 127, 435, 93,
	101, 134, 484, 213, 0, 166, 120, 200, 0, 0,
	411, 363, 415, 0, 0, 0, 0, 0, 0, 0,
	375, 376, 173, 419, 414, 440, 442, 450, 458, 472,
	461, 106, 422, 474, 392, 410, 482, 412, 413, 448,
	372, 431, 157, 407, 390, 94, 395, 365, 402, 366,
	393, 424, 118, 391, 463, 434, 132, 480, 135, 439,
	0, 179, 145, 0, 0, 426, 465, 429, 456, 421,
	449, 380, 438, 475, 408, 444, 476, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 443, 470, 404, 485, 447, 364, 441, 0, 370,
	373, 481, 468, 399, 400, 0, 0, 0, 0, 0,
	0, 0, 425, 430, 453, 418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 396, 0,
	437, 0, 0, 0, 377, 371, 0, 423, 0, 0,
	0, 379, 0, 397, 454, 0, 361, 459, 466, 420,
	141, 206, 469, 417, 416, 164, 0, 110, 0, 185,
	122, 409, 133, 451, 483, 473, 427, 464, 394, 403,
	112, 401, 171, 158, 197, 436, 159, 169, 136, 189,
	165, 196, 471, 207, 208, 187, 205, 174, 102, 152,
	92, 163, 170, 0, 111, 0, 218, 219, 220, 221,
	222, 223, 224, 369, 362, 398, 457, 460, 384, 446,
	374, 405, 452, 406, 428, 389, 0, 0, 0, 0,
	0, 95, 186, 195, 108, 175, 98, 193, 182, 184,
	143, 128, 129, 177, 96, 97, 0, 168, 117, 162,
	121, 116, 155, 183, 146, 190, 191, 113, 215, 115,
	114, 181, 103, 203, 204, 100, 104, 202, 151, 156,
	154, 201, 188, 194, 144, 140, 0, 99, 192, 142,
	139, 131, 0, 119, 123, 160, 138, 161, 124, 148,
	147, 149, 0, 0, 153, 125, 0, 0, 0, 367,
	0, 180, 199, 216, 217, 368, 388, 467, 209, 210,
	211, 212, 0, 0, 0, 150, 105, 126, 176, 130,
	137, 167, 214, 445, 172, 109, 198, 178, 0, 383,
	387, 381, 382, 432, 433, 477, 478, 479, 455, 378,
	0, 385, 386, 0, 462, 127, 435, 93, 101, 134,
	484, 213, 0, 166, 120, 200, 0, 0, 411, 363,
	415, 0, 0, 0, 0, 0, 0, 0, 375, 376,
	173, 419, 414, 440, 442, 450, 458, 472, 461, 106,
	422, 474, 392, 410, 482, 412, 413, 448, 372, 431,
	157, 407, 390, 94, 395, 365, 402, 366, 393, 424,
	118, 391, 463, 434, 132, 480, 135, 439, 0, 179,
	145, 0, 0, 426, 465, 429, 456, 421, 449, 380,
	438, 475, 408, 444, 476, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 443,
	470, 404, 485, 447, 364, 441, 0, 370, 373, 481,
	468, 399, 400, 0, 0, 0, 0, 0, 0, 0,
	425, 430, 453, 418, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 396, 0, 437, 0,
	0, 0, 377, 371, 0, 423, 0, 0, 0, 379,
	0, 397, 454, 0, 361, 459, 466, 420, 141, 206,
	469, 417, 416, 164, 0, 110, 0, 185, 122, 409,
	133, 451, 483, 473, 427, 464, 394, 403, 112, 401,
	171, 158, 197, 436, 159, 169, 136, 189, 165, 196,
	471, 207, 208, 187, 205, 174, 102, 152, 92, 163,
	170, 0, 111, 0, 218, 219, 220, 221, 222, 223,
	224, 369, 362, 398, 457, 460, 384, 446, 374, 405,
	452, 406, 428, 389, 0, 0, 0, 0, 0, 95,
	186, 195, 108, 175, 98, 193, 182, 184, 143, 128,
	129, 177, 96, 97, 0, 168, 117, 162, 121, 116,
	155, 183, 146, 190, 191, 113, 215, 115, 114, 181,
	103, 203, 204, 100, 104, 202, 151, 156, 154, 201,
	188, 194, 144, 140, 0, 99, 192, 142, 139, 131,
	0, 119, 123, 160, 138, 161, 124, 148, 147, 149,
	0, 0, 153, 125, 0, 0, 0, 367, 0, 180,
	199, 216, 217, 368, 388, 467, 209, 210, 211, 212,
	0, 0, 0, 150, 105, 126, 176, 130, 137, 167,
	214, 445, 172, 109, 198, 178, 0, 383, 387, 381,
	382, 432, 433, 477, 478, 479, 455, 378, 0, 385,
	386, 0, 462, 127, 435, 93, 101, 134, 484, 213,
	0, 166, 120, 200, 0, 0, 411, 363, 415, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 173, 419,
	414, 440, 442, 450, 458, 157, 0, 106, 94, 0,
	0, 276, 0, 0, 0, 118, 273, 0, 0, 132,
	318, 135, 0, 0, 179, 145, 0, 0, 0, 0,
	309, 310, 0, 0, 0, 0, 0, 0, 971, 0,
	50, 0, 0, 274, 297, 295, 299, 300, 301, 302,
	0, 0, 107, 298, 303, 304, 305, 972, 0, 0,
	271, 288, 0, 317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 286, 0,
	0, 0, 0, 330, 0, 287, 0, 0, 283, 284,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 206, 0, 0, 328, 164, 0,
	110, 0, 185, 122, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 171, 158, 197, 0, 159,
	169, 136, 189, 165, 196, 0, 207, 208, 187, 205,
	174, 102, 152, 92, 163, 170, 0, 111, 0, 218,
	219, 220, 221, 222, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 186, 195, 108, 175, 98,
	193, 182, 184, 143, 128, 129, 177, 96, 97, 0,
	168, 117, 162, 121, 116, 155, 183, 146, 190, 191,
	113, 215, 115, 114, 181, 103, 203, 204, 100, 104,
	202, 151, 156, 154, 201, 188, 194, 144, 140, 0,
	99, 192, 142, 139, 131, 0, 119, 123, 160, 138,
	161, 124, 148, 147, 149, 332, 0, 153, 125, 0,
	0, 0, 0, 0, 180, 199, 216, 217, 0, 0,
	0, 209, 210, 211, 212, 0, 0, 0, 150, 105,
	126, 176, 130, 137, 167, 214, 0, 172, 109, 198,
	178, 306, 319, 329, 325, 326, 323, 324, 322, 321,
	320, 331, 311, 312, 313, 314, 316, 0, 127, 315,
	93, 101, 134, 0, 213, 0, 166, 120, 200, 0,
	157, 0, 0, 94, 903, 0, 276, 0, 0, 0,
	118, 273, 0, 173, 132, 318, 135, 0, 0, 179,
	145, 327, 106, 0, 0, 309, 310, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 274, 297,
	295, 299, 300, 301, 302, 0, 0, 107, 298, 303,
	304, 305, 0, 0, 0, 271, 288, 0, 317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 267, 0, 0, 0, 330, 0,
	287, 0, 0, 283, 284, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 206,
	0, 0, 328, 164, 0, 110, 0, 185, 122, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	171, 158, 197, 0, 159, 169, 136, 189, 165, 196,
	0, 207, 208, 187, 205, 174, 102, 152, 92, 163,
	170, 0, 111, 0, 218, 219, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	186, 195, 108, 175, 98, 193, 182, 184, 143, 128,
	129, 177, 96, 97, 0, 168, 117, 162, 121, 116,
	155, 183, 146, 190, 191, 113, 215, 115, 114, 181,
	103, 203, 204, 100, 104, 202, 151, 156, 154, 201,
	188, 194, 144, 140, 0, 99, 192, 142, 139, 131,
	0, 119, 123, 160, 138, 161, 124, 148, 147, 149,
	332, 0, 153, 125, 0, 0, 0, 0, 0, 180,
	199, 216, 217, 0, 0, 0, 209, 210, 211, 212,
	0, 0, 0, 150, 105, 126, 176, 130, 137, 167,
	214, 0, 172, 109, 198, 178, 306, 319, 329, 325,
	326, 323, 324, 322, 321, 320, 331, 311, 312, 313,
	314, 316, 0, 127, 315, 93, 101, 134, 0, 213,
	0, 166, 120, 200, 0, 157, 0, 0, 94, 0,
	0, 276, 0, 0, 0, 118, 273, 0, 173, 132,
	318, 135, 0, 0, 179, 145, 327, 106, 0, 0,
	309, 310, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 537, 274, 297, 295, 299, 300, 301, 302,
	0, 0, 107, 298, 303, 304, 305, 0, 0, 0,
	271, 288, 0, 317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 286, 0,
	0, 0, 0, 330, 0, 287, 0, 0, 283, 284,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 206, 0, 0, 328, 164, 0,
	110, 0, 185, 122, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 171, 158, 197, 0, 159,
	169, 136, 189, 165, 196, 0, 207, 208, 187, 205,
	174, 102, 152, 92, 163, 170, 0, 111, 0, 218,
	219, 220, 221, 222, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 186, 195, 108, 175, 98,
	193, 182, 184, 143, 128, 129, 177, 96, 97, 0,
	168, 117, 162, 121, 116, 155, 183, 146, 190, 191,
	113, 215, 115, 114, 181, 103, 203, 204, 100, 104,
	202, 151, 156, 154, 201, 188, 194, 144, 140, 0,
	99, 192, 142, 139, 131, 0, 119, 123, 160, 138,
	161, 124, 148, 147, 149, 332, 0, 153, 125, 0,
	0, 0, 0, 0, 180, 199, 216, 217, 0, 0,
	0, 209, 210, 211, 212, 0, 0, 0, 150, 105,
	126, 176, 130, 137, 167, 214, 0, 172, 109, 198,
	178, 306, 319, 329, 325, 326, 323, 324, 322, 321,
	320, 331, 311, 312, 313, 314, 316, 0, 127, 315,
	93, 101, 134, 0, 213, 0, 166, 120, 200, 0,
	157, 0, 0, 94, 0, 0, 276, 0, 0, 0,
	118, 273, 0, 173, 132, 318, 135, 0, 0, 179,
	145, 327, 106, 0, 0, 309, 310, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 274, 297,
	295, 299, 300, 301, 302, 0, 0, 107, 298, 303,
	304, 305, 0, 0, 0, 271, 288, 0, 317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 286, 267, 0, 0, 0, 330, 0,
	287, 0, 0, 283, 284, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 206,
	0, 0, 328, 164, 0, 110, 0, 185, 122, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	171, 158, 197, 0, 159, 169, 136, 189, 165, 196,
	0, 207, 208, 187, 205, 174, 102, 152, 92, 163,
	170, 0, 111, 0, 218, 219, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	186, 195, 108, 175, 98, 193, 182, 184, 143, 128,
	129, 177, 96, 97, 0, 168, 117, 162, 121, 116,
	155, 183, 146, 190, 191, 113, 215, 115, 114, 181,
	103, 203, 204, 100, 104, 202, 151, 156, 154, 201,
	188, 194, 144, 140, 0, 99, 192, 142, 139, 131,
	0, 119, 123, 160, 138, 161, 124, 148, 147, 149,
	332, 0, 153, 125, 0, 0, 0, 0, 0, 180,
	199, 216, 217, 0, 0, 0, 209, 210, 211, 212,
	0, 0, 0, 150, 105, 126, 176, 130, 137, 167,
	214, 0, 172, 109, 198, 178, 306, 319, 329, 325,
	326, 323, 324, 322, 321, 320, 331, 311, 312, 313,
	314, 316, 0, 127, 315, 93, 101, 134, 0, 213,
	0, 166, 120, 200, 0, 0, 0, 23, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 173, 157,
	0, 0, 94, 0, 0, 276, 327, 106, 0, 118,
	273, 0, 0, 132, 318, 135, 0, 0, 179, 145,
	0, 0, 0, 0, 309, 310, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 274, 297, 295,
	299, 300, 301, 302, 0, 0, 107, 298, 303, 304,
	305, 0, 0, 0, 271, 288, 0, 317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 286, 0, 0, 0, 0, 330, 0, 287,
	0, 0, 283, 284, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 206, 0,
	0, 328, 164, 0, 110, 0, 185, 122, 0, 133,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 171,
	158, 197, 0, 159, 169, 136, 189, 165, 196, 0,
	207, 208, 187, 205, 174, 102, 152, 92, 163, 170,
	0, 111, 0, 218, 219, 220, 221, 222, 223, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 186,
	195, 108, 175, 98, 193, 182, 184, 143, 128, 129,
	177, 96, 97, 0, 168, 117, 162, 121, 116, 155,
	183, 146, 190, 191, 113, 215, 115, 114, 181, 103,
	203, 204, 100, 104, 202, 151, 156, 154, 201, 188,
	194, 144, 140, 0, 99, 192, 142, 139, 131, 0,
	119, 123, 160, 138, 161, 124, 148, 147, 149, 332,
	0, 153, 125, 0, 0, 0, 0, 0, 180, 199,
	216, 217, 0, 0, 0, 209, 210, 211, 212, 0,
	0, 0, 150, 105, 126, 176, 130, 137, 167, 214,
	0, 172, 109, 198, 178, 306, 319, 329, 325, 326,
	323, 324, 322, 321, 320, 331, 311, 312, 313, 314,
	316, 0, 127, 315, 93, 101, 134, 0, 213, 0,
	166, 120, 200, 0, 157, 0, 0, 94, 0, 0,
	276, 0, 0, 0, 118, 273, 0, 173, 132, 318,
	135, 0, 0, 179, 145, 327, 106, 0, 0, 309,
	310, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 274, 297, 295, 299, 300, 301, 302, 0,
	0, 107, 298, 303, 304, 305, 0, 0, 0, 271,
	288, 0, 317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 286, 0, 0,
	0, 0, 330, 0, 287, 0, 0, 283, 284, 289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 206, 0, 0, 328, 164, 0, 110,
	0, 185, 122, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 171, 158, 197, 0, 159, 169,
	136, 189, 165, 196, 0, 207, 208, 187, 205, 174,
	102, 152, 92, 163, 170, 0, 111, 0, 218, 219,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 186, 195, 108, 175, 98, 193,
	182, 184, 143, 128, 129, 177, 96, 97, 0, 168,
	117, 162, 121, 116, 155, 183, 146, 190, 191, 113,
	215, 115, 114, 181, 103, 203, 204, 100, 104, 202,
	151, 156, 154, 201, 188, 194, 144, 140, 0, 99,
	192, 142, 139, 131, 0, 119, 123, 160, 138, 161,
	124, 148, 147, 149, 332, 0, 153, 125, 0, 0,
	0, 0, 0, 180, 199, 216, 217, 0, 0, 0,
	209, 210, 211, 212, 0, 0, 0, 150, 105, 126,
	176, 130, 137, 167, 214, 0, 172, 109, 198, 178,
	306, 319, 329, 325, 326, 323, 324, 322, 321, 320,
	331, 311, 312, 313, 314, 316, 0, 127, 315, 93,
	101, 134, 0, 213, 0, 166, 120, 200, 0, 157,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 173, 132, 318, 135, 0, 0, 179, 145,
	327, 106, 0, 0, 309, 310, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 274, 297, 295,
	299, 300, 301, 302, 0, 0, 107, 298, 303, 304,
	305, 0, 0, 0, 0, 288, 0, 317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 286, 0, 0, 0, 0, 330, 0, 287,
	0, 0, 283, 284, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 206, 0,
	0, 328, 164, 0, 110, 0, 185, 122, 0, 133,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 171,
	158, 197, 1945, 159, 169, 136, 189, 165, 196, 0,
	207, 208, 187, 205, 174, 102, 152, 92, 163, 170,
	0, 111, 0, 218, 219, 220, 221, 222, 223, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 186,
	195, 108, 175, 98, 193, 182, 184, 143, 128, 129,
	177, 96, 97, 0, 168, 117, 162, 121, 116, 155,
	183, 146, 190, 191, 113, 215, 115, 114, 181, 103,
	203, 204, 100, 104, 202, 151, 156, 154, 201, 188,
	194, 144, 140, 0, 99, 192, 142, 139, 131, 0,
	119, 123, 160, 138, 161, 124, 148, 147, 149, 332,
	0, 153, 125, 0, 0, 0, 0, 0, 180, 199,
	216, 217, 0, 0, 0, 209, 210, 211, 212, 0,
	0, 0, 150, 105, 126, 176, 130, 137, 167, 214,
	0, 172, 109, 198, 178, 306, 319, 329, 325, 326,
	323, 324, 322, 321, 320, 331, 311, 312, 313, 314,
	316, 0, 127, 315, 93, 101, 134, 0, 213, 0,
	166, 120, 200, 0, 157, 0, 0, 94, 0, 0,
	276, 0, 0, 0, 118, 0, 0, 173, 132, 318,
	135, 0, 0, 179, 145, 327, 106, 0, 0, 309,
	310, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 274, 297, 295, 299, 300, 301, 302, 0,
	0, 107, 298, 303, 304, 305, 0, 0, 0, 0,
	288, 0, 317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 286, 0, 0,
	0, 0, 330, 0, 287, 0, 0, 283, 284, 289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 206, 0, 0, 328, 164, 0, 110,
	0, 185, 122, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 171, 158, 197, 0, 159, 169,
	136, 189, 165, 196, 0, 207, 208, 187, 205, 174,
	102, 152, 92, 163, 170, 0, 111, 0, 218, 219,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 186, 195, 108, 175, 98, 193,
	182, 184, 143, 128, 129, 177, 96, 97, 0, 168,
	117, 162, 121, 116, 155, 183, 146, 190, 191, 113,
	215, 115, 114, 181, 103, 203, 204, 100, 104, 202,
	151, 156, 154, 201, 188, 194, 144, 140, 0, 99,
	192, 142, 139, 131, 0, 119, 123, 160, 138, 161,
	124, 148, 147, 149, 332, 0, 153, 125, 0, 0,
	0, 0, 0, 180, 199, 216, 217, 0, 0, 0,
	209, 210, 211, 212, 0, 0, 0, 150, 105, 126,
	176, 130, 137, 167, 214, 0, 172, 109, 198, 178,
	306, 319, 329, 325, 326, 323, 324, 322, 321, 320,
	331, 311, 312, 313, 314, 316, 0, 127, 315, 93,
	101, 134, 0, 213, 0, 166, 120, 200, 0, 157,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 173, 132, 318, 135, 0, 0, 179, 145,
	327, 106, 0, 0, 309, 310, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 274, 297, 295,
	299, 300, 301, 302, 0, 0, 107, 298, 303, 304,
	305, 0, 0, 0, 0, 288, 0, 317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 286, 0, 0, 0, 0, 330, 0, 287,
	0, 0, 283, 284, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 206, 0,
	0, 328, 164, 0, 110, 0, 185, 122, 0, 133,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 171,
	158, 197, 0, 159, 169, 136, 189, 165, 196, 0,
	207, 208, 187, 205, 174, 102, 152, 92, 163, 170,
	0, 111, 0, 218, 219, 220, 221, 222, 223, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 186,
	195, 108, 175, 98, 193, 182, 184, 143, 128, 129,
	177, 96, 97, 0, 168, 117, 162, 121, 116, 155,
	183, 146, 190, 191, 113, 215, 115, 114, 181, 103,
	203, 204, 100, 104, 202, 151, 156, 154, 201, 188,
	194, 144, 140, 0, 99, 192, 142, 139, 131, 0,
	119, 123, 160, 138, 161, 124, 148, 147, 149, 332,
	0, 153, 125, 0, 0, 0, 0, 0, 180, 199,
	216, 217, 0, 0, 0, 209, 210, 211, 212, 0,
	0, 0, 150, 105, 126, 176, 130, 137, 167, 214,
	0, 172, 109, 198, 178, 306, 319, 329, 325, 326,
	323, 324, 322, 321, 320, 331, 311, 312, 313, 314,
	316, 0, 127, 315, 93, 101, 134, 0, 213, 0,
	166, 120, 200, 0, 157, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 173, 132, 0,
	135, 0, 0, 179, 145, 327, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1415,
	0, 0, 274, 0, 1221, 1222, 1223, 0, 0, 0,
	0, 107, 1226, 1224, 304, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 206, 0, 0, 0, 164, 0, 110,
	0, 185, 122, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 171, 158, 197, 0, 159, 169,
	136, 189, 165, 196, 0, 207, 208, 187, 205, 174,
	102, 152, 92, 163, 170, 0, 111, 0, 218, 219,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 186, 195, 108, 175, 98, 193,
	182, 184, 143, 128, 129, 177, 96, 97, 0, 168,
	117, 162, 121, 116, 155, 183, 146, 190, 191, 113,
	215, 115, 114, 181, 103, 203, 204, 100, 104, 202,
	151, 156, 154, 201, 188, 194, 144, 140, 0, 99,
	192, 142, 139, 131, 0, 119, 123, 160, 138, 161,
	124, 148, 147, 149, 0, 0, 1228, 1233, 0, 0,
	0, 0, 0, 180, 199, 216, 217, 0, 0, 0,
	209, 210, 211, 212, 0, 0, 0, 150, 105, 126,
	176, 130, 137, 167, 214, 0, 172, 109, 198, 178,
	0, 1230, 0, 1232, 1231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 93,
	101, 134, 0, 213, 0, 166, 120, 200, 0, 157,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 173, 132, 0, 135, 0, 0, 179, 145,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1220, 0, 0, 274, 0, 1221,
	1222, 1223, 0, 0, 0, 0, 107, 1226, 1224, 304,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 206, 0,
	0, 0, 164, 0, 110, 0, 185, 122, 0, 133,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 171,
	158, 197, 0, 159, 169, 136, 189, 165, 196, 0,
	207, 208, 187, 205, 174, 102, 152, 92, 163, 170,
	0, 111, 0, 218, 219, 220, 221, 222, 223, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 186,
	195, 108, 175, 98, 193, 182, 184, 143, 128, 129,
	177, 96, 97, 0, 168, 117, 162, 121, 116, 155,
	183, 146, 190, 191, 113, 215, 115, 114, 181, 103,
	203, 204, 100, 104, 202, 151, 156, 154, 201, 188,
	194, 144, 140, 0, 99, 192, 142, 139, 131, 0,
	119, 123, 160, 138, 161, 124, 148, 147, 149, 0,
	0, 1228, 1233, 0, 0, 0, 0, 0, 180, 199,
	216, 217, 0, 0, 0, 209, 210, 211, 212, 0,
	0, 0, 150, 105, 126, 176, 130, 137, 167, 214,
	0, 172, 109, 198, 178, 0, 1230, 0, 1232, 1231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 93, 101, 134, 0, 213, 0,
	166, 120, 200, 0, 157, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 173, 132, 0,
	135, 0, 0, 179, 145, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 1221, 1222, 1223, 0, 0, 0,
	0, 107, 1226, 1224, 304, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 206, 0, 0, 0, 164, 0, 110,
	0, 185, 122, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 171, 158, 197, 0, 159, 169,
	136, 189, 165, 196, 0, 207, 208, 187, 205, 174,
	102, 152, 92, 163, 170, 0, 111, 0, 218, 219,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 186, 195, 108, 175, 98, 193,
	182, 184, 143, 128, 129, 177, 96, 97, 0, 168,
	117, 162, 121, 116, 155, 183, 146, 190, 191, 113,
	215, 115, 114, 181, 103, 203, 204, 100, 104, 202,
	151, 156, 154, 201, 188, 194, 144, 140, 0, 99,
	192, 142, 139, 131, 0, 119, 123, 160, 138, 161,
	124, 148, 147, 149, 0, 0, 1228, 1233, 0, 0,
	0, 0, 0, 180, 199, 216, 217, 0, 0, 0,
	209, 210, 211, 212, 0, 0, 0, 150, 105, 126,
	176, 130, 137, 167, 214, 0, 172, 109, 198, 178,
	0, 1230, 0, 1232, 1231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 93,
	101, 134, 0, 213, 0, 166, 120, 200, 0, 157,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 173, 132, 0, 135, 0, 0, 179, 145,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 359, 297, 295,
	299, 300, 301, 302, 0, 0, 107, 298, 303, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 206, 0,
	0, 0, 164, 0, 110, 0, 185, 122, 0, 133,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 171,
	158, 197, 0, 159, 169, 136, 189, 165, 196, 0,
	207, 208, 187, 205, 174, 102, 152, 92, 163, 170,
	0, 111, 0, 218, 219, 220, 221, 222, 223, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 186,
	195, 108, 175, 98, 193, 182, 184, 143, 128, 129,
	177, 96, 97, 0, 168, 117, 162, 121, 116, 155,
	183, 146, 190, 191, 113, 215, 115, 114, 181, 103,
	203, 204, 100, 104, 202, 151, 156, 154, 201, 188,
	194, 144, 140, 0, 99, 192, 142, 139, 131, 0,
	119, 123, 160, 138, 161, 124, 148, 147, 149, 0,
	0, 153, 125, 0, 0, 0, 0, 0, 180, 199,
	216, 217, 0, 0, 0, 209, 210, 211, 212, 0,
	0, 0, 150, 105, 126, 176, 130, 137, 167, 214,
	0, 172, 109, 198, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 93, 101, 134, 0, 213, 0,
	166, 120, 200, 0, 157, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 118, 0, 745, 173, 132, 0,
	135, 0, 0, 179, 145, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 359, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 730, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 206, 0, 0, 0, 164, 0, 110,
	0, 185, 122, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 171, 158, 197, 0, 159, 169,
	136, 189, 165, 196, 0, 207, 208, 187, 205, 174,
	102, 152, 92, 163, 170, 0, 111, 0, 218, 219,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 1826,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 186, 195, 108, 175, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 0, 772,
	773, 162, 774, 775, 776, 778, 777, 747, 748, 749,
	753, 751, 750, 752, 724, 726, 204, 722, 725, 731,
	727, 728, 729, 743, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 744, 754, 755, 756, 757,
	758, 759, 760, 761, 0, 0, 153, 125, 0, 0,
	0, 0, 0, 180, 199, 216, 217, 0, 0, 0,
	209, 210, 211, 212, 0, 0, 0, 150, 105, 126,
	176, 130, 137, 167, 214, 0, 172, 109, 198, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 93,
	723, 134, 0, 213, 0, 166, 120, 200, 0, 157,
	0, 0, 94, 0, 559, 0, 0, 0, 0, 118,
	0, 0, 173, 132, 0, 135, 0, 0, 179, 145,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 359, 0, 561,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 556, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 206, 0,
	0, 0, 164, 0, 110, 0, 185, 122, 0, 133,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 171,
	158, 197, 0, 159, 169, 136, 189, 165, 196, 0,
	207, 208, 187, 205, 174, 102, 152, 92, 163, 170,
	0, 111, 0, 218, 219, 220, 221, 222, 223, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 186,
	195, 108, 175, 98, 193, 182, 184, 143, 128, 129,
	177, 96, 97, 0, 168, 117, 162, 121, 116, 155,
	183, 146, 190, 191, 113, 215, 115, 114, 181, 103,
	203, 204, 100, 104, 202, 151, 156, 154, 201, 188,
	194, 144, 140, 0, 99, 192, 142, 139, 131, 0,
	119, 123, 160, 138, 161, 124, 148, 147, 149, 0,
	0, 153, 125, 0, 0, 0, 0, 0, 180, 199,
	216, 217, 0, 0, 0, 209, 210, 211, 212, 0,
	0, 0, 150, 105, 126, 176, 130, 137, 167, 214,
	0, 172, 109, 198, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 93, 101, 134, 0, 213, 0,
	166, 120, 200, 0, 157, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 118, 0, 745, 173, 132, 0,
	135, 0, 0, 179, 145, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 359, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 730, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 206, 0, 0, 0, 164, 0, 110,
	0, 185, 122, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 171, 158, 197, 0, 159, 169,
	136, 189, 165, 196, 0, 207, 208, 187, 205, 174,
	102, 152, 92, 163, 170, 0, 111, 0, 218, 219,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 186, 195, 108, 175, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 0, 772,
	773, 162, 774, 775, 776, 778, 777, 747, 748, 749,
	753, 751, 750, 752, 724, 726, 204, 722, 725, 731,
	727, 728, 729, 743, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 744, 754, 755, 756, 757,
	758, 759, 760, 761, 0, 0, 153, 125, 0, 0,
	0, 0, 0, 180, 199, 216, 217, 0, 0, 0,
	209, 210, 211, 212, 0, 0, 0, 150, 105, 126,
	176, 130, 137, 167, 214, 0, 172, 109, 198, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 93,
	723, 134, 0, 213, 0, 166, 120, 200, 0, 157,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 173, 132, 0, 135, 0, 0, 179, 145,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 359, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 206, 0,
	0, 0, 164, 0, 110, 0, 185, 122, 0, 133,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 171,
	158, 197, 0, 159, 169, 136, 189, 165, 196, 0,
	207, 208, 187, 205, 174, 102, 152, 92, 163, 170,
	0, 111, 0, 218, 219, 220, 221, 222, 223, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 186,
	195, 108, 175, 98, 193, 182, 184, 143, 128, 129,
	177, 96, 97, 0, 168, 117, 162, 121, 116, 155,
	183, 146, 190, 1553, 113, 215, 115, 114, 181, 103,
	203, 204, 100, 1552, 202, 151, 156, 154, 201, 1554,
	194, 144, 140, 0, 99, 192, 142, 139, 1555, 901,
	119, 123, 160, 138, 161, 124, 148, 147, 149, 0,
	0, 153, 125, 898, 0, 0, 0, 0, 180, 199,
	216, 217, 0, 0, 0, 209, 210, 211, 212, 0,
	0, 0, 150, 105, 126, 176, 130, 137, 167, 214,
	0, 172, 109, 198, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 93, 101, 134, 0, 213, 0,
	166, 120, 200, 0, 157, 0, 0, 94, 0, 687,
	0, 0, 0, 0, 118, 0, 0, 173, 132, 0,
	135, 0, 0, 179, 145, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 689, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 206, 0, 0, 0, 164, 0, 110,
	0, 185, 122, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 171, 158, 197, 0, 159, 169,
	136, 189, 165, 196, 0, 207, 208, 187, 205, 174,
	102, 152, 92, 163, 170, 0, 111, 0, 218, 219,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 186, 195, 108, 175, 98, 193,
	182, 184, 143, 128, 129, 177, 96, 97, 0, 168,
	117, 162, 121, 116, 155, 183, 146, 190, 191, 113,
	215, 115, 114, 181, 103, 203, 204, 100, 104, 202,
	151, 156, 154, 201, 188, 194, 144, 140, 0, 99,
	192, 142, 139, 131, 0, 119, 123, 160, 138, 161,
	124, 148, 147, 149, 0, 0, 153, 125, 0, 0,
	0, 0, 0, 180, 199, 216, 217, 0, 0, 0,
	209, 210, 211, 212, 0, 0, 0, 150, 105, 126,
	176, 130, 137, 167, 214, 0, 172, 109, 198, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 23, 93,
	101, 134, 0, 213, 0, 166, 120, 200, 0, 0,
	157, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	118, 0, 173, 0, 132, 0, 135, 0, 0, 179,
	145, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 359, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 206,
	0, 0, 0, 164, 0, 110, 0, 185, 122, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	171, 158, 197, 0, 159, 169, 136, 189, 165, 196,
	0, 207, 208, 187, 205, 174, 102, 152, 92, 163,
	170, 0, 111, 0, 218, 219, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	186, 195, 108, 175, 98, 193, 182, 184, 143, 128,
	129, 177, 96, 97, 0, 168, 117, 162, 121, 116,
	155, 183, 146, 190, 191, 113, 215, 115, 114, 181,
	103, 203, 204, 100, 104, 202, 151, 156, 154, 201,
	188, 194, 144, 140, 0, 99, 192, 142, 139, 131,
	0, 119, 123, 160, 138, 161, 124, 148, 147, 149,
	0, 0, 153, 125, 0, 0, 0, 0, 0, 180,
	199, 216, 217, 0, 0, 0, 209, 210, 211, 212,
	0, 0, 0, 150, 105, 126, 176, 130, 137, 167,
	214, 0, 172, 109, 198, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 93, 101, 134, 0, 213,
	0, 166, 120, 200, 0, 157, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 173, 132,
	0, 135, 0, 0, 179, 145, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1051, 0,
	0, 0, 0, 359, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 206, 0, 0, 0, 164, 0,
	110, 0, 185, 122, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 171, 158, 197, 0, 159,
	169, 136, 189, 165, 196, 0, 207, 208, 187, 205,
	174, 102, 152, 92, 163, 170, 0, 111, 0, 218,
	219, 220, 221, 222, 223, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1052, 95, 186, 195, 108, 175, 98,
	193, 182, 184, 143, 128, 129, 177, 96, 97, 0,
	168, 117, 162, 121, 116, 155, 183, 146, 190, 191,
	113, 215, 115, 114, 181, 103, 203, 204, 100, 104,
	202, 151, 156, 154, 201, 188, 194, 144, 140, 0,
	99, 192, 142, 139, 131, 0, 119, 123, 160, 138,
	161, 124, 148, 147, 149, 0, 0, 153, 125, 0,
	0, 0, 0, 0, 180, 199, 216, 217, 0, 0,
	0, 209, 210, 211, 212, 0, 0, 0, 150, 105,
	126, 176, 130, 137, 167, 214, 0, 172, 109, 198,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 23,
	93, 101, 134, 0, 213, 0, 166, 120, 200, 0,
	0, 157, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 118, 0, 173, 0, 132, 0, 135, 0, 0,
	179, 145, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	206, 0, 0, 0, 164, 0, 110, 0, 185, 122,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 171, 158, 197, 0, 159, 169, 136, 189, 165,
	196, 0, 207, 208, 187, 205, 174, 102, 152, 92,
	163, 170, 0, 111, 0, 218, 219, 220, 221, 222,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 186, 195, 108, 175, 98, 193, 182, 184, 143,
	128, 129, 177, 96, 97, 0, 168, 117, 162, 121,
	116, 155, 183, 146, 190, 191, 113, 215, 115, 114,
	181, 103, 203, 204, 100, 104, 202, 151, 156, 154,
	201, 188, 194, 144, 140, 0, 99, 192, 142, 139,
	131, 0, 119, 123, 160, 138, 161, 124, 148, 147,
	149, 0, 0, 153, 125, 0, 0, 0, 0, 0,
	180, 199, 216, 217, 0, 0, 0, 209, 210, 211,
	212, 0, 0, 0, 150, 105, 126, 176, 130, 137,
	167, 214, 0, 172, 109, 198, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 93, 101, 134, 0,
	213, 0, 166, 120, 200, 0, 157, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 173,
	132, 0, 135, 0, 0, 179, 145, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 359, 0, 0, 836, 0, 0,
	837, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 206, 0, 0, 0, 164,
	0, 110, 0, 185, 122, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 171, 158, 197, 0,
	159, 169, 136, 189, 165, 196, 0, 207, 208, 187,
	205, 174, 102, 152, 92, 163, 170, 0, 111, 0,
	218, 219, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 186, 195, 108, 175,
	98, 193, 182, 184, 143, 128, 129, 177, 96, 97,
	0, 168, 117, 162, 121, 116, 155, 183, 146, 190,
	191, 113, 215, 115, 114, 181, 103, 203, 204, 100,
	104, 202, 151, 156, 154, 201, 188, 194, 144, 140,
	0, 99, 192, 142, 139, 131, 0, 119, 123, 160,
	138, 161, 124, 148, 147, 149, 0, 0, 153, 125,
	0, 0, 0, 0, 0, 180, 199, 216, 217, 0,
	0, 0, 209, 210, 211, 212, 0, 0, 0, 150,
	105, 126, 176, 130, 137, 167, 214, 0, 172, 109,
	198, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 93, 101, 134, 0, 213, 0, 166, 120, 200,
	0, 157, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 118, 708, 0, 173, 132, 0, 135, 0, 0,
	179, 145, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 359,
	0, 707, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	206, 0, 0, 0, 164, 0, 110, 0, 185, 122,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 171, 158, 197, 0, 159, 169, 136, 189, 165,
	196, 0, 207, 208, 187, 205, 174, 102, 152, 92,
	163, 170, 0, 111, 0, 218, 219, 220, 221, 222,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 186, 195, 108, 175, 98, 193, 182, 184, 143,
	128, 129, 177, 96, 97, 0, 168, 117, 162, 121,
	116, 155, 183, 146, 190, 191, 113, 215, 115, 114,
	181, 103, 203, 204, 100, 104, 202, 151, 156, 154,
	201, 188, 194, 144, 140, 0, 99, 192, 142, 139,
	131, 0, 119, 123, 160, 138, 161, 124, 148, 147,
	149, 0, 0, 153, 125, 0, 0, 0, 0, 0,
	180, 199, 216, 217, 0, 0, 0, 209, 210, 211,
	212, 0, 0, 0, 150, 105, 126, 176, 130, 137,
	167, 214, 0, 172, 109, 198, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 93, 101, 134, 0,
	213, 0, 166, 120, 200, 0, 157, 0, 0, 94,
	0, 687, 0, 0, 0, 0, 118, 0, 0, 173,
	132, 0, 135, 0, 0, 179, 145, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 689, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 206, 0, 0, 0, 164,
	0, 110, 0, 185, 122, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 171, 158, 197, 0,
	685, 169, 136, 189, 165, 196, 0, 207, 208, 187,
	205, 174, 102, 152, 92, 163, 170, 0, 111, 0,
	218, 219, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 186, 195, 108, 175,
	98, 193, 182, 184, 143, 128, 129, 177, 96, 97,
	0, 168, 117, 162, 121, 116, 155, 183, 146, 190,
	191, 113, 215, 115, 114, 181, 103, 203, 204, 100,
	104, 202, 151, 156, 154, 201, 188, 194, 144, 140,
	0, 99, 192, 142, 139, 131, 0, 119, 123, 160,
	138, 161, 124, 148, 147, 149, 0, 0, 153, 125,
	0, 0, 0, 0, 0, 180, 199, 216, 217, 0,
	0, 0, 209, 210, 211, 212, 0, 0, 0, 150,
	105, 126, 176, 130, 137, 167, 214, 0, 172, 109,
	198, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 93, 101, 134, 0, 213, 0, 166, 120, 200,
	0, 157, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 173, 132, 0, 135, 0, 0,
	179, 145, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	206, 0, 0, 0, 164, 0, 110, 0, 185, 122,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 171, 158, 197, 0, 159, 169, 136, 189, 165,
	196, 0, 207, 208, 187, 205, 174, 102, 152, 92,
	163, 170, 0, 111, 0, 218, 219, 220, 221, 222,
	223, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 186, 195, 108, 175, 98, 193, 182, 184, 143,
	128, 129, 177, 96, 97, 0, 168, 117, 162, 121,
	116, 155, 183, 146, 190, 191, 113, 215, 115, 114,
	181, 103, 203, 204, 100, 104, 202, 151, 156, 154,
	201, 188, 194, 144, 140, 0, 99, 192, 142, 139,
	131, 0, 119, 123, 160, 138, 161, 124, 148, 147,
	149, 0, 0, 153, 125, 0, 0, 0, 0, 0,
	180, 199, 216, 217, 0, 0, 0, 209, 210, 211,
	212, 0, 0, 0, 150, 105, 126, 176, 130, 137,
	167, 214, 0, 172, 109, 198, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 93, 101, 134, 0,
	213, 0, 166, 120, 200, 0, 0, 157, 0, 0,
	94, 0, 0, 0, 0, 0, 1898, 118, 0, 173,
	0, 132, 0, 135, 0, 0, 179, 145, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 359, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 206, 0, 0, 0,
	164, 0, 110, 0, 185, 122, 0, 133, 0, 0,
	0, 1392, 0, 0, 0, 112, 0, 171, 158, 197,
	0, 159, 169, 136, 189, 165, 196, 0, 207, 208,
	187, 205, 174, 102, 152, 92, 163, 170, 0, 111,
	0, 218, 219, 220, 221, 222, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 186, 195, 108,
	175, 98, 193, 182, 184, 143, 128, 129, 177, 96,
	97, 0, 168, 117, 162, 121, 116, 155, 183, 146,
	190, 191, 113, 215, 115, 114, 181, 103, 203, 204,
	100, 104, 202, 151, 156, 154, 201, 188, 194, 144,
	140, 0, 99, 192, 142, 139, 131, 0, 119, 123,
	160, 138, 161, 124, 148, 147, 149, 0, 0, 153,
	125, 0, 0, 0, 0, 0, 180, 199, 216, 217,
	0, 0, 0, 209, 210, 211, 212, 0, 0, 0,
	150, 105, 126, 176, 130, 137, 167, 214, 0, 172,
	109, 198, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 93, 101, 134, 0, 213, 0, 166, 120,
	200, 0, 157, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 173, 132, 0, 135, 0,
	0, 179, 145, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	359, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 206, 0, 0, 0, 164, 0, 110, 0, 185,
	122, 0, 133, 0, 0, 0, 1511, 0, 0, 0,
	112, 0, 171, 158, 197, 0, 159, 169, 136, 189,
	165, 196, 0, 207, 208, 187, 205, 174, 102, 152,
	92, 163, 170, 0, 111, 0, 218, 219, 220, 221,
	222, 223, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 186, 195, 108, 175, 98, 193, 182, 184,
	143, 128, 129, 177, 96, 97, 0, 168, 117, 162,
	121, 116, 155, 183, 146, 190, 191, 113, 215, 115,
	114, 181, 103, 203, 204, 100, 104, 202, 151, 156,
	154, 201, 188, 194, 144, 140, 0, 99, 192, 142,
	139, 131, 0, 119, 123, 160, 138, 161, 124, 148,
	147, 149, 0, 0, 153, 125, 0, 0, 0, 0,
	0, 180, 199, 216, 217, 0, 0, 0, 209, 210,
	211, 212, 0, 0, 0, 150, 105, 126, 176, 130,
	137, 167, 214, 0, 172, 109, 198, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 93, 101, 134,
	0, 213, 0, 166, 120, 200, 0, 157, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	173, 132, 0, 135, 0, 0, 179, 145, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 206, 0, 0, 0,
	164, 0, 110, 0, 185, 122, 0, 133, 0, 0,
	0, 1392, 0, 0, 0, 112, 0, 171, 158, 197,
	0, 159, 169, 136, 189, 165, 196, 0, 207, 208,
	187, 205, 174, 102, 152, 92, 163, 170, 0, 111,
	0, 218, 219, 220, 221, 222, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 186, 195, 108,
	175, 98, 193, 182, 184, 143, 128, 129, 177, 96,
	97, 0, 168, 117, 162, 121, 116, 155, 183, 146,
	190, 191, 113, 215, 115, 114, 181, 103, 203, 204,
	100, 104, 202, 151, 156, 154, 201, 188, 194, 144,
	140, 0, 99, 192, 142, 139, 131, 0, 119, 123,
	160, 138, 161, 124, 148, 147, 149, 0, 0, 153,
	125, 0, 0, 0, 0, 0, 180, 199, 216, 217,
	0, 0, 0, 209, 210, 211, 212, 0, 0, 0,
	150, 105, 126, 176, 130, 137, 167, 214, 0, 172,
	109, 198, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 93, 101, 134, 0, 213, 0, 166, 120,
	200, 0, 157, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 173, 132, 0, 135, 0,
	0, 179, 145, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 206, 0, 0, 0, 164, 0, 110, 0, 185,
	122, 0, 133, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 171, 158, 197, 0, 159, 169, 136, 189,
	165, 196, 0, 207, 208, 187, 205, 174, 102, 152,
	92, 163, 170, 0, 111, 0, 218, 219, 220, 221,
	222, 223, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 186, 195, 108, 175, 98, 193, 182, 184,
	143, 128, 129, 177, 96, 97, 0, 168, 117, 162,
	121, 116, 155, 183, 146, 190, 191, 113, 215, 115,
	114, 181, 103, 203, 204, 100, 104, 202, 151, 156,
	154, 201, 188, 194, 144, 140, 0, 99, 192, 142,
	139, 131, 0, 119, 123, 160, 138, 161, 124, 148,
	147, 149, 0, 0, 153, 125, 0, 0, 0, 0,
	0, 180, 199, 216, 217, 0, 0, 0, 209, 210,
	211, 212, 0, 0, 0, 150, 105, 126, 176, 130,
	137, 167, 214, 0, 172, 109, 198, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 93, 101, 134,
	0, 213, 0, 166, 120, 200, 0, 157, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	173, 132, 0, 135, 0, 0, 179, 145, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 689, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 206, 0, 0, 0,
	164, 0, 110, 0, 185, 122, 0, 133, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 171, 158, 197,
	0, 159, 169, 136, 189, 165, 196, 0, 207, 208,
	187, 205, 174, 102, 152, 92, 163, 170, 0, 111,
	0, 218, 219, 220, 221, 222, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 186, 195, 108,
	175, 98, 193, 182, 184, 143, 128, 129, 177, 96,
	97, 0, 168, 117, 162, 121, 116, 155, 183, 146,
	190, 191, 113, 215, 115, 114, 181, 103, 203, 204,
	100, 104, 202, 151, 156, 154, 201, 188, 194, 144,
	140, 0, 99, 192, 142, 139, 131, 0, 119, 123,
	160, 138, 161, 124, 148, 147, 149, 0, 0, 153,
	125, 0, 0, 0, 0, 0, 180, 199, 216, 217,
	0, 0, 0, 209, 210, 211, 212, 0, 0, 0,
	150, 105, 126, 176, 130, 137, 167, 214, 0, 172,
	109, 198, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 93, 101, 134, 0, 213, 0, 166, 120,
	200, 0, 157, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 173, 132, 0, 135, 0,
	0, 179, 145, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	359, 0, 561, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 206, 0, 0, 0, 164, 0, 110, 0, 185,
	122, 0, 133, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 171, 158, 197, 0, 159, 169, 136, 189,
	165, 196, 0, 207, 208, 187, 205, 174, 102, 152,
	92, 163, 170, 0, 111, 0, 218, 219, 220, 221,
	222, 223, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 186, 195, 108, 175, 98, 193, 182, 184,
	143, 128, 129, 177, 96, 97, 0, 168, 117, 162,
	121, 116, 155, 183, 146, 190, 191, 113, 215, 115,
	114, 181, 103, 203, 204, 100, 104, 202, 151, 156,
	154, 201, 188, 194, 144, 140, 0, 99, 192, 142,
	139, 131, 0, 119, 123, 160, 138, 161, 124, 148,
	147, 149, 0, 0, 153, 125, 0, 0, 0, 0,
	0, 180, 199, 216, 217, 0, 0, 0, 209, 210,
	211, 212, 0, 0, 0, 150, 105, 126, 176, 130,
	137, 167, 214, 0, 172, 109, 198, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 93, 101, 134,
	0, 213, 0, 166, 120, 200, 0, 157, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	173, 132, 0, 135, 0, 0, 179, 145, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 206, 0, 0, 0,
	164, 0, 110, 0, 185, 122, 0, 133, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 171, 158, 197,
	0, 159, 169, 136, 189, 165, 196, 0, 207, 208,
	187, 205, 174, 102, 152, 92, 163, 170, 0, 111,
	0, 218, 219, 220, 221, 222, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 186, 195, 108,
	175, 98, 193, 182, 184, 143, 128, 129, 177, 96,
	97, 0, 168, 117, 162, 121, 116, 155, 183, 146,
	190, 191, 113, 215, 115, 114, 181, 103, 203, 204,
	100, 104, 202, 151, 156, 154, 201, 188, 194, 144,
	140, 0, 99, 192, 142, 139, 131, 0, 119, 123,
	160, 138, 161, 124, 148, 147, 149, 0, 0, 153,
	125, 0, 0, 0, 0, 0, 180, 199, 216, 217,
	0, 0, 0, 209, 210, 211, 212, 0, 0, 0,
	150, 105, 126, 176, 130, 137, 167, 214, 796, 172,
	109, 198, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 93, 101, 134, 0, 213, 0, 166, 120,
	200, 0, 157, 0, 0, 94, 0, 0, 0, 0,
	0, 665, 118, 0, 0, 173, 132, 0, 135, 0,
	0, 179, 145, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 206, 0, 0, 0, 164, 0, 110, 0, 185,
	122, 0, 133, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 171, 158, 197, 0, 159, 169, 136, 189,
	165, 196, 0, 207, 208, 187, 205, 174, 102, 152,
	92, 163, 170, 0, 111, 0, 218, 219, 220, 221,
	222, 223, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 186, 195, 108, 175, 98, 193, 182, 184,
	143, 128, 129, 177, 96, 97, 0, 168, 117, 162,
	121, 116, 155, 183, 146, 190, 191, 113, 215, 115,
	114, 181, 103, 203, 204, 100, 104, 202, 151, 156,
	154, 201, 188, 194, 144, 140, 0, 99, 192, 142,
	139, 131, 0, 119, 123, 160, 138, 161, 124, 148,
	147, 149, 0, 0, 153, 125, 0, 0, 0, 0,
	0, 180, 199, 216, 217, 0, 0, 0, 209, 210,
	211, 212, 0, 0, 0, 150, 105, 126, 176, 130,
	137, 167, 214, 0, 172, 109, 198, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 93, 101, 134,
	342, 213, 0, 166, 120, 200, 0, 157, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	173, 132, 0, 135, 0, 0, 179, 145, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 206, 0, 0, 0,
	164, 0, 110, 0, 185, 122, 0, 133, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 171, 158, 197,
	0, 159, 169, 136, 189, 165, 196, 0, 207, 208,
	187, 205, 174, 102, 152, 92, 163, 170, 0, 111,
	0, 218, 219, 220, 221, 222, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 186, 195, 108,
	175, 98, 193, 182, 184, 143, 128, 129, 177, 96,
	97, 0, 168, 117, 162, 121, 116, 155, 183, 146,
	190, 191, 113, 215, 115, 114, 181, 103, 203, 204,
	100, 104, 202, 151, 156, 154, 201, 188, 194, 144,
	140, 0, 99, 192, 142, 139, 131, 0, 119, 123,
	160, 138, 161, 124, 148, 147, 149, 0, 0, 153,
	125, 0, 0, 0, 0, 0, 180, 199, 216, 217,
	0, 0, 0, 209, 210, 211, 212, 0, 0, 0,
	150, 105, 126, 176, 130, 137, 167, 214, 0, 172,
	109, 198, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 93, 101, 134, 0, 213, 0, 166, 120,
	200, 0, 157, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 173, 132, 0, 135, 0,
	0, 179, 145, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	141, 206, 0, 0, 0, 164, 0, 110, 0, 185,
	122, 0, 133, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 171, 158, 197, 0, 159, 169, 136, 189,
	165, 196, 0, 207, 208, 187, 205, 174, 102, 152,
	92, 163, 170, 0, 111, 0, 218, 219, 220, 221,
	222, 223, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 186, 195, 108, 175, 98, 193, 182, 184,
	143, 128, 129, 177, 96, 97, 0, 168, 117, 162,
	121, 116, 155, 183, 146, 190, 191, 113, 215, 115,
	114, 181, 103, 203, 204, 100, 104, 202, 151, 156,
	154, 201, 188, 194, 144, 140, 0, 99, 192, 142,
	139, 131, 0, 119, 123, 160, 138, 161, 124, 148,
	147, 149, 0, 0, 153, 125, 0, 0, 0, 0,
	0, 180, 199, 216, 217, 0, 0, 0, 209, 210,
	211, 212, 0, 0, 0, 150, 105, 126, 176, 130,
	137, 167, 214, 0, 172, 109, 198, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 93, 101, 134,
	0, 213, 0, 166, 120, 200, 0, 157, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	173, 132, 0, 135, 0, 0, 179, 145, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 359, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 206, 0, 0, 0,
	164, 0, 110, 0, 185, 122, 0, 133, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 171, 158, 197,
	0, 159, 169, 136, 189, 165, 196, 0, 207, 208,
	187, 205, 174, 102, 152, 92, 163, 170, 0, 111,
	0, 218, 219, 220, 221, 222, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 186, 195, 108,
	175, 98, 193, 182, 184, 143, 128, 129, 177, 96,
	97, 0, 168, 117, 162, 121, 116, 155, 183, 146,
	190, 191, 113, 215, 115, 114, 181, 103, 203, 204,
	100, 104, 202, 151, 156, 154, 201, 188, 194, 144,
	140, 0, 99, 192, 142, 139, 131, 0, 119, 123,
	160, 138, 161, 124, 148, 147, 149, 0, 0, 153,
	125, 0, 0, 0, 0, 0, 180, 199, 216, 217,
	0, 0, 0, 209, 210, 211, 212, 0, 0, 0,
	150, 105, 126, 176, 130, 137, 167, 214, 0, 172,
	109, 198, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 93, 101, 134, 0, 213, 0, 166, 120,
	200, 0, 157, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 173, 132, 0, 135, 0,
	0, 179, 145, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 206, 0, 0, 0, 164, 0, 110, 0, 185,
	122, 0, 133, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 171, 158, 197, 0, 159, 169, 136, 189,
	165, 196, 0, 207, 208, 187, 205, 174, 102, 152,
	92, 163, 170, 0, 111, 0, 218, 219, 220, 221,
	222, 223, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 186, 195, 108, 175, 98, 193, 182, 184,
	143, 128, 129, 177, 96, 97, 0, 168, 117, 162,
	121, 116, 155, 183, 146, 190, 191, 113, 215, 115,
	114, 181, 103, 203, 204, 100, 104, 202, 151, 156,
	154, 201, 188, 194, 144, 140, 0, 99, 192, 142,
	139, 131, 0, 119, 123, 160, 138, 161, 124, 148,
	147, 149, 0, 0, 153, 125, 0, 0, 0, 0,
	0, 180, 199, 216, 217, 0, 0, 0, 209, 210,
	211, 212, 0, 0, 0, 150, 105, 126, 176, 130,
	137, 167, 214, 0, 172, 109, 198, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 93, 101, 134,
	0, 213, 0, 166, 120, 200, 0, 157, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	173, 132, 0, 135, 0, 0, 179, 145, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 206, 0, 0, 0,
	164, 0, 110, 0, 185, 122, 0, 133, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 171, 158, 197,
	0, 159, 169, 136, 189, 165, 196, 0, 207, 208,
	187, 205, 174, 102, 152, 92, 163, 170, 0, 111,
	0, 218, 219, 220, 221, 222, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 186, 195, 108,
	175, 98, 193, 182, 184, 143, 128, 129, 177, 96,
	97, 0, 168, 117, 162, 121, 116, 155, 183, 146,
	190, 191, 113, 215, 115, 114, 181, 103, 203, 204,
	100, 104, 202, 151, 156, 154, 201, 188, 194, 144,
	140, 0, 99, 192, 142, 139, 131, 0, 119, 123,
	160, 138, 161, 124, 148, 147, 149, 0, 0, 153,
	125, 0, 0, 0, 0, 0, 180, 199, 216, 217,
	0, 0, 0, 209, 210, 211, 212, 0, 0, 0,
	150, 105, 126, 176, 130, 137, 167, 214, 0, 172,
	109, 198, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 93, 101, 134, 0, 213, 0, 166, 120,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 106,
}

var yyPact = [...]int{
	2773, -1000, -173, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1416, 1472, -1000, -1000, -1000, -1000, -1000, -1000, 1251,
	309, 361, 387, 187, 17934, 385, 954, 18544, -1000, 159,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1163, -1000, -1000,
	-1000, -1000, -1000, 1404, 1409, 1195, 1381, 1314, -1000, 8462,
	352, 16104, 17629, 6208, -1000, 1010, -129, 371, 367, 18239,
	347, 347, 18239, 18239, 18544, 347, -1000, -12, 372, 18544,
	-1000, 18544, 348, 1007, 348, 348, 348, 18544, -1000, 475,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 18544, 1004, 1334, 328, 4856,
	4856, 4856, 4856, 260, 4856, 49, 1266, -1000, -1000, -1000,
	-1000, 4856, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 922, 1339, 9086, 9086, 1416, -1000, 1163, -1000,
	-1000, -1000, 1325, -1000, -1000, 694, 1440, -1000, 11831, 462,
	-1000, 9086, 65, 1170, -1000, -1000, 1170, -1000, -1000, 491,
	-1000, -1000, -1000, 10001, 10001, 10001, 10001, 10001, 10001, 10001,
	-1000, -1000, -1000, -1000, 79, -167, 892, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 457, -1000, 8781, 1170,
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 9086, 1170, 1170,
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1294, 1170, 1170,
	1170, 1170, -1000, 17324, 1122, 1199, -1000, -1000, -1000, 1375,
	13663, 14578, 18544, 1097, -1000, 1165, 5870, 30, -1000, -1000,
	-1000, 610, 454, 14273, -1000, -1000, -1000, 1333, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1014, -1000, 12136, 383,
	-1000, -1000, 347, 347, 956, 995, 672, 992, 1265, 411,
	1373, 18544, -1000, 17019, 4856, 365, 18544, 1359, 1261, 18544,
	964, 955, -1000, 7222, -1000, 4856, 4856, 4856, 4856, 4856,
	4856, 4856, 4856, -1000, -1000, -1000, -1000, -1000, -1000, 4856,
	4856, -1000, 53, -1000, 18544, -1000, -1000, -1000, -1000, 1458,
	523, 870, 451, 1168, -1000, 792, 1404, 922, 1314, 13968,
	1245, -1000, -1000, 18544, -1000, 9086, 9086, 747, -1000, 16714,
	-1000, -1000, 5532, 529, 10001, 730, 588, 10001, 10001, 10001,
	10001, 10001, 10001, 10001, 10001, 10001, 10001, 10001, 10001, 10001,
	10001, 10001, 869, 2440, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 953, -1000, 1163, 11221,
	11221, 68, 68, 68, 68, 68, 68, 3454, -1000, -219,
	-1000, 139, 7852, -1000, 6546, 922, 990, 569, 8781, 8462,
	8462, 9086, 9086, 10001, 18849, 8462, 1385, 622, 569, 18849,
	-1000, 922, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 119, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	8462, 8462, 8462, 8462, 279, 18544, -1000, 18849, 16104, 16104,
	16104, 16104, 16104, -1000, 1296, 1286, -1000, 1298, 1283, 1307,
	18544, -1000, 1001, 13663, 561, 1170, -1000, 16409, -1000, -1000,
	279, 1085, 16104, 18544, -1000, -1000, 5194, 1165, 30, 1151,
	-1000, 39, 34, 7547, 6546, 502, -1000, -1000, -1000, -1000,
	4180, 514, 338, -120, 72, -1000, -1000, -1000, -1000, -1000,
	1206, -1000, -1000, -1000, 1206, 302, 1206, 1206, 1206, -1000,
	1206, 1206, 112, 112, 112, 112, 112, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1249, 1248, -1000, 1206, 1206, 1206,
	-1000, 1206, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1236, 319, 1236, 1210, 1210, -1000, -1000, 13357,
	18544, 18544, -51, 925, 4856, 1352, 4856, 18544, 1446, 18544,
	-1000, -1000, -1000, 12136, -1000, 852, 18544, -1000, 18544, -1000,
	-1000, 18544, 4856, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 615, -1000,
	-1000, -1000, -1000, 1215, 9086, 9086, 6884, 9086, -1000, -1000,
	-1000, 1339, -1000, 1385, 1398, -1000, 1328, 1324, 8462, -1000,
	-1000, 529, 579, -1000, -1000, 832, -1000, -1000, -1000, -1000,
	447, 1170, -1000, 2374, -1000, -1000, -1000, -1000, 730, 10001,
	10001, 10001, 2199, 2374, 2359, 292, 2398, 68, 156, 156,
	69, 69, 69, 69, 69, 90, 90, -1000, -1000, -1000,
	-1000, -1000, 1206, 1236, 319, 1236, 1210, 1210, -1000, -1000,
	922, -1000, 891, -1000, -1000, 868, 118, -61, -1000, -1000,
	-1000, -1000, 922, 8462, 990, 1152, 11831, -1000, -1000, -1000,
	9086, -1000, 922, 988, 988, 814, 859, 633, 2229, 1164,
	-1000, 437, 988, 8462, 640, -1000, 9086, 922, -1000, -1000,
	988, 922, 988, 988, 1074, 1170, -1000, 1148, -1000, 608,
	1199, 1246, 1260, 1054, -1000, -1000, -1000, -1000, 1284, -1000,
	1282, -1000, -1000, -1000, -1000, -43, 378, 376, 374, 18239,
	-1000, 1424, 16104, 1120, -1000, -1000, 1151, 30, 26, -1000,
	-1000, -1000, -1000, 569, 604, -1000, -1000, 923, 1137, 3842,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1243,
	836, 18239, 323, 331, 500, 430, 917, -1000, -1000, -1000,
	826, -1000, 18239, 1456, -1000, -1000, 322, -1000, 321, 647,
	890, 18544, 208, 1242, 10611, -1000, -222, -1000, 70, -1000,
	-1000, 806, 112, 112, 1206, 112, 112, 112, -1000, -1000,
	502, 1269, 502, 502, 502, 502, 888, 888, -61, -61,
	-1000, -1000, -1000, 847, 1236, -1000, -1000, -1000, 846, -1000,
	1234, 18544, 18239, 1367, 1363, -1000, 6546, -1000, -1000, -1000,
	-1000, -1000, 1362, 1110, -1000, -1000, -1000, -1000, 395, -1000,
	-1000, 1659, 619, 474, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 276, 390, -1000, 4856, -1000,
	606, 18544, 18544, 1308, 569, 569, 434, -1000, -1000, 18544,
	-1000, -1000, -1000, -1000, 1109, -1000, -1000, -1000, 4518, 8462,
	-1000, 2199, 2374, 199, -1000, 10001, 10001, -1000, 67, -1000,
	-167, -1000, -1000, 129, 124, -1000, 988, -1000, 8462, 569,
	-1000, -1000, -1000, 1372, 869, 1372, 10001, 10001, 10001, 10001,
	10001, 6884, -38, 1116, 636, -1000, 9086, 755, -1000, -1000,
	-1000, -1000, -1000, 1259, 18849, 1170, -1000, 13052, 18239, 1416,
	18849, 9086, 9086, -1000, -1000, 9086, 1231, -1000, 9086, -1000,
	-1000, -1000, -1000, 1229, 1170, 1170, 1170, 976, -1000, 1416,
	1120, -1000, -1000, -1000, 37, 29, -1000, 9086, -1000, 4180,
	-1000, 4180, 15189, -1000, 1449, 1400, 324, 14, -1000, 913,
	906, -1000, 903, -1000, -1000, 48, -1000, -115, 115, 32,
	-1000, -1000, 1170, -1000, 1225, 1361, -1000, 1336, 845, -1000,
	10306, -164, -1000, -1000, -167, -1000, -1000, -1000, 1170, -1000,
	1214, 1213, -1000, 1205, 1170, 422, -1000, -1000, -1000, 1064,
	502, 502, 112, 502, 502, 502, -1000, 548, -1000, -1000,
	-1000, -1000, 986, -1000, 984, -1000, -1000, 1133, -1000, 981,
	18544, 18239, 1211, 1258, 1163, 1163, 1130, -1000, 601, 1397,
	251, 18544, 1446, 1446, -1000, 311, 18239, -1000, 18239, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 18239, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 18544,
	-1000, -1000, -1000, -1000, -1000, 18239, 341, -1000, -1000, 871,
	9086, -1000, -1000, -1000, 6546, -1000, 1424, 16104, -1000, -1000,
	922, -1000, 10001, 2374, 2374, -1000, 868, -1000, 66, 62,
	-1000, -1000, 922, 1206, 1206, -1000, 1206, 1210, -1000, -1000,
	1206, 149, 1206, 148, 922, 922, 181, 2163, 2139, 147,
	2108, -1000, 1170, -20, -1000, 569, 9086, -1000, 1341, 1061,
	1117, -1000, -1000, 8157, 922, 979, 415, 976, 1404, -1000,
	569, 569, 569, 15494, 569, -206, 15494, 15494, 15494, 12746,
	18239, 1404, -1000, -1000, -1000, -1000, 569, 3842, -1000, 974,
	-1000, 284, 1206, 429, 429, -154, 316, 312, 1170, -1000,
	-1000, -1000, -1000, -129, -1000, -1000, 647, -1000, 1205, 9086,
	15494, 169, -1000, 1124, 1056, 10916, -1000, 12441, -1000, 922,
	-1000, 885, -1000, 856, 1048, 6546, -1000, -1000, -1000, 502,
	-1000, -1000, -1000, -1000, -1000, 112, 860, 112, 838, -1000,
	835, 1147, 1257, 15799, 18544, -1000, -1000, 6546, 4180, 359,
	1391, -1000, -1000, 1396, -1000, 1068, 18239, -1000, -1000, 310,
	-1000, 1204, -1000, -1000, -1000, -1000, 1348, 18239, -1000, -1000,
	569, 1421, 1123, -1000, 2374, -1000, -1000, -1000, -1000, -1000,
	296, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10001, 10001, -1000, 10001, 10001, 10001, 922, 761, 569, 307,
	-1000, 1170, -1000, -1000, 1129, 18239, 18239, -1000, -1000, 972,
	-1000, -1000, 968, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	963, 963, 963, 561, -1000, -1000, 760, 15189, 1347, -1000,
	-1000, -1000, 786, -1000, -1000, 690, 234, 686, -1000, 18239,
	-129, 9086, -1000, 1170, 750, 952, 9086, 1203, 830, -1000,
	1035, -1000, 118, -61, -1000, -1000, -1000, -1000, -1000, -1000,
	1170, -1000, 502, -1000, 502, 1033, 1032, 15799, 18239, 18544,
	1031, 1118, -1000, 282, 1201, -1000, -1000, 18239, -1000, -1000,
	-1000, -1000, -1000, 200, 2851, 1200, 1198, 15494, 1170, 313,
	1419, 1408, -1000, -1000, 181, 181, 181, 181, 113, -1000,
	-1000, 1455, -1000, 1170, -1000, 1163, 401, -1000, 18239, -1000,
	-1000, -206, -1000, -1000, -1000, -43, 1254, 1297, 188, -1000,
	858, 599, 742, 595, 584, 580, 573, 567, 562, 542,
	-1000, -1000, -1000, 1452, -1000, -1000, -1000, 1450, 1197, -1000,
	1186, 750, 9086, 255, 1256, 824, -1000, 1030, 1022, -1000,
	-1000, -1000, -1000, 1019, 1182, 1181, -156, 806, 15799, 1021,
	-1000, 206, 2851, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1416, 18239, 18239, 18239, 18239, 369, 9696, 9086,
	15189, 15189, 947, 273, 303, -1000, 9086, 9086, -1000, -1000,
	-1000, -1000, 922, 228, -80, 18849, 1117, 922, 18239, -1000,
	-1000, -1000, -1000, 18239, -1000, -84, 1297, 18239, -1000, 801,
	-1000, -1000, 741, 781, 741, 741, 741, 741, 741, 429,
	429, 18239, 15189, 255, 750, -1000, -22, 1437, -85, 209,
	-1000, -1000, -156, 15799, 15189, 1424, 1180, 1017, -44, 18239,
	9086, 2815, -1000, 1404, 1114, 11526, -1000, -1000, -1000, -1000,
	18239, 1433, 1430, 1427, 1426, 2799, 65, 696, 171, 945,
	943, 956, 941, -1000, 18239, 1174, 569, 1113, -1000, 1303,
	-41, -95, 1100, -1000, -1000, 1170, 939, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 647,
	647, 936, 921, -1000, 255, -1000, 429, 429, -1000, -1000,
	-1000, 211, 749, 776, 775, 737, 77, -1000, 1407, 1424,
	991, 912, 760, 15494, -156, -1000, -171, -1000, 569, -1000,
	-1000, 2851, 1339, 18239, 186, -1000, -1000, 1340, -1000, -1000,
	-1000, -1000, -1000, 2851, 2851, 2851, -1000, 300, -51, -1000,
	273, 1322, 15189, -1000, 1300, -1000, 18239, -1000, 1297, -1000,
	-1000, 336, 760, -1000, -1000, -1000, 736, -1000, 707, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 14883, 760, 1424, 760,
	1254, 910, 1424, 9086, -204, -1000, -1000, 12136, 1395, 18239,
	2766, -1000, 178, 2713, 173, -1000, 183, -1000, -1000, 270,
	902, -76, 922, -1000, 18544, 1254, -1000, -1000, -1000, 399,
	1254, 760, -1000, -1000, -1000, 760, 569, 632, 1163, -1000,
	-1000, -1000, 630, 581, -1000, 184, -1000, 261, -1000, -90,
	-1000, 1171, -1000, 6546, -1000, -1000, 1254, -1000, -1000, 345,
	165, -1000, -1000, 1170, -113, 18239, -1000, -1000, -1000, 2851,
	9391, -1000, 897, 1135, 181, 922, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1749, 8, 20, 1747, 1742, 1737, 1488, 1484, 1481,
	1479, 1736, 1729, 1728, 1721, 1719, 1718, 1717, 1716, 1714,
	1712, 1711, 1709, 1705, 1703, 1701, 1698, 1697, 553, 1696,
	1695, 1694, 116, 1690, 125, 1689, 1688, 86, 143, 85,
	81, 1700, 1684, 53, 107, 102, 1680, 93, 1679, 1678,
	183, 1673, 106, 1672, 1671, 42, 1670, 1669, 41, 23,
	27, 47, 1667, 1665, 113, 153, 1663, 1662, 1661, 34,
	1660, 1658, 96, 25, 29, 32, 45, 1657, 69, 28,
	1656, 94, 1654, 1651, 1650, 1646, 37, 1642, 95, 43,
	22, 14, 1638, 16, 11, 100, 61, 48, 30, 129,
	99, 1637, 60, 104, 91, 1635, 1634, 829, 1629, 1628,
	1627, 1626, 1625, 1624, 770, 127, 1622, 1617, 1616, 83,
	0, 353, 4, 108, 1611, 78, 1610, 2068, 123, 101,
	49, 1607, 65, 331, 79, 1603, 1601, 71, 120, 98,
	119, 118, 1599, 114, 1598, 1597, 1596, 810, 66, 185,
	90, 1592, 1591, 1590, 89, 103, 51, 92, 97, 1587,
	1585, 1584, 1583, 52, 1582, 18, 33, 3, 87, 1581,
	1579, 1577, 1576, 59, 44, 1575, 40, 1571, 26, 10,
	6, 21, 13, 1567, 1566, 1564, 5, 1563, 46, 1561,
	12, 1557, 19, 1556, 1555, 1554, 58, 1552, 1551, 1550,
	24, 1549, 1544, 39, 15, 72, 50, 67, 84, 57,
	1533, 54, 17, 2, 1, 1530, 7, 1529, 1527, 1524,
	36, 31, 1523, 1522, 1521, 1519, 1516, 1515, 55, 1510,
	1509, 1849, 1070, 1492, 1491, 1490, 1486, 307,
}

var yyR1 = [...]int{
	0, 229, 230, 230, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 233,
	233, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 217, 217, 216, 218, 218, 12, 12, 12, 12,
	12, 210, 210, 210, 210, 210, 13, 13, 213, 213,
	14, 14, 14, 100, 100, 104, 104, 104, 105, 105,
	105, 105, 135, 135, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 208,
	208, 208, 209, 209, 209, 211, 211, 212, 212, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 215, 215,
	194, 194, 194, 195, 195, 195, 195, 195, 195, 197,
	197, 198, 198, 125, 125, 192, 192, 191, 190, 190,
	189, 189, 188, 199, 199, 20, 170, 171, 171, 171,
	171, 171, 171, 171, 158, 139, 139, 139, 139, 139,
	139, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 205, 205, 205, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 201,
	201, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 148, 148, 148, 148, 148,
	148, 200, 200, 196, 196, 196, 196, 196, 196, 196,
	143, 143, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 142, 142, 142, 142, 142, 142, 142, 142,
	144, 144, 144, 144, 144, 144, 144, 144, 140, 140,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 146, 146, 146, 146, 146, 146, 146,
	146, 157, 157, 147, 147, 155, 155, 156, 156, 156,
	154, 154, 154, 151, 151, 152, 152, 153, 153, 153,
	149, 149, 149, 150, 150, 150, 160, 181, 181, 181,
	183, 183, 184, 184, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 169, 169, 207, 207, 180,
	180, 180, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 168, 168, 178, 178, 179, 179, 176, 176, 176,
	177, 163, 163, 163, 163, 163, 164, 165, 165, 165,
	165, 161, 162, 203, 203, 203, 204, 204, 166, 166,
	167, 167, 172, 172, 172, 173, 173, 173, 174, 174,
	174, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 234, 234, 235, 235, 235,
	235, 235, 235, 235, 187, 185, 185, 186, 186, 17,
	18, 18, 18, 18, 18, 19, 19, 21, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 112, 112, 109, 109, 110, 110, 111, 111, 111,
	113, 113, 113, 136, 136, 136, 23, 23, 25, 25,
	26, 27, 24, 24, 24, 24, 24, 236, 28, 29,
	29, 30, 30, 30, 34, 34, 34, 32, 32, 33,
	33, 39, 39, 38, 38, 40, 40, 40, 40, 124,
	124, 124, 123, 123, 42, 42, 43, 43, 44, 44,
	45, 45, 45, 220, 220, 219, 219, 221, 221, 221,
	221, 221, 221, 57, 57, 93, 93, 93, 96, 96,
	46, 46, 46, 46, 47, 47, 48, 48, 49, 49,
	131, 131, 130, 130, 130, 129, 129, 51, 51, 51,
	53, 52, 52, 52, 52, 54, 54, 56, 56, 55,
	55, 58, 58, 58, 58, 59, 59, 94, 94, 41,
	41, 41, 41, 41, 41, 41, 108, 108, 61, 61,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	71, 71, 71, 71, 71, 71, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 37, 37, 72,
	72, 72, 78, 73, 73, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	69, 69, 69, 69, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 237, 237,
	70, 70, 70, 70, 35, 35, 35, 35, 35, 134,
	134, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 138, 138, 138, 138, 138,
	138, 138, 138, 82, 82, 36, 36, 80, 80, 81,
	83, 83, 79, 79, 79, 222, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 66, 66, 66, 84,
	84, 85, 85, 86, 86, 87, 87, 88, 89, 89,
	89, 90, 90, 90, 90, 91, 91, 91, 63, 63,
	63, 63, 63, 63, 92, 92, 92, 92, 97, 97,
	74, 74, 76, 76, 75, 77, 98, 98, 102, 99,
	99, 103, 103, 103, 103, 103, 101, 101, 101, 126,
	126, 126, 106, 106, 114, 114, 115, 115, 107, 107,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	117, 117, 117, 118, 118, 121, 121, 122, 122, 127,
	127, 128, 128, 223, 223, 223, 224, 224, 224, 225,
	225, 226, 227, 227, 228, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 231, 232, 132, 133, 133, 133,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 14, 13, 15, 13, 14,
	7, 7, 5, 5, 5, 11, 11, 9, 5, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 1, 4,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	2, 0, 3, 0, 1, 0, 2, 1, 0, 2,
	1, 3, 3, 0, 2, 4, 4, 0, 1, 3,
	3, 3, 3, 3, 2, 3, 1, 1, 1, 1,
	1, 2, 2, 3, 2, 4, 4, 2, 2, 3,
	2, 3, 2, 7, 9, 3, 3, 6, 9, 9,
	8, 8, 5, 8, 7, 4, 2, 4, 6, 2,
	1, 1, 2, 1, 1, 1, 3, 3, 1, 1,
	2, 0, 4, 3, 4, 3, 3, 3, 3, 3,
	3, 3, 2, 4, 6, 2, 3, 2, 3, 1,
	3, 0, 2, 0, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 2, 2, 2, 2, 1, 1,
	1, 3, 3, 2, 1, 2, 1, 1, 1, 1,
	4, 4, 4, 4, 4, 1, 5, 2, 2, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 3, 0, 5, 0, 3, 5,
	0, 3, 3, 0, 1, 0, 1, 0, 2, 1,
	0, 3, 3, 0, 1, 2, 6, 0, 1, 4,
	1, 2, 1, 3, 2, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 1, 1, 0,
	2, 5, 2, 3, 3, 2, 3, 2, 2, 3,
	4, 1, 1, 1, 1, 1, 3, 3, 2, 2,
	1, 2, 5, 5, 8, 8, 13, 1, 1, 2,
	2, 10, 7, 0, 1, 1, 0, 3, 0, 1,
	1, 3, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 11, 13, 13, 7, 7, 7, 12, 7,
	7, 7, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 3, 3, 3, 3,
	4, 3, 6, 4, 2, 4, 2, 2, 2, 2,
	3, 1, 1, 0, 1, 0, 1, 0, 2, 2,
	0, 2, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 0, 4, 1, 3, 1, 1, 1,
	1, 1, 1, 4, 8, 1, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 0, 4, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 3, 3, 1, 1, 1, 1, 2,
	4, 5, 6, 4, 4, 4, 6, 6, 6, 6,
	8, 8, 6, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 1, 2,
	1, 2, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 3, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 5, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 2, 0, 2, 2, 0,
	1, 4, 1, 3, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -229, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	117, 118, 120, 119, 150, 121, 143, 49, 197, 198,
	200, 201, 26, 144, 145, 148, 149, -231, 8, 304,
	53, -230, 346, -86, 15, -30, 5, -28, -236, -28,
	-28, -28, -28, -28, -170, 53, -125, -199, 126, 159,
	296, 123, 139, 157, 158, 124, 141, 71, -107, 127,
	129, 124, 124, 125, 127, 296, 123, 124, -55, -127,
	56, -120, 166, 313, 21, 197, 210, 211, 202, 243,
	231, 314, 164, 228, 232, 282, 345, 65, 200, 291,
	133, 170, 146, 223, 226, 225, 217, 214, 28, 249,
	320, 216, 136, 250, 254, 261, 283, 311, 207, 208,
	285, 247, 32, 138, 315, 34, 154, 286, 252, 246,
	241, 126, 245, 206, 240, 38, 220, 256, 255, 257,
	281, 234, 165, 260, 236, 218, 235, 18, 149, 152,
	251, 253, 215, 167, 131, 156, 319, 287, 213, 153,
	168, 148, 290, 336, 163, 201, 284, 209, 293, 37,
	267, 227, 204, 219, 205, 135, 198, 161, 238, 155,
	221, 222, 244, 203, 239, 199, 157, 150, 292, 268,
	321, 237, 233, 229, 230, 162, 127, 159, 160, 274,
	275, 276, 277, 317, 288, 224, 269, 270, 172, 173,
	174, 175, 176, 177, 178, 124, 111, 232, 117, 272,
	125, 32, 156, -136, 124, -109, 160, 274, 275, 276,
	277, 56, 284, 283, 278, -127, 199, -132, -132, -132,
	-132, -132, -2, -90, 17, 16, -5, -3, -231, 6,
	21, 22, -34, 39, 40, -29, -40, 102, -41, -127,
	-60, 73, -65, 29, 56, -120, 24, -64, -61, -79,
	-222, -77, -78, 111, 112, 100, 101, 108, 74, 113,
	-69, -67, -68, -70, -225, 58, -121, 57, 66, 59,
	60, 61, 62, 67, 68, 69, 294, -75, -231, 43,
	44, 305, 306, 307, 308, 312, 309, 76, 33, 295,
	303, 302, 301, 299, 300, 297, 298, 344, 130, 296,
	106, 304, 258, -107, -43, -44, -45, -46, -57, -78,
	-231, -55, 11, -50, -55, -99, -135, 199, -103, 284,
	283, -122, 294, -101, -121, -119, 282, 232, 281, 56,
	-120, 122, 180, 325, 72, 23, 25, 265, 271, 179,
	75, 111, 16, 76, 186, 334, 335, 110, 305, 117,
	47, 297, 298, 295, 184, 307, 308, 296, 272, 191,
	20, 29, 10, 26, 144, 22, 104, 119, 181, 79,
	80, 147, 24, 145, 69, 187, 189, 19, 50, 137,
	11, 324, 13, 14, 338, 326, 130, 129, 91, 337,
	125, 45, 8, 113, 27, 88, 41, 142, 190, 43,
	89, 17, 299, 300, 31, 312, 151, 106, 48, 35,
	339, 73, 340, 67, 51, 289, 185, 71, 15, 46,
	341, 139, 188, 90, 120, 304, 44, 182, 342, 123,
	183, 6, 310, 30, 143, 42, 124, 273, 78, 128,
	68, 158, 5, 141, 9, 49, 52, 301, 302, 303,
	33, 77, 12, 140, 316, 70, -171, -158, 56, -203,
	334, 335, 127, 127, -121, -115, 130, -115, -121, -121,
	-55, -115, 304, 124, -55, -55, -114, 130, 56, -114,
	-114, -114, -55, 114, -55, 56, 30, 296, 56, 156,
	124, 157, 127, -133, -231, -122, -133, -133, -133, 161,
	162, -133, -110, 279, 51, -133, -232, 55, -91, 19,
	31, -41, -127, -87, -88, -41, -86, -2, -28, 35,
	-32, 22, 64, 11, -124, 72, 71, 88, -123, 23,
	-121, 58, 114, -41, -62, 91, 73, 89, 90, 75,
	97, 96, 107, 100, 101, 102, 103, 104, 105, 106,
	98, 99, 110, 344, 81, 82, 83, 84, 85, 86,
	87, 92, 93, 94, 95, -108, -231, -78, -231, 115,
	116, -65, -65, -65, -65, -65, -65, -65, -226, 259,
	-196, 344, -231, 58, 114, -2, -73, -41, -231, -231,
	-231, -231, -231, -231, -231, -231, -231, -82, -41, -231,
	-237, -231, -237, -237, -237, -237, -237, -237, -237, -138,
	111, 232, 146, 223, -141, -140, 238, 237, 202, 203,
	204, 205, 206, 207, 208, 209, 210, 211, 231, 314,
	-231, -231, -231, -231, -56, 27, -55, 30, 54, -51,
	-53, -52, -54, 41, 45, 47, 42, 43, 44, 48,
	-131, 23, -43, -231, -130, 152, -129, 23, -127, 58,
	-55, -50, -233, 54, 11, 52, 54, -99, 199, -100,
	-104, 285, 287, 81, 114, -126, -121, 58, 29, 30,
	55, 54, -159, -139, -143, -140, -145, -144, -146, -121,
	-141, -142, 231, 314, 228, 232, 229, 234, 235, 236,
	111, 233, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 237, 249, 30, 146, 221, 222, 223,
	226, 225, 227, 224, 250, 251, 252, 253, 254, 255,
	256, 257, 202, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 213, 214, 216, 217, 218, 220, 219, 125,
	-115, -115, -192, 52, 56, 73, 56, 51, -208, 51,
	19, 179, 180, 23, -55, -55, 289, -133, 128, -55,
	24, 51, -55, 56, 56, -128, -127, -119, -133, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, -112, 273,
	280, -55, 9, 91, 54, 18, 114, 54, -89, 25,
	26, -90, -232, -34, -66, -121, 59, 62, -33, 42,
	-55, -41, -41, -71, 67, 73, 68, 69, -123, 102,
	-128, -122, -119, -65, -72, -75, -78, 63, 91, 89,
	90, 75, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -134, 56, 58,
	-143, -138, -141, 213, 214, 216, 217, 218, 220, 219,
	56, -64, -121, -64, -121, 347, 232, 222, 262, 238,
	247, 248, -39, 22, -73, -38, -41, -40, -122, -232,
	54, -232, -2, -38, -38, -41, -41, -79, -65, -79,
	-121, -127, -38, -32, -80, -81, 77, -79, -232, 230,
	-38, -39, -38, -38, -95, 152, -55, -98, -102, -79,
	-44, -45, -45, -44, -45, 41, 41, 41, 46, 41,
	46, 41, -52, -127, -232, -58, 49, 129, 50, -231,
	-129, -95, 52, -43, -55, -103, -100, 54, 286, 288,
	289, 51, 70, -41, -122, -150, 111, 110, -172, -173,
	-174, -122, 58, 59, -158, -160, -163, -161, -162, -175,
	-164, 133, 131, 135, 136, 141, -168, 125, 142, 67,
	73, -205, 133, 51, 265, 271, 131, 142, 141, 345,
	65, 134, 324, 326, 29, -153, 347, 259, -151, 268,
	-147, 53, -147, -147, 230, -147, -147, -147, -147, -147,
	-149, 232, -149, -149, -149, -149, 53, 53, -147, -147,
	-147, -147, -155, 53, 215, -155, -155, -156, 53, -156,
	-121, 51, 196, -55, -55, -190, 316, -191, 56, -133,
	24, -133, -55, -211, -209, 8, 9, 10, -55, -139,
	-116, 122, 119, 120, -187, 118, 265, 232, 65, 29,
	15, 305, 152, 321, 56, 153, -55, -55, -55, -133,
	-111, 11, 91, 37, -41, -41, -128, -88, -91, -106,
	19, 11, 33, 33, -38, 67, 68, 69, 114, -231,
	-72, -65, -65, -65, -37, 147, 72, -232, -227, -228,
	58, 230, -154, 316, 317, -232, -38, -232, 54, -41,
	-232, -232, -232, 54, 52, 23, 54, 11, 54, 54,
	11, 114, -232, -38, -83, -81, 79, -41, -232, -232,
	-232, -232, -232, -63, 30, 33, -2, -231, -231, -59,
	54, 12, 81, -48, -47, 51, 52, -49, 51, -47,
	41, 41, -220, 316, 125, 125, 125, -96, -121, -59,
	-43, -59, -104, -105, 290, 287, 293, 81, 56, 54,
	-174, 81, 53, -204, 51, 73, -166, -121, 142, -168,
	-168, 56, -168, 56, 125, 56, 67, 19, -121, 9,
	142, 142, -204, 58, -55, -201, 325, 16, 53, -206,
	53, 58, 59, 60, 67, -148, 66, -61, 260, -69,
	295, 298, 297, 261, -121, -127, 348, -152, 269, 59,
	-149, -149, -147, -149, -149, -149, -150, 30, -150, -150,
	-150, -150, -157, 58, -157, -154, -154, 59, -155, 59,
	51, 52, -55, -121, 23, 23, -189, -188, -122, -194,
	23, 51, 54, -208, -132, -125, 133, -235, 159, 132,
	137, 136, 56, 131, 135, 152, -193, 159, 132, 133,
	137, 136, 56, 125, 142, 131, 135, 152, 141, -117,
	-118, 128, 23, 125, 142, 152, 122, -133, -113, 89,
	12, -127, -127, 38, 114, -55, -42, 11, 102, -122,
	-39, -37, 72, -65, -65, 348, 54, -196, 221, 221,
	-232, -40, -137, 111, 228, 146, 223, 217, 247, 248,
	234, 267, 221, 268, -134, -137, -65, -65, -65, -65,
	-65, -122, 313, -86, 80, -41, 78, -97, 51, -98,
	-74, -76, -75, -231, -2, -92, -121, -96, -86, -102,
	-41, -41, -41, 53, -41, 53, -231, -231, -231, -232,
	54, -86, -59, 287, 291, 292, -41, -173, -174, -179,
	-176, -121, 142, 10, 9, 19, 137, 131, 345, 56,
	56, 56, -203, 141, 336, -205, 345, -148, 261, -231,
	53, 23, 29, 59, -206, 53, -196, 344, -196, -231,
	-147, 53, -147, 53, 53, 114, 55, -150, -150, -149,
	-150, -150, -150, 56, 111, 55, 54, 55, 54, 55,
	54, -55, -121, 53, 51, -2, -2, 54, 81, -195,
	19, 167, 168, -55, -209, -211, -234, 125, 142, -121,
	-132, -121, -132, -121, -55, -132, -121, 133, -163, 58,
	-41, -59, -43, -232, -65, -228, 270, 270, -232, -147,
	-147, -147, -156, -147, 208, -147, 208, -232, -232, -232,
	19, 54, -232, 54, 19, -231, -36, 310, -41, 28,
	-97, 54, -232, -232, -232, 54, 114, -232, -90, -93,
	-121, 142, -219, -221, 338, 339, 340, 341, 342, 343,
	-93, -93, -93, -130, -121, -90, 55, 54, -147, -177,
	263, -147, -165, 163, 164, 30, 165, -165, 336, 142,
	142, -231, -203, -204, -41, -93, 53, 326, 54, 55,
	-206, -121, 232, 222, 238, 247, -232, 55, 55, 55,
	-122, -150, -149, 58, -149, 59, 59, 53, 52, 51,
	-178, -179, -69, -121, -55, -188, -174, 128, 21, 6,
	8, 9, 10, 19, 23, -121, 141, 53, 27, -121,
	-84, 13, -149, 56, -65, -65, -65, -65, -65, -232,
	58, 142, -76, 33, -2, -231, -121, -121, 54, 55,
	55, 54, -232, -232, -232, -58, -181, -183, 316, -182,
	52, 138, 65, 172, 173, 174, 175, 176, 177, 178,
	-176, -89, -204, 51, 67, 166, -204, 51, -166, -121,
	-203, -41, -231, -232, 55, -41, 53, 59, 55, -150,
	-150, 55, 55, -178, -121, -55, 55, 53, 53, -167,
	-121, 181, -212, -214, -7, -9, -8, -11, -10, -12,
	-13, -14, -3, 20, 185, 186, 191, 187, 140, 130,
	53, 53, -93, -231, 131, -85, 14, 16, -232, -232,
	-232, -232, -35, 91, 316, 9, -74, -2, 114, -121,
	-221, -220, -180, 51, -182, 316, 53, 318, 56, -169,
	81, 58, 81, 81, 81, 81, 81, 81, 81, 9,
	10, 53, 53, -232, -41, -200, 165, 51, 55, -202,
	55, 55, 55, 53, 53, -94, 337, -178, -197, 54,
	52, 182, -214, -86, -217, -121, -216, -121, -121, -121,
	-210, 35, 188, 189, 190, -60, -65, -41, -60, -179,
	-179, 55, -185, -186, 152, 142, -41, -73, -232, 314,
	48, 319, -98, -232, -121, -121, -184, -182, -121, 59,
	-207, 51, 70, 59, -207, -207, -207, -207, -207, -165,
	-165, -167, -179, -200, -232, 311, 10, 9, 322, 323,
	55, 198, 328, 329, 151, 330, 165, 331, 332, -94,
	-178, -179, -59, 53, 55, -198, 316, -121, -41, -215,
	-214, 197, -90, 54, -218, -139, 183, -121, 11, 11,
	11, 11, -214, 197, 78, 197, 55, 55, -192, -232,
	54, -121, 53, 38, 315, 320, -231, 55, 54, -204,
	-204, 55, 55, -200, -165, -165, 316, 59, 16, 59,
	59, 59, 59, 329, 151, 331, 16, -59, 55, 55,
	-181, -93, -94, 345, -214, -91, -216, -121, 184, 27,
	-213, -214, -212, -213, -223, 192, 73, -190, -186, 33,
	-179, 38, -121, -182, 134, -181, 59, 59, 333, -127,
	-181, -59, -181, -180, 55, -59, -41, 346, 19, -121,
	80, -214, 346, 80, -224, 193, 192, 154, 55, 316,
	-232, -55, -180, 114, -180, -181, -181, 80, -2, 80,
	79, 195, 194, 155, 319, 53, -122, -180, 130, 197,
	-231, 320, -167, -213, -65, 151, 55, 80, -232, -232,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 753, 0, 487, 487, 487, 487, 487, 487, 0,
	-2, 808, 0, 0, 0, 0, -2, 477, 478, 0,
	480, 481, 1105, 1105, 1105, 1105, 1105, 0, 33, 34,
	1103, 1, 3, 761, 0, 0, 491, 494, 489, 839,
	808, 0, 0, 0, 84, 147, 373, 0, 0, 0,
	806, 806, 0, 0, 0, 806, 134, 0, 0, 0,
	809, 0, 804, 0, 804, 804, 804, 0, 436, 569,
	829, 830, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
	1098, 1099, 1100, 1101, 1102, 0, 0, 0, 0, 1106,
	1106, 1106, 1106, 0, 1106, 465, 454, 456, 457, 458,
	459, 1106, 474, 475, 464, 476, 479, 482, 483, 484,
	485, 486, 27, 765, 839, 839, 753, 29, 0, 487,
	492, 493, 497, 495, 496, 488, 0, 505, 509, 0,
	579, 839, 584, 586, -2, -2, 0, 625, 626, 627,
	628, 629, 630, 839, 839, 839, 839, 839, 839, 839,
	655, 656, 657, 658, 0, 223, 732, 739, 740, 741,
	742, 743, 744, 745, 588, 589, 0, 785, 839, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 0, 688,
	688, 688, 688, 688, 688, 688, 688, 0, 0, 0,
	0, 0, 840, 0, 0, 516, 518, 519, 520, 550,
	0, 552, 0, 0, 41, 45, 0, 1073, 789, -2,
	-2, 0, 0, 0, 827, 828, -2, 982, -2, 825,
	826, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 0, 148, 0, 0,
	374, 375, 806, 806, 135, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 1106, 0, 0, 0, 0, 0,
	0, 0, 435, 0, 437, 1106, 1106, 1106, 1106, 1106,
	1106, 1106, 1106, 446, 1107, 1108, 447, 448, 449, 1106,
	1106, 451, 0, 466, 0, 460, 28, 1104, 22, 0,
	0, 762, 0, 754, 755, 758, 761, 27, 494, 0,
	499, 498, 490, 0, 506, 839, 839, 0, 510, 0,
	512, 513, 0, 582, 839, 0, 0, 839, 839, 839,
	839, 839, 839, 839, 839, 839, 839, 839, 839, 839,
	839, 839, 0, 0, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 585, 0, 599, 0, 0,
	0, 647, 648, 649, 650, 651, 652, 0, 659, 0,
	737, 0, -2, 738, 0, 27, 0, 623, 839, 839,
	839, 839, 839, 839, 0, 839, 497, 0, 724, 0,
	679, 0, 680, 681, 682, 683, 684, 685, 686, 687,
	715, 0, 717, 718, 719, 720, 721, 722, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 258, 259,
	839, -2, 839, 839, 43, 0, 568, 0, 0, 0,
	0, 0, 0, 557, 0, 0, 560, 0, 0, 0,
	0, 551, 0, 0, 571, 1037, 553, 0, 555, 556,
	-2, 0, 0, 0, 39, 40, 0, 46, 1073, 48,
	73, 0, 0, 839, 0, 313, 799, 800, 801, 797,
	382, 0, 154, 307, 303, 156, 157, 158, 159, 160,
	293, 231, 258, 259, 293, 293, 293, 293, 293, 265,
	293, 293, 310, 310, 310, 310, 310, 274, 275, 276,
	277, 278, 279, 280, 997, 0, 250, 293, 293, 293,
	254, 293, 256, 257, 283, 284, 285, 286, 287, 288,
	289, 290, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 295, 295, 295, 297, 297, 248, 249, 0,
	0, 0, 138, 0, 1106, 0, 1106, 0, 0, 0,
	99, 100, 101, 0, 145, 0, 0, 402, 0, 430,
	805, 0, 1106, 433, 434, 570, 831, 832, 438, 439,
	440, 441, 442, 443, 444, 445, 450, 453, 467, 461,
	462, 455, 766, 0, 839, 839, 0, 839, 757, 759,
	760, 765, 30, 497, 0, 746, 0, 0, 839, 500,
	25, 580, 581, 583, 600, 0, 602, 604, 511, 507,
	0, 733, -2, 590, 591, 619, 620, 621, 0, 839,
	839, 839, 617, 595, 0, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 645, 699, 700,
	646, 654, 293, 295, 295, 295, 297, 297, 248, 249,
	0, 643, 0, 644, 653, 0, 0, 300, 226, 227,
	228, 229, 0, 839, 0, 502, 509, 503, 735, 622,
	839, 784, 27, 0, 0, 0, 0, 627, 0, 0,
	732, 0, 0, 839, 730, 727, 839, 0, 689, 716,
	0, 0, 0, 0, 0, 0, 567, 575, 786, 0,
	517, 546, 548, 0, 543, 558, 559, 561, 0, 563,
	0, 565, 566, 521, 522, 523, 0, 0, 0, 0,
	554, 575, 0, 575, 42, 790, 47, 0, 0, 76,
	77, 791, 792, 793, 0, 795, 314, 0, 146, 383,
	385, 388, 389, 390, 149, 150, 151, 152, 153, 0,
	376, 378, 0, 0, 0, 0, 0, 351, 352, 162,
	0, 164, 0, 0, 167, 168, 0, 170, 172, 376,
	0, 0, 0, 0, 0, 161, 0, 309, 305, 304,
	230, 0, 310, 310, 293, 310, 310, 310, 267, 268,
	313, 0, 313, 313, 313, 313, 0, 0, 300, 300,
	253, 255, 242, 0, 295, 244, 245, 246, 0, 247,
	0, 0, 0, 0, 0, 92, 0, 136, 137, 93,
	807, 94, 120, 0, 105, 102, 103, 104, 0, 98,
	1105, 133, 0, 820, 403, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 0, 0, 429, 1106, 432,
	470, 0, 0, 0, 763, 764, 0, 756, 23, 0,
	802, 803, 747, 748, 514, 601, 603, 605, 0, -2,
	592, 617, 596, 0, 593, 839, 839, 587, 0, 842,
	223, 224, 225, 0, 0, 660, 0, 663, 839, 624,
	-2, 664, 665, 0, 0, 0, 839, 839, 839, 839,
	839, 0, 0, 753, 0, 728, 839, 0, 678, 690,
	691, 692, 693, 778, 0, 0, -2, 0, 0, 753,
	0, 839, 839, 540, 547, 839, 0, 541, 839, 542,
	562, 564, 533, 0, 0, 0, 0, 0, 538, 753,
	575, 38, 74, 75, 0, 0, 81, 839, 315, 0,
	386, 0, 0, 361, 0, 0, 0, 379, 342, 0,
	0, 345, 0, 347, -2, 373, 163, 0, 0, 0,
	169, 171, 0, 175, 176, 0, 199, 0, 0, 186,
	0, 223, 190, 191, 223, 193, 194, 195, 1031, 198,
	293, 293, 219, 1003, 0, 0, 308, 155, 306, 0,
	313, 313, 310, 313, 313, 313, 269, 0, 270, 271,
	272, 273, 0, 291, 0, 251, 252, 0, 243, 0,
	0, 0, 0, 0, 0, 0, 139, 140, 0, 123,
	0, 0, 0, 0, 391, 0, 0, 1105, 0, 417,
	418, 419, 420, 421, 422, 423, 1105, 0, 404, 405,
	406, 407, 408, 409, 410, 411, 412, 413, 414, 0,
	1105, 821, 822, 823, 824, 0, 0, 431, 452, 0,
	839, 468, 469, 767, 0, 24, 575, 0, 508, 734,
	0, 594, 839, 618, 597, 841, 0, 844, 0, 0,
	661, 504, 0, 293, 293, 704, 293, 297, 707, 708,
	293, 710, 293, 713, 0, 0, 0, 0, 0, 0,
	0, 733, 0, 725, 677, 731, 839, 31, 0, 778,
	768, 780, 782, 839, 27, 0, 774, 0, 761, 787,
	576, 788, 544, 0, 549, 0, 0, 0, 0, 552,
	0, 761, 37, 78, 79, 80, 794, 384, 387, 0,
	355, 293, 293, 0, 0, 0, 0, 0, 0, 343,
	344, 346, 349, 373, 185, 165, 376, 166, 0, 839,
	0, 0, 200, 0, 0, 0, 189, 0, 192, 0,
	215, 0, 217, 0, 0, 0, 294, 260, 261, 313,
	262, 263, 264, 311, 312, 310, 0, 310, 0, 298,
	0, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	0, 121, 122, 0, 106, 0, 0, 415, 416, 0,
	396, 0, 397, 399, 400, 401, 0, 378, 395, 471,
	472, 749, 515, 662, 598, 843, 301, 302, 666, 701,
	310, 705, 706, 709, 711, 712, 714, 668, 667, 669,
	839, 839, 672, 839, 839, 839, 0, 0, 729, 0,
	32, 0, 783, -2, 0, 0, 0, 44, 35, 0,
	535, 536, 0, 525, 527, 528, 529, 530, 531, 532,
	0, 0, 0, 571, 539, 36, 317, 0, 758, 359,
	360, 358, 376, 367, 368, 0, 0, 376, 377, 378,
	373, 839, 350, 0, 0, 0, 839, 182, 0, 187,
	0, 197, 982, 300, 227, 228, 196, 216, 218, 220,
	0, 266, 313, 292, 313, 0, 0, 0, 0, 0,
	0, 353, 354, 293, 0, 141, 142, 0, 124, 125,
	126, 127, 128, 0, 0, 0, 0, 0, 0, 379,
	751, 0, 702, 703, 0, 0, 0, 0, 694, 676,
	726, 0, 781, 0, -2, 0, 776, 775, 0, 545,
	524, 0, 572, 573, 574, 523, 339, 318, 0, 320,
	0, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	356, 357, 362, 0, 369, 370, 363, 0, 0, 379,
	0, 0, 839, 221, 177, 0, 201, 0, 0, 281,
	282, 296, 299, 0, 0, 0, 577, 1103, 0, 129,
	380, 0, 97, 107, 109, 110, 111, 112, 113, 114,
	115, 116, 753, 0, 0, 0, 0, 61, 839, 839,
	0, 0, 0, 0, 0, 26, 839, 839, 671, 670,
	673, 674, 0, 0, 0, 0, 771, 27, 0, 537,
	526, 534, 316, 0, 321, 0, 0, 0, 324, 0,
	336, 326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 0, 173, 0, 0, 0, 0,
	184, 188, 577, 0, 0, 575, 0, 0, 131, 0,
	839, 0, 108, 761, 49, 54, 51, 56, 57, 58,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 0,
	0, 135, 0, 425, 0, 0, 752, 750, 675, 0,
	0, 0, 779, -2, 777, 340, 0, 322, 327, 325,
	328, 337, 338, 329, 330, 331, 332, 333, 334, 376,
	376, 0, 0, 372, 221, 222, 0, 0, 180, 181,
	183, 0, 0, 0, 0, 0, 0, 212, 0, 575,
	0, 0, 317, 0, 577, 95, 0, 381, 130, 96,
	118, 0, 765, 0, 0, 53, 55, 59, 62, 63,
	64, 65, 66, 0, 0, 0, 392, 833, 138, 424,
	0, 0, 0, 695, 0, 698, 0, 319, 0, 364,
	365, 0, 317, 174, 178, 179, 0, 203, 0, 205,
	206, 207, 208, 209, 210, 211, 0, 317, 575, 317,
	339, 0, 575, 839, 0, 117, 52, 0, 0, 0,
	0, 68, 0, 0, 836, 834, 0, 398, 426, 0,
	0, 696, 0, 323, 0, 339, 202, 204, 213, 0,
	339, 317, 88, 86, 578, 317, 132, 0, 0, 60,
	67, 69, 0, 71, 394, 0, 835, 0, 393, 0,
	341, 0, 371, 0, 85, 89, 339, 119, -2, 0,
	0, 837, 838, 0, 0, 0, 214, 87, 70, 0,
	839, 697, 0, 0, 0, 0, 366, 72, 427, 428,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 105, 97, 3,
	53, 55, 102, 100, 54, 101, 114, 103, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 346,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 347, 3, 348, 107, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 96, 3, 108,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 98, 99, 104,
	106, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:383
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:388
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:389
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:393
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:416
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:424
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:428
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:434
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:441
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:447
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:451
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:457
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:461
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:468
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:480
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:492
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:496
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:502
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:508
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:512
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:516
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:521
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:522
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:526
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:530
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:535
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:539
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:545
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:549
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:553
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:557
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:563
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:567
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:580
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:584
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:590
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:595
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:599
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:605
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:612
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:619
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:626
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:634
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:644
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:648
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:652
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:656
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:660
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:666
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:673
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:683
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:687
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:694
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:703
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:711
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:722
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:726
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:732
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:736
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:740
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:746
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:750
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:754
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:758
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:764
		{
			yyVAL.str = SessionStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:768
		{
			yyVAL.str = GlobalStr
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:774
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 85:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:779
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 86:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:799
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 87:
		yyDollar = yyS[yypt-15 : yypt+1]
//line parser.y:819
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[6].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[12].columns,
					Where:     NewWhere(WhereStr, yyDollar[13].expr),
					Options:   yyDollar[14].indexOptions,
					Partition: yyDollar[15].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 88:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:840
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 89:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:856
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[11].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:872
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 91:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:880
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:888
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:896
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:900
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:904
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 96:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:916
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 97:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:927
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:938
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:950
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:954
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:958
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:964
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:968
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:972
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:978
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:982
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:988
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:992
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:998
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1009
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1021
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1028
		{
			yyVAL.bytes = nil
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1032
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1036
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1041
		{
			yyVAL.bytes = nil
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1045
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1049
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1053
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1057
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1061
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1066
		{
			yyVAL.expr = nil
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1070
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1075
		{
			yyVAL.expr = nil
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1079
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1084
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1088
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1093
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1097
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1103
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1108
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1113
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1119
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1124
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1130
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1135
		{
			yyVAL.bytes = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1139
		{
			yyVAL.bytes = nil
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1145
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1152
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1158
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1162
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1167
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1171
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1175
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1179
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1183
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1189
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1195
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1206
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1212
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1224
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1229
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1234
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1239
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1244
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1249
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1254
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1259
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1264
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1269
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1274
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1279
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1288
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1298
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1303
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1308
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1315
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1322
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1330
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1335
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1341
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1347
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1353
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1359
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1366
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1370
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 188:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1374
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1380
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1384
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1388
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1392
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1396
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1400
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1404
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1408
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1412
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1416
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1422
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1426
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1431
		{
			yyVAL.sequence = &Sequence{}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1435
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1440
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1445
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1450
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1455
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1460
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1465
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1470
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1475
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1480
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1485
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1490
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 214:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1495
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1502
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1506
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1510
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1514
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1518
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1522
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1527
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1531
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1536
		{
			yyVAL.bytes = nil
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1548
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1553
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1559
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1563
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1571
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1575
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1579
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1583
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1601
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1647
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1651
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1659
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1681
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1685
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1695
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1699
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1703
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1707
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1711
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1719
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1723
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1731
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1820
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1825
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1830
		{
			yyVAL.optVal = nil
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1834
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1839
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1843
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1851
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1855
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1861
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1869
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1873
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1877
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1882
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1886
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1891
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1895
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1900
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1904
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1908
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1913
		{
			yyVAL.str = ""
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1917
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1921
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1926
		{
			yyVAL.str = ""
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1930
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1934
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 316:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1940
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1945
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1949
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1953
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1959
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1963
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1969
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1973
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1979
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1983
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1988
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1992
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1996
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2000
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2004
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2008
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2012
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2016
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2020
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2026
		{
			yyVAL.str = ""
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2030
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2036
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2040
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2046
		{
			yyVAL.indexPartition = nil
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2050
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2054
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2060
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2064
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2068
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2072
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2076
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2080
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2084
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2088
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2092
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2098
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2102
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2108
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2113
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2119
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2123
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2129
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2134
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2138
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2148
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 362:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2153
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 363:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2160
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 364:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2167
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 365:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2174
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 366:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2183
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(String(yyDollar[10].tableName)),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2195
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2199
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2203
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2207
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 371:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2213
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 372:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2224
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2234
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2238
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2242
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2248
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2252
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2257
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2264
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2268
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2273
		{
			yyVAL.str = ""
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2277
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2281
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2289
		{
			yyVAL.str = yyDollar[1].str
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2293
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2297
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2303
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2307
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2311
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 391:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2317
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 392:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2321
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 393:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2335
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 394:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2349
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2368
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 396:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2377
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 397:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2381
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 398:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2385
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 399:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2398
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 400:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2408
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 401:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2413
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2418
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2422
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 424:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2454
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2460
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2464
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 427:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2470
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 428:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2474
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 429:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2480
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2486
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 431:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2494
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 432:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2499
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2507
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2511
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2517
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2521
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2526
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2532
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2536
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2540
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2545
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2549
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2553
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2557
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2561
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2565
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2569
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2573
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2577
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2581
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2585
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2589
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2599
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2603
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2607
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2611
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2615
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2619
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2623
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2633
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2639
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2643
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2649
		{
			yyVAL.str = ""
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2653
		{
			yyVAL.str = "extended "
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2659
		{
			yyVAL.str = ""
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2663
		{
			yyVAL.str = "full "
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2669
		{
			yyVAL.str = ""
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2673
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2677
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2683
		{
			yyVAL.showFilter = nil
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2687
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2691
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2697
		{
			yyVAL.str = ""
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2701
		{
			yyVAL.str = SessionStr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2705
		{
			yyVAL.str = GlobalStr
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2711
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2715
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2721
		{
			yyVAL.statement = &Begin{}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2725
		{
			yyVAL.statement = &Begin{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2731
		{
			yyVAL.statement = &Commit{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2737
		{
			yyVAL.statement = &Rollback{}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2743
		{
			yyVAL.statement = &OtherRead{}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2747
		{
			yyVAL.statement = &OtherRead{}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2751
		{
			yyVAL.statement = &OtherRead{}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2755
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2759
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2764
		{
			setAllowComments(yylex, true)
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2768
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2774
		{
			yyVAL.bytes2 = nil
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2778
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2784
		{
			yyVAL.str = UnionStr
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2788
		{
			yyVAL.str = UnionAllStr
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2792
		{
			yyVAL.str = UnionDistinctStr
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2797
		{
			yyVAL.str = ""
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2801
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2805
		{
			yyVAL.str = SQLCacheStr
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2810
		{
			yyVAL.str = ""
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2814
		{
			yyVAL.str = DistinctStr
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2819
		{
			yyVAL.str = ""
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2823
		{
			yyVAL.str = StraightJoinHint
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2828
		{
			yyVAL.selectExprs = nil
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2832
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2838
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2842
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2848
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2852
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2856
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 508:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2860
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2865
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2869
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2873
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2880
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2885
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2889
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2895
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2899
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2909
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2913
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2917
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2922
		{
			yyVAL.strs = []string{}
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2926
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2932
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2936
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2942
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2946
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2950
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2954
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2958
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2962
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2968
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 534:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2972
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2978
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2983
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2987
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2993
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2997
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3010
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3014
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3018
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3022
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3028
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3030
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3034
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3036
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3040
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3042
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3045
		{
			yyVAL.empty = struct{}{}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3047
		{
			yyVAL.empty = struct{}{}
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3050
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3054
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3058
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3065
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3071
		{
			yyVAL.str = JoinStr
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3075
		{
			yyVAL.str = JoinStr
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3079
		{
			yyVAL.str = JoinStr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3085
		{
			yyVAL.str = StraightJoinStr
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3091
		{
			yyVAL.str = LeftJoinStr
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3095
		{
			yyVAL.str = LeftJoinStr
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3099
		{
			yyVAL.str = RightJoinStr
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3103
		{
			yyVAL.str = RightJoinStr
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3109
		{
			yyVAL.str = NaturalJoinStr
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3113
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3123
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3127
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3133
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3137
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3142
		{
			yyVAL.indexHints = nil
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3146
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3150
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3154
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3159
		{
			yyVAL.expr = nil
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3163
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3168
		{
			yyVAL.columns = nil
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3172
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3178
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3182
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3186
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3190
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3194
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3198
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3202
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3208
		{
			yyVAL.str = ""
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3212
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3218
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3222
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3228
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3232
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3236
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3240
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 594:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3244
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3248
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3252
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 597:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3256
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 598:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3260
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3264
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3270
		{
			yyVAL.str = IsNullStr
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3274
		{
			yyVAL.str = IsNotNullStr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3278
		{
			yyVAL.str = IsTrueStr
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3282
		{
			yyVAL.str = IsNotTrueStr
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3286
		{
			yyVAL.str = IsFalseStr
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3290
		{
			yyVAL.str = IsNotFalseStr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3296
		{
			yyVAL.str = EqualStr
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3300
		{
			yyVAL.str = LessThanStr
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3304
		{
			yyVAL.str = GreaterThanStr
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3308
		{
			yyVAL.str = LessEqualStr
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3312
		{
			yyVAL.str = GreaterEqualStr
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3316
		{
			yyVAL.str = NotEqualStr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3320
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3324
		{
			yyVAL.str = PosixRegexStr
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3328
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3332
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3336
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3341
		{
			yyVAL.expr = nil
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3345
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3351
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3355
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3359
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3365
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3371
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3375
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3381
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3385
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3389
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3393
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3397
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3401
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3405
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3409
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3413
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3417
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3421
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3425
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3429
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3433
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3437
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3441
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3445
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3449
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3453
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3457
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3461
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3465
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3469
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3473
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3477
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3485
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3499
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3503
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3507
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3515
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3523
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3533
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 661:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3537
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 662:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3541
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3545
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3555
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 665:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3559
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 666:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3563
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 667:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3567
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 668:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3571
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 669:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3575
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 670:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3579
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 671:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3583
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 672:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3587
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 673:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3591
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 674:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3595
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 675:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3599
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 676:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3603
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 677:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3607
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3611
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3621
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3625
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3629
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3633
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3638
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3643
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3648
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3653
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3657
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3671
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3675
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3679
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3683
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3689
		{
			yyVAL.str = ""
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3693
		{
			yyVAL.str = BooleanModeStr
		}
	case 696:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3697
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 697:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3701
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3705
		{
			yyVAL.str = QueryExpansionStr
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3711
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3715
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3721
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3725
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3729
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3733
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3737
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3741
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3747
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3751
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3755
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3759
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3763
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3767
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3771
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3775
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3781
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3785
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3789
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3793
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3797
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3801
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3805
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3809
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3814
		{
			yyVAL.expr = nil
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3818
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3823
		{
			yyVAL.str = string("")
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3827
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3833
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3837
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 729:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3843
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3848
		{
			yyVAL.expr = nil
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3852
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3858
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3862
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 734:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3866
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3872
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3878
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3882
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3887
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3892
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3896
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3900
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3904
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3908
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3912
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3916
		{
			yyVAL.expr = &NullVal{}
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3922
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3931
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3935
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 749:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3940
		{
			yyVAL.exprs = nil
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3944
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3949
		{
			yyVAL.expr = nil
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3953
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3958
		{
			yyVAL.orderBy = nil
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3962
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3968
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3972
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3978
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3983
		{
			yyVAL.str = AscScr
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3987
		{
			yyVAL.str = AscScr
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3991
		{
			yyVAL.str = DescScr
		}
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3996
		{
			yyVAL.limit = nil
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4000
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4004
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 764:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4008
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 765:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4013
		{
			yyVAL.str = ""
		}
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4017
		{
			yyVAL.str = ForUpdateStr
		}
	case 767:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4021
		{
			yyVAL.str = ShareModeStr
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4034
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4038
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4042
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 771:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4047
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 772:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4051
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 773:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4055
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4062
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4066
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4070
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 777:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4074
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4079
		{
			yyVAL.updateExprs = nil
		}
	case 779:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4083
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4089
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4093
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4099
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4103
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4109
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4115
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4125
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4129
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4135
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4141
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4145
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4151
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4155
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4159
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 794:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4164
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4168
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4175
		{
			yyVAL.bytes = []byte("charset")
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4182
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4186
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4190
		{
			yyVAL.expr = &Default{}
		}
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4199
		{
			yyVAL.byt = 0
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4201
		{
			yyVAL.byt = 1
		}
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4204
		{
			yyVAL.empty = struct{}{}
		}
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4206
		{
			yyVAL.empty = struct{}{}
		}
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4209
		{
			yyVAL.str = ""
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4211
		{
			yyVAL.str = IgnoreStr
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4215
		{
			yyVAL.empty = struct{}{}
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4217
		{
			yyVAL.empty = struct{}{}
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4219
		{
			yyVAL.empty = struct{}{}
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4221
		{
			yyVAL.empty = struct{}{}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4223
		{
			yyVAL.empty = struct{}{}
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4225
		{
			yyVAL.empty = struct{}{}
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4227
		{
			yyVAL.empty = struct{}{}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4229
		{
			yyVAL.empty = struct{}{}
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4231
		{
			yyVAL.empty = struct{}{}
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4233
		{
			yyVAL.empty = struct{}{}
		}
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4236
		{
			yyVAL.empty = struct{}{}
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4238
		{
			yyVAL.empty = struct{}{}
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4240
		{
			yyVAL.empty = struct{}{}
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4244
		{
			yyVAL.empty = struct{}{}
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4246
		{
			yyVAL.empty = struct{}{}
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4250
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4254
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4261
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4267
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4271
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4278
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4284
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4288
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4292
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4298
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4302
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4306
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 839:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4312
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4316
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 841:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4323
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4330
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4334
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4341
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4625
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4634
		{
			decNesting(yylex)
		}
	case 1105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4639
		{
			forceEOF(yylex)
		}
	case 1106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4644
		{
			forceEOF(yylex)
		}
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4648
		{
			forceEOF(yylex)
		}
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4652
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
