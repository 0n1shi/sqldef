// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const STATUS = 57489
const VARIABLES = 57490
const RESTRICT = 57491
const CASCADE = 57492
const NO = 57493
const ACTION = 57494
const PERMISSIVE = 57495
const RESTRICTIVE = 57496
const PUBLIC = 57497
const CURRENT_USER = 57498
const SESSION_USER = 57499
const PAD_INDEX = 57500
const FILLFACTOR = 57501
const IGNORE_DUP_KEY = 57502
const STATISTICS_NORECOMPUTE = 57503
const STATISTICS_INCREMENTAL = 57504
const ALLOW_ROW_LOCKS = 57505
const ALLOW_PAGE_LOCKS = 57506
const BEFORE = 57507
const AFTER = 57508
const EACH = 57509
const ROW = 57510
const SCROLL = 57511
const CURSOR = 57512
const OPEN = 57513
const CLOSE = 57514
const FETCH = 57515
const PRIOR = 57516
const FIRST = 57517
const LAST = 57518
const DEALLOCATE = 57519
const INSTEAD = 57520
const OF = 57521
const DEFERRABLE = 57522
const INITIALLY = 57523
const IMMEDIATE = 57524
const DEFERRED = 57525
const CONCURRENTLY = 57526
const SQL = 57527
const SECURITY = 57528
const BEGIN = 57529
const START = 57530
const TRANSACTION = 57531
const COMMIT = 57532
const ROLLBACK = 57533
const BIT = 57534
const TINYINT = 57535
const SMALLINT = 57536
const SMALLSERIAL = 57537
const MEDIUMINT = 57538
const INT = 57539
const INTEGER = 57540
const SERIAL = 57541
const BIGINT = 57542
const BIGSERIAL = 57543
const INTNUM = 57544
const REAL = 57545
const DOUBLE = 57546
const PRECISION = 57547
const FLOAT_TYPE = 57548
const DECIMAL = 57549
const NUMERIC = 57550
const SMALLMONEY = 57551
const MONEY = 57552
const TIME = 57553
const TIMESTAMP = 57554
const DATETIME = 57555
const YEAR = 57556
const DATETIMEOFFSET = 57557
const DATETIME2 = 57558
const SMALLDATETIME = 57559
const CHAR = 57560
const VARCHAR = 57561
const VARYING = 57562
const BOOL = 57563
const CHARACTER = 57564
const VARBINARY = 57565
const NCHAR = 57566
const NVARCHAR = 57567
const NTEXT = 57568
const UUID = 57569
const TEXT = 57570
const TINYTEXT = 57571
const MEDIUMTEXT = 57572
const LONGTEXT = 57573
const CITEXT = 57574
const BLOB = 57575
const TINYBLOB = 57576
const MEDIUMBLOB = 57577
const LONGBLOB = 57578
const JSON = 57579
const JSONB = 57580
const ENUM = 57581
const GEOMETRY = 57582
const POINT = 57583
const LINESTRING = 57584
const POLYGON = 57585
const GEOMETRYCOLLECTION = 57586
const MULTIPOINT = 57587
const MULTILINESTRING = 57588
const MULTIPOLYGON = 57589
const VARIADIC = 57590
const ARRAY = 57591
const NOW = 57592
const GETDATE = 57593
const BPCHAR = 57594
const TEXT_PATTERN_OPS = 57595
const NULLX = 57596
const AUTO_INCREMENT = 57597
const APPROXNUM = 57598
const SIGNED = 57599
const UNSIGNED = 57600
const ZEROFILL = 57601
const ZONE = 57602
const AUTOINCREMENT = 57603
const DATABASES = 57604
const TABLES = 57605
const VSCHEMA_TABLES = 57606
const EXTENDED = 57607
const FULL = 57608
const PROCESSLIST = 57609
const NAMES = 57610
const CHARSET = 57611
const GLOBAL = 57612
const SESSION = 57613
const ISOLATION = 57614
const LEVEL = 57615
const READ = 57616
const WRITE = 57617
const ONLY = 57618
const REPEATABLE = 57619
const COMMITTED = 57620
const UNCOMMITTED = 57621
const SERIALIZABLE = 57622
const NEW = 57623
const CONCAT_NULL_YIELDS_NULL = 57624
const CURSOR_CLOSE_ON_COMMIT = 57625
const QUOTED_IDENTIFIER = 57626
const ARITHABORT = 57627
const FMTONLY = 57628
const NOCOUNT = 57629
const NOEXEC = 57630
const NUMERIC_ROUNDABORT = 57631
const ANSI_DEFAULTS = 57632
const ANSI_NULL_DFLT_OFF = 57633
const ANSI_NULL_DFLT_ON = 57634
const ANSI_NULLS = 57635
const ANSI_PADDING = 57636
const ANSI_WARNINGS = 57637
const FORCEPLAN = 57638
const SHOWPLAN_ALL = 57639
const SHOWPLAN_TEXT = 57640
const SHOWPLAN_XML = 57641
const IMPLICIT_TRANSACTIONS = 57642
const REMOTE_PROC_TRANSACTIONS = 57643
const XACT_ABORT = 57644
const CURRENT_TIMESTAMP = 57645
const DATABASE = 57646
const CURRENT_DATE = 57647
const CURRENT_TIME = 57648
const LOCALTIME = 57649
const LOCALTIMESTAMP = 57650
const UTC_DATE = 57651
const UTC_TIME = 57652
const UTC_TIMESTAMP = 57653
const REPLACE = 57654
const CONVERT = 57655
const CAST = 57656
const SUBSTR = 57657
const SUBSTRING = 57658
const GROUP_CONCAT = 57659
const SEPARATOR = 57660
const INHERIT = 57661
const LEAD = 57662
const LAG = 57663
const MATCH = 57664
const AGAINST = 57665
const BOOLEAN = 57666
const LANGUAGE = 57667
const WITH = 57668
const WITHOUT = 57669
const PARSER = 57670
const QUERY = 57671
const EXPANSION = 57672
const UNUSED = 57673
const VIRTUAL = 57674
const STORED = 57675
const GENERATED = 57676
const ALWAYS = 57677
const IDENTITY = 57678
const SEQUENCE = 57679
const INCREMENT = 57680
const MINVALUE = 57681
const CACHE = 57682
const CYCLE = 57683
const OWNED = 57684
const NONE = 57685
const CLUSTERED = 57686
const NONCLUSTERED = 57687
const REPLICATION = 57688
const COLUMNSTORE = 57689
const INCLUDE = 57690
const HOLDLOCK = 57691
const NOLOCK = 57692
const NOWAIT = 57693
const PAGLOCK = 57694
const ROWLOCK = 57695
const TABLELOCK = 57696
const DEFINER = 57697
const INVOKER = 57698
const TYPECAST = 57699
const CHECK = 57700
const OVER = 57701

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	130, 383,
	-2, 136,
	-1, 203,
	116, 984,
	249, 984,
	255, 984,
	-2, 262,
	-1, 204,
	116, 985,
	249, 985,
	255, 985,
	-2, 263,
	-1, 205,
	249, 987,
	255, 987,
	-2, 297,
	-1, 206,
	249, 988,
	255, 988,
	-2, 297,
	-1, 207,
	249, 1089,
	255, 1089,
	-2, 304,
	-1, 208,
	249, 1035,
	255, 1035,
	-2, 297,
	-1, 209,
	249, 1040,
	255, 1040,
	-2, 304,
	-1, 210,
	116, 1038,
	249, 1038,
	255, 1038,
	-2, 269,
	-1, 212,
	116, 1088,
	249, 1088,
	255, 1088,
	-2, 304,
	-1, 213,
	249, 1074,
	255, 1074,
	-2, 317,
	-1, 214,
	249, 1080,
	255, 1080,
	-2, 317,
	-1, 215,
	249, 1028,
	255, 1028,
	-2, 317,
	-1, 216,
	249, 1024,
	255, 1024,
	-2, 317,
	-1, 218,
	116, 983,
	249, 983,
	255, 983,
	-2, 278,
	-1, 219,
	116, 1078,
	249, 1078,
	255, 1078,
	-2, 279,
	-1, 220,
	116, 1026,
	249, 1026,
	255, 1026,
	-2, 280,
	-1, 221,
	116, 1023,
	249, 1023,
	255, 1023,
	-2, 281,
	-1, 222,
	116, 1015,
	249, 1015,
	255, 1015,
	-2, 282,
	-1, 224,
	116, 1087,
	249, 1087,
	255, 1087,
	-2, 284,
	-1, 227,
	116, 996,
	249, 996,
	255, 996,
	-2, 254,
	-1, 228,
	116, 1076,
	249, 1076,
	255, 1076,
	-2, 297,
	-1, 229,
	116, 1077,
	249, 1077,
	255, 1077,
	-2, 297,
	-1, 230,
	116, 997,
	249, 997,
	255, 997,
	-2, 297,
	-1, 231,
	116, 998,
	249, 998,
	255, 998,
	-2, 297,
	-1, 232,
	116, 999,
	249, 999,
	255, 999,
	-2, 297,
	-1, 233,
	116, 1067,
	249, 1067,
	255, 1067,
	-2, 260,
	-1, 234,
	116, 1096,
	249, 1096,
	255, 1096,
	-2, 261,
	-1, 235,
	116, 1007,
	249, 1007,
	255, 1007,
	-2, 287,
	-1, 236,
	116, 1044,
	249, 1044,
	255, 1044,
	-2, 288,
	-1, 237,
	116, 1022,
	249, 1022,
	255, 1022,
	-2, 289,
	-1, 238,
	116, 1045,
	249, 1045,
	255, 1045,
	-2, 290,
	-1, 239,
	116, 1008,
	249, 1008,
	255, 1008,
	-2, 291,
	-1, 240,
	116, 1032,
	249, 1032,
	255, 1032,
	-2, 292,
	-1, 241,
	116, 1031,
	249, 1031,
	255, 1031,
	-2, 293,
	-1, 242,
	116, 1033,
	249, 1033,
	255, 1033,
	-2, 294,
	-1, 243,
	116, 982,
	249, 982,
	255, 982,
	-2, 236,
	-1, 244,
	116, 1079,
	249, 1079,
	255, 1079,
	-2, 237,
	-1, 245,
	116, 1068,
	249, 1068,
	255, 1068,
	-2, 238,
	-1, 246,
	116, 1070,
	249, 1070,
	255, 1070,
	-2, 239,
	-1, 247,
	116, 1027,
	249, 1027,
	255, 1027,
	-2, 240,
	-1, 248,
	116, 1012,
	249, 1012,
	255, 1012,
	-2, 241,
	-1, 249,
	116, 1013,
	249, 1013,
	255, 1013,
	-2, 242,
	-1, 250,
	116, 1061,
	249, 1061,
	255, 1061,
	-2, 243,
	-1, 251,
	116, 980,
	249, 980,
	255, 980,
	-2, 244,
	-1, 252,
	116, 981,
	249, 981,
	255, 981,
	-2, 245,
	-1, 253,
	116, 1052,
	249, 1052,
	255, 1052,
	-2, 299,
	-1, 254,
	116, 1001,
	249, 1001,
	255, 1001,
	-2, 299,
	-1, 255,
	116, 1005,
	249, 1005,
	255, 1005,
	-2, 299,
	-1, 256,
	116, 1000,
	249, 1000,
	255, 1000,
	-2, 301,
	-1, 257,
	116, 1039,
	249, 1039,
	255, 1039,
	-2, 301,
	-1, 258,
	116, 1030,
	249, 1030,
	255, 1030,
	-2, 252,
	-1, 259,
	116, 1069,
	249, 1069,
	255, 1069,
	-2, 253,
	-1, 428,
	142, 393,
	-2, 994,
	-1, 549,
	59, 358,
	-2, 355,
	-1, 568,
	119, 810,
	-2, 225,
	-1, 586,
	119, 808,
	-2, 804,
	-1, 587,
	119, 809,
	-2, 805,
	-1, 714,
	119, 810,
	-2, 225,
	-1, 736,
	266, 819,
	-2, 707,
	-1, 768,
	266, 819,
	-2, 457,
	-1, 799,
	5, 9,
	-2, 76,
	-1, 805,
	5, 9,
	-2, 78,
	-1, 953,
	266, 819,
	-2, 457,
	-1, 968,
	116, 317,
	266, 317,
	378, 317,
	-2, 230,
	-1, 969,
	266, 282,
	378, 282,
	-2, 231,
	-1, 970,
	266, 283,
	378, 283,
	-2, 232,
	-1, 1113,
	119, 812,
	-2, 807,
	-1, 1124,
	266, 819,
	-2, 297,
	-1, 1125,
	57, 297,
	59, 297,
	239, 297,
	-2, 987,
	-1, 1126,
	57, 670,
	-2, 996,
	-1, 1127,
	57, 297,
	-2, 997,
	-1, 1128,
	57, 301,
	-2, 1000,
	-1, 1129,
	57, 673,
	-2, 1015,
	-1, 1131,
	57, 675,
	-2, 1066,
	-1, 1132,
	57, 297,
	-2, 1076,
	-1, 1133,
	57, 678,
	-2, 1085,
	-1, 1134,
	57, 680,
	-2, 980,
	-1, 1135,
	57, 681,
	-2, 982,
	-1, 1136,
	57, 682,
	-2, 1012,
	-1, 1137,
	57, 683,
	-2, 1030,
	-1, 1138,
	57, 301,
	-2, 1039,
	-1, 1139,
	57, 685,
	-2, 1068,
	-1, 1140,
	57, 686,
	-2, 1069,
	-1, 1141,
	57, 687,
	-2, 1079,
	-1, 1142,
	57, 688,
	-2, 1005,
	-1, 1143,
	57, 689,
	-2, 1052,
	-1, 1144,
	57, 297,
	-2, 998,
	-1, 1145,
	57, 297,
	-2, 999,
	-1, 1146,
	57, 692,
	-2, 1067,
	-1, 1147,
	57, 693,
	-2, 1074,
	-1, 1148,
	57, 297,
	-2, 1089,
	-1, 1149,
	57, 297,
	-2, 1035,
	-1, 1150,
	57, 696,
	-2, 1038,
	-1, 1151,
	57, 297,
	-2, 1040,
	-1, 1152,
	57, 297,
	-2, 1088,
	-1, 1178,
	116, 297,
	266, 297,
	378, 297,
	-2, 226,
	-1, 1192,
	266, 819,
	-2, 457,
	-1, 1253,
	58, 88,
	-2, 155,
	-1, 1256,
	58, 88,
	-2, 155,
	-1, 1306,
	5, 10,
	-2, 583,
	-1, 1376,
	5, 9,
	-2, 77,
	-1, 1389,
	187, 36,
	-2, 155,
	-1, 1431,
	58, 88,
	-2, 154,
	-1, 1582,
	86, 1060,
	-2, 67,
	-1, 1583,
	86, 1010,
	-2, 68,
	-1, 1587,
	86, 989,
	-2, 784,
	-1, 1589,
	86, 1034,
	-2, 786,
	-1, 1672,
	55, 23,
	57, 23,
	-2, 25,
	-1, 1832,
	5, 9,
	-2, 755,
	-1, 1857,
	5, 9,
	-2, 32,
	-1, 1926,
	5, 10,
	-2, 756,
	-1, 1957,
	5, 9,
	-2, 758,
	-1, 1980,
	5, 10,
	-2, 759,
}

const yyPrivate = 57344

const yyLast = 20544

var yyAct = [...]int16{
	587, 1850, 1764, 1935, 1884, 1782, 698, 1695, 726, 906,
	1885, 812, 34, 1559, 907, 1823, 1204, 34, 34, 181,
	1765, 1218, 1855, 1881, 1842, 1708, 1001, 1235, 181, 1707,
	1581, 1697, 34, 34, 1263, 194, 1584, 1682, 1567, 1757,
	1693, 1029, 1560, 1224, 1393, 1440, 1578, 1360, 1390, 1564,
	1568, 1370, 1302, 1573, 489, 1286, 1365, 837, 538, 26,
	288, 1041, 1090, 794, 1296, 193, 1448, 1123, 1221, 691,
	1200, 759, 178, 1430, 1160, 1187, 701, 602, 793, 1112,
	1067, 190, 709, 977, 1163, 484, 981, 613, 1016, 696,
	455, 201, 196, 195, 931, 541, 667, 679, 260, 423,
	636, 503, 697, 565, 504, 573, 417, 567, 610, 438,
	176, 1005, 471, 269, 590, 1472, 433, 1171, 457, 1110,
	1754, 9, 1352, 674, 1026, 858, 864, 861, 453, 874,
	1664, 184, 760, 876, 877, 878, 879, 880, 881, 882,
	874, 859, 860, 857, 883, 884, 885, 886, 863, 862,
	872, 873, 865, 866, 867, 868, 869, 870, 871, 864,
	185, 802, 874, 1248, 1238, 1237, 922, 499, 500, 1631,
	34, 34, 1201, 681, 682, 1239, 843, 34, 680, 867,
	868, 869, 870, 871, 864, 181, 1240, 874, 683, 563,
	181, 34, 1819, 34, 186, 187, 1644, 863, 862, 872,
	873, 865, 866, 867, 868, 869, 870, 871, 864, 1982,
	956, 874, 1520, 1521, 716, 862, 872, 873, 865, 866,
	867, 868, 869, 870, 871, 864, 31, 285, 874, 1916,
	456, 174, 175, 1057, 1058, 1978, 1874, 1267, 280, 1268,
	1968, 461, 1637, 281, 614, 615, 200, 200, 420, 1515,
	1851, 863, 862, 872, 873, 865, 866, 867, 868, 869,
	870, 871, 864, 181, 34, 874, 181, 1971, 181, 181,
	1553, 181, 1936, 1937, 1938, 1939, 1940, 1941, 34, 181,
	181, 1299, 265, 181, 267, 802, 1915, 1248, 1238, 1237,
	1246, 1463, 1873, 1634, 279, 188, 687, 1906, 1861, 1239,
	1245, 1860, 1792, 1620, 1862, 1907, 1908, 1793, 1794, 1709,
	1240, 1710, 491, 512, 991, 990, 494, 592, 459, 497,
	901, 501, 502, 998, 508, 472, 1168, 473, 474, 475,
	476, 1507, 1470, 516, 786, 785, 532, 461, 461, 515,
	487, 488, 485, 1241, 1242, 1244, 1318, 461, 578, 1243,
	580, 579, 1316, 465, 1807, 1911, 1601, 802, 513, 1248,
	1238, 1237, 675, 1600, 1804, 1381, 266, 271, 171, 1868,
	1867, 1239, 1726, 1808, 632, 1703, 802, 1602, 1248, 1238,
	1237, 1380, 1240, 509, 261, 264, 1428, 1220, 875, 510,
	1239, 275, 1047, 681, 682, 1287, 1643, 450, 1645, 875,
	1869, 1240, 270, 453, 454, 287, 1809, 31, 808, 809,
	271, 1257, 1758, 1441, 1246, 661, 1954, 819, 34, 673,
	1442, 875, 845, 30, 1245, 434, 825, 844, 441, 34,
	25, 556, 555, 1910, 820, 1419, 1801, 1471, 172, 1820,
	34, 1732, 435, 448, 543, 436, 875, 1023, 1262, 177,
	181, 27, 437, 28, 534, 865, 866, 867, 868, 869,
	870, 871, 864, 840, 28, 874, 1009, 1241, 1242, 1244,
	875, 1002, 626, 1243, 685, 173, 1854, 1853, 495, 1852,
	1783, 1785, 170, 20, 1249, 15, 1246, 875, 169, 189,
	183, 1725, 200, 181, 34, 662, 1245, 181, 16, 1975,
	23, 6, 7, 559, 1929, 1246, 557, 957, 486, 1821,
	444, 472, 439, 449, 973, 1245, 17, 18, 1178, 464,
	446, 445, 1636, 1712, 875, 562, 1268, 1532, 614, 615,
	272, 273, 1802, 1332, 34, 548, 577, 835, 34, 1241,
	1242, 1244, 1304, 274, 1191, 1243, 620, 544, 545, 547,
	624, 606, 607, 608, 609, 905, 575, 419, 1241, 1242,
	1244, 835, 1784, 468, 1243, 904, 470, 769, 616, 546,
	664, 278, 618, 272, 273, 594, 595, 780, 597, 1328,
	600, 601, 1872, 1543, 1522, 854, 274, 612, 1420, 1421,
	1422, 802, 1863, 1248, 1238, 1237, 604, 603, 838, 839,
	841, 666, 891, 892, 421, 1239, 549, 1840, 1249, 853,
	852, 1711, 634, 1648, 1074, 1279, 1240, 1278, 639, 1222,
	1865, 1277, 633, 435, 181, 1327, 854, 1276, 1072, 1073,
	1071, 181, 287, 34, 781, 799, 34, 805, 1275, 34,
	434, 1274, 665, 542, 761, 1273, 442, 1271, 1545, 577,
	1864, 852, 443, 800, 553, 800, 1802, 435, 1828, 1164,
	686, 1517, 34, 684, 34, 540, 34, 854, 584, 575,
	756, 1049, 771, 772, 758, 774, 276, 797, 777, 778,
	1249, 1164, 1526, 1337, 810, 1046, 552, 1544, 891, 892,
	34, 1042, 1043, 1375, 1528, 540, 1742, 853, 852, 1249,
	828, 850, 534, 19, 1599, 795, 853, 852, 621, 773,
	1062, 1064, 1065, 1741, 854, 21, 22, 1063, 24, 1642,
	1246, 973, 1045, 854, 875, 451, 1740, 452, 1802, 842,
	1245, 1523, 1641, 539, 286, 815, 811, 804, 551, 853,
	852, 822, 853, 852, 848, 1070, 540, 1805, 287, 447,
	823, 1449, 668, 1638, 1591, 800, 854, 540, 1326, 854,
	1449, 34, 826, 1310, 1640, 1309, 1289, 1290, 1291, 1269,
	34, 1450, 889, 1241, 1242, 1244, 1451, 975, 847, 1243,
	1450, 584, 593, 980, 853, 852, 902, 853, 852, 1345,
	974, 1447, 34, 181, 1519, 593, 971, 851, 286, 34,
	1639, 854, 1303, 593, 854, 181, 985, 853, 852, 1176,
	1000, 853, 852, 1007, 599, 853, 852, 181, 598, 34,
	993, 992, 755, 619, 854, 617, 34, 589, 854, 903,
	286, 800, 854, 34, 1091, 903, 1092, 796, 1272, 936,
	937, 988, 611, 558, 1104, 34, 996, 813, 1002, 802,
	817, 986, 779, 821, 1017, 973, 1963, 1962, 1008, 1676,
	575, 960, 1017, 1961, 1378, 1950, 1068, 1905, 973, 994,
	1019, 1928, 973, 795, 1830, 1030, 824, 678, 287, 1831,
	287, 1524, 1525, 1527, 1529, 1530, 979, 832, 1810, 1032,
	1878, 973, 34, 34, 677, 987, 1044, 989, 676, 286,
	34, 1048, 973, 1677, 813, 1675, 34, 924, 925, 926,
	927, 928, 929, 930, 1249, 1679, 973, 973, 800, 1118,
	550, 1154, 1156, 1017, 1655, 832, 1615, 1165, 1535, 1040,
	1378, 1614, 1611, 1610, 1069, 1606, 973, 800, 654, 1429,
	1050, 1111, 1114, 1052, 1363, 863, 862, 872, 873, 865,
	866, 867, 868, 869, 870, 871, 864, 832, 1604, 874,
	832, 1603, 1803, 1031, 1761, 1113, 1675, 1096, 937, 1093,
	1095, 832, 1536, 1183, 973, 200, 1017, 1203, 1116, 973,
	1348, 1105, 1108, 34, 287, 1017, 1056, 832, 831, 802,
	1361, 1248, 1238, 1237, 1347, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 802, 1239, 1361, 796, 995, 645, 1752, 655,
	34, 789, 788, 813, 1240, 657, 650, 651, 34, 658,
	653, 652, 34, 783, 784, 660, 656, 724, 1119, 1121,
	1678, 1208, 1956, 1022, 1159, 1679, 659, 1170, 783, 782,
	1025, 192, 191, 1197, 1196, 1882, 179, 668, 1839, 1839,
	1839, 1331, 286, 1179, 1183, 179, 1679, 1002, 1379, 1051,
	1378, 1225, 1180, 1195, 1177, 1193, 1018, 1194, 997, 1265,
	1169, 976, 1172, 1173, 963, 959, 816, 776, 1202, 631,
	1068, 775, 795, 770, 646, 642, 638, 1924, 647, 644,
	643, 1116, 1630, 973, 641, 1252, 1182, 1330, 630, 1183,
	631, 631, 1679, 802, 1791, 648, 1107, 1107, 1250, 1684,
	1687, 1688, 1689, 1685, 1109, 1686, 1690, 1704, 1246, 287,
	287, 34, 1951, 1574, 1546, 1183, 1311, 1017, 1245, 832,
	1157, 958, 791, 790, 1900, 1157, 863, 862, 872, 873,
	865, 866, 867, 868, 869, 870, 871, 864, 1069, 787,
	874, 535, 1292, 286, 1898, 1870, 491, 461, 1684, 1687,
	1688, 1689, 1685, 1028, 1686, 1690, 490, 181, 1843, 1844,
	635, 1241, 1242, 1244, 1843, 1844, 1882, 1243, 902, 1608,
	1362, 485, 1283, 1315, 487, 488, 1282, 1260, 802, 34,
	1248, 1238, 1237, 1319, 1259, 1199, 1198, 1189, 1175, 1021,
	34, 999, 1239, 767, 798, 766, 764, 689, 622, 564,
	560, 537, 179, 1240, 796, 492, 493, 179, 875, 1373,
	478, 477, 466, 11, 1219, 1846, 1264, 1376, 1111, 972,
	1288, 792, 1223, 623, 1372, 496, 1253, 800, 268, 1551,
	34, 1776, 34, 34, 34, 800, 1777, 1336, 1774, 1849,
	1848, 1364, 1113, 1775, 34, 34, 34, 34, 34, 34,
	34, 34, 1384, 1359, 1353, 34, 1773, 1383, 1357, 34,
	1350, 1355, 1778, 1772, 1688, 1689, 1356, 1358, 1334, 1213,
	1214, 795, 1914, 34, 34, 1750, 1658, 1374, 921, 1728,
	179, 536, 1717, 179, 605, 179, 179, 754, 179, 1922,
	1366, 1719, 1024, 1120, 1459, 34, 514, 179, 511, 1445,
	179, 1692, 1249, 1367, 1217, 1423, 1426, 1246, 1161, 1427,
	1042, 1043, 260, 1437, 1438, 1210, 1211, 1245, 1432, 1433,
	1434, 1435, 1436, 753, 629, 1189, 627, 625, 1457, 1458,
	1461, 1474, 1452, 1453, 1454, 1455, 1456, 1460, 1385, 1386,
	1387, 1011, 1391, 1012, 1013, 1014, 277, 1788, 1466, 1251,
	1667, 1516, 1166, 34, 1205, 1015, 1010, 807, 672, 1514,
	1241, 1242, 1244, 1504, 1539, 1473, 1243, 1475, 1921, 34,
	1745, 1646, 1206, 1002, 1920, 1880, 1598, 181, 181, 1548,
	34, 1361, 34, 1113, 1508, 505, 506, 507, 1006, 1596,
	1595, 1561, 1594, 1189, 1593, 1534, 287, 1281, 1972, 875,
	1465, 1464, 1542, 796, 668, 671, 670, 1280, 554, 34,
	1004, 640, 818, 1557, 418, 1576, 1506, 1020, 1566, 1674,
	727, 8, 34, 1547, 1540, 1, 1392, 13, 12, 1822,
	1565, 1351, 34, 498, 1301, 1562, 900, 713, 1806, 1724,
	699, 1934, 1575, 1388, 1389, 1628, 1415, 1416, 1417, 1590,
	1556, 1418, 588, 440, 1571, 1346, 1597, 561, 1431, 1253,
	1253, 1431, 1253, 1253, 668, 668, 14, 179, 1552, 1443,
	1377, 585, 806, 1446, 628, 1537, 649, 520, 1439, 1541,
	1444, 1027, 834, 426, 827, 533, 29, 1219, 668, 863,
	862, 872, 873, 865, 866, 867, 868, 869, 870, 871,
	864, 1249, 10, 874, 1270, 427, 1612, 1613, 1616, 287,
	179, 425, 1617, 1618, 179, 1621, 424, 422, 591, 458,
	199, 197, 198, 34, 202, 1315, 1579, 283, 1691, 1713,
	637, 1186, 517, 887, 1319, 1859, 1586, 287, 872, 873,
	865, 866, 867, 868, 869, 870, 871, 864, 1649, 1889,
	874, 1369, 1919, 181, 181, 1879, 1335, 918, 1162, 1474,
	700, 1061, 1654, 181, 181, 34, 1657, 813, 712, 711,
	34, 710, 1829, 1652, 856, 1570, 1669, 34, 1656, 1683,
	1681, 1680, 1845, 1554, 585, 1841, 1569, 1751, 1661, 1633,
	800, 1665, 1666, 1818, 200, 1662, 287, 1212, 1550, 34,
	34, 1236, 1720, 1673, 1722, 1723, 1671, 1672, 1668, 693,
	1003, 284, 1215, 1701, 5, 1247, 1705, 1234, 4, 3,
	1233, 1232, 1231, 1592, 1229, 1230, 1718, 1227, 1228, 1226,
	1207, 801, 1225, 1721, 2, 0, 1431, 181, 0, 1571,
	585, 179, 1727, 1731, 0, 0, 1607, 0, 179, 1651,
	0, 1653, 0, 0, 0, 0, 0, 0, 1663, 0,
	0, 181, 1729, 0, 0, 181, 181, 0, 0, 0,
	181, 181, 181, 181, 181, 1766, 1747, 0, 0, 0,
	0, 0, 181, 0, 0, 181, 0, 0, 0, 181,
	0, 0, 0, 34, 1118, 34, 0, 0, 0, 0,
	1755, 0, 1760, 34, 0, 1762, 0, 0, 1767, 0,
	34, 1770, 800, 0, 1759, 0, 0, 0, 1779, 1763,
	1787, 1768, 1769, 181, 1771, 1789, 1790, 0, 1576, 0,
	1733, 0, 0, 0, 0, 0, 0, 287, 0, 1798,
	0, 1571, 0, 181, 0, 0, 1571, 1571, 1571, 1571,
	1571, 0, 181, 1666, 1383, 1666, 1666, 1832, 1813, 0,
	0, 1571, 875, 0, 0, 0, 0, 1748, 0, 0,
	0, 1749, 0, 0, 1825, 800, 1812, 34, 0, 1702,
	1627, 1799, 0, 1827, 287, 1847, 984, 0, 1857, 1826,
	0, 1714, 1836, 0, 0, 0, 0, 0, 1835, 0,
	1837, 802, 1838, 1248, 1238, 1237, 800, 1858, 585, 875,
	179, 0, 34, 668, 1730, 1239, 0, 0, 0, 1571,
	0, 0, 179, 1883, 34, 34, 1240, 1766, 1571, 0,
	1886, 0, 0, 1888, 179, 1755, 1766, 0, 1755, 1877,
	0, 0, 0, 0, 0, 0, 0, 1891, 1875, 0,
	1895, 800, 1892, 0, 690, 1894, 0, 0, 0, 0,
	0, 34, 863, 862, 872, 873, 865, 866, 867, 868,
	869, 870, 871, 864, 1893, 0, 874, 0, 0, 0,
	1866, 0, 1913, 1157, 1918, 0, 0, 0, 0, 34,
	0, 0, 34, 34, 34, 181, 34, 1923, 0, 1931,
	1933, 1932, 1945, 1942, 1943, 1944, 0, 200, 0, 287,
	0, 0, 0, 0, 932, 1947, 0, 287, 0, 34,
	34, 0, 514, 1886, 1800, 1955, 1953, 1957, 984, 984,
	1246, 0, 0, 1158, 984, 0, 0, 0, 1158, 0,
	1245, 1967, 0, 0, 0, 800, 0, 0, 0, 934,
	0, 1973, 0, 0, 0, 1886, 0, 1976, 1974, 1977,
	0, 0, 0, 0, 0, 1979, 34, 0, 0, 1766,
	984, 984, 984, 984, 0, 0, 800, 0, 688, 0,
	1666, 0, 849, 1241, 1242, 1244, 855, 0, 0, 1243,
	0, 1856, 0, 0, 0, 0, 984, 762, 0, 0,
	0, 0, 0, 0, 0, 768, 0, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 585, 0, 0,
	0, 908, 0, 0, 0, 1467, 287, 0, 935, 0,
	919, 0, 0, 0, 0, 1157, 950, 933, 1890, 1856,
	0, 0, 939, 938, 1157, 0, 803, 0, 803, 863,
	862, 872, 873, 865, 866, 867, 868, 869, 870, 871,
	864, 0, 982, 874, 0, 0, 0, 0, 0, 1055,
	0, 460, 0, 0, 0, 1219, 0, 0, 863, 862,
	872, 873, 865, 866, 867, 868, 869, 870, 871, 864,
	0, 0, 874, 0, 0, 0, 846, 0, 0, 0,
	0, 0, 0, 813, 0, 0, 813, 813, 813, 0,
	1946, 0, 0, 0, 0, 888, 890, 0, 0, 0,
	0, 0, 0, 0, 1249, 0, 1115, 1117, 0, 1297,
	0, 0, 0, 1959, 1960, 875, 0, 768, 0, 951,
	1053, 0, 0, 1167, 0, 0, 1059, 1060, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 0, 920, 0,
	923, 923, 923, 923, 923, 923, 923, 923, 0, 952,
	953, 954, 955, 0, 0, 0, 0, 1157, 984, 0,
	1981, 0, 0, 0, 1340, 1329, 0, 0, 0, 0,
	802, 0, 1248, 1238, 1237, 0, 0, 1181, 0, 1184,
	1185, 984, 0, 908, 1239, 0, 1122, 1153, 0, 514,
	984, 0, 0, 0, 0, 1240, 585, 768, 0, 0,
	0, 0, 0, 0, 803, 0, 0, 1216, 1298, 863,
	862, 872, 873, 865, 866, 867, 868, 869, 870, 871,
	864, 0, 0, 874, 0, 0, 0, 0, 0, 0,
	1174, 0, 863, 862, 872, 873, 865, 866, 867, 868,
	869, 870, 871, 864, 0, 0, 874, 0, 0, 1054,
	0, 0, 0, 1284, 0, 0, 0, 462, 463, 0,
	467, 0, 0, 469, 863, 862, 872, 873, 865, 866,
	867, 868, 869, 870, 871, 864, 0, 0, 874, 0,
	479, 480, 481, 482, 483, 0, 0, 0, 0, 0,
	0, 803, 893, 894, 895, 896, 897, 898, 899, 1246,
	0, 932, 875, 0, 1300, 0, 0, 0, 0, 1245,
	909, 0, 0, 0, 0, 0, 0, 0, 1306, 1307,
	0, 1308, 0, 526, 0, 0, 0, 0, 1285, 0,
	514, 875, 961, 569, 570, 571, 934, 525, 0, 0,
	0, 574, 572, 582, 583, 0, 0, 0, 1030, 0,
	0, 0, 1241, 1242, 1244, 0, 0, 0, 1243, 1333,
	0, 0, 1032, 762, 0, 1339, 0, 530, 1558, 1341,
	1342, 0, 1343, 1344, 0, 0, 0, 524, 0, 0,
	0, 0, 1349, 0, 179, 179, 1192, 0, 0, 0,
	1305, 0, 0, 0, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 1209, 1097, 1098, 0, 1099, 1100,
	1101, 1103, 1102, 0, 1094, 935, 0, 0, 0, 0,
	0, 0, 0, 950, 933, 1261, 0, 0, 0, 939,
	938, 521, 519, 0, 0, 518, 1031, 0, 1338, 0,
	0, 0, 0, 0, 0, 0, 1066, 0, 0, 1075,
	1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
	1086, 1087, 1088, 1089, 0, 528, 531, 0, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 0, 0, 0, 0, 1368,
	1371, 0, 875, 0, 0, 1462, 0, 0, 0, 0,
	0, 0, 0, 1249, 0, 0, 1382, 0, 0, 0,
	0, 0, 0, 0, 1155, 875, 0, 0, 0, 0,
	0, 802, 1192, 1248, 1238, 1237, 596, 0, 0, 802,
	1425, 1248, 1238, 1237, 0, 1239, 951, 0, 0, 0,
	0, 0, 0, 1239, 0, 0, 1240, 875, 962, 687,
	0, 0, 0, 0, 1240, 0, 0, 523, 984, 0,
	0, 0, 0, 0, 0, 0, 1533, 0, 0, 0,
	179, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 1699, 0, 1549, 0, 0, 0, 0, 0, 0,
	522, 0, 0, 0, 0, 1505, 0, 0, 0, 0,
	1756, 578, 0, 580, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	803, 1518, 0, 0, 0, 0, 0, 0, 803, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	763, 765, 0, 0, 0, 1538, 1266, 0, 527, 1605,
	1246, 0, 0, 0, 1744, 0, 0, 0, 1246, 0,
	1245, 0, 0, 1555, 0, 0, 529, 0, 1245, 0,
	0, 0, 1293, 1294, 1295, 0, 0, 0, 179, 0,
	0, 0, 179, 179, 0, 1622, 1158, 179, 179, 179,
	179, 179, 0, 0, 0, 0, 0, 0, 1476, 1780,
	0, 0, 179, 1241, 1242, 1244, 1699, 0, 0, 1243,
	0, 1241, 1242, 1244, 1623, 1624, 0, 1243, 1625, 1626,
	0, 0, 1629, 0, 893, 0, 0, 0, 0, 0,
	833, 836, 0, 1478, 0, 0, 0, 0, 0, 0,
	179, 1647, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 0, 1531, 0, 0, 0, 0, 0, 179,
	1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
	1414, 1486, 1492, 1490, 0, 0, 1487, 0, 1572, 1485,
	0, 0, 1494, 1635, 0, 1493, 1480, 1489, 1491, 1488,
	1483, 0, 1479, 0, 1496, 1495, 1497, 1477, 1499, 0,
	0, 0, 1503, 1500, 1502, 1501, 0, 1498, 1659, 1660,
	1371, 0, 0, 0, 0, 0, 1481, 1130, 1158, 0,
	0, 0, 0, 1739, 1249, 1424, 0, 1158, 0, 0,
	0, 0, 1249, 0, 1609, 0, 1482, 1484, 833, 1746,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 1469, 0,
	0, 0, 0, 1781, 0, 0, 0, 0, 0, 0,
	0, 0, 1699, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1632, 1509, 1510, 1511,
	1512, 1513, 0, 0, 0, 0, 0, 0, 0, 0,
	1811, 0, 0, 0, 1814, 1815, 1816, 1817, 1753, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1158, 0, 0, 1694, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1797, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 463, 480, 1871, 1824,
	0, 0, 1876, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1904, 0, 1619, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1572, 0, 1917, 0, 0,
	1572, 1572, 1572, 1572, 1572, 0, 0, 1925, 1926, 1927,
	0, 1930, 0, 0, 0, 1694, 0, 1786, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1896, 0, 0, 1897, 0, 0,
	1899, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1909, 0, 0,
	0, 0, 1964, 1965, 1966, 0, 0, 0, 1969, 1970,
	0, 0, 1824, 1572, 0, 0, 0, 0, 1833, 1834,
	0, 908, 1572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1980, 0, 1312, 1313, 0, 1314,
	0, 0, 0, 0, 1317, 0, 0, 0, 0, 803,
	0, 0, 0, 0, 1952, 908, 1320, 1321, 0, 0,
	1322, 1323, 0, 1324, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1734, 1735, 0,
	1736, 1737, 1738, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 1887, 0, 803, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1901, 1902, 1903, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1912, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1887, 0, 0, 1958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1887, 0, 803,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1948, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1312, 1313,
	0, 1314, 0, 0, 0, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1320, 1321, 0,
	0, 1322, 1323, 0, 1324, 1325, 403, 392, 0, 351,
	405, 321, 339, 413, 341, 342, 378, 300, 361, 100,
	336, 318, 37, 324, 293, 331, 294, 322, 353, 61,
	319, 0, 394, 364, 75, 165, 166, 411, 78, 369,
	0, 124, 88, 0, 0, 356, 396, 359, 387, 350,
	379, 308, 368, 406, 337, 374, 407, 0, 0, 0,
	586, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 373, 401, 333, 416, 0, 377, 292, 371,
	0, 298, 301, 412, 399, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 355, 360, 384, 347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1354, 0,
	325, 0, 367, 0, 0, 0, 305, 299, 0, 352,
	0, 0, 0, 307, 0, 326, 385, 0, 289, 390,
	397, 349, 84, 151, 400, 346, 345, 107, 0, 53,
	0, 130, 65, 338, 76, 382, 414, 404, 357, 395,
	323, 332, 55, 330, 114, 101, 142, 366, 380, 112,
	79, 134, 108, 141, 402, 132, 150, 117, 45, 95,
	35, 106, 113, 0, 54, 0, 158, 159, 160, 161,
	162, 163, 164, 297, 290, 327, 388, 391, 312, 376,
	302, 334, 383, 335, 358, 317, 0, 0, 0, 0,
	0, 0, 0, 123, 122, 38, 131, 140, 51, 118,
	41, 138, 127, 129, 86, 71, 72, 120, 39, 40,
	0, 111, 60, 105, 64, 59, 98, 128, 89, 135,
	136, 56, 155, 58, 57, 126, 46, 148, 149, 43,
	47, 147, 94, 99, 97, 146, 133, 139, 87, 83,
	0, 42, 137, 85, 82, 74, 0, 62, 66, 103,
	81, 104, 67, 91, 90, 92, 0, 0, 96, 68,
	0, 0, 0, 295, 0, 125, 144, 156, 157, 296,
	316, 398, 152, 0, 0, 0, 93, 48, 69, 119,
	73, 80, 110, 154, 375, 115, 52, 143, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 315, 309, 310, 362, 363, 408, 409, 410,
	386, 306, 0, 313, 314, 0, 393, 70, 167, 168,
	365, 36, 44, 77, 415, 153, 0, 109, 63, 145,
	0, 0, 340, 291, 344, 0, 0, 0, 0, 0,
	0, 0, 303, 304, 116, 0, 348, 343, 370, 372,
	381, 389, 0, 320, 354, 0, 49, 403, 392, 0,
	351, 405, 321, 339, 413, 341, 342, 378, 300, 361,
	100, 336, 318, 37, 324, 293, 331, 294, 322, 353,
	61, 319, 0, 394, 364, 75, 165, 166, 411, 78,
	369, 0, 124, 88, 0, 0, 356, 396, 359, 387,
	350, 379, 308, 368, 406, 337, 374, 407, 0, 0,
	0, 33, 0, 829, 0, 830, 0, 0, 0, 0,
	0, 50, 0, 373, 401, 333, 416, 0, 377, 292,
	371, 0, 298, 301, 412, 399, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 355, 360, 384, 347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 325, 0, 367, 0, 0, 0, 305, 299, 0,
	352, 0, 0, 0, 307, 0, 326, 385, 0, 289,
	390, 397, 349, 84, 151, 400, 346, 345, 107, 0,
	53, 0, 130, 65, 338, 76, 382, 414, 404, 357,
	395, 323, 332, 55, 330, 114, 101, 142, 366, 380,
	112, 79, 134, 108, 141, 402, 132, 150, 117, 45,
	95, 35, 106, 113, 0, 54, 0, 158, 159, 160,
	161, 162, 163, 164, 297, 290, 327, 388, 391, 312,
	376, 302, 334, 383, 335, 358, 317, 0, 0, 0,
	0, 0, 0, 0, 123, 122, 38, 131, 140, 51,
	118, 41, 138, 127, 129, 86, 71, 72, 120, 39,
	40, 0, 111, 60, 105, 64, 59, 98, 128, 89,
	135, 136, 56, 155, 58, 57, 126, 46, 148, 149,
	43, 47, 147, 94, 99, 97, 146, 133, 139, 87,
	83, 0, 42, 137, 85, 82, 74, 0, 62, 66,
	103, 81, 104, 67, 91, 90, 92, 0, 0, 96,
	68, 0, 0, 0, 295, 0, 125, 144, 156, 157,
	296, 316, 398, 152, 0, 0, 0, 93, 48, 69,
	119, 73, 80, 110, 154, 375, 115, 52, 143, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 315, 309, 310, 362, 363, 408, 409,
	410, 386, 306, 0, 313, 314, 0, 393, 70, 167,
	168, 365, 36, 44, 77, 415, 153, 0, 109, 63,
	145, 0, 0, 340, 291, 344, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 116, 0, 348, 343, 370,
	372, 381, 389, 0, 320, 354, 0, 49, 403, 392,
	0, 351, 405, 321, 339, 413, 341, 342, 378, 300,
	361, 100, 336, 318, 37, 324, 293, 331, 294, 322,
	353, 61, 319, 0, 394, 364, 75, 165, 166, 411,
	78, 369, 0, 124, 88, 0, 0, 356, 396, 359,
	387, 350, 379, 308, 368, 406, 337, 374, 407, 0,
	0, 0, 33, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 373, 401, 333, 416, 0, 377,
	292, 371, 0, 298, 301, 412, 399, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 355, 360, 384, 347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 367, 0, 0, 0, 305, 299,
	0, 352, 0, 0, 0, 307, 0, 326, 385, 0,
	289, 390, 397, 349, 84, 151, 400, 346, 345, 107,
	0, 53, 0, 130, 65, 338, 76, 382, 414, 404,
	357, 395, 323, 332, 55, 330, 114, 101, 142, 366,
	380, 112, 79, 134, 108, 141, 402, 132, 150, 117,
	45, 95, 35, 106, 113, 0, 54, 0, 158, 159,
	160, 161, 162, 163, 164, 297, 290, 327, 388, 391,
	312, 376, 302, 334, 383, 335, 358, 317, 0, 0,
	0, 0, 0, 0, 0, 123, 122, 38, 131, 140,
	51, 118, 41, 138, 127, 129, 86, 71, 72, 120,
	39, 40, 0, 111, 60, 105, 64, 59, 98, 128,
	89, 135, 136, 56, 155, 58, 57, 126, 46, 148,
	149, 43, 1588, 147, 94, 99, 97, 146, 133, 139,
	87, 83, 0, 42, 137, 85, 82, 74, 0, 62,
	66, 103, 81, 104, 67, 91, 90, 92, 0, 0,
	96, 68, 0, 0, 0, 295, 0, 125, 144, 156,
	157, 296, 316, 398, 152, 0, 0, 0, 1589, 1587,
	69, 119, 73, 80, 110, 154, 375, 115, 52, 143,
	121, 1585, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 311, 315, 309, 310, 362, 363, 408,
	409, 410, 386, 306, 0, 313, 314, 0, 393, 70,
	167, 168, 365, 36, 44, 77, 415, 153, 0, 109,
	63, 145, 0, 0, 340, 291, 344, 0, 0, 0,
	0, 0, 0, 0, 303, 304, 116, 0, 348, 343,
	370, 372, 381, 389, 0, 320, 354, 0, 49, 403,
	392, 0, 351, 405, 321, 339, 413, 341, 342, 378,
	300, 361, 100, 336, 318, 37, 324, 293, 331, 294,
	322, 353, 61, 319, 0, 394, 364, 75, 165, 166,
	411, 78, 369, 0, 124, 88, 0, 0, 356, 396,
	359, 387, 350, 379, 308, 368, 406, 337, 374, 407,
	0, 0, 0, 33, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 373, 401, 333, 416, 0,
	377, 292, 371, 0, 298, 301, 412, 399, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 355, 360, 384,
	347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 0, 367, 0, 0, 0, 305,
	299, 0, 352, 0, 0, 0, 307, 0, 326, 385,
	0, 289, 390, 397, 349, 84, 151, 400, 346, 345,
	107, 0, 53, 0, 130, 65, 338, 76, 382, 414,
	404, 357, 395, 323, 332, 55, 330, 114, 101, 142,
	366, 380, 112, 79, 134, 108, 141, 402, 132, 150,
	117, 45, 95, 35, 106, 113, 0, 54, 0, 158,
	159, 160, 161, 162, 163, 164, 297, 290, 327, 388,
	391, 312, 376, 302, 334, 383, 335, 358, 317, 0,
	0, 0, 0, 0, 0, 0, 123, 122, 38, 131,
	1706, 51, 118, 41, 138, 127, 129, 86, 71, 72,
	120, 39, 40, 0, 111, 60, 105, 64, 59, 98,
	128, 89, 135, 136, 56, 155, 58, 57, 126, 46,
	148, 149, 43, 1588, 147, 94, 99, 97, 146, 133,
	139, 87, 83, 0, 42, 137, 85, 82, 74, 0,
	62, 66, 103, 81, 104, 67, 91, 90, 92, 0,
	0, 96, 68, 0, 0, 0, 295, 0, 125, 144,
	156, 157, 296, 316, 398, 152, 0, 0, 0, 1589,
	1587, 69, 119, 73, 80, 110, 154, 375, 115, 52,
	143, 121, 1585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 315, 309, 310, 362, 363,
	408, 409, 410, 386, 306, 0, 313, 314, 0, 393,
	70, 167, 168, 365, 36, 44, 77, 415, 153, 0,
	109, 63, 145, 0, 0, 340, 291, 344, 0, 0,
	0, 0, 0, 0, 0, 303, 304, 116, 0, 348,
	343, 370, 372, 381, 389, 0, 320, 354, 0, 49,
	403, 392, 0, 351, 405, 321, 339, 413, 341, 342,
	378, 300, 361, 100, 336, 318, 37, 324, 293, 331,
	294, 322, 353, 61, 319, 0, 394, 364, 75, 165,
	166, 411, 78, 369, 0, 124, 88, 0, 0, 356,
	396, 359, 387, 350, 379, 308, 368, 406, 337, 374,
	407, 0, 0, 0, 33, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 373, 401, 333, 416,
	0, 377, 292, 371, 0, 298, 301, 412, 399, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 355, 360,
	384, 347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1650, 0, 325, 0, 367, 0, 0, 0,
	305, 299, 0, 352, 0, 0, 0, 307, 0, 326,
	385, 0, 289, 390, 397, 349, 84, 151, 400, 346,
	345, 107, 0, 53, 0, 130, 65, 338, 76, 382,
	414, 404, 357, 395, 323, 332, 55, 330, 114, 101,
	142, 366, 380, 112, 79, 134, 108, 141, 402, 132,
	150, 117, 45, 95, 35, 106, 113, 0, 54, 0,
	158, 159, 160, 161, 162, 163, 164, 297, 290, 327,
	388, 391, 312, 376, 302, 334, 383, 335, 358, 317,
	0, 0, 0, 0, 0, 0, 0, 123, 122, 38,
	131, 140, 51, 118, 41, 138, 127, 129, 86, 71,
	72, 120, 39, 40, 0, 111, 60, 105, 64, 59,
	98, 128, 89, 135, 136, 56, 155, 58, 57, 126,
	46, 148, 149, 43, 47, 147, 94, 99, 97, 146,
	133, 139, 87, 83, 0, 42, 137, 85, 82, 74,
	0, 62, 66, 103, 81, 104, 67, 91, 90, 92,
	0, 0, 96, 68, 0, 0, 0, 295, 0, 125,
	144, 156, 157, 296, 316, 398, 152, 0, 0, 0,
	93, 48, 69, 119, 73, 80, 110, 154, 375, 115,
	52, 143, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 311, 315, 309, 310, 362,
	363, 408, 409, 410, 386, 306, 0, 313, 314, 0,
	393, 70, 167, 168, 365, 36, 44, 77, 415, 153,
	0, 109, 63, 145, 0, 0, 340, 291, 344, 0,
	0, 0, 0, 0, 0, 0, 303, 304, 116, 0,
	348, 343, 370, 372, 381, 389, 0, 320, 354, 0,
	49, 403, 392, 0, 351, 405, 321, 339, 413, 341,
	342, 378, 300, 361, 100, 336, 318, 37, 324, 293,
	331, 294, 322, 353, 61, 319, 0, 394, 364, 75,
	165, 166, 411, 78, 369, 0, 124, 88, 0, 0,
	356, 396, 359, 387, 350, 379, 308, 368, 406, 337,
	374, 407, 0, 0, 0, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 373, 401, 333,
	416, 0, 377, 292, 371, 0, 298, 301, 412, 399,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 355,
	360, 384, 347, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 325, 0, 367, 0, 0,
	0, 305, 299, 0, 352, 0, 0, 0, 307, 0,
	326, 385, 0, 289, 390, 397, 349, 84, 151, 400,
	346, 345, 107, 0, 53, 0, 130, 65, 338, 76,
	382, 414, 404, 357, 395, 323, 332, 55, 330, 114,
	101, 142, 366, 380, 112, 79, 134, 108, 141, 402,
	132, 150, 117, 45, 95, 35, 106, 113, 0, 54,
	0, 158, 159, 160, 161, 162, 163, 164, 297, 290,
	327, 388, 391, 312, 376, 302, 334, 383, 335, 358,
	317, 0, 0, 0, 0, 0, 0, 0, 123, 122,
	38, 131, 1580, 51, 118, 41, 138, 127, 129, 86,
	71, 72, 120, 39, 40, 0, 111, 60, 105, 64,
	59, 98, 128, 89, 135, 136, 56, 155, 58, 57,
	126, 46, 148, 149, 43, 1588, 147, 94, 99, 97,
	146, 133, 139, 87, 83, 0, 42, 137, 85, 82,
	74, 0, 62, 66, 103, 81, 104, 67, 91, 90,
	92, 0, 0, 96, 68, 0, 0, 0, 295, 0,
	125, 144, 156, 157, 296, 316, 398, 152, 0, 0,
	0, 1589, 1587, 1583, 1582, 73, 80, 110, 154, 375,
	115, 52, 143, 121, 1585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 315, 309, 310,
	362, 363, 408, 409, 410, 386, 306, 0, 313, 314,
	0, 393, 70, 167, 168, 365, 36, 44, 77, 415,
	153, 0, 109, 63, 145, 0, 0, 340, 291, 344,
	0, 0, 0, 0, 0, 0, 0, 303, 304, 116,
	0, 348, 343, 370, 372, 381, 389, 0, 320, 354,
	0, 49, 403, 392, 0, 351, 405, 321, 339, 413,
	341, 342, 378, 300, 361, 100, 336, 318, 37, 324,
	293, 331, 294, 322, 353, 61, 319, 0, 394, 364,
	75, 165, 166, 411, 78, 369, 0, 124, 88, 0,
	0, 356, 396, 359, 387, 350, 379, 308, 368, 406,
	337, 374, 407, 0, 0, 0, 586, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 373, 401,
	333, 416, 0, 377, 292, 371, 0, 298, 301, 412,
	399, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	355, 360, 384, 347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 325, 0, 367, 0,
	0, 0, 305, 299, 0, 352, 0, 0, 0, 307,
	0, 326, 385, 0, 289, 390, 397, 349, 84, 151,
	400, 346, 345, 107, 0, 53, 0, 130, 65, 338,
	76, 382, 414, 404, 357, 395, 323, 332, 55, 330,
	114, 101, 142, 366, 380, 112, 79, 134, 108, 141,
	402, 132, 150, 117, 45, 95, 35, 106, 113, 0,
	54, 0, 158, 159, 160, 161, 162, 163, 164, 297,
	290, 327, 388, 391, 312, 376, 302, 334, 383, 335,
	358, 317, 0, 0, 0, 0, 0, 0, 0, 123,
	122, 38, 131, 140, 51, 118, 41, 138, 127, 129,
	86, 71, 72, 120, 39, 40, 0, 111, 60, 105,
	64, 59, 98, 128, 89, 135, 136, 56, 155, 58,
	57, 126, 46, 148, 149, 43, 47, 147, 94, 99,
	97, 146, 133, 139, 87, 83, 0, 42, 137, 85,
	82, 74, 0, 62, 66, 103, 81, 104, 67, 91,
	90, 92, 0, 0, 96, 68, 0, 0, 0, 295,
	0, 125, 144, 156, 157, 296, 316, 398, 152, 0,
	0, 0, 93, 48, 69, 119, 73, 80, 110, 154,
	375, 115, 52, 143, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 311, 315, 309,
	310, 362, 363, 408, 409, 410, 386, 306, 0, 313,
	314, 0, 393, 70, 167, 168, 365, 36, 44, 77,
	415, 153, 0, 109, 63, 145, 0, 0, 340, 291,
	344, 0, 0, 0, 0, 0, 0, 0, 303, 304,
	116, 0, 348, 343, 370, 372, 381, 389, 0, 320,
	354, 0, 49, 403, 392, 0, 351, 405, 321, 339,
	413, 341, 342, 378, 300, 361, 100, 336, 318, 37,
	324, 293, 331, 294, 322, 353, 61, 319, 0, 394,
	364, 75, 165, 166, 411, 78, 369, 0, 124, 88,
	0, 0, 356, 396, 359, 387, 350, 379, 308, 368,
	406, 337, 374, 407, 0, 0, 0, 33, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 373,
	401, 333, 416, 0, 377, 292, 371, 0, 298, 301,
	412, 399, 328, 329, 663, 0, 0, 0, 0, 0,
	0, 355, 360, 384, 347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 325, 0, 367,
	0, 0, 0, 305, 299, 0, 352, 0, 0, 0,
	307, 0, 326, 385, 0, 289, 390, 397, 349, 84,
	151, 400, 346, 345, 107, 0, 53, 0, 130, 65,
	338, 76, 382, 414, 404, 357, 395, 323, 332, 55,
	330, 114, 101, 142, 366, 380, 112, 79, 134, 108,
	141, 402, 132, 150, 117, 45, 95, 35, 106, 113,
	0, 54, 0, 158, 159, 160, 161, 162, 163, 164,
	297, 290, 327, 388, 391, 312, 376, 302, 334, 383,
	335, 358, 317, 0, 0, 0, 0, 0, 0, 0,
	123, 122, 38, 131, 140, 51, 118, 41, 138, 127,
	129, 86, 71, 72, 120, 39, 40, 0, 111, 60,
	105, 64, 59, 98, 128, 89, 135, 136, 56, 155,
	58, 57, 126, 46, 148, 149, 43, 47, 147, 94,
	99, 97, 146, 133, 139, 87, 83, 0, 42, 137,
	85, 82, 74, 0, 62, 66, 103, 81, 104, 67,
	91, 90, 92, 0, 0, 96, 68, 0, 0, 0,
	295, 0, 125, 144, 156, 157, 296, 316, 398, 152,
	0, 0, 0, 93, 48, 69, 119, 73, 80, 110,
	154, 375, 115, 52, 143, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 315,
	309, 310, 362, 363, 408, 409, 410, 386, 306, 0,
	313, 314, 0, 393, 70, 167, 168, 365, 36, 44,
	77, 415, 153, 0, 109, 63, 145, 0, 0, 340,
	291, 344, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 116, 0, 348, 343, 370, 372, 381, 389, 0,
	320, 354, 0, 49, 403, 392, 0, 351, 405, 321,
	339, 413, 341, 342, 378, 300, 361, 100, 336, 318,
	37, 324, 293, 331, 294, 322, 353, 61, 319, 0,
	394, 364, 75, 165, 166, 411, 78, 369, 0, 124,
	88, 0, 0, 356, 396, 359, 387, 350, 379, 308,
	368, 406, 337, 374, 407, 0, 0, 0, 180, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	373, 401, 333, 416, 0, 377, 292, 371, 0, 298,
	301, 412, 399, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 355, 360, 384, 347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	367, 0, 0, 0, 305, 299, 0, 352, 0, 0,
	0, 307, 0, 326, 385, 0, 289, 390, 397, 349,
	84, 151, 400, 346, 345, 107, 0, 53, 0, 130,
	65, 338, 76, 382, 414, 404, 357, 395, 323, 332,
	55, 330, 114, 101, 142, 366, 380, 112, 79, 134,
	108, 141, 402, 132, 150, 117, 45, 95, 35, 106,
	113, 0, 54, 0, 158, 159, 160, 161, 162, 163,
	164, 297, 290, 327, 388, 391, 312, 376, 302, 334,
	383, 335, 358, 317, 0, 0, 0, 0, 0, 0,
	0, 123, 122, 38, 131, 140, 51, 118, 41, 138,
	127, 129, 86, 71, 72, 120, 39, 40, 0, 111,
	60, 105, 64, 59, 98, 128, 89, 135, 136, 56,
	155, 58, 57, 126, 46, 148, 149, 43, 47, 147,
	94, 99, 97, 146, 133, 139, 87, 83, 0, 42,
	137, 85, 82, 74, 0, 62, 66, 103, 81, 104,
	67, 91, 90, 92, 0, 0, 96, 68, 0, 0,
	0, 295, 0, 125, 144, 156, 157, 296, 316, 398,
	152, 0, 0, 0, 93, 48, 69, 119, 73, 80,
	110, 154, 375, 115, 52, 143, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 311,
	315, 309, 310, 362, 363, 408, 409, 410, 386, 306,
	0, 313, 314, 0, 393, 70, 167, 168, 365, 36,
	44, 77, 415, 153, 0, 109, 63, 145, 0, 0,
	340, 291, 344, 0, 0, 0, 0, 0, 0, 0,
	303, 304, 116, 0, 348, 343, 370, 372, 381, 389,
	0, 320, 354, 0, 49, 403, 392, 0, 351, 405,
	321, 339, 413, 341, 342, 378, 300, 361, 100, 336,
	318, 37, 324, 293, 331, 294, 322, 353, 61, 319,
	0, 394, 364, 75, 165, 166, 411, 78, 369, 0,
	124, 88, 0, 0, 356, 396, 359, 387, 350, 379,
	308, 368, 406, 337, 374, 407, 286, 0, 0, 33,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 373, 401, 333, 416, 0, 377, 292, 371, 0,
	298, 301, 412, 399, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 355, 360, 384, 347, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 367, 0, 0, 0, 305, 299, 0, 352, 0,
	0, 0, 307, 0, 326, 385, 0, 289, 390, 397,
	349, 84, 151, 400, 346, 345, 107, 0, 53, 0,
	130, 65, 338, 76, 382, 414, 404, 357, 395, 323,
	332, 55, 330, 114, 101, 142, 366, 380, 112, 79,
	134, 108, 141, 402, 132, 150, 117, 45, 95, 35,
	106, 113, 0, 54, 0, 158, 159, 160, 161, 162,
	163, 164, 297, 290, 327, 388, 391, 312, 376, 302,
	334, 383, 335, 358, 317, 0, 0, 0, 0, 0,
	0, 0, 123, 122, 38, 131, 140, 51, 118, 41,
	138, 127, 129, 86, 71, 72, 120, 39, 40, 0,
	111, 60, 105, 64, 59, 98, 128, 89, 135, 136,
	56, 155, 58, 57, 126, 46, 148, 149, 43, 47,
	147, 94, 99, 97, 146, 133, 139, 87, 83, 0,
	42, 137, 85, 82, 74, 0, 62, 66, 103, 81,
	104, 67, 91, 90, 92, 0, 0, 96, 68, 0,
	0, 0, 295, 0, 125, 144, 156, 157, 296, 316,
	398, 152, 0, 0, 0, 93, 48, 69, 119, 73,
	80, 110, 154, 375, 115, 52, 143, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 315, 309, 310, 362, 363, 408, 409, 410, 386,
	306, 0, 313, 314, 0, 393, 70, 167, 168, 365,
	36, 44, 77, 415, 153, 0, 109, 63, 145, 0,
	0, 340, 291, 344, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 116, 0, 348, 343, 370, 372, 381,
	389, 0, 320, 354, 0, 49, 403, 392, 0, 351,
	405, 321, 339, 413, 341, 342, 378, 300, 361, 100,
	336, 318, 37, 324, 293, 331, 294, 322, 353, 61,
	319, 0, 394, 364, 75, 165, 166, 411, 78, 369,
	0, 124, 88, 0, 0, 356, 396, 359, 387, 350,
	379, 308, 368, 406, 337, 374, 407, 0, 0, 0,
	33, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 373, 401, 333, 416, 0, 377, 292, 371,
	0, 298, 301, 412, 399, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 355, 360, 384, 347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	325, 0, 367, 0, 0, 0, 305, 299, 0, 352,
	0, 0, 0, 307, 0, 326, 385, 0, 289, 390,
	397, 349, 84, 151, 400, 346, 345, 107, 0, 53,
	0, 130, 65, 338, 76, 382, 414, 404, 357, 395,
	323, 332, 55, 330, 114, 101, 142, 366, 380, 112,
	79, 134, 108, 141, 402, 132, 150, 117, 45, 95,
	35, 106, 113, 0, 54, 0, 158, 159, 160, 161,
	162, 163, 164, 297, 290, 327, 388, 391, 312, 376,
	302, 334, 383, 335, 358, 317, 0, 0, 0, 0,
	0, 0, 0, 123, 122, 38, 131, 140, 51, 118,
	41, 138, 127, 129, 86, 71, 72, 120, 39, 40,
	0, 111, 60, 105, 64, 59, 98, 128, 89, 135,
	136, 56, 155, 58, 57, 126, 46, 148, 149, 43,
	47, 147, 94, 99, 97, 146, 133, 139, 87, 83,
	0, 42, 137, 85, 82, 74, 0, 62, 66, 103,
	81, 104, 67, 91, 90, 92, 0, 0, 96, 68,
	0, 0, 0, 295, 0, 125, 144, 156, 157, 296,
	316, 398, 152, 0, 0, 0, 93, 48, 69, 119,
	73, 80, 110, 154, 375, 115, 52, 143, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 315, 309, 310, 362, 363, 408, 409, 410,
	386, 306, 0, 313, 314, 0, 393, 70, 167, 168,
	365, 36, 44, 77, 415, 153, 0, 109, 63, 145,
	0, 0, 340, 291, 344, 0, 0, 0, 0, 0,
	0, 0, 303, 304, 116, 0, 348, 343, 370, 372,
	381, 389, 100, 320, 354, 37, 49, 0, 695, 0,
	0, 0, 61, 694, 0, 0, 0, 75, 165, 166,
	737, 78, 738, 0, 124, 88, 0, 0, 0, 0,
	728, 729, 0, 0, 0, 0, 0, 0, 1795, 0,
	286, 0, 0, 586, 717, 714, 715, 719, 720, 721,
	722, 0, 0, 50, 718, 723, 582, 583, 1796, 0,
	0, 0, 692, 707, 0, 736, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 704,
	705, 0, 0, 0, 0, 750, 0, 706, 0, 0,
	702, 703, 708, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 151, 0, 0, 748,
	107, 0, 53, 0, 130, 65, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 114, 101, 142,
	0, 102, 112, 79, 134, 108, 141, 0, 132, 150,
	117, 45, 95, 35, 106, 113, 0, 54, 0, 158,
	159, 160, 161, 162, 163, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 122, 38, 131,
	140, 51, 118, 41, 138, 127, 129, 86, 71, 72,
	120, 39, 40, 0, 111, 60, 105, 64, 59, 98,
	128, 89, 135, 136, 56, 155, 58, 57, 126, 46,
	148, 149, 43, 47, 147, 94, 99, 97, 146, 133,
	139, 87, 83, 0, 42, 137, 85, 82, 74, 0,
	62, 66, 103, 81, 104, 67, 91, 90, 92, 752,
	0, 96, 68, 0, 0, 0, 0, 0, 125, 144,
	156, 157, 0, 0, 0, 152, 0, 0, 0, 93,
	48, 69, 119, 73, 80, 110, 154, 0, 115, 52,
	143, 121, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 739, 749, 745, 746, 743, 744,
	742, 741, 740, 751, 730, 731, 732, 733, 735, 0,
	70, 167, 168, 734, 36, 44, 77, 0, 153, 0,
	109, 63, 145, 100, 0, 0, 37, 978, 0, 695,
	0, 0, 0, 61, 694, 0, 0, 116, 75, 165,
	166, 737, 78, 738, 0, 124, 88, 0, 747, 49,
	0, 728, 729, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 586, 717, 714, 715, 719, 720,
	721, 722, 0, 0, 50, 718, 723, 582, 583, 0,
	0, 0, 0, 692, 707, 0, 736, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	704, 705, 983, 0, 0, 0, 750, 0, 706, 0,
	0, 702, 703, 708, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 151, 0, 0,
	748, 107, 0, 53, 0, 130, 65, 0, 76, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 114, 101,
	142, 0, 102, 112, 79, 134, 108, 141, 0, 132,
	150, 117, 45, 95, 35, 106, 113, 0, 54, 0,
	158, 159, 160, 161, 162, 163, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 122, 38,
	131, 140, 51, 118, 41, 138, 127, 129, 86, 71,
	72, 120, 39, 40, 0, 111, 60, 105, 64, 59,
	98, 128, 89, 135, 136, 56, 155, 58, 57, 126,
	46, 148, 149, 43, 47, 147, 94, 99, 97, 146,
	133, 139, 87, 83, 0, 42, 137, 85, 82, 74,
	0, 62, 66, 103, 81, 104, 67, 91, 90, 92,
	752, 0, 96, 68, 0, 0, 0, 0, 0, 125,
	144, 156, 157, 0, 0, 0, 152, 0, 0, 0,
	93, 48, 69, 119, 73, 80, 110, 154, 0, 115,
	52, 143, 121, 725, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 739, 749, 745, 746, 743,
	744, 742, 741, 740, 751, 730, 731, 732, 733, 735,
	0, 70, 167, 168, 734, 36, 44, 77, 0, 153,
	0, 109, 63, 145, 100, 0, 0, 37, 0, 0,
	695, 0, 0, 0, 61, 694, 0, 0, 116, 75,
	165, 166, 737, 78, 738, 0, 124, 88, 0, 747,
	49, 0, 728, 729, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 973, 586, 717, 714, 715, 719,
	720, 721, 722, 0, 0, 50, 718, 723, 582, 583,
	0, 0, 0, 0, 692, 707, 0, 736, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 704, 705, 0, 0, 0, 0, 750, 0, 706,
	0, 0, 702, 703, 708, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 151, 0,
	0, 748, 107, 0, 53, 0, 130, 65, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 114,
	101, 142, 0, 102, 112, 79, 134, 108, 141, 0,
	132, 150, 117, 45, 95, 35, 106, 113, 0, 54,
	0, 158, 159, 160, 161, 162, 163, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 122,
	38, 131, 140, 51, 118, 41, 138, 127, 129, 86,
	71, 72, 120, 39, 40, 0, 111, 60, 105, 64,
	59, 98, 128, 89, 135, 136, 56, 155, 58, 57,
	126, 46, 148, 149, 43, 47, 147, 94, 99, 97,
	146, 133, 139, 87, 83, 0, 42, 137, 85, 82,
	74, 0, 62, 66, 103, 81, 104, 67, 91, 90,
	92, 752, 0, 96, 68, 0, 0, 0, 0, 0,
	125, 144, 156, 157, 0, 0, 0, 152, 0, 0,
	0, 93, 48, 69, 119, 73, 80, 110, 154, 0,
	115, 52, 143, 121, 725, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 739, 749, 745, 746,
	743, 744, 742, 741, 740, 751, 730, 731, 732, 733,
	735, 0, 70, 167, 168, 734, 36, 44, 77, 0,
	153, 0, 109, 63, 145, 100, 0, 0, 37, 0,
	0, 695, 0, 0, 0, 61, 694, 0, 0, 116,
	75, 165, 166, 737, 78, 738, 0, 124, 88, 0,
	747, 49, 0, 728, 729, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 586, 717, 714, 715,
	719, 720, 721, 722, 0, 0, 50, 718, 723, 582,
	583, 0, 0, 0, 0, 692, 707, 0, 736, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 704, 705, 983, 0, 0, 0, 750, 0,
	706, 0, 0, 702, 703, 708, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 151,
	0, 0, 748, 107, 0, 53, 0, 130, 65, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	114, 101, 142, 0, 102, 112, 79, 134, 108, 141,
	0, 132, 150, 117, 45, 95, 35, 106, 113, 0,
	54, 0, 158, 159, 160, 161, 162, 163, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	122, 38, 131, 140, 51, 118, 41, 138, 127, 129,
	86, 71, 72, 120, 39, 40, 0, 111, 60, 105,
	64, 59, 98, 128, 89, 135, 136, 56, 155, 58,
	57, 126, 46, 148, 149, 43, 47, 147, 94, 99,
	97, 146, 133, 139, 87, 83, 0, 42, 137, 85,
	82, 74, 0, 62, 66, 103, 81, 104, 67, 91,
	90, 92, 752, 0, 96, 68, 0, 0, 0, 0,
	0, 125, 144, 156, 157, 0, 0, 0, 152, 0,
	0, 0, 93, 48, 69, 119, 73, 80, 110, 154,
	0, 115, 52, 143, 121, 725, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 739, 749, 745,
	746, 743, 744, 742, 741, 740, 751, 730, 731, 732,
	733, 735, 0, 70, 167, 168, 734, 36, 44, 77,
	0, 153, 0, 109, 63, 145, 100, 0, 0, 37,
	0, 0, 695, 0, 0, 0, 61, 694, 0, 0,
	116, 75, 165, 166, 737, 78, 738, 0, 124, 88,
	0, 747, 49, 0, 728, 729, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 586, 717, 714,
	715, 719, 720, 721, 722, 0, 0, 50, 718, 723,
	582, 583, 0, 0, 0, 0, 692, 707, 0, 736,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 704, 705, 0, 0, 0, 0, 750,
	0, 706, 0, 0, 1124, 703, 708, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	151, 0, 0, 748, 107, 0, 53, 0, 130, 65,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 1126,
	0, 114, 101, 142, 0, 102, 112, 79, 134, 108,
	141, 0, 132, 150, 117, 45, 95, 35, 106, 113,
	0, 54, 0, 158, 159, 160, 161, 162, 163, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 122, 38, 131, 140, 51, 118, 1135, 1141, 1139,
	129, 86, 1136, 72, 120, 1134, 40, 0, 1143, 60,
	105, 1142, 1128, 1138, 1140, 1137, 1132, 136, 1127, 155,
	1145, 1144, 1146, 1125, 1148, 149, 43, 47, 1152, 1149,
	1151, 1150, 146, 1147, 139, 87, 83, 0, 42, 137,
	85, 82, 1129, 1130, 62, 66, 103, 81, 104, 67,
	91, 90, 92, 752, 0, 96, 68, 0, 0, 0,
	0, 0, 1131, 1133, 156, 157, 0, 0, 0, 152,
	0, 0, 0, 93, 48, 69, 119, 73, 80, 110,
	154, 0, 115, 52, 143, 121, 725, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 739, 749,
	745, 746, 743, 744, 742, 741, 740, 751, 730, 731,
	732, 733, 735, 0, 70, 167, 168, 734, 36, 44,
	77, 0, 153, 0, 109, 63, 145, 802, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 116, 37, 0, 0, 695, 0, 0, 0, 61,
	694, 0, 747, 49, 75, 165, 166, 737, 78, 738,
	0, 124, 88, 0, 0, 0, 0, 728, 729, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	586, 717, 714, 715, 719, 720, 721, 722, 0, 0,
	50, 718, 723, 582, 583, 0, 0, 0, 0, 692,
	707, 0, 736, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 704, 705, 0, 0,
	0, 0, 750, 0, 706, 0, 0, 702, 703, 708,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 151, 0, 0, 748, 107, 0, 53,
	0, 130, 65, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 114, 101, 142, 0, 102, 112,
	79, 134, 108, 141, 0, 132, 150, 117, 45, 95,
	35, 106, 113, 0, 54, 0, 158, 159, 160, 161,
	162, 163, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 122, 38, 131, 140, 51, 118,
	41, 138, 127, 129, 86, 71, 72, 120, 39, 40,
	0, 111, 60, 105, 64, 59, 98, 128, 89, 135,
	136, 56, 155, 58, 57, 126, 46, 148, 149, 43,
	47, 147, 94, 99, 97, 146, 133, 139, 87, 83,
	0, 42, 137, 85, 82, 74, 0, 62, 66, 103,
	81, 104, 67, 91, 90, 92, 752, 0, 96, 68,
	0, 0, 0, 0, 0, 125, 144, 156, 157, 0,
	0, 0, 152, 0, 0, 0, 93, 48, 69, 119,
	73, 80, 110, 154, 0, 115, 52, 143, 121, 725,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 739, 749, 745, 746, 743, 744, 742, 741, 740,
	751, 730, 731, 732, 733, 735, 0, 70, 167, 168,
	734, 36, 44, 77, 0, 153, 0, 109, 63, 145,
	100, 0, 0, 37, 0, 0, 695, 0, 0, 0,
	61, 694, 0, 0, 116, 75, 165, 166, 737, 78,
	738, 0, 124, 88, 0, 747, 49, 0, 728, 729,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 586, 717, 714, 715, 719, 720, 721, 722, 0,
	0, 50, 718, 723, 582, 583, 0, 0, 0, 0,
	692, 707, 0, 736, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 704, 705, 0,
	0, 0, 0, 750, 0, 706, 0, 0, 702, 703,
	708, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 151, 0, 0, 748, 107, 0,
	53, 0, 130, 65, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 114, 101, 142, 0, 102,
	112, 79, 134, 108, 141, 0, 132, 150, 117, 45,
	95, 35, 106, 113, 0, 54, 0, 158, 159, 160,
	161, 162, 163, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 122, 38, 131, 140, 51,
	118, 41, 138, 127, 129, 86, 71, 72, 120, 39,
	40, 0, 111, 60, 105, 64, 59, 98, 128, 89,
	135, 136, 56, 155, 58, 57, 126, 46, 148, 149,
	43, 47, 147, 94, 99, 97, 146, 133, 139, 87,
	83, 0, 42, 137, 85, 82, 74, 0, 62, 66,
	103, 81, 104, 67, 91, 90, 92, 752, 0, 96,
	68, 0, 0, 0, 0, 0, 125, 144, 156, 157,
	0, 0, 0, 152, 0, 0, 0, 93, 48, 69,
	119, 73, 80, 110, 154, 0, 115, 52, 143, 121,
	725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 739, 749, 745, 746, 743, 744, 742, 741,
	740, 751, 730, 731, 732, 733, 735, 0, 70, 167,
	168, 734, 36, 44, 77, 0, 153, 0, 109, 63,
	145, 100, 0, 0, 37, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 0, 116, 75, 165, 166, 737,
	78, 738, 0, 124, 88, 0, 747, 49, 0, 728,
	729, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 586, 717, 714, 715, 719, 720, 721, 722,
	0, 0, 50, 718, 723, 582, 583, 0, 0, 0,
	0, 0, 707, 0, 736, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 704, 705,
	0, 0, 0, 0, 750, 0, 706, 0, 0, 702,
	703, 708, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 151, 0, 0, 748, 107,
	0, 53, 0, 130, 65, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 114, 101, 142, 1949,
	102, 112, 79, 134, 108, 141, 0, 132, 150, 117,
	45, 95, 35, 106, 113, 0, 54, 0, 158, 159,
	160, 161, 162, 163, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 122, 38, 131, 140,
	51, 118, 41, 138, 127, 129, 86, 71, 72, 120,
	39, 40, 0, 111, 60, 105, 64, 59, 98, 128,
	89, 135, 136, 56, 155, 58, 57, 126, 46, 148,
	149, 43, 47, 147, 94, 99, 97, 146, 133, 139,
	87, 83, 0, 42, 137, 85, 82, 74, 0, 62,
	66, 103, 81, 104, 67, 91, 90, 92, 752, 0,
	96, 68, 0, 0, 0, 0, 0, 125, 144, 156,
	157, 0, 0, 0, 152, 0, 0, 0, 93, 48,
	69, 119, 73, 80, 110, 154, 0, 115, 52, 143,
	121, 725, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 739, 749, 745, 746, 743, 744, 742,
	741, 740, 751, 730, 731, 732, 733, 735, 0, 70,
	167, 168, 734, 36, 44, 77, 0, 153, 0, 109,
	63, 145, 100, 0, 0, 37, 0, 0, 695, 0,
	0, 0, 61, 0, 0, 0, 116, 75, 165, 166,
	737, 78, 738, 0, 124, 88, 0, 747, 49, 0,
	728, 729, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 586, 717, 714, 715, 719, 720, 721,
	722, 0, 0, 50, 718, 723, 582, 583, 0, 0,
	0, 0, 0, 707, 0, 736, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 704,
	705, 0, 0, 0, 0, 750, 0, 706, 0, 0,
	702, 703, 708, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 151, 0, 0, 748,
	107, 0, 53, 0, 130, 65, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 114, 101, 142,
	0, 102, 112, 79, 134, 108, 141, 0, 132, 150,
	117, 45, 95, 35, 106, 113, 0, 54, 0, 158,
	159, 160, 161, 162, 163, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 122, 38, 131,
	140, 51, 118, 41, 138, 127, 129, 86, 71, 72,
	120, 39, 40, 0, 111, 60, 105, 64, 59, 98,
	128, 89, 135, 136, 56, 155, 58, 57, 126, 46,
	148, 149, 43, 47, 147, 94, 99, 97, 146, 133,
	139, 87, 83, 0, 42, 137, 85, 82, 74, 0,
	62, 66, 103, 81, 104, 67, 91, 90, 92, 752,
	0, 96, 68, 0, 0, 0, 0, 0, 125, 144,
	156, 157, 0, 0, 0, 152, 0, 0, 0, 93,
	48, 69, 119, 73, 80, 110, 154, 0, 115, 52,
	143, 121, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 739, 749, 745, 746, 743, 744,
	742, 741, 740, 751, 730, 731, 732, 733, 735, 0,
	70, 167, 168, 734, 36, 44, 77, 0, 153, 0,
	109, 63, 145, 100, 0, 0, 37, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 0, 116, 75, 165,
	166, 737, 78, 738, 0, 124, 88, 0, 747, 49,
	0, 728, 729, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 586, 717, 714, 715, 719, 720,
	721, 722, 0, 0, 50, 718, 723, 582, 583, 0,
	0, 0, 0, 0, 707, 0, 736, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	704, 705, 0, 0, 0, 0, 750, 0, 706, 0,
	0, 702, 703, 708, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 151, 0, 0,
	748, 107, 0, 53, 0, 130, 65, 0, 76, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 114, 101,
	142, 0, 102, 112, 79, 134, 108, 141, 0, 132,
	150, 117, 45, 95, 35, 106, 113, 0, 54, 0,
	158, 159, 160, 161, 162, 163, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 122, 38,
	131, 140, 51, 118, 41, 138, 127, 129, 86, 71,
	72, 120, 39, 40, 0, 111, 60, 105, 64, 59,
	98, 128, 89, 135, 136, 56, 155, 58, 57, 126,
	46, 148, 149, 43, 47, 147, 94, 99, 97, 146,
	133, 139, 87, 83, 0, 42, 137, 85, 82, 74,
	0, 62, 66, 103, 81, 104, 67, 91, 90, 92,
	752, 0, 96, 68, 0, 0, 0, 0, 0, 125,
	144, 156, 157, 0, 0, 0, 152, 0, 0, 0,
	93, 48, 69, 119, 73, 80, 110, 154, 0, 115,
	52, 143, 121, 725, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 739, 749, 745, 746, 743,
	744, 742, 741, 740, 751, 730, 731, 732, 733, 735,
	0, 70, 167, 168, 734, 36, 44, 77, 0, 153,
	0, 109, 63, 145, 100, 0, 0, 37, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 0, 116, 75,
	165, 166, 737, 78, 738, 0, 124, 88, 0, 747,
	49, 0, 728, 729, 0, 0, 0, 0, 0, 0,
	0, 0, 998, 0, 0, 586, 717, 714, 715, 719,
	720, 721, 722, 0, 0, 50, 718, 723, 582, 583,
	0, 0, 0, 0, 0, 707, 0, 736, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 704, 705, 0, 0, 0, 0, 750, 0, 706,
	0, 0, 702, 703, 708, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 151, 0,
	0, 748, 107, 0, 53, 0, 130, 65, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 114,
	101, 142, 0, 102, 112, 79, 134, 108, 141, 0,
	132, 150, 117, 45, 95, 35, 106, 113, 0, 54,
	0, 158, 159, 160, 161, 162, 163, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 122,
	38, 131, 140, 51, 118, 41, 138, 127, 129, 86,
	71, 72, 120, 39, 40, 0, 111, 60, 105, 64,
	59, 98, 128, 89, 135, 136, 56, 155, 58, 57,
	126, 46, 148, 149, 43, 47, 147, 94, 99, 97,
	146, 133, 139, 87, 83, 0, 42, 137, 85, 82,
	74, 0, 62, 66, 103, 81, 104, 67, 91, 90,
	92, 752, 0, 96, 68, 0, 0, 0, 0, 0,
	125, 144, 156, 157, 0, 0, 0, 152, 0, 0,
	0, 93, 48, 69, 119, 73, 80, 110, 154, 0,
	115, 52, 143, 121, 725, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 739, 749, 745, 746,
	743, 744, 742, 741, 740, 751, 730, 731, 732, 733,
	735, 0, 70, 167, 168, 734, 36, 44, 77, 0,
	153, 0, 109, 63, 145, 100, 0, 0, 37, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 0, 116,
	75, 165, 166, 0, 78, 0, 0, 124, 88, 0,
	747, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 757, 0, 0, 586, 0, 568, 569,
	570, 571, 0, 0, 0, 0, 50, 574, 572, 582,
	583, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 151,
	0, 0, 0, 107, 0, 53, 0, 130, 65, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	114, 101, 142, 0, 102, 112, 79, 134, 108, 141,
	0, 132, 150, 117, 45, 95, 35, 106, 113, 0,
	54, 0, 158, 159, 160, 161, 162, 163, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	122, 38, 131, 140, 51, 118, 41, 138, 127, 129,
	86, 71, 72, 120, 39, 40, 0, 111, 60, 105,
	64, 59, 98, 128, 89, 135, 136, 56, 155, 58,
	57, 126, 46, 148, 149, 43, 47, 147, 94, 99,
	97, 146, 133, 139, 87, 83, 0, 42, 137, 85,
	82, 74, 0, 62, 66, 103, 81, 104, 67, 91,
	90, 92, 0, 0, 576, 581, 0, 0, 0, 0,
	0, 125, 144, 156, 157, 0, 0, 0, 152, 0,
	0, 0, 93, 48, 69, 119, 73, 80, 110, 154,
	0, 115, 52, 143, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 578, 0, 580,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 70, 167, 168, 0, 36, 44, 77,
	0, 153, 0, 109, 63, 145, 100, 0, 0, 37,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 0,
	116, 75, 165, 166, 0, 78, 0, 0, 124, 88,
	0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 566, 0, 0, 586, 0, 568,
	569, 570, 571, 0, 0, 0, 0, 50, 574, 572,
	582, 583, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	151, 0, 0, 0, 107, 0, 53, 0, 130, 65,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 114, 101, 142, 0, 102, 112, 79, 134, 108,
	141, 0, 132, 150, 117, 45, 95, 35, 106, 113,
	0, 54, 0, 158, 159, 160, 161, 162, 163, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 122, 38, 131, 140, 51, 118, 41, 138, 127,
	129, 86, 71, 72, 120, 39, 40, 0, 111, 60,
	105, 64, 59, 98, 128, 89, 135, 136, 56, 155,
	58, 57, 126, 46, 148, 149, 43, 47, 147, 94,
	99, 97, 146, 133, 139, 87, 83, 0, 42, 137,
	85, 82, 74, 0, 62, 66, 103, 81, 104, 67,
	91, 90, 92, 0, 0, 576, 581, 0, 0, 0,
	0, 0, 125, 144, 156, 157, 0, 0, 0, 152,
	0, 0, 0, 93, 48, 69, 119, 73, 80, 110,
	154, 0, 115, 52, 143, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 0,
	37, 0, 0, 0, 0, 0, 0, 61, 578, 0,
	580, 579, 75, 165, 166, 0, 78, 0, 0, 124,
	88, 0, 0, 0, 70, 167, 168, 0, 36, 44,
	77, 0, 153, 0, 109, 63, 145, 0, 33, 717,
	1106, 715, 719, 720, 721, 722, 0, 0, 50, 718,
	723, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 151, 0, 0, 0, 107, 0, 53, 0, 130,
	65, 0, 76, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 114, 101, 142, 0, 102, 112, 79, 134,
	108, 141, 0, 132, 150, 117, 45, 95, 35, 106,
	113, 0, 54, 0, 158, 159, 160, 161, 162, 163,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 122, 38, 131, 140, 51, 118, 41, 138,
	127, 129, 86, 71, 72, 120, 39, 40, 0, 111,
	60, 105, 64, 59, 98, 128, 89, 135, 136, 56,
	155, 58, 57, 126, 46, 148, 149, 43, 47, 147,
	94, 99, 97, 146, 133, 139, 87, 83, 0, 42,
	137, 85, 82, 74, 0, 62, 66, 103, 81, 104,
	67, 91, 90, 92, 0, 0, 96, 68, 0, 0,
	0, 0, 0, 125, 144, 156, 157, 0, 0, 0,
	152, 0, 0, 0, 93, 48, 69, 119, 73, 80,
	110, 154, 0, 115, 52, 143, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 0, 37, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 226, 0, 75, 165, 166, 0, 78, 0,
	0, 124, 88, 0, 0, 70, 167, 168, 0, 36,
	44, 77, 0, 153, 0, 109, 63, 145, 1258, 0,
	33, 0, 1256, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 49, 0, 0, 1255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 151, 0, 0, 0, 107, 0, 53,
	0, 130, 65, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 114, 101, 142, 0, 102, 112,
	79, 134, 108, 141, 0, 132, 150, 117, 45, 95,
	35, 106, 113, 0, 54, 0, 158, 159, 160, 161,
	162, 163, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 122, 38, 131, 140, 51, 118,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	0, 253, 254, 105, 255, 256, 257, 259, 258, 228,
	229, 230, 234, 232, 231, 233, 205, 207, 149, 203,
	206, 212, 208, 209, 210, 224, 213, 214, 215, 216,
	217, 218, 219, 220, 221, 222, 223, 225, 235, 236,
	237, 238, 239, 240, 241, 242, 0, 0, 96, 68,
	0, 0, 0, 0, 0, 125, 144, 156, 157, 0,
	0, 0, 152, 0, 0, 0, 93, 48, 69, 119,
	73, 80, 110, 154, 0, 115, 52, 143, 121, 100,
	0, 0, 37, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 226, 0, 75, 165, 166, 0, 78, 0,
	0, 124, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 70, 167, 168,
	33, 36, 204, 77, 0, 153, 0, 109, 63, 145,
	50, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 151, 0, 0, 0, 107, 0, 53,
	0, 130, 65, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 114, 101, 142, 0, 102, 112,
	79, 134, 108, 141, 0, 132, 150, 117, 45, 95,
	35, 106, 113, 0, 54, 0, 158, 159, 160, 161,
	162, 163, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 122, 38, 131, 140, 51, 118,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	0, 253, 254, 105, 255, 256, 257, 259, 258, 228,
	965, 230, 234, 232, 231, 233, 205, 207, 149, 203,
	964, 212, 208, 209, 210, 224, 968, 214, 215, 216,
	217, 218, 219, 220, 221, 969, 970, 225, 235, 236,
	237, 238, 239, 240, 241, 242, 0, 0, 96, 68,
	966, 0, 0, 0, 0, 125, 144, 156, 157, 0,
	0, 0, 152, 0, 0, 0, 93, 48, 69, 119,
	73, 80, 110, 154, 0, 115, 52, 143, 121, 100,
	0, 0, 37, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 226, 0, 75, 165, 166, 0, 78, 0,
	0, 124, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 70, 167, 168,
	33, 36, 204, 77, 0, 153, 0, 109, 63, 145,
	50, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 151, 0, 0, 0, 107, 0, 53,
	0, 130, 65, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 114, 101, 142, 0, 102, 112,
	79, 134, 108, 141, 0, 132, 150, 117, 45, 95,
	35, 106, 113, 0, 54, 0, 158, 159, 160, 161,
	162, 163, 164, 0, 0, 0, 0, 1577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 122, 38, 131, 140, 51, 118,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	0, 253, 254, 105, 255, 256, 257, 259, 258, 228,
	229, 230, 234, 232, 231, 233, 205, 207, 149, 203,
	206, 212, 208, 209, 210, 224, 213, 214, 215, 216,
	217, 218, 219, 220, 221, 222, 223, 225, 235, 236,
	237, 238, 239, 240, 241, 242, 0, 0, 96, 68,
	0, 0, 0, 0, 0, 125, 144, 156, 157, 0,
	0, 0, 152, 0, 0, 0, 93, 48, 69, 119,
	73, 80, 110, 154, 0, 115, 52, 143, 121, 0,
	0, 0, 0, 100, 0, 0, 37, 0, 1188, 0,
	0, 0, 0, 61, 0, 0, 0, 0, 75, 165,
	166, 0, 78, 0, 0, 124, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 70, 167, 168,
	0, 36, 204, 77, 33, 153, 1190, 109, 63, 145,
	0, 0, 0, 0, 50, 0, 0, 0, 0, 0,
	0, 853, 852, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 854, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 151, 0, 0,
	0, 107, 0, 53, 0, 130, 65, 0, 76, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 114, 101,
	142, 0, 102, 112, 79, 134, 108, 141, 0, 132,
	150, 117, 45, 95, 35, 106, 113, 0, 54, 0,
	158, 159, 160, 161, 162, 163, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 122, 38,
	131, 140, 51, 118, 41, 138, 127, 129, 86, 71,
	72, 120, 39, 40, 0, 111, 60, 105, 64, 59,
	98, 128, 89, 135, 136, 56, 155, 58, 57, 126,
	46, 148, 149, 43, 47, 147, 94, 99, 97, 146,
	133, 139, 87, 83, 0, 42, 137, 85, 82, 74,
	0, 62, 66, 103, 81, 104, 67, 91, 90, 92,
	0, 0, 96, 68, 0, 0, 0, 0, 0, 125,
	144, 156, 157, 0, 0, 0, 152, 0, 0, 0,
	93, 48, 69, 119, 73, 80, 110, 154, 0, 115,
	52, 143, 121, 100, 0, 0, 37, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 226, 0, 75, 165,
	166, 0, 78, 0, 0, 124, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 70, 167, 168, 33, 36, 44, 77, 0, 153,
	0, 109, 63, 145, 50, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 151, 0, 0,
	0, 107, 0, 53, 0, 130, 65, 0, 76, 0,
	0, 0, 0, 0, 0, 0, 227, 0, 114, 101,
	142, 0, 102, 112, 79, 134, 108, 141, 0, 132,
	150, 117, 45, 95, 35, 106, 113, 0, 54, 0,
	158, 159, 160, 161, 162, 163, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 122, 38,
	131, 140, 51, 118, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 0, 253, 254, 105, 255, 256,
	257, 259, 258, 228, 229, 230, 234, 232, 231, 233,
	205, 207, 149, 203, 206, 212, 208, 209, 210, 224,
	213, 214, 215, 216, 217, 218, 219, 220, 221, 222,
	223, 225, 235, 236, 237, 238, 239, 240, 241, 242,
	0, 0, 96, 68, 0, 0, 0, 0, 0, 125,
	144, 156, 157, 0, 0, 0, 152, 0, 0, 0,
	93, 48, 69, 119, 73, 80, 110, 154, 0, 115,
	52, 143, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 0, 0, 37, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 0, 0,
	75, 165, 166, 0, 78, 0, 0, 124, 88, 0,
	0, 70, 167, 168, 0, 36, 204, 77, 0, 153,
	0, 109, 63, 145, 1258, 0, 33, 0, 1256, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 1255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 151,
	0, 0, 0, 107, 0, 53, 0, 130, 65, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	114, 101, 142, 0, 102, 112, 79, 134, 108, 141,
	0, 132, 150, 117, 45, 95, 35, 106, 113, 0,
	54, 0, 158, 159, 160, 161, 162, 163, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	122, 38, 131, 140, 51, 118, 41, 138, 127, 129,
	86, 71, 72, 120, 39, 40, 0, 111, 60, 105,
	64, 59, 98, 128, 89, 135, 136, 56, 155, 58,
	57, 126, 46, 148, 149, 43, 47, 147, 94, 99,
	97, 146, 133, 139, 87, 83, 0, 42, 137, 85,
	82, 74, 0, 62, 66, 103, 81, 104, 67, 91,
	90, 92, 0, 0, 96, 68, 0, 0, 0, 0,
	0, 125, 144, 156, 157, 0, 0, 0, 152, 0,
	0, 0, 93, 48, 69, 119, 73, 80, 110, 154,
	0, 115, 52, 143, 121, 0, 0, 0, 0, 100,
	0, 0, 37, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 0, 0, 75, 165, 166, 0, 78, 0,
	0, 124, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 70, 167, 168, 0, 36, 44, 77,
	33, 153, 32, 109, 63, 145, 0, 0, 0, 0,
	50, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 434, 84, 151, 0, 0, 0, 429, 0, 428,
	0, 430, 431, 0, 76, 0, 0, 432, 435, 0,
	0, 0, 55, 0, 114, 101, 142, 0, 102, 112,
	79, 134, 108, 141, 0, 132, 150, 117, 45, 95,
	35, 106, 113, 0, 54, 0, 158, 159, 160, 161,
	162, 163, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 122, 38, 131, 140, 51, 118,
	41, 138, 127, 129, 86, 71, 72, 120, 39, 40,
	0, 111, 60, 105, 64, 59, 98, 128, 89, 135,
	136, 56, 155, 58, 57, 126, 46, 148, 149, 43,
	47, 147, 94, 99, 97, 146, 133, 139, 87, 83,
	0, 42, 137, 85, 82, 74, 0, 62, 66, 103,
	81, 104, 67, 91, 90, 92, 0, 0, 96, 68,
	0, 0, 0, 0, 0, 125, 144, 156, 157, 0,
	0, 0, 152, 0, 0, 0, 93, 48, 69, 119,
	73, 80, 110, 154, 0, 115, 52, 143, 121, 0,
	802, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 0, 0, 37, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 0, 0, 75, 165, 166,
	0, 78, 0, 0, 124, 88, 0, 70, 167, 168,
	0, 36, 44, 77, 0, 153, 0, 109, 63, 145,
	286, 0, 0, 180, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 50, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 151, 0, 0, 0,
	107, 0, 53, 0, 130, 65, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 114, 101, 142,
	0, 102, 112, 79, 134, 108, 141, 0, 132, 150,
	117, 45, 95, 35, 106, 113, 0, 54, 0, 158,
	159, 160, 161, 162, 163, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 122, 38, 131,
	140, 51, 118, 41, 138, 127, 129, 86, 71, 72,
	120, 39, 40, 0, 111, 60, 105, 64, 59, 98,
	128, 89, 135, 136, 56, 155, 58, 57, 126, 46,
	148, 149, 43, 47, 147, 94, 99, 97, 146, 133,
	139, 87, 83, 0, 42, 137, 85, 82, 74, 0,
	62, 66, 103, 81, 104, 67, 91, 90, 92, 0,
	0, 96, 68, 0, 0, 0, 0, 0, 125, 144,
	156, 157, 0, 0, 0, 152, 0, 0, 0, 93,
	48, 69, 119, 73, 80, 110, 154, 0, 115, 52,
	143, 121, 0, 0, 0, 0, 100, 0, 0, 37,
	0, 1698, 0, 0, 0, 0, 61, 0, 0, 0,
	0, 75, 165, 166, 0, 78, 0, 0, 124, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 167, 168, 0, 36, 44, 77, 180, 153, 1700,
	109, 63, 145, 0, 0, 0, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	151, 0, 0, 0, 107, 0, 53, 0, 130, 65,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 114, 101, 142, 0, 102, 112, 79, 134, 108,
	141, 0, 132, 150, 117, 45, 95, 35, 106, 113,
	0, 54, 0, 158, 159, 160, 161, 162, 163, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 122, 38, 131, 140, 51, 118, 41, 138, 127,
	129, 86, 71, 72, 120, 39, 40, 0, 111, 60,
	105, 64, 59, 98, 128, 89, 135, 136, 56, 155,
	58, 57, 126, 46, 148, 149, 43, 47, 147, 94,
	99, 97, 146, 133, 139, 87, 83, 0, 42, 137,
	85, 82, 74, 0, 62, 66, 103, 81, 104, 67,
	91, 90, 92, 0, 0, 96, 68, 0, 0, 0,
	0, 0, 125, 144, 156, 157, 0, 0, 0, 152,
	0, 0, 0, 93, 48, 69, 119, 73, 80, 110,
	154, 0, 115, 52, 143, 121, 0, 802, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 0, 37, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 0, 0, 75, 165, 166, 0, 78, 0,
	0, 124, 88, 0, 70, 167, 168, 0, 36, 44,
	77, 0, 153, 0, 109, 63, 145, 286, 0, 0,
	33, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 151, 0, 0, 0, 107, 0, 53,
	0, 130, 65, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 114, 101, 142, 0, 102, 112,
	79, 134, 108, 141, 0, 132, 150, 117, 45, 95,
	35, 106, 113, 0, 54, 0, 158, 159, 160, 161,
	162, 163, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 122, 38, 131, 140, 51, 118,
	41, 138, 127, 129, 86, 71, 72, 120, 39, 40,
	0, 111, 60, 105, 64, 59, 98, 128, 89, 135,
	136, 56, 155, 58, 57, 126, 46, 148, 149, 43,
	47, 147, 94, 99, 97, 146, 133, 139, 87, 83,
	0, 42, 137, 85, 82, 74, 0, 62, 66, 103,
	81, 104, 67, 91, 90, 92, 0, 0, 96, 68,
	0, 0, 0, 0, 0, 125, 144, 156, 157, 0,
	0, 0, 152, 0, 0, 0, 93, 48, 69, 119,
	73, 80, 110, 154, 0, 115, 52, 143, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 0, 0, 37, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 0, 0, 75, 165, 166,
	0, 78, 0, 0, 124, 88, 0, 70, 167, 168,
	0, 36, 44, 77, 0, 153, 0, 109, 63, 145,
	286, 0, 0, 180, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 50, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 151, 0, 0, 0,
	107, 0, 53, 0, 130, 65, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 114, 101, 142,
	0, 102, 112, 79, 134, 108, 141, 0, 132, 150,
	117, 45, 95, 35, 106, 113, 0, 54, 0, 158,
	159, 160, 161, 162, 163, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 122, 38, 131,
	140, 51, 118, 41, 138, 127, 129, 86, 71, 72,
	120, 39, 40, 0, 111, 60, 105, 64, 59, 98,
	128, 89, 135, 136, 56, 155, 58, 57, 126, 46,
	148, 149, 43, 47, 147, 94, 99, 97, 146, 133,
	139, 87, 83, 0, 42, 137, 85, 82, 74, 0,
	62, 66, 103, 81, 104, 67, 91, 90, 92, 0,
	0, 96, 68, 0, 0, 0, 0, 0, 125, 144,
	156, 157, 0, 0, 0, 152, 0, 0, 0, 93,
	48, 69, 119, 73, 80, 110, 154, 0, 115, 52,
	143, 121, 0, 0, 0, 0, 100, 0, 0, 37,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 0,
	0, 75, 165, 166, 0, 78, 0, 0, 124, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 167, 168, 0, 36, 44, 77, 180, 153, 182,
	109, 63, 145, 0, 0, 0, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	151, 0, 0, 0, 107, 0, 53, 0, 130, 65,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 114, 101, 142, 0, 102, 112, 79, 134, 108,
	141, 0, 132, 150, 117, 45, 95, 35, 106, 113,
	0, 54, 0, 158, 159, 160, 161, 162, 163, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 122, 38, 131, 140, 51, 118, 41, 138, 127,
	129, 86, 71, 72, 120, 39, 40, 0, 111, 60,
	105, 64, 59, 98, 128, 89, 135, 136, 56, 155,
	58, 57, 126, 46, 148, 149, 43, 47, 147, 94,
	99, 97, 146, 133, 139, 87, 83, 0, 42, 137,
	85, 82, 74, 0, 62, 66, 103, 81, 104, 67,
	91, 90, 92, 0, 0, 96, 68, 0, 0, 0,
	0, 0, 125, 144, 156, 157, 0, 0, 0, 152,
	0, 0, 0, 93, 48, 69, 119, 73, 80, 110,
	154, 0, 115, 52, 143, 121, 0, 0, 0, 0,
	100, 0, 0, 37, 0, 0, 0, 0, 0, 0,
	61, 1716, 0, 0, 0, 75, 165, 166, 0, 78,
	0, 0, 124, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 70, 167, 168, 0, 36, 44,
	77, 33, 153, 1715, 109, 63, 145, 0, 0, 0,
	0, 50, 0, 0, 0, 0, 0, 0, 1743, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 151, 0, 0, 0, 107, 0,
	53, 0, 130, 65, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 114, 101, 142, 0, 102,
	112, 79, 134, 108, 141, 0, 132, 150, 117, 45,
	95, 35, 106, 113, 0, 54, 0, 158, 159, 160,
	161, 162, 163, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 122, 38, 131, 140, 51,
	118, 41, 138, 127, 129, 86, 71, 72, 120, 39,
	40, 0, 111, 60, 105, 64, 59, 98, 128, 89,
	135, 136, 56, 155, 58, 57, 126, 46, 148, 149,
	43, 47, 147, 94, 99, 97, 146, 133, 139, 87,
	83, 0, 42, 137, 85, 82, 74, 0, 62, 66,
	103, 81, 104, 67, 91, 90, 92, 0, 0, 96,
	68, 0, 0, 0, 0, 0, 125, 144, 156, 157,
	0, 0, 0, 152, 0, 0, 0, 93, 48, 69,
	119, 73, 80, 110, 154, 0, 115, 52, 143, 121,
	0, 0, 0, 0, 100, 0, 0, 37, 0, 1698,
	0, 0, 0, 0, 61, 0, 0, 0, 0, 75,
	165, 166, 0, 78, 0, 0, 124, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 167,
	168, 0, 36, 44, 77, 180, 153, 1700, 109, 63,
	145, 0, 0, 0, 0, 50, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 151, 0,
	0, 0, 107, 0, 53, 0, 130, 65, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 114,
	101, 142, 0, 1696, 112, 79, 134, 108, 141, 0,
	132, 150, 117, 45, 95, 35, 106, 113, 0, 54,
	0, 158, 159, 160, 161, 162, 163, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 122,
	38, 131, 140, 51, 118, 41, 138, 127, 129, 86,
	71, 72, 120, 39, 40, 0, 111, 60, 105, 64,
	59, 98, 128, 89, 135, 136, 56, 155, 58, 57,
	126, 46, 148, 149, 43, 47, 147, 94, 99, 97,
	146, 133, 139, 87, 83, 0, 42, 137, 85, 82,
	74, 0, 62, 66, 103, 81, 104, 67, 91, 90,
	92, 0, 0, 96, 68, 0, 0, 0, 0, 0,
	125, 144, 156, 157, 0, 0, 0, 152, 0, 0,
	0, 93, 48, 69, 119, 73, 80, 110, 154, 0,
	115, 52, 143, 121, 0, 0, 0, 0, 100, 0,
	0, 37, 0, 0, 0, 0, 0, 1670, 61, 0,
	0, 0, 0, 75, 165, 166, 0, 78, 0, 0,
	124, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 70, 167, 168, 0, 36, 44, 77, 180,
	153, 182, 109, 63, 145, 0, 0, 0, 0, 50,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 151, 0, 0, 0, 107, 0, 53, 0,
	130, 65, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 114, 101, 142, 0, 102, 112, 79,
	134, 108, 141, 0, 132, 150, 117, 45, 95, 35,
	106, 113, 0, 54, 0, 158, 159, 160, 161, 162,
	163, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 122, 38, 131, 140, 51, 118, 41,
	138, 127, 129, 86, 71, 72, 120, 39, 40, 0,
	111, 60, 105, 64, 59, 98, 128, 89, 135, 136,
	56, 155, 58, 57, 126, 46, 148, 149, 43, 47,
	147, 94, 99, 97, 146, 133, 139, 87, 83, 0,
	42, 137, 85, 82, 74, 0, 62, 66, 103, 81,
	104, 67, 91, 90, 92, 0, 0, 96, 68, 0,
	0, 0, 0, 0, 125, 144, 156, 157, 0, 0,
	0, 152, 0, 0, 0, 93, 48, 69, 119, 73,
	80, 110, 154, 0, 115, 52, 143, 121, 0, 0,
	0, 1563, 0, 0, 0, 0, 0, 0, 100, 0,
	0, 37, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 0, 0, 75, 165, 166, 0, 78, 0, 0,
	124, 88, 0, 0, 0, 0, 70, 167, 168, 0,
	36, 44, 77, 0, 153, 0, 109, 63, 145, 180,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 151, 0, 0, 0, 107, 0, 53, 0,
	130, 65, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 114, 101, 142, 0, 102, 112, 79,
	134, 108, 141, 0, 132, 150, 117, 45, 95, 35,
	106, 113, 0, 54, 0, 158, 159, 160, 161, 162,
	163, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 122, 38, 131, 140, 51, 118, 41,
	138, 127, 129, 86, 71, 72, 120, 39, 40, 0,
	111, 60, 105, 64, 59, 98, 128, 89, 135, 136,
	56, 155, 58, 57, 126, 46, 148, 149, 43, 47,
	147, 94, 99, 97, 146, 133, 139, 87, 83, 0,
	42, 137, 85, 82, 74, 0, 62, 66, 103, 81,
	104, 67, 91, 90, 92, 0, 0, 96, 68, 0,
	0, 0, 0, 0, 125, 144, 156, 157, 0, 0,
	0, 152, 0, 0, 0, 93, 48, 69, 119, 73,
	80, 110, 154, 0, 115, 52, 143, 121, 0, 0,
	0, 0, 100, 0, 0, 37, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 0, 0, 75, 165, 166,
	0, 78, 0, 0, 124, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 167, 168, 0,
	36, 44, 77, 586, 153, 182, 109, 63, 145, 0,
	0, 0, 0, 50, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 151, 0, 0, 0,
	107, 0, 53, 0, 130, 65, 0, 76, 0, 0,
	0, 669, 0, 0, 0, 55, 0, 114, 101, 142,
	0, 102, 112, 79, 134, 108, 141, 0, 132, 150,
	117, 45, 95, 35, 106, 113, 0, 54, 0, 158,
	159, 160, 161, 162, 163, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 122, 38, 131,
	140, 51, 118, 41, 138, 127, 129, 86, 71, 72,
	120, 39, 40, 0, 111, 60, 105, 64, 59, 98,
	128, 89, 135, 136, 56, 155, 58, 57, 126, 46,
	148, 149, 43, 47, 147, 94, 99, 97, 146, 133,
	139, 87, 83, 0, 42, 137, 85, 82, 74, 0,
	62, 66, 103, 81, 104, 67, 91, 90, 92, 0,
	0, 96, 68, 0, 0, 0, 0, 0, 125, 144,
	156, 157, 0, 0, 0, 152, 0, 0, 0, 93,
	48, 69, 119, 73, 80, 110, 154, 0, 115, 52,
	143, 121, 0, 0, 0, 0, 100, 0, 0, 37,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 0,
	0, 75, 165, 166, 0, 78, 0, 0, 124, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 167, 168, 0, 36, 44, 77, 180, 153, 182,
	109, 63, 145, 0, 0, 0, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	151, 0, 0, 0, 107, 0, 53, 0, 130, 65,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 114, 101, 142, 0, 102, 112, 79, 134, 108,
	141, 0, 132, 150, 117, 45, 95, 35, 106, 113,
	0, 54, 0, 158, 159, 160, 161, 162, 163, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 122, 38, 131, 140, 51, 118, 41, 138, 127,
	129, 86, 71, 72, 120, 39, 40, 0, 111, 60,
	105, 64, 59, 98, 128, 89, 135, 136, 56, 155,
	58, 57, 126, 46, 148, 149, 43, 47, 147, 94,
	99, 97, 146, 133, 139, 87, 83, 0, 42, 137,
	85, 82, 74, 0, 62, 66, 103, 81, 104, 67,
	91, 90, 92, 0, 0, 96, 68, 0, 0, 0,
	0, 0, 125, 144, 156, 157, 0, 0, 0, 152,
	0, 0, 0, 93, 48, 69, 119, 73, 80, 110,
	154, 282, 115, 52, 143, 121, 100, 0, 0, 37,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 0,
	0, 75, 165, 166, 0, 78, 0, 0, 124, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 0, 70, 167, 168, 33, 36, 44,
	77, 0, 153, 0, 109, 63, 145, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	151, 0, 0, 0, 107, 0, 53, 0, 130, 65,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 114, 101, 142, 0, 102, 112, 79, 134, 108,
	141, 0, 132, 150, 117, 45, 95, 35, 106, 113,
	0, 54, 0, 158, 159, 160, 161, 162, 163, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	123, 122, 38, 131, 140, 51, 118, 41, 138, 127,
	129, 86, 71, 72, 120, 39, 40, 0, 111, 60,
	105, 64, 59, 98, 128, 89, 135, 136, 56, 155,
	58, 57, 126, 46, 148, 149, 43, 47, 147, 94,
	99, 97, 146, 133, 139, 87, 83, 0, 42, 137,
	85, 82, 74, 0, 62, 66, 103, 81, 104, 67,
	91, 90, 92, 0, 0, 96, 68, 0, 0, 0,
	0, 0, 125, 144, 156, 157, 0, 0, 0, 152,
	0, 0, 0, 93, 48, 69, 119, 73, 80, 110,
	154, 0, 115, 52, 143, 121, 0, 0, 0, 0,
	100, 0, 0, 37, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 0, 0, 75, 165, 166, 0, 78,
	0, 0, 124, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 70, 167, 168, 0, 36, 44,
	77, 586, 153, 182, 109, 63, 145, 0, 0, 0,
	0, 50, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 151, 0, 0, 0, 107, 0,
	53, 0, 130, 65, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 114, 101, 142, 0, 102,
	112, 79, 134, 108, 141, 0, 132, 150, 117, 45,
	95, 35, 106, 113, 0, 54, 0, 158, 159, 160,
	161, 162, 163, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 122, 38, 131, 140, 51,
	118, 41, 138, 127, 129, 86, 71, 72, 120, 39,
	40, 0, 111, 60, 105, 64, 59, 98, 128, 89,
	135, 136, 56, 155, 58, 57, 126, 46, 148, 149,
	43, 47, 147, 94, 99, 97, 146, 133, 139, 87,
	83, 0, 42, 137, 85, 82, 74, 0, 62, 66,
	103, 81, 104, 67, 91, 90, 92, 0, 0, 96,
	68, 0, 0, 0, 0, 0, 125, 144, 156, 157,
	0, 0, 0, 152, 0, 0, 0, 93, 48, 69,
	119, 73, 80, 110, 154, 0, 115, 52, 143, 121,
	100, 0, 0, 37, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 0, 0, 75, 165, 166, 0, 78,
	0, 0, 124, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 167,
	168, 33, 36, 44, 77, 0, 153, 0, 109, 63,
	145, 50, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 151, 0, 0, 0, 107, 0,
	53, 0, 130, 65, 0, 76, 0, 0, 0, 814,
	0, 0, 0, 55, 0, 114, 101, 142, 0, 102,
	112, 79, 134, 108, 141, 0, 132, 150, 117, 45,
	95, 35, 106, 113, 0, 54, 0, 158, 159, 160,
	161, 162, 163, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 122, 38, 131, 140, 51,
	118, 41, 138, 127, 129, 86, 71, 72, 120, 39,
	40, 0, 111, 60, 105, 64, 59, 98, 128, 89,
	135, 136, 56, 155, 58, 57, 126, 46, 148, 149,
	43, 47, 147, 94, 99, 97, 146, 133, 139, 87,
	83, 0, 42, 137, 85, 82, 74, 0, 62, 66,
	103, 81, 104, 67, 91, 90, 92, 0, 0, 96,
	68, 0, 0, 0, 0, 0, 125, 144, 156, 157,
	0, 0, 0, 152, 0, 0, 0, 93, 48, 69,
	119, 73, 80, 110, 154, 0, 115, 52, 143, 121,
	0, 0, 0, 0, 100, 0, 0, 37, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 0, 0, 75,
	165, 166, 0, 78, 0, 0, 124, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 167,
	168, 0, 36, 44, 77, 180, 153, 182, 109, 63,
	145, 0, 0, 0, 0, 50, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 151, 0,
	0, 0, 107, 0, 53, 0, 130, 65, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 114,
	101, 142, 0, 102, 112, 79, 134, 108, 141, 0,
	132, 150, 117, 45, 95, 35, 106, 113, 0, 54,
	0, 158, 159, 160, 161, 162, 163, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 122,
	38, 131, 140, 51, 118, 41, 138, 127, 129, 86,
	71, 72, 120, 39, 40, 0, 111, 60, 105, 64,
	59, 98, 128, 89, 135, 136, 56, 155, 58, 57,
	126, 46, 148, 149, 43, 47, 147, 94, 99, 97,
	146, 133, 139, 87, 83, 0, 42, 137, 85, 82,
	74, 0, 62, 66, 103, 81, 104, 67, 91, 90,
	92, 0, 0, 96, 68, 0, 0, 0, 0, 0,
	125, 144, 156, 157, 0, 0, 0, 152, 0, 0,
	0, 93, 48, 69, 119, 73, 80, 110, 154, 0,
	115, 52, 143, 121, 0, 0, 0, 0, 100, 0,
	0, 37, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 0, 0, 75, 165, 166, 0, 78, 0, 0,
	124, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 70, 167, 168, 0, 36, 44, 77, 180,
	153, 1700, 109, 63, 145, 0, 0, 0, 0, 50,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 151, 0, 0, 0, 107, 0, 53, 0,
	130, 65, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 114, 101, 142, 0, 102, 112, 79,
	134, 108, 141, 0, 132, 150, 117, 45, 95, 35,
	106, 113, 0, 54, 0, 158, 159, 160, 161, 162,
	163, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 122, 38, 131, 140, 51, 118, 41,
	138, 127, 129, 86, 71, 72, 120, 39, 40, 0,
	111, 60, 105, 64, 59, 98, 128, 89, 135, 136,
	56, 155, 58, 57, 126, 46, 148, 149, 43, 47,
	147, 94, 99, 97, 146, 133, 139, 87, 83, 0,
	42, 137, 85, 82, 74, 0, 62, 66, 103, 81,
	104, 67, 91, 90, 92, 0, 0, 96, 68, 0,
	0, 0, 0, 0, 125, 144, 156, 157, 0, 0,
	0, 152, 0, 0, 0, 93, 48, 69, 119, 73,
	80, 110, 154, 0, 115, 52, 143, 121, 100, 0,
	0, 37, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 0, 0, 75, 165, 166, 0, 78, 0, 0,
	124, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 167, 168, 33,
	36, 44, 77, 0, 153, 0, 109, 63, 145, 50,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 151, 0, 0, 0, 107, 0, 53, 0,
	130, 65, 0, 76, 0, 0, 0, 669, 0, 0,
	0, 55, 0, 114, 101, 142, 0, 102, 112, 79,
	134, 108, 141, 0, 132, 150, 117, 45, 95, 35,
	106, 113, 0, 54, 0, 158, 159, 160, 161, 162,
	163, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 122, 38, 131, 140, 51, 118, 41,
	138, 127, 129, 86, 71, 72, 120, 39, 40, 0,
	111, 60, 105, 64, 59, 98, 128, 89, 135, 136,
	56, 155, 58, 57, 126, 46, 148, 149, 43, 47,
	147, 94, 99, 97, 146, 133, 139, 87, 83, 0,
	42, 137, 85, 82, 74, 0, 62, 66, 103, 81,
	104, 67, 91, 90, 92, 0, 0, 96, 68, 0,
	0, 0, 0, 0, 125, 144, 156, 157, 0, 0,
	0, 152, 0, 0, 0, 93, 48, 69, 119, 73,
	80, 110, 154, 0, 115, 52, 143, 121, 0, 0,
	0, 0, 100, 0, 0, 37, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 0, 0, 75, 165, 166,
	0, 78, 0, 0, 124, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 167, 168, 0,
	36, 44, 77, 33, 153, 1190, 109, 63, 145, 0,
	0, 0, 0, 50, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 151, 0, 0, 0,
	107, 0, 53, 0, 130, 65, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 114, 101, 142,
	0, 102, 112, 79, 134, 108, 141, 0, 132, 150,
	117, 45, 95, 35, 106, 113, 0, 54, 0, 158,
	159, 160, 161, 162, 163, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 122, 38, 131,
	140, 51, 118, 41, 138, 127, 129, 86, 71, 72,
	120, 39, 40, 0, 111, 60, 105, 64, 59, 98,
	128, 89, 135, 136, 56, 155, 58, 57, 126, 46,
	148, 149, 43, 47, 147, 94, 99, 97, 146, 133,
	139, 87, 83, 0, 42, 137, 85, 82, 74, 0,
	62, 66, 103, 81, 104, 67, 91, 90, 92, 0,
	0, 96, 68, 0, 0, 0, 0, 0, 125, 144,
	156, 157, 0, 0, 0, 152, 0, 0, 0, 93,
	48, 69, 119, 73, 80, 110, 154, 0, 115, 52,
	143, 121, 100, 0, 0, 37, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 0, 0, 75, 165, 166,
	0, 78, 0, 0, 124, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 167, 168, 33, 36, 44, 77, 0, 153, 0,
	109, 63, 145, 50, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 151, 0, 0, 0,
	107, 0, 53, 0, 130, 65, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 114, 101, 142,
	0, 102, 112, 79, 134, 108, 141, 0, 132, 150,
	117, 45, 95, 35, 106, 113, 0, 54, 0, 158,
	159, 160, 161, 162, 163, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 122, 38, 131,
	140, 51, 118, 41, 138, 127, 129, 86, 71, 72,
	120, 39, 40, 0, 111, 60, 105, 64, 59, 98,
	128, 89, 135, 136, 56, 155, 58, 57, 126, 46,
	148, 149, 43, 47, 147, 94, 99, 97, 146, 133,
	139, 87, 83, 0, 42, 137, 85, 82, 74, 0,
	62, 66, 103, 81, 104, 67, 91, 90, 92, 0,
	0, 96, 68, 0, 0, 0, 0, 0, 125, 144,
	156, 157, 0, 0, 0, 152, 0, 0, 0, 93,
	48, 69, 119, 73, 80, 110, 154, 0, 115, 52,
	143, 121, 100, 0, 0, 37, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 0, 0, 75, 165, 166,
	0, 78, 0, 0, 124, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 167, 168, 33, 36, 44, 77, 0, 153, 0,
	109, 63, 145, 50, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 875, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 151, 0, 0, 177,
	107, 0, 53, 0, 130, 65, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 114, 101, 142,
	0, 102, 112, 79, 134, 108, 141, 0, 132, 150,
	117, 45, 95, 35, 106, 113, 0, 54, 0, 158,
	159, 160, 161, 162, 163, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 122, 38, 131,
	140, 51, 118, 41, 138, 127, 129, 86, 71, 72,
	120, 39, 40, 0, 111, 60, 105, 64, 59, 98,
	128, 89, 135, 136, 56, 155, 58, 57, 126, 46,
	148, 149, 43, 47, 147, 94, 99, 97, 146, 133,
	139, 87, 83, 0, 42, 137, 85, 82, 74, 0,
	62, 66, 103, 81, 104, 67, 91, 90, 92, 0,
	0, 96, 68, 0, 0, 0, 0, 0, 125, 144,
	156, 157, 0, 0, 0, 152, 0, 0, 0, 93,
	48, 69, 119, 73, 80, 110, 154, 0, 115, 52,
	143, 121, 0, 0, 0, 0, 100, 0, 0, 37,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 0,
	0, 75, 165, 166, 0, 78, 0, 0, 124, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 167, 168, 0, 36, 44, 77, 33, 153, 32,
	109, 63, 145, 0, 0, 0, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	151, 0, 0, 0, 107, 0, 53, 0, 130, 65,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 114, 101, 142, 0, 102, 112, 79, 134, 108,
	141, 0, 132, 150, 117, 45, 95, 35, 106, 113,
	0, 54, 0, 158, 159, 160, 161, 162, 163, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 122, 38, 131, 140, 51, 118, 41, 138, 127,
	129, 86, 71, 72, 120, 39, 40, 0, 111, 60,
	105, 64, 59, 98, 128, 89, 135, 136, 56, 155,
	58, 57, 126, 46, 148, 149, 43, 47, 147, 94,
	99, 97, 146, 133, 139, 87, 83, 0, 42, 137,
	85, 82, 74, 0, 62, 66, 103, 81, 104, 67,
	91, 90, 92, 0, 0, 96, 68, 0, 0, 0,
	0, 0, 125, 144, 156, 157, 0, 0, 0, 152,
	0, 0, 0, 93, 48, 69, 119, 73, 80, 110,
	154, 0, 115, 52, 143, 121, 100, 0, 0, 37,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 0,
	0, 75, 165, 166, 0, 78, 0, 0, 124, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 70, 167, 168, 33, 36, 44,
	77, 0, 153, 0, 109, 63, 145, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	151, 0, 0, 0, 107, 0, 53, 0, 130, 65,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 114, 101, 142, 0, 102, 112, 79, 134, 108,
	141, 0, 132, 150, 117, 45, 95, 35, 106, 113,
	0, 54, 0, 158, 159, 160, 161, 162, 163, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 122, 38, 131, 140, 51, 118, 41, 138, 127,
	129, 86, 71, 72, 120, 39, 40, 0, 111, 60,
	105, 64, 59, 98, 128, 89, 135, 136, 56, 155,
	58, 57, 126, 46, 148, 149, 43, 47, 147, 94,
	99, 97, 146, 133, 139, 87, 83, 0, 42, 137,
	85, 82, 74, 0, 62, 66, 103, 81, 104, 67,
	91, 90, 92, 0, 0, 96, 68, 0, 0, 0,
	0, 0, 125, 144, 156, 157, 0, 0, 0, 152,
	0, 0, 0, 93, 48, 69, 119, 73, 80, 110,
	154, 0, 115, 52, 143, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 70, 167, 168, 0, 36, 44,
	77, 0, 153, 0, 109, 63, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49,
}

var yyPact = [...]int16{
	379, -1000, -256, -1000, -1000, 1167, 354, 319, -1000, -1000,
	-1000, 19888, 358, 352, 236, 343, 20168, 19604, 18196, 361,
	314, -1000, -204, -167, -1000, -34, 360, 18196, -1000, 984,
	-1000, 13335, 13335, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17348,
	20168, 314, 163, 314, 1184, 348, 20168, 598, 1333, 452,
	-1000, -1000, -1000, 314, 18196, -1000, -1000, -1000, -1000, 17068,
	6920, 213, 13911, 374, -148, 43, -1000, -1000, -1000, -1000,
	-1000, 1101, -1000, -1000, -1000, 1101, 282, 1166, 1101, 1166,
	-1000, 1101, 1166, 86, 86, 86, 86, 86, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1165, 1164, -1000, 1101, 1101,
	1101, 1101, 1101, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1125, 286, 1125, 1110, 1110, -1000, -1000,
	374, 1161, 18196, 20168, 1181, 18196, -205, 18196, 18196, 1387,
	18196, -1000, -1000, -1000, 187, 391, 1284, 13335, 6549, 18196,
	-1000, 2338, 18196, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 7291, 1094, 1257,
	-1000, -1000, -1000, -1000, -1000, -1000, 1155, 679, 20168, 297,
	295, 510, 476, 861, -1000, -1000, -1000, 667, -1000, 20168,
	-1000, 1409, -1000, -1000, 285, -1000, 284, 587, 782, 18196,
	1154, 173, 1153, 11628, 764, -1000, -265, -1000, 41, -1000,
	-1000, 740, 86, 86, 1101, 86, 755, 86, 86, -1000,
	-1000, 481, 1263, 481, 481, 481, 481, 781, 781, -99,
	-99, -1000, -1000, -1000, -1000, 762, 1125, -1000, -1000, -1000,
	760, -1000, 18196, 20168, 1152, 1179, 18196, 1314, 340, -1000,
	-1000, 1313, 1311, 1044, -1000, -1000, 178, -1000, 391, -1000,
	1387, -1000, -1000, -1000, -1000, -1000, 1115, -1000, 948, 879,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 258, 368, 6178, -1000, 213, -1000, 18760, -1000, 1406,
	1349, 277, -13, -1000, 839, 835, -1000, 818, -1000, -1000,
	32, -1000, -175, 99, 28, -1000, -1000, 742, -1000, 1151,
	9642, 1310, -1000, 1268, 759, -1000, 11297, -1000, -242, -1000,
	-1000, -1000, -242, -1000, -1000, -1000, 742, -1000, 1150, 1149,
	-1000, 1147, -1000, -1000, 742, 448, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1025, 481, 481, 86, 481, 1023, 1019,
	481, 481, -1000, -1000, 793, 518, -1000, -1000, -1000, -1000,
	981, -1000, 966, -1000, 107, 106, -1000, 1092, -1000, 954,
	1077, 1177, 16784, 18196, 1148, 1097, 314, 1097, 1348, 238,
	18196, 1387, 17912, 1387, 1022, 20168, -1000, 287, 20168, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 20168, 288, 3952, -1000, 7291, 930, -1000, 291, 1101,
	432, 432, -187, 280, 275, 742, -1000, -1000, -1000, -1000,
	-188, -1000, -1000, -1000, -1000, 587, -1000, 1147, 9642, 17912,
	739, -1000, 9642, 47, 742, 742, -1000, -1000, 482, -1000,
	-1000, -1000, 10635, 10635, 10635, 10635, 10635, 10635, 10635, -1000,
	-1000, -1000, -1000, 54, -242, -1000, 774, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 446, 436, -1000, 9311, 742, 742,
	742, 742, 742, 742, 742, 742, 9642, 742, 1249, 742,
	742, 742, 742, 742, 742, 742, 742, 1808, 742, 742,
	742, 742, -1000, 154, -1000, 1074, 1017, 2301, 1016, -1000,
	12491, -1000, 859, -1000, 732, -1000, 719, 1013, 7975, 7291,
	-1000, -1000, -1000, 481, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 86, 780, 86, 38, 37, 758, -1000, 757,
	16784, 20168, 18196, 1010, 1072, -1000, 267, 1145, 17912, -1000,
	1368, 1415, -1000, 1097, 18196, -1000, 333, 1345, -1000, -1000,
	1346, -1000, 1070, -1000, -1000, 1043, 18196, 1143, 20168, -1000,
	-1000, 301, -1000, -1000, 1275, 20168, -1000, -1000, -1000, -1000,
	-1000, 820, 18760, 1295, -1000, -1000, -1000, 668, -1000, -1000,
	614, 223, 617, -1000, 20168, -188, 9642, -1000, 742, 663,
	928, -116, 9642, 9642, 639, 492, 10635, 678, 534, 10635,
	10635, 10635, 10635, 10635, 10635, 10635, 10635, 10635, 10635, 10635,
	10635, 10635, 10635, 10635, 775, 2215, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 785, -1000,
	1097, 11919, 11919, 25, 25, 25, 25, 25, 25, 19324,
	-1000, -259, -1000, -1000, 5807, 7291, 859, 921, 533, 9311,
	8637, 8637, 8968, 9642, 10635, 17632, 8637, 1296, 577, 533,
	17632, 1343, -1000, 859, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 89, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 8637, 8637, 8637, 8637, 9642, 1142, 746, -1000,
	1006, -242, 742, -1000, 281, 185, -1000, -1000, 86, -1000,
	-1000, -148, -1000, -1000, -1000, -1000, -1000, 859, 8637, 916,
	921, -1000, 13055, -1000, 425, 742, -1000, 481, -1000, 481,
	-1000, -1000, 1005, 986, 985, 1140, 1139, -193, 740, 16784,
	919, 1347, 1366, 1097, 1304, 1237, -1000, 859, 1291, 20168,
	-1000, -1000, -1000, -1000, -1000, 203, 537, 20168, 2543, 1340,
	-1000, 13627, 1138, 1131, 742, 312, 1172, 2323, 181, -1000,
	710, 561, 777, 559, 555, 552, 541, 535, 531, 529,
	-1000, -1000, -1000, -1000, -1000, 1408, -1000, -1000, -1000, 1397,
	1130, -1000, 1126, 663, 9642, 227, 1176, -1000, -1000, 492,
	574, -1000, -1000, 695, -1000, -1000, 2193, -1000, -1000, -1000,
	-1000, 678, 10635, 10635, 10635, 1987, 2193, 2161, 1445, 113,
	25, 72, 72, 14, 14, 14, 14, 14, 350, 350,
	-1000, -1000, -1000, -1000, -62, -1000, 1101, 1125, 286, 1125,
	1110, 1110, -1000, -1000, 859, -1000, -242, 768, -1000, -1000,
	741, 742, 423, -1000, -1000, -1000, 9642, -1000, 859, 916,
	13055, 916, 708, 1069, 10966, 1101, -1000, 1101, 1110, -1000,
	-1000, 137, 1101, 131, -1000, -1000, -1000, -1000, 1110, -1000,
	-1000, -1000, -1000, -1000, 1101, 1101, -1000, -1000, 1101, 1101,
	-1000, 1101, 1101, 735, 568, 2138, 1040, -1000, 414, 916,
	8637, -1000, 599, -1000, 9642, 859, 18196, -1000, -1000, 916,
	859, 1068, 916, 916, 731, -1000, 936, 922, 1101, -1000,
	-1000, -1000, 916, 8637, -254, -1000, -1000, -1000, 19044, -1000,
	-1000, 3581, 8637, -1000, -1000, -1000, -1000, -193, 16784, 18760,
	1379, 1124, 886, 1379, 1281, 9642, 9642, 1368, -1000, 1097,
	-1000, -1000, 1296, -1000, -1000, 625, -1000, 1097, 1003, -1000,
	196, 161, 9642, -1000, 2543, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1368, -1000, -1000, -1000, 20168,
	2491, 20168, 20168, 20168, 397, 10304, 9642, -1000, -1000, -1000,
	537, 202, 881, 12211, 13627, 13627, 12211, 13627, 13627, 18760,
	18760, 256, 273, -1000, 20168, -1000, -106, 2323, 20168, -1000,
	728, -1000, -1000, 706, 713, 706, 706, 706, 706, 706,
	432, 432, 20168, 18760, 227, 663, -1000, -45, 1401, -1000,
	-1000, -1000, -1000, 1987, 2193, 1958, -1000, 10635, 10635, 104,
	-1000, 58, -1000, -242, 7291, 533, -1000, -1000, -1000, 2602,
	775, 9642, -1000, 272, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2602, 10635, 10635, 10635,
	10635, 10635, 5807, -91, 1042, 576, -1000, 9642, 711, -1000,
	-1000, -1000, -1000, -1000, -1000, -137, 526, -1000, -1000, -1000,
	-1000, -1000, 742, -1000, -1000, 408, 859, 1379, 870, 914,
	820, 9642, 17912, -193, 820, -1000, 1403, 487, 630, 1067,
	-1000, 666, 1347, 859, 1194, -1000, -1000, -73, 20168, 9642,
	2194, 2543, 533, -1000, 1347, 330, 16500, 15074, 1066, 12771,
	-1000, 5436, 697, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 20168, 1393,
	1391, 1389, 1388, 1182, 47, 621, 159, 152, 192, -1000,
	-1000, 12211, -1000, -1000, -1000, -1000, -1000, 903, 900, 878,
	-1000, 20168, 1123, 742, 875, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 587, 587, 873,
	868, -1000, 227, -1000, 432, 432, -1000, 10635, 2193, 2193,
	26, -1000, 741, -1000, -1000, 859, 1101, 1101, -1000, 1101,
	1110, -1000, 137, 1101, 131, -1000, -1000, -1000, -1000, 1110,
	-1000, -1000, -1000, -1000, -1000, 1101, 1101, -1000, -1000, 1101,
	1101, -1000, 1101, 1101, 859, 663, -1000, -1000, 859, 844,
	1771, 1398, 1035, 150, -1000, 742, -42, -1000, 533, 9642,
	-1000, -1000, -1000, 179, 737, 701, 669, 656, 40, -1000,
	1365, 456, 5065, -1000, 820, 1379, 820, 1172, 533, 866,
	1379, 1172, -1000, 1246, 9642, 9642, 9642, -1000, 1281, -1000,
	8637, -1000, -1000, -245, -1000, 533, -1000, -1000, 2543, 983,
	-1000, 1281, 16210, 18196, 848, -1000, 999, 1065, -1000, -1000,
	-1000, 1288, 14204, 15926, 20168, 188, -1000, -1000, 1060, 4694,
	20, -1000, -1000, -1000, 525, 404, 15642, -1000, 1261, -1000,
	-1000, 2491, 1274, -1000, -1000, -1000, -1000, -1000, 2543, 2543,
	2543, 2543, -1000, -1000, 294, -1000, 256, 1253, 18760, 20168,
	-1000, 2323, -1000, -1000, 302, 820, -1000, -1000, -1000, 2193,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10635, 10635, -1000,
	10635, 10635, 10635, 859, 665, 533, 650, -1000, 633, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15358, -1000, 1364, 859,
	-1000, 1172, 820, -1000, -1000, -1000, 820, -1000, 1244, 533,
	533, -1000, -1000, 997, 9642, -257, -1000, 2535, -1000, 255,
	18196, -1000, 255, 909, 15074, 18196, -1000, -1000, 17632, 15074,
	15074, 15074, 15074, 15074, -1000, 1229, 1222, -1000, 1204, 1197,
	1228, 18196, -1000, 858, 14204, 428, 742, -1000, 18480, -1000,
	-1000, -1000, 13335, 1338, 4323, 1060, 20, 1047, -1000, 12,
	15, 7644, 7291, 481, -1000, -1000, -1000, -1000, -1000, 20168,
	351, 585, 279, 370, 156, -1000, 176, -1000, 247, 830,
	859, -1000, 18196, 1172, 844, 844, 844, 844, 96, -1000,
	-1000, -1000, -1000, -1000, 390, 9642, -1000, -1000, -1000, 1172,
	-1000, 1379, 15074, 533, 573, -1000, -1000, 843, 742, -1000,
	1379, 15074, 978, -1000, 992, -1000, 521, 1065, 1120, 1171,
	1114, -1000, -1000, -1000, -1000, 1206, -1000, 1205, -1000, -1000,
	-1000, -1000, -93, 349, 347, 346, 20168, -1000, 1097, -1000,
	1047, 20, 7, -1000, -1000, -1000, -1000, 533, 506, -1000,
	-1000, -1000, 2543, 565, 536, 1805, -1000, 170, -1000, 240,
	-1000, -1000, 1099, -1000, -1000, -1000, -1000, -1000, 859, 241,
	-110, 7291, 833, -1000, 533, -1000, 1372, 1045, -1000, 1122,
	17632, 742, -1000, 14781, 20168, 1368, 978, -1000, 1368, 17632,
	9642, -1000, -1000, 9642, 1098, -1000, 9642, -1000, -1000, -1000,
	-1000, 1078, 742, 742, 742, 810, -1000, -1000, -1000, -1000,
	6, 10, -1000, 9642, 298, 151, -1000, -1000, -1000, 742,
	20168, -1000, 1241, -56, -118, -1000, -1000, 859, 9642, 1370,
	1362, -1000, 1271, 991, 1030, -1000, -1000, 8306, 859, 814,
	385, 810, 1347, -1000, 1347, -1000, 533, 533, 17912, 533,
	-94, 17912, 17912, 17912, 14488, 20168, -1000, -1000, -1000, 533,
	-1000, 2543, 9973, 807, -1000, 1081, -1000, -1000, -1000, -1000,
	9642, 9642, 269, -1000, 742, -1000, -1000, 996, 20168, 20168,
	-1000, -1000, -1000, 805, 799, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 797, 797, 797, 428, -1000, 155, 844, 859,
	-1000, -76, 533, 1034, 1399, -1000, 742, -1000, 1097, 380,
	-1000, -1000, -1000, -94, -1000, -1000, -1000, -93, -1000, -1000,
	-1000, -111, 17632, 1030, 859, 20168, -1000, -1000, -138, 993,
	-1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1644, 9, 27, 1641, 1640, 1639, 1638, 1637, 1635,
	1634, 1632, 1631, 1630, 1629, 1628, 1627, 1625, 1624, 111,
	1622, 1620, 1611, 74, 1608, 1607, 1603, 1599, 64, 117,
	83, 86, 1303, 1597, 40, 38, 50, 1596, 24, 1595,
	1592, 49, 1591, 37, 1590, 1589, 53, 1586, 1585, 5,
	47, 69, 102, 1584, 1582, 89, 1619, 1581, 1579, 82,
	1578, 1571, 80, 14, 4, 8, 10, 1570, 76, 6,
	1568, 84, 1567, 1566, 1565, 1562, 26, 1561, 51, 61,
	16, 56, 1559, 11, 70, 39, 22, 23, 2, 46,
	29, 1546, 20, 30, 25, 1545, 59, 1543, 110, 1542,
	68, 88, 60, 0, 214, 36, 75, 1541, 1540, 1539,
	1027, 79, 31, 7, 1538, 100, 1537, 62, 1536, 67,
	94, 35, 92, 91, 1534, 93, 1532, 1531, 1530, 2081,
	353, 105, 112, 77, 1529, 1528, 90, 87, 85, 54,
	108, 411, 65, 1527, 1526, 1521, 99, 1515, 57, 95,
	21, 116, 1514, 1512, 1496, 1495, 1494, 106, 1493, 96,
	1492, 78, 63, 34, 124, 41, 1491, 1490, 1488, 45,
	1487, 1486, 1484, 1482, 71, 1480, 1478, 1476, 55, 1467,
	1465, 97, 58, 109, 103, 107, 1463, 1462, 66, 113,
	104, 1461, 101, 43, 13, 42, 1460, 48, 1453, 1452,
	1451, 1, 3, 1450, 1449, 1448, 1447, 1446, 1444, 52,
	1443, 1441, 1439, 15, 1438, 1437, 44, 1436, 1435, 1431,
	1430, 1229, 1429, 1427, 73, 1424, 1422, 1421, 1398, 166,
}

var yyR1 = [...]uint8{
	0, 218, 219, 219, 1, 1, 2, 2, 3, 4,
	4, 5, 5, 6, 6, 22, 22, 7, 8, 8,
	8, 222, 222, 41, 41, 85, 85, 9, 9, 9,
	9, 10, 10, 198, 198, 197, 199, 199, 11, 11,
	11, 11, 11, 191, 191, 191, 191, 191, 12, 12,
	194, 194, 194, 13, 13, 13, 90, 90, 94, 94,
	94, 95, 95, 95, 95, 210, 210, 118, 118, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 223, 223, 224, 224,
	224, 224, 224, 224, 224, 189, 189, 189, 189, 190,
	190, 190, 190, 192, 192, 193, 193, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 196, 196, 101,
	101, 172, 172, 172, 173, 173, 173, 173, 173, 173,
	175, 175, 176, 176, 108, 108, 177, 177, 18, 153,
	154, 154, 154, 154, 154, 154, 154, 141, 141, 121,
	121, 121, 121, 121, 121, 121, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 183, 183, 183, 183, 183, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 185, 186,
	187, 179, 179, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 131, 131, 131,
	131, 131, 131, 178, 178, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 125, 125, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 124, 124, 124, 124,
	124, 124, 124, 124, 126, 126, 126, 126, 126, 126,
	126, 126, 122, 122, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 128, 128, 128,
	128, 128, 128, 128, 128, 140, 140, 129, 129, 138,
	138, 139, 139, 139, 130, 130, 130, 137, 137, 137,
	134, 134, 135, 135, 136, 136, 136, 132, 132, 132,
	133, 133, 133, 143, 164, 164, 164, 166, 166, 167,
	167, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 152, 152, 188, 188, 163, 163, 163, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 151, 151,
	161, 161, 162, 162, 159, 159, 159, 160, 146, 146,
	146, 146, 146, 147, 148, 148, 148, 148, 144, 145,
	181, 181, 181, 214, 214, 214, 214, 214, 214, 215,
	215, 182, 182, 149, 149, 150, 150, 157, 157, 157,
	157, 225, 225, 155, 155, 156, 156, 156, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 226,
	226, 227, 227, 227, 227, 227, 227, 227, 170, 168,
	168, 169, 169, 228, 19, 20, 20, 21, 21, 21,
	25, 25, 25, 23, 23, 24, 24, 30, 30, 29,
	29, 31, 31, 31, 31, 107, 107, 107, 106, 106,
	211, 211, 211, 211, 211, 33, 33, 34, 34, 35,
	35, 36, 36, 36, 201, 201, 200, 200, 202, 202,
	202, 202, 202, 202, 48, 48, 83, 83, 83, 86,
	86, 37, 37, 37, 37, 38, 38, 39, 39, 40,
	40, 114, 114, 113, 113, 113, 112, 112, 42, 42,
	42, 44, 43, 43, 43, 43, 45, 45, 47, 47,
	46, 46, 49, 49, 49, 49, 50, 50, 84, 84,
	32, 32, 32, 32, 32, 32, 32, 97, 97, 52,
	52, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 61, 61, 61, 61, 61, 61, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 28, 28,
	62, 62, 62, 68, 63, 63, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 59, 59, 59, 59, 59, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 229, 229, 60, 60, 60, 60,
	26, 26, 26, 26, 26, 117, 117, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 120,
	120, 120, 120, 120, 120, 120, 120, 72, 72, 27,
	27, 70, 70, 71, 100, 100, 73, 73, 69, 69,
	69, 203, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 74, 74, 75, 75, 212, 212, 213, 76,
	76, 77, 77, 78, 79, 79, 79, 80, 80, 80,
	80, 81, 81, 81, 54, 54, 54, 54, 54, 54,
	82, 82, 82, 82, 87, 87, 64, 64, 66, 66,
	65, 67, 88, 88, 92, 89, 89, 93, 93, 93,
	93, 93, 16, 17, 91, 91, 91, 109, 109, 109,
	98, 98, 96, 96, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 104, 104, 105, 105, 110, 110,
	110, 111, 111, 204, 204, 204, 205, 205, 205, 206,
	206, 207, 208, 208, 209, 217, 217, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	220, 221, 115, 116, 116, 116,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 4, 6, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 8, 8, 7,
	6, 1, 1, 1, 3, 0, 4, 3, 4, 5,
	4, 2, 6, 1, 3, 2, 0, 1, 2, 2,
	2, 3, 5, 0, 2, 2, 2, 2, 3, 5,
	1, 2, 3, 7, 5, 9, 1, 3, 3, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 2,
	13, 12, 14, 12, 13, 12, 7, 10, 7, 11,
	11, 9, 13, 14, 5, 8, 0, 3, 0, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 1,
	1, 1, 3, 1, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 1, 4, 0,
	3, 0, 2, 2, 0, 2, 2, 2, 2, 2,
	0, 2, 0, 3, 0, 1, 0, 2, 4, 4,
	0, 1, 3, 3, 3, 3, 3, 2, 2, 3,
	1, 1, 1, 1, 1, 0, 2, 2, 3, 2,
	4, 2, 4, 2, 2, 3, 2, 3, 2, 7,
	9, 3, 3, 6, 9, 9, 6, 6, 8, 8,
	5, 8, 7, 4, 2, 4, 6, 2, 4, 2,
	1, 1, 1, 2, 1, 1, 1, 3, 1, 2,
	1, 1, 2, 0, 4, 3, 4, 3, 3, 3,
	3, 3, 3, 3, 2, 4, 6, 2, 3, 2,
	3, 1, 3, 0, 2, 0, 3, 3, 2, 2,
	2, 2, 2, 3, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 2,
	2, 2, 1, 1, 1, 3, 3, 2, 2, 2,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 1,
	5, 2, 2, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 3, 3, 0, 3, 3,
	0, 1, 0, 1, 0, 2, 1, 0, 3, 3,
	0, 1, 2, 6, 0, 1, 4, 1, 2, 1,
	3, 2, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 1, 1, 0, 2, 5, 2,
	3, 3, 2, 3, 2, 2, 3, 4, 1, 1,
	1, 1, 1, 3, 3, 2, 2, 1, 2, 5,
	5, 8, 8, 13, 1, 1, 2, 2, 10, 7,
	0, 1, 1, 0, 1, 1, 1, 2, 2, 1,
	2, 0, 3, 0, 1, 1, 3, 0, 4, 1,
	3, 2, 1, 1, 2, 1, 1, 1, 6, 11,
	13, 13, 6, 7, 7, 7, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 3, 6, 4, 7, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 0, 4, 1, 3, 1, 1,
	1, 1, 1, 1, 4, 8, 1, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 0, 4,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 6, 2,
	2, 2, 2, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 2, 4, 5, 5, 6, 4, 4, 4,
	6, 6, 6, 6, 6, 8, 8, 6, 8, 8,
	9, 7, 5, 4, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 2, 2, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 0, 2, 1, 3,
	5, 3, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 3, 0, 2, 1, 3, 1, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	5, 3, 1, 3, 1, 2, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 2, 0, 2, 2, 0,
	1, 4, 1, 3, 2, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -218, -1, -14, -15, -18, 122, 123, -219, 377,
	-153, 56, -214, -215, -177, 131, 144, 162, 163, 349,
	129, 361, 362, 146, 364, 76, -96, 132, 134, -154,
	-141, -104, 61, 59, -103, 169, 340, 21, 204, 217,
	218, 209, 250, 238, 341, 167, 235, 239, 286, 375,
	69, 207, 295, 138, 173, 151, 230, 233, 232, 224,
	221, 28, 256, 347, 223, 141, 257, 261, 268, 287,
	336, 214, 215, 289, 254, 33, 143, 342, 37, 159,
	290, 259, 253, 248, 131, 252, 213, 247, 41, 227,
	263, 262, 264, 285, 241, 168, 267, 243, 225, 242,
	18, 154, 157, 258, 260, 222, 170, 136, 161, 346,
	291, 220, 158, 171, 153, 294, 363, 166, 208, 288,
	216, 297, 203, 202, 40, 274, 234, 211, 226, 212,
	140, 205, 164, 245, 160, 228, 229, 251, 210, 246,
	206, 162, 155, 296, 275, 348, 244, 240, 236, 237,
	165, 132, 281, 344, 292, 231, 276, 277, 175, 176,
	177, 178, 179, 180, 181, 34, 35, 337, 338, 130,
	130, 132, 202, 132, -104, -104, -98, 135, -46, -110,
	59, -103, 61, 129, -98, 364, 361, 362, 329, 129,
	-46, 58, 57, -142, -121, -125, -122, -127, -126, -128,
	-104, -123, -124, 238, 341, 235, 239, 236, 241, 242,
	243, 116, 240, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 244, 256, 31, 151, 228, 229,
	230, 233, 232, 234, 231, 257, 258, 259, 260, 261,
	262, 263, 264, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 223, 224, 225, 227, 226,
	-142, -104, 54, 201, -104, -98, 203, -98, 54, -189,
	54, 19, 182, 183, 195, -104, 78, 23, 119, -98,
	-46, -46, 293, -116, -220, -105, 56, -104, -102, 127,
	183, 352, 77, 23, 25, 272, 278, 182, 80, 116,
	16, 81, 189, 361, 362, 115, 330, 122, 50, 322,
	323, 320, 187, 332, 333, 321, 279, 194, 20, 29,
	372, 10, 26, 149, 22, 109, 124, 184, 84, 85,
	152, 24, 150, 73, 190, 192, 19, 53, 142, 11,
	351, 13, 14, 366, 353, 135, 134, 96, 365, 130,
	48, 8, 118, 27, 373, 93, 44, 147, 193, 46,
	94, 17, 324, 325, 32, 339, 156, 111, 51, 38,
	367, 78, 368, 71, 54, 293, 188, 76, 15, 49,
	157, 369, 144, 191, 95, 125, 329, 47, 185, 370,
	128, 186, 6, 335, 31, 148, 45, 129, 280, 83,
	133, 72, 163, 5, 146, 9, 52, 55, 326, 327,
	328, 36, 82, 12, 145, 343, 74, -157, -225, 344,
	35, -141, -143, -146, -144, -145, -158, -147, 138, 136,
	140, 141, 146, -151, 130, 147, 71, 78, -183, 138,
	-186, 54, 272, 278, 136, 147, 146, 375, 69, 139,
	23, 351, 353, 29, 30, -136, 378, 266, -134, 275,
	-129, 56, -129, -129, 237, -130, 56, -129, -130, -129,
	-130, -132, 239, -132, -132, -132, -132, 56, 56, -129,
	-129, -129, -129, -129, -138, 56, 222, -138, -138, -139,
	56, -139, 54, 55, -46, -104, 54, -46, -210, 372,
	373, -46, -46, -192, -190, 8, 9, 10, -46, 196,
	-189, 24, -121, -111, -110, -102, -46, -99, 127, 124,
	-170, 123, 272, 239, 69, 29, 15, 330, 157, 348,
	59, 158, -46, -155, -105, 57, 34, 56, -182, 54,
	78, -149, -104, 147, -151, -151, 59, -151, 59, 130,
	59, 71, 19, -104, 9, 147, 147, -182, 61, -46,
	56, -179, 352, 16, 56, -184, 56, -185, 61, 62,
	63, 64, 71, -131, 70, -52, 267, -59, 320, 323,
	322, 268, 72, 73, -104, -110, 59, -103, -187, 63,
	379, -135, 276, 63, -132, -132, -129, -132, 63, 59,
	-132, -132, -133, 116, 115, 31, -133, -133, -133, -133,
	-140, 61, -140, -137, 343, 344, -137, 63, -138, 63,
	-46, -104, 56, 54, -46, 23, 132, 23, -172, 23,
	54, 57, 196, -189, -192, 55, -115, -108, 138, -146,
	-227, 146, 137, 142, 141, 59, 136, 140, 157, -171,
	137, 138, 142, 141, 59, 130, 147, 136, 140, 157,
	146, 157, 127, 86, -105, -157, -162, -159, -104, 147,
	10, 9, 19, 142, 136, 375, 59, 59, 59, -181,
	146, 361, 362, 363, -183, 375, -131, 268, -220, 56,
	-32, -51, 78, -56, 29, 24, -55, -52, -69, -203,
	-67, -68, 116, 117, 105, 106, 113, 79, 118, -59,
	-57, -58, -60, -206, 61, 62, -104, 60, 70, 63,
	64, 65, 66, 71, -110, 298, -65, -220, 46, 47,
	330, 331, 332, 333, 339, 334, 81, 36, 38, 320,
	328, 327, 326, 324, 325, 322, 323, 374, 135, 321,
	111, 329, 265, 23, 29, 63, -184, 56, -185, -174,
	374, -174, -220, -129, 56, -129, 56, 56, -220, 119,
	58, -133, -133, -132, -133, 58, 58, -133, -133, 59,
	59, 116, 58, 57, 58, 228, 228, 57, 58, 57,
	56, 55, 54, -161, -162, -59, -104, -46, 56, -2,
	-3, -4, 6, -220, -98, -2, -173, 19, 170, 171,
	-46, -190, -83, -104, 147, -192, 54, -104, -226, 130,
	147, -104, -115, -115, -104, 138, -146, -156, -105, 61,
	63, 58, 57, -129, -160, 270, -129, -148, 166, 167,
	31, 168, -148, 363, 147, 147, -220, -181, -182, -32,
	-83, 58, 77, 76, 93, -32, -53, 96, 78, 94,
	95, 80, 102, 101, 112, 105, 106, 107, 108, 109,
	110, 111, 103, 104, 115, 374, 86, 87, 88, 89,
	90, 91, 92, 97, 98, 99, 100, -97, -220, -68,
	-220, 120, 121, -56, -56, -56, -56, -56, -56, -56,
	-207, 266, -174, 61, 119, 119, -2, -63, -32, -220,
	-220, -220, -220, -220, -220, -220, -220, -220, -72, -32,
	-220, 39, -229, -220, -229, -229, -229, -229, -229, -229,
	-229, -120, 116, 239, 151, 230, -123, -122, 245, 244,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	238, 341, -220, -220, -220, -220, 56, 353, 57, 58,
	-184, 61, 267, 58, 239, 229, 269, 118, 245, 254,
	255, -121, -221, 58, 58, 58, 58, -30, 22, -29,
	-63, -31, -32, 107, -110, -105, -133, -132, 61, -132,
	277, 277, 63, 63, -161, -104, -46, 58, 56, 56,
	-83, -76, 15, -21, 5, -19, -228, -2, -46, 133,
	21, 6, 8, 9, 10, 19, -101, 57, 23, -46,
	-223, 56, -104, 146, 27, -104, -164, -166, 343, -165,
	55, 143, 69, 175, 176, 177, 178, 179, 180, 181,
	-159, -79, 25, 26, -182, 54, 71, 169, -182, 54,
	-149, -104, -181, -32, -220, -221, 58, 349, 350, -32,
	-32, -61, 71, 78, 72, 73, -56, -62, -65, -68,
	67, 96, 94, 95, 80, -56, -56, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-117, 59, 61, -125, 229, -120, -123, 220, 221, 223,
	224, 225, 227, 226, 59, -55, 61, -104, -55, -104,
	378, -105, -111, -102, -105, -221, 57, -221, -2, -29,
	-32, -29, -32, -119, 116, 235, 151, 230, 224, 254,
	255, 274, 228, 275, 217, 209, 214, 227, 225, 211,
	226, 210, 223, 220, 233, 232, 234, 245, 236, 241,
	243, 242, 240, -32, -69, -56, -69, -104, -110, -29,
	-23, 22, -70, -71, 82, -69, 19, -221, 237, -29,
	-30, -29, -29, -29, -32, 56, 63, 58, 237, -137,
	-136, -221, -29, 57, -221, -221, -107, -106, 23, -104,
	61, 119, -220, -133, -133, 58, 58, 58, 56, 56,
	-84, 365, -161, 58, -80, 17, 16, -5, -3, -220,
	21, 22, -25, 42, 43, -20, -221, 23, -150, -104,
	184, -100, 82, -104, -193, -195, -6, -8, -7, -10,
	-9, -11, -12, -13, -16, -3, -22, 10, 9, 20,
	31, 188, 189, 194, 190, 145, 135, -17, 8, 329,
	-101, 19, -224, -104, 105, 86, 61, -141, 57, 56,
	56, -220, 136, -163, 54, -165, 343, 56, 345, 59,
	-152, 86, 61, 86, 86, 86, 86, 86, 86, 86,
	9, 10, 56, 56, -221, -32, -178, 168, 54, 71,
	72, 73, -62, -56, -56, -56, -28, 152, 77, 343,
	-221, -208, -209, 61, 119, -32, -221, -221, -221, 57,
	55, 57, -129, -129, -129, -139, 215, -129, 215, -139,
	-129, -129, -129, -129, -129, -129, 23, 57, 11, 57,
	57, 11, 119, -221, -29, -73, -71, 84, -32, -221,
	-110, -221, -221, -221, -221, 58, -180, 58, 58, -221,
	-31, -211, 376, -106, 107, -111, -30, -84, -161, -162,
	-50, 12, 56, 58, -50, -81, 19, 32, -32, -77,
	-78, -32, -76, -2, -23, 68, -2, -175, 57, 55,
	185, 204, -32, -195, -76, -19, -19, -19, -198, -104,
	-197, -19, -217, -216, 299, 300, 301, 302, 303, 304,
	305, 306, 307, 308, 309, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, -104, -104, -104, -191, 38,
	191, 192, 193, -51, -56, -32, -51, -100, 184, 58,
	-224, -104, -224, -224, -224, -224, -224, -162, -162, -168,
	-169, 157, 147, -104, -167, -165, -104, 63, -188, 54,
	74, 63, -188, -188, -188, -188, -188, -148, -148, -150,
	-162, -178, -221, 336, 10, 9, -28, 77, -56, -56,
	228, 379, 57, -174, -105, -119, 116, 235, 151, 230,
	224, 254, 274, 228, 275, 217, 209, 214, 227, 225,
	211, 226, 210, 223, 220, 233, 232, 234, 245, 236,
	241, 243, 242, 240, -117, -32, -132, 59, -119, -56,
	-56, -56, -56, -56, -105, 340, -76, 85, -32, 83,
	349, 350, 58, 205, 355, 356, 156, 357, 168, 358,
	359, -220, 119, -221, -50, 58, 58, -164, -32, -83,
	-84, -164, 9, 96, 57, 18, 57, -79, -80, -221,
	-24, 45, -176, 343, -104, -32, -196, -195, 204, -194,
	-195, -80, -96, 11, -41, -46, -34, -35, -36, -37,
	-48, -68, -220, -46, 57, -199, -121, 186, -89, -118,
	206, -93, 288, 287, -105, 298, -91, 286, 239, 285,
	-188, 57, -104, 11, 11, 11, 11, -195, 204, 83,
	204, 204, 185, 58, 58, -221, 57, -104, 56, -220,
	58, 57, -182, -182, 58, 58, -178, -148, -148, -56,
	277, -209, -221, -221, -221, -221, -221, 19, 57, -221,
	57, 19, -220, -27, 335, -32, 343, 63, 16, 63,
	63, 63, 63, 356, 156, 358, 16, -221, 157, -76,
	107, -164, -50, -164, -163, 58, -50, -163, 40, -32,
	-32, -78, -81, -29, 375, -195, -195, 377, -81, -47,
	27, -46, -46, -41, -222, 57, 11, 55, 31, 57,
	-42, -44, -43, -45, 44, 48, 50, 45, 46, 47,
	51, -114, 23, -34, -220, -113, 157, -112, 23, -110,
	61, -197, -104, 187, 57, -89, 206, -90, -94, 289,
	291, 86, 119, -109, -104, 61, 29, 31, -216, 27,
	-194, -193, -194, -194, -204, 197, 78, -169, 36, -162,
	-104, -165, 139, -164, -56, -56, -56, -56, -56, -221,
	61, 63, 63, 360, -110, 16, -221, -163, -164, -164,
	41, -33, 11, -32, 377, -195, 85, -85, 157, -46,
	-85, 55, -34, -46, -88, -92, -69, -35, -36, -36,
	-35, -36, 44, 44, 44, 49, 44, 49, 44, -43,
	-110, -221, -49, 52, 134, 53, -220, -112, 19, -93,
	-90, 57, 290, 292, 293, 54, 74, -32, -105, -133,
	-104, 85, 377, 377, 85, 377, -205, 198, 197, 159,
	58, -221, -46, -163, -221, -221, -221, -221, -26, 96,
	343, 119, -212, -213, -32, -163, -50, -34, 85, -54,
	31, 36, -2, -220, -220, -50, -34, -50, -50, 57,
	86, -39, -38, 54, 55, -40, 54, -38, 44, 44,
	-201, 343, 130, 130, 130, -86, -104, -2, -94, -95,
	294, 291, 297, 86, 85, 84, 85, 200, 199, 160,
	56, -221, 341, 51, 346, -105, -221, -76, 57, -74,
	13, -87, 54, -88, -64, -66, -65, -220, -2, -82,
	-104, -86, -76, -50, -76, -92, -32, -32, 56, -32,
	56, -220, -220, -220, -221, 57, 291, 295, 296, -32,
	135, 204, -220, -150, 41, 342, 347, -221, -213, -75,
	14, 16, 28, -87, 57, -221, -221, -221, 57, 119,
	-221, -80, -80, -83, -200, -202, 366, 367, 368, 369,
	370, 371, -83, -83, -83, -113, -104, -194, -56, 156,
	58, 41, -32, -63, 147, -66, 36, -2, -220, -104,
	-104, 58, 58, 57, -221, -221, -221, -49, 85, -221,
	-221, 343, 9, -64, -2, 119, -202, -201, 346, -88,
	-221, -104, 347,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 792, 1, 3,
	69, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	790, 384, 385, 386, 389, 0, 0, 0, 793, 0,
	141, 155, 155, 804, 805, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 0,
	0, 790, 0, 790, 0, 0, 0, 0, 0, 530,
	808, 809, 810, 790, 0, 390, 387, 388, 137, 0,
	1113, 397, 0, 147, 314, 310, 150, 151, 152, 153,
	154, 297, 235, -2, -2, -2, -2, -2, -2, -2,
	-2, 297, -2, -2, -2, -2, -2, 317, -2, -2,
	-2, -2, -2, 283, -2, 1003, 0, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 0, 0, 0, 155, 0, 0,
	138, 0, 0, 416, 1114, 1115, 1110, 806, 807, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 139, 399, 0,
	402, 142, 143, 144, 145, 146, 0, 391, -2, 1048,
	1071, 1006, 0, 0, 358, 359, 157, 0, 159, 0,
	161, 0, 163, 164, 0, 166, 168, 391, 0, 0,
	0, 0, 0, 0, 0, 156, 0, 316, 312, 311,
	234, 0, 317, 317, 297, 317, 0, 317, 317, 271,
	272, 320, 0, 320, 320, 320, 320, 0, 0, 307,
	307, 257, 258, 259, 246, 0, 299, 248, 249, 250,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 65,
	66, 0, 121, 0, 103, 99, 100, 101, 0, 98,
	0, 791, 84, 531, 811, 812, 0, 1112, 134, 0,
	417, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 0, 0, 0, 403, 397, 401, 0, 368, 0,
	0, 0, 394, 349, 0, 0, 352, 0, 354, -2,
	380, 158, 0, 0, 0, 165, 167, 0, 171, 172,
	819, 0, 201, 0, 0, 184, 0, 187, -2, 190,
	191, 192, 225, 194, 195, 196, 1037, 198, 297, 297,
	221, 1009, 549, 550, 0, 0, -2, -2, 199, 200,
	315, 149, 313, 0, 320, 320, 317, 320, 0, 0,
	320, 320, 273, 321, 0, 0, 274, 275, 276, 277,
	0, 295, 0, 255, 0, 0, 256, 0, 247, 0,
	0, 0, 0, 0, 0, 0, 790, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 408, 0, 393, 412,
	1112, 135, 431, 432, 433, 434, 435, 436, 437, 1112,
	418, 419, 420, 421, 422, 423, 424, 425, 426, 427,
	428, 0, 0, 0, 404, 400, 0, 362, 297, 297,
	0, 0, 0, 0, 0, 0, 350, 351, 353, 356,
	380, 381, 382, 183, 160, 391, 162, 0, 819, 0,
	0, 540, 819, 545, 547, 0, 586, 587, 588, 589,
	590, 591, 819, 819, 819, 819, 819, 819, 819, 618,
	619, 620, 621, 0, -2, 723, 718, 725, 726, 727,
	728, 729, 730, 731, 0, 0, 771, 819, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 0, 0, 654,
	654, 654, 654, 654, 654, 654, 654, 0, 0, 0,
	0, 0, 820, 0, 202, 0, 0, 0, 0, 189,
	155, 193, 0, 217, 0, 219, 0, 0, -2, 0,
	298, 264, 265, 320, 266, 305, 306, 267, 268, 322,
	318, 319, 317, 0, 317, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 360, 361, 297, 0, 0, -2,
	739, 0, 443, 0, 0, -2, 0, 0, 122, 123,
	119, 104, 102, 496, 497, 0, 0, 86, 0, 429,
	430, 394, 414, 415, 0, 393, 413, 398, 405, 406,
	407, 324, 0, 744, 366, 367, 365, 391, 374, 375,
	0, 0, 391, 392, 393, 380, 819, 357, 0, 0,
	0, 0, 819, 819, 0, 543, 819, 0, 0, 819,
	819, 819, 819, 819, 819, 819, 819, 819, 819, 819,
	819, 819, 819, 819, 0, 0, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 546, 0, 560,
	0, 0, 0, 609, 610, 611, 612, 613, 614, 615,
	622, 0, 722, 724, 0, 0, 9, 0, 584, 819,
	819, 819, 819, 819, 819, 0, 819, 453, 0, 708,
	0, 0, 645, 0, 646, 647, 648, 649, 650, 651,
	652, 653, 699, 0, 701, 702, 703, 704, 705, 706,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	262, 263, 819, -2, 819, 819, 819, 180, 0, 185,
	0, 225, 0, 188, 297, 297, 228, 229, -2, -2,
	-2, 314, 197, 1111, 218, 220, 222, 0, 819, 0,
	0, 459, 465, 461, 0, 0, 270, 320, 296, 320,
	308, 309, 0, 0, 0, 0, 0, 538, 1110, 0,
	0, 747, 0, 0, 447, 450, 445, 9, 0, 0,
	125, 126, 127, 128, 129, 0, 714, 0, 0, 119,
	85, 88, 0, 0, 0, 394, 346, 325, 0, 327,
	0, 342, 0, 0, 0, 0, 0, 0, 0, 0,
	363, 364, 745, 746, 369, 0, 376, 377, 370, 0,
	0, 394, 0, 0, 819, 223, 173, 176, 177, 541,
	542, 544, 561, 0, 563, 565, 551, 552, 580, 581,
	582, 0, 819, 819, 819, 578, 556, 0, 592, 593,
	594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
	606, 665, 666, 607, 0, 617, 297, 299, 299, 299,
	301, 301, 252, 253, 0, 604, 225, 0, 605, 616,
	0, 719, 0, -2, 721, 583, 819, 770, 9, 0,
	465, 0, 0, 0, -2, -2, -2, -2, -2, -2,
	674, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 0, 588, 0, 0, 718, 0, 0,
	819, 454, 716, 711, 819, 0, 0, 655, 700, 0,
	0, 458, 0, 0, 0, 203, 0, 0, -2, 227,
	233, 623, 0, 819, 470, 627, 462, 466, 0, 468,
	469, 0, -2, 285, 286, 300, 303, 538, 0, 0,
	536, 0, 0, 536, 751, 819, 819, 739, 11, 0,
	448, 449, 453, 451, 452, 444, 10, 0, 130, 395,
	0, 0, 819, 498, 81, 105, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 739, 443, 443, 443, 0,
	443, 0, 0, 0, 43, 819, 819, 782, 15, 16,
	714, 0, 0, -2, 88, 88, -2, 88, 88, 0,
	0, 0, 0, 323, 0, 328, 0, 0, 0, 331,
	0, 343, 333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 223, 0, 169, 0, 0, 562,
	564, 566, 553, 578, 557, 0, 554, 819, 819, 0,
	548, 0, 822, 225, 0, 585, -2, 628, 629, 0,
	0, 819, 667, 317, 671, 672, 676, 677, 679, 684,
	690, 691, 694, 695, 697, 698, 0, 819, 819, 819,
	819, 819, 0, 0, 739, 0, 712, 819, 0, 643,
	644, 656, 657, 658, 659, 0, 0, 182, 186, 624,
	460, 625, 0, 467, 463, 0, 0, 536, 0, 0,
	324, 819, 0, 538, 324, 6, 0, 0, 748, 740,
	741, 744, 747, 9, 455, 446, -2, 132, 0, 819,
	120, 0, 715, 106, 747, 792, 0, 0, 31, -2,
	33, 0, 0, 825, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 38, 39, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 0, 0, 87,
	89, -2, 90, 91, 92, 93, 94, 0, 0, 0,
	439, 0, 0, 347, 0, 329, 334, 332, 335, 344,
	345, 336, 337, 338, 339, 340, 341, 391, 391, 0,
	0, 379, 223, 224, 0, 0, 555, 819, 579, 558,
	0, 821, 0, 824, 720, 0, 297, 297, 670, 297,
	301, 673, 675, 297, 678, 680, 681, 682, 683, 301,
	685, 686, 687, 688, 689, 297, 297, 692, 693, 297,
	297, 696, 297, 297, 0, 0, 668, 669, 0, 0,
	0, 0, 0, 0, 719, 0, 709, 642, 717, 819,
	178, 179, 181, 0, 0, 0, 0, 0, 0, 214,
	0, 0, 0, 626, 324, 536, 324, 346, 537, 0,
	536, 346, 752, 0, 819, 819, 819, 743, 751, 12,
	819, 456, 79, 0, 396, 131, 80, 117, 0, 0,
	50, 751, 0, 0, 0, 23, 0, 477, 479, 480,
	481, 511, 0, 513, 0, 0, 35, 37, 27, 0,
	1081, 775, -2, -2, 0, 0, 0, -2, 988, -2,
	783, 0, 41, 44, 45, 46, 47, 48, 0, 0,
	0, 0, 120, 409, 813, 438, 0, 0, 0, 0,
	326, 0, 371, 372, 0, 324, 170, 174, 175, 559,
	608, 823, 630, 633, 631, 632, 634, 819, 819, 637,
	819, 819, 819, 0, 0, 713, 0, 205, 0, 207,
	208, 209, 210, 211, 212, 213, 0, 471, 0, 0,
	464, 346, 324, 73, 71, 539, 324, 75, 0, 749,
	750, 742, 7, 475, 819, 0, 51, 0, 116, 25,
	0, 529, -2, 0, 0, 0, 21, 22, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 521, 0, 0,
	0, 0, 512, 0, 0, 532, 1043, 514, 0, 516,
	517, 34, 155, 0, 0, 28, 1081, 30, 56, 0,
	0, 819, 0, 320, 787, 788, 789, 785, 826, 0,
	0, 0, 0, 0, 816, 814, 0, 440, 0, 0,
	0, 330, 0, 346, 0, 0, 0, 0, 660, 641,
	710, 204, 206, 215, 0, 819, 473, 70, 74, 346,
	753, 536, 0, 133, 0, 52, 82, 0, 0, 528,
	536, 0, 536, 24, 536, 772, 0, 478, 507, 509,
	0, 504, 519, 520, 522, 0, 524, 0, 526, 527,
	482, 483, 484, 0, 0, 0, 0, 515, 0, 776,
	29, 0, 0, 59, 60, 777, 778, 779, 0, 781,
	42, 49, 0, 0, 54, 0, 411, 0, 815, 0,
	410, 348, 0, 378, 636, 635, 638, 639, 0, 0,
	0, 0, 0, 736, 738, 72, 732, 476, 118, 764,
	0, 0, -2, 0, 0, 739, 536, 20, 739, 0,
	819, 501, 508, 819, 0, 502, 819, 503, 523, 525,
	494, 0, 0, 0, 0, 0, 499, -2, 57, 58,
	0, 0, 64, 819, 0, 0, 83, 817, 818, 0,
	0, 640, 0, 0, 0, 216, 472, 0, 819, 734,
	0, 13, 0, 764, 754, 766, 768, 819, 9, 0,
	760, 0, 747, 19, 747, 773, 774, 505, 0, 510,
	0, 0, 0, 0, 513, 0, 61, 62, 63, 780,
	53, 0, 819, 0, 661, 0, 664, 474, 737, 8,
	819, 819, 0, 14, 0, 769, -2, 0, 0, 0,
	26, 18, 17, 0, 0, 486, 488, 489, 490, 491,
	492, 493, 0, 0, 0, 532, 500, 0, 0, 0,
	373, 662, 735, 733, 0, 767, 0, -2, 0, 762,
	761, 506, 485, 0, 533, 534, 535, 484, 55, 441,
	442, 0, 0, 757, 9, 0, 487, 495, 0, 765,
	-2, 763, 663,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 377,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 378, 3, 379, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:410
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:415
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:416
		{
		}
	case 6:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:424
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 7:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:432
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 8:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:439
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:445
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:449
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:455
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:459
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 13:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:466
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 14:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:478
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:490
		{
			yyVAL.str = InsertStr
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:494
		{
			yyVAL.str = ReplaceStr
		}
	case 17:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:500
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 18:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:506
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:510
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:514
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:519
		{
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:520
		{
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:524
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:528
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:533
		{
			yyVAL.partitions = nil
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:537
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:543
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:547
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:551
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:555
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:561
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:565
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:578
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:582
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:588
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 36:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:593
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:597
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:603
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:610
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:617
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:624
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:632
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:642
		{
			yyVAL.str = ""
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:646
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:650
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:654
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:658
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:664
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:671
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:681
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:685
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:689
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 53:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:696
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:705
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 55:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:713
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:724
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:728
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:734
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:738
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:742
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:748
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:752
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:756
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:760
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:766
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:770
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:776
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:780
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:786
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:791
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 71:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:811
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 72:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:831
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 73:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:852
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 74:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:868
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 75:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:885
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 76:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:904
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 77:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:915
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 78:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:927
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 79:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:938
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 80:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:954
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      []Statement{yyDollar[11].statement},
				},
			}
		}
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:968
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 82:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:982
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 83:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:995
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[4].colIdent,
					TableName: yyDollar[8].tableName,
					Time:      yyDollar[5].str,
					Event:     yyDollar[6].strs,
					Body:      yyDollar[12].blockStatement,
				},
			}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1009
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 85:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1020
		{
			yyVAL.statement = &DDL{Action: Create, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1025
		{
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1026
		{
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1030
		{
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1031
		{
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1032
		{
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1033
		{
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1034
		{
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1035
		{
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1036
		{
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1040
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1044
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1048
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1052
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1058
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1062
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1066
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1071
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1077
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1081
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1087
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1091
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1097
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1109
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1121
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1128
		{
			yyVAL.empty = struct{}{}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1130
		{
			yyVAL.empty = struct{}{}
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1133
		{
			yyVAL.bytes = nil
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1137
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1141
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1146
		{
			yyVAL.bytes = nil
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1150
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1154
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1158
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1162
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1166
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1171
		{
			yyVAL.expr = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1175
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1180
		{
			yyVAL.expr = nil
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1184
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1189
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1193
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1198
		{
			yyVAL.bytes = nil
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1202
		{
			yyVAL.bytes = nil
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1208
		{
			yyVAL.ddl = &DDL{Action: Create, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1215
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1221
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1225
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1230
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1234
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1238
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1242
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1246
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1252
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1257
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1263
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1274
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1279
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1285
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1298
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1303
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1308
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1313
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1319
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1324
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1329
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1334
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1339
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1344
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1349
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1354
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1359
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1368
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1378
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1383
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1388
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1395
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1402
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1410
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1415
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1420
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1425
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1431
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1437
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1443
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1449
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1456
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1460
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 186:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1464
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1468
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1472
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1478
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1482
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1486
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1490
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1494
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1498
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1502
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1506
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1510
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1516
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1522
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1528
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1534
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1538
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1543
		{
			yyVAL.sequence = &Sequence{}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1547
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1552
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1557
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1562
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1567
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1572
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1577
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1582
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1587
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1592
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1597
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1602
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 216:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1607
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1614
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1618
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1622
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1626
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1630
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1634
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1639
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1643
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1648
		{
			yyVAL.bytes = nil
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1662
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1667
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1673
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1677
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1681
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1685
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1689
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1693
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1701
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1705
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 286:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1934
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1939
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1944
		{
			yyVAL.optVal = nil
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1948
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1953
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1957
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1965
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1969
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1975
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1983
		{
			yyVAL.optVal = nil
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1987
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1991
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2000
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2004
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2008
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2013
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2017
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2022
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2026
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2031
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2035
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2039
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2044
		{
			yyVAL.str = ""
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2048
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2052
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2057
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2061
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2065
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2071
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2076
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2080
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2084
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2090
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2094
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2100
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2104
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2110
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2114
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2119
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2123
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2127
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2131
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2135
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2139
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2143
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2147
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2151
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2157
		{
			yyVAL.str = ""
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2161
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2167
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2171
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2177
		{
			yyVAL.indexPartition = nil
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2181
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 348:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2185
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2191
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2195
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2199
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2203
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2207
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2211
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2215
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2219
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2223
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2229
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2233
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2239
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2244
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2250
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2254
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2260
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2265
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2269
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2279
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 369:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2284
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 370:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2291
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 371:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2298
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 372:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2305
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 373:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2314
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2326
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2330
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2334
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2338
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 378:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2344
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 379:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2355
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2365
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2369
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2373
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2379
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2383
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2387
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2391
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2395
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2399
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2405
		{
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2406
		{
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2410
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2414
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2419
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2426
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2430
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2437
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2441
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2447
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2451
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2456
		{
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2457
		{
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2461
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2465
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2471
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2475
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2479
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 408:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2485
		{
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 409:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2489
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 410:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2503
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 411:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2517
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 412:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2536
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 413:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2545
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 414:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2554
		{
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 415:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2558
		{
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2562
		{
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[3].tableName.toViewName(), NewName: yyDollar[3].tableName.toViewName()}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2566
		{
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2598
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2604
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2608
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 441:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2614
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 442:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2618
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2623
		{
			setAllowComments(yylex, true)
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2627
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2633
		{
			yyVAL.bytes2 = nil
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2637
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2643
		{
			yyVAL.str = UnionStr
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2647
		{
			yyVAL.str = UnionAllStr
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2651
		{
			yyVAL.str = UnionDistinctStr
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2656
		{
			yyVAL.str = ""
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2660
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2664
		{
			yyVAL.str = SQLCacheStr
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2669
		{
			yyVAL.str = ""
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2673
		{
			yyVAL.str = DistinctStr
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2678
		{
			yyVAL.str = ""
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2682
		{
			yyVAL.str = StraightJoinHint
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2687
		{
			yyVAL.selectExprs = nil
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2691
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2697
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2701
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2707
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2711
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2715
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 464:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2719
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2724
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2728
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2732
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2739
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2744
		{
			yyVAL.overExpr = nil
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2748
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2752
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2756
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 474:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2760
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2765
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2769
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2775
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2779
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2789
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2793
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2797
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2802
		{
			yyVAL.strs = []string{}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2806
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2812
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2816
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2822
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2826
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2830
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2834
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2838
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2842
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2848
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 495:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2852
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2858
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2863
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2867
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2873
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2877
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2890
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2894
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2902
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2908
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2910
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2914
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2916
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2920
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2922
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2925
		{
			yyVAL.empty = struct{}{}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2927
		{
			yyVAL.empty = struct{}{}
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2930
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2934
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2938
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2945
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2951
		{
			yyVAL.str = JoinStr
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2955
		{
			yyVAL.str = JoinStr
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2959
		{
			yyVAL.str = JoinStr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2965
		{
			yyVAL.str = StraightJoinStr
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2971
		{
			yyVAL.str = LeftJoinStr
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2975
		{
			yyVAL.str = LeftJoinStr
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2979
		{
			yyVAL.str = RightJoinStr
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2983
		{
			yyVAL.str = RightJoinStr
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2989
		{
			yyVAL.str = NaturalJoinStr
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2993
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3003
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3007
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3013
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3017
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3022
		{
			yyVAL.indexHints = nil
		}
	case 533:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3026
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 534:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3030
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3034
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3039
		{
			yyVAL.expr = nil
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3043
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3048
		{
			yyVAL.columns = nil
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3052
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3058
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3062
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3066
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3070
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3074
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3078
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3082
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3088
		{
			yyVAL.str = ""
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3092
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3098
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3102
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3108
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3112
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3116
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3120
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3124
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3128
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3132
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 558:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3136
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 559:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3140
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3144
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3150
		{
			yyVAL.str = IsNullStr
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3154
		{
			yyVAL.str = IsNotNullStr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3158
		{
			yyVAL.str = IsTrueStr
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3162
		{
			yyVAL.str = IsNotTrueStr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3166
		{
			yyVAL.str = IsFalseStr
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3170
		{
			yyVAL.str = IsNotFalseStr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3176
		{
			yyVAL.str = EqualStr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3180
		{
			yyVAL.str = LessThanStr
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3184
		{
			yyVAL.str = GreaterThanStr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3188
		{
			yyVAL.str = LessEqualStr
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3192
		{
			yyVAL.str = GreaterEqualStr
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3196
		{
			yyVAL.str = NotEqualStr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3200
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3204
		{
			yyVAL.str = PosixRegexStr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3208
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3212
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3216
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3221
		{
			yyVAL.expr = nil
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3225
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3231
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3235
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3239
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3245
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3251
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3255
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3261
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3265
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3269
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3273
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3277
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3281
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3285
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3289
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3293
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3297
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3301
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3305
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3309
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3313
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3317
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3321
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3325
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3329
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3333
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3337
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3341
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3345
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 608:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3349
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3353
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3357
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3361
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3369
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3383
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3387
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3391
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3399
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3407
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3415
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3425
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 624:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3429
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 625:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3433
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 626:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3437
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3441
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3451
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3455
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 630:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3459
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 631:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3463
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 632:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3467
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 633:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3471
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 634:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3475
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 635:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3479
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 636:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3483
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 637:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3487
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 638:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3491
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 639:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3495
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 640:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3499
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 641:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3503
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3507
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3511
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3516
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3526
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3530
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3534
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3538
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3543
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3548
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3553
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3558
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3562
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 656:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3576
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3580
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3584
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3588
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3594
		{
			yyVAL.str = ""
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3598
		{
			yyVAL.str = BooleanModeStr
		}
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3602
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 663:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3606
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3610
		{
			yyVAL.str = QueryExpansionStr
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3616
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3620
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3626
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3630
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3634
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3638
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3642
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3646
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3652
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3656
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3660
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3664
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3668
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3672
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3676
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3680
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3684
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3688
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3692
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3696
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3700
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3704
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3708
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3712
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3716
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3720
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3724
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3728
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3732
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3736
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3740
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3744
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3748
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3752
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3758
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3762
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3766
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3770
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3774
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3778
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3782
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3786
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3791
		{
			yyVAL.expr = nil
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3795
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3800
		{
			yyVAL.str = string("")
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3804
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3810
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3814
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3820
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 714:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3825
		{
			yyVAL.empty = struct{}{}
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3827
		{
			yyVAL.empty = struct{}{}
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3830
		{
			yyVAL.expr = nil
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3834
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3840
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3844
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 720:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3848
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3854
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3860
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3864
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3869
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3874
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3878
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3882
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3886
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3890
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3894
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3898
		{
			yyVAL.expr = &NullVal{}
		}
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3903
		{
			yyVAL.exprs = nil
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3907
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3912
		{
			yyVAL.expr = nil
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3916
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3922
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3926
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3932
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3937
		{
			yyVAL.orderBy = nil
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3941
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3947
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3951
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3957
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3962
		{
			yyVAL.str = AscScr
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3966
		{
			yyVAL.str = AscScr
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3970
		{
			yyVAL.str = DescScr
		}
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3975
		{
			yyVAL.limit = nil
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3979
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3983
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3987
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3992
		{
			yyVAL.str = ""
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3996
		{
			yyVAL.str = ForUpdateStr
		}
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4000
		{
			yyVAL.str = ShareModeStr
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4013
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4017
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4021
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 757:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4026
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 758:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4030
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 759:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4034
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4041
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4045
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4049
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 763:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4053
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4058
		{
			yyVAL.updateExprs = nil
		}
	case 765:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4062
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4068
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4072
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4078
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4082
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4088
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4094
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4104
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4108
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4114
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4120
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4124
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4130
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4134
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4138
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 780:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4143
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4147
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4153
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4159
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4166
		{
			yyVAL.bytes = []byte("charset")
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4173
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4177
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4181
		{
			yyVAL.expr = &Default{}
		}
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4186
		{
			yyVAL.empty = struct{}{}
		}
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4188
		{
			yyVAL.empty = struct{}{}
		}
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4191
		{
			yyVAL.str = ""
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.str = IgnoreStr
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.empty = struct{}{}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4199
		{
			yyVAL.empty = struct{}{}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4201
		{
			yyVAL.empty = struct{}{}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4203
		{
			yyVAL.empty = struct{}{}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4205
		{
			yyVAL.empty = struct{}{}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4207
		{
			yyVAL.empty = struct{}{}
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4209
		{
			yyVAL.empty = struct{}{}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.empty = struct{}{}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4213
		{
			yyVAL.empty = struct{}{}
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4215
		{
			yyVAL.empty = struct{}{}
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4219
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4223
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4230
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4236
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4240
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4245
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4252
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 813:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4258
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4262
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4266
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4272
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4276
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4280
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4286
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4290
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 821:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4297
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4304
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4308
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4315
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4321
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4325
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4636
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4645
		{
			decNesting(yylex)
		}
	case 1112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4650
		{
			forceEOF(yylex)
		}
	case 1113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4655
		{
			forceEOF(yylex)
		}
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4659
		{
			forceEOF(yylex)
		}
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4663
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
