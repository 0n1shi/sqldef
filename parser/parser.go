// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const VINDEX = 57489
const VINDEXES = 57490
const STATUS = 57491
const VARIABLES = 57492
const RESTRICT = 57493
const CASCADE = 57494
const NO = 57495
const ACTION = 57496
const PERMISSIVE = 57497
const RESTRICTIVE = 57498
const PUBLIC = 57499
const CURRENT_USER = 57500
const SESSION_USER = 57501
const PAD_INDEX = 57502
const FILLFACTOR = 57503
const IGNORE_DUP_KEY = 57504
const STATISTICS_NORECOMPUTE = 57505
const STATISTICS_INCREMENTAL = 57506
const ALLOW_ROW_LOCKS = 57507
const ALLOW_PAGE_LOCKS = 57508
const BEFORE = 57509
const AFTER = 57510
const EACH = 57511
const ROW = 57512
const SCROLL = 57513
const CURSOR = 57514
const OPEN = 57515
const CLOSE = 57516
const FETCH = 57517
const PRIOR = 57518
const FIRST = 57519
const LAST = 57520
const DEALLOCATE = 57521
const INSTEAD = 57522
const OF = 57523
const DEFERRABLE = 57524
const INITIALLY = 57525
const IMMEDIATE = 57526
const DEFERRED = 57527
const CONCURRENTLY = 57528
const SQL = 57529
const SECURITY = 57530
const BEGIN = 57531
const START = 57532
const TRANSACTION = 57533
const COMMIT = 57534
const ROLLBACK = 57535
const BIT = 57536
const TINYINT = 57537
const SMALLINT = 57538
const SMALLSERIAL = 57539
const MEDIUMINT = 57540
const INT = 57541
const INTEGER = 57542
const SERIAL = 57543
const BIGINT = 57544
const BIGSERIAL = 57545
const INTNUM = 57546
const REAL = 57547
const DOUBLE = 57548
const PRECISION = 57549
const FLOAT_TYPE = 57550
const DECIMAL = 57551
const NUMERIC = 57552
const SMALLMONEY = 57553
const MONEY = 57554
const TIME = 57555
const TIMESTAMP = 57556
const DATETIME = 57557
const YEAR = 57558
const DATETIMEOFFSET = 57559
const DATETIME2 = 57560
const SMALLDATETIME = 57561
const CHAR = 57562
const VARCHAR = 57563
const VARYING = 57564
const BOOL = 57565
const CHARACTER = 57566
const VARBINARY = 57567
const NCHAR = 57568
const NVARCHAR = 57569
const NTEXT = 57570
const UUID = 57571
const TEXT = 57572
const TINYTEXT = 57573
const MEDIUMTEXT = 57574
const LONGTEXT = 57575
const CITEXT = 57576
const BLOB = 57577
const TINYBLOB = 57578
const MEDIUMBLOB = 57579
const LONGBLOB = 57580
const JSON = 57581
const JSONB = 57582
const ENUM = 57583
const GEOMETRY = 57584
const POINT = 57585
const LINESTRING = 57586
const POLYGON = 57587
const GEOMETRYCOLLECTION = 57588
const MULTIPOINT = 57589
const MULTILINESTRING = 57590
const MULTIPOLYGON = 57591
const VARIADIC = 57592
const ARRAY = 57593
const NOW = 57594
const GETDATE = 57595
const BPCHAR = 57596
const TEXT_PATTERN_OPS = 57597
const NULLX = 57598
const AUTO_INCREMENT = 57599
const APPROXNUM = 57600
const SIGNED = 57601
const UNSIGNED = 57602
const ZEROFILL = 57603
const ZONE = 57604
const AUTOINCREMENT = 57605
const DATABASES = 57606
const TABLES = 57607
const VITESS_KEYSPACES = 57608
const VITESS_SHARDS = 57609
const VITESS_TABLETS = 57610
const VSCHEMA_TABLES = 57611
const EXTENDED = 57612
const FULL = 57613
const PROCESSLIST = 57614
const NAMES = 57615
const CHARSET = 57616
const GLOBAL = 57617
const SESSION = 57618
const ISOLATION = 57619
const LEVEL = 57620
const READ = 57621
const WRITE = 57622
const ONLY = 57623
const REPEATABLE = 57624
const COMMITTED = 57625
const UNCOMMITTED = 57626
const SERIALIZABLE = 57627
const NEW = 57628
const CONCAT_NULL_YIELDS_NULL = 57629
const CURSOR_CLOSE_ON_COMMIT = 57630
const QUOTED_IDENTIFIER = 57631
const ARITHABORT = 57632
const FMTONLY = 57633
const NOCOUNT = 57634
const NOEXEC = 57635
const NUMERIC_ROUNDABORT = 57636
const ANSI_DEFAULTS = 57637
const ANSI_NULL_DFLT_OFF = 57638
const ANSI_NULL_DFLT_ON = 57639
const ANSI_NULLS = 57640
const ANSI_PADDING = 57641
const ANSI_WARNINGS = 57642
const FORCEPLAN = 57643
const SHOWPLAN_ALL = 57644
const SHOWPLAN_TEXT = 57645
const SHOWPLAN_XML = 57646
const IMPLICIT_TRANSACTIONS = 57647
const REMOTE_PROC_TRANSACTIONS = 57648
const XACT_ABORT = 57649
const CURRENT_TIMESTAMP = 57650
const DATABASE = 57651
const CURRENT_DATE = 57652
const CURRENT_TIME = 57653
const LOCALTIME = 57654
const LOCALTIMESTAMP = 57655
const UTC_DATE = 57656
const UTC_TIME = 57657
const UTC_TIMESTAMP = 57658
const REPLACE = 57659
const CONVERT = 57660
const CAST = 57661
const SUBSTR = 57662
const SUBSTRING = 57663
const GROUP_CONCAT = 57664
const SEPARATOR = 57665
const INHERIT = 57666
const LEAD = 57667
const LAG = 57668
const MATCH = 57669
const AGAINST = 57670
const BOOLEAN = 57671
const LANGUAGE = 57672
const WITH = 57673
const WITHOUT = 57674
const PARSER = 57675
const QUERY = 57676
const EXPANSION = 57677
const UNUSED = 57678
const VIRTUAL = 57679
const STORED = 57680
const GENERATED = 57681
const ALWAYS = 57682
const IDENTITY = 57683
const SEQUENCE = 57684
const INCREMENT = 57685
const MINVALUE = 57686
const CACHE = 57687
const CYCLE = 57688
const OWNED = 57689
const NONE = 57690
const CLUSTERED = 57691
const NONCLUSTERED = 57692
const REPLICATION = 57693
const COLUMNSTORE = 57694
const INCLUDE = 57695
const HOLDLOCK = 57696
const NOLOCK = 57697
const NOWAIT = 57698
const PAGLOCK = 57699
const ROWLOCK = 57700
const TABLELOCK = 57701
const DEFINER = 57702
const INVOKER = 57703
const TYPECAST = 57704
const CHECK = 57705
const OVER = 57706

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	130, 404,
	-2, 161,
	-1, 36,
	166, 512,
	167, 512,
	-2, 502,
	-1, 286,
	119, 904,
	-2, 900,
	-1, 287,
	119, 905,
	-2, 901,
	-1, 288,
	119, 906,
	-2, 247,
	-1, 330,
	268, 915,
	-2, 790,
	-1, 362,
	86, 1156,
	-2, 86,
	-1, 363,
	86, 1106,
	-2, 87,
	-1, 369,
	86, 1085,
	-2, 871,
	-1, 371,
	86, 1130,
	-2, 873,
	-1, 634,
	268, 915,
	-2, 540,
	-1, 683,
	268, 915,
	-2, 540,
	-1, 712,
	55, 41,
	57, 41,
	-2, 43,
	-1, 744,
	116, 1080,
	251, 1080,
	257, 1080,
	-2, 283,
	-1, 745,
	116, 1081,
	251, 1081,
	257, 1081,
	-2, 284,
	-1, 746,
	251, 1083,
	257, 1083,
	-2, 318,
	-1, 747,
	251, 1084,
	257, 1084,
	-2, 318,
	-1, 748,
	251, 1185,
	257, 1185,
	-2, 325,
	-1, 749,
	251, 1131,
	257, 1131,
	-2, 318,
	-1, 750,
	251, 1136,
	257, 1136,
	-2, 325,
	-1, 751,
	116, 1134,
	251, 1134,
	257, 1134,
	-2, 290,
	-1, 753,
	116, 1184,
	251, 1184,
	257, 1184,
	-2, 325,
	-1, 754,
	251, 1170,
	257, 1170,
	-2, 338,
	-1, 755,
	251, 1176,
	257, 1176,
	-2, 338,
	-1, 756,
	251, 1124,
	257, 1124,
	-2, 338,
	-1, 757,
	251, 1120,
	257, 1120,
	-2, 338,
	-1, 759,
	116, 1079,
	251, 1079,
	257, 1079,
	-2, 299,
	-1, 760,
	116, 1174,
	251, 1174,
	257, 1174,
	-2, 300,
	-1, 761,
	116, 1122,
	251, 1122,
	257, 1122,
	-2, 301,
	-1, 762,
	116, 1119,
	251, 1119,
	257, 1119,
	-2, 302,
	-1, 763,
	116, 1111,
	251, 1111,
	257, 1111,
	-2, 303,
	-1, 765,
	116, 1183,
	251, 1183,
	257, 1183,
	-2, 305,
	-1, 768,
	116, 1092,
	251, 1092,
	257, 1092,
	-2, 275,
	-1, 769,
	116, 1172,
	251, 1172,
	257, 1172,
	-2, 318,
	-1, 770,
	116, 1173,
	251, 1173,
	257, 1173,
	-2, 318,
	-1, 771,
	116, 1093,
	251, 1093,
	257, 1093,
	-2, 318,
	-1, 772,
	116, 1094,
	251, 1094,
	257, 1094,
	-2, 318,
	-1, 773,
	116, 1095,
	251, 1095,
	257, 1095,
	-2, 318,
	-1, 774,
	116, 1163,
	251, 1163,
	257, 1163,
	-2, 281,
	-1, 775,
	116, 1197,
	251, 1197,
	257, 1197,
	-2, 282,
	-1, 776,
	116, 1103,
	251, 1103,
	257, 1103,
	-2, 308,
	-1, 777,
	116, 1140,
	251, 1140,
	257, 1140,
	-2, 309,
	-1, 778,
	116, 1118,
	251, 1118,
	257, 1118,
	-2, 310,
	-1, 779,
	116, 1141,
	251, 1141,
	257, 1141,
	-2, 311,
	-1, 780,
	116, 1104,
	251, 1104,
	257, 1104,
	-2, 312,
	-1, 781,
	116, 1128,
	251, 1128,
	257, 1128,
	-2, 313,
	-1, 782,
	116, 1127,
	251, 1127,
	257, 1127,
	-2, 314,
	-1, 783,
	116, 1129,
	251, 1129,
	257, 1129,
	-2, 315,
	-1, 784,
	116, 1078,
	251, 1078,
	257, 1078,
	-2, 257,
	-1, 785,
	116, 1175,
	251, 1175,
	257, 1175,
	-2, 258,
	-1, 786,
	116, 1164,
	251, 1164,
	257, 1164,
	-2, 259,
	-1, 787,
	116, 1166,
	251, 1166,
	257, 1166,
	-2, 260,
	-1, 788,
	116, 1123,
	251, 1123,
	257, 1123,
	-2, 261,
	-1, 789,
	116, 1108,
	251, 1108,
	257, 1108,
	-2, 262,
	-1, 790,
	116, 1109,
	251, 1109,
	257, 1109,
	-2, 263,
	-1, 791,
	116, 1157,
	251, 1157,
	257, 1157,
	-2, 264,
	-1, 792,
	116, 1076,
	251, 1076,
	257, 1076,
	-2, 265,
	-1, 793,
	116, 1077,
	251, 1077,
	257, 1077,
	-2, 266,
	-1, 794,
	116, 1148,
	251, 1148,
	257, 1148,
	-2, 320,
	-1, 795,
	116, 1097,
	251, 1097,
	257, 1097,
	-2, 320,
	-1, 796,
	116, 1101,
	251, 1101,
	257, 1101,
	-2, 320,
	-1, 797,
	116, 1096,
	251, 1096,
	257, 1096,
	-2, 322,
	-1, 798,
	116, 1135,
	251, 1135,
	257, 1135,
	-2, 322,
	-1, 799,
	116, 1126,
	251, 1126,
	257, 1126,
	-2, 273,
	-1, 800,
	116, 1165,
	251, 1165,
	257, 1165,
	-2, 274,
	-1, 882,
	119, 908,
	-2, 903,
	-1, 950,
	268, 915,
	-2, 318,
	-1, 951,
	57, 318,
	59, 318,
	241, 318,
	-2, 1083,
	-1, 952,
	57, 752,
	-2, 1092,
	-1, 953,
	57, 318,
	-2, 1093,
	-1, 954,
	57, 322,
	-2, 1096,
	-1, 955,
	57, 755,
	-2, 1111,
	-1, 957,
	57, 318,
	-2, 1131,
	-1, 958,
	57, 758,
	-2, 1162,
	-1, 959,
	57, 318,
	-2, 1172,
	-1, 960,
	57, 761,
	-2, 1181,
	-1, 961,
	57, 763,
	-2, 1076,
	-1, 962,
	57, 764,
	-2, 1078,
	-1, 963,
	57, 765,
	-2, 1108,
	-1, 964,
	57, 766,
	-2, 1126,
	-1, 965,
	57, 322,
	-2, 1135,
	-1, 966,
	57, 768,
	-2, 1164,
	-1, 967,
	57, 769,
	-2, 1165,
	-1, 968,
	57, 770,
	-2, 1175,
	-1, 969,
	57, 771,
	-2, 1101,
	-1, 970,
	57, 772,
	-2, 1148,
	-1, 971,
	57, 318,
	-2, 1094,
	-1, 972,
	57, 318,
	-2, 1095,
	-1, 973,
	57, 775,
	-2, 1163,
	-1, 974,
	57, 776,
	-2, 1170,
	-1, 975,
	57, 318,
	-2, 1185,
	-1, 976,
	57, 779,
	-2, 1134,
	-1, 977,
	57, 318,
	-2, 1136,
	-1, 978,
	57, 318,
	-2, 1184,
	-1, 1053,
	142, 414,
	-2, 1090,
	-1, 1183,
	268, 915,
	-2, 540,
	-1, 1206,
	5, 28,
	-2, 666,
	-1, 1248,
	5, 27,
	-2, 842,
	-1, 1297,
	59, 379,
	-2, 376,
	-1, 1314,
	119, 906,
	-2, 247,
	-1, 1581,
	5, 27,
	-2, 95,
	-1, 1583,
	5, 27,
	-2, 97,
	-1, 1636,
	5, 28,
	-2, 843,
	-1, 1710,
	5, 27,
	-2, 96,
	-1, 1744,
	5, 27,
	-2, 845,
	-1, 1825,
	58, 108,
	-2, 180,
	-1, 1828,
	58, 108,
	-2, 180,
	-1, 1901,
	189, 54,
	-2, 180,
	-1, 1940,
	58, 108,
	-2, 179,
	-1, 1964,
	5, 28,
	-2, 846,
	-1, 2121,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 22094

var yyAct = [...]int16{
	373, 1800, 21, 2077, 1857, 735, 1957, 1759, 1576, 1127,
	1803, 2078, 1902, 1251, 1950, 810, 1904, 1880, 1669, 558,
	560, 637, 3, 1796, 734, 1001, 638, 1939, 292, 1264,
	1575, 320, 1646, 1756, 1529, 96, 1286, 303, 96, 265,
	282, 1289, 858, 1019, 1486, 1517, 1487, 1659, 1198, 1971,
	1642, 1367, 291, 1312, 706, 1483, 1048, 1136, 269, 1269,
	287, 704, 96, 96, 1039, 1135, 1319, 53, 1063, 264,
	1042, 1002, 949, 907, 1113, 259, 96, 1188, 816, 295,
	939, 368, 1108, 935, 1194, 96, 547, 96, 722, 1256,
	1058, 619, 1350, 96, 884, 988, 566, 1089, 513, 1829,
	721, 361, 998, 1332, 708, 349, 736, 693, 348, 934,
	274, 2102, 1432, 742, 1170, 290, 737, 52, 1077, 260,
	261, 262, 263, 347, 661, 580, 572, 1081, 1437, 2069,
	271, 620, 48, 26, 27, 604, 1546, 1124, 1125, 1524,
	278, 352, 1797, 521, 1815, 1675, 594, 1531, 1532, 604,
	364, 1533, 2133, 995, 1683, 1816, 522, 523, 1095, 2040,
	358, 2127, 284, 1989, 1990, 503, 1310, 356, 1962, 1862,
	1045, 515, 1861, 1195, 1196, 2114, 520, 1128, 588, 2008,
	591, 1265, 1191, 2039, 1478, 2052, 606, 607, 608, 609,
	610, 611, 612, 545, 589, 590, 587, 613, 614, 615,
	616, 593, 592, 602, 603, 595, 596, 597, 598, 599,
	600, 601, 594, 1986, 1630, 604, 524, 1510, 1511, 1033,
	1034, 1848, 1530, 1077, 1078, 1509, 593, 592, 602, 603,
	595, 596, 597, 598, 599, 600, 601, 594, 96, 1961,
	604, 1277, 1080, 2059, 1276, 1032, 555, 1278, 1066, 602,
	603, 595, 596, 597, 598, 599, 600, 601, 594, 1822,
	723, 604, 724, 1073, 849, 1061, 1537, 287, 287, 1821,
	1615, 850, 1062, 595, 596, 597, 598, 599, 600, 601,
	594, 1614, 1334, 604, 287, 1613, 597, 598, 599, 600,
	601, 594, 569, 652, 604, 1083, 633, 287, 287, 287,
	287, 287, 287, 287, 1647, 1648, 1649, 1650, 1651, 1652,
	1096, 1193, 1213, 992, 1817, 1818, 1820, 1085, 1430, 1627,
	1819, 1324, 287, 1326, 1325, 1429, 1428, 1626, 559, 1220,
	1069, 287, 1064, 1074, 1218, 1109, 568, 258, 1623, 2131,
	1071, 1070, 1470, 559, 91, 87, 88, 96, 89, 2029,
	808, 2110, 1085, 2111, 96, 96, 96, 592, 602, 603,
	595, 596, 597, 598, 599, 600, 601, 594, 2083, 621,
	604, 593, 592, 602, 603, 595, 596, 597, 598, 599,
	600, 601, 594, 1525, 1141, 604, 593, 592, 602, 603,
	595, 596, 597, 598, 599, 600, 601, 594, 2074, 605,
	604, 593, 592, 602, 603, 595, 596, 597, 598, 599,
	600, 601, 594, 605, 508, 604, 2125, 2124, 1897, 1802,
	593, 592, 602, 603, 595, 596, 597, 598, 599, 600,
	601, 594, 1672, 352, 604, 1775, 548, 549, 550, 1431,
	553, 1881, 1531, 1532, 1588, 1589, 364, 557, 2058, 2126,
	2060, 2112, 551, 552, 666, 1951, 1684, 667, 49, 625,
	626, 627, 628, 629, 630, 631, 1862, 1425, 1067, 1535,
	2051, 1408, 999, 1849, 1068, 1952, 1741, 1677, 1676, 605,
	1304, 540, 1930, 1303, 1044, 1296, 510, 1291, 1724, 2082,
	818, 593, 592, 602, 603, 595, 596, 597, 598, 599,
	600, 601, 594, 1110, 605, 604, 2107, 1309, 593, 592,
	602, 603, 595, 596, 597, 598, 599, 600, 601, 594,
	719, 96, 604, 713, 1096, 605, 96, 1595, 1667, 96,
	801, 1523, 96, 1667, 1960, 1088, 96, 2092, 1294, 63,
	1605, 1835, 90, 1059, 1596, 2130, 514, 605, 1713, 529,
	1075, 542, 1076, 84, 544, 85, 1297, 96, 605, 1189,
	1060, 85, 54, 57, 59, 60, 61, 62, 828, 1670,
	1671, 1673, 807, 1060, 1072, 511, 96, 1268, 287, 287,
	1267, 1020, 1022, 541, 543, 287, 1266, 287, 507, 862,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 559, 506, 806, 861, 1059,
	809, 525, 519, 237, 86, 1409, 2118, 837, 823, 885,
	623, 624, 1853, 1639, 354, 818, 1060, 654, 655, 656,
	657, 658, 659, 660, 605, 287, 1554, 1931, 1932, 1933,
	1417, 287, 287, 287, 287, 287, 287, 287, 287, 605,
	835, 1233, 287, 1182, 856, 819, 820, 942, 944, 93,
	817, 938, 945, 1021, 605, 726, 882, 886, 821, 636,
	1991, 881, 584, 991, 980, 982, 535, 1041, 1040, 605,
	990, 863, 853, 287, 287, 287, 287, 357, 96, 579,
	287, 96, 96, 96, 96, 96, 1165, 577, 605, 880,
	518, 1413, 1873, 96, 1733, 1872, 96, 878, 1871, 526,
	96, 527, 910, 579, 1870, 96, 96, 534, 1003, 913,
	827, 925, 667, 941, 1018, 1869, 287, 945, 891, 1868,
	912, 838, 839, 840, 841, 842, 843, 844, 845, 929,
	932, 1867, 889, 890, 888, 846, 847, 1865, 539, 883,
	1585, 1279, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 994, 1995, 605,
	352, 352, 352, 352, 352, 986, 1027, 1254, 1405, 859,
	860, 1166, 1997, 1412, 1564, 352, 605, 725, 937, 1385,
	819, 820, 2122, 2120, 352, 946, 947, 1005, 1006, 1004,
	1008, 985, 1007, 821, 96, 364, 528, 96, 981, 1016,
	96, 570, 1480, 1038, 1024, 1025, 96, 2123, 96, 1992,
	1029, 1030, 989, 1288, 96, 578, 577, 96, 1142, 96,
	578, 577, 96, 1046, 923, 813, 993, 309, 996, 997,
	1229, 1565, 579, 1210, 922, 1209, 1774, 579, 1092, 574,
	926, 1094, 989, 1300, 1238, 287, 287, 287, 287, 927,
	928, 2095, 536, 1972, 578, 577, 1386, 1382, 1377, 287,
	1387, 1384, 1383, 1115, 924, 1777, 1381, 1624, 1111, 1112,
	1773, 579, 1172, 1973, 50, 1406, 1228, 1388, 1404, 1287,
	287, 287, 287, 2094, 1380, 887, 531, 532, 533, 1288,
	2057, 367, 1407, 504, 1288, 1299, 1122, 2056, 512, 2055,
	1974, 516, 517, 1288, 1097, 1098, 1099, 1100, 1970, 1787,
	885, 593, 592, 602, 603, 595, 596, 597, 598, 599,
	600, 601, 594, 1703, 559, 604, 1702, 287, 882, 578,
	577, 1192, 1883, 881, 287, 1542, 2028, 2053, 1227, 623,
	624, 287, 578, 577, 1171, 1200, 579, 1203, 1204, 1335,
	578, 577, 1179, 1180, 1181, 1206, 1207, 1208, 886, 579,
	1357, 688, 1993, 1994, 1996, 1998, 1999, 579, 578, 577,
	712, 1695, 1355, 1184, 1694, 1482, 1335, 287, 1866, 1335,
	287, 1331, 855, 1115, 2054, 579, 1341, 1740, 1111, 1112,
	1340, 578, 577, 1700, 1199, 1234, 1131, 908, 1133, 909,
	1240, 1230, 1972, 1241, 1242, 2020, 1243, 1244, 579, 559,
	1248, 1607, 1178, 874, 876, 877, 1163, 96, 50, 1216,
	875, 854, 1973, 635, 1351, 2001, 1306, 635, 1863, 1271,
	1221, 1273, 1528, 83, 1895, 2138, 1664, 2113, 1748, 2066,
	578, 577, 1185, 1186, 1187, 593, 592, 602, 603, 595,
	596, 597, 598, 599, 600, 601, 594, 579, 1527, 604,
	1664, 2047, 1895, 2046, 1938, 96, 2043, 2042, 287, 367,
	367, 367, 367, 1237, 367, 2034, 559, 1892, 1272, 54,
	1201, 367, 695, 698, 699, 700, 696, 1261, 697, 701,
	1664, 2031, 1257, 1258, 346, 1526, 352, 1664, 2030, 1305,
	1664, 2002, 1886, 625, 1298, 1323, 1280, 96, 582, 1130,
	1274, 96, 921, 96, 1748, 1948, 1748, 1799, 1885, 1282,
	1321, 834, 559, 1748, 1784, 1748, 559, 1751, 1750, 1793,
	1235, 1748, 1749, 1664, 1663, 824, 1292, 1293, 1295, 833,
	825, 1506, 559, 829, 1638, 559, 832, 1571, 1570, 1792,
	1344, 814, 1346, 1347, 1348, 1349, 96, 96, 1567, 1568,
	1567, 1566, 1202, 559, 96, 812, 23, 943, 559, 690,
	559, 851, 733, 732, 287, 537, 530, 1791, 1353, 1354,
	287, 287, 280, 1356, 716, 1352, 1896, 367, 1895, 605,
	870, 1246, 1378, 287, 728, 1788, 1247, 23, 1720, 1707,
	1696, 1686, 287, 1484, 1561, 1368, 1252, 1253, 1560, 1373,
	1375, 1434, 1555, 54, 1420, 1371, 50, 1232, 1372, 287,
	287, 287, 287, 287, 287, 23, 1252, 1743, 717, 287,
	715, 2037, 1372, 1253, 943, 1336, 1337, 287, 1339, 2015,
	1342, 1343, 689, 287, 287, 287, 1634, 50, 287, 690,
	1664, 287, 690, 1424, 1026, 1202, 715, 1423, 1685, 1422,
	1202, 1490, 1485, 1231, 1584, 1003, 1569, 1283, 690, 1488,
	287, 1003, 1438, 1435, 1467, 50, 1508, 1031, 1252, 1505,
	1202, 1433, 1573, 1572, 1516, 695, 698, 699, 700, 696,
	1471, 697, 701, 1479, 1211, 718, 857, 271, 50, 2128,
	1493, 2036, 1000, 1891, 287, 882, 1877, 1876, 1832, 1494,
	1477, 1831, 1795, 1794, 1495, 1786, 1725, 1722, 1708, 1553,
	1085, 1114, 1580, 605, 1552, 1550, 1539, 1501, 1499, 1507,
	1028, 1360, 741, 741, 802, 805, 1109, 1311, 1285, 1257,
	1258, 1323, 1426, 1427, 1515, 1102, 1410, 50, 1116, 1117,
	811, 287, 96, 1101, 367, 1090, 1321, 1543, 1514, 1536,
	1534, 65, 96, 1469, 1374, 367, 367, 367, 367, 367,
	367, 367, 367, 1858, 1882, 1581, 1574, 1583, 1484, 367,
	367, 1472, 1473, 1474, 1475, 1476, 1361, 1260, 1577, 1120,
	831, 1556, 1557, 96, 1559, 815, 1545, 1562, 1563, 865,
	1547, 556, 1013, 1011, 287, 869, 1263, 1014, 1012, 582,
	1262, 96, 367, 1010, 1009, 2089, 287, 2038, 1118, 1416,
	1591, 1121, 1167, 1609, 1126, 1015, 573, 699, 700, 1592,
	1134, 2086, 1140, 1611, 275, 276, 1177, 1176, 1143, 1284,
	561, 1160, 571, 1161, 1345, 1598, 1162, 731, 1618, 563,
	567, 931, 931, 562, 538, 1600, 1606, 1541, 1632, 933,
	2076, 859, 860, 1132, 367, 1726, 585, 830, 1582, 1603,
	1540, 1616, 1610, 287, 983, 1370, 1365, 1619, 1620, 983,
	287, 1621, 1622, 1363, 822, 1625, 703, 1558, 272, 273,
	352, 573, 2103, 1719, 1422, 1587, 96, 1175, 1522, 1635,
	1636, 1637, 266, 1640, 639, 1174, 2061, 1715, 1216, 1716,
	1717, 1718, 1842, 650, 1838, 267, 1837, 983, 1221, 54,
	1729, 1253, 1714, 2025, 1641, 1137, 1138, 1139, 1875, 287,
	1674, 1633, 2024, 2023, 2022, 287, 575, 1658, 1988, 1987,
	1521, 1520, 1874, 1653, 1654, 1655, 367, 1850, 1302, 1084,
	1656, 852, 56, 58, 367, 1679, 1809, 8, 1693, 1806,
	7, 504, 1680, 287, 1379, 96, 1807, 6, 1805, 5,
	1594, 1043, 1323, 1721, 714, 51, 1, 1903, 1612, 67,
	1682, 66, 1956, 1731, 1436, 509, 1123, 1321, 1687, 1197,
	1660, 632, 1282, 1704, 1710, 307, 2109, 2081, 293, 1395,
	1577, 1645, 2016, 1900, 2011, 1929, 1330, 1065, 1884, 1308,
	68, 2007, 1894, 1698, 287, 287, 1586, 287, 287, 287,
	1369, 1709, 1389, 1712, 1129, 1366, 1711, 1730, 1148, 1949,
	1967, 1697, 1119, 1757, 1666, 1051, 1281, 502, 64, 1739,
	367, 1864, 367, 1052, 1050, 1049, 1047, 1079, 1333, 1744,
	741, 1082, 740, 738, 739, 743, 1488, 245, 359, 702,
	367, 1368, 1660, 1752, 1753, 1754, 727, 1376, 576, 287,
	1396, 1742, 1403, 1402, 287, 1732, 1398, 1391, 1392, 1144,
	1399, 1394, 1393, 1411, 367, 848, 1401, 1397, 1164, 1307,
	1755, 1783, 554, 247, 617, 1173, 1772, 1400, 1771, 287,
	1770, 1776, 1780, 1275, 1390, 366, 1491, 565, 1778, 1836,
	1728, 1236, 649, 1814, 987, 1699, 294, 1701, 873, 306,
	305, 304, 1804, 864, 1245, 586, 351, 686, 694, 1798,
	692, 1358, 691, 1259, 1255, 1362, 1577, 1364, 350, 1419,
	1824, 1839, 1841, 1629, 1843, 1844, 1845, 1846, 1847, 868,
	25, 55, 277, 19, 1789, 1859, 1790, 1852, 18, 17,
	871, 872, 20, 16, 15, 1488, 1833, 14, 582, 29,
	1823, 1813, 13, 287, 1855, 1856, 1734, 1735, 1851, 1736,
	1737, 1738, 12, 11, 10, 287, 9, 1812, 1418, 1840,
	1811, 1878, 1810, 1808, 1889, 4, 1814, 1760, 268, 22,
	1890, 2, 0, 1893, 0, 1898, 0, 1887, 0, 0,
	0, 1762, 287, 287, 0, 1888, 0, 940, 0, 0,
	0, 0, 1577, 639, 0, 0, 948, 979, 287, 287,
	1946, 1947, 0, 287, 0, 0, 0, 0, 0, 0,
	0, 287, 0, 801, 1941, 1942, 1943, 1944, 1945, 0,
	1955, 1270, 1934, 1937, 0, 1954, 0, 1959, 0, 1968,
	0, 0, 1964, 0, 0, 0, 1963, 0, 1982, 1003,
	367, 0, 1899, 0, 0, 0, 1983, 0, 0, 0,
	0, 1290, 0, 1980, 1981, 1761, 1984, 287, 0, 1985,
	1814, 2000, 1301, 0, 0, 0, 0, 2017, 0, 2012,
	0, 0, 0, 0, 1154, 1328, 2005, 0, 1037, 1975,
	1976, 1977, 1978, 1979, 2003, 0, 0, 2006, 1153, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 0, 1814, 0, 2014,
	0, 0, 2004, 321, 47, 0, 2026, 1190, 0, 0,
	0, 0, 0, 2019, 0, 1359, 0, 0, 1158, 0,
	0, 0, 0, 0, 2032, 0, 367, 0, 1152, 2033,
	0, 593, 592, 602, 603, 595, 596, 597, 598, 599,
	600, 601, 594, 0, 1935, 604, 1579, 0, 0, 0,
	0, 47, 0, 0, 0, 0, 1590, 0, 0, 270,
	367, 0, 0, 2048, 0, 353, 2049, 2050, 2065, 0,
	0, 2068, 0, 0, 0, 2063, 1814, 2044, 2045, 2067,
	367, 0, 1149, 1146, 1147, 2070, 1145, 1602, 2072, 0,
	1814, 1814, 1814, 2080, 2062, 2071, 2064, 2075, 287, 2079,
	1804, 0, 2084, 0, 2088, 2087, 0, 1168, 1169, 2085,
	567, 2091, 0, 0, 0, 0, 1156, 1159, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 2098, 0, 0,
	287, 367, 0, 0, 0, 0, 0, 0, 0, 2017,
	1814, 2093, 1814, 1814, 983, 0, 0, 1492, 1270, 2106,
	983, 1898, 2106, 96, 0, 243, 0, 2099, 2117, 0,
	1758, 2100, 0, 0, 0, 2119, 0, 0, 0, 0,
	2115, 0, 0, 0, 0, 0, 0, 0, 0, 367,
	0, 253, 0, 1518, 0, 2121, 0, 0, 0, 0,
	2134, 0, 0, 287, 1814, 2135, 1205, 0, 1814, 0,
	1151, 0, 0, 0, 0, 0, 0, 2106, 0, 82,
	0, 1328, 0, 0, 0, 0, 2140, 2141, 593, 592,
	602, 603, 595, 596, 597, 598, 599, 600, 601, 594,
	0, 0, 604, 1150, 0, 0, 0, 0, 238, 0,
	0, 0, 1239, 0, 240, 546, 546, 546, 546, 0,
	546, 246, 242, 0, 0, 0, 1760, 546, 1578, 1706,
	0, 72, 77, 0, 69, 2129, 0, 0, 0, 0,
	1762, 0, 1593, 0, 47, 1597, 0, 73, 1599, 80,
	0, 0, 0, 244, 0, 0, 0, 248, 1601, 618,
	0, 0, 0, 622, 1155, 74, 75, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 1604, 0, 0, 605,
	0, 0, 1157, 634, 0, 367, 0, 0, 0, 0,
	0, 0, 0, 662, 0, 640, 641, 642, 643, 644,
	645, 646, 647, 648, 0, 651, 653, 653, 653, 653,
	653, 653, 653, 653, 1761, 682, 683, 684, 685, 0,
	0, 0, 0, 0, 0, 2136, 0, 705, 664, 0,
	0, 0, 0, 239, 0, 0, 1086, 1087, 0, 1091,
	0, 0, 1093, 0, 0, 0, 0, 0, 1763, 1764,
	1765, 1766, 1767, 1768, 1769, 0, 0, 0, 0, 1103,
	1104, 1105, 1106, 1107, 0, 0, 0, 1643, 0, 0,
	1643, 1643, 1643, 241, 1657, 249, 250, 251, 252, 256,
	0, 367, 0, 367, 255, 254, 0, 0, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 0, 914,
	915, 0, 916, 917, 918, 920, 919, 1643, 911, 665,
	0, 0, 1328, 0, 1688, 0, 0, 680, 663, 0,
	0, 0, 367, 669, 668, 0, 0, 0, 0, 71,
	0, 0, 0, 0, 1468, 0, 0, 0, 0, 0,
	1578, 1705, 0, 0, 0, 0, 0, 0, 1643, 0,
	0, 0, 367, 367, 0, 0, 0, 76, 0, 0,
	0, 1481, 1723, 0, 0, 0, 605, 0, 0, 78,
	79, 0, 81, 1727, 0, 0, 1496, 1497, 0, 0,
	1498, 0, 0, 1500, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	546, 0, 1512, 0, 0, 0, 1746, 1747, 0, 0,
	0, 546, 546, 546, 546, 546, 546, 546, 546, 1860,
	0, 0, 564, 681, 662, 546, 546, 0, 0, 0,
	0, 0, 1518, 0, 0, 0, 0, 0, 0, 0,
	1212, 1214, 0, 1215, 1779, 0, 0, 1217, 0, 1219,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 664,
	257, 1222, 1223, 0, 0, 1224, 0, 1225, 1226, 0,
	0, 0, 0, 0, 0, 0, 1578, 0, 0, 0,
	0, 1801, 281, 0, 94, 94, 0, 0, 0, 0,
	1825, 0, 0, 1643, 0, 0, 47, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 94,
	0, 0, 0, 0, 640, 94, 1854, 0, 0, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 0,
	0, 0, 0, 0, 0, 0, 1608, 0, 0, 0,
	665, 0, 0, 0, 0, 0, 0, 0, 680, 663,
	0, 0, 0, 0, 669, 668, 0, 0, 0, 0,
	0, 0, 1578, 1518, 353, 353, 353, 353, 353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1338, 705,
	0, 1023, 0, 1901, 0, 1926, 1927, 1928, 353, 0,
	0, 0, 0, 1940, 1825, 1825, 1940, 1825, 1825, 1518,
	1518, 0, 0, 0, 0, 1631, 0, 0, 0, 0,
	0, 0, 639, 0, 0, 0, 0, 0, 983, 0,
	0, 1965, 0, 0, 0, 0, 1966, 0, 0, 0,
	1969, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1801, 1518, 0, 2116, 23, 24,
	48, 26, 27, 0, 681, 0, 0, 0, 0, 1643,
	94, 1681, 0, 2009, 0, 0, 0, 0, 42, 741,
	0, 0, 0, 28, 0, 0, 0, 0, 271, 0,
	48, 26, 27, 0, 0, 0, 546, 0, 546, 0,
	0, 0, 1815, 0, 37, 0, 0, 2021, 50, 0,
	0, 0, 0, 1816, 0, 0, 546, 271, 1940, 48,
	26, 27, 0, 0, 0, 0, 0, 0, 0, 2035,
	0, 1815, 0, 0, 0, 0, 271, 0, 48, 26,
	27, 0, 1816, 0, 0, 0, 0, 0, 0, 0,
	1815, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1816, 0, 0, 0, 1183, 271, 2139, 48, 26,
	27, 0, 0, 0, 30, 31, 33, 32, 35, 94,
	1815, 0, 0, 0, 0, 0, 94, 710, 94, 0,
	0, 1816, 0, 2073, 0, 0, 2108, 0, 0, 0,
	36, 43, 44, 0, 0, 45, 46, 34, 0, 0,
	0, 1781, 0, 0, 1518, 2105, 1785, 1822, 0, 2090,
	0, 0, 0, 0, 1549, 1551, 0, 1821, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 0,
	48, 26, 27, 0, 0, 0, 1822, 0, 0, 0,
	0, 741, 1815, 0, 2104, 0, 1821, 0, 38, 39,
	0, 40, 41, 1816, 0, 1822, 271, 0, 48, 26,
	27, 0, 1817, 1818, 1820, 1821, 0, 0, 1819, 0,
	1815, 0, 1249, 1250, 0, 0, 0, 0, 0, 0,
	0, 1816, 0, 0, 0, 1822, 367, 0, 0, 0,
	0, 1817, 1818, 1820, 0, 1821, 1801, 1819, 0, 0,
	353, 0, 0, 0, 0, 1879, 0, 0, 0, 0,
	1817, 1818, 1820, 0, 0, 0, 1819, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1212,
	1214, 0, 1215, 0, 0, 1217, 0, 1219, 0, 0,
	1817, 1818, 1820, 94, 0, 1936, 1819, 0, 94, 1222,
	1223, 94, 0, 1224, 94, 1225, 1226, 1822, 836, 0,
	1953, 639, 0, 0, 0, 1958, 0, 1821, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 94,
	0, 0, 0, 0, 0, 1822, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1821, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 49, 836, 1665, 1668,
	0, 0, 1817, 1818, 1820, 0, 0, 0, 1819, 2010,
	0, 0, 0, 0, 0, 0, 0, 0, 2027, 0,
	0, 0, 0, 0, 0, 49, 546, 0, 0, 0,
	1817, 1818, 1820, 0, 0, 0, 1819, 0, 0, 0,
	0, 0, 0, 0, 49, 0, 2013, 281, 0, 0,
	0, 0, 0, 0, 281, 281, 0, 0, 1665, 984,
	281, 0, 0, 0, 984, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 49, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 281, 281, 281, 0,
	94, 0, 984, 94, 94, 94, 94, 94, 0, 0,
	0, 1489, 0, 47, 0, 1017, 0, 0, 94, 0,
	0, 0, 710, 0, 0, 0, 0, 94, 94, 0,
	1502, 1503, 1504, 0, 0, 0, 0, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	1958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1538,
	0, 0, 1441, 0, 49, 0, 0, 0, 0, 0,
	0, 0, 2101, 0, 0, 0, 1548, 0, 0, 0,
	0, 0, 634, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
	1922, 1923, 1924, 1925, 0, 0, 94, 0, 0, 94,
	0, 0, 94, 0, 0, 0, 0, 47, 94, 47,
	94, 0, 1450, 1456, 1454, 0, 94, 1451, 0, 94,
	1449, 94, 0, 1458, 94, 0, 1457, 1443, 1453, 1455,
	1452, 1447, 0, 1442, 0, 1460, 1459, 1461, 1440, 1463,
	0, 0, 0, 1466, 1445, 1465, 1464, 0, 1462, 836,
	0, 0, 0, 0, 0, 0, 0, 1444, 956, 0,
	0, 281, 0, 0, 353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 1448, 0,
	0, 1617, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1628, 0, 0, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1678,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 634, 0, 0, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	1329, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	0, 1745, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 94, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 1782, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1414, 1415,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	1834, 0, 0, 0, 0, 0, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 0, 47,
	0, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 984,
	0, 0, 0, 0, 0, 984, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1329, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2041, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 710, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1329, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1329, 0, 94, 0, 0,
	2132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 488, 477, 0, 436, 490,
	406, 424, 498, 426, 427, 463, 385, 446, 163, 421,
	403, 100, 409, 378, 416, 379, 407, 438, 124, 404,
	0, 479, 449, 138, 233, 234, 496, 141, 454, 0,
	187, 151, 0, 0, 441, 481, 444, 472, 435, 464,
	393, 453, 491, 422, 459, 492, 0, 1329, 0, 372,
	0, 1661, 0, 1662, 0, 0, 0, 0, 0, 113,
	0, 458, 486, 418, 501, 0, 462, 377, 456, 0,
	383, 386, 497, 484, 413, 414, 0, 0, 0, 0,
	0, 0, 0, 440, 445, 469, 432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 410,
	0, 452, 0, 984, 0, 390, 384, 0, 437, 0,
	0, 0, 392, 0, 411, 470, 0, 374, 475, 482,
	434, 147, 214, 485, 431, 430, 170, 0, 116, 0,
	193, 128, 423, 139, 467, 499, 489, 442, 480, 408,
	417, 118, 415, 177, 164, 205, 451, 465, 175, 142,
	197, 171, 204, 487, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 382, 375, 412, 473, 476, 397,
	461, 387, 419, 468, 420, 443, 402, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 0, 0, 159,
	131, 0, 0, 0, 380, 0, 188, 207, 224, 225,
	381, 401, 483, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 460, 178,
	115, 206, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2097, 396, 400, 394, 395, 447,
	448, 493, 494, 495, 471, 391, 0, 398, 399, 0,
	478, 133, 235, 236, 450, 99, 107, 140, 500, 221,
	0, 172, 126, 208, 0, 94, 425, 376, 429, 0,
	0, 0, 0, 0, 0, 0, 388, 389, 179, 0,
	433, 428, 455, 457, 466, 474, 0, 405, 439, 0,
	112, 488, 477, 0, 436, 490, 406, 424, 498, 426,
	427, 463, 385, 446, 163, 421, 403, 100, 409, 378,
	416, 379, 407, 438, 124, 404, 0, 479, 449, 138,
	233, 234, 496, 141, 454, 0, 187, 151, 0, 0,
	441, 481, 444, 472, 435, 464, 393, 453, 491, 422,
	459, 492, 0, 0, 0, 286, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 458, 486, 418,
	501, 0, 462, 377, 456, 0, 383, 386, 497, 484,
	413, 414, 0, 0, 0, 0, 0, 0, 0, 440,
	445, 469, 432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 879, 0, 410, 0, 452, 0, 0,
	0, 390, 384, 0, 437, 0, 0, 0, 392, 0,
	411, 470, 0, 374, 475, 482, 434, 147, 214, 485,
	431, 430, 170, 0, 116, 0, 193, 128, 423, 139,
	467, 499, 489, 442, 480, 408, 417, 118, 415, 177,
	164, 205, 451, 465, 175, 142, 197, 171, 204, 487,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	382, 375, 412, 473, 476, 397, 461, 387, 419, 468,
	420, 443, 402, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 159, 131, 0, 0, 0,
	380, 0, 188, 207, 224, 225, 381, 401, 483, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 460, 178, 115, 206, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 396, 400, 394, 395, 447, 448, 493, 494, 495,
	471, 391, 0, 398, 399, 0, 478, 133, 235, 236,
	450, 99, 107, 140, 500, 221, 0, 172, 126, 208,
	0, 0, 425, 376, 429, 0, 0, 0, 0, 0,
	0, 0, 388, 389, 179, 0, 433, 428, 455, 457,
	466, 474, 0, 405, 439, 0, 112, 488, 477, 0,
	436, 490, 406, 424, 498, 426, 427, 463, 385, 446,
	163, 421, 403, 100, 409, 378, 416, 379, 407, 438,
	124, 404, 0, 479, 449, 138, 233, 234, 496, 141,
	454, 0, 187, 151, 0, 0, 441, 481, 444, 472,
	435, 464, 393, 453, 491, 422, 459, 492, 0, 0,
	0, 372, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 458, 486, 418, 501, 0, 462, 377,
	456, 0, 383, 386, 497, 484, 413, 414, 1513, 0,
	0, 0, 0, 0, 0, 440, 445, 469, 432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 410, 0, 452, 0, 0, 0, 390, 384, 0,
	437, 0, 0, 0, 392, 0, 411, 470, 0, 374,
	475, 482, 434, 147, 214, 485, 431, 430, 170, 0,
	116, 0, 193, 128, 423, 139, 467, 499, 489, 442,
	480, 408, 417, 118, 415, 177, 164, 205, 451, 465,
	175, 142, 197, 171, 204, 487, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 382, 375, 412, 473,
	476, 397, 461, 387, 419, 468, 420, 443, 402, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 0, 0, 0, 380, 0, 188, 207,
	224, 225, 381, 401, 483, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	460, 178, 115, 206, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 396, 400, 394,
	395, 447, 448, 493, 494, 495, 471, 391, 0, 398,
	399, 0, 478, 133, 235, 236, 450, 99, 107, 140,
	500, 221, 0, 172, 126, 208, 0, 0, 425, 376,
	429, 0, 0, 0, 0, 0, 0, 0, 388, 389,
	179, 0, 433, 428, 455, 457, 466, 474, 0, 405,
	439, 0, 112, 488, 477, 0, 436, 490, 406, 424,
	498, 426, 427, 463, 385, 446, 163, 421, 403, 100,
	409, 378, 416, 379, 407, 438, 124, 404, 0, 479,
	449, 138, 233, 234, 496, 141, 454, 0, 187, 151,
	0, 0, 441, 481, 444, 472, 435, 464, 393, 453,
	491, 422, 459, 492, 0, 0, 0, 286, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 458,
	486, 418, 501, 0, 462, 377, 456, 0, 383, 386,
	497, 484, 413, 414, 0, 0, 0, 0, 0, 0,
	0, 440, 445, 469, 432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 410, 0, 452,
	0, 0, 0, 390, 384, 0, 437, 0, 0, 0,
	392, 0, 411, 470, 0, 374, 475, 482, 434, 147,
	214, 485, 431, 430, 170, 0, 116, 0, 193, 128,
	423, 139, 467, 499, 489, 442, 480, 408, 417, 118,
	415, 177, 164, 205, 451, 465, 175, 142, 197, 171,
	204, 487, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 382, 375, 412, 473, 476, 397, 461, 387,
	419, 468, 420, 443, 402, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 380, 0, 188, 207, 224, 225, 381, 401,
	483, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 460, 178, 115, 206,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 396, 400, 394, 395, 447, 448, 493,
	494, 495, 471, 391, 0, 398, 399, 0, 478, 133,
	235, 236, 450, 99, 107, 140, 500, 221, 0, 172,
	126, 208, 0, 0, 425, 376, 429, 0, 0, 0,
	0, 0, 0, 0, 388, 389, 179, 0, 433, 428,
	455, 457, 466, 474, 0, 405, 439, 0, 112, 488,
	477, 0, 436, 490, 406, 424, 498, 426, 427, 463,
	385, 446, 163, 421, 403, 100, 409, 378, 416, 379,
	407, 438, 124, 404, 0, 479, 449, 138, 233, 234,
	496, 141, 454, 0, 187, 151, 0, 0, 441, 481,
	444, 472, 435, 464, 393, 453, 491, 422, 459, 492,
	0, 0, 0, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 458, 486, 418, 501, 0,
	462, 377, 456, 0, 383, 386, 497, 484, 413, 414,
	0, 0, 0, 0, 0, 0, 0, 440, 445, 469,
	432, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 0, 410, 0, 452, 0, 0, 0, 390,
	384, 0, 437, 0, 0, 0, 392, 0, 411, 470,
	0, 374, 475, 482, 434, 147, 214, 485, 431, 430,
	170, 0, 116, 0, 193, 128, 423, 139, 467, 499,
	489, 442, 480, 408, 417, 118, 415, 177, 164, 205,
	451, 465, 175, 142, 197, 171, 204, 487, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 382, 375,
	412, 473, 476, 397, 461, 387, 419, 468, 420, 443,
	402, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 159, 131, 0, 0, 0, 380, 0,
	188, 207, 224, 225, 381, 401, 483, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 460, 178, 115, 206, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 396,
	400, 394, 395, 447, 448, 493, 494, 495, 471, 391,
	0, 398, 399, 0, 478, 133, 235, 236, 450, 99,
	107, 140, 500, 221, 0, 172, 126, 208, 0, 0,
	425, 376, 429, 0, 0, 0, 0, 0, 0, 0,
	388, 389, 179, 0, 433, 428, 455, 457, 466, 474,
	0, 405, 439, 0, 112, 488, 477, 0, 436, 490,
	406, 424, 498, 426, 427, 463, 385, 446, 163, 421,
	403, 100, 409, 378, 416, 379, 407, 438, 124, 404,
	0, 479, 449, 138, 233, 234, 496, 141, 454, 0,
	187, 151, 0, 0, 441, 481, 444, 472, 435, 464,
	393, 453, 491, 422, 459, 492, 50, 0, 0, 372,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 458, 486, 418, 501, 0, 462, 377, 456, 0,
	383, 386, 497, 484, 413, 414, 0, 0, 0, 0,
	0, 0, 0, 440, 445, 469, 432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 410,
	0, 452, 0, 0, 0, 390, 384, 0, 437, 0,
	0, 0, 392, 0, 411, 470, 0, 374, 475, 482,
	434, 147, 214, 485, 431, 430, 170, 0, 116, 0,
	193, 128, 423, 139, 467, 499, 489, 442, 480, 408,
	417, 118, 415, 177, 164, 205, 451, 465, 175, 142,
	197, 171, 204, 487, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 382, 375, 412, 473, 476, 397,
	461, 387, 419, 468, 420, 443, 402, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 0, 0, 159,
	131, 0, 0, 0, 380, 0, 188, 207, 224, 225,
	381, 401, 483, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 460, 178,
	115, 206, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 396, 400, 394, 395, 447,
	448, 493, 494, 495, 471, 391, 0, 398, 399, 0,
	478, 133, 235, 236, 450, 99, 107, 140, 500, 221,
	0, 172, 126, 208, 0, 0, 425, 376, 429, 0,
	0, 0, 0, 0, 0, 0, 388, 389, 179, 0,
	433, 428, 455, 457, 466, 474, 0, 405, 439, 0,
	112, 488, 477, 0, 436, 490, 406, 424, 498, 426,
	427, 463, 385, 446, 163, 421, 403, 100, 409, 378,
	416, 379, 407, 438, 124, 404, 0, 479, 449, 138,
	233, 234, 496, 141, 454, 0, 187, 151, 0, 0,
	441, 481, 444, 472, 435, 464, 393, 453, 491, 422,
	459, 492, 0, 0, 0, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 458, 486, 418,
	501, 0, 462, 377, 456, 0, 383, 386, 497, 484,
	413, 414, 0, 0, 0, 0, 0, 0, 0, 440,
	445, 469, 432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 410, 0, 452, 0, 0,
	0, 390, 384, 0, 437, 0, 0, 0, 392, 0,
	411, 470, 0, 374, 475, 482, 434, 147, 214, 485,
	431, 430, 170, 0, 116, 0, 193, 128, 423, 139,
	467, 499, 489, 442, 480, 408, 417, 118, 415, 177,
	164, 205, 451, 465, 175, 142, 197, 171, 204, 487,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	382, 375, 412, 473, 476, 397, 461, 387, 419, 468,
	420, 443, 402, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 370, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 159, 131, 0, 0, 0,
	380, 0, 188, 207, 224, 225, 381, 401, 483, 217,
	218, 219, 220, 0, 0, 0, 371, 369, 132, 182,
	136, 143, 173, 222, 460, 178, 115, 206, 184, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 396, 400, 394, 395, 447, 448, 493, 494, 495,
	471, 391, 0, 398, 399, 0, 478, 133, 235, 236,
	450, 99, 107, 140, 500, 221, 0, 172, 126, 208,
	0, 0, 425, 376, 429, 0, 0, 0, 0, 0,
	0, 0, 388, 389, 179, 0, 433, 428, 455, 457,
	466, 474, 0, 405, 439, 0, 112, 488, 477, 0,
	436, 490, 406, 424, 498, 426, 427, 463, 385, 446,
	163, 421, 403, 100, 409, 378, 416, 379, 407, 438,
	124, 404, 0, 479, 449, 138, 233, 234, 496, 141,
	454, 0, 187, 151, 0, 0, 441, 481, 444, 472,
	435, 464, 393, 453, 491, 422, 459, 492, 0, 0,
	0, 95, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 458, 486, 418, 501, 0, 462, 377,
	456, 0, 383, 386, 497, 484, 413, 414, 0, 0,
	0, 0, 0, 0, 0, 440, 445, 469, 432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 410, 0, 452, 0, 0, 0, 390, 384, 0,
	437, 0, 0, 0, 392, 0, 411, 470, 0, 374,
	475, 482, 434, 147, 214, 485, 431, 430, 170, 0,
	116, 0, 193, 128, 423, 139, 467, 499, 489, 442,
	480, 408, 417, 118, 415, 177, 164, 205, 451, 465,
	175, 142, 197, 171, 204, 487, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 382, 375, 412, 473,
	476, 397, 461, 387, 419, 468, 420, 443, 402, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 0, 0, 0, 380, 0, 188, 207,
	224, 225, 381, 401, 483, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	460, 178, 115, 206, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 396, 400, 394,
	395, 447, 448, 493, 494, 495, 471, 391, 0, 398,
	399, 0, 478, 133, 235, 236, 450, 99, 107, 140,
	500, 221, 0, 172, 126, 208, 0, 0, 425, 376,
	429, 0, 0, 0, 0, 0, 0, 0, 388, 389,
	179, 0, 433, 428, 455, 457, 466, 474, 0, 405,
	439, 0, 112, 488, 477, 0, 436, 490, 406, 424,
	498, 426, 427, 463, 385, 446, 163, 421, 403, 100,
	409, 378, 416, 379, 407, 438, 124, 404, 0, 479,
	449, 138, 233, 234, 496, 141, 454, 0, 187, 151,
	0, 0, 441, 481, 444, 472, 435, 464, 393, 453,
	491, 422, 459, 492, 0, 0, 0, 372, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 458,
	486, 418, 501, 0, 462, 377, 456, 0, 383, 386,
	497, 484, 413, 414, 0, 0, 0, 0, 0, 0,
	0, 440, 445, 469, 432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 410, 0, 452,
	0, 0, 0, 390, 384, 0, 437, 0, 0, 0,
	392, 0, 411, 470, 0, 374, 475, 482, 434, 147,
	214, 485, 431, 430, 170, 0, 116, 0, 193, 128,
	423, 139, 467, 499, 489, 442, 480, 408, 417, 118,
	415, 177, 164, 205, 451, 465, 175, 142, 197, 171,
	204, 487, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 382, 375, 412, 473, 476, 397, 461, 387,
	419, 468, 420, 443, 402, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 720, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 370,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 380, 0, 188, 207, 224, 225, 381, 401,
	483, 217, 218, 219, 220, 0, 0, 0, 371, 369,
	132, 182, 136, 143, 173, 222, 460, 178, 115, 206,
	184, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 396, 400, 394, 395, 447, 448, 493,
	494, 495, 471, 391, 0, 398, 399, 0, 478, 133,
	235, 236, 450, 99, 107, 140, 500, 221, 0, 172,
	126, 208, 0, 0, 425, 376, 429, 0, 0, 0,
	0, 0, 0, 0, 388, 389, 179, 0, 433, 428,
	455, 457, 466, 474, 0, 405, 439, 0, 112, 488,
	477, 0, 436, 490, 406, 424, 498, 426, 427, 463,
	385, 446, 163, 421, 403, 100, 409, 378, 416, 379,
	407, 438, 124, 404, 0, 479, 449, 138, 233, 234,
	496, 141, 454, 0, 187, 151, 0, 0, 441, 481,
	444, 472, 435, 464, 393, 453, 491, 422, 459, 492,
	0, 0, 0, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 458, 486, 418, 501, 0,
	462, 377, 456, 0, 383, 386, 497, 484, 413, 414,
	0, 0, 0, 0, 0, 0, 0, 440, 445, 469,
	432, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 410, 0, 452, 0, 0, 0, 390,
	384, 0, 437, 0, 0, 0, 392, 0, 411, 470,
	0, 374, 475, 482, 434, 147, 214, 485, 431, 430,
	170, 0, 116, 0, 193, 128, 423, 139, 467, 499,
	489, 442, 480, 408, 417, 118, 415, 177, 164, 205,
	451, 465, 175, 142, 197, 171, 204, 487, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 382, 375,
	412, 473, 476, 397, 461, 387, 419, 468, 420, 443,
	402, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 360, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 370, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 159, 131, 0, 0, 0, 380, 0,
	188, 207, 224, 225, 381, 401, 483, 217, 218, 219,
	220, 0, 0, 0, 371, 369, 363, 362, 136, 143,
	173, 222, 460, 178, 115, 206, 184, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 396,
	400, 394, 395, 447, 448, 493, 494, 495, 471, 391,
	0, 398, 399, 0, 478, 133, 235, 236, 450, 99,
	107, 140, 500, 221, 0, 172, 126, 208, 0, 0,
	425, 376, 429, 0, 0, 0, 0, 0, 0, 0,
	388, 389, 179, 0, 433, 428, 455, 457, 466, 474,
	0, 405, 439, 0, 112, 488, 477, 0, 436, 490,
	406, 424, 498, 426, 427, 463, 385, 446, 163, 421,
	403, 100, 409, 378, 416, 379, 407, 438, 124, 404,
	0, 479, 449, 138, 233, 234, 496, 141, 454, 0,
	187, 151, 0, 0, 441, 481, 444, 472, 435, 464,
	393, 453, 491, 422, 459, 492, 0, 0, 0, 372,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 458, 486, 418, 501, 0, 462, 377, 456, 0,
	383, 386, 497, 484, 413, 414, 0, 0, 0, 0,
	0, 0, 0, 440, 445, 469, 432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 410,
	0, 452, 0, 0, 0, 390, 384, 0, 437, 0,
	0, 0, 392, 0, 411, 470, 0, 374, 475, 482,
	434, 147, 214, 485, 431, 430, 170, 0, 116, 0,
	193, 128, 423, 139, 467, 499, 489, 442, 480, 408,
	417, 118, 415, 177, 164, 205, 451, 465, 175, 142,
	197, 171, 204, 487, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 382, 375, 412, 473, 476, 397,
	461, 387, 419, 468, 420, 443, 402, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 0, 0, 159,
	131, 0, 0, 0, 380, 0, 188, 207, 224, 225,
	381, 401, 483, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 460, 178,
	115, 206, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 396, 400, 394, 395, 447,
	448, 493, 494, 495, 471, 391, 0, 398, 399, 0,
	478, 133, 235, 236, 450, 99, 107, 140, 500, 221,
	0, 172, 126, 208, 0, 0, 425, 376, 429, 0,
	0, 0, 0, 0, 0, 0, 388, 389, 179, 0,
	433, 428, 455, 457, 466, 474, 163, 405, 439, 100,
	112, 0, 289, 0, 0, 0, 124, 285, 0, 0,
	0, 138, 233, 234, 331, 141, 0, 0, 187, 151,
	0, 0, 0, 0, 322, 323, 0, 0, 0, 0,
	0, 0, 1035, 0, 50, 0, 0, 286, 310, 288,
	308, 312, 313, 314, 315, 0, 0, 113, 311, 316,
	317, 318, 1036, 0, 0, 0, 283, 301, 0, 330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 299, 0, 0, 0, 0, 343,
	0, 300, 0, 0, 296, 297, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	214, 0, 0, 341, 170, 0, 116, 0, 193, 128,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 177, 164, 205, 0, 165, 175, 142, 197, 171,
	204, 0, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 345, 0, 159, 131, 0,
	0, 0, 0, 0, 188, 207, 224, 225, 0, 0,
	0, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 0, 178, 115, 206,
	184, 319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 342, 338, 339, 336, 337, 335,
	334, 333, 344, 324, 325, 326, 327, 329, 0, 133,
	235, 236, 328, 99, 107, 140, 0, 221, 0, 172,
	126, 208, 163, 0, 0, 100, 936, 0, 289, 0,
	0, 0, 124, 285, 0, 0, 179, 138, 233, 234,
	331, 141, 0, 0, 187, 151, 0, 340, 112, 0,
	322, 323, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 286, 310, 288, 308, 312, 313, 314,
	315, 0, 0, 113, 311, 316, 317, 318, 0, 0,
	0, 0, 283, 301, 0, 330, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	299, 279, 0, 0, 0, 343, 0, 300, 0, 0,
	296, 297, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 214, 0, 0, 341,
	170, 0, 116, 0, 193, 128, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 177, 164, 205,
	0, 165, 175, 142, 197, 171, 204, 0, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 345, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	342, 338, 339, 336, 337, 335, 334, 333, 344, 324,
	325, 326, 327, 329, 0, 133, 235, 236, 328, 99,
	107, 140, 0, 221, 0, 172, 126, 208, 163, 0,
	0, 100, 0, 0, 289, 0, 0, 0, 124, 285,
	0, 0, 179, 138, 233, 234, 331, 141, 0, 0,
	187, 151, 0, 340, 112, 0, 322, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 559, 286,
	310, 288, 308, 312, 313, 314, 315, 0, 0, 113,
	311, 316, 317, 318, 0, 0, 0, 0, 283, 301,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 299, 0, 0, 0,
	0, 343, 0, 300, 0, 0, 296, 297, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 341, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 177, 164, 205, 0, 165, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 345, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 342, 338, 339, 336,
	337, 335, 334, 333, 344, 324, 325, 326, 327, 329,
	0, 133, 235, 236, 328, 99, 107, 140, 0, 221,
	0, 172, 126, 208, 163, 0, 0, 100, 0, 0,
	289, 0, 0, 0, 124, 285, 0, 0, 179, 138,
	233, 234, 331, 141, 0, 0, 187, 151, 0, 340,
	112, 0, 322, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 286, 310, 288, 308, 312,
	313, 314, 315, 0, 0, 113, 311, 316, 317, 318,
	0, 0, 0, 0, 283, 301, 0, 330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 299, 279, 0, 0, 0, 343, 0, 300,
	0, 0, 296, 297, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 341, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 345, 0, 159, 131, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 319,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 342, 338, 339, 336, 337, 335, 334, 333,
	344, 324, 325, 326, 327, 329, 0, 133, 235, 236,
	328, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 289, 0, 0, 0,
	124, 285, 0, 0, 179, 138, 233, 234, 331, 141,
	0, 0, 187, 151, 0, 340, 112, 0, 322, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 286, 310, 288, 308, 312, 313, 314, 315, 0,
	0, 113, 311, 316, 317, 318, 0, 0, 0, 0,
	283, 301, 0, 330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 299, 0,
	0, 0, 0, 343, 0, 300, 0, 0, 950, 297,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 341, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 952, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 962, 968, 966, 192, 149, 963, 135,
	183, 961, 103, 0, 970, 123, 168, 969, 954, 965,
	967, 964, 959, 199, 953, 223, 972, 971, 973, 951,
	975, 212, 106, 110, 978, 957, 977, 976, 209, 974,
	202, 150, 146, 0, 105, 200, 148, 145, 955, 956,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 345,
	0, 159, 131, 0, 0, 0, 0, 0, 958, 960,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 319, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 342, 338,
	339, 336, 337, 335, 334, 333, 344, 324, 325, 326,
	327, 329, 0, 133, 235, 236, 328, 99, 107, 140,
	0, 221, 0, 172, 126, 208, 23, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 163, 0,
	179, 100, 0, 0, 289, 0, 0, 0, 124, 285,
	0, 340, 112, 138, 233, 234, 331, 141, 0, 0,
	187, 151, 0, 0, 0, 0, 322, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 286,
	310, 288, 308, 312, 313, 314, 315, 0, 0, 113,
	311, 316, 317, 318, 0, 0, 0, 0, 283, 301,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 299, 0, 0, 0,
	0, 343, 0, 300, 0, 0, 296, 297, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 341, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 177, 164, 205, 0, 165, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 345, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 342, 338, 339, 336,
	337, 335, 334, 333, 344, 324, 325, 326, 327, 329,
	0, 133, 235, 236, 328, 99, 107, 140, 0, 221,
	0, 172, 126, 208, 163, 0, 0, 100, 0, 0,
	289, 0, 0, 0, 124, 285, 0, 0, 179, 138,
	233, 234, 331, 141, 0, 0, 187, 151, 0, 340,
	112, 0, 322, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 286, 310, 288, 308, 312,
	313, 314, 315, 0, 0, 113, 311, 316, 317, 318,
	0, 0, 0, 0, 283, 301, 0, 330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 299, 0, 0, 0, 0, 343, 0, 300,
	0, 0, 296, 297, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 341, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 345, 0, 159, 131, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 319,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 342, 338, 339, 336, 337, 335, 334, 333,
	344, 324, 325, 326, 327, 329, 0, 133, 235, 236,
	328, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 179, 138, 233, 234, 331, 141,
	0, 0, 187, 151, 0, 340, 112, 0, 322, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 286, 310, 288, 308, 312, 313, 314, 315, 0,
	0, 113, 311, 316, 317, 318, 0, 0, 0, 0,
	0, 301, 0, 330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 299, 0,
	0, 0, 0, 343, 0, 300, 0, 0, 296, 297,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 341, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 2137, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 345,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 319, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 342, 338,
	339, 336, 337, 335, 334, 333, 344, 324, 325, 326,
	327, 329, 0, 133, 235, 236, 328, 99, 107, 140,
	0, 221, 0, 172, 126, 208, 163, 0, 0, 100,
	0, 0, 289, 0, 0, 0, 124, 0, 0, 0,
	179, 138, 233, 234, 331, 141, 0, 0, 187, 151,
	0, 340, 112, 0, 322, 323, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 286, 310, 288,
	308, 312, 313, 314, 315, 0, 0, 113, 311, 316,
	317, 318, 0, 0, 0, 0, 0, 301, 0, 330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 299, 0, 0, 0, 0, 343,
	0, 300, 0, 0, 296, 297, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	214, 0, 0, 341, 170, 0, 116, 0, 193, 128,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 177, 164, 205, 0, 165, 175, 142, 197, 171,
	204, 0, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 345, 0, 159, 131, 0,
	0, 0, 0, 0, 188, 207, 224, 225, 0, 0,
	0, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 0, 178, 115, 206,
	184, 319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 342, 338, 339, 336, 337, 335,
	334, 333, 344, 324, 325, 326, 327, 329, 0, 133,
	235, 236, 328, 99, 107, 140, 0, 221, 0, 172,
	126, 208, 163, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 179, 138, 233, 234,
	331, 141, 0, 0, 187, 151, 0, 340, 112, 0,
	322, 323, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 286, 310, 288, 308, 312, 313, 314,
	315, 0, 0, 113, 311, 316, 317, 318, 0, 0,
	0, 0, 0, 301, 0, 330, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	299, 0, 0, 0, 0, 343, 0, 300, 0, 0,
	296, 297, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 214, 0, 0, 341,
	170, 0, 116, 0, 193, 128, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 177, 164, 205,
	0, 165, 175, 142, 197, 171, 204, 0, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 345, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	342, 338, 339, 336, 337, 335, 334, 333, 344, 324,
	325, 326, 327, 329, 0, 133, 235, 236, 328, 99,
	107, 140, 0, 221, 0, 172, 126, 208, 163, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 179, 138, 233, 234, 331, 141, 0, 0,
	187, 151, 0, 340, 112, 0, 322, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 1213, 0, 0, 286,
	310, 288, 308, 312, 313, 314, 315, 0, 0, 113,
	311, 316, 317, 318, 0, 0, 0, 0, 0, 301,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 299, 0, 0, 0,
	0, 343, 0, 300, 0, 0, 296, 297, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 341, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 177, 164, 205, 0, 165, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 345, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 342, 338, 339, 336,
	337, 335, 334, 333, 344, 324, 325, 326, 327, 329,
	0, 133, 235, 236, 328, 99, 107, 140, 0, 221,
	0, 172, 126, 208, 163, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 179, 138,
	233, 234, 0, 141, 0, 0, 187, 151, 0, 340,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1544, 0, 0, 286, 0, 1314, 1315, 1316,
	1317, 0, 0, 0, 0, 113, 1320, 1318, 317, 318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 0, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 1322, 1327, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 1326, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 179, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 286, 0, 1314, 1315, 1316, 1317, 0, 0, 0,
	0, 113, 1320, 1318, 317, 318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 1322, 1327, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 1326,
	1325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 235, 236, 0, 99, 107, 140,
	0, 221, 0, 172, 126, 208, 163, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	179, 138, 233, 234, 0, 141, 0, 0, 187, 151,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 1314,
	1315, 1316, 1317, 0, 0, 0, 0, 113, 1320, 1318,
	317, 318, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	214, 0, 0, 0, 170, 0, 116, 0, 193, 128,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 177, 164, 205, 0, 165, 175, 142, 197, 171,
	204, 0, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 1322, 1327, 0,
	0, 0, 0, 0, 188, 207, 224, 225, 0, 0,
	0, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 0, 178, 115, 206,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 163, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 124, 1324, 0, 1326, 1325, 138, 233, 234,
	0, 141, 0, 0, 187, 151, 0, 0, 0, 133,
	235, 236, 0, 99, 107, 140, 0, 221, 0, 172,
	126, 208, 0, 372, 310, 930, 308, 312, 313, 314,
	315, 0, 0, 113, 311, 316, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 214, 0, 0, 0,
	170, 0, 116, 0, 193, 128, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 177, 164, 205,
	0, 165, 175, 142, 197, 171, 204, 0, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 767, 0, 138, 233, 234, 0, 141, 0,
	0, 187, 151, 0, 0, 133, 235, 236, 0, 99,
	107, 140, 0, 221, 0, 172, 126, 208, 1830, 0,
	372, 0, 1828, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 0, 1827, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 752, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 214, 0, 0, 0, 170, 0, 116,
	0, 193, 128, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 768, 0, 177, 164, 205, 0, 165, 175,
	142, 197, 171, 204, 0, 215, 216, 195, 213, 180,
	108, 158, 98, 169, 176, 0, 117, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 185, 101, 194, 203,
	114, 181, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 0, 794, 795, 168, 796, 797, 798, 800,
	799, 769, 770, 771, 775, 773, 772, 774, 746, 748,
	212, 744, 747, 753, 749, 750, 751, 765, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 766,
	776, 777, 778, 779, 780, 781, 782, 783, 0, 0,
	159, 131, 0, 0, 0, 0, 0, 188, 207, 224,
	225, 0, 0, 0, 217, 218, 219, 220, 0, 0,
	0, 156, 111, 132, 182, 136, 143, 173, 222, 0,
	178, 115, 206, 184, 163, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 767, 0, 138,
	233, 234, 0, 141, 0, 0, 187, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 235, 236, 372, 99, 745, 140, 0,
	221, 0, 172, 126, 208, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 752, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 0, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 768, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 2018, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 0, 794, 795,
	168, 796, 797, 798, 800, 799, 769, 770, 771, 775,
	773, 772, 774, 746, 748, 212, 744, 747, 753, 749,
	750, 751, 765, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 766, 776, 777, 778, 779, 780,
	781, 782, 783, 0, 0, 159, 131, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 0,
	0, 0, 0, 163, 0, 0, 100, 0, 581, 0,
	0, 0, 0, 124, 0, 0, 0, 0, 138, 233,
	234, 0, 141, 0, 0, 187, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 745, 140, 372, 221, 583, 172, 126, 208,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 578, 577, 0, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 214, 0, 0,
	0, 170, 0, 116, 0, 193, 128, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 177, 164,
	205, 0, 165, 175, 142, 197, 171, 204, 0, 215,
	216, 195, 213, 180, 108, 158, 98, 169, 176, 0,
	117, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	185, 101, 194, 203, 114, 181, 104, 201, 190, 192,
	149, 134, 135, 183, 102, 103, 0, 174, 123, 168,
	127, 122, 161, 191, 152, 198, 199, 119, 223, 121,
	120, 189, 109, 211, 212, 106, 110, 210, 157, 162,
	160, 209, 196, 202, 150, 146, 0, 105, 200, 148,
	145, 137, 0, 125, 129, 166, 144, 167, 130, 154,
	153, 155, 0, 0, 159, 131, 0, 0, 0, 0,
	0, 188, 207, 224, 225, 0, 0, 0, 217, 218,
	219, 220, 0, 0, 0, 156, 111, 132, 182, 136,
	143, 173, 222, 0, 178, 115, 206, 184, 163, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 767, 0, 138, 233, 234, 0, 141, 0, 0,
	187, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 235, 236, 372,
	99, 107, 140, 0, 221, 0, 172, 126, 208, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 752, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 0, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 768, 0, 177, 164, 205, 0, 165, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	793, 0, 794, 795, 168, 796, 797, 798, 800, 799,
	769, 770, 771, 775, 773, 772, 774, 746, 748, 212,
	744, 747, 753, 749, 750, 751, 765, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 766, 776,
	777, 778, 779, 780, 781, 782, 783, 0, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 0,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 133, 235, 236, 0, 99, 745, 140, 0, 221,
	0, 172, 126, 208, 1830, 0, 372, 0, 1828, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 0, 1827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1826, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 163, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 0, 138,
	233, 234, 0, 141, 0, 0, 187, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 235,
	236, 0, 99, 107, 140, 372, 221, 505, 172, 126,
	208, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1059, 147, 214, 0,
	0, 0, 1054, 0, 1053, 0, 1055, 1056, 0, 139,
	0, 0, 1057, 1060, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 159, 131, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 163,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 0, 0, 138, 233, 234, 0, 141, 0,
	0, 187, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	372, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 925,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 214, 0, 0, 0, 170, 0, 116,
	0, 193, 128, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 177, 164, 205, 0, 165, 175,
	142, 197, 171, 204, 0, 215, 216, 195, 213, 180,
	108, 158, 98, 169, 176, 0, 117, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 185, 101, 194, 203,
	114, 181, 104, 201, 190, 192, 149, 134, 135, 183,
	102, 103, 0, 174, 123, 168, 127, 122, 161, 191,
	152, 198, 1690, 119, 223, 121, 120, 189, 109, 211,
	212, 106, 1689, 210, 157, 162, 160, 209, 1691, 202,
	150, 146, 0, 105, 200, 148, 145, 1692, 928, 125,
	129, 166, 144, 167, 130, 154, 153, 155, 0, 0,
	159, 131, 924, 0, 0, 0, 0, 188, 207, 224,
	225, 0, 0, 0, 217, 218, 219, 220, 0, 0,
	0, 156, 111, 132, 182, 136, 143, 173, 222, 0,
	178, 115, 206, 184, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 163, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 0, 138, 233, 234, 0, 141, 0, 0, 187,
	151, 0, 133, 235, 236, 0, 99, 107, 140, 0,
	221, 0, 172, 126, 208, 50, 0, 0, 95, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 113, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 214, 0, 0, 0, 170, 0, 116, 0, 193,
	128, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 177, 164, 205, 0, 165, 175, 142, 197,
	171, 204, 0, 215, 216, 195, 213, 180, 108, 158,
	98, 169, 176, 0, 117, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 185, 101, 194, 203, 114, 181,
	104, 201, 190, 192, 149, 134, 135, 183, 102, 103,
	0, 174, 123, 168, 127, 122, 161, 191, 152, 198,
	199, 119, 223, 121, 120, 189, 109, 211, 212, 106,
	110, 210, 157, 162, 160, 209, 196, 202, 150, 146,
	0, 105, 200, 148, 145, 137, 0, 125, 129, 166,
	144, 167, 130, 154, 153, 155, 0, 0, 159, 131,
	0, 0, 0, 0, 0, 188, 207, 224, 225, 0,
	0, 0, 217, 218, 219, 220, 0, 0, 0, 156,
	111, 132, 182, 136, 143, 173, 222, 0, 178, 115,
	206, 184, 0, 0, 0, 0, 163, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	0, 138, 233, 234, 0, 141, 0, 0, 187, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 235, 236, 0, 99, 107, 140, 95, 221, 97,
	172, 126, 208, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	214, 0, 0, 0, 170, 0, 116, 0, 193, 128,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 177, 164, 205, 0, 165, 175, 142, 197, 171,
	204, 0, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 0, 0, 188, 207, 224, 225, 0, 0,
	0, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 0, 178, 115, 206,
	184, 0, 0, 0, 0, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 0,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	235, 236, 0, 99, 107, 140, 286, 221, 97, 172,
	126, 208, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 2096, 0, 0, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 1519, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 163, 0, 0, 100, 0, 709,
	0, 0, 0, 0, 124, 0, 0, 0, 0, 138,
	233, 234, 0, 141, 0, 0, 187, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 235,
	236, 0, 99, 107, 140, 95, 221, 711, 172, 126,
	208, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 0, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 159, 131, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 163, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 0, 138, 233, 234,
	0, 141, 0, 0, 187, 151, 0, 133, 235, 236,
	0, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	50, 0, 0, 95, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 113, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 214, 0, 0, 0,
	170, 0, 116, 0, 193, 128, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 177, 164, 205,
	0, 165, 175, 142, 197, 171, 204, 0, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 0, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 133, 235, 236, 0, 99,
	107, 140, 0, 221, 0, 172, 126, 208, 50, 0,
	0, 372, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 0, 0, 0, 0, 0,
	0, 163, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 124, 0, 0, 0, 0, 138, 233, 234, 0,
	141, 0, 0, 187, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 235, 236, 0, 99, 107, 140,
	0, 221, 372, 172, 126, 208, 866, 0, 0, 867,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 214, 0, 0, 0, 170,
	0, 116, 0, 193, 128, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 177, 164, 205, 0,
	165, 175, 142, 197, 171, 204, 0, 215, 216, 195,
	213, 180, 108, 158, 98, 169, 176, 0, 117, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 185, 101,
	194, 203, 114, 181, 104, 201, 190, 192, 149, 134,
	135, 183, 102, 103, 0, 174, 123, 168, 127, 122,
	161, 191, 152, 198, 199, 119, 223, 121, 120, 189,
	109, 211, 212, 106, 110, 210, 157, 162, 160, 209,
	196, 202, 150, 146, 0, 105, 200, 148, 145, 137,
	0, 125, 129, 166, 144, 167, 130, 154, 153, 155,
	0, 0, 159, 131, 0, 0, 0, 0, 0, 188,
	207, 224, 225, 0, 0, 0, 217, 218, 219, 220,
	0, 0, 0, 156, 111, 132, 182, 136, 143, 173,
	222, 0, 178, 115, 206, 184, 0, 0, 0, 0,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 0, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 235, 236, 0, 99, 107,
	140, 95, 221, 97, 172, 126, 208, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	826, 178, 115, 206, 184, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 0,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 803, 0, 133, 235, 236, 372, 99, 107, 140,
	0, 221, 0, 172, 126, 208, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	804, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 163, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 124, 730, 0, 0, 0, 138,
	233, 234, 0, 141, 0, 0, 187, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 235,
	236, 0, 99, 107, 140, 372, 221, 729, 172, 126,
	208, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 0, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 159, 131, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 0,
	0, 0, 0, 163, 0, 0, 100, 0, 709, 0,
	0, 0, 0, 124, 0, 0, 0, 0, 138, 233,
	234, 0, 141, 0, 0, 187, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 107, 140, 95, 221, 711, 172, 126, 208,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 214, 0, 0,
	0, 170, 0, 116, 0, 193, 128, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 177, 164,
	205, 0, 707, 175, 142, 197, 171, 204, 0, 215,
	216, 195, 213, 180, 108, 158, 98, 169, 176, 0,
	117, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	185, 101, 194, 203, 114, 181, 104, 201, 190, 192,
	149, 134, 135, 183, 102, 103, 0, 174, 123, 168,
	127, 122, 161, 191, 152, 198, 199, 119, 223, 121,
	120, 189, 109, 211, 212, 106, 110, 210, 157, 162,
	160, 209, 196, 202, 150, 146, 0, 105, 200, 148,
	145, 137, 0, 125, 129, 166, 144, 167, 130, 154,
	153, 155, 0, 0, 159, 131, 0, 0, 0, 0,
	0, 188, 207, 224, 225, 0, 0, 0, 217, 218,
	219, 220, 0, 0, 0, 156, 111, 132, 182, 136,
	143, 173, 222, 0, 178, 115, 206, 184, 0, 0,
	0, 0, 163, 0, 0, 100, 0, 0, 0, 0,
	0, 687, 124, 0, 0, 0, 0, 138, 233, 234,
	0, 141, 0, 0, 187, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 235, 236, 0,
	99, 107, 140, 95, 221, 97, 172, 126, 208, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 214, 0, 0, 0,
	170, 0, 116, 0, 193, 128, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 177, 164, 205,
	0, 165, 175, 142, 197, 171, 204, 0, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 0, 0, 0,
	355, 0, 0, 0, 0, 0, 0, 163, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 0, 138, 233, 234, 0, 141, 0, 0, 187,
	151, 0, 0, 0, 0, 133, 235, 236, 0, 99,
	107, 140, 0, 221, 0, 172, 126, 208, 95, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 214, 0, 0, 0, 170, 0, 116, 0, 193,
	128, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 177, 164, 205, 0, 165, 175, 142, 197,
	171, 204, 0, 215, 216, 195, 213, 180, 108, 158,
	98, 169, 176, 0, 117, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 185, 101, 194, 203, 114, 181,
	104, 201, 190, 192, 149, 134, 135, 183, 102, 103,
	0, 174, 123, 168, 127, 122, 161, 191, 152, 198,
	199, 119, 223, 121, 120, 189, 109, 211, 212, 106,
	110, 210, 157, 162, 160, 209, 196, 202, 150, 146,
	0, 105, 200, 148, 145, 137, 0, 125, 129, 166,
	144, 167, 130, 154, 153, 155, 0, 0, 159, 131,
	0, 0, 0, 0, 0, 188, 207, 224, 225, 0,
	0, 0, 217, 218, 219, 220, 0, 0, 0, 156,
	111, 132, 182, 136, 143, 173, 222, 0, 178, 115,
	206, 184, 0, 0, 0, 0, 163, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	0, 138, 233, 234, 0, 141, 0, 0, 187, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 235, 236, 0, 99, 107, 140, 95, 221, 97,
	172, 126, 208, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 147,
	214, 0, 0, 0, 170, 0, 116, 0, 193, 128,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 177, 164, 205, 0, 165, 175, 142, 197, 171,
	204, 0, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 0, 0, 188, 207, 224, 225, 0, 0,
	0, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 0, 178, 115, 206,
	184, 0, 0, 0, 0, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 0,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	235, 236, 0, 99, 107, 140, 95, 221, 97, 172,
	126, 208, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 0, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 235,
	236, 372, 99, 107, 140, 0, 221, 0, 172, 126,
	208, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 1519,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 0,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 235, 236, 372, 99, 107, 140,
	0, 221, 0, 172, 126, 208, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 1644, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 163, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 0, 138,
	233, 234, 0, 141, 0, 0, 187, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 235,
	236, 0, 99, 107, 140, 286, 221, 97, 172, 126,
	208, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 0, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 159, 131, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 0,
	0, 0, 0, 163, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 124, 0, 0, 0, 0, 138, 233,
	234, 0, 141, 0, 0, 187, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 107, 140, 95, 221, 711, 172, 126, 208,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 214, 0, 0,
	0, 170, 0, 116, 0, 193, 128, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 177, 164,
	205, 0, 165, 175, 142, 197, 171, 204, 0, 215,
	216, 195, 213, 180, 108, 158, 98, 169, 176, 0,
	117, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	185, 101, 194, 203, 114, 181, 104, 201, 190, 192,
	149, 134, 135, 183, 102, 103, 0, 174, 123, 168,
	127, 122, 161, 191, 152, 198, 199, 119, 223, 121,
	120, 189, 109, 211, 212, 106, 110, 210, 157, 162,
	160, 209, 196, 202, 150, 146, 0, 105, 200, 148,
	145, 137, 0, 125, 129, 166, 144, 167, 130, 154,
	153, 155, 0, 0, 159, 131, 0, 0, 0, 0,
	0, 188, 207, 224, 225, 0, 0, 0, 217, 218,
	219, 220, 0, 0, 0, 156, 111, 132, 182, 136,
	143, 173, 222, 0, 178, 115, 206, 184, 163, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 0, 138, 233, 234, 0, 141, 0, 0,
	187, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 235, 236, 372,
	99, 107, 140, 0, 221, 0, 172, 126, 208, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 0, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 177, 164, 205, 0, 165, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 0, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 0, 0, 0, 0, 163, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 0, 138, 233, 234, 0, 141, 0, 0, 187,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 235, 236, 0, 99, 107, 140, 372, 221,
	583, 172, 126, 208, 0, 0, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 214, 0, 0, 0, 170, 0, 116, 0, 193,
	128, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 177, 164, 205, 0, 165, 175, 142, 197,
	171, 204, 0, 215, 216, 195, 213, 180, 108, 158,
	98, 169, 176, 0, 117, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 185, 101, 194, 203, 114, 181,
	104, 201, 190, 192, 149, 134, 135, 183, 102, 103,
	0, 174, 123, 168, 127, 122, 161, 191, 152, 198,
	199, 119, 223, 121, 120, 189, 109, 211, 212, 106,
	110, 210, 157, 162, 160, 209, 196, 202, 150, 146,
	0, 105, 200, 148, 145, 137, 0, 125, 129, 166,
	144, 167, 130, 154, 153, 155, 0, 0, 159, 131,
	0, 0, 0, 0, 0, 188, 207, 224, 225, 0,
	0, 0, 217, 218, 219, 220, 0, 0, 0, 156,
	111, 132, 182, 136, 143, 173, 222, 0, 178, 115,
	206, 184, 0, 0, 0, 0, 163, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	0, 138, 233, 234, 0, 141, 0, 0, 187, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 235, 236, 0, 99, 107, 140, 372, 221, 505,
	172, 126, 208, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	214, 0, 0, 0, 170, 0, 116, 0, 193, 128,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 177, 164, 205, 0, 165, 175, 142, 197, 171,
	204, 0, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 0, 0, 188, 207, 224, 225, 0, 0,
	0, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 0, 178, 115, 206,
	184, 163, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 124, 0, 0, 0, 0, 138, 233, 234, 0,
	141, 0, 0, 187, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	235, 236, 372, 99, 107, 140, 0, 221, 0, 172,
	126, 208, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 214, 0, 0, 0, 170,
	0, 116, 0, 193, 128, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 177, 164, 205, 0,
	165, 175, 142, 197, 171, 204, 0, 215, 216, 195,
	213, 180, 108, 158, 98, 169, 176, 0, 117, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 185, 101,
	194, 203, 114, 181, 104, 201, 190, 192, 149, 134,
	135, 183, 102, 103, 0, 174, 123, 168, 127, 122,
	161, 191, 152, 198, 199, 119, 223, 121, 120, 189,
	109, 211, 212, 106, 110, 210, 157, 162, 160, 209,
	196, 202, 150, 146, 0, 105, 200, 148, 145, 137,
	0, 125, 129, 166, 144, 167, 130, 154, 153, 155,
	0, 0, 159, 131, 0, 0, 0, 0, 0, 188,
	207, 224, 225, 0, 0, 0, 217, 218, 219, 220,
	0, 0, 0, 156, 111, 132, 182, 136, 143, 173,
	222, 0, 178, 115, 206, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 235, 236, 0, 99, 107,
	140, 0, 221, 0, 172, 126, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 112,
}

var yyPact = [...]int16{
	2712, -1000, -265, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1514, 1557, -1000, -1000, -1000, -1000, -1000, -1000, 1315,
	2073, 421, 485, 216, 19128, 484, 2062, 19417, -1000, 129,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1229, -1000, -1000,
	-1000, -1000, -1000, 1495, 1509, 1301, 1477, 1402, -1000, 9356,
	427, 16514, 18839, 7614, -1000, 21428, 476, 458, 282, 443,
	21713, 411, 411, 21713, 21713, 19417, 483, 411, -1000, -226,
	-210, -1000, -118, 482, 19417, -1000, 19417, 414, 1127, 414,
	414, 414, 19417, -1000, 557, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 19417, 1126, 1433,
	422, 6110, 6110, 6110, 6110, 286, 6110, -42, 1357, -1000,
	-1000, -1000, -1000, 6110, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 961, 1431, 10376, 10376, 1514, -1000,
	1229, -1000, -1000, -1000, 1414, -1000, -1000, 781, 1535, -1000,
	13895, 553, -1000, 10376, 100, 1252, -1000, -1000, -248, 1252,
	-1000, -1000, 500, -1000, -1000, -1000, 11384, 11384, 11384, 11384,
	11384, 11384, 11384, -1000, -1000, -1000, -1000, 28, -1000, 972,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 550,
	-1000, 10040, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
	10376, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
	2378, 1252, 1252, 1252, 1252, -1000, 18544, 1221, 1251, -1000,
	-1000, -1000, 1473, 15349, 18255, 19417, 1183, -1000, 1248, 7238,
	-34, -1000, -1000, -1000, 701, 546, 17966, -1000, -1000, -1000,
	1426, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1125, -1000, 14180, 14180, 17677, 21713, 411, 440,
	145, 411, 1305, 1116, 757, 1102, 1351, 606, 1471, 411,
	19417, -1000, -1000, -1000, -1000, 17392, 6110, 435, 19417, 1453,
	1346, 19417, 1090, 1072, -1000, 6862, -1000, 6110, 6110, 6110,
	6110, 6110, 6110, 6110, 6110, -1000, -1000, -1000, -1000, -1000,
	-1000, 6110, 6110, -1000, -18, -1000, 19417, -1000, -1000, -1000,
	-1000, 1552, 586, 974, 535, 1249, -1000, 754, 1495, 961,
	1402, 17103, 1370, -1000, -1000, 19417, -1000, 10376, 10376, 952,
	-1000, 21139, -1000, -1000, 4606, 596, 11384, 828, 648, 11384,
	11384, 11384, 11384, 11384, 11384, 11384, 11384, 11384, 11384, 11384,
	11384, 11384, 11384, 11384, 948, 2147, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1063, -1000,
	603, -1000, 1229, 13024, 13024, 20, 20, 20, 20, 20,
	20, 20850, -1000, -274, 8684, -1000, 7990, 961, 1120, 749,
	10040, 9356, 9356, 9692, 10376, 11384, 20276, 9356, 1479, 740,
	749, 20276, -1000, 961, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 74, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 9356, 9356, 9356, 9356, 315, 19417, -1000, 20276,
	16514, 16514, 16514, 16514, 16514, -1000, 1380, 1379, -1000, 1369,
	1368, 1391, 19417, -1000, 1122, 15349, 529, 1252, -1000, 20565,
	-1000, -1000, 315, 1209, 16514, 19417, -1000, -1000, 6486, 1248,
	-34, 1230, -1000, -50, -78, 8348, 7990, 562, -1000, -1000,
	-1000, -1000, 135, 14766, 194, -141, 18, -1000, -1000, -1000,
	-1000, -1000, 1274, -1000, -1000, -1000, 1274, 296, 1309, 1274,
	1309, -1000, 1274, 1309, 69, 69, 69, 69, 69, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1307, 1299, -1000, 1274,
	1274, 1274, 1274, 1274, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1290, 279, 1290, 1275, 1275, -1000,
	-1000, 194, 1304, 19417, 21713, 1345, 19417, 411, -240, 19417,
	-171, 1060, 6110, 1449, 6110, 19417, 1527, 19417, -1000, -1000,
	-1000, 186, 14180, 19417, -1000, 1899, 19417, -1000, 19417, -1000,
	-1000, 19417, 6110, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 685, -1000,
	-1000, -1000, -1000, 1392, 10376, 10376, 5358, 10376, -1000, -1000,
	-1000, 1431, -1000, 1479, 1496, -1000, 1411, 1410, 9356, -1000,
	-1000, 596, 620, -1000, -1000, 891, -1000, -1000, -1000, -1000,
	534, 1252, -1000, 2057, -1000, -1000, -1000, -1000, 828, 11384,
	11384, 11384, 407, 2057, 1870, 146, 255, 20, 179, 179,
	34, 34, 34, 34, 34, 168, 168, -1000, -1000, -1000,
	-1000, -166, -1000, 1274, 1290, 279, 1290, 1275, 1275, -1000,
	-1000, 961, 72, -175, -1000, -1000, -1000, -1000, -1000, -1000,
	-248, 976, -1000, -1000, 943, 961, 9356, 1115, 1120, -1000,
	13895, -1000, -1000, 10376, -1000, 961, 1115, 1115, 788, 1247,
	11720, 1274, -1000, 1274, 1275, -1000, -1000, 1274, 117, 1274,
	112, -1000, -1000, -1000, -1000, 1275, -1000, -1000, -1000, -1000,
	-1000, 1274, 1274, -1000, -1000, 1274, -1000, 1274, 1274, 925,
	829, 954, 1216, -1000, 532, 1115, 9356, 770, -1000, 10376,
	961, -1000, -1000, 1115, 961, 1233, 1115, 1115, 1170, 1252,
	-1000, 1231, -1000, 691, 1251, 1295, 1343, 1048, -1000, -1000,
	-1000, -1000, 1376, -1000, 1372, -1000, -1000, -1000, -1000, -167,
	456, 450, 447, 21713, -1000, 1519, 16514, 1205, -1000, -1000,
	1230, -34, -55, -1000, -1000, -1000, -1000, 749, 665, -1000,
	-1000, 1057, 7990, 1220, 1415, -1000, -1000, -1000, -1000, -1000,
	-1000, 1292, 835, 21713, 340, 413, 479, 426, 1055, -1000,
	-1000, -1000, 834, -1000, 21713, -1000, 1549, -1000, -1000, 336,
	-1000, 333, 745, 975, 19417, 150, 1291, 12392, 928, -1000,
	-281, -1000, 4, -1000, -1000, 896, 69, 69, 1274, 69,
	937, 69, 69, -1000, -1000, 562, 1423, 562, 562, 562,
	562, 973, 973, -175, -175, -1000, -1000, -1000, -1000, 919,
	1290, -1000, -1000, -1000, 907, -1000, 19417, 21713, 1285, 1342,
	19417, 1470, 19417, -1000, -1000, -1000, 1463, -1000, 7990, -1000,
	-1000, -1000, -1000, -1000, 1462, 1171, -1000, -1000, -1000, -1000,
	471, -1000, -1000, 1319, -1000, 730, 1550, 755, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 314,
	488, -1000, 6110, -1000, 689, 19417, 19417, 1388, 749, 749,
	521, -1000, -1000, 19417, -1000, -1000, -1000, -1000, 1213, -1000,
	-1000, -1000, 5734, 9356, -1000, 407, 2057, 390, -1000, 11384,
	11384, 96, -1000, -1000, -1000, 95, 88, 55, -1000, -248,
	-1000, 1115, 9356, -253, -1000, 749, -1000, -1000, -1000, 3101,
	948, 10376, -1000, 896, 283, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3101, 11384, 11384,
	11384, 11384, 11384, 5358, -161, 1208, 727, -1000, 10376, 902,
	-1000, -1000, -1000, -1000, -1000, 1334, 20276, 1252, -1000, 16812,
	21713, 1514, 20276, 10376, 10376, -1000, -1000, 10376, 1282, -1000,
	10376, -1000, -1000, -1000, -1000, 1281, 1252, 1252, 1252, 1094,
	-1000, 1514, 1205, -1000, -1000, -1000, -71, -83, -1000, 10376,
	-1000, 4982, -1000, 135, -1000, 19702, -1000, 1541, 1489, 389,
	3, -1000, 1046, 1009, -1000, 983, -1000, -1000, 76, -1000,
	-217, 89, -4, -1000, -1000, 1252, -1000, 1280, 1457, -1000,
	1438, 882, -1000, 12056, -243, -1000, -1000, -1000, -248, -1000,
	-1000, -1000, 1252, -1000, 1279, 1278, -1000, 1273, 1252, 517,
	-1000, -1000, -1000, -1000, -1000, 1164, 562, 562, 69, 562,
	1160, 1156, 562, 562, -1000, 725, -1000, -1000, -1000, -1000,
	1113, -1000, 1111, -1000, -1000, 1219, -1000, 1100, 1237, 1332,
	15927, 19417, 1276, 1229, 1455, 1229, 1217, -1000, 664, 1486,
	272, 19417, 1527, 1527, 21713, -1000, 397, 21713, -1000, -1000,
	21713, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	21713, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 19417, -1000, -1000, -1000, -1000, -1000, 21713, 402,
	-1000, -1000, 960, 10376, -1000, -1000, -1000, 7990, -1000, 1519,
	16514, -1000, -1000, 961, -1000, 11384, 2057, 2057, 6, 2,
	-9, -1000, 943, -1000, -1000, -1000, -1000, 1252, 961, 1274,
	1274, -1000, 1274, 1275, -1000, 1274, 117, 1274, 112, -1000,
	-1000, -1000, -1000, 1275, -1000, -1000, -1000, -1000, -1000, 1274,
	1274, -1000, -1000, 1274, -1000, 1274, 1274, 961, 876, -1000,
	-1000, 961, 285, 319, 820, 270, 300, -1000, 1252, -126,
	-1000, 749, 10376, -1000, 1440, 1159, 1199, -1000, -1000, 9020,
	961, 1097, 504, 1094, 1495, -1000, 749, 749, 749, 19987,
	749, -67, 19987, 19987, 19987, 16216, 21713, 1495, -1000, -1000,
	-1000, -1000, 749, 4230, -1000, 7990, 1086, -1000, 261, 1274,
	401, 401, -223, 331, 330, 1252, -1000, -1000, -1000, -1000,
	-219, -1000, -1000, -1000, -1000, 745, -1000, 1273, 10376, 19987,
	98, -1000, 1211, 1153, 12728, -1000, 15051, -1000, 961, -1000,
	926, -1000, 923, 1152, 7990, -1000, -1000, -1000, 562, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 69, 942, 69, 873,
	-1000, 870, 15927, 21713, 19417, 1151, 1203, -1000, 256, 1272,
	19987, -1000, 1229, -1000, 7990, 4230, 415, 1511, -1000, -1000,
	1484, -1000, 1185, 1271, 21713, -1000, -1000, 342, -1000, 1270,
	-1000, -1000, -1000, -1000, 1448, 21713, -1000, -1000, 749, 1517,
	1202, -1000, 2057, -1000, -1000, -1000, -1000, 547, -1000, -1000,
	-1000, -1000, -1000, 11384, 11384, -1000, 11384, 11384, 11384, 961,
	936, 749, 329, -1000, 1252, -1000, -1000, 1201, 21713, 21713,
	-1000, -1000, 1084, -1000, -1000, 1080, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1078, 1078, 1078, 529, -1000, -1000, -1000,
	-1000, -1000, -1000, 1752, 19702, 1446, -1000, -1000, -1000, 826,
	-1000, -1000, 775, 264, 821, -1000, 21713, -219, 10376, -1000,
	1252, 876, 1076, 10376, 1269, 856, -1000, 1147, -1000, 72,
	-175, -1000, -1000, -1000, -1000, -1000, -1000, 1252, -1000, 562,
	-1000, 562, 1129, 1101, 1081, 1267, 1266, -228, 15927, 1069,
	-1000, -1000, -1000, 21713, -1000, -1000, -1000, -1000, -1000, 233,
	2820, -1000, 14477, 1265, 1262, 19987, 1252, 405, 1512, 1508,
	-1000, 1074, 961, 1506, 285, 285, 285, 285, 125, -1000,
	-1000, 1548, -1000, 1252, -1000, 1229, 503, -1000, 21713, -1000,
	-1000, -67, -1000, -1000, -1000, -167, 1329, 2141, 116, -1000,
	979, 661, 927, 655, 643, 639, 628, 622, 619, 616,
	-1000, -1000, -1000, 1543, -1000, -1000, -1000, 1528, 1261, -1000,
	1260, 876, 10376, 271, 1330, 884, -1000, 1070, 1054, -1000,
	-1000, -1000, -1000, -228, 15927, 19702, 1519, 1257, 1029, 1519,
	1141, -1000, 231, 2820, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1514, 21713, 2969, 21713, 21713, 21713,
	444, 11048, 10376, -1000, 1016, 13321, 14477, 14477, 13321, 14477,
	14477, 19702, 19702, 1067, 298, 328, -1000, 10376, 10376, -1000,
	961, -1000, 10376, -1000, -1000, -1000, -1000, 961, 188, -183,
	20276, 1199, 961, 21713, -1000, -1000, -1000, -1000, 21713, -1000,
	-181, 2141, 21713, -1000, 855, -1000, -1000, 809, 847, 809,
	809, 809, 809, 809, 401, 401, 21713, 19702, 271, 876,
	-1000, -128, 1539, -191, 612, -1000, -1000, 1519, 977, 1053,
	1752, 19987, -228, 1752, -169, 21713, 10376, 2920, -1000, 1495,
	1192, 13606, -1000, 958, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 21713,
	1533, 1532, 1531, 1522, 2892, 100, 863, 143, -1000, -1000,
	13321, -1000, -1000, -1000, -1000, -1000, 1050, 1043, 1305, 1028,
	-1000, 21713, 1255, 749, 1187, -1000, 1184, -1000, 749, -1000,
	1386, -164, -193, 1179, -1000, -1000, 1252, 1019, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	745, 745, 1015, 1013, -1000, 271, -1000, 401, 401, -1000,
	-1000, -1000, 122, 931, 846, 844, 837, 87, -1000, 1500,
	1752, 1519, 1752, 1329, 991, 1519, 1329, -1000, -251, -1000,
	749, -1000, -1000, 2820, 1431, 21713, 209, -1000, -1000, -1000,
	2969, 1443, -1000, -1000, -1000, -1000, -1000, 2820, 2820, 2820,
	-1000, 290, -171, -1000, 298, 1405, 19702, 10376, -1000, 1384,
	-1000, 21713, -1000, 2141, -1000, -1000, 398, 1752, -1000, -1000,
	-1000, 830, -1000, 798, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15638, 1329, 1752, -1000, -1000, -1000, 1752, -1000, 10376,
	-271, -1000, -1000, 14180, 1483, -1000, 21713, 2790, -1000, 124,
	2771, 151, -1000, 154, -1000, -1000, 292, 989, -1000, -173,
	961, -1000, 19417, 1329, -1000, -1000, -1000, 497, -1000, -1000,
	1329, 749, 708, 1229, -1000, -1000, -1000, 707, 733, -1000,
	215, -1000, 289, -1000, -190, -1000, 1253, -1000, 7990, -1000,
	-1000, -1000, 410, 133, -1000, -1000, 1252, -200, 21713, -1000,
	-1000, 2820, 10712, -1000, 987, 2742, 285, 961, -1000, -1000,
	-1000, -1000,
}

var yyPgo = [...]int16{
	0, 1811, 21, 2, 1809, 1808, 1805, 1578, 1576, 1569,
	1566, 1803, 1802, 1800, 1797, 1796, 1794, 1793, 1792, 1782,
	1781, 1780, 1779, 1777, 1774, 1773, 1772, 1769, 1768, 1763,
	539, 1762, 1761, 1760, 126, 1759, 110, 1758, 1753, 77,
	153, 83, 80, 1192, 1749, 61, 108, 105, 1748, 89,
	1744, 1743, 167, 1742, 107, 1740, 1738, 624, 1737, 1736,
	43, 13, 40, 52, 1735, 1734, 115, 162, 1733, 1731,
	1730, 37, 1729, 1728, 94, 26, 44, 31, 46, 1726,
	79, 28, 1724, 95, 1722, 1721, 1720, 1719, 67, 1717,
	96, 42, 39, 20, 1716, 50, 23, 102, 59, 55,
	25, 160, 100, 1715, 71, 101, 88, 1713, 1705, 1043,
	1704, 1703, 1702, 1698, 1695, 1693, 806, 98, 1689, 1683,
	1682, 81, 0, 837, 86, 125, 1678, 1677, 1676, 2492,
	114, 104, 54, 1669, 75, 193, 73, 1668, 1667, 72,
	124, 5, 116, 113, 1665, 106, 1664, 1663, 1662, 1559,
	97, 66, 158, 64, 1661, 1658, 1657, 84, 82, 74,
	92, 99, 24, 1656, 1655, 1654, 56, 1653, 18, 41,
	1, 90, 1651, 1648, 1647, 1646, 47, 70, 1645, 45,
	1644, 30, 8, 4, 33, 7, 1643, 1640, 1639, 14,
	1638, 51, 1635, 9, 1634, 15, 1632, 1630, 1626, 91,
	1622, 1621, 1620, 17, 1619, 1618, 34, 36, 68, 53,
	1617, 1616, 49, 78, 57, 1615, 65, 10, 3, 11,
	1614, 12, 1613, 1612, 1611, 29, 32, 1608, 1607, 1606,
	1605, 1601, 1599, 48, 1596, 1595, 1594, 1593, 1592, 6,
	1591, 1589, 16, 1587, 1586, 1585, 1943, 19, 1584, 1583,
	27, 1581, 1580, 1574, 1563, 293,
}

var yyR1 = [...]uint8{
	0, 244, 245, 245, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 33, 33, 8, 9, 9, 9, 248,
	248, 52, 52, 97, 97, 10, 10, 10, 10, 11,
	11, 222, 222, 221, 223, 223, 12, 12, 12, 12,
	12, 215, 215, 215, 215, 215, 13, 13, 218, 218,
	14, 14, 14, 102, 102, 106, 106, 106, 107, 107,
	107, 107, 235, 235, 234, 234, 137, 137, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 249, 249, 250, 250,
	250, 250, 250, 250, 250, 213, 213, 213, 213, 214,
	214, 214, 216, 216, 217, 217, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 220, 220, 197, 197,
	197, 198, 198, 198, 198, 198, 198, 200, 200, 201,
	201, 127, 127, 195, 195, 194, 193, 193, 192, 192,
	191, 202, 202, 22, 173, 174, 174, 174, 174, 174,
	174, 174, 161, 161, 141, 141, 141, 141, 141, 141,
	141, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 208, 208, 208,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 210, 211, 204, 204, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 151,
	151, 151, 151, 151, 151, 203, 203, 199, 199, 199,
	199, 199, 199, 199, 199, 145, 145, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 144, 144, 144,
	144, 144, 144, 144, 144, 146, 146, 146, 146, 146,
	146, 146, 146, 142, 142, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 148, 148,
	148, 148, 148, 148, 148, 148, 160, 160, 149, 149,
	158, 158, 159, 159, 159, 150, 150, 150, 157, 157,
	157, 154, 154, 155, 155, 156, 156, 156, 152, 152,
	152, 153, 153, 153, 163, 184, 184, 184, 186, 186,
	187, 187, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 172, 172, 212, 212, 183, 183, 183,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 171,
	171, 181, 181, 182, 182, 179, 179, 179, 180, 166,
	166, 166, 166, 166, 167, 168, 168, 168, 168, 164,
	165, 206, 206, 206, 240, 240, 240, 240, 240, 240,
	241, 241, 207, 207, 169, 169, 170, 170, 177, 177,
	177, 177, 251, 251, 175, 175, 176, 176, 176, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 252, 252, 253, 253, 253, 253,
	253, 253, 253, 190, 188, 188, 189, 189, 17, 18,
	18, 18, 18, 18, 19, 19, 23, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	114, 114, 111, 111, 112, 112, 113, 113, 113, 115,
	115, 115, 138, 138, 138, 25, 25, 27, 27, 28,
	29, 26, 26, 26, 26, 26, 254, 30, 31, 31,
	32, 32, 32, 36, 36, 36, 34, 34, 35, 35,
	41, 41, 40, 40, 42, 42, 42, 42, 126, 126,
	126, 125, 125, 236, 236, 236, 236, 236, 44, 44,
	45, 45, 46, 46, 47, 47, 47, 225, 225, 224,
	224, 226, 226, 226, 226, 226, 226, 59, 59, 95,
	95, 95, 98, 98, 48, 48, 48, 48, 49, 49,
	50, 50, 51, 51, 133, 133, 132, 132, 132, 131,
	131, 53, 53, 53, 55, 54, 54, 54, 54, 56,
	56, 58, 58, 57, 57, 60, 60, 60, 60, 61,
	61, 96, 96, 43, 43, 43, 43, 43, 43, 43,
	110, 110, 63, 63, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 73, 73, 73, 73, 73, 73,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 39, 39, 74, 74, 74, 80, 75, 75, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 71, 71, 71, 71,
	71, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 255, 255, 72, 72,
	72, 72, 37, 37, 37, 37, 37, 136, 136, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 140, 140, 140, 140, 140, 140, 140, 140,
	84, 84, 38, 38, 82, 82, 83, 85, 85, 81,
	81, 81, 227, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 68, 68, 68, 86, 86, 87,
	87, 237, 237, 238, 238, 239, 88, 88, 89, 89,
	90, 91, 91, 91, 92, 92, 92, 92, 93, 93,
	93, 65, 65, 65, 65, 65, 65, 94, 94, 94,
	94, 99, 99, 76, 76, 78, 78, 77, 79, 100,
	100, 104, 101, 101, 105, 105, 105, 105, 105, 20,
	21, 103, 103, 103, 128, 128, 128, 108, 108, 116,
	116, 117, 117, 109, 109, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 119, 119, 119, 120, 120,
	123, 123, 124, 124, 129, 129, 129, 130, 130, 228,
	228, 228, 229, 229, 229, 230, 230, 231, 232, 232,
	233, 243, 243, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 246, 247, 134, 135, 135, 135,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 0, 3, 1, 1, 1, 1, 2, 13,
	12, 14, 12, 13, 12, 7, 8, 7, 5, 5,
	5, 11, 11, 9, 5, 8, 0, 3, 0, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 1,
	1, 1, 1, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 1, 4, 0, 2,
	2, 0, 2, 2, 2, 2, 2, 0, 2, 0,
	3, 0, 1, 0, 2, 1, 0, 2, 1, 3,
	3, 0, 2, 4, 4, 0, 1, 3, 3, 3,
	3, 3, 2, 2, 3, 1, 1, 1, 1, 1,
	0, 2, 2, 3, 2, 4, 2, 4, 2, 2,
	3, 2, 3, 2, 7, 9, 3, 3, 6, 9,
	9, 8, 8, 5, 8, 7, 4, 2, 4, 6,
	2, 1, 1, 1, 2, 1, 1, 1, 3, 3,
	1, 2, 1, 1, 2, 0, 4, 3, 4, 3,
	3, 3, 3, 3, 3, 3, 2, 4, 6, 2,
	3, 2, 3, 1, 3, 0, 2, 0, 3, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 3, 2,
	2, 2, 2, 1, 1, 1, 3, 3, 2, 2,
	2, 1, 1, 1, 1, 4, 4, 4, 4, 4,
	1, 5, 2, 2, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 3, 3, 0, 3,
	3, 0, 1, 0, 1, 0, 2, 1, 0, 3,
	3, 0, 1, 2, 6, 0, 1, 4, 1, 2,
	1, 3, 2, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 1, 1, 0, 2, 5,
	2, 3, 3, 2, 3, 2, 2, 3, 4, 1,
	1, 1, 1, 1, 3, 3, 2, 2, 1, 2,
	5, 5, 8, 8, 13, 1, 1, 2, 2, 10,
	7, 0, 1, 1, 0, 1, 1, 1, 2, 2,
	1, 2, 0, 3, 0, 1, 1, 3, 0, 4,
	1, 3, 2, 1, 1, 2, 1, 1, 1, 6,
	11, 13, 13, 6, 7, 7, 7, 12, 7, 7,
	7, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 6, 4, 2, 4, 2, 2, 2, 2, 3,
	1, 1, 0, 1, 0, 1, 0, 2, 2, 0,
	2, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 3, 4, 4, 5, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 0, 4, 1,
	3, 1, 1, 1, 1, 1, 1, 4, 8, 1,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 0, 4, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 6, 2, 2, 2, 2, 2, 2, 2, 3,
	3, 1, 1, 1, 1, 2, 4, 5, 5, 6,
	4, 4, 4, 6, 6, 6, 6, 6, 8, 8,
	6, 8, 8, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 1, 2, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 2, 2, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 3, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 1, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 5, 3, 1,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 2, 0, 2, 2, 0, 1, 4, 1, 3,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -244, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -23, -24, -25, -27, -28, -29,
	-26, -3, -4, 6, 7, -33, 9, 10, 31, -22,
	122, 123, 125, 124, 155, 126, 148, 52, 206, 207,
	209, 210, 26, 149, 150, 153, 154, -246, 8, 334,
	56, -245, 382, -88, 15, -32, 5, -30, -254, -30,
	-30, -30, -30, -30, -173, 56, -240, -241, -202, 131,
	164, 326, 128, 144, 162, 163, 354, 129, 366, 367,
	146, 369, 76, -109, 132, 134, 129, 129, 130, 132,
	326, 128, 129, -57, -129, 59, -122, 61, 171, 345,
	21, 206, 219, 220, 211, 252, 240, 346, 169, 237,
	241, 291, 380, 69, 209, 300, 138, 175, 151, 232,
	235, 234, 226, 223, 28, 258, 352, 225, 141, 259,
	263, 270, 292, 341, 216, 217, 294, 256, 33, 143,
	347, 37, 159, 295, 261, 255, 250, 131, 254, 215,
	249, 41, 229, 265, 264, 266, 290, 243, 170, 269,
	245, 227, 244, 18, 154, 157, 260, 262, 224, 172,
	136, 161, 351, 296, 222, 158, 173, 153, 299, 368,
	168, 210, 293, 218, 302, 205, 204, 40, 276, 236,
	213, 228, 214, 140, 207, 166, 247, 160, 230, 231,
	253, 212, 248, 208, 162, 155, 301, 277, 353, 246,
	242, 238, 239, 167, 132, 164, 165, 283, 284, 285,
	286, 349, 297, 233, 278, 279, 177, 178, 179, 180,
	181, 182, 183, 34, 35, 342, 343, 129, 116, 241,
	122, 281, 130, 33, 161, -138, 129, -111, 165, 283,
	284, 285, 286, 59, 293, 292, 287, -129, 208, -134,
	-134, -134, -134, -134, -2, -92, 17, 16, -5, -3,
	-246, 6, 21, 22, -36, 42, 43, -31, -42, 107,
	-43, -129, -62, 78, -67, 29, 59, -122, 61, 24,
	-66, -63, -81, -227, -79, -80, 116, 117, 105, 106,
	113, 79, 118, -71, -69, -70, -72, -230, 62, -123,
	60, 70, 63, 64, 65, 66, 71, 72, 73, 303,
	-77, -246, 46, 47, 335, 336, 337, 338, 344, 339,
	81, 36, 325, 333, 332, 331, 329, 330, 327, 328,
	379, 135, 326, 111, 334, 267, -109, -45, -46, -47,
	-48, -59, -80, -246, -57, 11, -52, -57, -101, -137,
	208, -105, 293, 292, -124, 303, -103, -123, -121, 291,
	241, 290, 59, -122, 127, 185, 357, 77, 23, 25,
	274, 280, 184, 80, 116, 16, 81, 191, 366, 367,
	115, 335, 122, 50, 327, 328, 325, 189, 337, 338,
	326, 281, 196, 20, 29, 377, 10, 26, 149, 22,
	109, 124, 186, 84, 85, 152, 24, 150, 73, 192,
	194, 19, 53, 142, 11, 356, 13, 14, 371, 358,
	135, 134, 96, 370, 130, 48, 8, 118, 27, 378,
	93, 44, 147, 195, 46, 94, 17, 329, 330, 32,
	344, 156, 111, 51, 38, 372, 78, 373, 71, 54,
	298, 190, 76, 15, 49, 157, 374, 144, 193, 95,
	125, 334, 47, 187, 375, 128, 188, 6, 340, 31,
	148, 45, 129, 282, 83, 133, 72, 163, 5, 146,
	9, 52, 55, 331, 332, 333, 36, 82, 12, 145,
	348, 74, -174, -161, -123, 61, 130, 130, 132, -235,
	204, 132, -123, -117, 135, -117, -123, -123, -57, 129,
	-117, 369, 366, 367, 334, 129, -57, -57, -116, 135,
	59, -116, -116, -116, -57, 119, -57, 59, 31, 326,
	59, 161, 129, 162, 132, -135, -246, -124, -135, -135,
	-135, 166, 167, -135, -112, 288, 54, -135, -247, 58,
	-93, 19, 32, -43, -129, -89, -90, -43, -88, -2,
	-30, 38, -34, 22, 68, 11, -126, 77, 76, 93,
	-125, 23, -123, 61, 119, -43, -64, 96, 78, 94,
	95, 80, 102, 101, 112, 105, 106, 107, 108, 109,
	110, 111, 103, 104, 115, 379, 86, 87, 88, 89,
	90, 91, 92, 97, 98, 99, 100, -110, -246, -199,
	379, -80, -246, 120, 121, -67, -67, -67, -67, -67,
	-67, -67, -231, 268, -246, 61, 119, -2, -75, -43,
	-246, -246, -246, -246, -246, -246, -246, -246, -246, -84,
	-43, -246, -255, -246, -255, -255, -255, -255, -255, -255,
	-255, -140, 116, 241, 151, 232, -143, -142, 247, 246,
	211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	240, 346, -246, -246, -246, -246, -58, 27, -57, 31,
	57, -53, -55, -54, -56, 44, 48, 50, 45, 46,
	47, 51, -133, 23, -45, -246, -132, 157, -131, 23,
	-129, 61, -57, -52, -248, 57, 11, 55, 57, -101,
	208, -102, -106, 294, 296, 86, 119, -128, -123, 61,
	29, 31, 58, 57, -162, -141, -145, -142, -147, -146,
	-148, -123, -143, -144, 240, 346, 237, 241, 238, 243,
	244, 245, 116, 242, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 246, 258, 31, 151, 230,
	231, 232, 235, 234, 236, 233, 259, 260, 261, 262,
	263, 264, 265, 266, 211, 212, 213, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 225, 226, 227, 229,
	228, -162, -123, 54, 203, -123, -117, 132, 205, -117,
	-195, 55, 59, 78, 59, 54, -213, 54, 19, 184,
	185, 197, 23, -117, -57, -57, 298, -135, 133, -57,
	24, 54, -57, 59, 59, -130, -129, -121, -135, -135,
	-135, -135, -135, -135, -135, -135, -135, -135, -114, 282,
	289, -57, 9, 96, 57, 18, 119, 57, -91, 25,
	26, -92, -247, -36, -68, -123, 63, 66, -35, 45,
	-57, -43, -43, -73, 71, 78, 72, 73, -125, 107,
	-130, -124, -121, -67, -74, -77, -80, 67, 96, 94,
	95, 80, -67, -67, -67, -67, -67, -67, -67, -67,
	-67, -67, -67, -67, -67, -67, -67, -136, 59, 61,
	-145, 231, -140, -143, 222, 223, 225, 226, 227, 229,
	228, 59, 241, 231, 271, 118, 247, 256, 257, -66,
	61, -123, -66, -123, 383, -41, 22, -40, -75, -42,
	-43, -124, -247, 57, -247, -2, -40, -40, -43, -139,
	116, 237, 151, 232, 226, 256, 257, 243, 276, 230,
	277, 219, 211, 216, 229, 227, 213, 228, 212, 225,
	222, 235, 234, 236, 247, 238, 245, 244, 242, -43,
	-81, -67, -81, -123, -129, -40, -34, -82, -83, 82,
	-81, -247, 239, -40, -41, -40, -40, -40, -97, 157,
	-57, -100, -104, -81, -46, -47, -47, -46, -47, 44,
	44, 44, 49, 44, 49, 44, -54, -129, -247, -60,
	52, 134, 53, -246, -131, -97, 55, -45, -57, -105,
	-102, 57, 295, 297, 298, 54, 74, -43, -124, -153,
	116, 115, -177, -251, 349, 35, -161, -163, -166, -164,
	-165, -178, -167, 138, 136, 140, 141, 146, -171, 130,
	147, 71, 78, -208, 138, -210, 54, 274, 280, 136,
	147, 146, 380, 69, 139, 356, 358, 29, 30, -156,
	383, 268, -154, 277, -149, 56, -149, -149, 239, -150,
	56, -149, -150, -149, -150, -152, 241, -152, -152, -152,
	-152, 56, 56, -149, -149, -149, -149, -149, -158, 56,
	224, -158, -158, -159, 56, -159, 54, 55, -57, -123,
	54, -57, -117, -234, 377, 378, -57, -193, 348, -194,
	59, -135, 24, -135, -57, -216, -214, 8, 9, 10,
	-57, 198, -141, -57, -118, 127, 124, 125, -190, 123,
	274, 241, 69, 29, 15, 335, 157, 353, 59, 158,
	-57, -57, -57, -135, -113, 11, 96, 40, -43, -43,
	-130, -90, -93, -108, 19, 11, 36, 36, -40, 71,
	72, 73, 119, -246, -74, -67, -67, -67, -39, 152,
	77, 348, -247, 239, -157, 348, 349, -232, -233, 61,
	-247, -40, 57, -247, -247, -43, -247, -247, -247, 57,
	55, 57, -149, 56, -149, -149, -159, -149, 217, -149,
	217, -159, -149, -149, -149, -149, -149, 23, 57, 11,
	57, 57, 11, 119, -247, -40, -85, -83, 84, -43,
	-247, -247, -247, -247, -247, -65, 31, 36, -2, -246,
	-246, -61, 57, 12, 86, -50, -49, 54, 55, -51,
	54, -49, 44, 44, -225, 348, 130, 130, 130, -98,
	-123, -61, -45, -61, -106, -107, 299, 296, 302, 86,
	59, -175, -124, 57, 34, 56, -207, 54, 78, -169,
	-123, 147, -171, -171, 59, -171, 59, 130, 59, 71,
	19, -123, 9, 147, 147, -207, 61, -57, -204, 357,
	16, 56, -209, 56, 61, 62, 63, 64, 71, -151,
	70, -63, 269, -71, 325, 328, 327, 270, -123, -129,
	-211, 63, 384, -155, 278, 63, -152, -152, -149, -152,
	63, 59, -152, -152, -153, 31, -153, -153, -153, -153,
	-160, 61, -160, -157, -157, 63, -158, 63, -57, -123,
	56, 54, -57, 23, -57, 23, -192, -191, -124, -197,
	23, 54, 57, -213, 55, -134, -127, 138, -166, -253,
	164, 146, 137, 142, 141, 59, 136, 140, 157, -196,
	164, 137, 138, 142, 141, 59, 130, 147, 136, 140,
	157, 146, -119, -120, 133, 23, 130, 147, 157, 127,
	-135, -115, 94, 12, -129, -129, 41, 119, -57, -44,
	11, 107, -124, -41, -39, 77, -67, -67, 230, 230,
	230, 384, 57, -199, -247, -42, -236, 381, -139, 116,
	237, 151, 232, 226, 256, 243, 276, 230, 277, 219,
	211, 216, 229, 227, 213, 228, 212, 225, 222, 235,
	234, 236, 247, 238, 245, 244, 242, -136, -43, -152,
	59, -139, -67, -67, -67, -67, -67, -124, 345, -88,
	85, -43, 83, -99, 54, -100, -76, -78, -77, -246,
	-2, -94, -123, -98, -88, -104, -43, -43, -43, 56,
	-43, 56, -246, -246, -246, -247, 57, -88, -61, 296,
	300, 301, -43, 86, -124, -177, -182, -179, -123, 147,
	10, 9, 19, 142, 136, 380, 59, 59, 59, -206,
	146, 366, 367, 368, -208, 380, -151, 270, -246, 56,
	23, 29, 63, -209, 56, -199, 379, -199, -246, -149,
	56, -149, 56, 56, 119, 58, -153, -153, -152, -153,
	58, 58, -153, -153, 59, 116, 58, 57, 58, 57,
	58, 57, 56, 55, 54, -181, -182, -71, -123, -57,
	56, -2, 23, -2, 57, 86, -198, 19, 172, 173,
	-57, -214, -216, -123, -252, 130, 147, -123, -134, -123,
	-134, -123, -57, -134, -123, 138, -166, 61, -43, -61,
	-45, -247, -67, 279, 279, 279, -233, -246, -247, -247,
	-247, -247, -247, 19, 57, -247, 57, 19, -246, -38,
	340, -43, 28, -99, 57, -247, -247, -247, 57, 119,
	-247, -92, -95, -123, 147, -224, -226, 371, 372, 373,
	374, 375, 376, -95, -95, -95, -132, -123, -92, -176,
	-124, 61, 63, 58, 57, -149, -180, 272, -149, -168,
	168, 169, 31, 170, -168, 368, 147, 147, -246, -206,
	-207, -43, -95, 56, 358, 57, 58, -209, -123, 241,
	231, 247, 256, -247, 58, 58, 58, -124, -153, -152,
	61, -152, 63, 63, -181, -123, -57, 58, 56, -95,
	-2, -191, -176, 133, 21, 6, 8, 9, 10, 19,
	23, -249, 56, -123, 146, 56, 27, -123, -86, 13,
	-247, -237, -88, 157, -67, -67, -67, -67, -67, -247,
	61, 147, -78, 36, -2, -246, -123, -123, 57, 58,
	58, 57, -247, -247, -247, -60, -184, -186, 348, -185,
	55, 143, 69, 177, 178, 179, 180, 181, 182, 183,
	-179, -91, -207, 54, 71, 171, -207, 54, -169, -123,
	-206, -43, -246, -247, 58, -43, 56, 63, 58, -153,
	-153, 58, 58, 58, 56, 56, -96, 370, -181, 58,
	-170, -123, 186, -217, -219, -7, -9, -8, -11, -10,
	-12, -13, -14, -20, -3, 20, 31, 190, 191, 196,
	192, 145, 135, -21, -250, -123, 105, 86, 61, -161,
	57, 56, 56, -95, -246, 136, -87, 14, 16, -247,
	-88, -247, 16, -247, -247, -247, -247, -37, 96, 348,
	9, -76, -2, 119, -123, -226, -225, -183, 54, -185,
	348, 56, 350, 59, -172, 86, 61, 86, 86, 86,
	86, 86, 86, 86, 9, 10, 56, 56, -247, -43,
	-203, 170, 54, 58, -205, 58, 58, -96, -181, -182,
	-61, 56, 58, -61, -200, 57, 55, 187, -219, -88,
	-222, -123, -221, -243, -242, 304, 305, 306, 307, 308,
	309, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 323, 324, -123, -123, -123, -215,
	38, 193, 194, 195, -62, -67, -43, -62, 58, -250,
	-123, -250, -250, -250, -250, -250, -182, -182, 58, -188,
	-189, 157, 147, -43, -75, -247, -238, -239, -43, -247,
	346, 51, 351, -100, -247, -123, -123, -187, -185, -123,
	63, -212, 54, 74, 63, -212, -212, -212, -212, -212,
	-168, -168, -170, -182, -203, -247, 341, 10, 9, 354,
	355, 58, 207, 360, 361, 156, 362, 170, 363, 364,
	-61, 58, 58, -184, -95, -96, -184, -201, 348, -123,
	-43, -220, -219, 206, -92, 57, -223, -141, 188, -212,
	57, -123, 11, 11, 11, 11, -219, 206, 83, 206,
	58, 58, -195, -247, 57, -123, 56, 57, 41, 347,
	352, -246, 58, 57, -207, -207, 58, 58, -203, -168,
	-168, 348, 63, 16, 63, 63, 63, 63, 361, 156,
	363, 16, -184, -61, -184, -183, 58, -61, -183, 380,
	-219, -93, -221, -123, 189, -242, 27, -218, -219, -217,
	-218, -228, 199, 78, -193, -189, 36, -182, -239, 41,
	-123, -185, 139, -184, 63, 63, 365, -129, -183, -184,
	-184, -43, 382, 19, -123, 85, -219, 382, 85, -229,
	200, 199, 159, 58, 348, -247, -57, -183, 119, -183,
	85, -2, 85, 84, 202, 201, 160, 351, 56, -124,
	135, 206, -246, 352, -170, -218, -67, 156, 58, 85,
	-247, -247,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 826, 0, 526, 526, 526, 526, 526, 526, 0,
	-2, 883, 0, 0, 0, 0, -2, 516, 517, 0,
	519, 520, 1213, 1213, 1213, 1213, 1213, 0, 33, 34,
	1211, 1, 3, 834, 0, 0, 530, 533, 528, 915,
	883, 0, 0, 0, 88, 165, 0, 0, 0, 0,
	0, 881, 881, 0, 0, 0, 0, 881, 405, 406,
	407, 410, 0, 0, 0, 884, 0, 879, 0, 879,
	879, 879, 0, 475, 613, 904, 905, 906, 1072, 1073,
	1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
	1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
	1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
	1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
	1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
	1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
	1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
	1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,
	1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163,
	1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173,
	1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183,
	1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193,
	1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203,
	1204, 1205, 1206, 1207, 1208, 1209, 1210, 0, 0, 0,
	0, 1214, 1214, 1214, 1214, 0, 1214, 504, 493, 495,
	496, 497, 498, 1214, 513, 514, 503, 515, 518, 521,
	522, 523, 524, 525, 27, 838, 915, 915, 826, 29,
	0, 526, 531, 532, 536, 534, 535, 527, 0, 544,
	548, 0, 623, 915, 628, 630, -2, -2, -2, 0,
	669, 670, 671, 672, 673, 674, 915, 915, 915, 915,
	915, 915, 915, 701, 702, 703, 704, 0, 805, 799,
	807, 808, 809, 810, 811, 812, 813, 632, 633, 0,
	858, 915, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 736, 736, 736, 736, 736, 736, 736, 736,
	0, 0, 0, 0, 0, 916, 0, 0, 560, 562,
	563, 564, 594, 0, 596, 0, 0, 41, 45, 0,
	1177, 862, -2, -2, 0, 0, 0, 902, 903, -2,
	1084, -2, 900, 901, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
	1070, 1071, 0, 166, 180, 180, 0, 0, 881, 0,
	0, 881, 153, 0, 0, 0, 0, 0, 0, 881,
	0, 411, 408, 409, 162, 0, 1214, 0, 0, 0,
	0, 0, 0, 0, 474, 0, 476, 1214, 1214, 1214,
	1214, 1214, 1214, 1214, 1214, 485, 1215, 1216, 486, 487,
	488, 1214, 1214, 490, 0, 505, 0, 499, 28, 1212,
	22, 0, 0, 835, 0, 827, 828, 831, 834, 27,
	533, 0, 538, 537, 529, 0, 545, 915, 915, 0,
	549, 0, 551, 552, 0, 626, 915, 0, 0, 915,
	915, 915, 915, 915, 915, 915, 915, 915, 915, 915,
	915, 915, 915, 915, 0, 0, 650, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 629, 0, 804,
	0, 643, 0, 0, 0, 692, 693, 694, 695, 696,
	697, 698, 705, 0, -2, 806, 0, 27, 0, 667,
	915, 915, 915, 915, 915, 915, 0, 915, 536, 0,
	791, 0, 727, 0, 728, 729, 730, 731, 732, 733,
	734, 735, 782, 0, 784, 785, 786, 787, 788, 789,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	283, 284, 915, -2, 915, 915, 43, 0, 612, 0,
	0, 0, 0, 0, 0, 601, 0, 0, 604, 0,
	0, 0, 0, 595, 0, 0, 615, 1139, 597, 0,
	599, 600, -2, 0, 0, 0, 39, 40, 0, 46,
	1177, 48, 73, 0, 0, 915, 0, 341, 874, 875,
	876, 872, 418, 0, 172, 335, 331, 175, 176, 177,
	178, 179, 318, 256, -2, -2, -2, -2, -2, -2,
	-2, -2, 318, -2, -2, -2, -2, -2, 338, -2,
	-2, -2, -2, -2, 304, -2, 1099, 0, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 173, 0, 0, 0, 0, 0, 881, 0, 0,
	156, 0, 1214, 0, 1214, 0, 0, 0, 115, 116,
	117, 0, 180, 0, 163, 0, 0, 441, 0, 469,
	880, 0, 1214, 472, 473, 614, 907, 908, 477, 478,
	479, 480, 481, 482, 483, 484, 489, 492, 506, 500,
	501, 494, 839, 0, 915, 915, 0, 915, 830, 832,
	833, 838, 30, 536, 0, 814, 0, 0, 915, 539,
	25, 624, 625, 627, 644, 0, 646, 648, 550, 546,
	0, 800, -2, 634, 635, 663, 664, 665, 0, 915,
	915, 915, 661, 639, 0, 675, 676, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 689, 747, 748,
	690, 0, 700, 318, 320, 320, 320, 322, 322, 273,
	274, 0, 0, 328, 250, 251, 252, 253, 254, 687,
	247, 0, 688, 699, 0, 0, 915, 0, 0, 542,
	548, 802, 666, 915, 857, 27, 0, 0, 0, 0,
	-2, -2, -2, -2, -2, -2, 756, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 0,
	671, 0, 0, 799, 0, 0, 915, 797, 794, 915,
	0, 737, 783, 0, 0, 541, 0, 0, 0, 0,
	611, 619, 859, 0, 561, 590, 592, 0, 587, 602,
	603, 605, 0, 607, 0, 609, 610, 565, 566, 567,
	0, 0, 0, 0, 598, 619, 0, 619, 42, 863,
	47, 0, 0, 76, 77, 864, 865, 866, 0, 868,
	342, 0, 164, 420, 0, 423, 167, 168, 169, 170,
	171, 0, 412, -2, 1144, 1167, 1102, 0, 0, 379,
	380, 182, 0, 184, 0, 186, 0, 188, 189, 0,
	191, 193, 412, 0, 0, 0, 0, 0, 0, 181,
	0, 337, 333, 332, 255, 0, 338, 338, 318, 338,
	0, 338, 338, 292, 293, 341, 0, 341, 341, 341,
	341, 0, 0, 328, 328, 278, 279, 280, 267, 0,
	320, 269, 270, 271, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 83, 84, 85, 0, 98, 0, 154,
	155, 99, 882, 100, 138, 0, 122, 119, 120, 121,
	0, 118, 104, 0, 1213, 151, 0, 895, 442, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 0,
	0, 468, 1214, 471, 509, 0, 0, 0, 836, 837,
	0, 829, 23, 0, 877, 878, 815, 816, 558, 645,
	647, 649, 0, -2, 636, 661, 640, 0, 637, 915,
	915, 0, 631, 248, 249, 0, 0, 0, 918, 247,
	706, 0, 915, 553, 710, 668, -2, 711, 712, 0,
	0, 915, 749, 1211, 338, 753, 754, 757, 759, 760,
	762, 767, 773, 774, 777, 780, 781, 0, 915, 915,
	915, 915, 915, 0, 0, 826, 0, 795, 915, 0,
	726, 738, 739, 740, 741, 851, 0, 0, -2, 0,
	0, 826, 0, 915, 915, 584, 591, 915, 0, 585,
	915, 586, 606, 608, 577, 0, 0, 0, 0, 0,
	582, 826, 619, 38, 74, 75, 0, 0, 81, 915,
	343, 0, 424, 418, 422, 0, 389, 0, 0, 0,
	415, 370, 0, 0, 373, 0, 375, -2, 401, 183,
	0, 0, 0, 190, 192, 0, 196, 197, 0, 223,
	0, 0, 207, 0, -2, 211, 212, 213, 247, 215,
	216, 217, 1133, 220, 318, 318, 243, 1105, 0, 0,
	221, 222, 336, 174, 334, 0, 341, 341, 338, 341,
	0, 0, 341, 341, 294, 0, 295, 296, 297, 298,
	0, 316, 0, 276, 277, 0, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 158, 0, 141,
	0, 0, 0, 0, 0, 429, 0, 414, 433, 1213,
	0, 152, 456, 457, 458, 459, 460, 461, 462, 1213,
	0, 443, 444, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 0, 1213, 896, 897, 898, 899, 0, 0,
	470, 491, 0, 915, 507, 508, 840, 0, 24, 619,
	0, 547, 801, 0, 638, 915, 662, 641, 0, 0,
	0, 917, 0, 920, 707, 543, 708, 0, 0, 318,
	318, 752, 318, 322, 755, 318, 758, 318, 761, 763,
	764, 765, 766, 322, 768, 769, 770, 771, 772, 318,
	318, 775, 776, 318, 779, 318, 318, 0, 0, 750,
	751, 0, 0, 0, 0, 0, 0, 800, 0, 792,
	725, 798, 915, 31, 0, 851, 841, 853, 855, 915,
	27, 0, 847, 0, 834, 860, 620, 861, 588, 0,
	593, 0, 0, 0, 0, 596, 0, 834, 37, 78,
	79, 80, 867, 0, 425, 421, 0, 383, 318, 318,
	0, 0, 0, 0, 0, 0, 371, 372, 374, 377,
	401, 402, 403, 206, 185, 412, 187, 0, 915, 0,
	0, 224, 0, 0, 0, 210, 0, 214, 0, 239,
	0, 241, 0, 0, 0, 319, 285, 286, 341, 287,
	326, 327, 288, 289, 339, 340, 338, 0, 338, 0,
	323, 0, 0, 0, 0, 0, 381, 382, 318, 0,
	0, -2, 0, -2, 0, 0, 0, 0, 139, 140,
	0, 123, 0, 106, 0, 454, 455, 415, 435, 0,
	436, 438, 439, 440, 0, 414, 434, 510, 511, 817,
	559, 709, 642, 691, 329, 330, 919, 0, 713, 716,
	714, 715, 717, 915, 915, 720, 915, 915, 915, 0,
	0, 796, 0, 32, 0, 856, -2, 0, 0, 0,
	44, 35, 0, 579, 580, 0, 569, 571, 572, 573,
	574, 575, 576, 0, 0, 0, 615, 583, 36, 419,
	426, 427, 428, 345, 0, 831, 387, 388, 386, 412,
	395, 396, 0, 0, 412, 413, 414, 401, 915, 378,
	0, 0, 0, 915, 203, 0, 208, 0, 219, 1084,
	328, 252, 253, 218, 240, 242, 244, 0, 291, 341,
	317, 341, 0, 0, 0, 0, 0, 621, 0, 0,
	-2, 159, 160, 0, 142, 143, 144, 145, 146, 0,
	0, 105, 108, 0, 0, 0, 0, 415, 819, 0,
	554, 0, 0, 0, 0, 0, 0, 0, 742, 724,
	793, 0, 854, 0, -2, 0, 849, 848, 0, 589,
	568, 0, 616, 617, 618, 567, 367, 346, 0, 348,
	0, 363, 0, 0, 0, 0, 0, 0, 0, 0,
	384, 385, 390, 0, 397, 398, 391, 0, 0, 415,
	0, 0, 915, 245, 198, 0, 225, 0, 0, 306,
	307, 321, 324, 621, 0, 0, 619, 0, 0, 619,
	147, 416, 0, 103, 124, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 826, 0, 526, 0, 0, 0,
	61, 915, 915, 869, 0, -2, 108, 108, -2, 108,
	108, 0, 0, 0, 0, 0, 26, 915, 915, 555,
	0, 556, 915, 719, 718, 721, 722, 0, 0, 0,
	0, 844, 27, 0, 581, 570, 578, 344, 0, 349,
	0, 0, 0, 352, 0, 364, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	194, 0, 0, 0, 0, 205, 209, 619, 0, 0,
	345, 0, 621, 345, 149, 0, 915, 0, 125, 834,
	49, -2, 51, 0, 921, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 56, 57, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 623, 107, 109,
	-2, 110, 111, 112, 113, 114, 0, 0, 153, 0,
	464, 0, 0, 820, 818, 557, 822, 823, 825, 723,
	0, 0, 0, 852, -2, 850, 368, 0, 350, 355,
	353, 356, 365, 366, 357, 358, 359, 360, 361, 362,
	412, 412, 0, 0, 400, 245, 246, 0, 0, 201,
	202, 204, 0, 0, 0, 0, 0, 0, 236, 0,
	345, 619, 345, 367, 0, 619, 367, 101, 0, 417,
	148, 102, 136, 0, 838, 0, 0, 53, 55, 870,
	0, 59, 62, 63, 64, 65, 66, 0, 0, 0,
	430, 909, 156, 463, 0, 0, 0, 915, 743, 0,
	746, 0, 347, 0, 392, 393, 0, 345, 195, 199,
	200, 0, 227, 0, 229, 230, 231, 232, 233, 234,
	235, 0, 367, 345, 92, 90, 622, 345, 94, 915,
	0, 135, 52, 180, 0, 922, 0, 0, 68, 0,
	0, 912, 910, 0, 437, 465, 0, 0, 824, 744,
	0, 351, 0, 367, 226, 228, 237, 0, 89, 93,
	367, 150, 0, 0, 60, 67, 69, 0, 71, 432,
	0, 911, 0, 431, 0, 369, 0, 399, 0, 91,
	137, -2, 0, 0, 913, 914, 0, 0, 0, 238,
	70, 0, 915, 745, 0, 0, 0, 0, 394, 72,
	466, 467,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 382,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 383, 3, 384, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:419
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:424
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:425
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:429
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:452
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:460
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:464
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:470
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:477
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:483
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:487
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:493
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:497
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:504
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:516
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:528
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:532
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:538
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:544
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:548
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:552
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:557
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:558
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:562
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:566
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:571
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:575
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:581
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:585
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:589
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:593
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:599
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:603
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:616
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:620
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:626
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:631
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:635
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:641
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:648
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:655
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:662
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:670
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:680
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:684
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:688
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:692
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:696
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:702
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:709
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:719
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:723
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:730
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:739
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:747
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:758
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:762
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:768
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:772
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:776
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:782
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:786
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:790
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:794
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:799
		{
			yyVAL.str = ""
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:803
		{
			yyVAL.str = yyDollar[3].str
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:809
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:813
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:819
		{
			yyVAL.str = SessionStr
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:823
		{
			yyVAL.str = GlobalStr
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:829
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 89:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:834
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:854
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 91:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:874
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 92:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:895
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 93:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:911
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 94:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:928
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:947
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:955
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:       CreateSqlSecurityStr,
				SecurityType: yyDollar[3].str,
				Name:         yyDollar[6].tableName.ToViewName(),
				Definition:   yyDollar[8].selStmt,
			}}
		}
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:964
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:972
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:980
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:984
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:988
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 102:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1000
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 103:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1011
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1022
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 105:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1033
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1038
		{
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1039
		{
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1043
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1044
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1045
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1046
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1047
		{
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1048
		{
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1049
		{
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1053
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1057
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1061
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1065
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1071
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1075
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1079
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1085
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1089
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1095
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1099
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1105
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1117
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1129
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1136
		{
			yyVAL.bytes = nil
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1140
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1144
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1149
		{
			yyVAL.bytes = nil
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1153
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1157
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1161
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1165
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1169
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1174
		{
			yyVAL.expr = nil
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1178
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1183
		{
			yyVAL.expr = nil
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1187
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1192
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1196
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1201
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1205
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1211
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1216
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1221
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1227
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1232
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1238
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1243
		{
			yyVAL.bytes = nil
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1247
		{
			yyVAL.bytes = nil
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1253
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1260
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1266
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1270
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1275
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1279
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1283
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1287
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1291
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1297
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1302
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1308
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1319
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1324
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1330
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1343
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1348
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1353
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1358
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1364
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1369
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1374
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1379
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1384
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1389
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1394
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1399
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1404
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1413
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1423
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1428
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1433
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1440
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1447
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1455
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1460
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1466
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1472
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1478
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1484
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1491
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1495
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1499
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1505
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1509
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1513
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1517
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1521
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1525
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1529
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1533
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1537
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1541
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1545
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1551
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1557
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1563
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1567
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1572
		{
			yyVAL.sequence = &Sequence{}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1576
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1581
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1586
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1591
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1596
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1601
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1606
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1611
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1616
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1621
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1626
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1631
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 238:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1636
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1643
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1647
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1651
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1655
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1659
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1663
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1668
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1672
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1677
		{
			yyVAL.bytes = nil
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1690
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1695
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1701
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1705
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 307:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1922
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1944
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1956
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1962
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1967
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1972
		{
			yyVAL.optVal = nil
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1976
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1981
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1985
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1993
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1997
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 324:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2003
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2011
		{
			yyVAL.optVal = nil
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2015
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2019
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2028
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2032
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2036
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2041
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2045
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2050
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2054
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2059
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2063
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2067
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2072
		{
			yyVAL.str = ""
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2076
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2080
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2085
		{
			yyVAL.str = ""
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2089
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2093
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2099
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2104
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2108
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2112
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2118
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2122
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2128
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2132
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2138
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2142
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2147
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2151
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2155
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2159
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2163
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2167
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2171
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2175
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2179
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2185
		{
			yyVAL.str = ""
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2189
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2195
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2199
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2205
		{
			yyVAL.indexPartition = nil
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2209
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 369:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2213
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2219
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2223
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2227
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2231
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2235
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2239
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2243
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2247
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2251
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2257
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2261
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2267
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2272
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2278
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2282
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2288
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2293
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2297
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2307
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2312
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2319
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 392:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2326
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 393:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2333
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 394:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2342
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2354
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2358
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2362
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2366
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 399:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2372
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 400:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2383
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2393
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2397
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2401
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2407
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2411
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2415
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2419
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2423
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2427
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2433
		{
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2434
		{
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2438
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2442
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2447
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2454
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2458
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2465
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2469
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2475
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2479
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2484
		{
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2485
		{
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2489
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2493
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2499
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2503
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2507
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2513
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 430:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2517
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 431:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2531
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 432:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2545
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 433:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2564
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 434:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2573
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 435:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2582
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 436:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2586
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 437:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2590
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2603
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 439:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2613
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 440:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2618
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2623
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2627
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 463:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2659
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2665
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2669
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 466:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2675
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 467:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2679
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2685
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2691
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 470:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2699
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2704
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2712
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2716
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2722
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2726
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2731
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2737
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2741
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2745
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2750
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2754
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2758
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2762
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2766
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2770
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2774
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2778
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2782
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2786
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2790
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2794
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2804
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2808
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2812
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2816
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2820
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2824
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2828
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2838
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2844
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2848
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2854
		{
			yyVAL.str = ""
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2858
		{
			yyVAL.str = "extended "
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2864
		{
			yyVAL.str = ""
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2868
		{
			yyVAL.str = "full "
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2874
		{
			yyVAL.str = ""
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2878
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2882
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2888
		{
			yyVAL.showFilter = nil
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2892
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2896
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2902
		{
			yyVAL.str = ""
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2906
		{
			yyVAL.str = SessionStr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2910
		{
			yyVAL.str = GlobalStr
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2916
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2920
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2926
		{
			yyVAL.statement = &Begin{}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2930
		{
			yyVAL.statement = &Begin{}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2936
		{
			yyVAL.statement = &Commit{}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2942
		{
			yyVAL.statement = &Rollback{}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2948
		{
			yyVAL.statement = &OtherRead{}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2952
		{
			yyVAL.statement = &OtherRead{}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2956
		{
			yyVAL.statement = &OtherRead{}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2960
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2964
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2969
		{
			setAllowComments(yylex, true)
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2973
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2979
		{
			yyVAL.bytes2 = nil
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2983
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2989
		{
			yyVAL.str = UnionStr
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2993
		{
			yyVAL.str = UnionAllStr
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2997
		{
			yyVAL.str = UnionDistinctStr
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3002
		{
			yyVAL.str = ""
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3006
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3010
		{
			yyVAL.str = SQLCacheStr
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3015
		{
			yyVAL.str = ""
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3019
		{
			yyVAL.str = DistinctStr
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3024
		{
			yyVAL.str = ""
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3028
		{
			yyVAL.str = StraightJoinHint
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3033
		{
			yyVAL.selectExprs = nil
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3037
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3043
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3047
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3053
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3057
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3061
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3065
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3070
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3074
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3078
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3085
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3090
		{
			yyVAL.overExpr = nil
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3094
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3098
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3102
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 557:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3106
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy, OrderBy: yyDollar[4].orderBy}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3111
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3115
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3121
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3125
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3135
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3139
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3143
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3148
		{
			yyVAL.strs = []string{}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3152
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3158
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3162
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3168
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3172
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3176
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3180
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3184
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3188
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3194
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 578:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3198
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3204
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3209
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3213
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3219
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3223
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3236
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3240
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3244
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3248
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3254
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3256
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3260
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3262
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3266
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3268
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3271
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3273
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3276
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3280
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3284
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3291
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3297
		{
			yyVAL.str = JoinStr
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3301
		{
			yyVAL.str = JoinStr
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3305
		{
			yyVAL.str = JoinStr
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3311
		{
			yyVAL.str = StraightJoinStr
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3317
		{
			yyVAL.str = LeftJoinStr
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3321
		{
			yyVAL.str = LeftJoinStr
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3325
		{
			yyVAL.str = RightJoinStr
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3329
		{
			yyVAL.str = RightJoinStr
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3335
		{
			yyVAL.str = NaturalJoinStr
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3339
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3349
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3353
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3359
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3363
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3368
		{
			yyVAL.indexHints = nil
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3372
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3376
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3380
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3385
		{
			yyVAL.expr = nil
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3389
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3394
		{
			yyVAL.columns = nil
		}
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3398
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3404
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3408
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3412
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3416
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3420
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3424
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3428
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3434
		{
			yyVAL.str = ""
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3438
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3444
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3448
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3454
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3458
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3462
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3466
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3470
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3474
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3478
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3482
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 642:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3486
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3490
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3496
		{
			yyVAL.str = IsNullStr
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3500
		{
			yyVAL.str = IsNotNullStr
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3504
		{
			yyVAL.str = IsTrueStr
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3508
		{
			yyVAL.str = IsNotTrueStr
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3512
		{
			yyVAL.str = IsFalseStr
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3516
		{
			yyVAL.str = IsNotFalseStr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3522
		{
			yyVAL.str = EqualStr
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3526
		{
			yyVAL.str = LessThanStr
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3530
		{
			yyVAL.str = GreaterThanStr
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3534
		{
			yyVAL.str = LessEqualStr
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3538
		{
			yyVAL.str = GreaterEqualStr
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3542
		{
			yyVAL.str = NotEqualStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3546
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3550
		{
			yyVAL.str = PosixRegexStr
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3554
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3558
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3562
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3567
		{
			yyVAL.expr = nil
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3571
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3577
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3581
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3585
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3591
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3597
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3601
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3607
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3611
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3615
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3619
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3623
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3627
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3631
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3635
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3639
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3643
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3647
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3651
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3655
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3659
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3663
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3667
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3671
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3675
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3679
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3683
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3687
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3691
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 691:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3695
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3699
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3703
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3707
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3715
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3729
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3733
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3737
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3745
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3753
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3761
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3771
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 707:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3775
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 708:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3779
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 709:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3783
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3787
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3797
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3801
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 713:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3805
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 714:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3809
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 715:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3813
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 716:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3817
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 717:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3821
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 718:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3825
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 719:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3829
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 720:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3833
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 721:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3837
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 722:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3841
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 723:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3845
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 724:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3849
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 725:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3853
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3857
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3867
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3871
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3875
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3879
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3884
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3889
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3894
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3899
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3903
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3917
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3921
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3925
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3929
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3935
		{
			yyVAL.str = ""
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3939
		{
			yyVAL.str = BooleanModeStr
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3943
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 745:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3947
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3951
		{
			yyVAL.str = QueryExpansionStr
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3957
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3961
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3967
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3971
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3975
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3979
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3983
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3987
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3993
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3997
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4001
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4005
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4009
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4013
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4017
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4021
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4025
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4029
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4033
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4037
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4041
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4045
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4049
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4053
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4057
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4061
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4065
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4069
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4073
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4077
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4081
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4085
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4089
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4093
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4097
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4103
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4107
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4111
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4115
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4119
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4123
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4127
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4131
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4136
		{
			yyVAL.expr = nil
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4140
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4145
		{
			yyVAL.str = string("")
		}
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4149
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4155
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4159
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 796:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4165
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4170
		{
			yyVAL.expr = nil
		}
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4174
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4180
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4184
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 801:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4188
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4194
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4200
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4204
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4208
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4213
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4218
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4222
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4226
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4230
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4234
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4238
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4242
		{
			yyVAL.expr = &NullVal{}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4248
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4257
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4261
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4266
		{
			yyVAL.exprs = nil
		}
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4270
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4275
		{
			yyVAL.expr = nil
		}
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4279
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4284
		{
			yyVAL.partitionBy = nil
		}
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4288
		{
			yyVAL.partitionBy = yyDollar[3].partitionBy
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4294
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4298
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4304
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4309
		{
			yyVAL.orderBy = nil
		}
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4313
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4319
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4323
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4329
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 831:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4334
		{
			yyVAL.str = AscScr
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4338
		{
			yyVAL.str = AscScr
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4342
		{
			yyVAL.str = DescScr
		}
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4347
		{
			yyVAL.limit = nil
		}
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4351
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 836:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4355
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 837:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4359
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4364
		{
			yyVAL.str = ""
		}
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4368
		{
			yyVAL.str = ForUpdateStr
		}
	case 840:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4372
		{
			yyVAL.str = ShareModeStr
		}
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4385
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4389
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4393
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 844:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4398
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 845:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4402
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 846:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4406
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4413
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4417
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4421
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 850:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4425
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 851:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4430
		{
			yyVAL.updateExprs = nil
		}
	case 852:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4434
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4440
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4444
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4450
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4454
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4460
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4466
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4476
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4480
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4486
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4492
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4496
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4502
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4506
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4510
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 867:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4519
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4525
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4531
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4538
		{
			yyVAL.bytes = []byte("charset")
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4545
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4549
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4553
		{
			yyVAL.expr = &Default{}
		}
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4562
		{
			yyVAL.byt = 0
		}
	case 880:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4564
		{
			yyVAL.byt = 1
		}
	case 881:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4567
		{
			yyVAL.empty = struct{}{}
		}
	case 882:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4569
		{
			yyVAL.empty = struct{}{}
		}
	case 883:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4572
		{
			yyVAL.str = ""
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4574
		{
			yyVAL.str = IgnoreStr
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4578
		{
			yyVAL.empty = struct{}{}
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4580
		{
			yyVAL.empty = struct{}{}
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4582
		{
			yyVAL.empty = struct{}{}
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4584
		{
			yyVAL.empty = struct{}{}
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4586
		{
			yyVAL.empty = struct{}{}
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4588
		{
			yyVAL.empty = struct{}{}
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4590
		{
			yyVAL.empty = struct{}{}
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4592
		{
			yyVAL.empty = struct{}{}
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4594
		{
			yyVAL.empty = struct{}{}
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4596
		{
			yyVAL.empty = struct{}{}
		}
	case 895:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4599
		{
			yyVAL.empty = struct{}{}
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4601
		{
			yyVAL.empty = struct{}{}
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4603
		{
			yyVAL.empty = struct{}{}
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4607
		{
			yyVAL.empty = struct{}{}
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4609
		{
			yyVAL.empty = struct{}{}
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4613
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4617
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4624
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4630
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4634
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4639
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4646
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 909:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4652
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4656
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4660
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 912:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4666
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4670
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 914:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4674
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 915:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4680
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4684
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 917:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4691
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4698
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4702
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4709
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4715
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4719
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5035
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5044
		{
			decNesting(yylex)
		}
	case 1213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:5049
		{
			forceEOF(yylex)
		}
	case 1214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:5054
		{
			forceEOF(yylex)
		}
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5058
		{
			forceEOF(yylex)
		}
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:5062
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
