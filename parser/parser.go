// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const STATUS = 57489
const VARIABLES = 57490
const RESTRICT = 57491
const CASCADE = 57492
const NO = 57493
const ACTION = 57494
const PERMISSIVE = 57495
const RESTRICTIVE = 57496
const PUBLIC = 57497
const CURRENT_USER = 57498
const SESSION_USER = 57499
const PAD_INDEX = 57500
const FILLFACTOR = 57501
const IGNORE_DUP_KEY = 57502
const STATISTICS_NORECOMPUTE = 57503
const STATISTICS_INCREMENTAL = 57504
const ALLOW_ROW_LOCKS = 57505
const ALLOW_PAGE_LOCKS = 57506
const BEFORE = 57507
const AFTER = 57508
const EACH = 57509
const ROW = 57510
const SCROLL = 57511
const CURSOR = 57512
const OPEN = 57513
const CLOSE = 57514
const FETCH = 57515
const PRIOR = 57516
const FIRST = 57517
const LAST = 57518
const DEALLOCATE = 57519
const INSTEAD = 57520
const OF = 57521
const DEFERRABLE = 57522
const INITIALLY = 57523
const IMMEDIATE = 57524
const DEFERRED = 57525
const CONCURRENTLY = 57526
const SQL = 57527
const SECURITY = 57528
const BEGIN = 57529
const START = 57530
const TRANSACTION = 57531
const COMMIT = 57532
const ROLLBACK = 57533
const BIT = 57534
const TINYINT = 57535
const SMALLINT = 57536
const SMALLSERIAL = 57537
const MEDIUMINT = 57538
const INT = 57539
const INTEGER = 57540
const SERIAL = 57541
const BIGINT = 57542
const BIGSERIAL = 57543
const INTNUM = 57544
const REAL = 57545
const DOUBLE = 57546
const PRECISION = 57547
const FLOAT_TYPE = 57548
const DECIMAL = 57549
const NUMERIC = 57550
const SMALLMONEY = 57551
const MONEY = 57552
const TIME = 57553
const TIMESTAMP = 57554
const DATETIME = 57555
const YEAR = 57556
const DATETIMEOFFSET = 57557
const DATETIME2 = 57558
const SMALLDATETIME = 57559
const CHAR = 57560
const VARCHAR = 57561
const VARYING = 57562
const BOOL = 57563
const CHARACTER = 57564
const VARBINARY = 57565
const NCHAR = 57566
const NVARCHAR = 57567
const NTEXT = 57568
const UUID = 57569
const TEXT = 57570
const TINYTEXT = 57571
const MEDIUMTEXT = 57572
const LONGTEXT = 57573
const CITEXT = 57574
const BLOB = 57575
const TINYBLOB = 57576
const MEDIUMBLOB = 57577
const LONGBLOB = 57578
const JSON = 57579
const JSONB = 57580
const ENUM = 57581
const GEOMETRY = 57582
const POINT = 57583
const LINESTRING = 57584
const POLYGON = 57585
const GEOMETRYCOLLECTION = 57586
const MULTIPOINT = 57587
const MULTILINESTRING = 57588
const MULTIPOLYGON = 57589
const VARIADIC = 57590
const ARRAY = 57591
const NOW = 57592
const GETDATE = 57593
const BPCHAR = 57594
const TEXT_PATTERN_OPS = 57595
const NULLX = 57596
const AUTO_INCREMENT = 57597
const APPROXNUM = 57598
const SIGNED = 57599
const UNSIGNED = 57600
const ZEROFILL = 57601
const ZONE = 57602
const AUTOINCREMENT = 57603
const DATABASES = 57604
const TABLES = 57605
const VSCHEMA_TABLES = 57606
const EXTENDED = 57607
const FULL = 57608
const PROCESSLIST = 57609
const NAMES = 57610
const CHARSET = 57611
const GLOBAL = 57612
const SESSION = 57613
const ISOLATION = 57614
const LEVEL = 57615
const READ = 57616
const WRITE = 57617
const ONLY = 57618
const REPEATABLE = 57619
const COMMITTED = 57620
const UNCOMMITTED = 57621
const SERIALIZABLE = 57622
const NEW = 57623
const CONCAT_NULL_YIELDS_NULL = 57624
const CURSOR_CLOSE_ON_COMMIT = 57625
const QUOTED_IDENTIFIER = 57626
const ARITHABORT = 57627
const FMTONLY = 57628
const NOCOUNT = 57629
const NOEXEC = 57630
const NUMERIC_ROUNDABORT = 57631
const ANSI_DEFAULTS = 57632
const ANSI_NULL_DFLT_OFF = 57633
const ANSI_NULL_DFLT_ON = 57634
const ANSI_NULLS = 57635
const ANSI_PADDING = 57636
const ANSI_WARNINGS = 57637
const FORCEPLAN = 57638
const SHOWPLAN_ALL = 57639
const SHOWPLAN_TEXT = 57640
const SHOWPLAN_XML = 57641
const IMPLICIT_TRANSACTIONS = 57642
const REMOTE_PROC_TRANSACTIONS = 57643
const XACT_ABORT = 57644
const CURRENT_TIMESTAMP = 57645
const DATABASE = 57646
const CURRENT_DATE = 57647
const CURRENT_TIME = 57648
const LOCALTIME = 57649
const LOCALTIMESTAMP = 57650
const UTC_DATE = 57651
const UTC_TIME = 57652
const UTC_TIMESTAMP = 57653
const REPLACE = 57654
const CONVERT = 57655
const CAST = 57656
const SUBSTR = 57657
const SUBSTRING = 57658
const GROUP_CONCAT = 57659
const SEPARATOR = 57660
const INHERIT = 57661
const LEAD = 57662
const LAG = 57663
const MATCH = 57664
const AGAINST = 57665
const BOOLEAN = 57666
const LANGUAGE = 57667
const WITH = 57668
const WITHOUT = 57669
const PARSER = 57670
const QUERY = 57671
const EXPANSION = 57672
const UNUSED = 57673
const VIRTUAL = 57674
const STORED = 57675
const GENERATED = 57676
const ALWAYS = 57677
const IDENTITY = 57678
const SEQUENCE = 57679
const INCREMENT = 57680
const MINVALUE = 57681
const CACHE = 57682
const CYCLE = 57683
const OWNED = 57684
const NONE = 57685
const CLUSTERED = 57686
const NONCLUSTERED = 57687
const REPLICATION = 57688
const COLUMNSTORE = 57689
const INCLUDE = 57690
const HOLDLOCK = 57691
const NOLOCK = 57692
const NOWAIT = 57693
const PAGLOCK = 57694
const ROWLOCK = 57695
const TABLELOCK = 57696
const DEFINER = 57697
const INVOKER = 57698
const TYPECAST = 57699
const CHECK = 57700
const OVER = 57701

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	130, 390,
	-2, 143,
	-1, 174,
	116, 944,
	151, 944,
	209, 944,
	210, 944,
	211, 944,
	214, 944,
	217, 944,
	220, 944,
	223, 944,
	224, 944,
	225, 944,
	226, 944,
	227, 944,
	228, 944,
	230, 944,
	232, 944,
	233, 944,
	234, 944,
	235, 944,
	236, 944,
	240, 944,
	241, 944,
	242, 944,
	243, 944,
	245, 944,
	249, 944,
	254, 944,
	255, 944,
	-2, 269,
	-1, 175,
	116, 945,
	151, 945,
	209, 945,
	210, 945,
	211, 945,
	214, 945,
	217, 945,
	220, 945,
	223, 945,
	224, 945,
	225, 945,
	226, 945,
	227, 945,
	228, 945,
	230, 945,
	232, 945,
	233, 945,
	234, 945,
	235, 945,
	236, 945,
	240, 945,
	241, 945,
	242, 945,
	243, 945,
	245, 945,
	249, 945,
	254, 945,
	255, 945,
	-2, 270,
	-1, 177,
	151, 947,
	209, 947,
	210, 947,
	211, 947,
	214, 947,
	217, 947,
	220, 947,
	223, 947,
	224, 947,
	225, 947,
	226, 947,
	227, 947,
	228, 947,
	230, 947,
	232, 947,
	233, 947,
	234, 947,
	235, 947,
	236, 947,
	240, 947,
	241, 947,
	242, 947,
	243, 947,
	245, 947,
	249, 947,
	254, 947,
	255, 947,
	-2, 304,
	-1, 185,
	151, 1018,
	209, 1018,
	210, 1018,
	211, 1018,
	214, 1018,
	217, 1018,
	220, 1018,
	223, 1018,
	224, 1018,
	225, 1018,
	226, 1018,
	227, 1018,
	228, 1018,
	230, 1018,
	232, 1018,
	233, 1018,
	234, 1018,
	235, 1018,
	236, 1018,
	240, 1018,
	241, 1018,
	242, 1018,
	243, 1018,
	245, 1018,
	249, 1018,
	254, 1018,
	255, 1018,
	-2, 324,
	-1, 186,
	151, 979,
	209, 979,
	210, 979,
	211, 979,
	214, 979,
	217, 979,
	220, 979,
	223, 979,
	224, 979,
	225, 979,
	226, 979,
	227, 979,
	228, 979,
	230, 979,
	232, 979,
	233, 979,
	234, 979,
	235, 979,
	236, 979,
	240, 979,
	241, 979,
	242, 979,
	243, 979,
	245, 979,
	249, 979,
	254, 979,
	255, 979,
	-2, 324,
	-1, 187,
	151, 975,
	209, 975,
	210, 975,
	211, 975,
	214, 975,
	217, 975,
	220, 975,
	223, 975,
	224, 975,
	225, 975,
	226, 975,
	227, 975,
	228, 975,
	230, 975,
	232, 975,
	233, 975,
	234, 975,
	235, 975,
	236, 975,
	240, 975,
	241, 975,
	242, 975,
	243, 975,
	245, 975,
	249, 975,
	254, 975,
	255, 975,
	-2, 324,
	-1, 189,
	116, 943,
	151, 943,
	209, 943,
	210, 943,
	211, 943,
	214, 943,
	217, 943,
	220, 943,
	223, 943,
	224, 943,
	225, 943,
	226, 943,
	227, 943,
	228, 943,
	230, 943,
	232, 943,
	233, 943,
	234, 943,
	235, 943,
	236, 943,
	240, 943,
	241, 943,
	242, 943,
	243, 943,
	245, 943,
	249, 943,
	254, 943,
	255, 943,
	-2, 285,
	-1, 190,
	116, 1017,
	151, 1017,
	209, 1017,
	210, 1017,
	211, 1017,
	214, 1017,
	217, 1017,
	220, 1017,
	223, 1017,
	224, 1017,
	225, 1017,
	226, 1017,
	227, 1017,
	228, 1017,
	230, 1017,
	232, 1017,
	233, 1017,
	234, 1017,
	235, 1017,
	236, 1017,
	240, 1017,
	241, 1017,
	242, 1017,
	243, 1017,
	245, 1017,
	249, 1017,
	254, 1017,
	255, 1017,
	-2, 286,
	-1, 191,
	116, 977,
	151, 977,
	209, 977,
	210, 977,
	211, 977,
	214, 977,
	217, 977,
	220, 977,
	223, 977,
	224, 977,
	225, 977,
	226, 977,
	227, 977,
	228, 977,
	230, 977,
	232, 977,
	233, 977,
	234, 977,
	235, 977,
	236, 977,
	240, 977,
	241, 977,
	242, 977,
	243, 977,
	245, 977,
	249, 977,
	254, 977,
	255, 977,
	-2, 287,
	-1, 192,
	116, 974,
	151, 974,
	209, 974,
	210, 974,
	211, 974,
	214, 974,
	217, 974,
	220, 974,
	223, 974,
	224, 974,
	225, 974,
	226, 974,
	227, 974,
	228, 974,
	230, 974,
	232, 974,
	233, 974,
	234, 974,
	235, 974,
	236, 974,
	240, 974,
	241, 974,
	242, 974,
	243, 974,
	245, 974,
	249, 974,
	254, 974,
	255, 974,
	-2, 288,
	-1, 195,
	116, 1024,
	151, 1024,
	209, 1024,
	210, 1024,
	211, 1024,
	214, 1024,
	217, 1024,
	220, 1024,
	223, 1024,
	224, 1024,
	225, 1024,
	226, 1024,
	227, 1024,
	228, 1024,
	230, 1024,
	232, 1024,
	233, 1024,
	234, 1024,
	235, 1024,
	236, 1024,
	240, 1024,
	241, 1024,
	242, 1024,
	243, 1024,
	245, 1024,
	249, 1024,
	254, 1024,
	255, 1024,
	-2, 291,
	-1, 200,
	116, 1016,
	151, 1016,
	209, 1016,
	210, 1016,
	211, 1016,
	214, 1016,
	217, 1016,
	220, 1016,
	223, 1016,
	224, 1016,
	225, 1016,
	226, 1016,
	227, 1016,
	228, 1016,
	230, 1016,
	232, 1016,
	233, 1016,
	234, 1016,
	235, 1016,
	236, 1016,
	240, 1016,
	241, 1016,
	242, 1016,
	243, 1016,
	245, 1016,
	249, 1016,
	254, 1016,
	255, 1016,
	-2, 304,
	-1, 205,
	116, 1031,
	151, 1031,
	209, 1031,
	210, 1031,
	211, 1031,
	214, 1031,
	217, 1031,
	220, 1031,
	223, 1031,
	224, 1031,
	225, 1031,
	226, 1031,
	227, 1031,
	228, 1031,
	230, 1031,
	232, 1031,
	233, 1031,
	234, 1031,
	235, 1031,
	236, 1031,
	240, 1031,
	241, 1031,
	242, 1031,
	243, 1031,
	245, 1031,
	249, 1031,
	254, 1031,
	255, 1031,
	-2, 268,
	-1, 206,
	116, 960,
	151, 960,
	209, 960,
	210, 960,
	211, 960,
	214, 960,
	217, 960,
	220, 960,
	223, 960,
	224, 960,
	225, 960,
	226, 960,
	227, 960,
	228, 960,
	230, 960,
	232, 960,
	233, 960,
	234, 960,
	235, 960,
	236, 960,
	240, 960,
	241, 960,
	242, 960,
	243, 960,
	245, 960,
	249, 960,
	254, 960,
	255, 960,
	-2, 294,
	-1, 207,
	116, 990,
	151, 990,
	209, 990,
	210, 990,
	211, 990,
	214, 990,
	217, 990,
	220, 990,
	223, 990,
	224, 990,
	225, 990,
	226, 990,
	227, 990,
	228, 990,
	230, 990,
	232, 990,
	233, 990,
	234, 990,
	235, 990,
	236, 990,
	240, 990,
	241, 990,
	242, 990,
	243, 990,
	245, 990,
	249, 990,
	254, 990,
	255, 990,
	-2, 295,
	-1, 208,
	116, 973,
	151, 973,
	209, 973,
	210, 973,
	211, 973,
	214, 973,
	217, 973,
	220, 973,
	223, 973,
	224, 973,
	225, 973,
	226, 973,
	227, 973,
	228, 973,
	230, 973,
	232, 973,
	233, 973,
	234, 973,
	235, 973,
	236, 973,
	240, 973,
	241, 973,
	242, 973,
	243, 973,
	245, 973,
	249, 973,
	254, 973,
	255, 973,
	-2, 296,
	-1, 209,
	116, 991,
	151, 991,
	209, 991,
	210, 991,
	211, 991,
	214, 991,
	217, 991,
	220, 991,
	223, 991,
	224, 991,
	225, 991,
	226, 991,
	227, 991,
	228, 991,
	230, 991,
	232, 991,
	233, 991,
	234, 991,
	235, 991,
	236, 991,
	240, 991,
	241, 991,
	242, 991,
	243, 991,
	245, 991,
	249, 991,
	254, 991,
	255, 991,
	-2, 297,
	-1, 210,
	116, 961,
	151, 961,
	209, 961,
	210, 961,
	211, 961,
	214, 961,
	217, 961,
	220, 961,
	223, 961,
	224, 961,
	225, 961,
	226, 961,
	227, 961,
	228, 961,
	230, 961,
	232, 961,
	233, 961,
	234, 961,
	235, 961,
	236, 961,
	240, 961,
	241, 961,
	242, 961,
	243, 961,
	245, 961,
	249, 961,
	254, 961,
	255, 961,
	-2, 298,
	-1, 211,
	116, 982,
	151, 982,
	209, 982,
	210, 982,
	211, 982,
	214, 982,
	217, 982,
	220, 982,
	223, 982,
	224, 982,
	225, 982,
	226, 982,
	227, 982,
	228, 982,
	230, 982,
	232, 982,
	233, 982,
	234, 982,
	235, 982,
	236, 982,
	240, 982,
	241, 982,
	242, 982,
	243, 982,
	245, 982,
	249, 982,
	254, 982,
	255, 982,
	-2, 299,
	-1, 212,
	116, 981,
	151, 981,
	209, 981,
	210, 981,
	211, 981,
	214, 981,
	217, 981,
	220, 981,
	223, 981,
	224, 981,
	225, 981,
	226, 981,
	227, 981,
	228, 981,
	230, 981,
	232, 981,
	233, 981,
	234, 981,
	235, 981,
	236, 981,
	240, 981,
	241, 981,
	242, 981,
	243, 981,
	245, 981,
	249, 981,
	254, 981,
	255, 981,
	-2, 300,
	-1, 213,
	116, 983,
	151, 983,
	209, 983,
	210, 983,
	211, 983,
	214, 983,
	217, 983,
	220, 983,
	223, 983,
	224, 983,
	225, 983,
	226, 983,
	227, 983,
	228, 983,
	230, 983,
	232, 983,
	233, 983,
	234, 983,
	235, 983,
	236, 983,
	240, 983,
	241, 983,
	242, 983,
	243, 983,
	245, 983,
	249, 983,
	254, 983,
	255, 983,
	-2, 301,
	-1, 217,
	116, 1011,
	151, 1011,
	209, 1011,
	210, 1011,
	211, 1011,
	214, 1011,
	217, 1011,
	220, 1011,
	223, 1011,
	224, 1011,
	225, 1011,
	226, 1011,
	227, 1011,
	228, 1011,
	230, 1011,
	232, 1011,
	233, 1011,
	234, 1011,
	235, 1011,
	236, 1011,
	240, 1011,
	241, 1011,
	242, 1011,
	243, 1011,
	245, 1011,
	249, 1011,
	254, 1011,
	255, 1011,
	-2, 246,
	-1, 218,
	116, 978,
	151, 978,
	209, 978,
	210, 978,
	211, 978,
	214, 978,
	217, 978,
	220, 978,
	223, 978,
	224, 978,
	225, 978,
	226, 978,
	227, 978,
	228, 978,
	230, 978,
	232, 978,
	233, 978,
	234, 978,
	235, 978,
	236, 978,
	240, 978,
	241, 978,
	242, 978,
	243, 978,
	245, 978,
	249, 978,
	254, 978,
	255, 978,
	-2, 247,
	-1, 220,
	116, 965,
	151, 965,
	209, 965,
	210, 965,
	211, 965,
	214, 965,
	217, 965,
	220, 965,
	223, 965,
	224, 965,
	225, 965,
	226, 965,
	227, 965,
	228, 965,
	230, 965,
	232, 965,
	233, 965,
	234, 965,
	235, 965,
	236, 965,
	240, 965,
	241, 965,
	242, 965,
	243, 965,
	245, 965,
	249, 965,
	254, 965,
	255, 965,
	-2, 249,
	-1, 221,
	116, 1006,
	151, 1006,
	209, 1006,
	210, 1006,
	211, 1006,
	214, 1006,
	217, 1006,
	220, 1006,
	223, 1006,
	224, 1006,
	225, 1006,
	226, 1006,
	227, 1006,
	228, 1006,
	230, 1006,
	232, 1006,
	233, 1006,
	234, 1006,
	235, 1006,
	236, 1006,
	240, 1006,
	241, 1006,
	242, 1006,
	243, 1006,
	245, 1006,
	249, 1006,
	254, 1006,
	255, 1006,
	-2, 250,
	-1, 223,
	116, 942,
	151, 942,
	209, 942,
	210, 942,
	211, 942,
	214, 942,
	217, 942,
	220, 942,
	223, 942,
	224, 942,
	225, 942,
	226, 942,
	227, 942,
	228, 942,
	230, 942,
	232, 942,
	233, 942,
	234, 942,
	235, 942,
	236, 942,
	240, 942,
	241, 942,
	242, 942,
	243, 942,
	245, 942,
	249, 942,
	254, 942,
	255, 942,
	-2, 252,
	-1, 225,
	116, 955,
	151, 955,
	209, 955,
	210, 955,
	211, 955,
	214, 955,
	217, 955,
	220, 955,
	223, 955,
	224, 955,
	225, 955,
	226, 955,
	227, 955,
	228, 955,
	230, 955,
	232, 955,
	233, 955,
	234, 955,
	235, 955,
	236, 955,
	240, 955,
	241, 955,
	242, 955,
	243, 955,
	245, 955,
	249, 955,
	254, 955,
	255, 955,
	-2, 306,
	-1, 265,
	142, 400,
	-2, 953,
	-1, 502,
	59, 365,
	-2, 362,
	-1, 521,
	119, 772,
	-2, 232,
	-1, 539,
	119, 770,
	-2, 766,
	-1, 540,
	119, 771,
	-2, 767,
	-1, 646,
	119, 772,
	-2, 232,
	-1, 668,
	266, 781,
	-2, 679,
	-1, 700,
	266, 781,
	-2, 429,
	-1, 731,
	5, 33,
	-2, 13,
	-1, 737,
	5, 33,
	-2, 15,
	-1, 877,
	266, 781,
	-2, 429,
	-1, 892,
	116, 324,
	266, 324,
	378, 324,
	-2, 237,
	-1, 893,
	266, 289,
	378, 289,
	-2, 238,
	-1, 894,
	266, 290,
	378, 290,
	-2, 239,
	-1, 1030,
	119, 774,
	-2, 769,
	-1, 1041,
	266, 781,
	-2, 304,
	-1, 1095,
	116, 304,
	266, 304,
	378, 304,
	-2, 233,
	-1, 1109,
	266, 781,
	-2, 429,
	-1, 1170,
	58, 95,
	-2, 162,
	-1, 1173,
	58, 95,
	-2, 162,
	-1, 1222,
	5, 34,
	-2, 555,
	-1, 1292,
	5, 33,
	-2, 14,
	-1, 1305,
	187, 60,
	-2, 162,
	-1, 1347,
	58, 95,
	-2, 161,
	-1, 1468,
	86, 1005,
	-2, 91,
	-1, 1469,
	86, 963,
	-2, 92,
	-1, 1473,
	86, 948,
	-2, 756,
	-1, 1475,
	86, 984,
	-2, 758,
	-1, 1555,
	55, 47,
	57, 47,
	-2, 49,
	-1, 1712,
	5, 33,
	-2, 727,
	-1, 1737,
	5, 33,
	-2, 56,
	-1, 1804,
	5, 34,
	-2, 728,
	-1, 1833,
	5, 33,
	-2, 730,
	-1, 1854,
	5, 34,
	-2, 731,
}

const yyPrivate = 57344

const yyLast = 19604

var yyAct = [...]int16{
	540, 1645, 1730, 1813, 1763, 1663, 630, 658, 1578, 1764,
	1445, 1760, 33, 744, 836, 1703, 1121, 33, 33, 153,
	835, 1135, 1646, 1591, 1722, 1590, 1735, 555, 1580, 1576,
	1467, 33, 33, 1565, 165, 1454, 1638, 925, 1453, 726,
	952, 1446, 1141, 1309, 1464, 1286, 1450, 1088, 766, 1218,
	1306, 491, 1202, 964, 1281, 1361, 26, 1040, 487, 1013,
	1212, 1470, 164, 1138, 623, 1077, 1152, 1117, 905, 901,
	691, 1029, 725, 641, 1080, 326, 990, 1179, 1104, 940,
	292, 566, 308, 1346, 172, 166, 167, 628, 494, 860,
	598, 518, 610, 629, 231, 340, 949, 260, 341, 520,
	148, 526, 1276, 275, 1385, 254, 294, 543, 929, 791,
	801, 802, 794, 795, 796, 797, 798, 799, 800, 793,
	1027, 156, 803, 734, 1635, 1165, 1155, 1154, 9, 1268,
	851, 605, 290, 1547, 692, 1459, 734, 1156, 1165, 1155,
	1154, 803, 33, 33, 336, 337, 1118, 611, 1157, 33,
	1156, 157, 793, 772, 150, 803, 614, 153, 787, 1856,
	790, 1157, 153, 880, 33, 1527, 805, 806, 807, 808,
	809, 810, 811, 516, 788, 789, 786, 812, 813, 814,
	815, 792, 791, 801, 802, 794, 795, 796, 797, 798,
	799, 800, 793, 612, 613, 803, 158, 159, 1699, 1406,
	1407, 1794, 1844, 792, 791, 801, 802, 794, 795, 796,
	797, 798, 799, 800, 793, 1685, 240, 803, 293, 1408,
	980, 981, 792, 791, 801, 802, 794, 795, 796, 797,
	798, 799, 800, 793, 153, 33, 803, 153, 1852, 153,
	153, 1753, 153, 1184, 236, 257, 238, 1731, 1183, 33,
	153, 153, 1163, 1845, 153, 33, 250, 298, 567, 568,
	1520, 1439, 1162, 1215, 1793, 1163, 33, 1752, 310, 311,
	312, 313, 1401, 1213, 1376, 1162, 1517, 33, 160, 324,
	1786, 1787, 563, 349, 1785, 1741, 1673, 153, 1740, 1674,
	1675, 1742, 251, 1592, 1503, 1593, 915, 252, 734, 897,
	1165, 1155, 1154, 545, 328, 1158, 1159, 1161, 352, 914,
	296, 1160, 1156, 1393, 830, 922, 485, 1412, 1158, 1159,
	1161, 350, 309, 1157, 1160, 1085, 1383, 298, 718, 1414,
	153, 33, 298, 298, 153, 322, 510, 270, 559, 560,
	561, 562, 792, 791, 801, 802, 794, 795, 796, 797,
	798, 799, 800, 793, 717, 1234, 803, 1232, 1513, 897,
	1790, 633, 612, 613, 530, 1526, 1409, 1528, 1487, 331,
	606, 1486, 334, 1297, 338, 339, 734, 345, 1165, 1155,
	1154, 804, 547, 548, 528, 550, 481, 553, 554, 483,
	1156, 1814, 1815, 1816, 1817, 1818, 1819, 618, 237, 569,
	804, 1157, 792, 791, 801, 802, 794, 795, 796, 797,
	798, 799, 800, 793, 804, 1688, 803, 143, 1748, 1747,
	1689, 585, 512, 346, 1609, 1586, 1384, 1163, 794, 795,
	796, 797, 798, 799, 800, 793, 1488, 1162, 803, 302,
	1296, 1344, 1137, 587, 970, 1700, 1166, 1639, 1203, 531,
	1174, 533, 532, 1830, 804, 1682, 740, 741, 751, 1166,
	881, 242, 29, 347, 242, 573, 271, 1355, 774, 577,
	1613, 773, 509, 508, 496, 752, 804, 501, 616, 499,
	1158, 1159, 1161, 272, 947, 33, 1160, 144, 1335, 590,
	604, 33, 754, 309, 1683, 804, 241, 592, 1178, 1789,
	149, 323, 27, 579, 321, 1163, 325, 1683, 1095, 515,
	648, 933, 926, 301, 145, 1162, 1410, 1411, 1413, 1415,
	1416, 1734, 30, 1733, 1732, 142, 141, 146, 147, 764,
	597, 796, 797, 798, 799, 800, 793, 1184, 161, 803,
	1519, 171, 171, 1608, 567, 568, 595, 764, 502, 1849,
	271, 155, 769, 593, 256, 897, 482, 1751, 1158, 1159,
	1161, 712, 586, 1807, 1160, 272, 1701, 272, 1664, 1666,
	6, 7, 820, 821, 1595, 703, 704, 153, 706, 1418,
	591, 709, 710, 1248, 153, 1244, 33, 1220, 1108, 33,
	834, 33, 833, 530, 596, 33, 693, 33, 565, 731,
	701, 737, 249, 571, 1429, 497, 498, 500, 783, 617,
	615, 688, 1743, 528, 258, 804, 557, 556, 713, 690,
	305, 1166, 33, 307, 243, 244, 1720, 243, 244, 656,
	1594, 1243, 705, 1195, 1194, 779, 1193, 245, 1192, 1191,
	245, 1336, 1337, 1338, 781, 732, 897, 732, 151, 727,
	1665, 771, 232, 235, 1531, 287, 757, 997, 485, 246,
	783, 290, 291, 1744, 782, 781, 1190, 1189, 777, 1686,
	1187, 995, 996, 994, 30, 804, 1708, 1431, 965, 966,
	736, 783, 747, 743, 1403, 1745, 278, 767, 768, 770,
	1081, 755, 1253, 33, 820, 821, 1139, 804, 1081, 1166,
	493, 285, 33, 273, 776, 247, 782, 781, 1362, 969,
	274, 1477, 729, 1485, 972, 904, 1430, 831, 734, 742,
	1165, 1155, 1154, 783, 33, 153, 732, 895, 1363, 782,
	781, 33, 1156, 910, 968, 782, 781, 153, 493, 1226,
	505, 1225, 1291, 1157, 924, 332, 783, 1683, 903, 153,
	1623, 33, 783, 552, 1261, 33, 931, 551, 493, 171,
	782, 781, 33, 909, 865, 486, 866, 1521, 281, 492,
	276, 286, 782, 781, 33, 1621, 495, 783, 283, 282,
	1362, 884, 1622, 528, 1242, 899, 151, 506, 1525, 783,
	546, 151, 504, 493, 991, 918, 727, 911, 804, 913,
	1363, 537, 732, 853, 854, 855, 856, 857, 858, 859,
	782, 781, 1524, 780, 1522, 1523, 1185, 1405, 967, 782,
	781, 33, 33, 971, 1205, 1206, 1207, 783, 620, 33,
	1364, 782, 781, 1360, 1219, 33, 783, 782, 781, 993,
	898, 574, 985, 987, 988, 546, 546, 1163, 783, 986,
	1071, 1073, 963, 1093, 783, 917, 1082, 1162, 916, 1035,
	920, 687, 973, 151, 572, 570, 151, 975, 151, 151,
	542, 151, 932, 1014, 832, 1015, 620, 1188, 912, 351,
	151, 832, 564, 151, 943, 511, 732, 1036, 1038, 1019,
	1016, 866, 1030, 1076, 1018, 1028, 1031, 941, 897, 897,
	1158, 1159, 1161, 1021, 279, 732, 1160, 33, 1022, 1025,
	280, 1567, 1570, 1571, 1572, 1568, 151, 1569, 1573, 926,
	538, 1723, 1724, 734, 1086, 711, 1089, 1090, 1839, 1838,
	941, 1837, 1294, 1826, 33, 1784, 897, 1806, 897, 1110,
	609, 1111, 33, 761, 1690, 1421, 33, 1087, 1710, 608,
	1099, 607, 734, 1711, 1165, 1155, 1154, 1562, 897, 151,
	1514, 1757, 897, 151, 1511, 503, 1156, 941, 1538, 761,
	1498, 1096, 1761, 620, 1345, 1719, 1097, 1157, 1294, 1497,
	1559, 1494, 1493, 288, 1142, 289, 761, 1490, 1279, 818,
	953, 1181, 1277, 1719, 1125, 486, 1119, 727, 1264, 761,
	1489, 599, 991, 1263, 955, 761, 1422, 284, 792, 791,
	801, 802, 794, 795, 796, 797, 798, 799, 800, 793,
	1100, 897, 803, 1167, 1560, 1114, 1558, 941, 1120, 1169,
	537, 1033, 897, 941, 979, 761, 760, 1562, 33, 721,
	720, 1166, 792, 791, 801, 802, 794, 795, 796, 797,
	798, 799, 800, 793, 715, 716, 803, 801, 802, 794,
	795, 796, 797, 798, 799, 800, 793, 715, 714, 803,
	734, 1208, 163, 162, 1277, 1642, 1633, 1558, 954, 1113,
	1247, 1163, 1561, 1112, 153, 926, 728, 1094, 1295, 1684,
	1294, 1162, 921, 900, 831, 942, 745, 887, 883, 749,
	1832, 753, 708, 707, 702, 486, 33, 486, 1562, 1802,
	956, 957, 958, 959, 960, 961, 962, 33, 734, 1719,
	620, 1231, 1100, 1033, 1562, 1250, 1246, 1100, 1672, 584,
	748, 1235, 745, 584, 1158, 1159, 1161, 1587, 583, 1460,
	1160, 584, 1432, 1100, 1227, 941, 761, 1289, 992, 538,
	882, 723, 722, 620, 1252, 1292, 1275, 33, 719, 33,
	33, 33, 1288, 488, 1779, 1777, 1749, 1030, 620, 1266,
	1028, 33, 33, 33, 33, 33, 33, 33, 33, 1272,
	1271, 33, 1273, 1299, 1269, 33, 1723, 1724, 1274, 727,
	1300, 298, 1491, 732, 1278, 1290, 327, 1199, 1198, 33,
	33, 732, 1177, 171, 1176, 538, 151, 1116, 1115, 1092,
	945, 923, 486, 151, 699, 730, 1353, 1354, 698, 696,
	1372, 33, 621, 1280, 1358, 575, 322, 1339, 1342, 517,
	513, 1343, 659, 728, 919, 490, 231, 329, 330, 1373,
	315, 745, 314, 303, 11, 1370, 1371, 1365, 1366, 1367,
	1368, 1369, 588, 1374, 1761, 1348, 1349, 1350, 1351, 1352,
	1726, 946, 1301, 1302, 1303, 948, 1307, 1180, 1204, 724,
	1379, 576, 599, 333, 239, 1166, 1437, 1729, 951, 33,
	1657, 804, 1387, 1388, 974, 1658, 1390, 1728, 1402, 1655,
	1386, 1654, 1425, 1653, 1656, 33, 1659, 1827, 1571, 1572,
	1394, 1510, 1792, 153, 153, 1434, 33, 1030, 33, 1631,
	1400, 850, 1392, 1130, 1131, 804, 1541, 1447, 1567, 1570,
	1571, 1572, 1568, 1549, 1569, 1573, 489, 1600, 804, 1282,
	908, 1024, 1024, 1452, 1800, 33, 558, 686, 1443, 1026,
	1462, 1433, 1283, 1602, 486, 486, 348, 1426, 33, 965,
	966, 1575, 538, 1134, 151, 1074, 992, 685, 1448, 935,
	1074, 936, 937, 938, 1476, 896, 151, 1127, 1128, 1669,
	582, 580, 578, 1423, 934, 248, 1420, 1427, 151, 1078,
	1380, 1483, 1168, 792, 791, 801, 802, 794, 795, 796,
	797, 798, 799, 800, 793, 1083, 939, 803, 739, 603,
	1122, 1799, 1626, 1529, 792, 791, 801, 802, 794, 795,
	796, 797, 798, 799, 800, 793, 1123, 1106, 803, 33,
	926, 1798, 1495, 1496, 1759, 1277, 1500, 1501, 1499, 342,
	343, 344, 1846, 1482, 728, 1504, 1481, 1480, 1451, 1479,
	1378, 1377, 602, 601, 1136, 928, 1197, 1428, 1196, 153,
	153, 507, 1140, 930, 255, 1532, 1170, 1557, 750, 153,
	153, 33, 944, 351, 8, 1, 33, 1308, 13, 908,
	908, 12, 1702, 33, 1075, 908, 1267, 335, 1544, 1075,
	1387, 1217, 829, 645, 1546, 1687, 1548, 1550, 1607, 1545,
	631, 1812, 33, 33, 1461, 1603, 1556, 1605, 1606, 1304,
	1442, 1537, 1551, 1334, 1037, 1540, 908, 908, 908, 908,
	1588, 1584, 1214, 541, 277, 1262, 514, 1534, 14, 1536,
	1438, 1601, 1293, 738, 1535, 732, 581, 1142, 1604, 1539,
	153, 1610, 908, 1357, 950, 1612, 792, 791, 801, 802,
	794, 795, 796, 797, 798, 799, 800, 793, 1106, 763,
	803, 263, 756, 538, 153, 484, 28, 10, 153, 153,
	1186, 264, 262, 153, 153, 153, 153, 153, 1647, 261,
	259, 544, 295, 170, 168, 153, 169, 173, 153, 1465,
	1574, 1596, 153, 589, 1554, 1555, 33, 1643, 33, 1103,
	816, 1637, 1641, 1739, 1472, 1614, 33, 1768, 1035, 1649,
	1650, 1648, 1652, 33, 1651, 1285, 1797, 1660, 1758, 1251,
	1668, 847, 1628, 1079, 153, 1671, 1106, 632, 1670, 486,
	1462, 984, 644, 643, 1680, 642, 728, 599, 885, 522,
	523, 524, 1629, 1709, 153, 785, 1630, 527, 525, 535,
	536, 1456, 1552, 153, 732, 1550, 1299, 1550, 1550, 1566,
	1564, 1563, 1725, 1721, 1455, 1632, 804, 1679, 1516, 1712,
	1698, 1129, 1436, 1707, 1153, 1457, 927, 1305, 33, 1331,
	1332, 1333, 1716, 1132, 5, 1164, 1727, 804, 1151, 4,
	3, 1347, 1170, 1170, 1347, 1170, 1170, 599, 599, 1640,
	1737, 1356, 1693, 1150, 1644, 1359, 1738, 1149, 1148, 1146,
	1147, 1144, 33, 1145, 1143, 732, 1124, 908, 1705, 1136,
	599, 733, 1762, 1256, 33, 33, 2, 1647, 0, 1765,
	0, 0, 0, 0, 0, 1637, 1647, 0, 1637, 0,
	908, 486, 0, 0, 1767, 1706, 732, 0, 351, 908,
	1756, 1770, 1774, 619, 1715, 538, 1717, 0, 1718, 1692,
	33, 0, 0, 1771, 0, 0, 1773, 0, 0, 486,
	0, 0, 694, 1754, 0, 0, 0, 0, 0, 0,
	700, 1791, 0, 1796, 1801, 0, 0, 0, 33, 0,
	732, 33, 33, 33, 153, 33, 0, 0, 1809, 745,
	1810, 1811, 1823, 0, 1820, 1821, 1822, 0, 0, 0,
	0, 1825, 0, 0, 0, 1440, 0, 33, 33, 804,
	1765, 735, 1831, 735, 1829, 0, 171, 0, 486, 1772,
	1457, 0, 0, 0, 0, 0, 1833, 0, 0, 1843,
	0, 0, 0, 0, 886, 618, 0, 1847, 0, 775,
	1765, 0, 0, 1850, 0, 1478, 1851, 0, 1853, 0,
	33, 0, 0, 1647, 0, 1848, 0, 0, 1347, 817,
	819, 297, 0, 0, 0, 953, 0, 1550, 0, 0,
	0, 0, 732, 0, 0, 0, 0, 0, 351, 955,
	625, 700, 0, 0, 0, 0, 0, 531, 0, 533,
	532, 0, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 732, 849, 0, 852, 852, 852, 852, 852, 852,
	852, 852, 25, 876, 877, 878, 879, 0, 0, 1457,
	0, 0, 0, 0, 1457, 1457, 1457, 1457, 1457, 486,
	0, 0, 151, 151, 0, 0, 0, 0, 0, 1457,
	792, 791, 801, 802, 794, 795, 796, 797, 798, 799,
	800, 793, 0, 954, 803, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 0, 20, 0, 15, 735, 0,
	0, 1585, 0, 0, 0, 0, 486, 1245, 0, 0,
	16, 0, 23, 1597, 0, 956, 957, 958, 959, 960,
	961, 962, 0, 0, 0, 1457, 0, 0, 17, 18,
	0, 0, 599, 1611, 1457, 0, 0, 0, 0, 0,
	977, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 792, 791, 801, 802, 794, 795, 796, 797, 798,
	799, 800, 793, 0, 0, 803, 0, 0, 299, 300,
	0, 304, 0, 0, 306, 734, 0, 1165, 1155, 1154,
	0, 0, 735, 0, 0, 0, 0, 0, 0, 1156,
	0, 316, 317, 318, 319, 320, 908, 0, 0, 0,
	1157, 838, 1074, 0, 0, 0, 0, 0, 151, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 1582,
	0, 0, 0, 0, 0, 0, 171, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 486, 0, 0, 0,
	0, 0, 0, 1681, 0, 0, 0, 0, 0, 694,
	0, 0, 0, 0, 778, 0, 0, 0, 0, 784,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1109, 0, 978, 0, 0, 0, 0, 0,
	0, 0, 0, 1182, 861, 0, 0, 0, 0, 1625,
	1126, 0, 0, 549, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 848, 1163, 0, 0, 0, 1736, 0,
	0, 0, 0, 151, 1162, 19, 0, 151, 151, 863,
	0, 1075, 151, 151, 151, 151, 151, 21, 22, 0,
	24, 1032, 1034, 0, 1661, 906, 0, 151, 0, 0,
	0, 1582, 486, 804, 0, 0, 0, 0, 1084, 0,
	0, 1074, 0, 0, 1769, 1736, 0, 1158, 1159, 1161,
	1074, 0, 0, 1160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 214, 215, 216,
	869, 870, 219, 871, 872, 222, 873, 0, 0, 0,
	1136, 1109, 0, 151, 0, 0, 0, 1098, 864, 1101,
	1102, 0, 151, 0, 0, 0, 874, 862, 0, 0,
	976, 0, 868, 867, 0, 0, 982, 983, 745, 0,
	0, 745, 745, 745, 804, 1824, 0, 1133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 734, 0, 1165, 1155, 1154, 1835, 1836, 0,
	0, 861, 0, 0, 0, 0, 1156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1157, 0, 0,
	1075, 0, 1200, 837, 0, 0, 1039, 1070, 0, 1075,
	0, 0, 0, 0, 0, 0, 863, 1074, 0, 735,
	1855, 0, 0, 0, 0, 0, 0, 735, 1166, 0,
	734, 0, 1165, 1155, 1154, 0, 0, 0, 0, 875,
	0, 0, 0, 0, 1156, 1091, 0, 1216, 0, 0,
	0, 1746, 0, 695, 697, 1157, 0, 0, 0, 0,
	0, 1222, 1223, 0, 1224, 0, 0, 0, 0, 0,
	0, 0, 0, 1582, 214, 215, 216, 869, 870, 219,
	871, 872, 222, 873, 0, 224, 1020, 0, 226, 227,
	228, 230, 229, 0, 1017, 864, 0, 0, 0, 0,
	0, 1163, 1249, 874, 862, 0, 0, 0, 1255, 868,
	867, 1162, 1257, 1258, 0, 1259, 1260, 0, 0, 0,
	0, 762, 765, 0, 734, 1265, 1165, 1155, 1154, 0,
	0, 0, 0, 0, 0, 0, 1075, 0, 1156, 0,
	0, 0, 1201, 0, 0, 0, 0, 0, 0, 1157,
	0, 0, 0, 0, 1158, 1159, 1161, 0, 0, 1163,
	1160, 1417, 0, 0, 0, 0, 0, 0, 0, 1162,
	0, 0, 0, 0, 0, 822, 823, 824, 825, 826,
	827, 828, 0, 0, 0, 734, 0, 1165, 1155, 1154,
	0, 0, 0, 0, 0, 0, 1458, 0, 1221, 1156,
	0, 0, 0, 1636, 0, 0, 875, 0, 0, 0,
	1157, 0, 1158, 1159, 1161, 0, 0, 0, 1160, 0,
	0, 0, 0, 0, 0, 0, 0, 1375, 1484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1254, 0, 0, 1492,
	762, 0, 0, 1163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1162, 1310, 1311, 1312, 1313, 1314, 1315,
	1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
	1326, 1327, 1328, 1329, 1330, 0, 0, 1284, 1287, 0,
	0, 0, 0, 0, 1515, 1166, 0, 0, 1419, 0,
	0, 0, 0, 0, 1298, 0, 1158, 1159, 1161, 0,
	0, 0, 1160, 0, 1163, 1435, 0, 0, 0, 0,
	0, 0, 0, 0, 1162, 0, 989, 0, 1341, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 0, 0, 0, 0, 0, 0,
	0, 1577, 0, 1166, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1158, 1159, 1161,
	0, 0, 0, 1160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 1072, 0, 0, 0, 0, 0,
	0, 0, 1391, 0, 0, 1389, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 317, 0, 0, 1505, 0, 1506, 1507, 1404, 0,
	1508, 1509, 0, 0, 1512, 0, 0, 0, 0, 0,
	1043, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1424, 1530, 0, 0, 0, 1166, 0, 0,
	1458, 0, 0, 0, 0, 1458, 1458, 1458, 1458, 1458,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1577, 0, 1667, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1052, 1058,
	1056, 0, 0, 1053, 0, 0, 1051, 0, 0, 1060,
	0, 0, 1059, 1045, 1055, 1057, 1054, 1049, 1166, 1044,
	0, 1062, 1061, 1063, 1042, 1065, 0, 0, 0, 1069,
	1066, 1068, 1067, 0, 1064, 0, 1458, 0, 0, 0,
	0, 1713, 1714, 1046, 1047, 1458, 1209, 1210, 1211, 0,
	0, 0, 1620, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1048, 1050, 0, 0, 0, 1627, 0,
	0, 0, 735, 1228, 1229, 0, 1230, 0, 0, 0,
	1518, 1233, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 822, 1236, 1237, 0, 0, 1238, 1239, 0,
	1240, 1241, 0, 0, 0, 1542, 1543, 1287, 0, 0,
	0, 0, 1662, 0, 1766, 0, 735, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 0, 0,
	0, 0, 0, 0, 0, 1780, 1781, 1782, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1691, 0, 0,
	0, 1694, 1695, 1696, 1697, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1766, 0, 0, 1834, 0,
	0, 0, 0, 1340, 0, 0, 0, 0, 0, 0,
	0, 0, 1634, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1750, 1766, 0, 735, 1755, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1381, 1382, 0, 0, 0, 1678,
	0, 1783, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1795, 0, 1395, 1396, 1397, 1398, 1399, 0,
	0, 1704, 1803, 1804, 1805, 0, 1808, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1840, 1841, 1842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1854, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1775, 0, 0, 1776, 0,
	0, 1778, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1788, 0,
	0, 1228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1502, 1704, 0, 0, 0, 0, 0, 0, 0,
	0, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1828, 837, 0, 0, 0, 0, 467,
	456, 0, 415, 469, 385, 403, 477, 405, 406, 442,
	364, 425, 83, 400, 382, 36, 388, 357, 395, 358,
	386, 417, 52, 383, 0, 458, 428, 63, 137, 138,
	475, 66, 433, 0, 106, 76, 0, 0, 420, 460,
	423, 451, 414, 443, 372, 432, 470, 401, 438, 471,
	0, 0, 0, 539, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 46, 0, 437, 465, 397, 480, 0,
	441, 356, 435, 0, 362, 365, 476, 463, 392, 393,
	0, 1615, 1616, 0, 1617, 1618, 1619, 419, 424, 448,
	411, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1270, 0, 389, 0, 431, 0, 0, 0, 369,
	363, 0, 416, 0, 0, 0, 371, 0, 390, 449,
	0, 353, 454, 461, 413, 72, 123, 464, 410, 409,
	90, 0, 49, 0, 108, 55, 402, 64, 446, 478,
	468, 421, 459, 387, 396, 0, 394, 96, 84, 117,
	430, 444, 94, 67, 111, 91, 116, 466, 110, 122,
	99, 42, 81, 34, 89, 95, 0, 50, 0, 130,
	131, 132, 133, 134, 135, 136, 361, 354, 391, 452,
	455, 376, 440, 366, 398, 447, 399, 422, 381, 0,
	0, 0, 0, 0, 0, 0, 105, 104, 37, 109,
	115, 47, 100, 0, 0, 0, 107, 74, 0, 61,
	102, 0, 38, 0, 0, 51, 88, 0, 0, 0,
	0, 0, 0, 112, 0, 127, 0, 0, 0, 0,
	0, 121, 40, 43, 0, 0, 0, 0, 120, 0,
	114, 75, 71, 0, 39, 113, 73, 70, 0, 0,
	53, 56, 86, 69, 87, 57, 78, 77, 79, 0,
	0, 82, 58, 0, 0, 0, 359, 0, 0, 0,
	128, 129, 360, 380, 462, 124, 0, 0, 0, 80,
	44, 59, 101, 62, 68, 93, 126, 439, 97, 48,
	118, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 375, 379, 373, 374, 426, 427,
	472, 473, 474, 450, 370, 0, 377, 378, 0, 457,
	60, 139, 140, 429, 35, 41, 65, 479, 125, 0,
	92, 54, 119, 0, 0, 404, 355, 408, 0, 0,
	0, 0, 0, 0, 0, 367, 368, 98, 0, 412,
	407, 434, 436, 445, 453, 0, 384, 418, 0, 45,
	467, 456, 0, 415, 469, 385, 403, 477, 405, 406,
	442, 364, 425, 83, 400, 382, 36, 388, 357, 395,
	358, 386, 417, 52, 383, 0, 458, 428, 63, 137,
	138, 475, 66, 433, 0, 106, 76, 0, 0, 420,
	460, 423, 451, 414, 443, 372, 432, 470, 401, 438,
	471, 0, 0, 0, 32, 0, 758, 0, 759, 0,
	0, 0, 0, 0, 46, 0, 437, 465, 397, 480,
	0, 441, 356, 435, 0, 362, 365, 476, 463, 392,
	393, 0, 0, 0, 0, 0, 0, 0, 419, 424,
	448, 411, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 389, 0, 431, 0, 0, 0,
	369, 363, 0, 416, 0, 0, 0, 371, 0, 390,
	449, 0, 353, 454, 461, 413, 72, 123, 464, 410,
	409, 90, 0, 49, 0, 108, 55, 402, 64, 446,
	478, 468, 421, 459, 387, 396, 0, 394, 96, 84,
	117, 430, 444, 94, 67, 111, 91, 116, 466, 110,
	122, 99, 42, 81, 34, 89, 95, 0, 50, 0,
	130, 131, 132, 133, 134, 135, 136, 361, 354, 391,
	452, 455, 376, 440, 366, 398, 447, 399, 422, 381,
	0, 0, 0, 0, 0, 0, 0, 105, 104, 37,
	109, 115, 47, 100, 0, 0, 0, 107, 74, 0,
	61, 102, 0, 38, 0, 0, 51, 88, 0, 0,
	0, 0, 0, 0, 112, 0, 127, 0, 0, 0,
	0, 0, 121, 40, 43, 0, 0, 0, 0, 120,
	0, 114, 75, 71, 0, 39, 113, 73, 70, 0,
	0, 53, 56, 86, 69, 87, 57, 78, 77, 79,
	0, 0, 82, 58, 0, 0, 0, 359, 0, 0,
	0, 128, 129, 360, 380, 462, 124, 0, 0, 0,
	80, 44, 59, 101, 62, 68, 93, 126, 439, 97,
	48, 118, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 375, 379, 373, 374, 426,
	427, 472, 473, 474, 450, 370, 0, 377, 378, 0,
	457, 60, 139, 140, 429, 35, 41, 65, 479, 125,
	0, 92, 54, 119, 0, 0, 404, 355, 408, 0,
	0, 0, 0, 0, 0, 0, 367, 368, 98, 0,
	412, 407, 434, 436, 445, 453, 0, 384, 418, 0,
	45, 467, 456, 0, 415, 469, 385, 403, 477, 405,
	406, 442, 364, 425, 83, 400, 382, 36, 388, 357,
	395, 358, 386, 417, 52, 383, 0, 458, 428, 63,
	137, 138, 475, 66, 433, 0, 106, 76, 0, 0,
	420, 460, 423, 451, 414, 443, 372, 432, 470, 401,
	438, 471, 0, 0, 0, 32, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 46, 0, 437, 465, 397,
	480, 0, 441, 356, 435, 0, 362, 365, 476, 463,
	392, 393, 0, 0, 0, 0, 0, 0, 0, 419,
	424, 448, 411, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 389, 0, 431, 0, 0,
	0, 369, 363, 0, 416, 0, 0, 0, 371, 0,
	390, 449, 0, 353, 454, 461, 413, 72, 123, 464,
	410, 409, 90, 0, 49, 0, 108, 55, 402, 64,
	446, 478, 468, 421, 459, 387, 396, 0, 394, 96,
	84, 117, 430, 444, 94, 67, 111, 91, 116, 466,
	110, 122, 99, 42, 81, 34, 89, 95, 0, 50,
	0, 130, 131, 132, 133, 134, 135, 136, 361, 354,
	391, 452, 455, 376, 440, 366, 398, 447, 399, 422,
	381, 0, 0, 0, 0, 0, 0, 0, 105, 104,
	37, 109, 115, 47, 100, 0, 0, 0, 107, 74,
	0, 61, 102, 0, 38, 0, 0, 51, 88, 0,
	0, 0, 0, 0, 0, 112, 0, 127, 0, 0,
	0, 0, 0, 121, 40, 1474, 0, 0, 0, 0,
	120, 0, 114, 75, 71, 0, 39, 113, 73, 70,
	0, 0, 53, 56, 86, 69, 87, 57, 78, 77,
	79, 0, 0, 82, 58, 0, 0, 0, 359, 0,
	0, 0, 128, 129, 360, 380, 462, 124, 0, 0,
	0, 1475, 1473, 59, 101, 62, 68, 93, 126, 439,
	97, 48, 118, 103, 1471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 375, 379, 373, 374,
	426, 427, 472, 473, 474, 450, 370, 0, 377, 378,
	0, 457, 60, 139, 140, 429, 35, 41, 65, 479,
	125, 0, 92, 54, 119, 0, 0, 404, 355, 408,
	0, 0, 0, 0, 0, 0, 0, 367, 368, 98,
	0, 412, 407, 434, 436, 445, 453, 0, 384, 418,
	0, 45, 467, 456, 0, 415, 469, 385, 403, 477,
	405, 406, 442, 364, 425, 83, 400, 382, 36, 388,
	357, 395, 358, 386, 417, 52, 383, 0, 458, 428,
	63, 137, 138, 475, 66, 433, 0, 106, 76, 0,
	0, 420, 460, 423, 451, 414, 443, 372, 432, 470,
	401, 438, 471, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 46, 0, 437, 465,
	397, 480, 0, 441, 356, 435, 0, 362, 365, 476,
	463, 392, 393, 0, 0, 0, 0, 0, 0, 0,
	419, 424, 448, 411, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 389, 0, 431, 0,
	0, 0, 369, 363, 0, 416, 0, 0, 0, 371,
	0, 390, 449, 0, 353, 454, 461, 413, 72, 123,
	464, 410, 409, 90, 0, 49, 0, 108, 55, 402,
	64, 446, 478, 468, 421, 459, 387, 396, 0, 394,
	96, 84, 117, 430, 444, 94, 67, 111, 91, 116,
	466, 110, 122, 99, 42, 81, 34, 89, 95, 0,
	50, 0, 130, 131, 132, 133, 134, 135, 136, 361,
	354, 391, 452, 455, 376, 440, 366, 398, 447, 399,
	422, 381, 0, 0, 0, 0, 0, 0, 0, 105,
	104, 37, 109, 1589, 47, 100, 0, 0, 0, 107,
	74, 0, 61, 102, 0, 38, 0, 0, 51, 88,
	0, 0, 0, 0, 0, 0, 112, 0, 127, 0,
	0, 0, 0, 0, 121, 40, 1474, 0, 0, 0,
	0, 120, 0, 114, 75, 71, 0, 39, 113, 73,
	70, 0, 0, 53, 56, 86, 69, 87, 57, 78,
	77, 79, 0, 0, 82, 58, 0, 0, 0, 359,
	0, 0, 0, 128, 129, 360, 380, 462, 124, 0,
	0, 0, 1475, 1473, 59, 101, 62, 68, 93, 126,
	439, 97, 48, 118, 103, 1471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 375, 379, 373,
	374, 426, 427, 472, 473, 474, 450, 370, 0, 377,
	378, 0, 457, 60, 139, 140, 429, 35, 41, 65,
	479, 125, 0, 92, 54, 119, 0, 0, 404, 355,
	408, 0, 0, 0, 0, 0, 0, 0, 367, 368,
	98, 0, 412, 407, 434, 436, 445, 453, 0, 384,
	418, 0, 45, 467, 456, 0, 415, 469, 385, 403,
	477, 405, 406, 442, 364, 425, 83, 400, 382, 36,
	388, 357, 395, 358, 386, 417, 52, 383, 0, 458,
	428, 63, 137, 138, 475, 66, 433, 0, 106, 76,
	0, 0, 420, 460, 423, 451, 414, 443, 372, 432,
	470, 401, 438, 471, 0, 0, 0, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 0, 437,
	465, 397, 480, 0, 441, 356, 435, 0, 362, 365,
	476, 463, 392, 393, 0, 0, 0, 0, 0, 0,
	0, 419, 424, 448, 411, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1533, 0, 389, 0, 431,
	0, 0, 0, 369, 363, 0, 416, 0, 0, 0,
	371, 0, 390, 449, 0, 353, 454, 461, 413, 72,
	123, 464, 410, 409, 90, 0, 49, 0, 108, 55,
	402, 64, 446, 478, 468, 421, 459, 387, 396, 0,
	394, 96, 84, 117, 430, 444, 94, 67, 111, 91,
	116, 466, 110, 122, 99, 42, 81, 34, 89, 95,
	0, 50, 0, 130, 131, 132, 133, 134, 135, 136,
	361, 354, 391, 452, 455, 376, 440, 366, 398, 447,
	399, 422, 381, 0, 0, 0, 0, 0, 0, 0,
	105, 104, 37, 109, 115, 47, 100, 0, 0, 0,
	107, 74, 0, 61, 102, 0, 38, 0, 0, 51,
	88, 0, 0, 0, 0, 0, 0, 112, 0, 127,
	0, 0, 0, 0, 0, 121, 40, 43, 0, 0,
	0, 0, 120, 0, 114, 75, 71, 0, 39, 113,
	73, 70, 0, 0, 53, 56, 86, 69, 87, 57,
	78, 77, 79, 0, 0, 82, 58, 0, 0, 0,
	359, 0, 0, 0, 128, 129, 360, 380, 462, 124,
	0, 0, 0, 80, 44, 59, 101, 62, 68, 93,
	126, 439, 97, 48, 118, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 375, 379,
	373, 374, 426, 427, 472, 473, 474, 450, 370, 0,
	377, 378, 0, 457, 60, 139, 140, 429, 35, 41,
	65, 479, 125, 0, 92, 54, 119, 0, 0, 404,
	355, 408, 0, 0, 0, 0, 0, 0, 0, 367,
	368, 98, 0, 412, 407, 434, 436, 445, 453, 0,
	384, 418, 0, 45, 467, 456, 0, 415, 469, 385,
	403, 477, 405, 406, 442, 364, 425, 83, 400, 382,
	36, 388, 357, 395, 358, 386, 417, 52, 383, 0,
	458, 428, 63, 137, 138, 475, 66, 433, 0, 106,
	76, 0, 0, 420, 460, 423, 451, 414, 443, 372,
	432, 470, 401, 438, 471, 0, 0, 0, 32, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 46, 0,
	437, 465, 397, 480, 0, 441, 356, 435, 0, 362,
	365, 476, 463, 392, 393, 0, 0, 0, 0, 0,
	0, 0, 419, 424, 448, 411, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 389, 0,
	431, 0, 0, 0, 369, 363, 0, 416, 0, 0,
	0, 371, 0, 390, 449, 0, 353, 454, 461, 413,
	72, 123, 464, 410, 409, 90, 0, 49, 0, 108,
	55, 402, 64, 446, 478, 468, 421, 459, 387, 396,
	0, 394, 96, 84, 117, 430, 444, 94, 67, 111,
	91, 116, 466, 110, 122, 99, 42, 81, 34, 89,
	95, 0, 50, 0, 130, 131, 132, 133, 134, 135,
	136, 361, 354, 391, 452, 455, 376, 440, 366, 398,
	447, 399, 422, 381, 0, 0, 0, 0, 0, 0,
	0, 105, 104, 37, 109, 1466, 47, 100, 0, 0,
	0, 107, 74, 0, 61, 102, 0, 38, 0, 0,
	51, 88, 0, 0, 0, 0, 0, 0, 112, 0,
	127, 0, 0, 0, 0, 0, 121, 40, 1474, 0,
	0, 0, 0, 120, 0, 114, 75, 71, 0, 39,
	113, 73, 70, 0, 0, 53, 56, 86, 69, 87,
	57, 78, 77, 79, 0, 0, 82, 58, 0, 0,
	0, 359, 0, 0, 0, 128, 129, 360, 380, 462,
	124, 0, 0, 0, 1475, 1473, 1469, 1468, 62, 68,
	93, 126, 439, 97, 48, 118, 103, 1471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 375,
	379, 373, 374, 426, 427, 472, 473, 474, 450, 370,
	0, 377, 378, 0, 457, 60, 139, 140, 429, 35,
	41, 65, 479, 125, 0, 92, 54, 119, 0, 0,
	404, 355, 408, 0, 0, 0, 0, 0, 0, 0,
	367, 368, 98, 0, 412, 407, 434, 436, 445, 453,
	0, 384, 418, 0, 45, 467, 456, 0, 415, 469,
	385, 403, 477, 405, 406, 442, 364, 425, 83, 400,
	382, 36, 388, 357, 395, 358, 386, 417, 52, 383,
	0, 458, 428, 63, 137, 138, 475, 66, 433, 0,
	106, 76, 0, 0, 420, 460, 423, 451, 414, 443,
	372, 432, 470, 401, 438, 471, 0, 0, 0, 539,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 46,
	0, 437, 465, 397, 480, 0, 441, 356, 435, 0,
	362, 365, 476, 463, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 419, 424, 448, 411, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 389,
	0, 431, 0, 0, 0, 369, 363, 0, 416, 0,
	0, 0, 371, 0, 390, 449, 0, 353, 454, 461,
	413, 72, 123, 464, 410, 409, 90, 0, 49, 0,
	108, 55, 402, 64, 446, 478, 468, 421, 459, 387,
	396, 0, 394, 96, 84, 117, 430, 444, 94, 67,
	111, 91, 116, 466, 110, 122, 99, 42, 81, 34,
	89, 95, 0, 50, 0, 130, 131, 132, 133, 134,
	135, 136, 361, 354, 391, 452, 455, 376, 440, 366,
	398, 447, 399, 422, 381, 0, 0, 0, 0, 0,
	0, 0, 105, 104, 37, 109, 115, 47, 100, 0,
	0, 0, 107, 74, 0, 61, 102, 0, 38, 0,
	0, 51, 88, 0, 0, 0, 0, 0, 0, 112,
	0, 127, 0, 0, 0, 0, 0, 121, 40, 43,
	0, 0, 0, 0, 120, 0, 114, 75, 71, 0,
	39, 113, 73, 70, 0, 0, 53, 56, 86, 69,
	87, 57, 78, 77, 79, 0, 0, 82, 58, 0,
	0, 0, 359, 0, 0, 0, 128, 129, 360, 380,
	462, 124, 0, 0, 0, 80, 44, 59, 101, 62,
	68, 93, 126, 439, 97, 48, 118, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	375, 379, 373, 374, 426, 427, 472, 473, 474, 450,
	370, 0, 377, 378, 0, 457, 60, 139, 140, 429,
	35, 41, 65, 479, 125, 0, 92, 54, 119, 0,
	0, 404, 355, 408, 0, 0, 0, 0, 0, 0,
	0, 367, 368, 98, 0, 412, 407, 434, 436, 445,
	453, 0, 384, 418, 0, 45, 467, 456, 0, 415,
	469, 385, 403, 477, 405, 406, 442, 364, 425, 83,
	400, 382, 36, 388, 357, 395, 358, 386, 417, 52,
	383, 0, 458, 428, 63, 137, 138, 475, 66, 433,
	0, 106, 76, 0, 0, 420, 460, 423, 451, 414,
	443, 372, 432, 470, 401, 438, 471, 0, 0, 0,
	32, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	46, 0, 437, 465, 397, 480, 0, 441, 356, 435,
	0, 362, 365, 476, 463, 392, 393, 594, 0, 0,
	0, 0, 0, 0, 419, 424, 448, 411, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	389, 0, 431, 0, 0, 0, 369, 363, 0, 416,
	0, 0, 0, 371, 0, 390, 449, 0, 353, 454,
	461, 413, 72, 123, 464, 410, 409, 90, 0, 49,
	0, 108, 55, 402, 64, 446, 478, 468, 421, 459,
	387, 396, 0, 394, 96, 84, 117, 430, 444, 94,
	67, 111, 91, 116, 466, 110, 122, 99, 42, 81,
	34, 89, 95, 0, 50, 0, 130, 131, 132, 133,
	134, 135, 136, 361, 354, 391, 452, 455, 376, 440,
	366, 398, 447, 399, 422, 381, 0, 0, 0, 0,
	0, 0, 0, 105, 104, 37, 109, 115, 47, 100,
	0, 0, 0, 107, 74, 0, 61, 102, 0, 38,
	0, 0, 51, 88, 0, 0, 0, 0, 0, 0,
	112, 0, 127, 0, 0, 0, 0, 0, 121, 40,
	43, 0, 0, 0, 0, 120, 0, 114, 75, 71,
	0, 39, 113, 73, 70, 0, 0, 53, 56, 86,
	69, 87, 57, 78, 77, 79, 0, 0, 82, 58,
	0, 0, 0, 359, 0, 0, 0, 128, 129, 360,
	380, 462, 124, 0, 0, 0, 80, 44, 59, 101,
	62, 68, 93, 126, 439, 97, 48, 118, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 375, 379, 373, 374, 426, 427, 472, 473, 474,
	450, 370, 0, 377, 378, 0, 457, 60, 139, 140,
	429, 35, 41, 65, 479, 125, 0, 92, 54, 119,
	0, 0, 404, 355, 408, 0, 0, 0, 0, 0,
	0, 0, 367, 368, 98, 0, 412, 407, 434, 436,
	445, 453, 0, 384, 418, 0, 45, 467, 456, 0,
	415, 469, 385, 403, 477, 405, 406, 442, 364, 425,
	83, 400, 382, 36, 388, 357, 395, 358, 386, 417,
	52, 383, 0, 458, 428, 63, 137, 138, 475, 66,
	433, 0, 106, 76, 0, 0, 420, 460, 423, 451,
	414, 443, 372, 432, 470, 401, 438, 471, 0, 0,
	0, 152, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 46, 0, 437, 465, 397, 480, 0, 441, 356,
	435, 0, 362, 365, 476, 463, 392, 393, 0, 0,
	0, 0, 0, 0, 0, 419, 424, 448, 411, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 389, 0, 431, 0, 0, 0, 369, 363, 0,
	416, 0, 0, 0, 371, 0, 390, 449, 0, 353,
	454, 461, 413, 72, 123, 464, 410, 409, 90, 0,
	49, 0, 108, 55, 402, 64, 446, 478, 468, 421,
	459, 387, 396, 0, 394, 96, 84, 117, 430, 444,
	94, 67, 111, 91, 116, 466, 110, 122, 99, 42,
	81, 34, 89, 95, 0, 50, 0, 130, 131, 132,
	133, 134, 135, 136, 361, 354, 391, 452, 455, 376,
	440, 366, 398, 447, 399, 422, 381, 0, 0, 0,
	0, 0, 0, 0, 105, 104, 37, 109, 115, 47,
	100, 0, 0, 0, 107, 74, 0, 61, 102, 0,
	38, 0, 0, 51, 88, 0, 0, 0, 0, 0,
	0, 112, 0, 127, 0, 0, 0, 0, 0, 121,
	40, 43, 0, 0, 0, 0, 120, 0, 114, 75,
	71, 0, 39, 113, 73, 70, 0, 0, 53, 56,
	86, 69, 87, 57, 78, 77, 79, 0, 0, 82,
	58, 0, 0, 0, 359, 0, 0, 0, 128, 129,
	360, 380, 462, 124, 0, 0, 0, 80, 44, 59,
	101, 62, 68, 93, 126, 439, 97, 48, 118, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 375, 379, 373, 374, 426, 427, 472, 473,
	474, 450, 370, 0, 377, 378, 0, 457, 60, 139,
	140, 429, 35, 41, 65, 479, 125, 0, 92, 54,
	119, 0, 0, 404, 355, 408, 0, 0, 0, 0,
	0, 0, 0, 367, 368, 98, 0, 412, 407, 434,
	436, 445, 453, 0, 384, 418, 0, 45, 467, 456,
	0, 415, 469, 385, 403, 477, 405, 406, 442, 364,
	425, 83, 400, 382, 36, 388, 357, 395, 358, 386,
	417, 52, 383, 0, 458, 428, 63, 137, 138, 475,
	66, 433, 0, 106, 76, 0, 0, 420, 460, 423,
	451, 414, 443, 372, 432, 470, 401, 438, 471, 0,
	0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 46, 0, 437, 465, 397, 480, 0, 441,
	356, 435, 0, 362, 365, 476, 463, 392, 393, 0,
	0, 0, 0, 0, 0, 0, 419, 424, 448, 411,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 389, 0, 431, 0, 0, 0, 369, 363,
	0, 416, 0, 0, 0, 371, 0, 390, 449, 0,
	353, 454, 461, 413, 72, 123, 464, 410, 409, 90,
	0, 49, 0, 108, 55, 402, 64, 446, 478, 468,
	421, 459, 387, 396, 0, 394, 96, 84, 117, 430,
	444, 94, 67, 111, 91, 116, 466, 110, 122, 99,
	42, 81, 34, 89, 95, 0, 50, 0, 130, 131,
	132, 133, 134, 135, 136, 361, 354, 391, 452, 455,
	376, 440, 366, 398, 447, 399, 422, 381, 0, 0,
	0, 0, 0, 0, 0, 105, 104, 37, 109, 115,
	47, 100, 0, 0, 0, 107, 74, 0, 61, 102,
	0, 38, 0, 0, 51, 88, 0, 0, 0, 0,
	0, 0, 112, 0, 127, 0, 0, 0, 0, 0,
	121, 40, 43, 0, 0, 0, 0, 120, 0, 114,
	75, 71, 0, 39, 113, 73, 70, 0, 0, 53,
	56, 86, 69, 87, 57, 78, 77, 79, 0, 0,
	82, 58, 0, 0, 0, 359, 0, 0, 0, 128,
	129, 360, 380, 462, 124, 0, 0, 0, 80, 44,
	59, 101, 62, 68, 93, 126, 439, 97, 48, 118,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 375, 379, 373, 374, 426, 427, 472,
	473, 474, 450, 370, 0, 377, 378, 0, 457, 60,
	139, 140, 429, 35, 41, 65, 479, 125, 0, 92,
	54, 119, 0, 0, 404, 355, 408, 0, 0, 0,
	0, 0, 0, 0, 367, 368, 98, 0, 412, 407,
	434, 436, 445, 453, 83, 384, 418, 36, 45, 0,
	627, 0, 0, 0, 52, 626, 0, 0, 0, 63,
	137, 138, 669, 66, 670, 0, 106, 76, 0, 0,
	0, 0, 660, 661, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 0, 0, 539, 649, 646, 647, 651,
	652, 653, 654, 0, 0, 46, 650, 655, 535, 536,
	0, 0, 0, 0, 624, 639, 0, 668, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 636, 637, 0, 0, 0, 0, 682, 0, 638,
	0, 0, 1041, 635, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 123, 0,
	0, 680, 90, 0, 49, 0, 108, 55, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 1043, 0, 96,
	84, 117, 0, 85, 94, 67, 111, 91, 116, 0,
	110, 122, 99, 42, 81, 34, 89, 95, 0, 50,
	0, 130, 131, 132, 133, 134, 135, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 104,
	37, 109, 115, 47, 100, 1052, 1058, 1056, 107, 74,
	1053, 61, 102, 1051, 38, 0, 1060, 51, 88, 1059,
	1045, 1055, 1057, 1054, 1049, 112, 1044, 127, 1062, 1061,
	1063, 1042, 1065, 121, 40, 43, 1069, 1066, 1068, 1067,
	120, 1064, 114, 75, 71, 0, 39, 113, 73, 70,
	1046, 1047, 53, 56, 86, 69, 87, 57, 78, 77,
	79, 684, 0, 82, 58, 0, 0, 0, 0, 0,
	1048, 1050, 128, 129, 0, 0, 0, 124, 0, 0,
	0, 80, 44, 59, 101, 62, 68, 93, 126, 0,
	97, 48, 118, 103, 657, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 671, 681, 677, 678,
	675, 676, 674, 673, 672, 683, 662, 663, 664, 665,
	667, 0, 60, 139, 140, 666, 35, 41, 65, 0,
	125, 0, 92, 54, 119, 83, 0, 0, 36, 0,
	0, 627, 0, 0, 0, 52, 626, 0, 0, 98,
	63, 137, 138, 669, 66, 670, 0, 106, 76, 0,
	679, 45, 0, 660, 661, 0, 0, 0, 0, 0,
	0, 1676, 0, 620, 0, 0, 539, 649, 646, 647,
	651, 652, 653, 654, 0, 0, 46, 650, 655, 535,
	536, 1677, 0, 0, 0, 624, 639, 0, 668, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 636, 637, 0, 0, 0, 0, 682, 0,
	638, 0, 0, 634, 635, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 123,
	0, 0, 680, 90, 0, 49, 0, 108, 55, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 84, 117, 0, 85, 94, 67, 111, 91, 116,
	0, 110, 122, 99, 42, 81, 34, 89, 95, 0,
	50, 0, 130, 131, 132, 133, 134, 135, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	104, 37, 109, 115, 47, 100, 0, 0, 0, 107,
	74, 0, 61, 102, 0, 38, 0, 0, 51, 88,
	0, 0, 0, 0, 0, 0, 112, 0, 127, 0,
	0, 0, 0, 0, 121, 40, 43, 0, 0, 0,
	0, 120, 0, 114, 75, 71, 0, 39, 113, 73,
	70, 0, 0, 53, 56, 86, 69, 87, 57, 78,
	77, 79, 684, 0, 82, 58, 0, 0, 0, 0,
	0, 0, 0, 128, 129, 0, 0, 0, 124, 0,
	0, 0, 80, 44, 59, 101, 62, 68, 93, 126,
	0, 97, 48, 118, 103, 657, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 671, 681, 677,
	678, 675, 676, 674, 673, 672, 683, 662, 663, 664,
	665, 667, 0, 60, 139, 140, 666, 35, 41, 65,
	0, 125, 0, 92, 54, 119, 83, 0, 0, 36,
	902, 0, 627, 0, 0, 0, 52, 626, 0, 0,
	98, 63, 137, 138, 669, 66, 670, 0, 106, 76,
	0, 679, 45, 0, 660, 661, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 539, 649, 646,
	647, 651, 652, 653, 654, 0, 0, 46, 650, 655,
	535, 536, 0, 0, 0, 0, 624, 639, 0, 668,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 636, 637, 907, 0, 0, 0, 682,
	0, 638, 0, 0, 634, 635, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	123, 0, 0, 680, 90, 0, 49, 0, 108, 55,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 84, 117, 0, 85, 94, 67, 111, 91,
	116, 0, 110, 122, 99, 42, 81, 34, 89, 95,
	0, 50, 0, 130, 131, 132, 133, 134, 135, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 104, 37, 109, 115, 47, 100, 0, 0, 0,
	107, 74, 0, 61, 102, 0, 38, 0, 0, 51,
	88, 0, 0, 0, 0, 0, 0, 112, 0, 127,
	0, 0, 0, 0, 0, 121, 40, 43, 0, 0,
	0, 0, 120, 0, 114, 75, 71, 0, 39, 113,
	73, 70, 0, 0, 53, 56, 86, 69, 87, 57,
	78, 77, 79, 684, 0, 82, 58, 0, 0, 0,
	0, 0, 0, 0, 128, 129, 0, 0, 0, 124,
	0, 0, 0, 80, 44, 59, 101, 62, 68, 93,
	126, 0, 97, 48, 118, 103, 657, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 671, 681,
	677, 678, 675, 676, 674, 673, 672, 683, 662, 663,
	664, 665, 667, 0, 60, 139, 140, 666, 35, 41,
	65, 0, 125, 0, 92, 54, 119, 83, 0, 0,
	36, 0, 0, 627, 0, 0, 0, 52, 626, 0,
	0, 98, 63, 137, 138, 669, 66, 670, 0, 106,
	76, 0, 679, 45, 0, 660, 661, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 897, 539, 649,
	646, 647, 651, 652, 653, 654, 0, 0, 46, 650,
	655, 535, 536, 0, 0, 0, 0, 624, 639, 0,
	668, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 636, 637, 0, 0, 0, 0,
	682, 0, 638, 0, 0, 634, 635, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 123, 0, 0, 680, 90, 0, 49, 0, 108,
	55, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 84, 117, 0, 85, 94, 67, 111,
	91, 116, 0, 110, 122, 99, 42, 81, 34, 89,
	95, 0, 50, 0, 130, 131, 132, 133, 134, 135,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 104, 37, 109, 115, 47, 100, 0, 0,
	0, 107, 74, 0, 61, 102, 0, 38, 0, 0,
	51, 88, 0, 0, 0, 0, 0, 0, 112, 0,
	127, 0, 0, 0, 0, 0, 121, 40, 43, 0,
	0, 0, 0, 120, 0, 114, 75, 71, 0, 39,
	113, 73, 70, 0, 0, 53, 56, 86, 69, 87,
	57, 78, 77, 79, 684, 0, 82, 58, 0, 0,
	0, 0, 0, 0, 0, 128, 129, 0, 0, 0,
	124, 0, 0, 0, 80, 44, 59, 101, 62, 68,
	93, 126, 0, 97, 48, 118, 103, 657, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 671,
	681, 677, 678, 675, 676, 674, 673, 672, 683, 662,
	663, 664, 665, 667, 0, 60, 139, 140, 666, 35,
	41, 65, 0, 125, 0, 92, 54, 119, 83, 0,
	0, 36, 0, 0, 627, 0, 0, 0, 52, 626,
	0, 0, 98, 63, 137, 138, 669, 66, 670, 0,
	106, 76, 0, 679, 45, 0, 660, 661, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 539,
	649, 646, 647, 651, 652, 653, 654, 0, 0, 46,
	650, 655, 535, 536, 0, 0, 0, 0, 624, 639,
	0, 668, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 636, 637, 907, 0, 0,
	0, 682, 0, 638, 0, 0, 634, 635, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 123, 0, 0, 680, 90, 0, 49, 0,
	108, 55, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 84, 117, 0, 85, 94, 67,
	111, 91, 116, 0, 110, 122, 99, 42, 81, 34,
	89, 95, 0, 50, 0, 130, 131, 132, 133, 134,
	135, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 104, 37, 109, 115, 47, 100, 0,
	0, 0, 107, 74, 0, 61, 102, 0, 38, 0,
	0, 51, 88, 0, 0, 0, 0, 0, 0, 112,
	0, 127, 0, 0, 0, 0, 0, 121, 40, 43,
	0, 0, 0, 0, 120, 0, 114, 75, 71, 0,
	39, 113, 73, 70, 0, 0, 53, 56, 86, 69,
	87, 57, 78, 77, 79, 684, 0, 82, 58, 0,
	0, 0, 0, 0, 0, 0, 128, 129, 0, 0,
	0, 124, 0, 0, 0, 80, 44, 59, 101, 62,
	68, 93, 126, 0, 97, 48, 118, 103, 657, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	671, 681, 677, 678, 675, 676, 674, 673, 672, 683,
	662, 663, 664, 665, 667, 0, 60, 139, 140, 666,
	35, 41, 65, 0, 125, 0, 92, 54, 119, 734,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 0, 98, 36, 0, 0, 627, 0, 0,
	0, 52, 626, 0, 679, 45, 63, 137, 138, 669,
	66, 670, 0, 106, 76, 0, 0, 0, 0, 660,
	661, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 539, 649, 646, 647, 651, 652, 653, 654,
	0, 0, 46, 650, 655, 535, 536, 0, 0, 0,
	0, 624, 639, 0, 668, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 636, 637,
	0, 0, 0, 0, 682, 0, 638, 0, 0, 634,
	635, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 123, 0, 0, 680, 90,
	0, 49, 0, 108, 55, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 84, 117, 0,
	85, 94, 67, 111, 91, 116, 0, 110, 122, 99,
	42, 81, 34, 89, 95, 0, 50, 0, 130, 131,
	132, 133, 134, 135, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 104, 37, 109, 115,
	47, 100, 0, 0, 0, 107, 74, 0, 61, 102,
	0, 38, 0, 0, 51, 88, 0, 0, 0, 0,
	0, 0, 112, 0, 127, 0, 0, 0, 0, 0,
	121, 40, 43, 0, 0, 0, 0, 120, 0, 114,
	75, 71, 0, 39, 113, 73, 70, 0, 0, 53,
	56, 86, 69, 87, 57, 78, 77, 79, 684, 0,
	82, 58, 0, 0, 0, 0, 0, 0, 0, 128,
	129, 0, 0, 0, 124, 0, 0, 0, 80, 44,
	59, 101, 62, 68, 93, 126, 0, 97, 48, 118,
	103, 657, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 671, 681, 677, 678, 675, 676, 674,
	673, 672, 683, 662, 663, 664, 665, 667, 0, 60,
	139, 140, 666, 35, 41, 65, 0, 125, 0, 92,
	54, 119, 83, 0, 0, 36, 0, 0, 627, 0,
	0, 0, 52, 626, 0, 0, 98, 63, 137, 138,
	669, 66, 670, 0, 106, 76, 0, 679, 45, 0,
	660, 661, 0, 0, 0, 0, 0, 0, 0, 0,
	620, 0, 0, 539, 649, 646, 647, 651, 652, 653,
	654, 0, 0, 46, 650, 655, 535, 536, 0, 0,
	0, 0, 624, 639, 0, 668, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 636,
	637, 0, 0, 0, 0, 682, 0, 638, 0, 0,
	634, 635, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 123, 0, 0, 680,
	90, 0, 49, 0, 108, 55, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 84, 117,
	0, 85, 94, 67, 111, 91, 116, 0, 110, 122,
	99, 42, 81, 34, 89, 95, 0, 50, 0, 130,
	131, 132, 133, 134, 135, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 104, 37, 109,
	115, 47, 100, 0, 0, 0, 107, 74, 0, 61,
	102, 0, 38, 0, 0, 51, 88, 0, 0, 0,
	0, 0, 0, 112, 0, 127, 0, 0, 0, 0,
	0, 121, 40, 43, 0, 0, 0, 0, 120, 0,
	114, 75, 71, 0, 39, 113, 73, 70, 0, 0,
	53, 56, 86, 69, 87, 57, 78, 77, 79, 684,
	0, 82, 58, 0, 0, 0, 0, 0, 0, 0,
	128, 129, 0, 0, 0, 124, 0, 0, 0, 80,
	44, 59, 101, 62, 68, 93, 126, 0, 97, 48,
	118, 103, 657, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 671, 681, 677, 678, 675, 676,
	674, 673, 672, 683, 662, 663, 664, 665, 667, 0,
	60, 139, 140, 666, 35, 41, 65, 0, 125, 0,
	92, 54, 119, 83, 0, 0, 36, 0, 0, 627,
	0, 0, 0, 52, 0, 0, 0, 98, 63, 137,
	138, 669, 66, 670, 0, 106, 76, 0, 679, 45,
	0, 660, 661, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 539, 649, 646, 647, 651, 652,
	653, 654, 0, 0, 46, 650, 655, 535, 536, 0,
	0, 0, 0, 0, 639, 0, 668, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	636, 637, 0, 0, 0, 0, 682, 0, 638, 0,
	0, 634, 635, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 123, 0, 0,
	680, 90, 0, 49, 0, 108, 55, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 84,
	117, 0, 85, 94, 67, 111, 91, 116, 0, 110,
	122, 99, 42, 81, 34, 89, 95, 0, 50, 0,
	130, 131, 132, 133, 134, 135, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 104, 37,
	109, 115, 47, 100, 0, 0, 0, 107, 74, 0,
	61, 102, 0, 38, 0, 0, 51, 88, 0, 0,
	0, 0, 0, 0, 112, 0, 127, 0, 0, 0,
	0, 0, 121, 40, 43, 0, 0, 0, 0, 120,
	0, 114, 75, 71, 0, 39, 113, 73, 70, 0,
	0, 53, 56, 86, 69, 87, 57, 78, 77, 79,
	684, 0, 82, 58, 0, 0, 0, 0, 0, 0,
	0, 128, 129, 0, 0, 0, 124, 0, 0, 0,
	80, 44, 59, 101, 62, 68, 93, 126, 0, 97,
	48, 118, 103, 657, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 671, 681, 677, 678, 675,
	676, 674, 673, 672, 683, 662, 663, 664, 665, 667,
	0, 60, 139, 140, 666, 35, 41, 65, 0, 125,
	0, 92, 54, 119, 83, 0, 0, 36, 0, 0,
	0, 0, 0, 0, 52, 0, 0, 0, 98, 63,
	137, 138, 669, 66, 670, 0, 106, 76, 0, 679,
	45, 0, 660, 661, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 0, 0, 539, 649, 646, 647, 651,
	652, 653, 654, 0, 0, 46, 650, 655, 535, 536,
	0, 0, 0, 0, 0, 639, 0, 668, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 636, 637, 0, 0, 0, 0, 682, 0, 638,
	0, 0, 634, 635, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 123, 0,
	0, 680, 90, 0, 49, 0, 108, 55, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	84, 117, 0, 85, 94, 67, 111, 91, 116, 0,
	110, 122, 99, 42, 81, 34, 89, 95, 0, 50,
	0, 130, 131, 132, 133, 134, 135, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 104,
	37, 109, 115, 47, 100, 0, 0, 0, 107, 74,
	0, 61, 102, 0, 38, 0, 0, 51, 88, 0,
	0, 0, 0, 0, 0, 112, 0, 127, 0, 0,
	0, 0, 0, 121, 40, 43, 0, 0, 0, 0,
	120, 0, 114, 75, 71, 0, 39, 113, 73, 70,
	0, 0, 53, 56, 86, 69, 87, 57, 78, 77,
	79, 684, 0, 82, 58, 0, 0, 0, 0, 0,
	0, 0, 128, 129, 0, 0, 0, 124, 0, 0,
	0, 80, 44, 59, 101, 62, 68, 93, 126, 0,
	97, 48, 118, 103, 657, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 671, 681, 677, 678,
	675, 676, 674, 673, 672, 683, 662, 663, 664, 665,
	667, 0, 60, 139, 140, 666, 35, 41, 65, 0,
	125, 0, 92, 54, 119, 83, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 52, 0, 0, 0, 98,
	63, 137, 138, 669, 66, 670, 0, 106, 76, 0,
	679, 45, 0, 660, 661, 0, 0, 0, 0, 0,
	0, 0, 0, 922, 0, 0, 539, 649, 646, 647,
	651, 652, 653, 654, 0, 0, 46, 650, 655, 535,
	536, 0, 0, 0, 0, 0, 639, 0, 668, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 636, 637, 0, 0, 0, 0, 682, 0,
	638, 0, 0, 634, 635, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 123,
	0, 0, 680, 90, 0, 49, 0, 108, 55, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 84, 117, 0, 85, 94, 67, 111, 91, 116,
	0, 110, 122, 99, 42, 81, 34, 89, 95, 0,
	50, 0, 130, 131, 132, 133, 134, 135, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	104, 37, 109, 115, 47, 100, 0, 0, 0, 107,
	74, 0, 61, 102, 0, 38, 0, 0, 51, 88,
	0, 0, 0, 0, 0, 0, 112, 0, 127, 0,
	0, 0, 0, 0, 121, 40, 43, 0, 0, 0,
	0, 120, 0, 114, 75, 71, 0, 39, 113, 73,
	70, 0, 0, 53, 56, 86, 69, 87, 57, 78,
	77, 79, 684, 0, 82, 58, 0, 0, 0, 0,
	0, 0, 0, 128, 129, 0, 0, 0, 124, 0,
	0, 0, 80, 44, 59, 101, 62, 68, 93, 126,
	0, 97, 48, 118, 103, 657, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 671, 681, 677,
	678, 675, 676, 674, 673, 672, 683, 662, 663, 664,
	665, 667, 0, 60, 139, 140, 666, 35, 41, 65,
	0, 125, 0, 92, 54, 119, 83, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 197,
	98, 63, 137, 138, 0, 66, 0, 0, 106, 76,
	0, 679, 45, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1175, 0, 32, 0, 1173,
	0, 0, 0, 0, 0, 0, 0, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	123, 0, 0, 0, 90, 0, 49, 0, 108, 55,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 198,
	0, 96, 84, 117, 0, 85, 94, 67, 111, 91,
	116, 0, 110, 122, 99, 42, 81, 34, 89, 95,
	0, 50, 0, 130, 131, 132, 133, 134, 135, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 104, 37, 109, 115, 47, 100, 214, 215, 216,
	217, 218, 219, 220, 221, 222, 223, 0, 224, 225,
	88, 226, 227, 228, 230, 229, 199, 200, 201, 205,
	203, 202, 204, 176, 178, 121, 174, 177, 183, 179,
	180, 181, 195, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 196, 206, 207, 208, 209, 210,
	211, 212, 213, 0, 0, 82, 58, 0, 0, 0,
	0, 0, 0, 0, 128, 129, 0, 0, 0, 124,
	0, 0, 0, 80, 44, 59, 101, 62, 68, 93,
	126, 0, 97, 48, 118, 103, 83, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 197,
	0, 63, 137, 138, 0, 66, 0, 0, 106, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 139, 140, 32, 35, 175,
	65, 0, 125, 0, 92, 54, 119, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 891, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	123, 0, 0, 0, 90, 0, 49, 0, 108, 55,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 198,
	0, 96, 84, 117, 0, 85, 94, 67, 111, 91,
	116, 0, 110, 122, 99, 42, 81, 34, 89, 95,
	0, 50, 0, 130, 131, 132, 133, 134, 135, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 104, 37, 109, 115, 47, 100, 214, 215, 216,
	217, 218, 219, 220, 221, 222, 223, 0, 224, 225,
	88, 226, 227, 228, 230, 229, 199, 889, 201, 205,
	203, 202, 204, 176, 178, 121, 174, 888, 183, 179,
	180, 181, 195, 892, 185, 186, 187, 188, 189, 190,
	191, 192, 893, 894, 196, 206, 207, 208, 209, 210,
	211, 212, 213, 0, 0, 82, 58, 890, 0, 0,
	0, 0, 0, 0, 128, 129, 0, 0, 0, 124,
	0, 0, 0, 80, 44, 59, 101, 62, 68, 93,
	126, 0, 97, 48, 118, 103, 83, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 197,
	0, 63, 137, 138, 0, 66, 0, 0, 106, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 139, 140, 32, 35, 175,
	65, 0, 125, 0, 92, 54, 119, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	123, 0, 0, 0, 90, 0, 49, 0, 108, 55,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 198,
	0, 96, 84, 117, 0, 85, 94, 67, 111, 91,
	116, 0, 110, 122, 99, 42, 81, 34, 89, 95,
	0, 50, 0, 130, 131, 132, 133, 134, 135, 136,
	0, 0, 0, 0, 1463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 104, 37, 109, 115, 47, 100, 214, 215, 216,
	217, 218, 219, 220, 221, 222, 223, 0, 224, 225,
	88, 226, 227, 228, 230, 229, 199, 200, 201, 205,
	203, 202, 204, 176, 178, 121, 174, 177, 183, 179,
	180, 181, 195, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 196, 206, 207, 208, 209, 210,
	211, 212, 213, 0, 0, 82, 58, 0, 0, 0,
	0, 0, 0, 0, 128, 129, 0, 0, 0, 124,
	0, 0, 0, 80, 44, 59, 101, 62, 68, 93,
	126, 0, 97, 48, 118, 103, 83, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 197,
	0, 63, 137, 138, 0, 66, 0, 0, 106, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 139, 140, 32, 35, 175,
	65, 0, 125, 0, 92, 54, 119, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	123, 0, 0, 0, 90, 0, 49, 0, 108, 55,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 198,
	0, 96, 84, 117, 0, 85, 94, 67, 111, 91,
	116, 0, 110, 122, 99, 42, 81, 34, 89, 95,
	0, 50, 0, 130, 131, 132, 133, 134, 135, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 104, 37, 109, 115, 47, 100, 214, 215, 216,
	217, 218, 219, 220, 221, 222, 223, 0, 224, 225,
	88, 226, 227, 228, 230, 229, 199, 200, 201, 205,
	203, 202, 204, 176, 178, 121, 174, 177, 183, 179,
	180, 181, 195, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 196, 206, 207, 208, 209, 210,
	211, 212, 213, 0, 0, 82, 58, 0, 0, 0,
	0, 0, 0, 0, 128, 129, 0, 0, 0, 124,
	0, 0, 0, 80, 44, 59, 101, 62, 68, 93,
	126, 0, 97, 48, 118, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 139, 140, 0, 35, 175,
	65, 0, 125, 0, 92, 54, 119, 83, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	0, 98, 63, 137, 138, 0, 66, 0, 0, 106,
	76, 0, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 689, 0, 0, 539, 0,
	521, 522, 523, 524, 0, 0, 0, 0, 46, 527,
	525, 535, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 123, 0, 0, 0, 90, 0, 49, 0, 108,
	55, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 84, 117, 0, 85, 94, 67, 111,
	91, 116, 0, 110, 122, 99, 42, 81, 34, 89,
	95, 0, 50, 0, 130, 131, 132, 133, 134, 135,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 104, 37, 109, 115, 47, 100, 0, 0,
	0, 107, 74, 0, 61, 102, 0, 38, 0, 0,
	51, 88, 0, 0, 0, 0, 0, 0, 112, 0,
	127, 0, 0, 0, 0, 0, 121, 40, 43, 0,
	0, 0, 0, 120, 0, 114, 75, 71, 0, 39,
	113, 73, 70, 0, 0, 53, 56, 86, 69, 87,
	57, 78, 77, 79, 0, 0, 529, 534, 0, 0,
	0, 0, 0, 0, 0, 128, 129, 0, 0, 0,
	124, 0, 0, 0, 80, 44, 59, 101, 62, 68,
	93, 126, 0, 97, 48, 118, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	0, 533, 532, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 139, 140, 0, 35,
	41, 65, 0, 125, 0, 92, 54, 119, 83, 0,
	0, 36, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 0, 98, 63, 137, 138, 0, 66, 0, 0,
	106, 76, 0, 0, 45, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 0, 0, 539,
	0, 521, 522, 523, 524, 0, 0, 0, 0, 46,
	527, 525, 535, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 123, 0, 0, 0, 90, 0, 49, 0,
	108, 55, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 84, 117, 0, 85, 94, 67,
	111, 91, 116, 0, 110, 122, 99, 42, 81, 34,
	89, 95, 0, 50, 0, 130, 131, 132, 133, 134,
	135, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 104, 37, 109, 115, 47, 100, 0,
	0, 0, 107, 74, 0, 61, 102, 0, 38, 0,
	0, 51, 88, 0, 0, 0, 0, 0, 0, 112,
	0, 127, 0, 0, 0, 0, 0, 121, 40, 43,
	0, 0, 0, 0, 120, 0, 114, 75, 71, 0,
	39, 113, 73, 70, 0, 0, 53, 56, 86, 69,
	87, 57, 78, 77, 79, 0, 0, 529, 534, 0,
	0, 0, 0, 0, 0, 0, 128, 129, 0, 0,
	0, 124, 0, 0, 0, 80, 44, 59, 101, 62,
	68, 93, 126, 0, 97, 48, 118, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	0, 0, 36, 0, 0, 0, 0, 0, 0, 52,
	531, 0, 533, 532, 63, 137, 138, 0, 66, 0,
	0, 106, 76, 0, 0, 0, 60, 139, 140, 0,
	35, 41, 65, 0, 125, 0, 92, 54, 119, 0,
	32, 649, 1023, 647, 651, 652, 653, 654, 0, 0,
	46, 650, 655, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 45, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 123, 0, 0, 0, 90, 0, 49,
	0, 108, 55, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 84, 117, 0, 85, 94,
	67, 111, 91, 116, 0, 110, 122, 99, 42, 81,
	34, 89, 95, 0, 50, 0, 130, 131, 132, 133,
	134, 135, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 104, 37, 109, 115, 47, 100,
	0, 0, 0, 107, 74, 0, 61, 102, 0, 38,
	0, 0, 51, 88, 0, 0, 0, 0, 0, 0,
	112, 0, 127, 0, 0, 0, 0, 0, 121, 40,
	43, 0, 0, 0, 0, 120, 0, 114, 75, 71,
	0, 39, 113, 73, 70, 0, 0, 53, 56, 86,
	69, 87, 57, 78, 77, 79, 0, 0, 82, 58,
	0, 0, 0, 0, 0, 0, 0, 128, 129, 0,
	0, 0, 124, 0, 0, 0, 80, 44, 59, 101,
	62, 68, 93, 126, 0, 97, 48, 118, 103, 0,
	0, 0, 0, 83, 0, 0, 36, 0, 1105, 0,
	0, 0, 0, 52, 0, 0, 0, 0, 63, 137,
	138, 0, 66, 0, 0, 106, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 139, 140,
	0, 35, 41, 65, 32, 125, 1107, 92, 54, 119,
	0, 0, 0, 0, 46, 0, 0, 0, 0, 0,
	0, 782, 781, 0, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 0, 783, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 123, 0, 0,
	0, 90, 0, 49, 0, 108, 55, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 84,
	117, 0, 85, 94, 67, 111, 91, 116, 0, 110,
	122, 99, 42, 81, 34, 89, 95, 0, 50, 0,
	130, 131, 132, 133, 134, 135, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 104, 37,
	109, 115, 47, 100, 0, 0, 0, 107, 74, 0,
	61, 102, 0, 38, 0, 0, 51, 88, 0, 0,
	0, 0, 0, 0, 112, 0, 127, 0, 0, 0,
	0, 0, 121, 40, 43, 0, 0, 0, 0, 120,
	0, 114, 75, 71, 0, 39, 113, 73, 70, 0,
	0, 53, 56, 86, 69, 87, 57, 78, 77, 79,
	0, 0, 82, 58, 0, 0, 0, 0, 0, 0,
	0, 128, 129, 0, 0, 0, 124, 0, 0, 0,
	80, 44, 59, 101, 62, 68, 93, 126, 0, 97,
	48, 118, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 52, 0, 0, 0, 0,
	63, 137, 138, 0, 66, 0, 0, 106, 76, 0,
	0, 60, 139, 140, 0, 35, 41, 65, 0, 125,
	0, 92, 54, 119, 1175, 0, 32, 0, 1173, 0,
	0, 0, 0, 0, 0, 0, 46, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	45, 0, 0, 1172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 123,
	0, 0, 0, 90, 0, 49, 0, 108, 55, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 84, 117, 0, 85, 94, 67, 111, 91, 116,
	0, 110, 122, 99, 42, 81, 34, 89, 95, 0,
	50, 0, 130, 131, 132, 133, 134, 135, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	104, 37, 109, 115, 47, 100, 0, 0, 0, 107,
	74, 0, 61, 102, 0, 38, 0, 0, 51, 88,
	0, 0, 0, 0, 0, 0, 112, 0, 127, 0,
	0, 0, 0, 0, 121, 40, 43, 0, 0, 0,
	0, 120, 0, 114, 75, 71, 0, 39, 113, 73,
	70, 0, 0, 53, 56, 86, 69, 87, 57, 78,
	77, 79, 0, 0, 82, 58, 0, 0, 0, 0,
	0, 0, 0, 128, 129, 0, 0, 0, 124, 0,
	0, 0, 80, 44, 59, 101, 62, 68, 93, 126,
	0, 97, 48, 118, 103, 0, 0, 0, 0, 83,
	0, 0, 36, 0, 0, 0, 0, 0, 0, 52,
	0, 0, 0, 0, 63, 137, 138, 0, 66, 0,
	0, 106, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 139, 140, 0, 35, 41, 65,
	32, 125, 31, 92, 54, 119, 0, 0, 0, 0,
	46, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 72, 123, 0, 0, 0, 266, 0, 265,
	0, 267, 268, 0, 64, 0, 0, 269, 272, 0,
	0, 0, 0, 0, 96, 84, 117, 0, 85, 94,
	67, 111, 91, 116, 0, 110, 122, 99, 42, 81,
	34, 89, 95, 0, 50, 0, 130, 131, 132, 133,
	134, 135, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 104, 37, 109, 115, 47, 100,
	0, 0, 0, 107, 74, 0, 61, 102, 0, 38,
	0, 0, 51, 88, 0, 0, 0, 0, 0, 0,
	112, 0, 127, 0, 0, 0, 0, 0, 121, 40,
	43, 0, 0, 0, 0, 120, 0, 114, 75, 71,
	0, 39, 113, 73, 70, 0, 0, 53, 56, 86,
	69, 87, 57, 78, 77, 79, 0, 0, 82, 58,
	0, 0, 0, 0, 0, 0, 0, 128, 129, 0,
	0, 0, 124, 0, 0, 0, 80, 44, 59, 101,
	62, 68, 93, 126, 0, 97, 48, 118, 103, 0,
	734, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 0, 0, 36, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 0, 0, 63, 137, 138,
	0, 66, 0, 0, 106, 76, 0, 60, 139, 140,
	0, 35, 41, 65, 0, 125, 0, 92, 54, 119,
	620, 0, 0, 152, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 46, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 123, 0, 0, 0,
	90, 0, 49, 0, 108, 55, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 84, 117,
	0, 85, 94, 67, 111, 91, 116, 0, 110, 122,
	99, 42, 81, 34, 89, 95, 0, 50, 0, 130,
	131, 132, 133, 134, 135, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 104, 37, 109,
	115, 47, 100, 0, 0, 0, 107, 74, 0, 61,
	102, 0, 38, 0, 0, 51, 88, 0, 0, 0,
	0, 0, 0, 112, 0, 127, 0, 0, 0, 0,
	0, 121, 40, 43, 0, 0, 0, 0, 120, 0,
	114, 75, 71, 0, 39, 113, 73, 70, 0, 0,
	53, 56, 86, 69, 87, 57, 78, 77, 79, 0,
	0, 82, 58, 0, 0, 0, 0, 0, 0, 0,
	128, 129, 0, 0, 0, 124, 0, 0, 0, 80,
	44, 59, 101, 62, 68, 93, 126, 0, 97, 48,
	118, 103, 0, 0, 0, 0, 83, 0, 0, 36,
	0, 1581, 0, 0, 0, 0, 52, 0, 0, 0,
	0, 63, 137, 138, 0, 66, 0, 0, 106, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 139, 140, 0, 35, 41, 65, 152, 125, 1583,
	92, 54, 119, 0, 0, 0, 0, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 45,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	123, 0, 0, 0, 90, 0, 49, 0, 108, 55,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 84, 117, 0, 85, 94, 67, 111, 91,
	116, 0, 110, 122, 99, 42, 81, 34, 89, 95,
	0, 50, 0, 130, 131, 132, 133, 134, 135, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 104, 37, 109, 115, 47, 100, 0, 0, 0,
	107, 74, 0, 61, 102, 0, 38, 0, 0, 51,
	88, 0, 0, 0, 0, 0, 0, 112, 0, 127,
	0, 0, 0, 0, 0, 121, 40, 43, 0, 0,
	0, 0, 120, 0, 114, 75, 71, 0, 39, 113,
	73, 70, 0, 0, 53, 56, 86, 69, 87, 57,
	78, 77, 79, 0, 0, 82, 58, 0, 0, 0,
	0, 0, 0, 0, 128, 129, 0, 0, 0, 124,
	0, 0, 0, 80, 44, 59, 101, 62, 68, 93,
	126, 0, 97, 48, 118, 103, 0, 734, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	0, 0, 36, 0, 0, 0, 0, 0, 0, 52,
	0, 0, 0, 0, 63, 137, 138, 0, 66, 0,
	0, 106, 76, 0, 60, 139, 140, 0, 35, 41,
	65, 0, 125, 0, 92, 54, 119, 620, 0, 0,
	32, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	46, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 123, 0, 0, 0, 90, 0, 49,
	0, 108, 55, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 84, 117, 0, 85, 94,
	67, 111, 91, 116, 0, 110, 122, 99, 42, 81,
	34, 89, 95, 0, 50, 0, 130, 131, 132, 133,
	134, 135, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 104, 37, 109, 115, 47, 100,
	0, 0, 0, 107, 74, 0, 61, 102, 0, 38,
	0, 0, 51, 88, 0, 0, 0, 0, 0, 0,
	112, 0, 127, 0, 0, 0, 0, 0, 121, 40,
	43, 0, 0, 0, 0, 120, 0, 114, 75, 71,
	0, 39, 113, 73, 70, 0, 0, 53, 56, 86,
	69, 87, 57, 78, 77, 79, 0, 0, 82, 58,
	0, 0, 0, 0, 0, 0, 0, 128, 129, 0,
	0, 0, 124, 0, 0, 0, 80, 44, 59, 101,
	62, 68, 93, 126, 0, 97, 48, 118, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 0, 0, 36, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 0, 0, 63, 137, 138,
	0, 66, 0, 0, 106, 76, 0, 60, 139, 140,
	0, 35, 41, 65, 0, 125, 0, 92, 54, 119,
	620, 0, 0, 152, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 46, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 123, 0, 0, 0,
	90, 0, 49, 0, 108, 55, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 84, 117,
	0, 85, 94, 67, 111, 91, 116, 0, 110, 122,
	99, 42, 81, 34, 89, 95, 0, 50, 0, 130,
	131, 132, 133, 134, 135, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 104, 37, 109,
	115, 47, 100, 0, 0, 0, 107, 74, 0, 61,
	102, 0, 38, 0, 0, 51, 88, 0, 0, 0,
	0, 0, 0, 112, 0, 127, 0, 0, 0, 0,
	0, 121, 40, 43, 0, 0, 0, 0, 120, 0,
	114, 75, 71, 0, 39, 113, 73, 70, 0, 0,
	53, 56, 86, 69, 87, 57, 78, 77, 79, 0,
	0, 82, 58, 0, 0, 0, 0, 0, 0, 0,
	128, 129, 0, 0, 0, 124, 0, 0, 0, 80,
	44, 59, 101, 62, 68, 93, 126, 0, 97, 48,
	118, 103, 0, 0, 0, 0, 83, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 0,
	0, 63, 137, 138, 0, 66, 0, 0, 106, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 139, 140, 0, 35, 41, 65, 152, 125, 154,
	92, 54, 119, 0, 0, 0, 0, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 45,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	123, 0, 0, 0, 90, 0, 49, 0, 108, 55,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 84, 117, 0, 85, 94, 67, 111, 91,
	116, 0, 110, 122, 99, 42, 81, 34, 89, 95,
	0, 50, 0, 130, 131, 132, 133, 134, 135, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 104, 37, 109, 115, 47, 100, 0, 0, 0,
	107, 74, 0, 61, 102, 0, 38, 0, 0, 51,
	88, 0, 0, 0, 0, 0, 0, 112, 0, 127,
	0, 0, 0, 0, 0, 121, 40, 43, 0, 0,
	0, 0, 120, 0, 114, 75, 71, 0, 39, 113,
	73, 70, 0, 0, 53, 56, 86, 69, 87, 57,
	78, 77, 79, 0, 0, 82, 58, 0, 0, 0,
	0, 0, 0, 0, 128, 129, 0, 0, 0, 124,
	0, 0, 0, 80, 44, 59, 101, 62, 68, 93,
	126, 0, 97, 48, 118, 103, 0, 0, 0, 0,
	83, 0, 0, 36, 0, 0, 0, 0, 0, 0,
	52, 1599, 0, 0, 0, 63, 137, 138, 0, 66,
	0, 0, 106, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 139, 140, 0, 35, 41,
	65, 32, 125, 1598, 92, 54, 119, 0, 0, 0,
	0, 46, 0, 0, 0, 0, 0, 0, 1624, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 123, 0, 0, 0, 90, 0,
	49, 0, 108, 55, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 84, 117, 0, 85,
	94, 67, 111, 91, 116, 0, 110, 122, 99, 42,
	81, 34, 89, 95, 0, 50, 0, 130, 131, 132,
	133, 134, 135, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 104, 37, 109, 115, 47,
	100, 0, 0, 0, 107, 74, 0, 61, 102, 0,
	38, 0, 0, 51, 88, 0, 0, 0, 0, 0,
	0, 112, 0, 127, 0, 0, 0, 0, 0, 121,
	40, 43, 0, 0, 0, 0, 120, 0, 114, 75,
	71, 0, 39, 113, 73, 70, 0, 0, 53, 56,
	86, 69, 87, 57, 78, 77, 79, 0, 0, 82,
	58, 0, 0, 0, 0, 0, 0, 0, 128, 129,
	0, 0, 0, 124, 0, 0, 0, 80, 44, 59,
	101, 62, 68, 93, 126, 0, 97, 48, 118, 103,
	0, 0, 0, 0, 83, 0, 0, 36, 0, 1581,
	0, 0, 0, 0, 52, 0, 0, 0, 0, 63,
	137, 138, 0, 66, 0, 0, 106, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 60, 139,
	140, 0, 35, 41, 65, 152, 125, 1583, 92, 54,
	119, 0, 0, 0, 0, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 123, 0,
	0, 0, 90, 0, 49, 0, 108, 55, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	84, 117, 0, 1579, 94, 67, 111, 91, 116, 0,
	110, 122, 99, 42, 81, 34, 89, 95, 0, 50,
	0, 130, 131, 132, 133, 134, 135, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 104,
	37, 109, 115, 47, 100, 0, 0, 0, 107, 74,
	0, 61, 102, 0, 38, 0, 0, 51, 88, 0,
	0, 0, 0, 0, 0, 112, 0, 127, 0, 0,
	0, 0, 0, 121, 40, 43, 0, 0, 0, 0,
	120, 0, 114, 75, 71, 0, 39, 113, 73, 70,
	0, 0, 53, 56, 86, 69, 87, 57, 78, 77,
	79, 0, 0, 82, 58, 0, 0, 0, 0, 0,
	0, 0, 128, 129, 0, 0, 0, 124, 0, 0,
	0, 80, 44, 59, 101, 62, 68, 93, 126, 0,
	97, 48, 118, 103, 0, 0, 0, 0, 83, 0,
	0, 36, 0, 0, 0, 0, 0, 1553, 52, 0,
	0, 0, 0, 63, 137, 138, 0, 66, 0, 0,
	106, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 139, 140, 0, 35, 41, 65, 152,
	125, 154, 92, 54, 119, 0, 0, 0, 0, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 123, 0, 0, 0, 90, 0, 49, 0,
	108, 55, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 84, 117, 0, 85, 94, 67,
	111, 91, 116, 0, 110, 122, 99, 42, 81, 34,
	89, 95, 0, 50, 0, 130, 131, 132, 133, 134,
	135, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 104, 37, 109, 115, 47, 100, 0,
	0, 0, 107, 74, 0, 61, 102, 0, 38, 0,
	0, 51, 88, 0, 0, 0, 0, 0, 0, 112,
	0, 127, 0, 0, 0, 0, 0, 121, 40, 43,
	0, 0, 0, 0, 120, 0, 114, 75, 71, 0,
	39, 113, 73, 70, 0, 0, 53, 56, 86, 69,
	87, 57, 78, 77, 79, 0, 0, 82, 58, 0,
	0, 0, 0, 0, 0, 0, 128, 129, 0, 0,
	0, 124, 0, 0, 0, 80, 44, 59, 101, 62,
	68, 93, 126, 0, 97, 48, 118, 103, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 83, 0,
	0, 36, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 0, 0, 63, 137, 138, 0, 66, 0, 0,
	106, 76, 0, 0, 0, 0, 60, 139, 140, 0,
	35, 41, 65, 0, 125, 0, 92, 54, 119, 152,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 46,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 45, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 123, 0, 0, 0, 90, 0, 49, 0,
	108, 55, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 84, 117, 0, 85, 94, 67,
	111, 91, 116, 0, 110, 122, 99, 42, 81, 34,
	89, 95, 0, 50, 0, 130, 131, 132, 133, 134,
	135, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 104, 37, 109, 115, 47, 100, 0,
	0, 0, 107, 74, 0, 61, 102, 0, 38, 0,
	0, 51, 88, 0, 0, 0, 0, 0, 0, 112,
	0, 127, 0, 0, 0, 0, 0, 121, 40, 43,
	0, 0, 0, 0, 120, 0, 114, 75, 71, 0,
	39, 113, 73, 70, 0, 0, 53, 56, 86, 69,
	87, 57, 78, 77, 79, 0, 0, 82, 58, 0,
	0, 0, 0, 0, 0, 0, 128, 129, 0, 0,
	0, 124, 0, 0, 0, 80, 44, 59, 101, 62,
	68, 93, 126, 0, 97, 48, 118, 103, 0, 0,
	0, 0, 83, 0, 0, 36, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 0, 0, 63, 137, 138,
	0, 66, 0, 0, 106, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 139, 140, 0,
	35, 41, 65, 539, 125, 154, 92, 54, 119, 0,
	0, 0, 0, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 45, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 123, 0, 0, 0,
	90, 0, 49, 0, 108, 55, 0, 64, 0, 0,
	0, 600, 0, 0, 0, 0, 0, 96, 84, 117,
	0, 85, 94, 67, 111, 91, 116, 0, 110, 122,
	99, 42, 81, 34, 89, 95, 0, 50, 0, 130,
	131, 132, 133, 134, 135, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 104, 37, 109,
	115, 47, 100, 0, 0, 0, 107, 74, 0, 61,
	102, 0, 38, 0, 0, 51, 88, 0, 0, 0,
	0, 0, 0, 112, 0, 127, 0, 0, 0, 0,
	0, 121, 40, 43, 0, 0, 0, 0, 120, 0,
	114, 75, 71, 0, 39, 113, 73, 70, 0, 0,
	53, 56, 86, 69, 87, 57, 78, 77, 79, 0,
	0, 82, 58, 0, 0, 0, 0, 0, 0, 0,
	128, 129, 0, 0, 0, 124, 0, 0, 0, 80,
	44, 59, 101, 62, 68, 93, 126, 0, 97, 48,
	118, 103, 0, 0, 0, 0, 83, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 0,
	0, 63, 137, 138, 0, 66, 0, 0, 106, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 139, 140, 0, 35, 41, 65, 152, 125, 154,
	92, 54, 119, 0, 0, 0, 0, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 45,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	123, 0, 0, 0, 90, 0, 49, 0, 108, 55,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 84, 117, 0, 85, 94, 67, 111, 91,
	116, 0, 110, 122, 99, 42, 81, 34, 89, 95,
	0, 50, 0, 130, 131, 132, 133, 134, 135, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 104, 37, 109, 115, 47, 100, 0, 0, 0,
	107, 74, 0, 61, 102, 0, 38, 0, 0, 51,
	88, 0, 0, 0, 0, 0, 0, 112, 0, 127,
	0, 0, 0, 0, 0, 121, 40, 43, 0, 0,
	0, 0, 120, 0, 114, 75, 71, 0, 39, 113,
	73, 70, 0, 0, 53, 56, 86, 69, 87, 57,
	78, 77, 79, 0, 0, 82, 58, 0, 0, 0,
	0, 0, 0, 0, 128, 129, 0, 0, 0, 124,
	0, 0, 0, 80, 44, 59, 101, 62, 68, 93,
	126, 253, 97, 48, 118, 103, 83, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 0,
	0, 63, 137, 138, 0, 66, 0, 0, 106, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 60, 139, 140, 32, 35, 41,
	65, 0, 125, 0, 92, 54, 119, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	123, 0, 0, 0, 90, 0, 49, 0, 108, 55,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 84, 117, 0, 85, 94, 67, 111, 91,
	116, 0, 110, 122, 99, 42, 81, 34, 89, 95,
	0, 50, 0, 130, 131, 132, 133, 134, 135, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 234,
	105, 104, 37, 109, 115, 47, 100, 0, 0, 0,
	107, 74, 0, 61, 102, 0, 38, 0, 0, 51,
	88, 0, 0, 0, 0, 0, 0, 112, 0, 127,
	0, 0, 0, 0, 0, 121, 40, 43, 0, 0,
	0, 0, 120, 0, 114, 75, 71, 0, 39, 113,
	73, 70, 0, 0, 53, 56, 86, 69, 87, 57,
	78, 77, 79, 0, 0, 82, 58, 0, 0, 0,
	0, 0, 0, 0, 128, 129, 0, 0, 0, 124,
	0, 0, 0, 80, 44, 59, 101, 62, 68, 93,
	126, 0, 97, 48, 118, 103, 0, 0, 0, 0,
	83, 0, 0, 36, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 0, 0, 63, 137, 138, 0, 66,
	0, 0, 106, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 139, 140, 0, 35, 41,
	65, 539, 125, 154, 92, 54, 119, 0, 0, 0,
	0, 46, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 123, 0, 0, 0, 90, 0,
	49, 0, 108, 55, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 84, 117, 0, 85,
	94, 67, 111, 91, 116, 0, 110, 122, 99, 42,
	81, 34, 89, 95, 0, 50, 0, 130, 131, 132,
	133, 134, 135, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 104, 37, 109, 115, 47,
	100, 0, 0, 0, 107, 74, 0, 61, 102, 0,
	38, 0, 0, 51, 88, 0, 0, 0, 0, 0,
	0, 112, 0, 127, 0, 0, 0, 0, 0, 121,
	40, 43, 0, 0, 0, 0, 120, 0, 114, 75,
	71, 0, 39, 113, 73, 70, 0, 0, 53, 56,
	86, 69, 87, 57, 78, 77, 79, 0, 0, 82,
	58, 0, 0, 0, 0, 0, 0, 0, 128, 129,
	0, 0, 0, 124, 0, 0, 0, 80, 44, 59,
	101, 62, 68, 93, 126, 0, 97, 48, 118, 103,
	83, 0, 0, 36, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 0, 0, 63, 137, 138, 0, 66,
	0, 0, 106, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 60, 139,
	140, 32, 35, 41, 65, 0, 125, 0, 92, 54,
	119, 46, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 123, 0, 0, 0, 90, 0,
	49, 0, 108, 55, 0, 64, 0, 0, 0, 746,
	0, 0, 0, 0, 0, 96, 84, 117, 0, 85,
	94, 67, 111, 91, 116, 0, 110, 122, 99, 42,
	81, 34, 89, 95, 0, 50, 0, 130, 131, 132,
	133, 134, 135, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 104, 37, 109, 115, 47,
	100, 0, 0, 0, 107, 74, 0, 61, 102, 0,
	38, 0, 0, 51, 88, 0, 0, 0, 0, 0,
	0, 112, 0, 127, 0, 0, 0, 0, 0, 121,
	40, 43, 0, 0, 0, 0, 120, 0, 114, 75,
	71, 0, 39, 113, 73, 70, 0, 0, 53, 56,
	86, 69, 87, 57, 78, 77, 79, 0, 0, 82,
	58, 0, 0, 0, 0, 0, 0, 0, 128, 129,
	0, 0, 0, 124, 0, 0, 0, 80, 44, 59,
	101, 62, 68, 93, 126, 0, 97, 48, 118, 103,
	0, 0, 0, 0, 83, 0, 0, 36, 0, 0,
	0, 0, 0, 0, 52, 0, 0, 0, 0, 63,
	137, 138, 0, 66, 0, 0, 106, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 60, 139,
	140, 0, 35, 41, 65, 152, 125, 154, 92, 54,
	119, 0, 0, 0, 0, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 123, 0,
	0, 0, 90, 0, 49, 0, 108, 55, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	84, 117, 0, 85, 94, 67, 111, 91, 116, 0,
	110, 122, 99, 42, 81, 34, 89, 95, 0, 50,
	0, 130, 131, 132, 133, 134, 135, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 104,
	37, 109, 115, 47, 100, 0, 0, 0, 107, 74,
	0, 61, 102, 0, 38, 0, 0, 51, 88, 0,
	0, 0, 0, 0, 0, 112, 0, 127, 0, 0,
	0, 0, 0, 121, 40, 43, 0, 0, 0, 0,
	120, 0, 114, 75, 71, 0, 39, 113, 73, 70,
	0, 0, 53, 56, 86, 69, 87, 57, 78, 77,
	79, 0, 0, 82, 58, 0, 0, 0, 0, 0,
	0, 0, 128, 129, 0, 0, 0, 124, 0, 0,
	0, 80, 44, 59, 101, 62, 68, 93, 126, 0,
	97, 48, 118, 103, 0, 0, 0, 0, 83, 0,
	0, 36, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 0, 0, 63, 137, 138, 0, 66, 0, 0,
	106, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 139, 140, 0, 35, 41, 65, 152,
	125, 1583, 92, 54, 119, 0, 0, 0, 0, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 123, 0, 0, 0, 90, 0, 49, 0,
	108, 55, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 84, 117, 0, 85, 94, 67,
	111, 91, 116, 0, 110, 122, 99, 42, 81, 34,
	89, 95, 0, 50, 0, 130, 131, 132, 133, 134,
	135, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 104, 37, 109, 115, 47, 100, 0,
	0, 0, 107, 74, 0, 61, 102, 0, 38, 0,
	0, 51, 88, 0, 0, 0, 0, 0, 0, 112,
	0, 127, 0, 0, 0, 0, 0, 121, 40, 43,
	0, 0, 0, 0, 120, 0, 114, 75, 71, 0,
	39, 113, 73, 70, 0, 0, 53, 56, 86, 69,
	87, 57, 78, 77, 79, 0, 0, 82, 58, 0,
	0, 0, 0, 0, 0, 0, 128, 129, 0, 0,
	0, 124, 0, 0, 0, 80, 44, 59, 101, 62,
	68, 93, 126, 0, 97, 48, 118, 103, 83, 0,
	0, 36, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 0, 0, 63, 137, 138, 0, 66, 0, 0,
	106, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 139, 140, 32,
	35, 41, 65, 0, 125, 0, 92, 54, 119, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 45, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 123, 0, 0, 0, 90, 0, 49, 0,
	108, 55, 0, 64, 0, 0, 0, 600, 0, 0,
	0, 0, 0, 96, 84, 117, 0, 85, 94, 67,
	111, 91, 116, 0, 110, 122, 99, 42, 81, 34,
	89, 95, 0, 50, 0, 130, 131, 132, 133, 134,
	135, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 104, 37, 109, 115, 47, 100, 0,
	0, 0, 107, 74, 0, 61, 102, 0, 38, 0,
	0, 51, 88, 0, 0, 0, 0, 0, 0, 112,
	0, 127, 0, 0, 0, 0, 0, 121, 40, 43,
	0, 0, 0, 0, 120, 0, 114, 75, 71, 0,
	39, 113, 73, 70, 0, 0, 53, 56, 86, 69,
	87, 57, 78, 77, 79, 0, 0, 82, 58, 0,
	0, 0, 0, 0, 0, 0, 128, 129, 0, 0,
	0, 124, 0, 0, 0, 80, 44, 59, 101, 62,
	68, 93, 126, 0, 97, 48, 118, 103, 0, 0,
	0, 0, 83, 0, 0, 36, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 0, 0, 63, 137, 138,
	0, 66, 0, 0, 106, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 139, 140, 0,
	35, 41, 65, 32, 125, 1107, 92, 54, 119, 0,
	0, 0, 0, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 45, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 123, 0, 0, 0,
	90, 0, 49, 0, 108, 55, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 84, 117,
	0, 85, 94, 67, 111, 91, 116, 0, 110, 122,
	99, 42, 81, 34, 89, 95, 0, 50, 0, 130,
	131, 132, 133, 134, 135, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 104, 37, 109,
	115, 47, 100, 0, 0, 0, 107, 74, 0, 61,
	102, 0, 38, 0, 0, 51, 88, 0, 0, 0,
	0, 0, 0, 112, 0, 127, 0, 0, 0, 0,
	0, 121, 40, 43, 0, 0, 0, 0, 120, 0,
	114, 75, 71, 0, 39, 113, 73, 70, 0, 0,
	53, 56, 86, 69, 87, 57, 78, 77, 79, 0,
	0, 82, 58, 0, 0, 0, 0, 0, 0, 0,
	128, 129, 0, 0, 0, 124, 0, 0, 0, 80,
	44, 59, 101, 62, 68, 93, 126, 0, 97, 48,
	118, 103, 83, 0, 0, 36, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 0, 0, 63, 137, 138,
	0, 66, 0, 0, 106, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 139, 140, 32, 35, 41, 65, 0, 125, 0,
	92, 54, 119, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 45,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 123, 0, 0, 0,
	90, 0, 49, 0, 108, 55, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 84, 117,
	0, 85, 94, 67, 111, 91, 116, 0, 110, 122,
	99, 42, 81, 34, 89, 95, 0, 50, 0, 130,
	131, 132, 133, 134, 135, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 104, 37, 109,
	115, 47, 100, 0, 0, 0, 107, 74, 0, 61,
	102, 0, 38, 0, 0, 51, 88, 0, 0, 0,
	0, 0, 0, 112, 0, 127, 0, 0, 0, 0,
	0, 121, 40, 43, 0, 0, 0, 0, 120, 0,
	114, 75, 71, 0, 39, 113, 73, 70, 0, 0,
	53, 56, 86, 69, 87, 57, 78, 77, 79, 0,
	0, 82, 58, 0, 0, 0, 0, 0, 0, 0,
	128, 129, 0, 0, 0, 124, 0, 0, 0, 80,
	44, 59, 101, 62, 68, 93, 126, 0, 97, 48,
	118, 103, 83, 0, 0, 36, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 0, 0, 63, 137, 138,
	0, 66, 0, 0, 106, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 139, 140, 32, 35, 41, 65, 0, 125, 0,
	92, 54, 119, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 804, 45,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 123, 0, 0, 149,
	90, 0, 49, 0, 108, 55, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 84, 117,
	0, 85, 94, 67, 111, 91, 116, 0, 110, 122,
	99, 42, 81, 34, 89, 95, 0, 50, 0, 130,
	131, 132, 133, 134, 135, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 104, 37, 109,
	115, 47, 100, 0, 0, 0, 107, 74, 0, 61,
	102, 0, 38, 0, 0, 51, 88, 0, 0, 0,
	0, 0, 0, 112, 0, 127, 0, 0, 0, 0,
	0, 121, 40, 43, 0, 0, 0, 0, 120, 0,
	114, 75, 71, 0, 39, 113, 73, 70, 0, 0,
	53, 56, 86, 69, 87, 57, 78, 77, 79, 0,
	0, 82, 58, 0, 0, 0, 0, 0, 0, 0,
	128, 129, 0, 0, 0, 124, 0, 0, 0, 80,
	44, 59, 101, 62, 68, 93, 126, 0, 97, 48,
	118, 103, 0, 0, 0, 0, 83, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 0,
	0, 63, 137, 138, 0, 66, 0, 0, 106, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 139, 140, 0, 35, 41, 65, 32, 125, 31,
	92, 54, 119, 0, 0, 0, 0, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 45,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	123, 0, 0, 0, 90, 0, 49, 0, 108, 55,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 84, 117, 0, 85, 94, 67, 111, 91,
	116, 0, 110, 122, 99, 42, 81, 34, 89, 95,
	0, 50, 0, 130, 131, 132, 133, 134, 135, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 104, 37, 109, 115, 47, 100, 0, 0, 0,
	107, 74, 0, 61, 102, 0, 38, 0, 0, 51,
	88, 0, 0, 0, 0, 0, 0, 112, 0, 127,
	0, 0, 0, 0, 0, 121, 40, 43, 0, 0,
	0, 0, 120, 0, 114, 75, 71, 0, 39, 113,
	73, 70, 0, 0, 53, 56, 86, 69, 87, 57,
	78, 77, 79, 0, 0, 82, 58, 0, 0, 0,
	0, 0, 0, 0, 128, 129, 0, 0, 0, 124,
	0, 0, 0, 80, 44, 59, 101, 62, 68, 93,
	126, 0, 97, 48, 118, 103, 83, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 0,
	0, 63, 137, 138, 0, 66, 0, 0, 106, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 139, 140, 32, 35, 41,
	65, 0, 125, 0, 92, 54, 119, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	123, 0, 0, 0, 90, 0, 49, 0, 108, 55,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 84, 117, 0, 85, 94, 67, 111, 91,
	116, 0, 110, 122, 99, 42, 81, 34, 89, 95,
	0, 50, 0, 130, 131, 132, 133, 134, 135, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 104, 37, 109, 115, 47, 100, 0, 0, 0,
	107, 74, 0, 61, 102, 0, 38, 0, 0, 51,
	88, 0, 0, 0, 0, 0, 0, 112, 0, 127,
	0, 0, 0, 0, 0, 121, 40, 43, 0, 0,
	0, 0, 120, 0, 114, 75, 71, 0, 39, 113,
	73, 70, 0, 0, 53, 56, 86, 69, 87, 57,
	78, 77, 79, 0, 0, 82, 58, 0, 0, 0,
	0, 0, 0, 0, 128, 129, 0, 0, 0, 124,
	0, 0, 0, 80, 44, 59, 101, 62, 68, 93,
	126, 0, 97, 48, 118, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 139, 140, 0, 35, 41,
	65, 0, 125, 0, 92, 54, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45,
}

var yyPact = [...]int16{
	448, -1000, -249, -1000, -1000, 1188, 1836, 368, -1000, -1000,
	-1000, 18948, 396, 395, 285, 382, 19228, 18664, 17256, 422,
	365, -1000, -213, -165, -1000, -51, 409, -1000, 1015, -1000,
	11158, 11158, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 16408, 19228, 365, 195, 365, 1220, 442, 19228, 627,
	1352, 483, -1000, -1000, -1000, 365, 17256, -1000, -1000, -1000,
	-1000, 16128, 210, 12971, 632, -160, 35, -1000, -1000, -1000,
	-1000, -1000, 1135, -1000, -1000, -1000, 1135, 276, 1187, 1135,
	1187, -1000, 1135, 1187, 83, 83, 83, 83, 83, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1186, 1184, -1000, 1135,
	1135, 1135, 1135, 1135, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1170, 279, 1170, 1140, 1140, -1000,
	-1000, 632, 1183, 17256, 19228, 1219, 17256, -228, 17256, 17256,
	1421, 17256, -1000, -1000, -1000, 227, 445, 1322, 11158, 6272,
	17256, -1000, 429, 17256, 6643, 1106, 1292, -1000, -1000, -1000,
	-1000, -1000, -1000, 1179, 715, 19228, 327, 336, 420, 418,
	906, -1000, -1000, -1000, 721, -1000, 19228, -1000, 1442, -1000,
	-1000, 326, -1000, 325, 622, 824, 17256, 1174, 157, 1173,
	11820, 807, -1000, -272, -1000, 27, -1000, -1000, 783, 83,
	83, 1135, 83, 694, 83, 83, -1000, -1000, 501, 1305,
	501, 501, 501, 501, 821, 821, -85, -85, -1000, -1000,
	-1000, -1000, 802, 1170, -1000, -1000, -1000, 801, -1000, 17256,
	19228, 1169, 1217, 17256, 1349, 371, -1000, -1000, 1348, 1347,
	1084, -1000, -1000, 225, -1000, 445, -1000, 1421, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1197, 351, 426, 5901, -1000, -1000, -1000, 210, -1000,
	17820, -1000, 1433, 1380, 348, -5, -1000, 892, 890, -1000,
	881, -1000, -1000, 1, -1000, -207, 103, 129, -1000, -1000,
	1097, -1000, 1166, 8994, 1334, -1000, 1308, 798, -1000, 11489,
	-1000, -240, -1000, -1000, -1000, -240, -1000, -1000, -1000, 1097,
	-1000, 1163, 1162, -1000, 1158, -1000, -1000, 1097, 481, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1046, 501, 501, 83,
	501, 1045, 1044, 501, 501, -1000, -1000, 866, 502, -1000,
	-1000, -1000, -1000, 1010, -1000, 997, -1000, 126, 100, -1000,
	1101, -1000, 982, 1096, 1215, 15844, 17256, 1159, 1112, 365,
	1112, 1379, 286, 17256, 1421, 16972, 1421, 1076, 19228, 328,
	19228, -1000, -1000, 354, 3675, -1000, 6643, 978, -1000, 277,
	1135, 521, 521, -210, 324, 321, 1097, -1000, -1000, -1000,
	-1000, -168, -1000, -1000, -1000, -1000, 622, -1000, 1158, 8994,
	-1000, 16972, 755, -1000, 8994, 80, 1097, 1097, -1000, -1000,
	452, -1000, -1000, -1000, 9656, 9656, 9656, 9656, 9656, 9656,
	9656, -1000, -1000, -1000, -1000, 48, -240, -1000, 820, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 473, 471, -1000, 8663,
	1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 8994, 1097,
	1272, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 2038,
	1097, 1097, 1097, 1097, -1000, 107, -1000, 1093, 1040, 1567,
	1039, -1000, 10598, -1000, 841, -1000, 782, -1000, 727, 1035,
	7658, 6643, -1000, -1000, -1000, 501, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 83, 817, 83, 32, 19, 795,
	-1000, 792, 15844, 19228, 17256, 1034, 1089, -1000, 259, 1155,
	16972, -1000, 1405, 1440, -1000, 1112, 17256, -1000, 378, 1353,
	-1000, -1000, 1377, -1000, 1088, -1000, -1000, 1072, 17256, 1154,
	19228, -1000, -1000, 338, 19228, -1000, -1000, -1000, -1000, -1000,
	935, 17820, 1324, -1000, -1000, -1000, 680, -1000, -1000, 638,
	275, 660, -1000, 19228, -168, 8994, -1000, 1097, 588, 976,
	-129, 8994, 8994, 771, 515, 9656, 772, 577, 9656, 9656,
	9656, 9656, 9656, 9656, 9656, 9656, 9656, 9656, 9656, 9656,
	9656, 9656, 9656, 814, 2205, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 844, -1000, 1112,
	12111, 12111, 26, 26, 26, 26, 26, 26, 18384, -1000,
	-258, -1000, -1000, 5530, 6643, 841, 974, 743, 8663, 8320,
	8320, 6996, 8994, 9656, 16692, 8320, 1357, 616, 743, 16692,
	1376, -1000, 841, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 88, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 8320, 8320, 8320, 8320,
	8994, 1153, 790, -1000, 1029, -240, 1097, -1000, 271, 201,
	-1000, -1000, 83, -1000, -1000, -160, -1000, -1000, -1000, -1000,
	-1000, 841, 8320, 963, 974, -1000, 12395, -1000, 469, 1097,
	-1000, 501, -1000, 501, -1000, -1000, 1025, 1021, 967, 1152,
	1151, -219, 783, 15844, 970, 1383, 1400, 1112, 1346, 1271,
	-1000, 841, 1330, 19228, -1000, -1000, -1000, -1000, -1000, 258,
	614, 19228, 2039, 1363, -1000, 12687, 1148, 1146, 362, 1213,
	1810, 192, -1000, 757, 584, 816, 581, 580, 553, 552,
	550, 548, 547, -1000, -1000, -1000, -1000, -1000, 1439, -1000,
	-1000, -1000, 1436, 1142, -1000, 1141, 588, 8994, 280, 1214,
	-1000, -1000, 515, 567, -1000, -1000, 753, -1000, -1000, 1839,
	-1000, -1000, -1000, -1000, 772, 9656, 9656, 9656, 121, 1839,
	1435, 954, 7, 26, 424, 424, 40, 40, 40, 40,
	40, 323, 323, -1000, -1000, -1000, -1000, -80, -1000, 1135,
	279, 841, -1000, -240, 813, -1000, -1000, 773, 1097, 468,
	-1000, -1000, -1000, 8994, -1000, 841, 963, 12395, 963, 684,
	1087, 9987, 1135, -1000, 1135, 1140, -1000, -1000, 142, 1135,
	140, -1000, -1000, -1000, -1000, 1140, -1000, -1000, -1000, -1000,
	-1000, 1135, 1135, -1000, -1000, 1135, 1135, -1000, 1135, 1135,
	761, 574, 1920, 1069, -1000, 464, 963, 8320, -1000, 608,
	-1000, 8994, 841, 17256, -1000, -1000, 963, 841, 1086, 963,
	963, 696, -1000, 945, 940, 1135, -1000, -1000, -1000, 963,
	8320, -247, -1000, -1000, -1000, 18104, -1000, -1000, 3304, 8320,
	-1000, -1000, -1000, -1000, -219, 15844, 17820, 1413, 1138, 930,
	1413, 1310, 8994, 8994, 1405, -1000, 1112, -1000, -1000, 1357,
	-1000, -1000, 674, -1000, 1112, 1033, -1000, 255, 169, 8994,
	-1000, 2039, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1405, -1000, -1000, -1000, 19228, 2305, 19228, 19228,
	19228, 450, 9325, 8994, -1000, -1000, -1000, 614, 257, 916,
	10318, 12687, 12687, 10318, 12687, 12687, 17820, 17820, 320, -1000,
	19228, -1000, -102, 1810, 19228, -1000, 770, -1000, -1000, 726,
	767, 726, 726, 726, 726, 726, 521, 521, 19228, 17820,
	280, 588, -1000, -62, 1431, -1000, -1000, -1000, -1000, 121,
	1839, 1303, -1000, 9656, 9656, 98, -1000, 47, -1000, -240,
	6643, 743, -1000, -1000, -1000, 2619, 814, 8994, -1000, 254,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2619, 9656, 9656, 9656, 9656, 9656, 5530, -68,
	1070, 599, -1000, 8994, 734, -1000, -1000, -1000, -1000, -1000,
	-1000, -150, 161, -1000, -1000, -1000, -1000, -1000, 1097, -1000,
	-1000, 460, 841, 1413, 887, 948, 935, 8994, 16972, -219,
	935, -1000, 1438, 508, 659, 1085, -1000, 653, 1383, 841,
	1231, -1000, -1000, -82, 19228, 8994, 2519, 2039, 743, -1000,
	1383, 368, 15560, 14134, 1082, 10878, -1000, 5159, 654, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 19228, 1428, 1426, 1425, 1422, 2364,
	80, 630, 167, 164, 251, -1000, -1000, 10318, -1000, -1000,
	-1000, -1000, -1000, 942, 929, 1136, 1097, 924, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	622, 622, 921, 912, -1000, 280, -1000, 521, 521, -1000,
	9656, 1839, 1839, 17, -1000, 773, -1000, -1000, 841, 1135,
	841, 588, -1000, -1000, 841, 241, 1282, 907, 301, 941,
	-1000, 1097, -59, -1000, 743, 8994, -1000, -1000, -1000, 197,
	751, 752, 749, 725, 9, -1000, 1387, 497, 4788, -1000,
	935, 1413, 935, 1213, 743, 910, 1413, 1213, -1000, 1276,
	8994, 8994, 8994, -1000, 1310, -1000, 8320, -1000, -1000, -242,
	-1000, 743, -1000, -1000, 2039, 946, -1000, 1310, 15270, 17256,
	969, -1000, 1051, 1274, -1000, -1000, -1000, 1328, 13264, 14986,
	19228, 238, -1000, -1000, 1080, 4417, 4, -1000, -1000, -1000,
	544, 455, 14702, -1000, 1296, -1000, -1000, 2305, 1316, -1000,
	-1000, -1000, -1000, -1000, 2039, 2039, 2039, 2039, -1000, -1000,
	346, 17820, 19228, -1000, 1810, -1000, -1000, 331, 935, -1000,
	-1000, -1000, 1839, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	9656, 9656, -1000, 9656, 9656, 9656, 841, 714, 743, 719,
	-1000, 687, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14418,
	-1000, 1386, 841, -1000, 1213, 935, -1000, -1000, -1000, 935,
	-1000, 1268, 743, 743, -1000, -1000, 1065, 8994, -253, 2458,
	-1000, -1000, 290, 17256, -1000, 290, 1020, 14134, 17256, -1000,
	-1000, 16692, 14134, 14134, 14134, 14134, 14134, -1000, 1249, 1247,
	-1000, 1245, 1236, 1252, 17256, -1000, 900, 13264, 516, 1097,
	-1000, 17540, -1000, -1000, -1000, 11158, 1350, 4046, 1080, 4,
	1071, -1000, -4, -3, 7327, 6643, 501, -1000, -1000, -1000,
	-1000, -1000, 19228, 370, 712, 130, 292, 217, -1000, 223,
	886, 841, -1000, 17256, 1213, 241, 241, 241, 241, 102,
	-1000, -1000, -1000, -1000, -1000, 447, 8994, -1000, -1000, -1000,
	1213, -1000, 1413, 14134, 743, 591, -1000, -1000, 917, 1097,
	-1000, 1413, 14134, 980, -1000, 1062, -1000, 540, 1274, 1132,
	1206, 867, -1000, -1000, -1000, -1000, 1243, -1000, 1233, -1000,
	-1000, -1000, -1000, -96, 394, 393, 391, 19228, -1000, 1112,
	-1000, 1071, 4, -6, -1000, -1000, -1000, -1000, 743, 526,
	-1000, -1000, -1000, 2039, 578, 601, 2306, -1000, 219, -1000,
	-1000, -1000, 1110, -1000, -1000, -1000, -1000, -1000, 841, 216,
	-105, 6643, 904, -1000, 743, -1000, 1411, 1067, -1000, 1200,
	16692, 1097, -1000, 13841, 19228, 1405, 980, -1000, 1405, 16692,
	8994, -1000, -1000, 8994, 1109, -1000, 8994, -1000, -1000, -1000,
	-1000, 1108, 1097, 1097, 1097, 878, -1000, -1000, -1000, -1000,
	-7, -15, -1000, 8994, 364, 156, -1000, -1000, -1000, 19228,
	-1000, 1261, -78, -146, -1000, -1000, 841, 8994, 1407, 1385,
	-1000, 1306, 918, 1052, -1000, -1000, 7989, 841, 880, 444,
	878, 1383, -1000, 1383, -1000, 743, 743, 16972, 743, 25,
	16972, 16972, 16972, 13548, 19228, -1000, -1000, -1000, 743, -1000,
	2039, 875, -1000, 1256, -1000, -1000, -1000, -1000, 8994, 8994,
	306, -1000, 1097, -1000, -1000, 1064, 19228, 19228, -1000, -1000,
	-1000, 873, 871, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	840, 840, 840, 516, -1000, 117, -1000, -90, 743, 1066,
	1423, -1000, 1097, -1000, 1112, 430, -1000, -1000, -1000, 25,
	-1000, -1000, -1000, -96, -1000, -108, 16692, 1052, 841, 19228,
	-1000, -1000, -188, 936, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1716, 20, 66, 1711, 1706, 1704, 1703, 1701, 1700,
	1699, 1698, 1697, 1693, 1680, 1679, 1678, 1675, 1674, 108,
	1673, 1666, 1664, 65, 1662, 1661, 1660, 1658, 60, 47,
	69, 68, 1504, 1655, 29, 38, 35, 1654, 24, 1653,
	1652, 46, 1651, 33, 1650, 1649, 135, 1642, 1641, 5,
	102, 64, 93, 1635, 1633, 87, 1880, 1625, 1623, 73,
	1622, 1621, 76, 14, 4, 7, 9, 1617, 361, 6,
	1613, 74, 1611, 1609, 1608, 1606, 37, 1605, 45, 53,
	16, 54, 1597, 13, 67, 36, 26, 11, 1, 44,
	25, 1594, 22, 30, 23, 1593, 56, 1590, 100, 63,
	79, 58, 0, 510, 61, 78, 1589, 1583, 1581, 629,
	71, 28, 8, 1580, 59, 1579, 57, 89, 34, 86,
	84, 1577, 85, 1576, 1574, 1573, 1861, 439, 101, 82,
	27, 1572, 1571, 80, 81, 279, 75, 282, 450, 62,
	1570, 1569, 1562, 97, 1561, 48, 88, 21, 337, 1560,
	1557, 1556, 1555, 1552, 105, 1551, 90, 1549, 72, 39,
	77, 96, 40, 1534, 1533, 1526, 1523, 70, 1522, 1520,
	1518, 52, 1516, 1515, 92, 51, 103, 91, 99, 1514,
	1513, 55, 216, 98, 1503, 95, 42, 10, 41, 1500,
	50, 1499, 1494, 1491, 2, 3, 1490, 1488, 1485, 1483,
	1482, 1481, 49, 1477, 1476, 1472, 15, 1471, 1468, 43,
	1467, 1465, 1464, 1462, 1458, 1232, 1365, 1457, 83, 1454,
	1453, 130,
}

var yyR1 = [...]uint8{
	0, 211, 212, 212, 1, 1, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 15, 15, 15, 15, 15, 214, 214,
	2, 2, 3, 4, 4, 5, 5, 6, 6, 22,
	22, 7, 8, 8, 8, 217, 217, 41, 41, 85,
	85, 9, 9, 9, 9, 10, 10, 191, 191, 190,
	192, 192, 11, 11, 11, 11, 11, 184, 184, 184,
	184, 184, 12, 12, 187, 187, 187, 13, 13, 13,
	90, 90, 94, 94, 94, 95, 95, 95, 95, 203,
	203, 115, 115, 213, 213, 218, 218, 218, 218, 218,
	218, 218, 182, 182, 182, 182, 183, 183, 183, 183,
	185, 185, 186, 186, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 189, 189, 100, 100, 165, 165,
	165, 166, 166, 166, 166, 166, 166, 168, 168, 169,
	169, 107, 107, 170, 170, 18, 150, 151, 151, 151,
	151, 151, 151, 151, 138, 138, 118, 118, 118, 118,
	118, 118, 118, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 176, 176, 176, 176, 176, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 178, 179, 180, 172, 172,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 128, 128, 128, 128, 128, 128,
	171, 171, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 122, 122, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 121, 121, 121, 121, 121, 121, 121,
	121, 123, 123, 123, 123, 123, 123, 123, 123, 119,
	119, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 125, 125, 125, 125, 125, 125,
	125, 125, 137, 137, 126, 126, 135, 135, 136, 136,
	136, 127, 127, 127, 134, 134, 134, 131, 131, 132,
	132, 133, 133, 133, 129, 129, 129, 130, 130, 130,
	140, 161, 161, 161, 163, 163, 164, 164, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 149,
	149, 181, 181, 160, 160, 160, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 148, 148, 158, 158, 159,
	159, 156, 156, 156, 157, 143, 143, 143, 143, 143,
	144, 145, 145, 145, 145, 141, 142, 174, 174, 174,
	207, 207, 207, 207, 207, 207, 208, 208, 175, 175,
	146, 146, 147, 147, 154, 154, 154, 154, 219, 219,
	152, 152, 153, 153, 153, 220, 19, 20, 20, 21,
	21, 21, 25, 25, 25, 23, 23, 24, 24, 30,
	30, 29, 29, 31, 31, 31, 31, 106, 106, 106,
	105, 105, 204, 204, 204, 204, 204, 33, 33, 34,
	34, 35, 35, 36, 36, 36, 194, 194, 193, 193,
	195, 195, 195, 195, 195, 195, 48, 48, 83, 83,
	83, 86, 86, 37, 37, 37, 37, 38, 38, 39,
	39, 40, 40, 113, 113, 112, 112, 112, 111, 111,
	42, 42, 42, 44, 43, 43, 43, 43, 45, 45,
	47, 47, 46, 46, 49, 49, 49, 49, 50, 50,
	84, 84, 32, 32, 32, 32, 32, 32, 32, 97,
	97, 52, 52, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 61, 61, 61, 61, 61, 61, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	28, 28, 62, 62, 62, 68, 63, 63, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 59, 59, 59, 59, 59,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 221, 221, 60, 60,
	60, 60, 26, 26, 26, 26, 26, 114, 114, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 117, 117, 117, 117, 117, 117, 117, 117, 72,
	72, 27, 27, 70, 70, 71, 99, 99, 73, 73,
	69, 69, 69, 196, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 74, 74, 75, 75, 205, 205,
	206, 76, 76, 77, 77, 78, 79, 79, 79, 80,
	80, 80, 80, 81, 81, 81, 54, 54, 54, 54,
	54, 54, 82, 82, 82, 82, 87, 87, 64, 64,
	66, 66, 65, 67, 88, 88, 92, 89, 89, 93,
	93, 93, 93, 93, 16, 17, 91, 91, 91, 108,
	108, 108, 98, 98, 96, 96, 103, 103, 104, 104,
	109, 109, 109, 110, 110, 197, 197, 197, 198, 198,
	198, 199, 199, 200, 201, 201, 202, 210, 210, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 215, 216,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 7, 10, 7, 11, 11, 9, 13,
	14, 5, 8, 11, 13, 13, 6, 7, 1, 1,
	4, 6, 10, 1, 3, 1, 3, 7, 8, 1,
	1, 8, 8, 7, 6, 1, 1, 1, 3, 0,
	4, 3, 4, 5, 4, 2, 6, 1, 3, 2,
	0, 1, 2, 2, 2, 3, 5, 0, 2, 2,
	2, 2, 3, 5, 1, 2, 3, 7, 5, 9,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 0, 3, 0, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 1, 1, 1, 3,
	1, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 4, 0, 3, 0, 2,
	2, 0, 2, 2, 2, 2, 2, 0, 2, 0,
	3, 0, 1, 0, 2, 4, 4, 0, 1, 3,
	3, 3, 3, 3, 2, 2, 3, 1, 1, 1,
	1, 1, 0, 2, 2, 3, 2, 4, 2, 4,
	2, 2, 3, 2, 3, 2, 7, 9, 3, 3,
	6, 9, 9, 6, 6, 8, 8, 5, 8, 7,
	4, 2, 4, 6, 2, 4, 2, 1, 1, 1,
	2, 1, 1, 1, 3, 1, 2, 1, 1, 2,
	0, 4, 3, 4, 3, 3, 3, 3, 3, 3,
	3, 2, 4, 6, 2, 3, 2, 3, 1, 3,
	0, 2, 0, 3, 3, 2, 2, 2, 2, 2,
	3, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 2, 2, 2, 2, 1,
	1, 1, 3, 3, 2, 2, 2, 1, 1, 1,
	1, 4, 4, 4, 4, 4, 1, 5, 2, 2,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 3, 3, 0, 3, 3, 0, 1, 0,
	1, 0, 2, 1, 0, 3, 3, 0, 1, 2,
	6, 0, 1, 4, 1, 2, 1, 3, 2, 3,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 1, 1, 0, 2, 5, 2, 3, 3, 2,
	3, 2, 2, 3, 4, 1, 1, 1, 1, 1,
	3, 3, 2, 2, 1, 2, 5, 5, 8, 8,
	13, 1, 1, 2, 2, 10, 7, 0, 1, 1,
	0, 1, 1, 1, 2, 2, 1, 2, 0, 3,
	0, 1, 1, 3, 0, 4, 1, 3, 2, 1,
	1, 2, 1, 1, 1, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 3, 6, 4, 7, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 0, 4, 1, 3,
	1, 1, 1, 1, 1, 1, 4, 8, 1, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	0, 4, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	6, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 2, 4, 5, 5, 6, 4,
	4, 4, 6, 6, 6, 6, 6, 8, 8, 6,
	8, 8, 9, 7, 5, 4, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 2, 2, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 0, 2,
	1, 3, 5, 3, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 3, 0, 2, 1, 3,
	1, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 5, 3, 1, 3, 1, 2, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 2, 0, 2,
	2, 0, 1, 4, 1, 3, 2, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -211, -1, -14, -15, -18, 122, 123, -212, 377,
	-150, 56, -207, -208, -170, 131, 144, 162, 163, 349,
	129, 361, 362, 146, 364, 76, -96, 134, -151, -138,
	-103, 61, 59, -102, 169, 340, 21, 204, 218, 250,
	238, 341, 167, 239, 286, 375, 69, 207, 295, 138,
	173, 221, 28, 256, 347, 141, 257, 261, 268, 287,
	336, 215, 289, 33, 143, 342, 37, 159, 290, 259,
	253, 248, 131, 252, 213, 247, 41, 263, 262, 264,
	285, 168, 267, 18, 154, 157, 258, 260, 222, 170,
	136, 161, 346, 291, 158, 171, 153, 294, 363, 166,
	208, 288, 216, 297, 203, 202, 40, 212, 140, 205,
	164, 160, 229, 251, 246, 206, 162, 155, 296, 348,
	244, 237, 165, 132, 281, 344, 292, 231, 276, 277,
	175, 176, 177, 178, 179, 180, 181, 34, 35, 337,
	338, 130, 130, 132, 202, 132, -103, -103, -98, 135,
	-46, -109, 59, -102, 61, 129, -98, 364, 361, 362,
	329, 129, 58, 57, -139, -118, -122, -119, -124, -123,
	-125, -103, -120, -121, 238, 341, 235, 239, 236, 241,
	242, 243, 116, 240, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 244, 256, 31, 151, 228,
	229, 230, 233, 232, 234, 231, 257, 258, 259, 260,
	261, 262, 263, 264, 209, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 220, 221, 223, 224, 225, 227,
	226, -139, -103, 54, 201, -103, -98, 203, -98, 54,
	-182, 54, 19, 182, 183, 195, -103, 78, 23, 119,
	-98, -46, -46, 293, -154, -219, 344, 35, -138, -140,
	-143, -141, -142, -155, -144, 138, 136, 140, 141, 146,
	-148, 130, 147, 71, 78, -176, 138, -179, 54, 272,
	278, 136, 147, 146, 375, 69, 139, 23, 351, 353,
	29, 30, -133, 378, 266, -131, 275, -126, 56, -126,
	-126, 237, -127, 56, -126, -127, -126, -127, -129, 239,
	-129, -129, -129, -129, 56, 56, -126, -126, -126, -126,
	-126, -135, 56, 222, -135, -135, -136, 56, -136, 54,
	55, -46, -103, 54, -46, -203, 372, 373, -46, -46,
	-185, -183, 8, 9, 10, -46, 196, -182, 24, -118,
	-110, -109, -101, 127, 183, 352, 77, 23, 25, 272,
	278, 182, 80, 116, 16, 81, 189, 361, 362, 115,
	330, 122, 50, 322, 323, 320, 187, 332, 333, 321,
	279, 194, 20, 29, 372, 10, 26, 149, 22, 109,
	124, 184, 84, 85, 152, 24, 150, 73, 190, 192,
	19, 53, 142, 11, 351, 13, 14, 366, 353, 135,
	134, 96, 365, 130, 48, 8, 118, 27, 373, 93,
	44, 147, 193, 46, 94, 17, 324, 325, 32, 339,
	156, 111, 51, 38, 367, 78, 368, 71, 54, 293,
	188, 76, 15, 49, 157, 369, 144, 191, 95, 125,
	329, 47, 185, 370, 128, 186, 6, 335, 31, 148,
	45, 129, 280, 83, 133, 72, 163, 5, 146, 9,
	52, 55, 326, 327, 328, 36, 82, 12, 145, 343,
	74, -46, 127, -46, -152, -104, -103, -101, 57, 34,
	56, -175, 54, 78, -146, -103, 147, -148, -148, 59,
	-148, 59, 130, 59, 71, 19, -103, 9, 147, 147,
	-175, 61, -46, 56, -172, 352, 16, 56, -177, 56,
	-178, 61, 62, 63, 64, 71, -128, 70, -52, 267,
	-59, 320, 323, 322, 268, 72, 73, -103, -109, 59,
	-102, -180, 63, 379, -132, 276, 63, -129, -129, -126,
	-129, 63, 59, -129, -129, -130, 116, 115, 31, -130,
	-130, -130, -130, -137, 61, -137, -134, 343, 344, -134,
	63, -135, 63, -46, -103, 56, 54, -46, 23, 132,
	23, -165, 23, 54, 57, 196, -182, -185, 55, -107,
	138, -143, 146, 127, 86, -104, -154, -159, -156, -103,
	147, 10, 9, 19, 142, 136, 375, 59, 59, 59,
	-174, 146, 361, 362, 363, -176, 375, -128, 268, -215,
	56, 56, -32, -51, 78, -56, 29, 24, -55, -52,
	-69, -196, -67, -68, 116, 117, 105, 106, 113, 79,
	118, -59, -57, -58, -60, -199, 61, 62, -103, 60,
	70, 63, 64, 65, 66, 71, -109, 298, -65, -215,
	46, 47, 330, 331, 332, 333, 339, 334, 81, 36,
	38, 320, 328, 327, 326, 324, 325, 322, 323, 374,
	135, 321, 111, 329, 265, 23, 29, 63, -177, 56,
	-178, -167, 374, -167, -215, -126, 56, -126, 56, 56,
	-215, 119, 58, -130, -130, -129, -130, 58, 58, -130,
	-130, 59, 59, 116, 58, 57, 58, 228, 228, 57,
	58, 57, 56, 55, 54, -158, -159, -59, -103, -46,
	56, -2, -3, -4, 6, -215, -98, -2, -166, 19,
	170, 171, -46, -183, -83, -103, 147, -185, 54, -103,
	-214, 130, 147, -103, 138, -143, -153, -104, 61, 63,
	58, 57, -126, -157, 270, -126, -145, 166, 167, 31,
	168, -145, 363, 147, 147, -215, -174, -175, -32, -83,
	58, 77, 76, 93, -32, -53, 96, 78, 94, 95,
	80, 102, 101, 112, 105, 106, 107, 108, 109, 110,
	111, 103, 104, 115, 374, 86, 87, 88, 89, 90,
	91, 92, 97, 98, 99, 100, -97, -215, -68, -215,
	120, 121, -56, -56, -56, -56, -56, -56, -56, -200,
	266, -167, 61, 119, 119, -2, -63, -32, -215, -215,
	-215, -215, -215, -215, -215, -215, -215, -72, -32, -215,
	39, -221, -215, -221, -221, -221, -221, -221, -221, -221,
	-117, 116, 239, 151, 230, -120, -119, 245, 244, 212,
	213, 215, 216, 218, 238, 341, -215, -215, -215, -215,
	56, 353, 57, 58, -177, 61, 267, 58, 239, 229,
	269, 118, 245, 254, 255, -118, -216, 58, 58, 58,
	58, -30, 22, -29, -63, -31, -32, 107, -109, -104,
	-130, -129, 61, -129, 277, 277, 63, 63, -158, -103,
	-46, 58, 56, 56, -83, -76, 15, -21, 5, -19,
	-220, -2, -46, 133, 21, 6, 8, 9, 10, 19,
	-100, 57, 23, -46, -213, 56, -103, 146, -103, -161,
	-163, 343, -162, 55, 143, 69, 175, 176, 177, 178,
	179, 180, 181, -156, -79, 25, 26, -175, 54, 71,
	169, -175, 54, -146, -103, -174, -32, -215, -216, 58,
	349, 350, -32, -32, -61, 71, 78, 72, 73, -56,
	-62, -65, -68, 67, 96, 94, 95, 80, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-56, -56, -56, -114, 59, 61, -122, 229, -117, -120,
	221, 59, -55, 61, -103, -55, -103, 378, -104, -110,
	-101, -104, -216, 57, -216, -2, -29, -32, -29, -32,
	-116, 116, 235, 151, 230, 224, 254, 255, 274, 228,
	275, 217, 209, 214, 227, 225, 211, 226, 210, 223,
	220, 233, 232, 234, 245, 236, 241, 243, 242, 240,
	-32, -69, -56, -69, -103, -109, -29, -23, 22, -70,
	-71, 82, -69, 19, -216, 237, -29, -30, -29, -29,
	-29, -32, 56, 63, 58, 237, -134, -133, -216, -29,
	57, -216, -216, -106, -105, 23, -103, 61, 119, -215,
	-130, -130, 58, 58, 58, 56, 56, -84, 365, -158,
	58, -80, 17, 16, -5, -3, -215, 21, 22, -25,
	42, 43, -20, -216, 23, -147, -103, 184, -99, 82,
	-103, -186, -188, -6, -8, -7, -10, -9, -11, -12,
	-13, -16, -3, -22, 10, 9, 20, 31, 188, 189,
	194, 190, 145, 135, -17, 8, 329, -100, 19, -218,
	-103, 105, 86, 61, -138, 57, 56, 56, 136, -160,
	54, -162, 343, 56, 345, 59, -149, 86, 61, 86,
	86, 86, 86, 86, 86, 86, 9, 10, 56, 56,
	-216, -32, -171, 168, 54, 71, 72, 73, -62, -56,
	-56, -56, -28, 152, 77, 343, -216, -201, -202, 61,
	119, -32, -216, -216, -216, 57, 55, 57, -126, -126,
	-126, -136, 215, -126, 215, -136, -126, -126, -126, -126,
	-126, -126, 23, 57, 11, 57, 57, 11, 119, -216,
	-29, -73, -71, 84, -32, -216, -109, -216, -216, -216,
	-216, 58, -173, 58, 58, -216, -31, -204, 376, -105,
	107, -110, -30, -84, -158, -159, -50, 12, 56, 58,
	-50, -81, 19, 32, -32, -77, -78, -32, -76, -2,
	-23, 68, -2, -168, 57, 55, 185, 204, -32, -188,
	-76, -19, -19, -19, -191, -103, -190, -19, -210, -209,
	299, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, -103, -103, -103, -184, 38, 191, 192, 193, -51,
	-56, -32, -51, -99, 184, 58, -218, -103, -218, -218,
	-218, -218, -218, -159, -159, 147, -103, -164, -162, -103,
	63, -181, 54, 74, 63, -181, -181, -181, -181, -181,
	-145, -145, -147, -159, -171, -216, 336, 10, 9, -28,
	77, -56, -56, 228, 379, 57, -167, -104, -116, 116,
	-114, -32, -129, 59, -116, -56, -56, -56, -56, -56,
	-104, 340, -76, 85, -32, 83, 349, 350, 58, 205,
	355, 356, 156, 357, 168, 358, 359, -215, 119, -216,
	-50, 58, 58, -161, -32, -83, -84, -161, 9, 96,
	57, 18, 57, -79, -80, -216, -24, 45, -169, 343,
	-103, -32, -189, -188, 204, -187, -188, -80, -96, 11,
	-41, -46, -34, -35, -36, -37, -48, -68, -215, -46,
	57, -192, -118, 186, -89, -115, 206, -93, 288, 287,
	-104, 298, -91, 286, 239, 285, -181, 57, -103, 11,
	11, 11, 11, -188, 204, 83, 204, 204, 185, 58,
	58, 56, -215, 58, 57, -175, -175, 58, 58, -171,
	-145, -145, -56, 277, -202, -216, -216, -216, -216, -216,
	19, 57, -216, 57, 19, -215, -27, 335, -32, 343,
	63, 16, 63, 63, 63, 63, 356, 156, 358, 16,
	-216, 157, -76, 107, -161, -50, -161, -160, 58, -50,
	-160, 40, -32, -32, -78, -81, -29, 375, -188, 377,
	-188, -81, -47, 27, -46, -46, -41, -217, 57, 11,
	55, 31, 57, -42, -44, -43, -45, 44, 48, 50,
	45, 46, 47, 51, -113, 23, -34, -215, -112, 157,
	-111, 23, -109, 61, -190, -103, 187, 57, -89, 206,
	-90, -94, 289, 291, 86, 119, -108, -103, 61, 29,
	31, -209, 27, -187, -186, -187, -187, -197, 197, 78,
	-159, -103, -162, 139, -161, -56, -56, -56, -56, -56,
	-216, 61, 63, 63, 360, -109, 16, -216, -160, -161,
	-161, 41, -33, 11, -32, 377, 85, -188, -85, 157,
	-46, -85, 55, -34, -46, -88, -92, -69, -35, -36,
	-36, -35, -36, 44, 44, 44, 49, 44, 49, 44,
	-43, -109, -216, -49, 52, 134, 53, -215, -111, 19,
	-93, -90, 57, 290, 292, 293, 54, 74, -32, -104,
	-130, -103, 85, 377, 377, 85, 377, -198, 198, 197,
	58, -216, -46, -160, -216, -216, -216, -216, -26, 96,
	343, 119, -205, -206, -32, -160, -50, -34, 85, -54,
	31, 36, -2, -215, -215, -50, -34, -50, -50, 57,
	86, -39, -38, 54, 55, -40, 54, -38, 44, 44,
	-194, 343, 130, 130, 130, -86, -103, -2, -94, -95,
	294, 291, 297, 86, 85, 84, 85, 200, 199, 56,
	-216, 341, 51, 346, -104, -216, -76, 57, -74, 13,
	-87, 54, -88, -64, -66, -65, -215, -2, -82, -103,
	-86, -76, -50, -76, -92, -32, -32, 56, -32, 56,
	-215, -215, -215, -216, 57, 291, 295, 296, -32, 135,
	204, -147, 41, 342, 347, -216, -206, -75, 14, 16,
	28, -87, 57, -216, -216, -216, 57, 119, -216, -80,
	-80, -83, -193, -195, 366, 367, 368, 369, 370, 371,
	-83, -83, -83, -112, -103, -187, 58, 41, -32, -63,
	147, -66, 36, -2, -215, -103, -103, 58, 58, 57,
	-216, -216, -216, -49, 85, 343, 9, -64, -2, 119,
	-195, -194, 346, -88, -216, -103, 347,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 764, 1, 3,
	6, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	762, 391, 392, 393, 396, 0, 0, 765, 0, 148,
	162, 162, 766, 767, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 0, 0, 762, 0, 762, 0, 0, 0, 0,
	0, 502, 770, 771, 772, 762, 0, 397, 394, 395,
	144, 0, 404, 0, 154, 321, 317, 157, 158, 159,
	160, 161, 304, 242, -2, -2, 304, -2, 311, 304,
	311, 276, 304, 311, 324, -2, -2, -2, 324, -2,
	-2, -2, -2, 289, 290, -2, 957, 0, 261, 304,
	-2, 304, 304, 304, 267, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 243, 244, 245, -2, -2, 248,
	-2, -2, 251, -2, 306, -2, 306, 308, 308, 259,
	260, 155, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 0, 0, 0, 162, 0,
	0, 145, 0, 0, 146, 406, 0, 409, 149, 150,
	151, 152, 153, 0, 398, -2, 994, 1012, 959, 0,
	0, 365, 366, 164, 0, 166, 0, 168, 0, 170,
	171, 0, 173, 175, 398, 0, 0, 0, 0, 0,
	0, 0, 163, 0, 323, 319, 318, 241, 0, 324,
	324, 304, 324, 0, 324, 324, 278, 279, 327, 0,
	327, 327, 327, 327, 0, 0, 314, 314, 264, 265,
	266, 253, 0, 306, 255, 256, 257, 0, 258, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 0, 128,
	0, 110, 106, 107, 108, 0, 105, 0, 763, 21,
	503, 773, 774, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 0, 141, 0, 0, 410, 768, 769, 404, 408,
	0, 375, 0, 0, 0, 401, 356, 0, 0, 359,
	0, 361, -2, 387, 165, 0, 0, 0, 172, 174,
	0, 178, 179, 781, 0, 208, 0, 0, 191, 0,
	194, -2, 197, 198, 199, 232, 201, 202, 203, 986,
	205, 304, 304, 228, 962, 521, 522, 0, 0, -2,
	-2, 206, 207, 322, 156, 320, 0, 327, 327, 324,
	327, 0, 0, 327, 327, 280, 328, 0, 0, 281,
	282, 283, 284, 0, 302, 0, 262, 0, 0, 263,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 762,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	400, 26, 142, 0, 0, 411, 407, 0, 369, 304,
	304, 0, 0, 0, 0, 0, 0, 357, 358, 360,
	363, 387, 388, 389, 190, 167, 398, 169, 0, 781,
	1045, 0, 0, 512, 781, 517, 519, 0, 558, 559,
	560, 561, 562, 563, 781, 781, 781, 781, 781, 781,
	781, 590, 591, 592, 593, 0, -2, 695, 690, 697,
	698, 699, 700, 701, 702, 703, 0, 0, 743, 781,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 0,
	0, 626, 626, 626, 626, 626, 626, 626, 626, 0,
	0, 0, 0, 0, 782, 0, 209, 0, 0, 0,
	0, 196, 162, 200, 0, 224, 0, 226, 0, 0,
	-2, 0, 305, 271, 272, 327, 273, 312, 313, 274,
	275, 329, 325, 326, 324, 0, 324, 0, 0, 0,
	309, 0, 0, 0, 0, 0, 367, 368, 304, 0,
	0, -2, 711, 0, 415, 0, 0, -2, 0, 0,
	129, 130, 126, 111, 109, 468, 469, 0, 0, 93,
	0, 28, 29, 401, 400, 27, 405, 412, 413, 414,
	331, 0, 716, 373, 374, 372, 398, 381, 382, 0,
	0, 398, 399, 400, 387, 781, 364, 0, 0, 0,
	0, 781, 781, 0, 515, 781, 0, 0, 781, 781,
	781, 781, 781, 781, 781, 781, 781, 781, 781, 781,
	781, 781, 781, 0, 0, 539, 540, 541, 542, 543,
	544, 545, 546, 547, 548, 549, 518, 0, 532, 0,
	0, 0, 581, 582, 583, 584, 585, 586, 587, 594,
	0, 694, 696, 0, 0, 33, 0, 556, 781, 781,
	781, 781, 781, 781, 0, 781, 425, 0, 680, 0,
	0, 617, 0, 618, 619, 620, 621, 622, 623, 624,
	625, 671, 0, 673, 674, 675, 676, 677, 678, 246,
	247, 249, 250, 252, 269, 270, 781, -2, 781, 781,
	781, 187, 0, 192, 0, 232, 0, 195, 304, 304,
	235, 236, -2, -2, -2, 321, 204, 1046, 225, 227,
	229, 0, 781, 0, 0, 431, 437, 433, 0, 0,
	277, 327, 303, 327, 315, 316, 0, 0, 0, 0,
	0, 510, 1045, 0, 0, 719, 0, 0, 419, 422,
	417, 33, 0, 0, 132, 133, 134, 135, 136, 0,
	686, 0, 0, 126, 22, 95, 0, 0, 401, 353,
	332, 0, 334, 0, 349, 0, 0, 0, 0, 0,
	0, 0, 0, 370, 371, 717, 718, 376, 0, 383,
	384, 377, 0, 0, 401, 0, 0, 781, 230, 180,
	183, 184, 513, 514, 516, 533, 0, 535, 537, 523,
	524, 552, 553, 554, 0, 781, 781, 781, 550, 528,
	0, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 578, 637, 638, 579, 0, 589, 304,
	306, 0, 576, 232, 0, 577, 588, 0, 691, 0,
	-2, 693, 555, 781, 742, 33, 0, 437, 0, 0,
	0, -2, 304, 642, 304, 308, 645, 646, 647, 304,
	650, 652, 653, 654, 655, 308, 657, 658, 659, 660,
	661, 304, 304, 664, 665, 304, 304, 668, 304, 304,
	0, 560, 0, 0, 690, 0, 0, 781, 426, 688,
	683, 781, 0, 0, 627, 672, 0, 0, 430, 0,
	0, 0, 210, 0, 0, -2, 234, 240, 595, 0,
	781, 442, 599, 434, 438, 0, 440, 441, 0, -2,
	292, 293, 307, 310, 510, 0, 0, 508, 0, 0,
	508, 723, 781, 781, 711, 35, 0, 420, 421, 425,
	423, 424, 416, 34, 0, 137, 402, 0, 0, 781,
	470, 18, 112, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 711, 415, 415, 415, 0, 415, 0, 0,
	0, 67, 781, 781, 754, 39, 40, 686, 0, 0,
	-2, 95, 95, -2, 95, 95, 0, 0, 0, 330,
	0, 335, 0, 0, 0, 338, 0, 350, 340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	230, 0, 176, 0, 0, 534, 536, 538, 525, 550,
	529, 0, 526, 781, 781, 0, 520, 0, 784, 232,
	0, 557, -2, 600, 601, 0, 0, 781, 639, 324,
	643, 644, 648, 649, 651, 656, 662, 663, 666, 667,
	669, 670, 0, 781, 781, 781, 781, 781, 0, 0,
	711, 0, 684, 781, 0, 615, 616, 628, 629, 630,
	631, 0, 0, 189, 193, 596, 432, 597, 0, 439,
	435, 0, 0, 508, 0, 0, 331, 781, 0, 510,
	331, 30, 0, 0, 720, 712, 713, 716, 719, 33,
	427, 418, -2, 139, 0, 781, 127, 0, 687, 113,
	719, 764, 0, 0, 55, -2, 57, 0, 0, 787,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 62, 63, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 512, 0, 0, 94, 96, -2, 97, 98,
	99, 100, 101, 0, 0, 0, 354, 0, 336, 341,
	339, 342, 351, 352, 343, 344, 345, 346, 347, 348,
	398, 398, 0, 0, 386, 230, 231, 0, 0, 527,
	781, 551, 530, 0, 783, 0, 786, 692, 0, 304,
	0, 0, 640, 641, 0, 0, 0, 0, 0, 0,
	691, 0, 681, 614, 689, 781, 185, 186, 188, 0,
	0, 0, 0, 0, 0, 221, 0, 0, 0, 598,
	331, 508, 331, 353, 509, 0, 508, 353, 724, 0,
	781, 781, 781, 715, 723, 36, 781, 428, 16, 0,
	403, 138, 17, 124, 0, 0, 74, 723, 0, 0,
	0, 47, 0, 449, 451, 452, 453, 483, 0, 485,
	0, 0, 59, 61, 51, 0, 1019, 747, -2, -2,
	0, 0, 0, -2, 947, -2, 755, 0, 65, 68,
	69, 70, 71, 72, 0, 0, 0, 0, 127, 23,
	775, 0, 0, 333, 0, 378, 379, 0, 331, 177,
	181, 182, 531, 580, 785, 602, 605, 603, 604, 606,
	781, 781, 609, 781, 781, 781, 0, 0, 685, 0,
	212, 0, 214, 215, 216, 217, 218, 219, 220, 0,
	443, 0, 0, 436, 353, 331, 10, 8, 511, 331,
	12, 0, 721, 722, 714, 31, 447, 781, 0, 0,
	75, 123, 49, 0, 501, -2, 0, 0, 0, 45,
	46, 0, 0, 0, 0, 0, 0, 490, 0, 0,
	493, 0, 0, 0, 0, 484, 0, 0, 504, 989,
	486, 0, 488, 489, 58, 162, 0, 0, 52, 1019,
	54, 80, 0, 0, 781, 0, 327, 759, 760, 761,
	757, 788, 0, 0, 0, 0, 0, 778, 776, 0,
	0, 0, 337, 0, 353, 0, 0, 0, 0, 632,
	613, 682, 211, 213, 222, 0, 781, 445, 7, 11,
	353, 725, 508, 0, 140, 0, 19, 76, 0, 0,
	500, 508, 0, 508, 48, 508, 744, 0, 450, 479,
	481, 0, 476, 491, 492, 494, 0, 496, 0, 498,
	499, 454, 455, 456, 0, 0, 0, 0, 487, 0,
	748, 53, 0, 0, 83, 84, 749, 750, 751, 0,
	753, 66, 73, 0, 0, 78, 0, 25, 0, 777,
	24, 355, 0, 385, 608, 607, 610, 611, 0, 0,
	0, 0, 0, 708, 710, 9, 704, 448, 125, 736,
	0, 0, -2, 0, 0, 711, 508, 44, 711, 0,
	781, 473, 480, 781, 0, 474, 781, 475, 495, 497,
	466, 0, 0, 0, 0, 0, 471, -2, 81, 82,
	0, 0, 88, 781, 0, 0, 20, 779, 780, 0,
	612, 0, 0, 0, 223, 444, 0, 781, 706, 0,
	37, 0, 736, 726, 738, 740, 781, 33, 0, 732,
	0, 719, 43, 719, 745, 746, 477, 0, 482, 0,
	0, 0, 0, 485, 0, 85, 86, 87, 752, 77,
	0, 0, 633, 0, 636, 446, 709, 32, 781, 781,
	0, 38, 0, 741, -2, 0, 0, 0, 50, 42,
	41, 0, 0, 458, 460, 461, 462, 463, 464, 465,
	0, 0, 0, 504, 472, 0, 380, 634, 707, 705,
	0, 739, 0, -2, 0, 734, 733, 478, 457, 0,
	505, 506, 507, 456, 79, 0, 0, 729, 33, 0,
	459, 467, 0, 737, -2, 735, 635,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 377,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 378, 3, 379, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:405
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:410
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:411
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:419
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:424
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:444
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:464
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:485
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:501
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:518
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:537
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:548
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:560
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:571
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:587
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      []Statement{yyDollar[11].statement},
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:601
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:615
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:628
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[4].colIdent,
					TableName: yyDollar[8].tableName,
					Time:      yyDollar[5].str,
					Event:     yyDollar[6].strs,
					Body:      yyDollar[12].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:642
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:653
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 23:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:659
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 24:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:673
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:687
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:706
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:715
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:730
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:738
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 32:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:745
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:751
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:755
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:761
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:765
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:772
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:784
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:796
		{
			yyVAL.str = InsertStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:800
		{
			yyVAL.str = ReplaceStr
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:806
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:812
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:816
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:820
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:825
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:826
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:830
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:834
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:839
		{
			yyVAL.partitions = nil
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:843
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:849
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:853
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:857
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:861
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:867
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:871
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:884
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:888
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:894
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:899
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:903
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:909
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:916
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:923
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:930
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:938
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:948
		{
			yyVAL.str = ""
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:952
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:956
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:960
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:964
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:970
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:977
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:987
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:991
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:995
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 77:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1002
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1011
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 79:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1019
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1030
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1034
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1040
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1044
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1048
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1054
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1058
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1062
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1066
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1072
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1076
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1082
		{
			yyVAL.str = SessionStr
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1086
		{
			yyVAL.str = GlobalStr
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1091
		{
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1092
		{
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1096
		{
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1097
		{
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1098
		{
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1099
		{
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1100
		{
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1101
		{
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1102
		{
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1106
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1110
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1114
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1118
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1124
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1128
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1132
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1137
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1143
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1147
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1153
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1157
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1163
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1175
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1187
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1194
		{
			yyVAL.empty = struct{}{}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1196
		{
			yyVAL.empty = struct{}{}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1199
		{
			yyVAL.bytes = nil
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1203
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1207
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1212
		{
			yyVAL.bytes = nil
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1216
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1220
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1224
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1228
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1232
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1237
		{
			yyVAL.expr = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1241
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1246
		{
			yyVAL.expr = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1250
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1255
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1259
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1264
		{
			yyVAL.bytes = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1268
		{
			yyVAL.bytes = nil
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1274
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1281
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1287
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1291
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1296
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1300
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1304
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1308
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1318
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1323
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1329
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1340
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1345
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1351
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1364
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1369
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1374
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1379
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1385
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1390
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1395
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1400
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1405
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1410
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1415
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1420
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1425
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1434
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1444
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1449
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1454
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1461
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1468
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1476
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1481
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1486
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1491
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1497
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1503
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1509
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1515
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1522
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1526
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 193:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1530
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1534
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1538
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1544
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1548
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1552
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1556
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1560
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1564
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1568
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1572
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1576
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1582
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1588
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1594
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1600
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1604
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1609
		{
			yyVAL.sequence = &Sequence{}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1613
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1618
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1623
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1628
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1633
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1638
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1643
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1648
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1653
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1658
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1663
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1668
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1673
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1680
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1684
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1688
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1692
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1696
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1700
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1705
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1709
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1714
		{
			yyVAL.bytes = nil
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1728
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1733
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 293:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1994
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2000
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2005
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2010
		{
			yyVAL.optVal = nil
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2014
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2019
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2023
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2031
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2035
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2041
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2049
		{
			yyVAL.optVal = nil
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2053
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2057
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2066
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2070
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2074
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2079
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2083
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2088
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2092
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2097
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2101
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2105
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2110
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2114
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2118
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2123
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2127
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2131
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2137
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2142
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2146
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2150
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2156
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2160
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2166
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2170
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2176
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2180
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2185
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2189
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2193
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2197
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2201
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2205
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2209
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2213
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2217
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2223
		{
			yyVAL.str = ""
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2227
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2233
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2237
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2243
		{
			yyVAL.indexPartition = nil
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2247
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2251
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2257
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2261
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2265
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2269
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2273
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2277
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2281
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2285
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2289
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2295
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2299
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2305
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2310
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2316
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2320
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2326
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2331
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2335
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2345
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 376:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2350
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2357
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 378:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2364
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 379:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2371
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 380:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2380
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2392
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2396
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2400
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2404
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 385:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2410
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 386:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2421
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2431
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2435
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2439
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2445
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2449
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2453
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2457
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2461
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2465
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2471
		{
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2472
		{
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2476
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2480
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2485
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2492
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2496
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2503
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2507
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2513
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2517
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2522
		{
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2523
		{
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2527
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2531
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2537
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2541
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2545
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2550
		{
			setAllowComments(yylex, true)
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2554
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2560
		{
			yyVAL.bytes2 = nil
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2564
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2570
		{
			yyVAL.str = UnionStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2574
		{
			yyVAL.str = UnionAllStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2578
		{
			yyVAL.str = UnionDistinctStr
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2583
		{
			yyVAL.str = ""
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2587
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2591
		{
			yyVAL.str = SQLCacheStr
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2596
		{
			yyVAL.str = ""
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2600
		{
			yyVAL.str = DistinctStr
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2605
		{
			yyVAL.str = ""
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2609
		{
			yyVAL.str = StraightJoinHint
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2614
		{
			yyVAL.selectExprs = nil
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2618
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2624
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2628
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2634
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2638
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2642
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 436:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2646
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2651
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2655
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2659
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2666
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2671
		{
			yyVAL.overExpr = nil
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2675
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2679
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2683
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2687
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2692
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2696
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2702
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2706
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2716
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2720
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2724
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2729
		{
			yyVAL.strs = []string{}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2733
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2739
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2743
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2749
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2753
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2757
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2761
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2765
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2769
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2775
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 467:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2779
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2785
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2790
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2794
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2800
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2804
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2817
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2821
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2825
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2829
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2835
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2837
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2841
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2843
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2847
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2849
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2852
		{
			yyVAL.empty = struct{}{}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2854
		{
			yyVAL.empty = struct{}{}
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2857
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2861
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2865
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2872
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2878
		{
			yyVAL.str = JoinStr
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2882
		{
			yyVAL.str = JoinStr
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2886
		{
			yyVAL.str = JoinStr
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2892
		{
			yyVAL.str = StraightJoinStr
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.str = LeftJoinStr
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2902
		{
			yyVAL.str = LeftJoinStr
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2906
		{
			yyVAL.str = RightJoinStr
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2910
		{
			yyVAL.str = RightJoinStr
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2916
		{
			yyVAL.str = NaturalJoinStr
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2920
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2930
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2934
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2940
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2944
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2949
		{
			yyVAL.indexHints = nil
		}
	case 505:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2953
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2957
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2961
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2966
		{
			yyVAL.expr = nil
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2970
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2975
		{
			yyVAL.columns = nil
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2979
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2985
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2989
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2993
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2997
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3001
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3005
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3009
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3015
		{
			yyVAL.str = ""
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3019
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3025
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3029
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3035
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3039
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3043
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3047
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 527:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3051
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3055
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3059
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3063
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 531:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3067
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3071
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3077
		{
			yyVAL.str = IsNullStr
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3081
		{
			yyVAL.str = IsNotNullStr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3085
		{
			yyVAL.str = IsTrueStr
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3089
		{
			yyVAL.str = IsNotTrueStr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3093
		{
			yyVAL.str = IsFalseStr
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3097
		{
			yyVAL.str = IsNotFalseStr
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3103
		{
			yyVAL.str = EqualStr
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3107
		{
			yyVAL.str = LessThanStr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3111
		{
			yyVAL.str = GreaterThanStr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3115
		{
			yyVAL.str = LessEqualStr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3119
		{
			yyVAL.str = GreaterEqualStr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3123
		{
			yyVAL.str = NotEqualStr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3127
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3131
		{
			yyVAL.str = PosixRegexStr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3135
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3139
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3143
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3148
		{
			yyVAL.expr = nil
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3152
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3158
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3162
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3166
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3172
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3178
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3182
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3188
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3192
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3196
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3200
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3204
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3208
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3212
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3216
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3220
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3224
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3228
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3232
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3236
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3240
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3244
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3248
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3252
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3256
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3260
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3264
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3268
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3272
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 580:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3276
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3280
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3284
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3288
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3296
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3310
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3314
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3318
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3326
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3334
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3342
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3352
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3356
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 597:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3360
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 598:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3364
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3368
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3378
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3382
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 602:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3386
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 603:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3390
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 604:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3394
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 605:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3398
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3402
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 607:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3406
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 608:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3410
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 609:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3414
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 610:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3418
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 611:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3422
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 612:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3426
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 613:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3430
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3434
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3438
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3443
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3453
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3457
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3461
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3465
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3470
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3475
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3480
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3485
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3489
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3503
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3507
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3511
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3515
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3521
		{
			yyVAL.str = ""
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3525
		{
			yyVAL.str = BooleanModeStr
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3529
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 635:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3533
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3537
		{
			yyVAL.str = QueryExpansionStr
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3543
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3547
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3553
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3557
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3561
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3565
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3569
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3573
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3579
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3583
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3587
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3591
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3595
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3599
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3603
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3607
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3611
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3615
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3619
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3623
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3627
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3631
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3635
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3639
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3643
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3647
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3651
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3655
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3659
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3663
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3667
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3671
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3675
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3679
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3685
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3689
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3693
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3697
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3701
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3705
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3709
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3713
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3718
		{
			yyVAL.expr = nil
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3722
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3727
		{
			yyVAL.str = string("")
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3731
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3737
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3741
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3747
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3752
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3754
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3757
		{
			yyVAL.expr = nil
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3761
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3767
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3771
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 692:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3775
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3781
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3787
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3791
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3796
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3801
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3805
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3809
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3813
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3817
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3821
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3825
		{
			yyVAL.expr = &NullVal{}
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3830
		{
			yyVAL.exprs = nil
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3834
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 706:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3839
		{
			yyVAL.expr = nil
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3843
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3849
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3853
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3859
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3864
		{
			yyVAL.orderBy = nil
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3868
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3874
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3878
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3884
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3889
		{
			yyVAL.str = AscScr
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3893
		{
			yyVAL.str = AscScr
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3897
		{
			yyVAL.str = DescScr
		}
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3902
		{
			yyVAL.limit = nil
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3906
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3910
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 722:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3914
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.str = ""
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3923
		{
			yyVAL.str = ForUpdateStr
		}
	case 725:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3927
		{
			yyVAL.str = ShareModeStr
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3940
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3944
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3948
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 729:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3953
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3957
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 731:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3961
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3968
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3972
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3976
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 735:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3980
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3985
		{
			yyVAL.updateExprs = nil
		}
	case 737:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3989
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3995
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3999
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4005
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4009
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4015
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4021
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4031
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4035
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4041
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4047
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4051
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4057
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4065
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4070
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4074
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4080
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4086
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4093
		{
			yyVAL.bytes = []byte("charset")
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4100
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4104
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4108
		{
			yyVAL.expr = &Default{}
		}
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4113
		{
			yyVAL.empty = struct{}{}
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4115
		{
			yyVAL.empty = struct{}{}
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4118
		{
			yyVAL.str = ""
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4120
		{
			yyVAL.str = IgnoreStr
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4124
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4128
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4135
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4141
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4145
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4150
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4157
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4163
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4167
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4171
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4177
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4181
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4185
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4191
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4195
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4202
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4209
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4213
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4220
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4226
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4230
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4514
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4523
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
