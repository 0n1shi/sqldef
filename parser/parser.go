// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const STATUS = 57489
const VARIABLES = 57490
const RESTRICT = 57491
const CASCADE = 57492
const NO = 57493
const ACTION = 57494
const PERMISSIVE = 57495
const RESTRICTIVE = 57496
const PUBLIC = 57497
const CURRENT_USER = 57498
const SESSION_USER = 57499
const PAD_INDEX = 57500
const FILLFACTOR = 57501
const IGNORE_DUP_KEY = 57502
const STATISTICS_NORECOMPUTE = 57503
const STATISTICS_INCREMENTAL = 57504
const ALLOW_ROW_LOCKS = 57505
const ALLOW_PAGE_LOCKS = 57506
const BEFORE = 57507
const AFTER = 57508
const EACH = 57509
const ROW = 57510
const SCROLL = 57511
const CURSOR = 57512
const OPEN = 57513
const CLOSE = 57514
const FETCH = 57515
const PRIOR = 57516
const FIRST = 57517
const LAST = 57518
const DEALLOCATE = 57519
const INSTEAD = 57520
const OF = 57521
const DEFERRABLE = 57522
const INITIALLY = 57523
const IMMEDIATE = 57524
const DEFERRED = 57525
const CONCURRENTLY = 57526
const SQL = 57527
const SECURITY = 57528
const BEGIN = 57529
const START = 57530
const TRANSACTION = 57531
const COMMIT = 57532
const ROLLBACK = 57533
const BIT = 57534
const TINYINT = 57535
const SMALLINT = 57536
const SMALLSERIAL = 57537
const MEDIUMINT = 57538
const INT = 57539
const INTEGER = 57540
const SERIAL = 57541
const BIGINT = 57542
const BIGSERIAL = 57543
const INTNUM = 57544
const REAL = 57545
const DOUBLE = 57546
const PRECISION = 57547
const FLOAT_TYPE = 57548
const DECIMAL = 57549
const NUMERIC = 57550
const SMALLMONEY = 57551
const MONEY = 57552
const TIME = 57553
const TIMESTAMP = 57554
const DATETIME = 57555
const YEAR = 57556
const DATETIMEOFFSET = 57557
const DATETIME2 = 57558
const SMALLDATETIME = 57559
const CHAR = 57560
const VARCHAR = 57561
const VARYING = 57562
const BOOL = 57563
const CHARACTER = 57564
const VARBINARY = 57565
const NCHAR = 57566
const NVARCHAR = 57567
const NTEXT = 57568
const UUID = 57569
const TEXT = 57570
const TINYTEXT = 57571
const MEDIUMTEXT = 57572
const LONGTEXT = 57573
const CITEXT = 57574
const BLOB = 57575
const TINYBLOB = 57576
const MEDIUMBLOB = 57577
const LONGBLOB = 57578
const JSON = 57579
const JSONB = 57580
const ENUM = 57581
const GEOMETRY = 57582
const POINT = 57583
const LINESTRING = 57584
const POLYGON = 57585
const GEOMETRYCOLLECTION = 57586
const MULTIPOINT = 57587
const MULTILINESTRING = 57588
const MULTIPOLYGON = 57589
const VARIADIC = 57590
const ARRAY = 57591
const NOW = 57592
const GETDATE = 57593
const BPCHAR = 57594
const TEXT_PATTERN_OPS = 57595
const NULLX = 57596
const AUTO_INCREMENT = 57597
const APPROXNUM = 57598
const SIGNED = 57599
const UNSIGNED = 57600
const ZEROFILL = 57601
const ZONE = 57602
const AUTOINCREMENT = 57603
const DATABASES = 57604
const TABLES = 57605
const VSCHEMA_TABLES = 57606
const EXTENDED = 57607
const FULL = 57608
const PROCESSLIST = 57609
const NAMES = 57610
const CHARSET = 57611
const GLOBAL = 57612
const SESSION = 57613
const ISOLATION = 57614
const LEVEL = 57615
const READ = 57616
const WRITE = 57617
const ONLY = 57618
const REPEATABLE = 57619
const COMMITTED = 57620
const UNCOMMITTED = 57621
const SERIALIZABLE = 57622
const NEW = 57623
const CONCAT_NULL_YIELDS_NULL = 57624
const CURSOR_CLOSE_ON_COMMIT = 57625
const QUOTED_IDENTIFIER = 57626
const ARITHABORT = 57627
const FMTONLY = 57628
const NOCOUNT = 57629
const NOEXEC = 57630
const NUMERIC_ROUNDABORT = 57631
const ANSI_DEFAULTS = 57632
const ANSI_NULL_DFLT_OFF = 57633
const ANSI_NULL_DFLT_ON = 57634
const ANSI_NULLS = 57635
const ANSI_PADDING = 57636
const ANSI_WARNINGS = 57637
const FORCEPLAN = 57638
const SHOWPLAN_ALL = 57639
const SHOWPLAN_TEXT = 57640
const SHOWPLAN_XML = 57641
const IMPLICIT_TRANSACTIONS = 57642
const REMOTE_PROC_TRANSACTIONS = 57643
const XACT_ABORT = 57644
const CURRENT_TIMESTAMP = 57645
const DATABASE = 57646
const CURRENT_DATE = 57647
const CURRENT_TIME = 57648
const LOCALTIME = 57649
const LOCALTIMESTAMP = 57650
const UTC_DATE = 57651
const UTC_TIME = 57652
const UTC_TIMESTAMP = 57653
const REPLACE = 57654
const CONVERT = 57655
const CAST = 57656
const SUBSTR = 57657
const SUBSTRING = 57658
const GROUP_CONCAT = 57659
const SEPARATOR = 57660
const INHERIT = 57661
const LEAD = 57662
const LAG = 57663
const MATCH = 57664
const AGAINST = 57665
const BOOLEAN = 57666
const LANGUAGE = 57667
const WITH = 57668
const WITHOUT = 57669
const PARSER = 57670
const QUERY = 57671
const EXPANSION = 57672
const UNUSED = 57673
const VIRTUAL = 57674
const STORED = 57675
const GENERATED = 57676
const ALWAYS = 57677
const IDENTITY = 57678
const SEQUENCE = 57679
const INCREMENT = 57680
const MINVALUE = 57681
const CACHE = 57682
const CYCLE = 57683
const OWNED = 57684
const NONE = 57685
const CLUSTERED = 57686
const NONCLUSTERED = 57687
const REPLICATION = 57688
const COLUMNSTORE = 57689
const INCLUDE = 57690
const HOLDLOCK = 57691
const NOLOCK = 57692
const NOWAIT = 57693
const PAGLOCK = 57694
const ROWLOCK = 57695
const TABLELOCK = 57696
const DEFINER = 57697
const INVOKER = 57698
const TYPECAST = 57699
const CHECK = 57700
const OVER = 57701

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	130, 390,
	-2, 143,
	-1, 201,
	116, 946,
	249, 946,
	255, 946,
	-2, 269,
	-1, 202,
	116, 947,
	249, 947,
	255, 947,
	-2, 270,
	-1, 203,
	249, 949,
	255, 949,
	-2, 304,
	-1, 204,
	249, 950,
	255, 950,
	-2, 304,
	-1, 205,
	249, 1051,
	255, 1051,
	-2, 311,
	-1, 206,
	249, 997,
	255, 997,
	-2, 304,
	-1, 207,
	249, 1002,
	255, 1002,
	-2, 311,
	-1, 208,
	116, 1000,
	249, 1000,
	255, 1000,
	-2, 276,
	-1, 210,
	116, 1050,
	249, 1050,
	255, 1050,
	-2, 311,
	-1, 211,
	249, 1036,
	255, 1036,
	-2, 324,
	-1, 212,
	249, 1042,
	255, 1042,
	-2, 324,
	-1, 213,
	249, 990,
	255, 990,
	-2, 324,
	-1, 214,
	249, 986,
	255, 986,
	-2, 324,
	-1, 216,
	116, 945,
	249, 945,
	255, 945,
	-2, 285,
	-1, 217,
	116, 1040,
	249, 1040,
	255, 1040,
	-2, 286,
	-1, 218,
	116, 988,
	249, 988,
	255, 988,
	-2, 287,
	-1, 219,
	116, 985,
	249, 985,
	255, 985,
	-2, 288,
	-1, 220,
	116, 977,
	249, 977,
	255, 977,
	-2, 289,
	-1, 222,
	116, 1049,
	249, 1049,
	255, 1049,
	-2, 291,
	-1, 225,
	116, 958,
	249, 958,
	255, 958,
	-2, 261,
	-1, 226,
	116, 1038,
	249, 1038,
	255, 1038,
	-2, 304,
	-1, 227,
	116, 1039,
	249, 1039,
	255, 1039,
	-2, 304,
	-1, 228,
	116, 959,
	249, 959,
	255, 959,
	-2, 304,
	-1, 229,
	116, 960,
	249, 960,
	255, 960,
	-2, 304,
	-1, 230,
	116, 961,
	249, 961,
	255, 961,
	-2, 304,
	-1, 231,
	116, 1029,
	249, 1029,
	255, 1029,
	-2, 267,
	-1, 232,
	116, 1058,
	249, 1058,
	255, 1058,
	-2, 268,
	-1, 233,
	116, 969,
	249, 969,
	255, 969,
	-2, 294,
	-1, 234,
	116, 1006,
	249, 1006,
	255, 1006,
	-2, 295,
	-1, 235,
	116, 984,
	249, 984,
	255, 984,
	-2, 296,
	-1, 236,
	116, 1007,
	249, 1007,
	255, 1007,
	-2, 297,
	-1, 237,
	116, 970,
	249, 970,
	255, 970,
	-2, 298,
	-1, 238,
	116, 994,
	249, 994,
	255, 994,
	-2, 299,
	-1, 239,
	116, 993,
	249, 993,
	255, 993,
	-2, 300,
	-1, 240,
	116, 995,
	249, 995,
	255, 995,
	-2, 301,
	-1, 241,
	116, 944,
	249, 944,
	255, 944,
	-2, 243,
	-1, 242,
	116, 1041,
	249, 1041,
	255, 1041,
	-2, 244,
	-1, 243,
	116, 1030,
	249, 1030,
	255, 1030,
	-2, 245,
	-1, 244,
	116, 1032,
	249, 1032,
	255, 1032,
	-2, 246,
	-1, 245,
	116, 989,
	249, 989,
	255, 989,
	-2, 247,
	-1, 246,
	116, 974,
	249, 974,
	255, 974,
	-2, 248,
	-1, 247,
	116, 975,
	249, 975,
	255, 975,
	-2, 249,
	-1, 248,
	116, 1023,
	249, 1023,
	255, 1023,
	-2, 250,
	-1, 249,
	116, 942,
	249, 942,
	255, 942,
	-2, 251,
	-1, 250,
	116, 943,
	249, 943,
	255, 943,
	-2, 252,
	-1, 251,
	116, 1014,
	249, 1014,
	255, 1014,
	-2, 306,
	-1, 252,
	116, 963,
	249, 963,
	255, 963,
	-2, 306,
	-1, 253,
	116, 967,
	249, 967,
	255, 967,
	-2, 306,
	-1, 254,
	116, 962,
	249, 962,
	255, 962,
	-2, 308,
	-1, 255,
	116, 1001,
	249, 1001,
	255, 1001,
	-2, 308,
	-1, 256,
	116, 992,
	249, 992,
	255, 992,
	-2, 259,
	-1, 257,
	116, 1031,
	249, 1031,
	255, 1031,
	-2, 260,
	-1, 292,
	142, 400,
	-2, 956,
	-1, 529,
	59, 365,
	-2, 362,
	-1, 548,
	119, 772,
	-2, 232,
	-1, 566,
	119, 770,
	-2, 766,
	-1, 567,
	119, 771,
	-2, 767,
	-1, 673,
	119, 772,
	-2, 232,
	-1, 695,
	266, 781,
	-2, 679,
	-1, 727,
	266, 781,
	-2, 429,
	-1, 758,
	5, 33,
	-2, 13,
	-1, 764,
	5, 33,
	-2, 15,
	-1, 909,
	266, 781,
	-2, 429,
	-1, 924,
	116, 324,
	266, 324,
	378, 324,
	-2, 237,
	-1, 925,
	266, 289,
	378, 289,
	-2, 238,
	-1, 926,
	266, 290,
	378, 290,
	-2, 239,
	-1, 1068,
	119, 774,
	-2, 769,
	-1, 1079,
	266, 781,
	-2, 304,
	-1, 1080,
	57, 304,
	59, 304,
	239, 304,
	-2, 949,
	-1, 1081,
	57, 642,
	-2, 958,
	-1, 1082,
	57, 304,
	-2, 959,
	-1, 1083,
	57, 308,
	-2, 962,
	-1, 1084,
	57, 645,
	-2, 977,
	-1, 1086,
	57, 647,
	-2, 1028,
	-1, 1087,
	57, 304,
	-2, 1038,
	-1, 1088,
	57, 650,
	-2, 1047,
	-1, 1089,
	57, 652,
	-2, 942,
	-1, 1090,
	57, 653,
	-2, 944,
	-1, 1091,
	57, 654,
	-2, 974,
	-1, 1092,
	57, 655,
	-2, 992,
	-1, 1093,
	57, 308,
	-2, 1001,
	-1, 1094,
	57, 657,
	-2, 1030,
	-1, 1095,
	57, 658,
	-2, 1031,
	-1, 1096,
	57, 659,
	-2, 1041,
	-1, 1097,
	57, 660,
	-2, 967,
	-1, 1098,
	57, 661,
	-2, 1014,
	-1, 1099,
	57, 304,
	-2, 960,
	-1, 1100,
	57, 304,
	-2, 961,
	-1, 1101,
	57, 664,
	-2, 1029,
	-1, 1102,
	57, 665,
	-2, 1036,
	-1, 1103,
	57, 304,
	-2, 1051,
	-1, 1104,
	57, 304,
	-2, 997,
	-1, 1105,
	57, 668,
	-2, 1000,
	-1, 1106,
	57, 304,
	-2, 1002,
	-1, 1107,
	57, 304,
	-2, 1050,
	-1, 1133,
	116, 304,
	266, 304,
	378, 304,
	-2, 233,
	-1, 1147,
	266, 781,
	-2, 429,
	-1, 1208,
	58, 95,
	-2, 162,
	-1, 1211,
	58, 95,
	-2, 162,
	-1, 1260,
	5, 34,
	-2, 555,
	-1, 1330,
	5, 33,
	-2, 14,
	-1, 1343,
	187, 60,
	-2, 162,
	-1, 1385,
	58, 95,
	-2, 161,
	-1, 1533,
	86, 1022,
	-2, 91,
	-1, 1534,
	86, 972,
	-2, 92,
	-1, 1538,
	86, 951,
	-2, 756,
	-1, 1540,
	86, 996,
	-2, 758,
	-1, 1620,
	55, 47,
	57, 47,
	-2, 49,
	-1, 1777,
	5, 33,
	-2, 727,
	-1, 1802,
	5, 33,
	-2, 56,
	-1, 1869,
	5, 34,
	-2, 728,
	-1, 1898,
	5, 33,
	-2, 730,
	-1, 1919,
	5, 34,
	-2, 731,
}

const yyPrivate = 57344

const yyLast = 19550

var yyAct = [...]int16{
	567, 1795, 1829, 1828, 1643, 1710, 657, 1825, 1768, 863,
	1728, 1878, 33, 1656, 1173, 1510, 1711, 33, 33, 180,
	1800, 685, 1655, 1787, 582, 192, 957, 1159, 1532, 1641,
	1630, 33, 33, 1645, 771, 1518, 1703, 1179, 984, 1347,
	1344, 1511, 1519, 1319, 981, 1535, 753, 1529, 1324, 1256,
	793, 353, 1155, 1190, 1515, 26, 996, 862, 1078, 1045,
	518, 718, 1240, 1250, 191, 1176, 650, 1115, 937, 1118,
	348, 752, 1022, 514, 593, 1399, 972, 319, 668, 933,
	655, 193, 1217, 199, 1142, 887, 521, 637, 194, 1067,
	625, 287, 656, 545, 367, 368, 258, 547, 553, 281,
	961, 302, 175, 1423, 321, 570, 1065, 761, 1126, 1203,
	1193, 1192, 1700, 9, 1306, 1384, 335, 820, 317, 1612,
	830, 1194, 830, 183, 719, 363, 364, 267, 814, 632,
	817, 1156, 1195, 184, 639, 640, 832, 833, 834, 835,
	836, 837, 838, 660, 815, 816, 813, 839, 840, 841,
	842, 819, 818, 828, 829, 821, 822, 823, 824, 825,
	826, 827, 820, 878, 799, 830, 641, 638, 912, 33,
	33, 543, 25, 185, 186, 1921, 33, 1879, 1880, 1881,
	1882, 1883, 1884, 1859, 180, 1917, 1909, 1592, 1818, 180,
	1221, 33, 823, 824, 825, 826, 827, 820, 1471, 1472,
	830, 675, 818, 828, 829, 821, 822, 823, 824, 825,
	826, 827, 820, 30, 325, 830, 320, 1222, 173, 174,
	761, 284, 1203, 1193, 1192, 20, 1585, 15, 1012, 1013,
	594, 595, 198, 198, 1194, 1796, 1201, 1910, 1473, 1504,
	16, 1253, 23, 1314, 1858, 1195, 1200, 590, 1466, 761,
	1817, 1203, 1193, 1192, 1414, 1582, 187, 1850, 17, 18,
	1738, 180, 33, 1194, 180, 1806, 180, 180, 1805, 180,
	297, 1807, 1568, 263, 1195, 265, 33, 180, 180, 1851,
	1852, 180, 33, 947, 761, 277, 1203, 1193, 1192, 1196,
	1197, 1199, 1657, 33, 1658, 1198, 1739, 1740, 1194, 1750,
	645, 376, 946, 572, 33, 323, 954, 355, 325, 1195,
	857, 336, 1458, 1123, 180, 821, 822, 823, 824, 825,
	826, 827, 820, 351, 352, 830, 1421, 512, 1747, 337,
	338, 339, 340, 325, 745, 325, 1477, 744, 314, 1272,
	1270, 1855, 349, 1552, 317, 318, 1551, 329, 1479, 1201,
	379, 1335, 558, 264, 560, 559, 170, 180, 33, 1200,
	1753, 180, 586, 587, 588, 589, 377, 1674, 633, 305,
	259, 262, 537, 1813, 1812, 1754, 1651, 273, 1201, 831,
	612, 831, 639, 640, 312, 1474, 300, 1591, 1200, 1593,
	373, 1553, 30, 301, 1334, 761, 557, 1203, 1193, 1192,
	1382, 374, 1196, 1197, 1199, 269, 1175, 1373, 1198, 1194,
	555, 767, 768, 1201, 1002, 1241, 1704, 1212, 778, 596,
	1195, 598, 298, 1200, 831, 1422, 171, 985, 958, 29,
	1204, 1196, 1197, 1199, 269, 779, 979, 1198, 528, 299,
	268, 987, 1895, 574, 575, 19, 577, 1393, 580, 581,
	801, 308, 800, 303, 313, 536, 535, 21, 22, 831,
	24, 310, 309, 359, 643, 913, 1196, 1197, 1199, 614,
	523, 929, 1198, 617, 831, 631, 1678, 198, 1748, 1222,
	781, 619, 1216, 513, 1854, 176, 1673, 27, 965, 606,
	172, 1799, 336, 796, 522, 1798, 1797, 169, 1729, 1731,
	613, 594, 595, 168, 188, 533, 1584, 542, 350, 529,
	182, 620, 33, 1914, 1133, 986, 328, 509, 33, 564,
	791, 1872, 791, 1766, 1201, 1494, 299, 1524, 6, 7,
	283, 847, 848, 1660, 1200, 1475, 1476, 1478, 1480, 1481,
	1816, 1483, 1286, 1204, 1258, 1146, 177, 988, 989, 990,
	991, 992, 993, 994, 861, 332, 860, 622, 334, 601,
	1374, 1375, 1376, 526, 624, 524, 525, 527, 270, 271,
	1596, 761, 1204, 1203, 1193, 1192, 728, 1196, 1197, 1199,
	1730, 272, 276, 1198, 831, 1194, 1282, 306, 584, 583,
	592, 1748, 810, 307, 1808, 739, 1195, 270, 271, 730,
	731, 618, 733, 808, 180, 736, 737, 1204, 285, 1785,
	272, 180, 1809, 33, 720, 623, 33, 1659, 33, 810,
	1748, 1233, 33, 1232, 33, 557, 1231, 928, 794, 795,
	797, 1029, 1281, 644, 298, 642, 1230, 997, 998, 555,
	715, 1229, 1228, 1227, 717, 1027, 1028, 1026, 1225, 33,
	1810, 299, 740, 1773, 1468, 1751, 1119, 520, 1291, 759,
	1177, 759, 1119, 758, 1496, 764, 315, 784, 316, 512,
	828, 829, 821, 822, 823, 824, 825, 826, 827, 820,
	798, 754, 830, 806, 809, 808, 1001, 274, 809, 808,
	311, 1550, 1329, 732, 1586, 847, 848, 1004, 579, 1688,
	1201, 810, 578, 1495, 804, 810, 1000, 770, 774, 763,
	1200, 278, 782, 513, 929, 983, 279, 1280, 1204, 626,
	33, 520, 809, 808, 1687, 1264, 803, 1263, 1590, 33,
	520, 647, 809, 808, 532, 858, 1400, 936, 1686, 810,
	759, 1587, 1025, 809, 808, 927, 809, 808, 564, 810,
	1470, 33, 180, 1196, 1197, 1199, 1401, 942, 33, 1198,
	810, 1589, 1299, 810, 180, 807, 1749, 931, 809, 808,
	809, 808, 573, 1588, 941, 519, 180, 1402, 33, 1398,
	809, 808, 33, 809, 808, 810, 531, 810, 358, 33,
	892, 361, 956, 365, 366, 893, 372, 810, 845, 520,
	810, 33, 930, 1257, 755, 508, 573, 573, 510, 555,
	916, 1017, 1019, 1020, 772, 1131, 759, 776, 1018, 780,
	963, 950, 859, 513, 985, 513, 1400, 949, 754, 1542,
	1243, 1244, 1245, 948, 714, 1023, 935, 599, 987, 597,
	569, 539, 1046, 1226, 1047, 944, 1401, 647, 33, 33,
	772, 591, 859, 538, 999, 958, 33, 1223, 943, 1003,
	945, 1059, 33, 880, 881, 882, 883, 884, 885, 886,
	738, 761, 636, 1203, 1193, 1192, 635, 1109, 1111, 995,
	973, 929, 929, 1120, 600, 1194, 761, 1005, 604, 1007,
	1904, 1903, 973, 1902, 1204, 634, 1195, 1822, 929, 1486,
	759, 1332, 1891, 1849, 929, 1383, 1066, 1069, 1871, 929,
	1624, 1775, 986, 1048, 530, 1051, 1776, 1050, 1317, 759,
	893, 198, 1315, 1073, 788, 1755, 1627, 929, 1060, 1063,
	513, 973, 1603, 1302, 1068, 1826, 647, 1315, 1784, 33,
	1301, 831, 1614, 1626, 988, 989, 990, 991, 992, 993,
	994, 755, 951, 1707, 1625, 1623, 1623, 1024, 1152, 772,
	788, 1563, 1332, 1562, 1559, 1558, 33, 1627, 1148, 1627,
	1149, 788, 1555, 1151, 33, 1074, 1076, 1150, 33, 978,
	1132, 1114, 1784, 980, 788, 1554, 788, 1487, 761, 1125,
	626, 1138, 929, 973, 1158, 1698, 1134, 1071, 929, 1333,
	1201, 1332, 1006, 973, 1011, 1135, 788, 787, 748, 747,
	1200, 742, 743, 1163, 742, 741, 1180, 1124, 1897, 1127,
	1128, 1219, 1632, 1635, 1636, 1637, 1633, 1157, 1634, 1638,
	190, 189, 1788, 1789, 754, 958, 1578, 929, 647, 953,
	974, 1138, 1784, 1137, 932, 919, 1285, 915, 1023, 1062,
	1062, 735, 1205, 1196, 1197, 1199, 734, 1064, 775, 1198,
	729, 611, 513, 513, 610, 1867, 761, 611, 1071, 1549,
	1627, 1737, 1652, 1112, 611, 1525, 33, 1138, 1112, 1497,
	819, 818, 828, 829, 821, 822, 823, 824, 825, 826,
	827, 820, 1284, 1207, 830, 1138, 1265, 973, 788, 1246,
	1632, 1635, 1636, 1637, 1633, 914, 1634, 1638, 355, 750,
	749, 683, 1220, 1826, 746, 515, 647, 647, 1844, 1842,
	1814, 325, 180, 858, 351, 352, 1788, 1789, 1791, 354,
	178, 756, 1556, 1316, 349, 1269, 1237, 1236, 769, 1215,
	1144, 1214, 1154, 1153, 33, 1273, 1130, 977, 955, 726,
	757, 725, 723, 648, 602, 33, 544, 755, 540, 517,
	356, 357, 1892, 342, 341, 330, 11, 1174, 615, 1218,
	1024, 1242, 751, 603, 360, 1178, 266, 1722, 1720, 1208,
	1502, 1794, 1723, 1721, 1793, 1719, 1718, 1290, 1724, 1326,
	1636, 1637, 1066, 1857, 1204, 33, 1696, 33, 33, 33,
	1606, 1313, 877, 686, 516, 1311, 1665, 1304, 585, 33,
	33, 33, 33, 33, 33, 33, 33, 1338, 759, 33,
	1068, 1337, 1327, 33, 1288, 1312, 759, 1310, 1307, 713,
	1330, 1865, 754, 1667, 1764, 1328, 1309, 33, 33, 819,
	818, 828, 829, 821, 822, 823, 824, 825, 826, 827,
	820, 1410, 1320, 830, 1168, 1169, 997, 998, 375, 33,
	1396, 1391, 1392, 1640, 1172, 1321, 712, 1377, 1380, 1165,
	1166, 1381, 609, 607, 605, 275, 258, 1144, 1116, 952,
	1734, 1206, 1121, 971, 1411, 1408, 1409, 766, 630, 1160,
	1864, 964, 1339, 1340, 1341, 178, 1345, 1691, 1594, 1161,
	178, 1412, 958, 975, 1425, 1403, 1404, 1405, 1406, 1407,
	1863, 1417, 1824, 1315, 1547, 1467, 1546, 33, 1545, 1424,
	1544, 1235, 1426, 1911, 1455, 1386, 1387, 1388, 1389, 1390,
	1416, 1415, 1465, 33, 967, 1493, 968, 969, 970, 1459,
	1234, 180, 180, 534, 33, 1144, 33, 960, 513, 966,
	962, 1490, 282, 831, 1499, 755, 626, 629, 628, 1488,
	1068, 1622, 777, 1492, 652, 976, 1512, 8, 1, 1527,
	1491, 1517, 178, 33, 1346, 178, 1508, 178, 178, 13,
	178, 12, 1498, 1767, 1457, 1305, 33, 362, 378, 178,
	1255, 856, 178, 672, 1752, 1513, 1343, 1672, 1369, 1370,
	1371, 929, 1318, 369, 370, 371, 658, 1877, 1526, 1342,
	1385, 1208, 1208, 1385, 1208, 1208, 626, 626, 1507, 1548,
	1394, 1372, 1541, 568, 1397, 178, 304, 1300, 1075, 565,
	541, 14, 1503, 1010, 1331, 765, 608, 1395, 1174, 626,
	982, 790, 290, 783, 819, 818, 828, 829, 821, 822,
	823, 824, 825, 826, 827, 820, 511, 28, 830, 10,
	513, 1224, 291, 289, 288, 286, 1565, 1566, 178, 1560,
	1561, 571, 178, 1569, 322, 197, 1564, 195, 196, 200,
	1530, 1765, 1639, 1269, 33, 1522, 1661, 616, 513, 1141,
	1070, 1072, 1273, 843, 1804, 1537, 1833, 1323, 1862, 1823,
	1289, 874, 1117, 659, 1016, 671, 670, 1122, 669, 1597,
	1774, 812, 831, 1521, 180, 180, 1617, 1631, 772, 1629,
	1628, 1790, 1786, 1520, 180, 180, 33, 1697, 1581, 1425,
	1599, 33, 1601, 1763, 1505, 1167, 1501, 1191, 33, 959,
	1170, 5, 1202, 1610, 1189, 198, 1609, 513, 4, 3,
	1188, 1613, 1615, 1187, 1186, 1485, 1616, 33, 33, 1184,
	1185, 1136, 1182, 1139, 1140, 1668, 1649, 1670, 1671, 1621,
	1183, 1602, 1181, 1162, 1543, 1605, 760, 759, 1653, 2,
	0, 0, 1666, 0, 0, 0, 0, 1385, 1669, 0,
	0, 1171, 1180, 0, 0, 180, 0, 0, 1677, 0,
	0, 0, 0, 1675, 0, 0, 0, 0, 1679, 0,
	1611, 0, 0, 0, 0, 0, 0, 0, 0, 180,
	0, 0, 0, 180, 180, 0, 0, 0, 180, 180,
	180, 180, 180, 1712, 0, 0, 1238, 0, 0, 0,
	180, 0, 0, 180, 0, 1694, 0, 180, 0, 1695,
	0, 33, 1708, 33, 0, 0, 1702, 1706, 565, 0,
	0, 33, 0, 1713, 0, 0, 1716, 1522, 33, 1725,
	0, 1714, 1715, 0, 1717, 0, 1527, 1736, 0, 180,
	1733, 1735, 1693, 0, 0, 513, 1745, 1254, 0, 0,
	0, 0, 0, 0, 0, 0, 759, 0, 0, 180,
	1073, 1260, 1261, 0, 1262, 0, 1744, 0, 180, 0,
	1615, 1337, 1615, 1615, 565, 178, 324, 831, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 1650, 1772, 0,
	1600, 0, 513, 33, 1579, 1604, 0, 1781, 0, 1662,
	1792, 646, 1287, 0, 0, 0, 0, 0, 1293, 0,
	0, 1803, 1295, 1296, 0, 1297, 1298, 759, 626, 1676,
	721, 1777, 1758, 0, 0, 1303, 1522, 33, 727, 0,
	0, 1522, 1522, 1522, 1522, 1522, 0, 0, 1770, 33,
	33, 1827, 1712, 0, 0, 0, 1522, 0, 759, 0,
	1702, 1712, 1802, 1702, 1821, 0, 0, 0, 1830, 0,
	1835, 1839, 0, 0, 0, 0, 0, 1836, 0, 762,
	1838, 762, 1819, 0, 0, 33, 819, 818, 828, 829,
	821, 822, 823, 824, 825, 826, 827, 820, 1112, 1856,
	830, 1861, 759, 0, 0, 1866, 1832, 802, 0, 940,
	0, 0, 1522, 33, 0, 0, 33, 33, 33, 180,
	33, 1522, 198, 1888, 513, 0, 0, 844, 846, 0,
	0, 565, 513, 178, 1874, 0, 1875, 1413, 1516, 1746,
	1896, 1890, 33, 33, 1894, 178, 0, 1876, 0, 727,
	1885, 1886, 1887, 0, 0, 0, 0, 178, 0, 1830,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 1908,
	876, 1912, 879, 879, 879, 879, 879, 879, 879, 879,
	1916, 908, 909, 910, 911, 33, 1915, 1918, 1712, 1830,
	326, 327, 0, 331, 759, 0, 333, 0, 1898, 0,
	0, 0, 1615, 0, 1801, 0, 0, 0, 1484, 0,
	0, 1771, 0, 343, 344, 345, 346, 347, 0, 1576,
	1780, 0, 1782, 759, 1783, 1500, 0, 1913, 0, 727,
	0, 0, 0, 0, 0, 0, 762, 0, 513, 649,
	0, 0, 378, 0, 0, 0, 0, 1112, 940, 940,
	1834, 1801, 0, 1113, 940, 0, 1112, 0, 1113, 0,
	0, 0, 0, 819, 818, 828, 829, 821, 822, 823,
	824, 825, 826, 827, 820, 0, 0, 830, 1009, 0,
	1575, 0, 0, 0, 0, 0, 1174, 0, 0, 0,
	940, 940, 940, 940, 0, 1837, 849, 850, 851, 852,
	853, 854, 855, 0, 0, 0, 0, 0, 0, 0,
	0, 1619, 1620, 0, 772, 576, 940, 772, 772, 772,
	762, 1889, 0, 0, 1570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 0, 865,
	0, 0, 0, 1900, 1901, 805, 0, 0, 0, 0,
	811, 0, 0, 1571, 1572, 0, 0, 1573, 1574, 831,
	0, 1577, 819, 818, 828, 829, 821, 822, 823, 824,
	825, 826, 827, 820, 1418, 0, 830, 0, 0, 0,
	1595, 0, 0, 1112, 0, 864, 1920, 0, 0, 0,
	0, 0, 721, 0, 875, 0, 0, 0, 819, 818,
	828, 829, 821, 822, 823, 824, 825, 826, 827, 820,
	0, 0, 830, 0, 0, 1147, 1705, 0, 0, 0,
	0, 1709, 0, 0, 0, 0, 938, 0, 0, 0,
	0, 0, 0, 1164, 819, 818, 828, 829, 821, 822,
	823, 824, 825, 826, 827, 820, 0, 1021, 830, 0,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1757, 0, 0, 1685,
	0, 0, 0, 0, 0, 1251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1692, 0, 940, 0, 0,
	0, 1008, 0, 1294, 1283, 1110, 0, 1014, 1015, 0,
	0, 0, 0, 761, 0, 1203, 1193, 1192, 0, 0,
	940, 0, 0, 0, 0, 0, 0, 1194, 378, 940,
	0, 0, 0, 0, 0, 565, 831, 0, 1195, 1727,
	1147, 0, 0, 0, 0, 722, 724, 0, 819, 818,
	828, 829, 821, 822, 823, 824, 825, 826, 827, 820,
	1252, 0, 830, 0, 864, 0, 0, 1077, 1108, 0,
	0, 0, 0, 0, 1756, 0, 0, 0, 1759, 1760,
	1761, 1762, 0, 0, 819, 818, 828, 829, 821, 822,
	823, 824, 825, 826, 827, 820, 0, 0, 830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1129, 0, 789, 792, 819, 818, 828, 829, 821,
	822, 823, 824, 825, 826, 827, 820, 0, 0, 830,
	0, 0, 0, 0, 0, 831, 0, 0, 762, 0,
	0, 0, 1201, 0, 0, 0, 762, 0, 0, 0,
	888, 0, 1200, 0, 0, 0, 0, 0, 0, 0,
	0, 1815, 1247, 1248, 1249, 1820, 0, 0, 378, 0,
	0, 831, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1196, 1197, 1199, 1848, 0,
	888, 1198, 0, 0, 0, 0, 0, 831, 1239, 0,
	0, 1509, 0, 0, 849, 0, 0, 0, 0, 1860,
	0, 0, 178, 178, 0, 0, 0, 0, 0, 1868,
	1869, 1870, 0, 1873, 0, 890, 0, 0, 0, 0,
	0, 0, 789, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 0, 1052, 1053, 0, 1054, 1055, 1056,
	1058, 1057, 0, 1049, 891, 0, 0, 0, 0, 0,
	1259, 0, 906, 889, 0, 0, 0, 0, 895, 894,
	1482, 0, 0, 1905, 1906, 1907, 0, 0, 0, 0,
	0, 0, 0, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 0, 0, 761, 0, 1203, 1193, 1192,
	0, 1919, 0, 0, 891, 1523, 0, 0, 1292, 1194,
	0, 831, 906, 889, 0, 0, 0, 0, 895, 894,
	1195, 0, 0, 0, 0, 1378, 1204, 0, 917, 549,
	550, 551, 0, 0, 0, 0, 0, 554, 552, 562,
	563, 0, 761, 0, 1203, 1193, 1192, 831, 0, 1322,
	1325, 0, 0, 0, 0, 0, 1194, 761, 1557, 1203,
	1193, 1192, 0, 0, 0, 907, 1336, 1195, 0, 0,
	0, 1194, 0, 940, 1811, 0, 1419, 1420, 831, 0,
	0, 0, 1195, 0, 0, 178, 178, 0, 0, 0,
	1379, 0, 0, 0, 0, 178, 1647, 327, 344, 0,
	0, 0, 0, 0, 0, 0, 1460, 1461, 1462, 1463,
	1464, 0, 0, 0, 0, 907, 0, 0, 0, 0,
	0, 1701, 0, 0, 1201, 0, 0, 0, 0, 0,
	1580, 0, 0, 0, 1200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1690, 0, 0, 0,
	0, 1201, 0, 0, 0, 0, 0, 1196, 1197, 1199,
	1469, 1200, 0, 1198, 0, 0, 1201, 1642, 0, 0,
	178, 0, 0, 0, 178, 178, 1200, 0, 1113, 178,
	178, 178, 178, 178, 1489, 0, 0, 0, 0, 0,
	0, 1726, 0, 0, 178, 0, 0, 0, 1647, 0,
	0, 0, 1506, 0, 1196, 1197, 1199, 0, 0, 0,
	1198, 0, 0, 0, 918, 645, 0, 0, 0, 1196,
	1197, 1199, 0, 1567, 0, 1198, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 1266, 1267, 0, 1268,
	0, 0, 0, 0, 1271, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 1274, 1275, 0, 178,
	1276, 1277, 0, 1278, 1279, 0, 1523, 558, 0, 560,
	559, 1523, 1523, 1523, 1523, 1523, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1642, 0, 1732, 0,
	576, 0, 0, 0, 0, 0, 0, 0, 1204, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1427, 0, 0, 0, 0, 0, 0, 1113, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, 0, 0, 1583,
	0, 0, 1523, 0, 0, 1204, 0, 1778, 1779, 0,
	0, 1523, 0, 0, 0, 1429, 0, 0, 0, 0,
	1204, 0, 0, 0, 1607, 1608, 1325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 762, 0,
	1680, 1681, 0, 1682, 1683, 1684, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1437, 1443, 1441, 0, 0, 1438, 0,
	1831, 1436, 762, 0, 1445, 0, 0, 1444, 1431, 1440,
	1442, 1439, 1434, 0, 1430, 0, 1447, 1446, 1448, 1428,
	1450, 1845, 1846, 1847, 1454, 1451, 1453, 1452, 0, 1449,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 1085,
	0, 0, 0, 1113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 1435,
	0, 1699, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1831, 0, 0, 1899, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1743, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1831, 0, 762, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1769, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1266, 1267, 0, 1268, 0, 0,
	0, 1271, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1274, 1275, 0, 0, 1276, 1277, 0,
	1278, 1279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1840, 0, 0, 1841, 0, 0,
	1843, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1769, 0, 0, 0, 0, 0, 0, 0, 0,
	864, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1893, 864, 494, 483, 0, 442, 496, 412,
	430, 504, 432, 433, 469, 391, 452, 99, 427, 409,
	36, 415, 384, 422, 385, 413, 444, 60, 410, 0,
	485, 455, 74, 164, 165, 502, 77, 460, 0, 123,
	87, 0, 0, 447, 487, 450, 478, 441, 470, 399,
	459, 497, 428, 465, 498, 0, 0, 0, 566, 0,
	181, 0, 0, 0, 0, 0, 0, 0, 49, 0,
	464, 492, 424, 507, 0, 468, 383, 462, 0, 389,
	392, 503, 490, 419, 420, 0, 0, 0, 0, 0,
	0, 0, 446, 451, 475, 438, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1308, 0, 416, 0,
	458, 0, 0, 0, 396, 390, 0, 443, 0, 0,
	0, 398, 0, 417, 476, 0, 380, 481, 488, 440,
	83, 150, 491, 437, 436, 106, 0, 52, 0, 129,
	64, 429, 75, 473, 505, 495, 448, 486, 414, 423,
	54, 421, 113, 100, 141, 457, 471, 111, 78, 133,
	107, 140, 493, 131, 149, 116, 44, 94, 34, 105,
	112, 0, 53, 0, 157, 158, 159, 160, 161, 162,
	163, 388, 381, 418, 479, 482, 403, 467, 393, 425,
	474, 426, 449, 408, 0, 0, 0, 0, 0, 0,
	0, 122, 121, 37, 130, 139, 50, 117, 40, 137,
	126, 128, 85, 70, 71, 119, 38, 39, 0, 110,
	59, 104, 63, 58, 97, 127, 88, 134, 135, 55,
	154, 57, 56, 125, 45, 147, 148, 42, 46, 146,
	93, 98, 96, 145, 132, 138, 86, 82, 0, 41,
	136, 84, 81, 73, 0, 61, 65, 102, 80, 103,
	66, 90, 89, 91, 0, 0, 95, 67, 0, 0,
	0, 386, 0, 124, 143, 155, 156, 387, 407, 489,
	151, 0, 0, 0, 92, 47, 68, 118, 72, 79,
	109, 153, 466, 114, 51, 142, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 402,
	406, 400, 401, 453, 454, 499, 500, 501, 477, 397,
	0, 404, 405, 0, 484, 69, 166, 167, 456, 35,
	43, 76, 506, 152, 0, 108, 62, 144, 0, 0,
	431, 382, 435, 0, 0, 0, 0, 0, 0, 0,
	394, 395, 115, 0, 439, 434, 461, 463, 472, 480,
	0, 411, 445, 0, 48, 494, 483, 0, 442, 496,
	412, 430, 504, 432, 433, 469, 391, 452, 99, 427,
	409, 36, 415, 384, 422, 385, 413, 444, 60, 410,
	0, 485, 455, 74, 164, 165, 502, 77, 460, 0,
	123, 87, 0, 0, 447, 487, 450, 478, 441, 470,
	399, 459, 497, 428, 465, 498, 0, 0, 0, 32,
	0, 785, 0, 786, 0, 0, 0, 0, 0, 49,
	0, 464, 492, 424, 507, 0, 468, 383, 462, 0,
	389, 392, 503, 490, 419, 420, 0, 0, 0, 0,
	0, 0, 0, 446, 451, 475, 438, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 416,
	0, 458, 0, 0, 0, 396, 390, 0, 443, 0,
	0, 0, 398, 0, 417, 476, 0, 380, 481, 488,
	440, 83, 150, 491, 437, 436, 106, 0, 52, 0,
	129, 64, 429, 75, 473, 505, 495, 448, 486, 414,
	423, 54, 421, 113, 100, 141, 457, 471, 111, 78,
	133, 107, 140, 493, 131, 149, 116, 44, 94, 34,
	105, 112, 0, 53, 0, 157, 158, 159, 160, 161,
	162, 163, 388, 381, 418, 479, 482, 403, 467, 393,
	425, 474, 426, 449, 408, 0, 0, 0, 0, 0,
	0, 0, 122, 121, 37, 130, 139, 50, 117, 40,
	137, 126, 128, 85, 70, 71, 119, 38, 39, 0,
	110, 59, 104, 63, 58, 97, 127, 88, 134, 135,
	55, 154, 57, 56, 125, 45, 147, 148, 42, 46,
	146, 93, 98, 96, 145, 132, 138, 86, 82, 0,
	41, 136, 84, 81, 73, 0, 61, 65, 102, 80,
	103, 66, 90, 89, 91, 0, 0, 95, 67, 0,
	0, 0, 386, 0, 124, 143, 155, 156, 387, 407,
	489, 151, 0, 0, 0, 92, 47, 68, 118, 72,
	79, 109, 153, 466, 114, 51, 142, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	402, 406, 400, 401, 453, 454, 499, 500, 501, 477,
	397, 0, 404, 405, 0, 484, 69, 166, 167, 456,
	35, 43, 76, 506, 152, 0, 108, 62, 144, 0,
	0, 431, 382, 435, 0, 0, 0, 0, 0, 0,
	0, 394, 395, 115, 0, 439, 434, 461, 463, 472,
	480, 0, 411, 445, 0, 48, 494, 483, 0, 442,
	496, 412, 430, 504, 432, 433, 469, 391, 452, 99,
	427, 409, 36, 415, 384, 422, 385, 413, 444, 60,
	410, 0, 485, 455, 74, 164, 165, 502, 77, 460,
	0, 123, 87, 0, 0, 447, 487, 450, 478, 441,
	470, 399, 459, 497, 428, 465, 498, 0, 0, 0,
	32, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	49, 0, 464, 492, 424, 507, 0, 468, 383, 462,
	0, 389, 392, 503, 490, 419, 420, 0, 0, 0,
	0, 0, 0, 0, 446, 451, 475, 438, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	416, 0, 458, 0, 0, 0, 396, 390, 0, 443,
	0, 0, 0, 398, 0, 417, 476, 0, 380, 481,
	488, 440, 83, 150, 491, 437, 436, 106, 0, 52,
	0, 129, 64, 429, 75, 473, 505, 495, 448, 486,
	414, 423, 54, 421, 113, 100, 141, 457, 471, 111,
	78, 133, 107, 140, 493, 131, 149, 116, 44, 94,
	34, 105, 112, 0, 53, 0, 157, 158, 159, 160,
	161, 162, 163, 388, 381, 418, 479, 482, 403, 467,
	393, 425, 474, 426, 449, 408, 0, 0, 0, 0,
	0, 0, 0, 122, 121, 37, 130, 139, 50, 117,
	40, 137, 126, 128, 85, 70, 71, 119, 38, 39,
	0, 110, 59, 104, 63, 58, 97, 127, 88, 134,
	135, 55, 154, 57, 56, 125, 45, 147, 148, 42,
	1539, 146, 93, 98, 96, 145, 132, 138, 86, 82,
	0, 41, 136, 84, 81, 73, 0, 61, 65, 102,
	80, 103, 66, 90, 89, 91, 0, 0, 95, 67,
	0, 0, 0, 386, 0, 124, 143, 155, 156, 387,
	407, 489, 151, 0, 0, 0, 1540, 1538, 68, 118,
	72, 79, 109, 153, 466, 114, 51, 142, 120, 1536,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 402, 406, 400, 401, 453, 454, 499, 500, 501,
	477, 397, 0, 404, 405, 0, 484, 69, 166, 167,
	456, 35, 43, 76, 506, 152, 0, 108, 62, 144,
	0, 0, 431, 382, 435, 0, 0, 0, 0, 0,
	0, 0, 394, 395, 115, 0, 439, 434, 461, 463,
	472, 480, 0, 411, 445, 0, 48, 494, 483, 0,
	442, 496, 412, 430, 504, 432, 433, 469, 391, 452,
	99, 427, 409, 36, 415, 384, 422, 385, 413, 444,
	60, 410, 0, 485, 455, 74, 164, 165, 502, 77,
	460, 0, 123, 87, 0, 0, 447, 487, 450, 478,
	441, 470, 399, 459, 497, 428, 465, 498, 0, 0,
	0, 32, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 464, 492, 424, 507, 0, 468, 383,
	462, 0, 389, 392, 503, 490, 419, 420, 0, 0,
	0, 0, 0, 0, 0, 446, 451, 475, 438, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 416, 0, 458, 0, 0, 0, 396, 390, 0,
	443, 0, 0, 0, 398, 0, 417, 476, 0, 380,
	481, 488, 440, 83, 150, 491, 437, 436, 106, 0,
	52, 0, 129, 64, 429, 75, 473, 505, 495, 448,
	486, 414, 423, 54, 421, 113, 100, 141, 457, 471,
	111, 78, 133, 107, 140, 493, 131, 149, 116, 44,
	94, 34, 105, 112, 0, 53, 0, 157, 158, 159,
	160, 161, 162, 163, 388, 381, 418, 479, 482, 403,
	467, 393, 425, 474, 426, 449, 408, 0, 0, 0,
	0, 0, 0, 0, 122, 121, 37, 130, 1654, 50,
	117, 40, 137, 126, 128, 85, 70, 71, 119, 38,
	39, 0, 110, 59, 104, 63, 58, 97, 127, 88,
	134, 135, 55, 154, 57, 56, 125, 45, 147, 148,
	42, 1539, 146, 93, 98, 96, 145, 132, 138, 86,
	82, 0, 41, 136, 84, 81, 73, 0, 61, 65,
	102, 80, 103, 66, 90, 89, 91, 0, 0, 95,
	67, 0, 0, 0, 386, 0, 124, 143, 155, 156,
	387, 407, 489, 151, 0, 0, 0, 1540, 1538, 68,
	118, 72, 79, 109, 153, 466, 114, 51, 142, 120,
	1536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 402, 406, 400, 401, 453, 454, 499, 500,
	501, 477, 397, 0, 404, 405, 0, 484, 69, 166,
	167, 456, 35, 43, 76, 506, 152, 0, 108, 62,
	144, 0, 0, 431, 382, 435, 0, 0, 0, 0,
	0, 0, 0, 394, 395, 115, 0, 439, 434, 461,
	463, 472, 480, 0, 411, 445, 0, 48, 494, 483,
	0, 442, 496, 412, 430, 504, 432, 433, 469, 391,
	452, 99, 427, 409, 36, 415, 384, 422, 385, 413,
	444, 60, 410, 0, 485, 455, 74, 164, 165, 502,
	77, 460, 0, 123, 87, 0, 0, 447, 487, 450,
	478, 441, 470, 399, 459, 497, 428, 465, 498, 0,
	0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 49, 0, 464, 492, 424, 507, 0, 468,
	383, 462, 0, 389, 392, 503, 490, 419, 420, 0,
	0, 0, 0, 0, 0, 0, 446, 451, 475, 438,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1598, 0, 416, 0, 458, 0, 0, 0, 396, 390,
	0, 443, 0, 0, 0, 398, 0, 417, 476, 0,
	380, 481, 488, 440, 83, 150, 491, 437, 436, 106,
	0, 52, 0, 129, 64, 429, 75, 473, 505, 495,
	448, 486, 414, 423, 54, 421, 113, 100, 141, 457,
	471, 111, 78, 133, 107, 140, 493, 131, 149, 116,
	44, 94, 34, 105, 112, 0, 53, 0, 157, 158,
	159, 160, 161, 162, 163, 388, 381, 418, 479, 482,
	403, 467, 393, 425, 474, 426, 449, 408, 0, 0,
	0, 0, 0, 0, 0, 122, 121, 37, 130, 139,
	50, 117, 40, 137, 126, 128, 85, 70, 71, 119,
	38, 39, 0, 110, 59, 104, 63, 58, 97, 127,
	88, 134, 135, 55, 154, 57, 56, 125, 45, 147,
	148, 42, 46, 146, 93, 98, 96, 145, 132, 138,
	86, 82, 0, 41, 136, 84, 81, 73, 0, 61,
	65, 102, 80, 103, 66, 90, 89, 91, 0, 0,
	95, 67, 0, 0, 0, 386, 0, 124, 143, 155,
	156, 387, 407, 489, 151, 0, 0, 0, 92, 47,
	68, 118, 72, 79, 109, 153, 466, 114, 51, 142,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 402, 406, 400, 401, 453, 454, 499,
	500, 501, 477, 397, 0, 404, 405, 0, 484, 69,
	166, 167, 456, 35, 43, 76, 506, 152, 0, 108,
	62, 144, 0, 0, 431, 382, 435, 0, 0, 0,
	0, 0, 0, 0, 394, 395, 115, 0, 439, 434,
	461, 463, 472, 480, 0, 411, 445, 0, 48, 494,
	483, 0, 442, 496, 412, 430, 504, 432, 433, 469,
	391, 452, 99, 427, 409, 36, 415, 384, 422, 385,
	413, 444, 60, 410, 0, 485, 455, 74, 164, 165,
	502, 77, 460, 0, 123, 87, 0, 0, 447, 487,
	450, 478, 441, 470, 399, 459, 497, 428, 465, 498,
	0, 0, 0, 32, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 464, 492, 424, 507, 0,
	468, 383, 462, 0, 389, 392, 503, 490, 419, 420,
	0, 0, 0, 0, 0, 0, 0, 446, 451, 475,
	438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 416, 0, 458, 0, 0, 0, 396,
	390, 0, 443, 0, 0, 0, 398, 0, 417, 476,
	0, 380, 481, 488, 440, 83, 150, 491, 437, 436,
	106, 0, 52, 0, 129, 64, 429, 75, 473, 505,
	495, 448, 486, 414, 423, 54, 421, 113, 100, 141,
	457, 471, 111, 78, 133, 107, 140, 493, 131, 149,
	116, 44, 94, 34, 105, 112, 0, 53, 0, 157,
	158, 159, 160, 161, 162, 163, 388, 381, 418, 479,
	482, 403, 467, 393, 425, 474, 426, 449, 408, 0,
	0, 0, 0, 0, 0, 0, 122, 121, 37, 130,
	1531, 50, 117, 40, 137, 126, 128, 85, 70, 71,
	119, 38, 39, 0, 110, 59, 104, 63, 58, 97,
	127, 88, 134, 135, 55, 154, 57, 56, 125, 45,
	147, 148, 42, 1539, 146, 93, 98, 96, 145, 132,
	138, 86, 82, 0, 41, 136, 84, 81, 73, 0,
	61, 65, 102, 80, 103, 66, 90, 89, 91, 0,
	0, 95, 67, 0, 0, 0, 386, 0, 124, 143,
	155, 156, 387, 407, 489, 151, 0, 0, 0, 1540,
	1538, 1534, 1533, 72, 79, 109, 153, 466, 114, 51,
	142, 120, 1536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 402, 406, 400, 401, 453, 454,
	499, 500, 501, 477, 397, 0, 404, 405, 0, 484,
	69, 166, 167, 456, 35, 43, 76, 506, 152, 0,
	108, 62, 144, 0, 0, 431, 382, 435, 0, 0,
	0, 0, 0, 0, 0, 394, 395, 115, 0, 439,
	434, 461, 463, 472, 480, 0, 411, 445, 0, 48,
	494, 483, 0, 442, 496, 412, 430, 504, 432, 433,
	469, 391, 452, 99, 427, 409, 36, 415, 384, 422,
	385, 413, 444, 60, 410, 0, 485, 455, 74, 164,
	165, 502, 77, 460, 0, 123, 87, 0, 0, 447,
	487, 450, 478, 441, 470, 399, 459, 497, 428, 465,
	498, 0, 0, 0, 566, 0, 181, 0, 0, 0,
	0, 0, 0, 0, 49, 0, 464, 492, 424, 507,
	0, 468, 383, 462, 0, 389, 392, 503, 490, 419,
	420, 0, 0, 0, 0, 0, 0, 0, 446, 451,
	475, 438, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 416, 0, 458, 0, 0, 0,
	396, 390, 0, 443, 0, 0, 0, 398, 0, 417,
	476, 0, 380, 481, 488, 440, 83, 150, 491, 437,
	436, 106, 0, 52, 0, 129, 64, 429, 75, 473,
	505, 495, 448, 486, 414, 423, 54, 421, 113, 100,
	141, 457, 471, 111, 78, 133, 107, 140, 493, 131,
	149, 116, 44, 94, 34, 105, 112, 0, 53, 0,
	157, 158, 159, 160, 161, 162, 163, 388, 381, 418,
	479, 482, 403, 467, 393, 425, 474, 426, 449, 408,
	0, 0, 0, 0, 0, 0, 0, 122, 121, 37,
	130, 139, 50, 117, 40, 137, 126, 128, 85, 70,
	71, 119, 38, 39, 0, 110, 59, 104, 63, 58,
	97, 127, 88, 134, 135, 55, 154, 57, 56, 125,
	45, 147, 148, 42, 46, 146, 93, 98, 96, 145,
	132, 138, 86, 82, 0, 41, 136, 84, 81, 73,
	0, 61, 65, 102, 80, 103, 66, 90, 89, 91,
	0, 0, 95, 67, 0, 0, 0, 386, 0, 124,
	143, 155, 156, 387, 407, 489, 151, 0, 0, 0,
	92, 47, 68, 118, 72, 79, 109, 153, 466, 114,
	51, 142, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 402, 406, 400, 401, 453,
	454, 499, 500, 501, 477, 397, 0, 404, 405, 0,
	484, 69, 166, 167, 456, 35, 43, 76, 506, 152,
	0, 108, 62, 144, 0, 0, 431, 382, 435, 0,
	0, 0, 0, 0, 0, 0, 394, 395, 115, 0,
	439, 434, 461, 463, 472, 480, 0, 411, 445, 0,
	48, 494, 483, 0, 442, 496, 412, 430, 504, 432,
	433, 469, 391, 452, 99, 427, 409, 36, 415, 384,
	422, 385, 413, 444, 60, 410, 0, 485, 455, 74,
	164, 165, 502, 77, 460, 0, 123, 87, 0, 0,
	447, 487, 450, 478, 441, 470, 399, 459, 497, 428,
	465, 498, 0, 0, 0, 32, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 464, 492, 424,
	507, 0, 468, 383, 462, 0, 389, 392, 503, 490,
	419, 420, 621, 0, 0, 0, 0, 0, 0, 446,
	451, 475, 438, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 416, 0, 458, 0, 0,
	0, 396, 390, 0, 443, 0, 0, 0, 398, 0,
	417, 476, 0, 380, 481, 488, 440, 83, 150, 491,
	437, 436, 106, 0, 52, 0, 129, 64, 429, 75,
	473, 505, 495, 448, 486, 414, 423, 54, 421, 113,
	100, 141, 457, 471, 111, 78, 133, 107, 140, 493,
	131, 149, 116, 44, 94, 34, 105, 112, 0, 53,
	0, 157, 158, 159, 160, 161, 162, 163, 388, 381,
	418, 479, 482, 403, 467, 393, 425, 474, 426, 449,
	408, 0, 0, 0, 0, 0, 0, 0, 122, 121,
	37, 130, 139, 50, 117, 40, 137, 126, 128, 85,
	70, 71, 119, 38, 39, 0, 110, 59, 104, 63,
	58, 97, 127, 88, 134, 135, 55, 154, 57, 56,
	125, 45, 147, 148, 42, 46, 146, 93, 98, 96,
	145, 132, 138, 86, 82, 0, 41, 136, 84, 81,
	73, 0, 61, 65, 102, 80, 103, 66, 90, 89,
	91, 0, 0, 95, 67, 0, 0, 0, 386, 0,
	124, 143, 155, 156, 387, 407, 489, 151, 0, 0,
	0, 92, 47, 68, 118, 72, 79, 109, 153, 466,
	114, 51, 142, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 402, 406, 400, 401,
	453, 454, 499, 500, 501, 477, 397, 0, 404, 405,
	0, 484, 69, 166, 167, 456, 35, 43, 76, 506,
	152, 0, 108, 62, 144, 0, 0, 431, 382, 435,
	0, 0, 0, 0, 0, 0, 0, 394, 395, 115,
	0, 439, 434, 461, 463, 472, 480, 0, 411, 445,
	0, 48, 494, 483, 0, 442, 496, 412, 430, 504,
	432, 433, 469, 391, 452, 99, 427, 409, 36, 415,
	384, 422, 385, 413, 444, 60, 410, 0, 485, 455,
	74, 164, 165, 502, 77, 460, 0, 123, 87, 0,
	0, 447, 487, 450, 478, 441, 470, 399, 459, 497,
	428, 465, 498, 0, 0, 0, 179, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 464, 492,
	424, 507, 0, 468, 383, 462, 0, 389, 392, 503,
	490, 419, 420, 0, 0, 0, 0, 0, 0, 0,
	446, 451, 475, 438, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 416, 0, 458, 0,
	0, 0, 396, 390, 0, 443, 0, 0, 0, 398,
	0, 417, 476, 0, 380, 481, 488, 440, 83, 150,
	491, 437, 436, 106, 0, 52, 0, 129, 64, 429,
	75, 473, 505, 495, 448, 486, 414, 423, 54, 421,
	113, 100, 141, 457, 471, 111, 78, 133, 107, 140,
	493, 131, 149, 116, 44, 94, 34, 105, 112, 0,
	53, 0, 157, 158, 159, 160, 161, 162, 163, 388,
	381, 418, 479, 482, 403, 467, 393, 425, 474, 426,
	449, 408, 0, 0, 0, 0, 0, 0, 0, 122,
	121, 37, 130, 139, 50, 117, 40, 137, 126, 128,
	85, 70, 71, 119, 38, 39, 0, 110, 59, 104,
	63, 58, 97, 127, 88, 134, 135, 55, 154, 57,
	56, 125, 45, 147, 148, 42, 46, 146, 93, 98,
	96, 145, 132, 138, 86, 82, 0, 41, 136, 84,
	81, 73, 0, 61, 65, 102, 80, 103, 66, 90,
	89, 91, 0, 0, 95, 67, 0, 0, 0, 386,
	0, 124, 143, 155, 156, 387, 407, 489, 151, 0,
	0, 0, 92, 47, 68, 118, 72, 79, 109, 153,
	466, 114, 51, 142, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 402, 406, 400,
	401, 453, 454, 499, 500, 501, 477, 397, 0, 404,
	405, 0, 484, 69, 166, 167, 456, 35, 43, 76,
	506, 152, 0, 108, 62, 144, 0, 0, 431, 382,
	435, 0, 0, 0, 0, 0, 0, 0, 394, 395,
	115, 0, 439, 434, 461, 463, 472, 480, 0, 411,
	445, 0, 48, 494, 483, 0, 442, 496, 412, 430,
	504, 432, 433, 469, 391, 452, 99, 427, 409, 36,
	415, 384, 422, 385, 413, 444, 60, 410, 0, 485,
	455, 74, 164, 165, 502, 77, 460, 0, 123, 87,
	0, 0, 447, 487, 450, 478, 441, 470, 399, 459,
	497, 428, 465, 498, 0, 0, 0, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 49, 0, 464,
	492, 424, 507, 0, 468, 383, 462, 0, 389, 392,
	503, 490, 419, 420, 0, 0, 0, 0, 0, 0,
	0, 446, 451, 475, 438, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 416, 0, 458,
	0, 0, 0, 396, 390, 0, 443, 0, 0, 0,
	398, 0, 417, 476, 0, 380, 481, 488, 440, 83,
	150, 491, 437, 436, 106, 0, 52, 0, 129, 64,
	429, 75, 473, 505, 495, 448, 486, 414, 423, 54,
	421, 113, 100, 141, 457, 471, 111, 78, 133, 107,
	140, 493, 131, 149, 116, 44, 94, 34, 105, 112,
	0, 53, 0, 157, 158, 159, 160, 161, 162, 163,
	388, 381, 418, 479, 482, 403, 467, 393, 425, 474,
	426, 449, 408, 0, 0, 0, 0, 0, 0, 0,
	122, 121, 37, 130, 139, 50, 117, 40, 137, 126,
	128, 85, 70, 71, 119, 38, 39, 0, 110, 59,
	104, 63, 58, 97, 127, 88, 134, 135, 55, 154,
	57, 56, 125, 45, 147, 148, 42, 46, 146, 93,
	98, 96, 145, 132, 138, 86, 82, 0, 41, 136,
	84, 81, 73, 0, 61, 65, 102, 80, 103, 66,
	90, 89, 91, 0, 0, 95, 67, 0, 0, 0,
	386, 0, 124, 143, 155, 156, 387, 407, 489, 151,
	0, 0, 0, 92, 47, 68, 118, 72, 79, 109,
	153, 466, 114, 51, 142, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 402, 406,
	400, 401, 453, 454, 499, 500, 501, 477, 397, 0,
	404, 405, 0, 484, 69, 166, 167, 456, 35, 43,
	76, 506, 152, 0, 108, 62, 144, 0, 0, 431,
	382, 435, 0, 0, 0, 0, 0, 0, 0, 394,
	395, 115, 0, 439, 434, 461, 463, 472, 480, 99,
	411, 445, 36, 48, 0, 654, 0, 0, 0, 60,
	653, 0, 0, 0, 74, 164, 165, 696, 77, 697,
	0, 123, 87, 0, 0, 0, 0, 687, 688, 0,
	0, 0, 0, 0, 0, 1741, 0, 647, 0, 0,
	566, 676, 673, 674, 678, 679, 680, 681, 0, 0,
	49, 677, 682, 562, 563, 1742, 0, 0, 0, 651,
	666, 0, 695, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 663, 664, 0, 0,
	0, 0, 709, 0, 665, 0, 0, 661, 662, 667,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 150, 0, 0, 707, 106, 0, 52,
	0, 129, 64, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 113, 100, 141, 0, 101, 111,
	78, 133, 107, 140, 0, 131, 149, 116, 44, 94,
	34, 105, 112, 0, 53, 0, 157, 158, 159, 160,
	161, 162, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 121, 37, 130, 139, 50, 117,
	40, 137, 126, 128, 85, 70, 71, 119, 38, 39,
	0, 110, 59, 104, 63, 58, 97, 127, 88, 134,
	135, 55, 154, 57, 56, 125, 45, 147, 148, 42,
	46, 146, 93, 98, 96, 145, 132, 138, 86, 82,
	0, 41, 136, 84, 81, 73, 0, 61, 65, 102,
	80, 103, 66, 90, 89, 91, 711, 0, 95, 67,
	0, 0, 0, 0, 0, 124, 143, 155, 156, 0,
	0, 0, 151, 0, 0, 0, 92, 47, 68, 118,
	72, 79, 109, 153, 0, 114, 51, 142, 120, 684,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 698, 708, 704, 705, 702, 703, 701, 700, 699,
	710, 689, 690, 691, 692, 694, 0, 69, 166, 167,
	693, 35, 43, 76, 0, 152, 0, 108, 62, 144,
	99, 0, 0, 36, 934, 0, 654, 0, 0, 0,
	60, 653, 0, 0, 115, 74, 164, 165, 696, 77,
	697, 0, 123, 87, 0, 706, 48, 0, 687, 688,
	0, 0, 0, 0, 0, 0, 0, 0, 647, 0,
	0, 566, 676, 673, 674, 678, 679, 680, 681, 0,
	0, 49, 677, 682, 562, 563, 0, 0, 0, 0,
	651, 666, 0, 695, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 663, 664, 939,
	0, 0, 0, 709, 0, 665, 0, 0, 661, 662,
	667, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 150, 0, 0, 707, 106, 0,
	52, 0, 129, 64, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 113, 100, 141, 0, 101,
	111, 78, 133, 107, 140, 0, 131, 149, 116, 44,
	94, 34, 105, 112, 0, 53, 0, 157, 158, 159,
	160, 161, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 121, 37, 130, 139, 50,
	117, 40, 137, 126, 128, 85, 70, 71, 119, 38,
	39, 0, 110, 59, 104, 63, 58, 97, 127, 88,
	134, 135, 55, 154, 57, 56, 125, 45, 147, 148,
	42, 46, 146, 93, 98, 96, 145, 132, 138, 86,
	82, 0, 41, 136, 84, 81, 73, 0, 61, 65,
	102, 80, 103, 66, 90, 89, 91, 711, 0, 95,
	67, 0, 0, 0, 0, 0, 124, 143, 155, 156,
	0, 0, 0, 151, 0, 0, 0, 92, 47, 68,
	118, 72, 79, 109, 153, 0, 114, 51, 142, 120,
	684, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 698, 708, 704, 705, 702, 703, 701, 700,
	699, 710, 689, 690, 691, 692, 694, 0, 69, 166,
	167, 693, 35, 43, 76, 0, 152, 0, 108, 62,
	144, 99, 0, 0, 36, 0, 0, 654, 0, 0,
	0, 60, 653, 0, 0, 115, 74, 164, 165, 696,
	77, 697, 0, 123, 87, 0, 706, 48, 0, 687,
	688, 0, 0, 0, 0, 0, 0, 0, 0, 647,
	0, 929, 566, 676, 673, 674, 678, 679, 680, 681,
	0, 0, 49, 677, 682, 562, 563, 0, 0, 0,
	0, 651, 666, 0, 695, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 663, 664,
	0, 0, 0, 0, 709, 0, 665, 0, 0, 661,
	662, 667, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 150, 0, 0, 707, 106,
	0, 52, 0, 129, 64, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 113, 100, 141, 0,
	101, 111, 78, 133, 107, 140, 0, 131, 149, 116,
	44, 94, 34, 105, 112, 0, 53, 0, 157, 158,
	159, 160, 161, 162, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 121, 37, 130, 139,
	50, 117, 40, 137, 126, 128, 85, 70, 71, 119,
	38, 39, 0, 110, 59, 104, 63, 58, 97, 127,
	88, 134, 135, 55, 154, 57, 56, 125, 45, 147,
	148, 42, 46, 146, 93, 98, 96, 145, 132, 138,
	86, 82, 0, 41, 136, 84, 81, 73, 0, 61,
	65, 102, 80, 103, 66, 90, 89, 91, 711, 0,
	95, 67, 0, 0, 0, 0, 0, 124, 143, 155,
	156, 0, 0, 0, 151, 0, 0, 0, 92, 47,
	68, 118, 72, 79, 109, 153, 0, 114, 51, 142,
	120, 684, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 698, 708, 704, 705, 702, 703, 701,
	700, 699, 710, 689, 690, 691, 692, 694, 0, 69,
	166, 167, 693, 35, 43, 76, 0, 152, 0, 108,
	62, 144, 99, 0, 0, 36, 0, 0, 654, 0,
	0, 0, 60, 653, 0, 0, 115, 74, 164, 165,
	696, 77, 697, 0, 123, 87, 0, 706, 48, 0,
	687, 688, 0, 0, 0, 0, 0, 0, 0, 0,
	647, 0, 0, 566, 676, 673, 674, 678, 679, 680,
	681, 0, 0, 49, 677, 682, 562, 563, 0, 0,
	0, 0, 651, 666, 0, 695, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 663,
	664, 939, 0, 0, 0, 709, 0, 665, 0, 0,
	661, 662, 667, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 150, 0, 0, 707,
	106, 0, 52, 0, 129, 64, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 113, 100, 141,
	0, 101, 111, 78, 133, 107, 140, 0, 131, 149,
	116, 44, 94, 34, 105, 112, 0, 53, 0, 157,
	158, 159, 160, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 121, 37, 130,
	139, 50, 117, 40, 137, 126, 128, 85, 70, 71,
	119, 38, 39, 0, 110, 59, 104, 63, 58, 97,
	127, 88, 134, 135, 55, 154, 57, 56, 125, 45,
	147, 148, 42, 46, 146, 93, 98, 96, 145, 132,
	138, 86, 82, 0, 41, 136, 84, 81, 73, 0,
	61, 65, 102, 80, 103, 66, 90, 89, 91, 711,
	0, 95, 67, 0, 0, 0, 0, 0, 124, 143,
	155, 156, 0, 0, 0, 151, 0, 0, 0, 92,
	47, 68, 118, 72, 79, 109, 153, 0, 114, 51,
	142, 120, 684, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 698, 708, 704, 705, 702, 703,
	701, 700, 699, 710, 689, 690, 691, 692, 694, 0,
	69, 166, 167, 693, 35, 43, 76, 0, 152, 0,
	108, 62, 144, 99, 0, 0, 36, 0, 0, 654,
	0, 0, 0, 60, 653, 0, 0, 115, 74, 164,
	165, 696, 77, 697, 0, 123, 87, 0, 706, 48,
	0, 687, 688, 0, 0, 0, 0, 0, 0, 0,
	0, 647, 0, 0, 566, 676, 673, 674, 678, 679,
	680, 681, 0, 0, 49, 677, 682, 562, 563, 0,
	0, 0, 0, 651, 666, 0, 695, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	663, 664, 0, 0, 0, 0, 709, 0, 665, 0,
	0, 1079, 662, 667, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 150, 0, 0,
	707, 106, 0, 52, 0, 129, 64, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 1081, 0, 113, 100,
	141, 0, 101, 111, 78, 133, 107, 140, 0, 131,
	149, 116, 44, 94, 34, 105, 112, 0, 53, 0,
	157, 158, 159, 160, 161, 162, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 121, 37,
	130, 139, 50, 117, 1090, 1096, 1094, 128, 85, 1091,
	71, 119, 1089, 39, 0, 1098, 59, 104, 1097, 1083,
	1093, 1095, 1092, 1087, 135, 1082, 154, 1100, 1099, 1101,
	1080, 1103, 148, 42, 46, 1107, 1104, 1106, 1105, 145,
	1102, 138, 86, 82, 0, 41, 136, 84, 81, 1084,
	1085, 61, 65, 102, 80, 103, 66, 90, 89, 91,
	711, 0, 95, 67, 0, 0, 0, 0, 0, 1086,
	1088, 155, 156, 0, 0, 0, 151, 0, 0, 0,
	92, 47, 68, 118, 72, 79, 109, 153, 0, 114,
	51, 142, 120, 684, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 698, 708, 704, 705, 702,
	703, 701, 700, 699, 710, 689, 690, 691, 692, 694,
	0, 69, 166, 167, 693, 35, 43, 76, 0, 152,
	0, 108, 62, 144, 761, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 115, 36,
	0, 0, 654, 0, 0, 0, 60, 653, 0, 706,
	48, 74, 164, 165, 696, 77, 697, 0, 123, 87,
	0, 0, 0, 0, 687, 688, 0, 0, 0, 0,
	0, 0, 0, 0, 647, 0, 0, 566, 676, 673,
	674, 678, 679, 680, 681, 0, 0, 49, 677, 682,
	562, 563, 0, 0, 0, 0, 651, 666, 0, 695,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 663, 664, 0, 0, 0, 0, 709,
	0, 665, 0, 0, 661, 662, 667, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	150, 0, 0, 707, 106, 0, 52, 0, 129, 64,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 113, 100, 141, 0, 101, 111, 78, 133, 107,
	140, 0, 131, 149, 116, 44, 94, 34, 105, 112,
	0, 53, 0, 157, 158, 159, 160, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 121, 37, 130, 139, 50, 117, 40, 137, 126,
	128, 85, 70, 71, 119, 38, 39, 0, 110, 59,
	104, 63, 58, 97, 127, 88, 134, 135, 55, 154,
	57, 56, 125, 45, 147, 148, 42, 46, 146, 93,
	98, 96, 145, 132, 138, 86, 82, 0, 41, 136,
	84, 81, 73, 0, 61, 65, 102, 80, 103, 66,
	90, 89, 91, 711, 0, 95, 67, 0, 0, 0,
	0, 0, 124, 143, 155, 156, 0, 0, 0, 151,
	0, 0, 0, 92, 47, 68, 118, 72, 79, 109,
	153, 0, 114, 51, 142, 120, 684, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 708,
	704, 705, 702, 703, 701, 700, 699, 710, 689, 690,
	691, 692, 694, 0, 69, 166, 167, 693, 35, 43,
	76, 0, 152, 0, 108, 62, 144, 99, 0, 0,
	36, 0, 0, 654, 0, 0, 0, 60, 653, 0,
	0, 115, 74, 164, 165, 696, 77, 697, 0, 123,
	87, 0, 706, 48, 0, 687, 688, 0, 0, 0,
	0, 0, 0, 0, 0, 647, 0, 0, 566, 676,
	673, 674, 678, 679, 680, 681, 0, 0, 49, 677,
	682, 562, 563, 0, 0, 0, 0, 651, 666, 0,
	695, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 663, 664, 0, 0, 0, 0,
	709, 0, 665, 0, 0, 661, 662, 667, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 150, 0, 0, 707, 106, 0, 52, 0, 129,
	64, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 113, 100, 141, 0, 101, 111, 78, 133,
	107, 140, 0, 131, 149, 116, 44, 94, 34, 105,
	112, 0, 53, 0, 157, 158, 159, 160, 161, 162,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 122, 121, 37, 130, 139, 50, 117, 40, 137,
	126, 128, 85, 70, 71, 119, 38, 39, 0, 110,
	59, 104, 63, 58, 97, 127, 88, 134, 135, 55,
	154, 57, 56, 125, 45, 147, 148, 42, 46, 146,
	93, 98, 96, 145, 132, 138, 86, 82, 0, 41,
	136, 84, 81, 73, 0, 61, 65, 102, 80, 103,
	66, 90, 89, 91, 711, 0, 95, 67, 0, 0,
	0, 0, 0, 124, 143, 155, 156, 0, 0, 0,
	151, 0, 0, 0, 92, 47, 68, 118, 72, 79,
	109, 153, 0, 114, 51, 142, 120, 684, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 698,
	708, 704, 705, 702, 703, 701, 700, 699, 710, 689,
	690, 691, 692, 694, 0, 69, 166, 167, 693, 35,
	43, 76, 0, 152, 0, 108, 62, 144, 99, 0,
	0, 36, 0, 0, 654, 0, 0, 0, 60, 0,
	0, 0, 115, 74, 164, 165, 696, 77, 697, 0,
	123, 87, 0, 706, 48, 0, 687, 688, 0, 0,
	0, 0, 0, 0, 0, 0, 647, 0, 0, 566,
	676, 673, 674, 678, 679, 680, 681, 0, 0, 49,
	677, 682, 562, 563, 0, 0, 0, 0, 0, 666,
	0, 695, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 663, 664, 0, 0, 0,
	0, 709, 0, 665, 0, 0, 661, 662, 667, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 150, 0, 0, 707, 106, 0, 52, 0,
	129, 64, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 113, 100, 141, 0, 101, 111, 78,
	133, 107, 140, 0, 131, 149, 116, 44, 94, 34,
	105, 112, 0, 53, 0, 157, 158, 159, 160, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 121, 37, 130, 139, 50, 117, 40,
	137, 126, 128, 85, 70, 71, 119, 38, 39, 0,
	110, 59, 104, 63, 58, 97, 127, 88, 134, 135,
	55, 154, 57, 56, 125, 45, 147, 148, 42, 46,
	146, 93, 98, 96, 145, 132, 138, 86, 82, 0,
	41, 136, 84, 81, 73, 0, 61, 65, 102, 80,
	103, 66, 90, 89, 91, 711, 0, 95, 67, 0,
	0, 0, 0, 0, 124, 143, 155, 156, 0, 0,
	0, 151, 0, 0, 0, 92, 47, 68, 118, 72,
	79, 109, 153, 0, 114, 51, 142, 120, 684, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	698, 708, 704, 705, 702, 703, 701, 700, 699, 710,
	689, 690, 691, 692, 694, 0, 69, 166, 167, 693,
	35, 43, 76, 0, 152, 0, 108, 62, 144, 99,
	0, 0, 36, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 115, 74, 164, 165, 696, 77, 697,
	0, 123, 87, 0, 706, 48, 0, 687, 688, 0,
	0, 0, 0, 0, 0, 0, 0, 647, 0, 0,
	566, 676, 673, 674, 678, 679, 680, 681, 0, 0,
	49, 677, 682, 562, 563, 0, 0, 0, 0, 0,
	666, 0, 695, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 663, 664, 0, 0,
	0, 0, 709, 0, 665, 0, 0, 661, 662, 667,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 150, 0, 0, 707, 106, 0, 52,
	0, 129, 64, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 113, 100, 141, 0, 101, 111,
	78, 133, 107, 140, 0, 131, 149, 116, 44, 94,
	34, 105, 112, 0, 53, 0, 157, 158, 159, 160,
	161, 162, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 121, 37, 130, 139, 50, 117,
	40, 137, 126, 128, 85, 70, 71, 119, 38, 39,
	0, 110, 59, 104, 63, 58, 97, 127, 88, 134,
	135, 55, 154, 57, 56, 125, 45, 147, 148, 42,
	46, 146, 93, 98, 96, 145, 132, 138, 86, 82,
	0, 41, 136, 84, 81, 73, 0, 61, 65, 102,
	80, 103, 66, 90, 89, 91, 711, 0, 95, 67,
	0, 0, 0, 0, 0, 124, 143, 155, 156, 0,
	0, 0, 151, 0, 0, 0, 92, 47, 68, 118,
	72, 79, 109, 153, 0, 114, 51, 142, 120, 684,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 698, 708, 704, 705, 702, 703, 701, 700, 699,
	710, 689, 690, 691, 692, 694, 0, 69, 166, 167,
	693, 35, 43, 76, 0, 152, 0, 108, 62, 144,
	99, 0, 0, 36, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 0, 115, 74, 164, 165, 696, 77,
	697, 0, 123, 87, 0, 706, 48, 0, 687, 688,
	0, 0, 0, 0, 0, 0, 0, 0, 954, 0,
	0, 566, 676, 673, 674, 678, 679, 680, 681, 0,
	0, 49, 677, 682, 562, 563, 0, 0, 0, 0,
	0, 666, 0, 695, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 663, 664, 0,
	0, 0, 0, 709, 0, 665, 0, 0, 661, 662,
	667, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 150, 0, 0, 707, 106, 0,
	52, 0, 129, 64, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 113, 100, 141, 0, 101,
	111, 78, 133, 107, 140, 0, 131, 149, 116, 44,
	94, 34, 105, 112, 0, 53, 0, 157, 158, 159,
	160, 161, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 121, 37, 130, 139, 50,
	117, 40, 137, 126, 128, 85, 70, 71, 119, 38,
	39, 0, 110, 59, 104, 63, 58, 97, 127, 88,
	134, 135, 55, 154, 57, 56, 125, 45, 147, 148,
	42, 46, 146, 93, 98, 96, 145, 132, 138, 86,
	82, 0, 41, 136, 84, 81, 73, 0, 61, 65,
	102, 80, 103, 66, 90, 89, 91, 711, 0, 95,
	67, 0, 0, 0, 0, 0, 124, 143, 155, 156,
	0, 0, 0, 151, 0, 0, 0, 92, 47, 68,
	118, 72, 79, 109, 153, 0, 114, 51, 142, 120,
	684, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 698, 708, 704, 705, 702, 703, 701, 700,
	699, 710, 689, 690, 691, 692, 694, 0, 69, 166,
	167, 693, 35, 43, 76, 0, 152, 0, 108, 62,
	144, 99, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 0, 115, 74, 164, 165, 0,
	77, 0, 0, 123, 87, 0, 706, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 716,
	0, 0, 566, 0, 548, 549, 550, 551, 0, 0,
	0, 0, 49, 554, 552, 562, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 150, 0, 0, 0, 106,
	0, 52, 0, 129, 64, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 113, 100, 141, 0,
	101, 111, 78, 133, 107, 140, 0, 131, 149, 116,
	44, 94, 34, 105, 112, 0, 53, 0, 157, 158,
	159, 160, 161, 162, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 121, 37, 130, 139,
	50, 117, 40, 137, 126, 128, 85, 70, 71, 119,
	38, 39, 0, 110, 59, 104, 63, 58, 97, 127,
	88, 134, 135, 55, 154, 57, 56, 125, 45, 147,
	148, 42, 46, 146, 93, 98, 96, 145, 132, 138,
	86, 82, 0, 41, 136, 84, 81, 73, 0, 61,
	65, 102, 80, 103, 66, 90, 89, 91, 0, 0,
	556, 561, 0, 0, 0, 0, 0, 124, 143, 155,
	156, 0, 0, 0, 151, 0, 0, 0, 92, 47,
	68, 118, 72, 79, 109, 153, 0, 114, 51, 142,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 558, 0, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	166, 167, 0, 35, 43, 76, 0, 152, 0, 108,
	62, 144, 99, 0, 0, 36, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 115, 74, 164, 165,
	0, 77, 0, 0, 123, 87, 0, 0, 48, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	546, 0, 0, 566, 0, 548, 549, 550, 551, 0,
	0, 0, 0, 49, 554, 552, 562, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 150, 0, 0, 0,
	106, 0, 52, 0, 129, 64, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 113, 100, 141,
	0, 101, 111, 78, 133, 107, 140, 0, 131, 149,
	116, 44, 94, 34, 105, 112, 0, 53, 0, 157,
	158, 159, 160, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 121, 37, 130,
	139, 50, 117, 40, 137, 126, 128, 85, 70, 71,
	119, 38, 39, 0, 110, 59, 104, 63, 58, 97,
	127, 88, 134, 135, 55, 154, 57, 56, 125, 45,
	147, 148, 42, 46, 146, 93, 98, 96, 145, 132,
	138, 86, 82, 0, 41, 136, 84, 81, 73, 0,
	61, 65, 102, 80, 103, 66, 90, 89, 91, 0,
	0, 556, 561, 0, 0, 0, 0, 0, 124, 143,
	155, 156, 0, 0, 0, 151, 0, 0, 0, 92,
	47, 68, 118, 72, 79, 109, 153, 0, 114, 51,
	142, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 36, 0, 0, 0,
	0, 0, 0, 60, 558, 0, 560, 559, 74, 164,
	165, 0, 77, 0, 0, 123, 87, 0, 0, 0,
	69, 166, 167, 0, 35, 43, 76, 0, 152, 0,
	108, 62, 144, 0, 32, 676, 1061, 674, 678, 679,
	680, 681, 0, 0, 49, 677, 682, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 150, 0, 0,
	0, 106, 0, 52, 0, 129, 64, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 113, 100,
	141, 0, 101, 111, 78, 133, 107, 140, 0, 131,
	149, 116, 44, 94, 34, 105, 112, 0, 53, 0,
	157, 158, 159, 160, 161, 162, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 121, 37,
	130, 139, 50, 117, 40, 137, 126, 128, 85, 70,
	71, 119, 38, 39, 0, 110, 59, 104, 63, 58,
	97, 127, 88, 134, 135, 55, 154, 57, 56, 125,
	45, 147, 148, 42, 46, 146, 93, 98, 96, 145,
	132, 138, 86, 82, 0, 41, 136, 84, 81, 73,
	0, 61, 65, 102, 80, 103, 66, 90, 89, 91,
	0, 0, 95, 67, 0, 0, 0, 0, 0, 124,
	143, 155, 156, 0, 0, 0, 151, 0, 0, 0,
	92, 47, 68, 118, 72, 79, 109, 153, 0, 114,
	51, 142, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 224, 0,
	74, 164, 165, 0, 77, 0, 0, 123, 87, 0,
	0, 69, 166, 167, 0, 35, 43, 76, 0, 152,
	0, 108, 62, 144, 1213, 0, 32, 0, 1211, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	48, 0, 0, 1210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 150,
	0, 0, 0, 106, 0, 52, 0, 129, 64, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 225, 0,
	113, 100, 141, 0, 101, 111, 78, 133, 107, 140,
	0, 131, 149, 116, 44, 94, 34, 105, 112, 0,
	53, 0, 157, 158, 159, 160, 161, 162, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	121, 37, 130, 139, 50, 117, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 0, 251, 252, 104,
	253, 254, 255, 257, 256, 226, 227, 228, 232, 230,
	229, 231, 203, 205, 148, 201, 204, 210, 206, 207,
	208, 222, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 223, 233, 234, 235, 236, 237, 238,
	239, 240, 0, 0, 95, 67, 0, 0, 0, 0,
	0, 124, 143, 155, 156, 0, 0, 0, 151, 0,
	0, 0, 92, 47, 68, 118, 72, 79, 109, 153,
	0, 114, 51, 142, 120, 99, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 224, 0,
	74, 164, 165, 0, 77, 0, 0, 123, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 166, 167, 32, 35, 202, 76,
	0, 152, 0, 108, 62, 144, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 923, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 150,
	0, 0, 0, 106, 0, 52, 0, 129, 64, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 225, 0,
	113, 100, 141, 0, 101, 111, 78, 133, 107, 140,
	0, 131, 149, 116, 44, 94, 34, 105, 112, 0,
	53, 0, 157, 158, 159, 160, 161, 162, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	121, 37, 130, 139, 50, 117, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 0, 251, 252, 104,
	253, 254, 255, 257, 256, 226, 921, 228, 232, 230,
	229, 231, 203, 205, 148, 201, 920, 210, 206, 207,
	208, 222, 924, 212, 213, 214, 215, 216, 217, 218,
	219, 925, 926, 223, 233, 234, 235, 236, 237, 238,
	239, 240, 0, 0, 95, 67, 922, 0, 0, 0,
	0, 124, 143, 155, 156, 0, 0, 0, 151, 0,
	0, 0, 92, 47, 68, 118, 72, 79, 109, 153,
	0, 114, 51, 142, 120, 99, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 224, 0,
	74, 164, 165, 0, 77, 0, 0, 123, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 166, 167, 32, 35, 202, 76,
	0, 152, 0, 108, 62, 144, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 150,
	0, 0, 0, 106, 0, 52, 0, 129, 64, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 225, 0,
	113, 100, 141, 0, 101, 111, 78, 133, 107, 140,
	0, 131, 149, 116, 44, 94, 34, 105, 112, 0,
	53, 0, 157, 158, 159, 160, 161, 162, 163, 0,
	0, 0, 0, 1528, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	121, 37, 130, 139, 50, 117, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 0, 251, 252, 104,
	253, 254, 255, 257, 256, 226, 227, 228, 232, 230,
	229, 231, 203, 205, 148, 201, 204, 210, 206, 207,
	208, 222, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 223, 233, 234, 235, 236, 237, 238,
	239, 240, 0, 0, 95, 67, 0, 0, 0, 0,
	0, 124, 143, 155, 156, 0, 0, 0, 151, 0,
	0, 0, 92, 47, 68, 118, 72, 79, 109, 153,
	0, 114, 51, 142, 120, 0, 0, 0, 0, 99,
	0, 0, 36, 0, 1143, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 74, 164, 165, 0, 77, 0,
	0, 123, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 166, 167, 0, 35, 202, 76,
	32, 152, 1145, 108, 62, 144, 0, 0, 0, 0,
	49, 0, 0, 0, 0, 0, 0, 809, 808, 0,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 0, 810, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 150, 0, 0, 0, 106, 0, 52,
	0, 129, 64, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 113, 100, 141, 0, 101, 111,
	78, 133, 107, 140, 0, 131, 149, 116, 44, 94,
	34, 105, 112, 0, 53, 0, 157, 158, 159, 160,
	161, 162, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 121, 37, 130, 139, 50, 117,
	40, 137, 126, 128, 85, 70, 71, 119, 38, 39,
	0, 110, 59, 104, 63, 58, 97, 127, 88, 134,
	135, 55, 154, 57, 56, 125, 45, 147, 148, 42,
	46, 146, 93, 98, 96, 145, 132, 138, 86, 82,
	0, 41, 136, 84, 81, 73, 0, 61, 65, 102,
	80, 103, 66, 90, 89, 91, 0, 0, 95, 67,
	0, 0, 0, 0, 0, 124, 143, 155, 156, 0,
	0, 0, 151, 0, 0, 0, 92, 47, 68, 118,
	72, 79, 109, 153, 0, 114, 51, 142, 120, 99,
	0, 0, 36, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 224, 0, 74, 164, 165, 0, 77, 0,
	0, 123, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 166, 167,
	32, 35, 43, 76, 0, 152, 0, 108, 62, 144,
	49, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 48, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 150, 0, 0, 0, 106, 0, 52,
	0, 129, 64, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 225, 0, 113, 100, 141, 0, 101, 111,
	78, 133, 107, 140, 0, 131, 149, 116, 44, 94,
	34, 105, 112, 0, 53, 0, 157, 158, 159, 160,
	161, 162, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 121, 37, 130, 139, 50, 117,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	0, 251, 252, 104, 253, 254, 255, 257, 256, 226,
	227, 228, 232, 230, 229, 231, 203, 205, 148, 201,
	204, 210, 206, 207, 208, 222, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 221, 223, 233, 234,
	235, 236, 237, 238, 239, 240, 0, 0, 95, 67,
	0, 0, 0, 0, 0, 124, 143, 155, 156, 0,
	0, 0, 151, 0, 0, 0, 92, 47, 68, 118,
	72, 79, 109, 153, 0, 114, 51, 142, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 0, 0, 74, 164, 165, 0,
	77, 0, 0, 123, 87, 0, 0, 69, 166, 167,
	0, 35, 202, 76, 0, 152, 0, 108, 62, 144,
	1213, 0, 32, 0, 1211, 0, 0, 0, 0, 0,
	0, 0, 49, 0, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 48, 0, 0, 1210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 150, 0, 0, 0, 106,
	0, 52, 0, 129, 64, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 113, 100, 141, 0,
	101, 111, 78, 133, 107, 140, 0, 131, 149, 116,
	44, 94, 34, 105, 112, 0, 53, 0, 157, 158,
	159, 160, 161, 162, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 121, 37, 130, 139,
	50, 117, 40, 137, 126, 128, 85, 70, 71, 119,
	38, 39, 0, 110, 59, 104, 63, 58, 97, 127,
	88, 134, 135, 55, 154, 57, 56, 125, 45, 147,
	148, 42, 46, 146, 93, 98, 96, 145, 132, 138,
	86, 82, 0, 41, 136, 84, 81, 73, 0, 61,
	65, 102, 80, 103, 66, 90, 89, 91, 0, 0,
	95, 67, 0, 0, 0, 0, 0, 124, 143, 155,
	156, 0, 0, 0, 151, 0, 0, 0, 92, 47,
	68, 118, 72, 79, 109, 153, 0, 114, 51, 142,
	120, 0, 0, 0, 0, 99, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 0,
	74, 164, 165, 0, 77, 0, 0, 123, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	166, 167, 0, 35, 43, 76, 32, 152, 31, 108,
	62, 144, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 48, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 83, 150,
	0, 0, 0, 293, 0, 292, 0, 294, 295, 0,
	75, 0, 0, 296, 299, 0, 0, 0, 54, 0,
	113, 100, 141, 0, 101, 111, 78, 133, 107, 140,
	0, 131, 149, 116, 44, 94, 34, 105, 112, 0,
	53, 0, 157, 158, 159, 160, 161, 162, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	121, 37, 130, 139, 50, 117, 40, 137, 126, 128,
	85, 70, 71, 119, 38, 39, 0, 110, 59, 104,
	63, 58, 97, 127, 88, 134, 135, 55, 154, 57,
	56, 125, 45, 147, 148, 42, 46, 146, 93, 98,
	96, 145, 132, 138, 86, 82, 0, 41, 136, 84,
	81, 73, 0, 61, 65, 102, 80, 103, 66, 90,
	89, 91, 0, 0, 95, 67, 0, 0, 0, 0,
	0, 124, 143, 155, 156, 0, 0, 0, 151, 0,
	0, 0, 92, 47, 68, 118, 72, 79, 109, 153,
	0, 114, 51, 142, 120, 0, 761, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 36, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 74, 164, 165, 0, 77, 0, 0,
	123, 87, 0, 69, 166, 167, 0, 35, 43, 76,
	0, 152, 0, 108, 62, 144, 647, 0, 0, 179,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 49,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 150, 0, 0, 0, 106, 0, 52, 0,
	129, 64, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 113, 100, 141, 0, 101, 111, 78,
	133, 107, 140, 0, 131, 149, 116, 44, 94, 34,
	105, 112, 0, 53, 0, 157, 158, 159, 160, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 121, 37, 130, 139, 50, 117, 40,
	137, 126, 128, 85, 70, 71, 119, 38, 39, 0,
	110, 59, 104, 63, 58, 97, 127, 88, 134, 135,
	55, 154, 57, 56, 125, 45, 147, 148, 42, 46,
	146, 93, 98, 96, 145, 132, 138, 86, 82, 0,
	41, 136, 84, 81, 73, 0, 61, 65, 102, 80,
	103, 66, 90, 89, 91, 0, 0, 95, 67, 0,
	0, 0, 0, 0, 124, 143, 155, 156, 0, 0,
	0, 151, 0, 0, 0, 92, 47, 68, 118, 72,
	79, 109, 153, 0, 114, 51, 142, 120, 0, 0,
	0, 0, 99, 0, 0, 36, 0, 1646, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 74, 164, 165,
	0, 77, 0, 0, 123, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 166, 167, 0,
	35, 43, 76, 179, 152, 1648, 108, 62, 144, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 48, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 150, 0, 0, 0,
	106, 0, 52, 0, 129, 64, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 113, 100, 141,
	0, 101, 111, 78, 133, 107, 140, 0, 131, 149,
	116, 44, 94, 34, 105, 112, 0, 53, 0, 157,
	158, 159, 160, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 121, 37, 130,
	139, 50, 117, 40, 137, 126, 128, 85, 70, 71,
	119, 38, 39, 0, 110, 59, 104, 63, 58, 97,
	127, 88, 134, 135, 55, 154, 57, 56, 125, 45,
	147, 148, 42, 46, 146, 93, 98, 96, 145, 132,
	138, 86, 82, 0, 41, 136, 84, 81, 73, 0,
	61, 65, 102, 80, 103, 66, 90, 89, 91, 0,
	0, 95, 67, 0, 0, 0, 0, 0, 124, 143,
	155, 156, 0, 0, 0, 151, 0, 0, 0, 92,
	47, 68, 118, 72, 79, 109, 153, 0, 114, 51,
	142, 120, 0, 761, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 0,
	74, 164, 165, 0, 77, 0, 0, 123, 87, 0,
	69, 166, 167, 0, 35, 43, 76, 0, 152, 0,
	108, 62, 144, 647, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 150,
	0, 0, 0, 106, 0, 52, 0, 129, 64, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	113, 100, 141, 0, 101, 111, 78, 133, 107, 140,
	0, 131, 149, 116, 44, 94, 34, 105, 112, 0,
	53, 0, 157, 158, 159, 160, 161, 162, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	121, 37, 130, 139, 50, 117, 40, 137, 126, 128,
	85, 70, 71, 119, 38, 39, 0, 110, 59, 104,
	63, 58, 97, 127, 88, 134, 135, 55, 154, 57,
	56, 125, 45, 147, 148, 42, 46, 146, 93, 98,
	96, 145, 132, 138, 86, 82, 0, 41, 136, 84,
	81, 73, 0, 61, 65, 102, 80, 103, 66, 90,
	89, 91, 0, 0, 95, 67, 0, 0, 0, 0,
	0, 124, 143, 155, 156, 0, 0, 0, 151, 0,
	0, 0, 92, 47, 68, 118, 72, 79, 109, 153,
	0, 114, 51, 142, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 36, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 74, 164, 165, 0, 77, 0, 0,
	123, 87, 0, 69, 166, 167, 0, 35, 43, 76,
	0, 152, 0, 108, 62, 144, 647, 0, 0, 179,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 49,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 150, 0, 0, 0, 106, 0, 52, 0,
	129, 64, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 113, 100, 141, 0, 101, 111, 78,
	133, 107, 140, 0, 131, 149, 116, 44, 94, 34,
	105, 112, 0, 53, 0, 157, 158, 159, 160, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 121, 37, 130, 139, 50, 117, 40,
	137, 126, 128, 85, 70, 71, 119, 38, 39, 0,
	110, 59, 104, 63, 58, 97, 127, 88, 134, 135,
	55, 154, 57, 56, 125, 45, 147, 148, 42, 46,
	146, 93, 98, 96, 145, 132, 138, 86, 82, 0,
	41, 136, 84, 81, 73, 0, 61, 65, 102, 80,
	103, 66, 90, 89, 91, 0, 0, 95, 67, 0,
	0, 0, 0, 0, 124, 143, 155, 156, 0, 0,
	0, 151, 0, 0, 0, 92, 47, 68, 118, 72,
	79, 109, 153, 0, 114, 51, 142, 120, 0, 0,
	0, 0, 99, 0, 0, 36, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 74, 164, 165,
	0, 77, 0, 0, 123, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 166, 167, 0,
	35, 43, 76, 179, 152, 181, 108, 62, 144, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 48, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 150, 0, 0, 0,
	106, 0, 52, 0, 129, 64, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 113, 100, 141,
	0, 101, 111, 78, 133, 107, 140, 0, 131, 149,
	116, 44, 94, 34, 105, 112, 0, 53, 0, 157,
	158, 159, 160, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 121, 37, 130,
	139, 50, 117, 40, 137, 126, 128, 85, 70, 71,
	119, 38, 39, 0, 110, 59, 104, 63, 58, 97,
	127, 88, 134, 135, 55, 154, 57, 56, 125, 45,
	147, 148, 42, 46, 146, 93, 98, 96, 145, 132,
	138, 86, 82, 0, 41, 136, 84, 81, 73, 0,
	61, 65, 102, 80, 103, 66, 90, 89, 91, 0,
	0, 95, 67, 0, 0, 0, 0, 0, 124, 143,
	155, 156, 0, 0, 0, 151, 0, 0, 0, 92,
	47, 68, 118, 72, 79, 109, 153, 0, 114, 51,
	142, 120, 0, 0, 0, 0, 99, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 60, 1664, 0, 0,
	0, 74, 164, 165, 0, 77, 0, 0, 123, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 166, 167, 0, 35, 43, 76, 32, 152, 1663,
	108, 62, 144, 0, 0, 0, 0, 49, 0, 0,
	0, 0, 0, 0, 1689, 0, 0, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	150, 0, 0, 0, 106, 0, 52, 0, 129, 64,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 113, 100, 141, 0, 101, 111, 78, 133, 107,
	140, 0, 131, 149, 116, 44, 94, 34, 105, 112,
	0, 53, 0, 157, 158, 159, 160, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 121, 37, 130, 139, 50, 117, 40, 137, 126,
	128, 85, 70, 71, 119, 38, 39, 0, 110, 59,
	104, 63, 58, 97, 127, 88, 134, 135, 55, 154,
	57, 56, 125, 45, 147, 148, 42, 46, 146, 93,
	98, 96, 145, 132, 138, 86, 82, 0, 41, 136,
	84, 81, 73, 0, 61, 65, 102, 80, 103, 66,
	90, 89, 91, 0, 0, 95, 67, 0, 0, 0,
	0, 0, 124, 143, 155, 156, 0, 0, 0, 151,
	0, 0, 0, 92, 47, 68, 118, 72, 79, 109,
	153, 0, 114, 51, 142, 120, 0, 0, 0, 0,
	99, 0, 0, 36, 0, 1646, 0, 0, 0, 0,
	60, 0, 0, 0, 0, 74, 164, 165, 0, 77,
	0, 0, 123, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 166, 167, 0, 35, 43,
	76, 179, 152, 1648, 108, 62, 144, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 150, 0, 0, 0, 106, 0,
	52, 0, 129, 64, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 113, 100, 141, 0, 1644,
	111, 78, 133, 107, 140, 0, 131, 149, 116, 44,
	94, 34, 105, 112, 0, 53, 0, 157, 158, 159,
	160, 161, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 121, 37, 130, 139, 50,
	117, 40, 137, 126, 128, 85, 70, 71, 119, 38,
	39, 0, 110, 59, 104, 63, 58, 97, 127, 88,
	134, 135, 55, 154, 57, 56, 125, 45, 147, 148,
	42, 46, 146, 93, 98, 96, 145, 132, 138, 86,
	82, 0, 41, 136, 84, 81, 73, 0, 61, 65,
	102, 80, 103, 66, 90, 89, 91, 0, 0, 95,
	67, 0, 0, 0, 0, 0, 124, 143, 155, 156,
	0, 0, 0, 151, 0, 0, 0, 92, 47, 68,
	118, 72, 79, 109, 153, 0, 114, 51, 142, 120,
	0, 0, 0, 0, 99, 0, 0, 36, 0, 0,
	0, 0, 0, 1618, 60, 0, 0, 0, 0, 74,
	164, 165, 0, 77, 0, 0, 123, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 166,
	167, 0, 35, 43, 76, 179, 152, 181, 108, 62,
	144, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 150, 0,
	0, 0, 106, 0, 52, 0, 129, 64, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 113,
	100, 141, 0, 101, 111, 78, 133, 107, 140, 0,
	131, 149, 116, 44, 94, 34, 105, 112, 0, 53,
	0, 157, 158, 159, 160, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 121,
	37, 130, 139, 50, 117, 40, 137, 126, 128, 85,
	70, 71, 119, 38, 39, 0, 110, 59, 104, 63,
	58, 97, 127, 88, 134, 135, 55, 154, 57, 56,
	125, 45, 147, 148, 42, 46, 146, 93, 98, 96,
	145, 132, 138, 86, 82, 0, 41, 136, 84, 81,
	73, 0, 61, 65, 102, 80, 103, 66, 90, 89,
	91, 0, 0, 95, 67, 0, 0, 0, 0, 0,
	124, 143, 155, 156, 0, 0, 0, 151, 0, 0,
	0, 92, 47, 68, 118, 72, 79, 109, 153, 0,
	114, 51, 142, 120, 0, 0, 0, 1514, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 36, 0, 0,
	0, 0, 0, 0, 60, 0, 0, 0, 0, 74,
	164, 165, 0, 77, 0, 0, 123, 87, 0, 0,
	0, 0, 69, 166, 167, 0, 35, 43, 76, 0,
	152, 0, 108, 62, 144, 179, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 150, 0,
	0, 0, 106, 0, 52, 0, 129, 64, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 113,
	100, 141, 0, 101, 111, 78, 133, 107, 140, 0,
	131, 149, 116, 44, 94, 34, 105, 112, 0, 53,
	0, 157, 158, 159, 160, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 121,
	37, 130, 139, 50, 117, 40, 137, 126, 128, 85,
	70, 71, 119, 38, 39, 0, 110, 59, 104, 63,
	58, 97, 127, 88, 134, 135, 55, 154, 57, 56,
	125, 45, 147, 148, 42, 46, 146, 93, 98, 96,
	145, 132, 138, 86, 82, 0, 41, 136, 84, 81,
	73, 0, 61, 65, 102, 80, 103, 66, 90, 89,
	91, 0, 0, 95, 67, 0, 0, 0, 0, 0,
	124, 143, 155, 156, 0, 0, 0, 151, 0, 0,
	0, 92, 47, 68, 118, 72, 79, 109, 153, 0,
	114, 51, 142, 120, 0, 0, 0, 0, 99, 0,
	0, 36, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 74, 164, 165, 0, 77, 0, 0,
	123, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 166, 167, 0, 35, 43, 76, 566,
	152, 181, 108, 62, 144, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 150, 0, 0, 0, 106, 0, 52, 0,
	129, 64, 0, 75, 0, 0, 0, 627, 0, 0,
	0, 54, 0, 113, 100, 141, 0, 101, 111, 78,
	133, 107, 140, 0, 131, 149, 116, 44, 94, 34,
	105, 112, 0, 53, 0, 157, 158, 159, 160, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 121, 37, 130, 139, 50, 117, 40,
	137, 126, 128, 85, 70, 71, 119, 38, 39, 0,
	110, 59, 104, 63, 58, 97, 127, 88, 134, 135,
	55, 154, 57, 56, 125, 45, 147, 148, 42, 46,
	146, 93, 98, 96, 145, 132, 138, 86, 82, 0,
	41, 136, 84, 81, 73, 0, 61, 65, 102, 80,
	103, 66, 90, 89, 91, 0, 0, 95, 67, 0,
	0, 0, 0, 0, 124, 143, 155, 156, 0, 0,
	0, 151, 0, 0, 0, 92, 47, 68, 118, 72,
	79, 109, 153, 0, 114, 51, 142, 120, 0, 0,
	0, 0, 99, 0, 0, 36, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 74, 164, 165,
	0, 77, 0, 0, 123, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 166, 167, 0,
	35, 43, 76, 179, 152, 181, 108, 62, 144, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 48, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 150, 0, 0, 0,
	106, 0, 52, 0, 129, 64, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 113, 100, 141,
	0, 101, 111, 78, 133, 107, 140, 0, 131, 149,
	116, 44, 94, 34, 105, 112, 0, 53, 0, 157,
	158, 159, 160, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 121, 37, 130,
	139, 50, 117, 40, 137, 126, 128, 85, 70, 71,
	119, 38, 39, 0, 110, 59, 104, 63, 58, 97,
	127, 88, 134, 135, 55, 154, 57, 56, 125, 45,
	147, 148, 42, 46, 146, 93, 98, 96, 145, 132,
	138, 86, 82, 0, 41, 136, 84, 81, 73, 0,
	61, 65, 102, 80, 103, 66, 90, 89, 91, 0,
	0, 95, 67, 0, 0, 0, 0, 0, 124, 143,
	155, 156, 0, 0, 0, 151, 0, 0, 0, 92,
	47, 68, 118, 72, 79, 109, 153, 280, 114, 51,
	142, 120, 99, 0, 0, 36, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 74, 164, 165,
	0, 77, 0, 0, 123, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 0,
	69, 166, 167, 32, 35, 43, 76, 0, 152, 0,
	108, 62, 144, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 150, 0, 0, 0,
	106, 0, 52, 0, 129, 64, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 113, 100, 141,
	0, 101, 111, 78, 133, 107, 140, 0, 131, 149,
	116, 44, 94, 34, 105, 112, 0, 53, 0, 157,
	158, 159, 160, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 122, 121, 37, 130,
	139, 50, 117, 40, 137, 126, 128, 85, 70, 71,
	119, 38, 39, 0, 110, 59, 104, 63, 58, 97,
	127, 88, 134, 135, 55, 154, 57, 56, 125, 45,
	147, 148, 42, 46, 146, 93, 98, 96, 145, 132,
	138, 86, 82, 0, 41, 136, 84, 81, 73, 0,
	61, 65, 102, 80, 103, 66, 90, 89, 91, 0,
	0, 95, 67, 0, 0, 0, 0, 0, 124, 143,
	155, 156, 0, 0, 0, 151, 0, 0, 0, 92,
	47, 68, 118, 72, 79, 109, 153, 0, 114, 51,
	142, 120, 0, 0, 0, 0, 99, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 60, 0, 0, 0,
	0, 74, 164, 165, 0, 77, 0, 0, 123, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 166, 167, 0, 35, 43, 76, 566, 152, 181,
	108, 62, 144, 0, 0, 0, 0, 49, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	150, 0, 0, 0, 106, 0, 52, 0, 129, 64,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 113, 100, 141, 0, 101, 111, 78, 133, 107,
	140, 0, 131, 149, 116, 44, 94, 34, 105, 112,
	0, 53, 0, 157, 158, 159, 160, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 121, 37, 130, 139, 50, 117, 40, 137, 126,
	128, 85, 70, 71, 119, 38, 39, 0, 110, 59,
	104, 63, 58, 97, 127, 88, 134, 135, 55, 154,
	57, 56, 125, 45, 147, 148, 42, 46, 146, 93,
	98, 96, 145, 132, 138, 86, 82, 0, 41, 136,
	84, 81, 73, 0, 61, 65, 102, 80, 103, 66,
	90, 89, 91, 0, 0, 95, 67, 0, 0, 0,
	0, 0, 124, 143, 155, 156, 0, 0, 0, 151,
	0, 0, 0, 92, 47, 68, 118, 72, 79, 109,
	153, 0, 114, 51, 142, 120, 99, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 60, 0, 0, 0,
	0, 74, 164, 165, 0, 77, 0, 0, 123, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 166, 167, 32, 35, 43,
	76, 0, 152, 0, 108, 62, 144, 49, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	150, 0, 0, 0, 106, 0, 52, 0, 129, 64,
	0, 75, 0, 0, 0, 773, 0, 0, 0, 54,
	0, 113, 100, 141, 0, 101, 111, 78, 133, 107,
	140, 0, 131, 149, 116, 44, 94, 34, 105, 112,
	0, 53, 0, 157, 158, 159, 160, 161, 162, 163,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 121, 37, 130, 139, 50, 117, 40, 137, 126,
	128, 85, 70, 71, 119, 38, 39, 0, 110, 59,
	104, 63, 58, 97, 127, 88, 134, 135, 55, 154,
	57, 56, 125, 45, 147, 148, 42, 46, 146, 93,
	98, 96, 145, 132, 138, 86, 82, 0, 41, 136,
	84, 81, 73, 0, 61, 65, 102, 80, 103, 66,
	90, 89, 91, 0, 0, 95, 67, 0, 0, 0,
	0, 0, 124, 143, 155, 156, 0, 0, 0, 151,
	0, 0, 0, 92, 47, 68, 118, 72, 79, 109,
	153, 0, 114, 51, 142, 120, 0, 0, 0, 0,
	99, 0, 0, 36, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 0, 0, 74, 164, 165, 0, 77,
	0, 0, 123, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 166, 167, 0, 35, 43,
	76, 179, 152, 181, 108, 62, 144, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 150, 0, 0, 0, 106, 0,
	52, 0, 129, 64, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 113, 100, 141, 0, 101,
	111, 78, 133, 107, 140, 0, 131, 149, 116, 44,
	94, 34, 105, 112, 0, 53, 0, 157, 158, 159,
	160, 161, 162, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 121, 37, 130, 139, 50,
	117, 40, 137, 126, 128, 85, 70, 71, 119, 38,
	39, 0, 110, 59, 104, 63, 58, 97, 127, 88,
	134, 135, 55, 154, 57, 56, 125, 45, 147, 148,
	42, 46, 146, 93, 98, 96, 145, 132, 138, 86,
	82, 0, 41, 136, 84, 81, 73, 0, 61, 65,
	102, 80, 103, 66, 90, 89, 91, 0, 0, 95,
	67, 0, 0, 0, 0, 0, 124, 143, 155, 156,
	0, 0, 0, 151, 0, 0, 0, 92, 47, 68,
	118, 72, 79, 109, 153, 0, 114, 51, 142, 120,
	0, 0, 0, 0, 99, 0, 0, 36, 0, 0,
	0, 0, 0, 0, 60, 0, 0, 0, 0, 74,
	164, 165, 0, 77, 0, 0, 123, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 166,
	167, 0, 35, 43, 76, 179, 152, 1648, 108, 62,
	144, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 150, 0,
	0, 0, 106, 0, 52, 0, 129, 64, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 113,
	100, 141, 0, 101, 111, 78, 133, 107, 140, 0,
	131, 149, 116, 44, 94, 34, 105, 112, 0, 53,
	0, 157, 158, 159, 160, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 121,
	37, 130, 139, 50, 117, 40, 137, 126, 128, 85,
	70, 71, 119, 38, 39, 0, 110, 59, 104, 63,
	58, 97, 127, 88, 134, 135, 55, 154, 57, 56,
	125, 45, 147, 148, 42, 46, 146, 93, 98, 96,
	145, 132, 138, 86, 82, 0, 41, 136, 84, 81,
	73, 0, 61, 65, 102, 80, 103, 66, 90, 89,
	91, 0, 0, 95, 67, 0, 0, 0, 0, 0,
	124, 143, 155, 156, 0, 0, 0, 151, 0, 0,
	0, 92, 47, 68, 118, 72, 79, 109, 153, 0,
	114, 51, 142, 120, 99, 0, 0, 36, 0, 0,
	0, 0, 0, 0, 60, 0, 0, 0, 0, 74,
	164, 165, 0, 77, 0, 0, 123, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 166, 167, 32, 35, 43, 76, 0,
	152, 0, 108, 62, 144, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 150, 0,
	0, 0, 106, 0, 52, 0, 129, 64, 0, 75,
	0, 0, 0, 627, 0, 0, 0, 54, 0, 113,
	100, 141, 0, 101, 111, 78, 133, 107, 140, 0,
	131, 149, 116, 44, 94, 34, 105, 112, 0, 53,
	0, 157, 158, 159, 160, 161, 162, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 121,
	37, 130, 139, 50, 117, 40, 137, 126, 128, 85,
	70, 71, 119, 38, 39, 0, 110, 59, 104, 63,
	58, 97, 127, 88, 134, 135, 55, 154, 57, 56,
	125, 45, 147, 148, 42, 46, 146, 93, 98, 96,
	145, 132, 138, 86, 82, 0, 41, 136, 84, 81,
	73, 0, 61, 65, 102, 80, 103, 66, 90, 89,
	91, 0, 0, 95, 67, 0, 0, 0, 0, 0,
	124, 143, 155, 156, 0, 0, 0, 151, 0, 0,
	0, 92, 47, 68, 118, 72, 79, 109, 153, 0,
	114, 51, 142, 120, 0, 0, 0, 0, 99, 0,
	0, 36, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 74, 164, 165, 0, 77, 0, 0,
	123, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 166, 167, 0, 35, 43, 76, 32,
	152, 1145, 108, 62, 144, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 150, 0, 0, 0, 106, 0, 52, 0,
	129, 64, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 113, 100, 141, 0, 101, 111, 78,
	133, 107, 140, 0, 131, 149, 116, 44, 94, 34,
	105, 112, 0, 53, 0, 157, 158, 159, 160, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 121, 37, 130, 139, 50, 117, 40,
	137, 126, 128, 85, 70, 71, 119, 38, 39, 0,
	110, 59, 104, 63, 58, 97, 127, 88, 134, 135,
	55, 154, 57, 56, 125, 45, 147, 148, 42, 46,
	146, 93, 98, 96, 145, 132, 138, 86, 82, 0,
	41, 136, 84, 81, 73, 0, 61, 65, 102, 80,
	103, 66, 90, 89, 91, 0, 0, 95, 67, 0,
	0, 0, 0, 0, 124, 143, 155, 156, 0, 0,
	0, 151, 0, 0, 0, 92, 47, 68, 118, 72,
	79, 109, 153, 0, 114, 51, 142, 120, 99, 0,
	0, 36, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 74, 164, 165, 0, 77, 0, 0,
	123, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 166, 167, 32,
	35, 43, 76, 0, 152, 0, 108, 62, 144, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 48, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 150, 0, 0, 0, 106, 0, 52, 0,
	129, 64, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 113, 100, 141, 0, 101, 111, 78,
	133, 107, 140, 0, 131, 149, 116, 44, 94, 34,
	105, 112, 0, 53, 0, 157, 158, 159, 160, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 121, 37, 130, 139, 50, 117, 40,
	137, 126, 128, 85, 70, 71, 119, 38, 39, 0,
	110, 59, 104, 63, 58, 97, 127, 88, 134, 135,
	55, 154, 57, 56, 125, 45, 147, 148, 42, 46,
	146, 93, 98, 96, 145, 132, 138, 86, 82, 0,
	41, 136, 84, 81, 73, 0, 61, 65, 102, 80,
	103, 66, 90, 89, 91, 0, 0, 95, 67, 0,
	0, 0, 0, 0, 124, 143, 155, 156, 0, 0,
	0, 151, 0, 0, 0, 92, 47, 68, 118, 72,
	79, 109, 153, 0, 114, 51, 142, 120, 99, 0,
	0, 36, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 74, 164, 165, 0, 77, 0, 0,
	123, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 166, 167, 32,
	35, 43, 76, 0, 152, 0, 108, 62, 144, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 831, 48, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 150, 0, 0, 176, 106, 0, 52, 0,
	129, 64, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 113, 100, 141, 0, 101, 111, 78,
	133, 107, 140, 0, 131, 149, 116, 44, 94, 34,
	105, 112, 0, 53, 0, 157, 158, 159, 160, 161,
	162, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 121, 37, 130, 139, 50, 117, 40,
	137, 126, 128, 85, 70, 71, 119, 38, 39, 0,
	110, 59, 104, 63, 58, 97, 127, 88, 134, 135,
	55, 154, 57, 56, 125, 45, 147, 148, 42, 46,
	146, 93, 98, 96, 145, 132, 138, 86, 82, 0,
	41, 136, 84, 81, 73, 0, 61, 65, 102, 80,
	103, 66, 90, 89, 91, 0, 0, 95, 67, 0,
	0, 0, 0, 0, 124, 143, 155, 156, 0, 0,
	0, 151, 0, 0, 0, 92, 47, 68, 118, 72,
	79, 109, 153, 0, 114, 51, 142, 120, 0, 0,
	0, 0, 99, 0, 0, 36, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 74, 164, 165,
	0, 77, 0, 0, 123, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 166, 167, 0,
	35, 43, 76, 32, 152, 31, 108, 62, 144, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 48, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 150, 0, 0, 0,
	106, 0, 52, 0, 129, 64, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 113, 100, 141,
	0, 101, 111, 78, 133, 107, 140, 0, 131, 149,
	116, 44, 94, 34, 105, 112, 0, 53, 0, 157,
	158, 159, 160, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 121, 37, 130,
	139, 50, 117, 40, 137, 126, 128, 85, 70, 71,
	119, 38, 39, 0, 110, 59, 104, 63, 58, 97,
	127, 88, 134, 135, 55, 154, 57, 56, 125, 45,
	147, 148, 42, 46, 146, 93, 98, 96, 145, 132,
	138, 86, 82, 0, 41, 136, 84, 81, 73, 0,
	61, 65, 102, 80, 103, 66, 90, 89, 91, 0,
	0, 95, 67, 0, 0, 0, 0, 0, 124, 143,
	155, 156, 0, 0, 0, 151, 0, 0, 0, 92,
	47, 68, 118, 72, 79, 109, 153, 0, 114, 51,
	142, 120, 99, 0, 0, 36, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 74, 164, 165,
	0, 77, 0, 0, 123, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 166, 167, 32, 35, 43, 76, 0, 152, 0,
	108, 62, 144, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 150, 0, 0, 0,
	106, 0, 52, 0, 129, 64, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 113, 100, 141,
	0, 101, 111, 78, 133, 107, 140, 0, 131, 149,
	116, 44, 94, 34, 105, 112, 0, 53, 0, 157,
	158, 159, 160, 161, 162, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 121, 37, 130,
	139, 50, 117, 40, 137, 126, 128, 85, 70, 71,
	119, 38, 39, 0, 110, 59, 104, 63, 58, 97,
	127, 88, 134, 135, 55, 154, 57, 56, 125, 45,
	147, 148, 42, 46, 146, 93, 98, 96, 145, 132,
	138, 86, 82, 0, 41, 136, 84, 81, 73, 0,
	61, 65, 102, 80, 103, 66, 90, 89, 91, 0,
	0, 95, 67, 0, 0, 0, 0, 0, 124, 143,
	155, 156, 0, 0, 0, 151, 0, 0, 0, 92,
	47, 68, 118, 72, 79, 109, 153, 0, 114, 51,
	142, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 166, 167, 0, 35, 43, 76, 0, 152, 0,
	108, 62, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
}

var yyPact = [...]int16{
	406, -1000, -264, -1000, -1000, 1110, 96, 353, -1000, -1000,
	-1000, 18894, 373, 367, 224, 358, 19174, 18610, 17202, 381,
	350, -1000, -231, -188, -1000, -73, 375, -1000, 973, -1000,
	12341, 12341, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16354, 19174,
	350, 150, 350, 1122, 386, 19174, 609, 1252, 463, -1000,
	-1000, -1000, 350, 17202, -1000, -1000, -1000, -1000, 16074, 186,
	12917, 315, -162, 30, -1000, -1000, -1000, -1000, -1000, 1065,
	-1000, -1000, -1000, 1065, 279, 1109, 1065, 1109, -1000, 1065,
	1109, 72, 72, 72, 72, 72, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1108, 1107, -1000, 1065, 1065, 1065, 1065,
	1065, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1078, 286, 1078, 1073, 1073, -1000, -1000, 315, 1106,
	17202, 19174, 1120, 17202, -247, 17202, 17202, 1395, 17202, -1000,
	-1000, -1000, 194, 415, 1234, 12341, 6257, 17202, -1000, 390,
	17202, 6628, 1058, 1170, -1000, -1000, -1000, -1000, -1000, -1000,
	1103, 721, 19174, 323, 292, 504, 379, 855, -1000, -1000,
	-1000, 715, -1000, 19174, -1000, 1334, -1000, -1000, 309, -1000,
	308, 579, 792, 17202, 1102, 155, 1100, 10634, 777, -1000,
	-274, -1000, 27, -1000, -1000, 743, 72, 72, 1065, 72,
	639, 72, 72, -1000, -1000, 473, 1177, 473, 473, 473,
	473, 790, 790, -113, -113, -1000, -1000, -1000, -1000, 776,
	1078, -1000, -1000, -1000, 774, -1000, 17202, 19174, 1098, 1119,
	17202, 1251, 357, -1000, -1000, 1250, 1249, 1010, -1000, -1000,
	184, -1000, 415, -1000, 1395, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1113, 335,
	384, 5886, -1000, -1000, -1000, 186, -1000, 17766, -1000, 1348,
	1269, 333, -7, -1000, 836, 817, -1000, 813, -1000, -1000,
	21, -1000, -197, 89, 32, -1000, -1000, 1061, -1000, 1097,
	8979, 1243, -1000, 1200, 771, -1000, 10303, -1000, -250, -1000,
	-1000, -1000, -250, -1000, -1000, -1000, 1061, -1000, 1096, 1095,
	-1000, 1093, -1000, -1000, 1061, 457, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1002, 473, 473, 72, 473, 998, 993,
	473, 473, -1000, -1000, 811, 536, -1000, -1000, -1000, -1000,
	957, -1000, 954, -1000, 109, 106, -1000, 1057, -1000, 951,
	1054, 1118, 15790, 17202, 1094, 1060, 350, 1060, 1268, 241,
	17202, 1395, 16918, 1395, 1004, 19174, 288, 19174, -1000, -1000,
	342, 3660, -1000, 6628, 949, -1000, 252, 1065, 462, 462,
	-199, 305, 303, 1061, -1000, -1000, -1000, -1000, -227, -1000,
	-1000, -1000, -1000, 579, -1000, 1093, 8979, -1000, 16918, 707,
	-1000, 8979, 50, 1061, 1061, -1000, -1000, 411, -1000, -1000,
	-1000, 9641, 9641, 9641, 9641, 9641, 9641, 9641, -1000, -1000,
	-1000, -1000, 44, -250, -1000, 791, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 437, 435, -1000, 8648, 1061, 1061, 1061,
	1061, 1061, 1061, 1061, 1061, 8979, 1061, 1163, 1061, 1061,
	1061, 1061, 1061, 1061, 1061, 1061, 2314, 1061, 1061, 1061,
	1061, -1000, 112, -1000, 1048, 989, 2507, 987, -1000, 11497,
	-1000, 824, -1000, 744, -1000, 709, 986, 7312, 6628, -1000,
	-1000, -1000, 473, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 72, 784, 72, 25, 6, 770, -1000, 764, 15790,
	19174, 17202, 981, 1041, -1000, 250, 1092, 16918, -1000, 1287,
	1342, -1000, 1060, 17202, -1000, 355, 1328, -1000, -1000, 1264,
	-1000, 1040, -1000, -1000, 1017, 17202, 1091, 19174, -1000, -1000,
	290, 19174, -1000, -1000, -1000, -1000, -1000, 372, 17766, 1231,
	-1000, -1000, -1000, 652, -1000, -1000, 615, 245, 643, -1000,
	19174, -227, 8979, -1000, 1061, 656, 946, -121, 8979, 8979,
	740, 499, 9641, 675, 551, 9641, 9641, 9641, 9641, 9641,
	9641, 9641, 9641, 9641, 9641, 9641, 9641, 9641, 9641, 9641,
	783, 2264, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 802, -1000, 1060, 10925, 10925, 7,
	7, 7, 7, 7, 7, 18330, -1000, -272, -1000, -1000,
	5515, 6628, 824, 940, 692, 8648, 7974, 7974, 8305, 8979,
	9641, 16638, 7974, 1256, 580, 692, 16638, 1263, -1000, 824,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 76,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7974, 7974,
	7974, 7974, 8979, 1090, 752, -1000, 922, -250, 1061, -1000,
	277, 158, -1000, -1000, 72, -1000, -1000, -162, -1000, -1000,
	-1000, -1000, -1000, 824, 7974, 934, 940, -1000, 12061, -1000,
	426, 1061, -1000, 473, -1000, 473, -1000, -1000, 919, 915,
	900, 1087, 1086, -234, 743, 15790, 936, 1272, 1283, 1060,
	1248, 1212, -1000, 824, 1241, 19174, -1000, -1000, -1000, -1000,
	-1000, 222, 578, 19174, 2591, 1262, -1000, 12633, 1085, 1083,
	346, 1115, 769, 134, -1000, 798, 562, 782, 557, 556,
	555, 550, 540, 537, 535, -1000, -1000, -1000, -1000, -1000,
	1331, -1000, -1000, -1000, 1311, 1081, -1000, 1080, 656, 8979,
	247, 1117, -1000, -1000, 499, 526, -1000, -1000, 759, -1000,
	-1000, 2244, -1000, -1000, -1000, -1000, 675, 9641, 9641, 9641,
	2063, 2244, 2213, 567, 100, 7, 85, 85, 5, 5,
	5, 5, 5, 210, 210, -1000, -1000, -1000, -1000, -102,
	-1000, 1065, 1078, 286, 1078, 1073, 1073, -1000, -1000, 824,
	-1000, -250, 761, -1000, -1000, 742, 1061, 425, -1000, -1000,
	-1000, 8979, -1000, 824, 934, 12061, 934, 670, 1039, 9972,
	1065, -1000, 1065, 1073, -1000, -1000, 125, 1065, 124, -1000,
	-1000, -1000, -1000, 1073, -1000, -1000, -1000, -1000, -1000, 1065,
	1065, -1000, -1000, 1065, 1065, -1000, 1065, 1065, 694, 575,
	2177, 1035, -1000, 423, 934, 7974, -1000, 574, -1000, 8979,
	824, 17202, -1000, -1000, 934, 824, 1038, 934, 934, 704,
	-1000, 882, 875, 1065, -1000, -1000, -1000, 934, 7974, -262,
	-1000, -1000, -1000, 18050, -1000, -1000, 3289, 7974, -1000, -1000,
	-1000, -1000, -234, 15790, 17766, 1301, 1077, 860, 1301, 1233,
	8979, 8979, 1287, -1000, 1060, -1000, -1000, 1256, -1000, -1000,
	624, -1000, 1060, 944, -1000, 209, 147, 8979, -1000, 2591,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1287, -1000, -1000, -1000, 19174, 2560, 19174, 19174, 19174, 369,
	9310, 8979, -1000, -1000, -1000, 578, 216, 847, 11217, 12633,
	12633, 11217, 12633, 12633, 17766, 17766, 300, -1000, 19174, -1000,
	-128, 769, 19174, -1000, 716, -1000, -1000, 682, 714, 682,
	682, 682, 682, 682, 462, 462, 19174, 17766, 247, 656,
	-1000, -82, 1321, -1000, -1000, -1000, -1000, 2063, 2244, 2027,
	-1000, 9641, 9641, 98, -1000, 46, -1000, -250, 6628, 692,
	-1000, -1000, -1000, 2764, 783, 8979, -1000, 253, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2764, 9641, 9641, 9641, 9641, 9641, 5515, -92, 1020, 569,
	-1000, 8979, 667, -1000, -1000, -1000, -1000, -1000, -1000, -151,
	180, -1000, -1000, -1000, -1000, -1000, 1061, -1000, -1000, 422,
	824, 1301, 841, 929, 372, 8979, 16918, -234, 372, -1000,
	1326, 429, 646, 1022, -1000, 612, 1272, 824, 1135, -1000,
	-1000, -104, 19174, 8979, 2237, 2591, 692, -1000, 1272, 353,
	15506, 14080, 1018, 11777, -1000, 5144, 772, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 19174, 1309, 1307, 1305, 1303, 865, 50, 608,
	142, 139, 206, -1000, -1000, 11217, -1000, -1000, -1000, -1000,
	-1000, 927, 914, 1076, 1061, 907, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 579, 579,
	905, 903, -1000, 247, -1000, 462, 462, -1000, 9641, 2244,
	2244, -5, -1000, 742, -1000, -1000, 824, 1065, 1065, -1000,
	1065, 1073, -1000, 125, 1065, 124, -1000, -1000, -1000, -1000,
	1073, -1000, -1000, -1000, -1000, -1000, 1065, 1065, -1000, -1000,
	1065, 1065, -1000, 1065, 1065, 824, 656, -1000, -1000, 824,
	1343, 1991, 1892, 979, 1715, -1000, 1061, -80, -1000, 692,
	8979, -1000, -1000, -1000, 163, 678, 710, 698, 665, 31,
	-1000, 1282, 413, 4773, -1000, 372, 1301, 372, 1115, 692,
	874, 1301, 1115, -1000, 1160, 8979, 8979, 8979, -1000, 1233,
	-1000, 7974, -1000, -1000, -256, -1000, 692, -1000, -1000, 2591,
	565, -1000, 1233, 15216, 17202, 899, -1000, 912, 1056, -1000,
	-1000, -1000, 1240, 13210, 14932, 19174, 189, -1000, -1000, 1015,
	4402, 3, -1000, -1000, -1000, 531, 414, 14648, -1000, 1175,
	-1000, -1000, 2560, 1206, -1000, -1000, -1000, -1000, -1000, 2591,
	2591, 2591, 2591, -1000, -1000, 289, 17766, 19174, -1000, 769,
	-1000, -1000, 337, 372, -1000, -1000, -1000, 2244, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 9641, 9641, -1000, 9641, 9641,
	9641, 824, 677, 692, 661, -1000, 636, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14364, -1000, 1281, 824, -1000, 1115,
	372, -1000, -1000, -1000, 372, -1000, 1155, 692, 692, -1000,
	-1000, 984, 8979, -265, 2576, -1000, -1000, 259, 17202, -1000,
	259, 898, 14080, 17202, -1000, -1000, 16638, 14080, 14080, 14080,
	14080, 14080, -1000, 1142, 1141, -1000, 1134, 1133, 1144, 17202,
	-1000, 869, 13210, 446, 1061, -1000, 17486, -1000, -1000, -1000,
	12341, 1261, 4031, 1015, 3, 1014, -1000, -30, 4, 6981,
	6628, 473, -1000, -1000, -1000, -1000, -1000, 19174, 243, 389,
	214, 278, 162, -1000, 178, 867, 824, -1000, 17202, 1115,
	1343, 1343, 1343, 1343, 1138, -1000, -1000, -1000, -1000, -1000,
	404, 8979, -1000, -1000, -1000, 1115, -1000, 1301, 14080, 692,
	568, -1000, -1000, 880, 1061, -1000, 1301, 14080, 910, -1000,
	925, -1000, 523, 1056, 1072, 1074, 978, -1000, -1000, -1000,
	-1000, 1140, -1000, 1137, -1000, -1000, -1000, -1000, -108, 366,
	365, 361, 19174, -1000, 1060, -1000, 1014, 3, -26, -1000,
	-1000, -1000, -1000, 692, 508, -1000, -1000, -1000, 2591, 527,
	566, 2529, -1000, 174, -1000, -1000, -1000, 1064, -1000, -1000,
	-1000, -1000, -1000, 824, 199, -158, 6628, 840, -1000, 692,
	-1000, 1299, 1013, -1000, 1059, 16638, 1061, -1000, 13787, 19174,
	1287, 910, -1000, 1287, 16638, 8979, -1000, -1000, 8979, 1063,
	-1000, 8979, -1000, -1000, -1000, -1000, 1062, 1061, 1061, 1061,
	846, -1000, -1000, -1000, -1000, -34, -16, -1000, 8979, 349,
	137, -1000, -1000, -1000, 19174, -1000, 1152, -98, -164, -1000,
	-1000, 824, 8979, 1296, 1274, -1000, 1203, 881, 1008, -1000,
	-1000, 7643, 824, 851, 402, 846, 1272, -1000, 1272, -1000,
	692, 692, 16918, 692, -189, 16918, 16918, 16918, 13494, 19174,
	-1000, -1000, -1000, 692, -1000, 2591, 844, -1000, 1121, -1000,
	-1000, -1000, -1000, 8979, 8979, 295, -1000, 1061, -1000, -1000,
	982, 19174, 19174, -1000, -1000, -1000, 835, 833, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 823, 823, 823, 446, -1000,
	101, -1000, -106, 692, 1011, 1314, -1000, 1061, -1000, 1060,
	394, -1000, -1000, -1000, -189, -1000, -1000, -1000, -108, -1000,
	-161, 16638, 1008, 824, 19174, -1000, -1000, -172, 985, -1000,
	-1000, -1000,
}

var yyPgo = [...]int16{
	0, 1579, 57, 53, 1576, 1573, 1572, 1570, 1562, 1560,
	1559, 1554, 1553, 1550, 1549, 1548, 1544, 1542, 1541, 100,
	1540, 1539, 1537, 67, 1536, 1535, 1533, 1528, 63, 108,
	79, 68, 1428, 1527, 29, 35, 42, 1523, 23, 1522,
	1521, 54, 1520, 30, 1519, 1517, 527, 1516, 1513, 10,
	243, 66, 92, 1511, 1510, 80, 1364, 1508, 1506, 78,
	1505, 1504, 72, 9, 3, 21, 2, 1503, 143, 6,
	1502, 69, 1501, 1500, 1499, 1498, 26, 1497, 48, 56,
	27, 43, 1496, 34, 52, 36, 20, 7, 5, 47,
	22, 1495, 16, 28, 13, 1494, 55, 1493, 102, 65,
	76, 73, 0, 201, 45, 84, 1489, 1487, 1486, 1111,
	89, 33, 4, 1482, 59, 1480, 58, 85, 25, 88,
	83, 1479, 81, 1478, 1477, 1475, 1716, 347, 98, 116,
	24, 1474, 1471, 77, 74, 70, 51, 247, 417, 64,
	1465, 1464, 1463, 91, 1462, 50, 86, 14, 270, 1461,
	1459, 1457, 1456, 1443, 99, 1442, 90, 1441, 71, 46,
	82, 44, 38, 1440, 1437, 1436, 1435, 61, 1434, 1432,
	1431, 62, 1430, 1427, 87, 60, 101, 93, 97, 1426,
	1423, 75, 127, 95, 1421, 94, 37, 15, 41, 1418,
	40, 1409, 1408, 1407, 1, 11, 1406, 1397, 1394, 1393,
	1391, 1390, 49, 1387, 1385, 1383, 8, 1381, 1379, 39,
	1374, 1368, 1367, 1365, 1362, 1203, 627, 1361, 115, 1352,
	1350, 163,
}

var yyR1 = [...]uint8{
	0, 211, 212, 212, 1, 1, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 15, 15, 15, 15, 15, 214, 214,
	2, 2, 3, 4, 4, 5, 5, 6, 6, 22,
	22, 7, 8, 8, 8, 217, 217, 41, 41, 85,
	85, 9, 9, 9, 9, 10, 10, 191, 191, 190,
	192, 192, 11, 11, 11, 11, 11, 184, 184, 184,
	184, 184, 12, 12, 187, 187, 187, 13, 13, 13,
	90, 90, 94, 94, 94, 95, 95, 95, 95, 203,
	203, 115, 115, 213, 213, 218, 218, 218, 218, 218,
	218, 218, 182, 182, 182, 182, 183, 183, 183, 183,
	185, 185, 186, 186, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 189, 189, 100, 100, 165, 165,
	165, 166, 166, 166, 166, 166, 166, 168, 168, 169,
	169, 107, 107, 170, 170, 18, 150, 151, 151, 151,
	151, 151, 151, 151, 138, 138, 118, 118, 118, 118,
	118, 118, 118, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 176, 176, 176, 176, 176, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 178, 179, 180, 172, 172,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 128, 128, 128, 128, 128, 128,
	171, 171, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 122, 122, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 121, 121, 121, 121, 121, 121, 121,
	121, 123, 123, 123, 123, 123, 123, 123, 123, 119,
	119, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 125, 125, 125, 125, 125, 125,
	125, 125, 137, 137, 126, 126, 135, 135, 136, 136,
	136, 127, 127, 127, 134, 134, 134, 131, 131, 132,
	132, 133, 133, 133, 129, 129, 129, 130, 130, 130,
	140, 161, 161, 161, 163, 163, 164, 164, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 149,
	149, 181, 181, 160, 160, 160, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 148, 148, 158, 158, 159,
	159, 156, 156, 156, 157, 143, 143, 143, 143, 143,
	144, 145, 145, 145, 145, 141, 142, 174, 174, 174,
	207, 207, 207, 207, 207, 207, 208, 208, 175, 175,
	146, 146, 147, 147, 154, 154, 154, 154, 219, 219,
	152, 152, 153, 153, 153, 220, 19, 20, 20, 21,
	21, 21, 25, 25, 25, 23, 23, 24, 24, 30,
	30, 29, 29, 31, 31, 31, 31, 106, 106, 106,
	105, 105, 204, 204, 204, 204, 204, 33, 33, 34,
	34, 35, 35, 36, 36, 36, 194, 194, 193, 193,
	195, 195, 195, 195, 195, 195, 48, 48, 83, 83,
	83, 86, 86, 37, 37, 37, 37, 38, 38, 39,
	39, 40, 40, 113, 113, 112, 112, 112, 111, 111,
	42, 42, 42, 44, 43, 43, 43, 43, 45, 45,
	47, 47, 46, 46, 49, 49, 49, 49, 50, 50,
	84, 84, 32, 32, 32, 32, 32, 32, 32, 97,
	97, 52, 52, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 61, 61, 61, 61, 61, 61, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	28, 28, 62, 62, 62, 68, 63, 63, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 59, 59, 59, 59, 59,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 221, 221, 60, 60,
	60, 60, 26, 26, 26, 26, 26, 114, 114, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 117, 117, 117, 117, 117, 117, 117, 117, 72,
	72, 27, 27, 70, 70, 71, 99, 99, 73, 73,
	69, 69, 69, 196, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 74, 74, 75, 75, 205, 205,
	206, 76, 76, 77, 77, 78, 79, 79, 79, 80,
	80, 80, 80, 81, 81, 81, 54, 54, 54, 54,
	54, 54, 82, 82, 82, 82, 87, 87, 64, 64,
	66, 66, 65, 67, 88, 88, 92, 89, 89, 93,
	93, 93, 93, 93, 16, 17, 91, 91, 91, 108,
	108, 108, 98, 98, 96, 96, 103, 103, 104, 104,
	109, 109, 109, 110, 110, 197, 197, 197, 198, 198,
	198, 199, 199, 200, 201, 201, 202, 210, 210, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 215, 216,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 7, 10, 7, 11, 11, 9, 13,
	14, 5, 8, 11, 13, 13, 6, 7, 1, 1,
	4, 6, 10, 1, 3, 1, 3, 7, 8, 1,
	1, 8, 8, 7, 6, 1, 1, 1, 3, 0,
	4, 3, 4, 5, 4, 2, 6, 1, 3, 2,
	0, 1, 2, 2, 2, 3, 5, 0, 2, 2,
	2, 2, 3, 5, 1, 2, 3, 7, 5, 9,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 0, 3, 0, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 1, 1, 1, 3,
	1, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 4, 0, 3, 0, 2,
	2, 0, 2, 2, 2, 2, 2, 0, 2, 0,
	3, 0, 1, 0, 2, 4, 4, 0, 1, 3,
	3, 3, 3, 3, 2, 2, 3, 1, 1, 1,
	1, 1, 0, 2, 2, 3, 2, 4, 2, 4,
	2, 2, 3, 2, 3, 2, 7, 9, 3, 3,
	6, 9, 9, 6, 6, 8, 8, 5, 8, 7,
	4, 2, 4, 6, 2, 4, 2, 1, 1, 1,
	2, 1, 1, 1, 3, 1, 2, 1, 1, 2,
	0, 4, 3, 4, 3, 3, 3, 3, 3, 3,
	3, 2, 4, 6, 2, 3, 2, 3, 1, 3,
	0, 2, 0, 3, 3, 2, 2, 2, 2, 2,
	3, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 2, 2, 2, 2, 1,
	1, 1, 3, 3, 2, 2, 2, 1, 1, 1,
	1, 4, 4, 4, 4, 4, 1, 5, 2, 2,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 3, 3, 0, 3, 3, 0, 1, 0,
	1, 0, 2, 1, 0, 3, 3, 0, 1, 2,
	6, 0, 1, 4, 1, 2, 1, 3, 2, 3,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 1, 1, 0, 2, 5, 2, 3, 3, 2,
	3, 2, 2, 3, 4, 1, 1, 1, 1, 1,
	3, 3, 2, 2, 1, 2, 5, 5, 8, 8,
	13, 1, 1, 2, 2, 10, 7, 0, 1, 1,
	0, 1, 1, 1, 2, 2, 1, 2, 0, 3,
	0, 1, 1, 3, 0, 4, 1, 3, 2, 1,
	1, 2, 1, 1, 1, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 3, 6, 4, 7, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 0, 4, 1, 3,
	1, 1, 1, 1, 1, 1, 4, 8, 1, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	0, 4, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	6, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 2, 4, 5, 5, 6, 4,
	4, 4, 6, 6, 6, 6, 6, 8, 8, 6,
	8, 8, 9, 7, 5, 4, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 2, 2, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 0, 2,
	1, 3, 5, 3, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 3, 0, 2, 1, 3,
	1, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 5, 3, 1, 3, 1, 2, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 2, 0, 2,
	2, 0, 1, 4, 1, 3, 2, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -211, -1, -14, -15, -18, 122, 123, -212, 377,
	-150, 56, -207, -208, -170, 131, 144, 162, 163, 349,
	129, 361, 362, 146, 364, 76, -96, 134, -151, -138,
	-103, 61, 59, -102, 169, 340, 21, 204, 217, 218,
	209, 250, 238, 341, 167, 235, 239, 286, 375, 69,
	207, 295, 138, 173, 151, 230, 233, 232, 224, 221,
	28, 256, 347, 223, 141, 257, 261, 268, 287, 336,
	214, 215, 289, 254, 33, 143, 342, 37, 159, 290,
	259, 253, 248, 131, 252, 213, 247, 41, 227, 263,
	262, 264, 285, 241, 168, 267, 243, 225, 242, 18,
	154, 157, 258, 260, 222, 170, 136, 161, 346, 291,
	220, 158, 171, 153, 294, 363, 166, 208, 288, 216,
	297, 203, 202, 40, 274, 234, 211, 226, 212, 140,
	205, 164, 245, 160, 228, 229, 251, 210, 246, 206,
	162, 155, 296, 275, 348, 244, 240, 236, 237, 165,
	132, 281, 344, 292, 231, 276, 277, 175, 176, 177,
	178, 179, 180, 181, 34, 35, 337, 338, 130, 130,
	132, 202, 132, -103, -103, -98, 135, -46, -109, 59,
	-102, 61, 129, -98, 364, 361, 362, 329, 129, 58,
	57, -139, -118, -122, -119, -124, -123, -125, -103, -120,
	-121, 238, 341, 235, 239, 236, 241, 242, 243, 116,
	240, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 244, 256, 31, 151, 228, 229, 230, 233,
	232, 234, 231, 257, 258, 259, 260, 261, 262, 263,
	264, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 220, 221, 223, 224, 225, 227, 226, -139, -103,
	54, 201, -103, -98, 203, -98, 54, -182, 54, 19,
	182, 183, 195, -103, 78, 23, 119, -98, -46, -46,
	293, -154, -219, 344, 35, -138, -140, -143, -141, -142,
	-155, -144, 138, 136, 140, 141, 146, -148, 130, 147,
	71, 78, -176, 138, -179, 54, 272, 278, 136, 147,
	146, 375, 69, 139, 23, 351, 353, 29, 30, -133,
	378, 266, -131, 275, -126, 56, -126, -126, 237, -127,
	56, -126, -127, -126, -127, -129, 239, -129, -129, -129,
	-129, 56, 56, -126, -126, -126, -126, -126, -135, 56,
	222, -135, -135, -136, 56, -136, 54, 55, -46, -103,
	54, -46, -203, 372, 373, -46, -46, -185, -183, 8,
	9, 10, -46, 196, -182, 24, -118, -110, -109, -101,
	127, 183, 352, 77, 23, 25, 272, 278, 182, 80,
	116, 16, 81, 189, 361, 362, 115, 330, 122, 50,
	322, 323, 320, 187, 332, 333, 321, 279, 194, 20,
	29, 372, 10, 26, 149, 22, 109, 124, 184, 84,
	85, 152, 24, 150, 73, 190, 192, 19, 53, 142,
	11, 351, 13, 14, 366, 353, 135, 134, 96, 365,
	130, 48, 8, 118, 27, 373, 93, 44, 147, 193,
	46, 94, 17, 324, 325, 32, 339, 156, 111, 51,
	38, 367, 78, 368, 71, 54, 293, 188, 76, 15,
	49, 157, 369, 144, 191, 95, 125, 329, 47, 185,
	370, 128, 186, 6, 335, 31, 148, 45, 129, 280,
	83, 133, 72, 163, 5, 146, 9, 52, 55, 326,
	327, 328, 36, 82, 12, 145, 343, 74, -46, 127,
	-46, -152, -104, -103, -101, 57, 34, 56, -175, 54,
	78, -146, -103, 147, -148, -148, 59, -148, 59, 130,
	59, 71, 19, -103, 9, 147, 147, -175, 61, -46,
	56, -172, 352, 16, 56, -177, 56, -178, 61, 62,
	63, 64, 71, -128, 70, -52, 267, -59, 320, 323,
	322, 268, 72, 73, -103, -109, 59, -102, -180, 63,
	379, -132, 276, 63, -129, -129, -126, -129, 63, 59,
	-129, -129, -130, 116, 115, 31, -130, -130, -130, -130,
	-137, 61, -137, -134, 343, 344, -134, 63, -135, 63,
	-46, -103, 56, 54, -46, 23, 132, 23, -165, 23,
	54, 57, 196, -182, -185, 55, -107, 138, -143, 146,
	127, 86, -104, -154, -159, -156, -103, 147, 10, 9,
	19, 142, 136, 375, 59, 59, 59, -174, 146, 361,
	362, 363, -176, 375, -128, 268, -215, 56, 56, -32,
	-51, 78, -56, 29, 24, -55, -52, -69, -196, -67,
	-68, 116, 117, 105, 106, 113, 79, 118, -59, -57,
	-58, -60, -199, 61, 62, -103, 60, 70, 63, 64,
	65, 66, 71, -109, 298, -65, -215, 46, 47, 330,
	331, 332, 333, 339, 334, 81, 36, 38, 320, 328,
	327, 326, 324, 325, 322, 323, 374, 135, 321, 111,
	329, 265, 23, 29, 63, -177, 56, -178, -167, 374,
	-167, -215, -126, 56, -126, 56, 56, -215, 119, 58,
	-130, -130, -129, -130, 58, 58, -130, -130, 59, 59,
	116, 58, 57, 58, 228, 228, 57, 58, 57, 56,
	55, 54, -158, -159, -59, -103, -46, 56, -2, -3,
	-4, 6, -215, -98, -2, -166, 19, 170, 171, -46,
	-183, -83, -103, 147, -185, 54, -103, -214, 130, 147,
	-103, 138, -143, -153, -104, 61, 63, 58, 57, -126,
	-157, 270, -126, -145, 166, 167, 31, 168, -145, 363,
	147, 147, -215, -174, -175, -32, -83, 58, 77, 76,
	93, -32, -53, 96, 78, 94, 95, 80, 102, 101,
	112, 105, 106, 107, 108, 109, 110, 111, 103, 104,
	115, 374, 86, 87, 88, 89, 90, 91, 92, 97,
	98, 99, 100, -97, -215, -68, -215, 120, 121, -56,
	-56, -56, -56, -56, -56, -56, -200, 266, -167, 61,
	119, 119, -2, -63, -32, -215, -215, -215, -215, -215,
	-215, -215, -215, -215, -72, -32, -215, 39, -221, -215,
	-221, -221, -221, -221, -221, -221, -221, -117, 116, 239,
	151, 230, -120, -119, 245, 244, 209, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 238, 341, -215, -215,
	-215, -215, 56, 353, 57, 58, -177, 61, 267, 58,
	239, 229, 269, 118, 245, 254, 255, -118, -216, 58,
	58, 58, 58, -30, 22, -29, -63, -31, -32, 107,
	-109, -104, -130, -129, 61, -129, 277, 277, 63, 63,
	-158, -103, -46, 58, 56, 56, -83, -76, 15, -21,
	5, -19, -220, -2, -46, 133, 21, 6, 8, 9,
	10, 19, -100, 57, 23, -46, -213, 56, -103, 146,
	-103, -161, -163, 343, -162, 55, 143, 69, 175, 176,
	177, 178, 179, 180, 181, -156, -79, 25, 26, -175,
	54, 71, 169, -175, 54, -146, -103, -174, -32, -215,
	-216, 58, 349, 350, -32, -32, -61, 71, 78, 72,
	73, -56, -62, -65, -68, 67, 96, 94, 95, 80,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-56, -56, -56, -56, -56, -114, 59, 61, -122, 229,
	-117, -120, 220, 221, 223, 224, 225, 227, 226, 59,
	-55, 61, -103, -55, -103, 378, -104, -110, -101, -104,
	-216, 57, -216, -2, -29, -32, -29, -32, -116, 116,
	235, 151, 230, 224, 254, 255, 274, 228, 275, 217,
	209, 214, 227, 225, 211, 226, 210, 223, 220, 233,
	232, 234, 245, 236, 241, 243, 242, 240, -32, -69,
	-56, -69, -103, -109, -29, -23, 22, -70, -71, 82,
	-69, 19, -216, 237, -29, -30, -29, -29, -29, -32,
	56, 63, 58, 237, -134, -133, -216, -29, 57, -216,
	-216, -106, -105, 23, -103, 61, 119, -215, -130, -130,
	58, 58, 58, 56, 56, -84, 365, -158, 58, -80,
	17, 16, -5, -3, -215, 21, 22, -25, 42, 43,
	-20, -216, 23, -147, -103, 184, -99, 82, -103, -186,
	-188, -6, -8, -7, -10, -9, -11, -12, -13, -16,
	-3, -22, 10, 9, 20, 31, 188, 189, 194, 190,
	145, 135, -17, 8, 329, -100, 19, -218, -103, 105,
	86, 61, -138, 57, 56, 56, 136, -160, 54, -162,
	343, 56, 345, 59, -149, 86, 61, 86, 86, 86,
	86, 86, 86, 86, 9, 10, 56, 56, -216, -32,
	-171, 168, 54, 71, 72, 73, -62, -56, -56, -56,
	-28, 152, 77, 343, -216, -201, -202, 61, 119, -32,
	-216, -216, -216, 57, 55, 57, -126, -126, -126, -136,
	215, -126, 215, -136, -126, -126, -126, -126, -126, -126,
	23, 57, 11, 57, 57, 11, 119, -216, -29, -73,
	-71, 84, -32, -216, -109, -216, -216, -216, -216, 58,
	-173, 58, 58, -216, -31, -204, 376, -105, 107, -110,
	-30, -84, -158, -159, -50, 12, 56, 58, -50, -81,
	19, 32, -32, -77, -78, -32, -76, -2, -23, 68,
	-2, -168, 57, 55, 185, 204, -32, -188, -76, -19,
	-19, -19, -191, -103, -190, -19, -210, -209, 299, 300,
	301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, -103,
	-103, -103, -184, 38, 191, 192, 193, -51, -56, -32,
	-51, -99, 184, 58, -218, -103, -218, -218, -218, -218,
	-218, -159, -159, 147, -103, -164, -162, -103, 63, -181,
	54, 74, 63, -181, -181, -181, -181, -181, -145, -145,
	-147, -159, -171, -216, 336, 10, 9, -28, 77, -56,
	-56, 228, 379, 57, -167, -104, -116, 116, 235, 151,
	230, 224, 254, 274, 228, 275, 217, 209, 214, 227,
	225, 211, 226, 210, 223, 220, 233, 232, 234, 245,
	236, 241, 243, 242, 240, -114, -32, -129, 59, -116,
	-56, -56, -56, -56, -56, -104, 340, -76, 85, -32,
	83, 349, 350, 58, 205, 355, 356, 156, 357, 168,
	358, 359, -215, 119, -216, -50, 58, 58, -161, -32,
	-83, -84, -161, 9, 96, 57, 18, 57, -79, -80,
	-216, -24, 45, -169, 343, -103, -32, -189, -188, 204,
	-187, -188, -80, -96, 11, -41, -46, -34, -35, -36,
	-37, -48, -68, -215, -46, 57, -192, -118, 186, -89,
	-115, 206, -93, 288, 287, -104, 298, -91, 286, 239,
	285, -181, 57, -103, 11, 11, 11, 11, -188, 204,
	83, 204, 204, 185, 58, 58, 56, -215, 58, 57,
	-175, -175, 58, 58, -171, -145, -145, -56, 277, -202,
	-216, -216, -216, -216, -216, 19, 57, -216, 57, 19,
	-215, -27, 335, -32, 343, 63, 16, 63, 63, 63,
	63, 356, 156, 358, 16, -216, 157, -76, 107, -161,
	-50, -161, -160, 58, -50, -160, 40, -32, -32, -78,
	-81, -29, 375, -188, 377, -188, -81, -47, 27, -46,
	-46, -41, -217, 57, 11, 55, 31, 57, -42, -44,
	-43, -45, 44, 48, 50, 45, 46, 47, 51, -113,
	23, -34, -215, -112, 157, -111, 23, -109, 61, -190,
	-103, 187, 57, -89, 206, -90, -94, 289, 291, 86,
	119, -108, -103, 61, 29, 31, -209, 27, -187, -186,
	-187, -187, -197, 197, 78, -159, -103, -162, 139, -161,
	-56, -56, -56, -56, -56, -216, 61, 63, 63, 360,
	-109, 16, -216, -160, -161, -161, 41, -33, 11, -32,
	377, 85, -188, -85, 157, -46, -85, 55, -34, -46,
	-88, -92, -69, -35, -36, -36, -35, -36, 44, 44,
	44, 49, 44, 49, 44, -43, -109, -216, -49, 52,
	134, 53, -215, -111, 19, -93, -90, 57, 290, 292,
	293, 54, 74, -32, -104, -130, -103, 85, 377, 377,
	85, 377, -198, 198, 197, 58, -216, -46, -160, -216,
	-216, -216, -216, -26, 96, 343, 119, -205, -206, -32,
	-160, -50, -34, 85, -54, 31, 36, -2, -215, -215,
	-50, -34, -50, -50, 57, 86, -39, -38, 54, 55,
	-40, 54, -38, 44, 44, -194, 343, 130, 130, 130,
	-86, -103, -2, -94, -95, 294, 291, 297, 86, 85,
	84, 85, 200, 199, 56, -216, 341, 51, 346, -104,
	-216, -76, 57, -74, 13, -87, 54, -88, -64, -66,
	-65, -215, -2, -82, -103, -86, -76, -50, -76, -92,
	-32, -32, 56, -32, 56, -215, -215, -215, -216, 57,
	291, 295, 296, -32, 135, 204, -147, 41, 342, 347,
	-216, -206, -75, 14, 16, 28, -87, 57, -216, -216,
	-216, 57, 119, -216, -80, -80, -83, -193, -195, 366,
	367, 368, 369, 370, 371, -83, -83, -83, -112, -103,
	-187, 58, 41, -32, -63, 147, -66, 36, -2, -215,
	-103, -103, 58, 58, 57, -216, -216, -216, -49, 85,
	343, 9, -64, -2, 119, -195, -194, 346, -88, -216,
	-103, 347,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 764, 1, 3,
	6, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	762, 391, 392, 393, 396, 0, 0, 765, 0, 148,
	162, 162, 766, 767, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 0, 0,
	762, 0, 762, 0, 0, 0, 0, 0, 502, 770,
	771, 772, 762, 0, 397, 394, 395, 144, 0, 404,
	0, 154, 321, 317, 157, 158, 159, 160, 161, 304,
	242, -2, -2, -2, -2, -2, -2, -2, -2, 304,
	-2, -2, -2, -2, -2, 324, -2, -2, -2, -2,
	-2, 290, -2, 965, 0, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 0, 0, 0, 162, 0, 0, 145, 0,
	0, 146, 406, 0, 409, 149, 150, 151, 152, 153,
	0, 398, -2, 1010, 1033, 968, 0, 0, 365, 366,
	164, 0, 166, 0, 168, 0, 170, 171, 0, 173,
	175, 398, 0, 0, 0, 0, 0, 0, 0, 163,
	0, 323, 319, 318, 241, 0, 324, 324, 304, 324,
	0, 324, 324, 278, 279, 327, 0, 327, 327, 327,
	327, 0, 0, 314, 314, 264, 265, 266, 253, 0,
	306, 255, 256, 257, 0, 258, 0, 0, 0, 0,
	0, 0, 0, 89, 90, 0, 128, 0, 110, 106,
	107, 108, 0, 105, 0, 763, 21, 503, 773, 774,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 0, 141,
	0, 0, 410, 768, 769, 404, 408, 0, 375, 0,
	0, 0, 401, 356, 0, 0, 359, 0, 361, -2,
	387, 165, 0, 0, 0, 172, 174, 0, 178, 179,
	781, 0, 208, 0, 0, 191, 0, 194, -2, 197,
	198, 199, 232, 201, 202, 203, 999, 205, 304, 304,
	228, 971, 521, 522, 0, 0, -2, -2, 206, 207,
	322, 156, 320, 0, 327, 327, 324, 327, 0, 0,
	327, 327, 280, 328, 0, 0, 281, 282, 283, 284,
	0, 302, 0, 262, 0, 0, 263, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 762, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 400, 26, 142,
	0, 0, 411, 407, 0, 369, 304, 304, 0, 0,
	0, 0, 0, 0, 357, 358, 360, 363, 387, 388,
	389, 190, 167, 398, 169, 0, 781, 1072, 0, 0,
	512, 781, 517, 519, 0, 558, 559, 560, 561, 562,
	563, 781, 781, 781, 781, 781, 781, 781, 590, 591,
	592, 593, 0, -2, 695, 690, 697, 698, 699, 700,
	701, 702, 703, 0, 0, 743, 781, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, 626, 626,
	626, 626, 626, 626, 626, 626, 0, 0, 0, 0,
	0, 782, 0, 209, 0, 0, 0, 0, 196, 162,
	200, 0, 224, 0, 226, 0, 0, -2, 0, 305,
	271, 272, 327, 273, 312, 313, 274, 275, 329, 325,
	326, 324, 0, 324, 0, 0, 0, 309, 0, 0,
	0, 0, 0, 367, 368, 304, 0, 0, -2, 711,
	0, 415, 0, 0, -2, 0, 0, 129, 130, 126,
	111, 109, 468, 469, 0, 0, 93, 0, 28, 29,
	401, 400, 27, 405, 412, 413, 414, 331, 0, 716,
	373, 374, 372, 398, 381, 382, 0, 0, 398, 399,
	400, 387, 781, 364, 0, 0, 0, 0, 781, 781,
	0, 515, 781, 0, 0, 781, 781, 781, 781, 781,
	781, 781, 781, 781, 781, 781, 781, 781, 781, 781,
	0, 0, 539, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 518, 0, 532, 0, 0, 0, 581,
	582, 583, 584, 585, 586, 587, 594, 0, 694, 696,
	0, 0, 33, 0, 556, 781, 781, 781, 781, 781,
	781, 0, 781, 425, 0, 680, 0, 0, 617, 0,
	618, 619, 620, 621, 622, 623, 624, 625, 671, 0,
	673, 674, 675, 676, 677, 678, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 269, 270, 781, -2,
	781, 781, 781, 187, 0, 192, 0, 232, 0, 195,
	304, 304, 235, 236, -2, -2, -2, 321, 204, 1073,
	225, 227, 229, 0, 781, 0, 0, 431, 437, 433,
	0, 0, 277, 327, 303, 327, 315, 316, 0, 0,
	0, 0, 0, 510, 1072, 0, 0, 719, 0, 0,
	419, 422, 417, 33, 0, 0, 132, 133, 134, 135,
	136, 0, 686, 0, 0, 126, 22, 95, 0, 0,
	401, 353, 332, 0, 334, 0, 349, 0, 0, 0,
	0, 0, 0, 0, 0, 370, 371, 717, 718, 376,
	0, 383, 384, 377, 0, 0, 401, 0, 0, 781,
	230, 180, 183, 184, 513, 514, 516, 533, 0, 535,
	537, 523, 524, 552, 553, 554, 0, 781, 781, 781,
	550, 528, 0, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 578, 637, 638, 579, 0,
	589, 304, 306, 306, 306, 308, 308, 259, 260, 0,
	576, 232, 0, 577, 588, 0, 691, 0, -2, 693,
	555, 781, 742, 33, 0, 437, 0, 0, 0, -2,
	-2, -2, -2, -2, -2, 646, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 0, 560,
	0, 0, 690, 0, 0, 781, 426, 688, 683, 781,
	0, 0, 627, 672, 0, 0, 430, 0, 0, 0,
	210, 0, 0, -2, 234, 240, 595, 0, 781, 442,
	599, 434, 438, 0, 440, 441, 0, -2, 292, 293,
	307, 310, 510, 0, 0, 508, 0, 0, 508, 723,
	781, 781, 711, 35, 0, 420, 421, 425, 423, 424,
	416, 34, 0, 137, 402, 0, 0, 781, 470, 18,
	112, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	711, 415, 415, 415, 0, 415, 0, 0, 0, 67,
	781, 781, 754, 39, 40, 686, 0, 0, -2, 95,
	95, -2, 95, 95, 0, 0, 0, 330, 0, 335,
	0, 0, 0, 338, 0, 350, 340, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 230, 0,
	176, 0, 0, 534, 536, 538, 525, 550, 529, 0,
	526, 781, 781, 0, 520, 0, 784, 232, 0, 557,
	-2, 600, 601, 0, 0, 781, 639, 324, 643, 644,
	648, 649, 651, 656, 662, 663, 666, 667, 669, 670,
	0, 781, 781, 781, 781, 781, 0, 0, 711, 0,
	684, 781, 0, 615, 616, 628, 629, 630, 631, 0,
	0, 189, 193, 596, 432, 597, 0, 439, 435, 0,
	0, 508, 0, 0, 331, 781, 0, 510, 331, 30,
	0, 0, 720, 712, 713, 716, 719, 33, 427, 418,
	-2, 139, 0, 781, 127, 0, 687, 113, 719, 764,
	0, 0, 55, -2, 57, 0, 0, 787, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 62,
	63, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 0, 0, 94, 96, -2, 97, 98, 99, 100,
	101, 0, 0, 0, 354, 0, 336, 341, 339, 342,
	351, 352, 343, 344, 345, 346, 347, 348, 398, 398,
	0, 0, 386, 230, 231, 0, 0, 527, 781, 551,
	530, 0, 783, 0, 786, 692, 0, 304, 304, 642,
	304, 308, 645, 647, 304, 650, 652, 653, 654, 655,
	308, 657, 658, 659, 660, 661, 304, 304, 664, 665,
	304, 304, 668, 304, 304, 0, 0, 640, 641, 0,
	0, 0, 0, 0, 0, 691, 0, 681, 614, 689,
	781, 185, 186, 188, 0, 0, 0, 0, 0, 0,
	221, 0, 0, 0, 598, 331, 508, 331, 353, 509,
	0, 508, 353, 724, 0, 781, 781, 781, 715, 723,
	36, 781, 428, 16, 0, 403, 138, 17, 124, 0,
	0, 74, 723, 0, 0, 0, 47, 0, 449, 451,
	452, 453, 483, 0, 485, 0, 0, 59, 61, 51,
	0, 1043, 747, -2, -2, 0, 0, 0, -2, 950,
	-2, 755, 0, 65, 68, 69, 70, 71, 72, 0,
	0, 0, 0, 127, 23, 775, 0, 0, 333, 0,
	378, 379, 0, 331, 177, 181, 182, 531, 580, 785,
	602, 605, 603, 604, 606, 781, 781, 609, 781, 781,
	781, 0, 0, 685, 0, 212, 0, 214, 215, 216,
	217, 218, 219, 220, 0, 443, 0, 0, 436, 353,
	331, 10, 8, 511, 331, 12, 0, 721, 722, 714,
	31, 447, 781, 0, 0, 75, 123, 49, 0, 501,
	-2, 0, 0, 0, 45, 46, 0, 0, 0, 0,
	0, 0, 490, 0, 0, 493, 0, 0, 0, 0,
	484, 0, 0, 504, 1005, 486, 0, 488, 489, 58,
	162, 0, 0, 52, 1043, 54, 80, 0, 0, 781,
	0, 327, 759, 760, 761, 757, 788, 0, 0, 0,
	0, 0, 778, 776, 0, 0, 0, 337, 0, 353,
	0, 0, 0, 0, 632, 613, 682, 211, 213, 222,
	0, 781, 445, 7, 11, 353, 725, 508, 0, 140,
	0, 19, 76, 0, 0, 500, 508, 0, 508, 48,
	508, 744, 0, 450, 479, 481, 0, 476, 491, 492,
	494, 0, 496, 0, 498, 499, 454, 455, 456, 0,
	0, 0, 0, 487, 0, 748, 53, 0, 0, 83,
	84, 749, 750, 751, 0, 753, 66, 73, 0, 0,
	78, 0, 25, 0, 777, 24, 355, 0, 385, 608,
	607, 610, 611, 0, 0, 0, 0, 0, 708, 710,
	9, 704, 448, 125, 736, 0, 0, -2, 0, 0,
	711, 508, 44, 711, 0, 781, 473, 480, 781, 0,
	474, 781, 475, 495, 497, 466, 0, 0, 0, 0,
	0, 471, -2, 81, 82, 0, 0, 88, 781, 0,
	0, 20, 779, 780, 0, 612, 0, 0, 0, 223,
	444, 0, 781, 706, 0, 37, 0, 736, 726, 738,
	740, 781, 33, 0, 732, 0, 719, 43, 719, 745,
	746, 477, 0, 482, 0, 0, 0, 0, 485, 0,
	85, 86, 87, 752, 77, 0, 0, 633, 0, 636,
	446, 709, 32, 781, 781, 0, 38, 0, 741, -2,
	0, 0, 0, 50, 42, 41, 0, 0, 458, 460,
	461, 462, 463, 464, 465, 0, 0, 0, 504, 472,
	0, 380, 634, 707, 705, 0, 739, 0, -2, 0,
	734, 733, 478, 457, 0, 505, 506, 507, 456, 79,
	0, 0, 729, 33, 0, 459, 467, 0, 737, -2,
	735, 635,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 377,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 378, 3, 379, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:405
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:410
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:411
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:419
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:424
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:444
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:464
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:485
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:501
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:518
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:537
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:548
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:560
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:571
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:587
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      []Statement{yyDollar[11].statement},
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:601
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:615
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:628
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[4].colIdent,
					TableName: yyDollar[8].tableName,
					Time:      yyDollar[5].str,
					Event:     yyDollar[6].strs,
					Body:      yyDollar[12].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:642
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:653
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 23:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:659
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 24:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:673
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:687
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:706
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:715
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:730
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:738
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 32:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:745
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:751
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:755
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:761
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:765
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:772
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:784
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:796
		{
			yyVAL.str = InsertStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:800
		{
			yyVAL.str = ReplaceStr
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:806
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:812
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:816
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:820
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:825
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:826
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:830
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:834
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:839
		{
			yyVAL.partitions = nil
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:843
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:849
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:853
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:857
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:861
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:867
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:871
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:884
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:888
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:894
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:899
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:903
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:909
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:916
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:923
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:930
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:938
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:948
		{
			yyVAL.str = ""
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:952
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:956
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:960
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:964
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:970
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:977
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:987
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:991
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:995
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 77:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1002
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1011
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 79:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1019
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1030
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1034
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1040
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1044
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1048
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1054
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1058
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1062
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1066
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1072
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1076
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1082
		{
			yyVAL.str = SessionStr
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1086
		{
			yyVAL.str = GlobalStr
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1091
		{
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1092
		{
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1096
		{
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1097
		{
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1098
		{
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1099
		{
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1100
		{
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1101
		{
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1102
		{
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1106
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1110
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1114
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1118
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1124
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1128
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1132
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1137
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1143
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1147
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1153
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1157
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1163
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1175
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1187
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1194
		{
			yyVAL.empty = struct{}{}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1196
		{
			yyVAL.empty = struct{}{}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1199
		{
			yyVAL.bytes = nil
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1203
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1207
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1212
		{
			yyVAL.bytes = nil
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1216
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1220
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1224
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1228
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1232
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1237
		{
			yyVAL.expr = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1241
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1246
		{
			yyVAL.expr = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1250
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1255
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1259
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1264
		{
			yyVAL.bytes = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1268
		{
			yyVAL.bytes = nil
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1274
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1281
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1287
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1291
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1296
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1300
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1304
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1308
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1318
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1323
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1329
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1340
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1345
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1351
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1364
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1369
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1374
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1379
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1385
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1390
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1395
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1400
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1405
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1410
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1415
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1420
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1425
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1434
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1444
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1449
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1454
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1461
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1468
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1476
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1481
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1486
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1491
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1497
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1503
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1509
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1515
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1522
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1526
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 193:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1530
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1534
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1538
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1544
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1548
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1552
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1556
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1560
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1564
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1568
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1572
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1576
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1582
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1588
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1594
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1600
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1604
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1609
		{
			yyVAL.sequence = &Sequence{}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1613
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1618
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1623
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1628
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1633
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1638
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1643
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1648
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1653
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1658
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1663
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1668
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1673
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1680
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1684
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1688
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1692
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1696
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1700
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1705
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1709
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1714
		{
			yyVAL.bytes = nil
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1728
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1733
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 293:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1994
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2000
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2005
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2010
		{
			yyVAL.optVal = nil
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2014
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2019
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2023
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2031
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2035
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2041
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2049
		{
			yyVAL.optVal = nil
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2053
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2057
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2066
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2070
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2074
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2079
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2083
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2088
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2092
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2097
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2101
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2105
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2110
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2114
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2118
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2123
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2127
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2131
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2137
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2142
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2146
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2150
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2156
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2160
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2166
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2170
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2176
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2180
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2185
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2189
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2193
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2197
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2201
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2205
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2209
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2213
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2217
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2223
		{
			yyVAL.str = ""
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2227
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2233
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2237
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2243
		{
			yyVAL.indexPartition = nil
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2247
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2251
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2257
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2261
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2265
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2269
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2273
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2277
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2281
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2285
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2289
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2295
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2299
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2305
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2310
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2316
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2320
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2326
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2331
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2335
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2345
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 376:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2350
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2357
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 378:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2364
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 379:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2371
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 380:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2380
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2392
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2396
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2400
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2404
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 385:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2410
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 386:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2421
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2431
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2435
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2439
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2445
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2449
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2453
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2457
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2461
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2465
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2471
		{
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2472
		{
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2476
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2480
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2485
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2492
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2496
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2503
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2507
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2513
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2517
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2522
		{
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2523
		{
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2527
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2531
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2537
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2541
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2545
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2550
		{
			setAllowComments(yylex, true)
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2554
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2560
		{
			yyVAL.bytes2 = nil
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2564
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2570
		{
			yyVAL.str = UnionStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2574
		{
			yyVAL.str = UnionAllStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2578
		{
			yyVAL.str = UnionDistinctStr
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2583
		{
			yyVAL.str = ""
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2587
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2591
		{
			yyVAL.str = SQLCacheStr
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2596
		{
			yyVAL.str = ""
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2600
		{
			yyVAL.str = DistinctStr
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2605
		{
			yyVAL.str = ""
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2609
		{
			yyVAL.str = StraightJoinHint
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2614
		{
			yyVAL.selectExprs = nil
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2618
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2624
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2628
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2634
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2638
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2642
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 436:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2646
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2651
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2655
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2659
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2666
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2671
		{
			yyVAL.overExpr = nil
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2675
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2679
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2683
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2687
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2692
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2696
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2702
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2706
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2716
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2720
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2724
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2729
		{
			yyVAL.strs = []string{}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2733
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2739
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2743
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2749
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2753
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2757
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2761
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2765
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2769
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2775
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 467:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2779
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2785
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2790
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2794
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2800
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2804
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2817
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2821
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2825
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2829
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2835
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2837
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2841
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2843
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2847
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2849
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2852
		{
			yyVAL.empty = struct{}{}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2854
		{
			yyVAL.empty = struct{}{}
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2857
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2861
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2865
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2872
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2878
		{
			yyVAL.str = JoinStr
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2882
		{
			yyVAL.str = JoinStr
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2886
		{
			yyVAL.str = JoinStr
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2892
		{
			yyVAL.str = StraightJoinStr
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.str = LeftJoinStr
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2902
		{
			yyVAL.str = LeftJoinStr
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2906
		{
			yyVAL.str = RightJoinStr
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2910
		{
			yyVAL.str = RightJoinStr
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2916
		{
			yyVAL.str = NaturalJoinStr
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2920
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2930
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2934
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2940
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2944
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2949
		{
			yyVAL.indexHints = nil
		}
	case 505:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2953
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2957
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2961
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2966
		{
			yyVAL.expr = nil
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2970
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2975
		{
			yyVAL.columns = nil
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2979
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2985
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2989
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2993
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2997
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3001
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3005
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3009
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3015
		{
			yyVAL.str = ""
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3019
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3025
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3029
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3035
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3039
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3043
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3047
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 527:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3051
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3055
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3059
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3063
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 531:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3067
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3071
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3077
		{
			yyVAL.str = IsNullStr
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3081
		{
			yyVAL.str = IsNotNullStr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3085
		{
			yyVAL.str = IsTrueStr
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3089
		{
			yyVAL.str = IsNotTrueStr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3093
		{
			yyVAL.str = IsFalseStr
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3097
		{
			yyVAL.str = IsNotFalseStr
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3103
		{
			yyVAL.str = EqualStr
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3107
		{
			yyVAL.str = LessThanStr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3111
		{
			yyVAL.str = GreaterThanStr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3115
		{
			yyVAL.str = LessEqualStr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3119
		{
			yyVAL.str = GreaterEqualStr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3123
		{
			yyVAL.str = NotEqualStr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3127
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3131
		{
			yyVAL.str = PosixRegexStr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3135
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3139
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3143
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3148
		{
			yyVAL.expr = nil
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3152
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3158
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3162
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3166
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3172
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3178
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3182
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3188
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3192
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3196
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3200
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3204
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3208
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3212
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3216
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3220
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3224
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3228
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3232
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3236
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3240
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3244
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3248
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3252
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3256
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3260
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3264
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3268
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3272
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 580:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3276
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3280
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3284
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3288
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3296
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3310
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3314
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3318
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3326
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3334
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3342
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3352
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3356
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 597:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3360
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 598:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3364
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3368
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3378
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3382
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 602:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3386
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 603:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3390
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 604:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3394
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 605:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3398
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3402
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 607:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3406
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 608:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3410
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 609:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3414
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 610:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3418
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 611:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3422
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 612:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3426
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 613:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3430
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3434
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3438
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3443
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3453
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3457
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3461
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3465
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3470
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3475
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3480
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3485
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3489
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3503
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3507
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3511
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3515
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3521
		{
			yyVAL.str = ""
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3525
		{
			yyVAL.str = BooleanModeStr
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3529
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 635:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3533
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3537
		{
			yyVAL.str = QueryExpansionStr
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3543
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3547
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3553
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3557
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3561
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3565
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3569
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3573
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3579
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3583
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3587
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3591
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3595
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3599
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3603
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3607
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3611
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3615
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3619
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3623
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3627
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3631
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3635
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3639
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3643
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3647
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3651
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3655
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3659
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3663
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3667
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3671
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3675
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3679
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3685
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3689
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3693
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3697
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3701
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3705
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3709
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3713
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3718
		{
			yyVAL.expr = nil
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3722
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3727
		{
			yyVAL.str = string("")
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3731
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3737
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3741
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3747
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3752
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3754
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3757
		{
			yyVAL.expr = nil
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3761
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3767
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3771
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 692:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3775
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3781
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3787
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3791
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3796
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3801
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3805
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3809
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3813
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3817
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3821
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3825
		{
			yyVAL.expr = &NullVal{}
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3830
		{
			yyVAL.exprs = nil
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3834
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 706:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3839
		{
			yyVAL.expr = nil
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3843
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3849
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3853
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3859
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3864
		{
			yyVAL.orderBy = nil
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3868
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3874
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3878
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3884
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3889
		{
			yyVAL.str = AscScr
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3893
		{
			yyVAL.str = AscScr
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3897
		{
			yyVAL.str = DescScr
		}
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3902
		{
			yyVAL.limit = nil
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3906
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3910
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 722:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3914
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.str = ""
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3923
		{
			yyVAL.str = ForUpdateStr
		}
	case 725:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3927
		{
			yyVAL.str = ShareModeStr
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3940
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3944
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3948
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 729:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3953
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3957
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 731:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3961
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3968
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3972
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3976
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 735:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3980
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3985
		{
			yyVAL.updateExprs = nil
		}
	case 737:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3989
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3995
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3999
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4005
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4009
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4015
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4021
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4031
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4035
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4041
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4047
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4051
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4057
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4065
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4070
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4074
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4080
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4086
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4093
		{
			yyVAL.bytes = []byte("charset")
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4100
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4104
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4108
		{
			yyVAL.expr = &Default{}
		}
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4113
		{
			yyVAL.empty = struct{}{}
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4115
		{
			yyVAL.empty = struct{}{}
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4118
		{
			yyVAL.str = ""
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4120
		{
			yyVAL.str = IgnoreStr
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4124
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4128
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4135
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4141
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4145
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4150
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4157
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4163
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4167
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4171
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4177
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4181
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4185
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4191
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4195
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4202
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4209
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4213
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4220
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4226
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4230
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4541
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4550
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
