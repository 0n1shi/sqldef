// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const STATUS = 57489
const VARIABLES = 57490
const RESTRICT = 57491
const CASCADE = 57492
const NO = 57493
const ACTION = 57494
const PERMISSIVE = 57495
const RESTRICTIVE = 57496
const PUBLIC = 57497
const CURRENT_USER = 57498
const SESSION_USER = 57499
const PAD_INDEX = 57500
const FILLFACTOR = 57501
const IGNORE_DUP_KEY = 57502
const STATISTICS_NORECOMPUTE = 57503
const STATISTICS_INCREMENTAL = 57504
const ALLOW_ROW_LOCKS = 57505
const ALLOW_PAGE_LOCKS = 57506
const BEFORE = 57507
const AFTER = 57508
const EACH = 57509
const ROW = 57510
const SCROLL = 57511
const CURSOR = 57512
const OPEN = 57513
const CLOSE = 57514
const FETCH = 57515
const PRIOR = 57516
const FIRST = 57517
const LAST = 57518
const DEALLOCATE = 57519
const INSTEAD = 57520
const OF = 57521
const DEFERRABLE = 57522
const INITIALLY = 57523
const IMMEDIATE = 57524
const DEFERRED = 57525
const CONCURRENTLY = 57526
const SQL = 57527
const SECURITY = 57528
const BEGIN = 57529
const START = 57530
const TRANSACTION = 57531
const COMMIT = 57532
const ROLLBACK = 57533
const BIT = 57534
const TINYINT = 57535
const SMALLINT = 57536
const SMALLSERIAL = 57537
const MEDIUMINT = 57538
const INT = 57539
const INTEGER = 57540
const SERIAL = 57541
const BIGINT = 57542
const BIGSERIAL = 57543
const INTNUM = 57544
const REAL = 57545
const DOUBLE = 57546
const PRECISION = 57547
const FLOAT_TYPE = 57548
const DECIMAL = 57549
const NUMERIC = 57550
const SMALLMONEY = 57551
const MONEY = 57552
const TIME = 57553
const TIMESTAMP = 57554
const DATETIME = 57555
const YEAR = 57556
const DATETIMEOFFSET = 57557
const DATETIME2 = 57558
const SMALLDATETIME = 57559
const CHAR = 57560
const VARCHAR = 57561
const VARYING = 57562
const BOOL = 57563
const CHARACTER = 57564
const VARBINARY = 57565
const NCHAR = 57566
const NVARCHAR = 57567
const NTEXT = 57568
const UUID = 57569
const TEXT = 57570
const TINYTEXT = 57571
const MEDIUMTEXT = 57572
const LONGTEXT = 57573
const CITEXT = 57574
const BLOB = 57575
const TINYBLOB = 57576
const MEDIUMBLOB = 57577
const LONGBLOB = 57578
const JSON = 57579
const JSONB = 57580
const ENUM = 57581
const GEOMETRY = 57582
const POINT = 57583
const LINESTRING = 57584
const POLYGON = 57585
const GEOMETRYCOLLECTION = 57586
const MULTIPOINT = 57587
const MULTILINESTRING = 57588
const MULTIPOLYGON = 57589
const VARIADIC = 57590
const ARRAY = 57591
const NOW = 57592
const GETDATE = 57593
const BPCHAR = 57594
const TEXT_PATTERN_OPS = 57595
const NULLX = 57596
const AUTO_INCREMENT = 57597
const APPROXNUM = 57598
const SIGNED = 57599
const UNSIGNED = 57600
const ZEROFILL = 57601
const ZONE = 57602
const AUTOINCREMENT = 57603
const DATABASES = 57604
const TABLES = 57605
const VSCHEMA_TABLES = 57606
const EXTENDED = 57607
const FULL = 57608
const PROCESSLIST = 57609
const NAMES = 57610
const CHARSET = 57611
const GLOBAL = 57612
const SESSION = 57613
const ISOLATION = 57614
const LEVEL = 57615
const READ = 57616
const WRITE = 57617
const ONLY = 57618
const REPEATABLE = 57619
const COMMITTED = 57620
const UNCOMMITTED = 57621
const SERIALIZABLE = 57622
const NEW = 57623
const CONCAT_NULL_YIELDS_NULL = 57624
const CURSOR_CLOSE_ON_COMMIT = 57625
const QUOTED_IDENTIFIER = 57626
const ARITHABORT = 57627
const FMTONLY = 57628
const NOCOUNT = 57629
const NOEXEC = 57630
const NUMERIC_ROUNDABORT = 57631
const ANSI_DEFAULTS = 57632
const ANSI_NULL_DFLT_OFF = 57633
const ANSI_NULL_DFLT_ON = 57634
const ANSI_NULLS = 57635
const ANSI_PADDING = 57636
const ANSI_WARNINGS = 57637
const FORCEPLAN = 57638
const SHOWPLAN_ALL = 57639
const SHOWPLAN_TEXT = 57640
const SHOWPLAN_XML = 57641
const IMPLICIT_TRANSACTIONS = 57642
const REMOTE_PROC_TRANSACTIONS = 57643
const XACT_ABORT = 57644
const CURRENT_TIMESTAMP = 57645
const DATABASE = 57646
const CURRENT_DATE = 57647
const CURRENT_TIME = 57648
const LOCALTIME = 57649
const LOCALTIMESTAMP = 57650
const UTC_DATE = 57651
const UTC_TIME = 57652
const UTC_TIMESTAMP = 57653
const REPLACE = 57654
const CONVERT = 57655
const CAST = 57656
const SUBSTR = 57657
const SUBSTRING = 57658
const GROUP_CONCAT = 57659
const SEPARATOR = 57660
const INHERIT = 57661
const LEAD = 57662
const LAG = 57663
const MATCH = 57664
const AGAINST = 57665
const BOOLEAN = 57666
const LANGUAGE = 57667
const WITH = 57668
const WITHOUT = 57669
const PARSER = 57670
const QUERY = 57671
const EXPANSION = 57672
const UNUSED = 57673
const VIRTUAL = 57674
const STORED = 57675
const GENERATED = 57676
const ALWAYS = 57677
const IDENTITY = 57678
const SEQUENCE = 57679
const INCREMENT = 57680
const MINVALUE = 57681
const CACHE = 57682
const CYCLE = 57683
const OWNED = 57684
const NONE = 57685
const CLUSTERED = 57686
const NONCLUSTERED = 57687
const REPLICATION = 57688
const COLUMNSTORE = 57689
const INCLUDE = 57690
const HOLDLOCK = 57691
const NOLOCK = 57692
const NOWAIT = 57693
const PAGLOCK = 57694
const ROWLOCK = 57695
const TABLELOCK = 57696
const DEFINER = 57697
const INVOKER = 57698
const TYPECAST = 57699
const CHECK = 57700
const OVER = 57701

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 26,
	-2, 4,
	-1, 29,
	130, 402,
	-2, 155,
	-1, 35,
	164, 502,
	165, 502,
	-2, 492,
	-1, 270,
	119, 888,
	-2, 884,
	-1, 271,
	119, 889,
	-2, 885,
	-1, 272,
	119, 890,
	-2, 244,
	-1, 314,
	266, 899,
	-2, 780,
	-1, 348,
	86, 1140,
	-2, 84,
	-1, 349,
	86, 1090,
	-2, 85,
	-1, 355,
	86, 1069,
	-2, 857,
	-1, 357,
	86, 1114,
	-2, 859,
	-1, 615,
	266, 899,
	-2, 530,
	-1, 665,
	266, 899,
	-2, 530,
	-1, 695,
	55, 40,
	57, 40,
	-2, 42,
	-1, 727,
	116, 1064,
	249, 1064,
	255, 1064,
	-2, 281,
	-1, 728,
	116, 1065,
	249, 1065,
	255, 1065,
	-2, 282,
	-1, 729,
	249, 1067,
	255, 1067,
	-2, 316,
	-1, 730,
	249, 1068,
	255, 1068,
	-2, 316,
	-1, 731,
	249, 1169,
	255, 1169,
	-2, 323,
	-1, 732,
	249, 1115,
	255, 1115,
	-2, 316,
	-1, 733,
	249, 1120,
	255, 1120,
	-2, 323,
	-1, 734,
	116, 1118,
	249, 1118,
	255, 1118,
	-2, 288,
	-1, 736,
	116, 1168,
	249, 1168,
	255, 1168,
	-2, 323,
	-1, 737,
	249, 1154,
	255, 1154,
	-2, 336,
	-1, 738,
	249, 1160,
	255, 1160,
	-2, 336,
	-1, 739,
	249, 1108,
	255, 1108,
	-2, 336,
	-1, 740,
	249, 1104,
	255, 1104,
	-2, 336,
	-1, 742,
	116, 1063,
	249, 1063,
	255, 1063,
	-2, 297,
	-1, 743,
	116, 1158,
	249, 1158,
	255, 1158,
	-2, 298,
	-1, 744,
	116, 1106,
	249, 1106,
	255, 1106,
	-2, 299,
	-1, 745,
	116, 1103,
	249, 1103,
	255, 1103,
	-2, 300,
	-1, 746,
	116, 1095,
	249, 1095,
	255, 1095,
	-2, 301,
	-1, 748,
	116, 1167,
	249, 1167,
	255, 1167,
	-2, 303,
	-1, 751,
	116, 1076,
	249, 1076,
	255, 1076,
	-2, 273,
	-1, 752,
	116, 1156,
	249, 1156,
	255, 1156,
	-2, 316,
	-1, 753,
	116, 1157,
	249, 1157,
	255, 1157,
	-2, 316,
	-1, 754,
	116, 1077,
	249, 1077,
	255, 1077,
	-2, 316,
	-1, 755,
	116, 1078,
	249, 1078,
	255, 1078,
	-2, 316,
	-1, 756,
	116, 1079,
	249, 1079,
	255, 1079,
	-2, 316,
	-1, 757,
	116, 1147,
	249, 1147,
	255, 1147,
	-2, 279,
	-1, 758,
	116, 1176,
	249, 1176,
	255, 1176,
	-2, 280,
	-1, 759,
	116, 1087,
	249, 1087,
	255, 1087,
	-2, 306,
	-1, 760,
	116, 1124,
	249, 1124,
	255, 1124,
	-2, 307,
	-1, 761,
	116, 1102,
	249, 1102,
	255, 1102,
	-2, 308,
	-1, 762,
	116, 1125,
	249, 1125,
	255, 1125,
	-2, 309,
	-1, 763,
	116, 1088,
	249, 1088,
	255, 1088,
	-2, 310,
	-1, 764,
	116, 1112,
	249, 1112,
	255, 1112,
	-2, 311,
	-1, 765,
	116, 1111,
	249, 1111,
	255, 1111,
	-2, 312,
	-1, 766,
	116, 1113,
	249, 1113,
	255, 1113,
	-2, 313,
	-1, 767,
	116, 1062,
	249, 1062,
	255, 1062,
	-2, 255,
	-1, 768,
	116, 1159,
	249, 1159,
	255, 1159,
	-2, 256,
	-1, 769,
	116, 1148,
	249, 1148,
	255, 1148,
	-2, 257,
	-1, 770,
	116, 1150,
	249, 1150,
	255, 1150,
	-2, 258,
	-1, 771,
	116, 1107,
	249, 1107,
	255, 1107,
	-2, 259,
	-1, 772,
	116, 1092,
	249, 1092,
	255, 1092,
	-2, 260,
	-1, 773,
	116, 1093,
	249, 1093,
	255, 1093,
	-2, 261,
	-1, 774,
	116, 1141,
	249, 1141,
	255, 1141,
	-2, 262,
	-1, 775,
	116, 1060,
	249, 1060,
	255, 1060,
	-2, 263,
	-1, 776,
	116, 1061,
	249, 1061,
	255, 1061,
	-2, 264,
	-1, 777,
	116, 1132,
	249, 1132,
	255, 1132,
	-2, 318,
	-1, 778,
	116, 1081,
	249, 1081,
	255, 1081,
	-2, 318,
	-1, 779,
	116, 1085,
	249, 1085,
	255, 1085,
	-2, 318,
	-1, 780,
	116, 1080,
	249, 1080,
	255, 1080,
	-2, 320,
	-1, 781,
	116, 1119,
	249, 1119,
	255, 1119,
	-2, 320,
	-1, 782,
	116, 1110,
	249, 1110,
	255, 1110,
	-2, 271,
	-1, 783,
	116, 1149,
	249, 1149,
	255, 1149,
	-2, 272,
	-1, 857,
	119, 892,
	-2, 887,
	-1, 901,
	116, 336,
	266, 336,
	378, 336,
	-2, 249,
	-1, 902,
	266, 301,
	378, 301,
	-2, 250,
	-1, 903,
	266, 302,
	378, 302,
	-2, 251,
	-1, 926,
	266, 899,
	-2, 316,
	-1, 927,
	57, 316,
	59, 316,
	239, 316,
	-2, 1067,
	-1, 928,
	57, 743,
	-2, 1076,
	-1, 929,
	57, 316,
	-2, 1077,
	-1, 930,
	57, 320,
	-2, 1080,
	-1, 931,
	57, 746,
	-2, 1095,
	-1, 933,
	57, 748,
	-2, 1146,
	-1, 934,
	57, 316,
	-2, 1156,
	-1, 935,
	57, 751,
	-2, 1165,
	-1, 936,
	57, 753,
	-2, 1060,
	-1, 937,
	57, 754,
	-2, 1062,
	-1, 938,
	57, 755,
	-2, 1092,
	-1, 939,
	57, 756,
	-2, 1110,
	-1, 940,
	57, 320,
	-2, 1119,
	-1, 941,
	57, 758,
	-2, 1148,
	-1, 942,
	57, 759,
	-2, 1149,
	-1, 943,
	57, 760,
	-2, 1159,
	-1, 944,
	57, 761,
	-2, 1085,
	-1, 945,
	57, 762,
	-2, 1132,
	-1, 946,
	57, 316,
	-2, 1078,
	-1, 947,
	57, 316,
	-2, 1079,
	-1, 948,
	57, 765,
	-2, 1147,
	-1, 949,
	57, 766,
	-2, 1154,
	-1, 950,
	57, 316,
	-2, 1169,
	-1, 951,
	57, 316,
	-2, 1115,
	-1, 952,
	57, 769,
	-2, 1118,
	-1, 953,
	57, 316,
	-2, 1120,
	-1, 954,
	57, 316,
	-2, 1168,
	-1, 1030,
	142, 412,
	-2, 1074,
	-1, 1153,
	266, 899,
	-2, 530,
	-1, 1163,
	116, 316,
	266, 316,
	378, 316,
	-2, 245,
	-1, 1177,
	5, 27,
	-2, 656,
	-1, 1220,
	5, 26,
	-2, 828,
	-1, 1269,
	59, 377,
	-2, 374,
	-1, 1288,
	119, 890,
	-2, 244,
	-1, 1551,
	5, 26,
	-2, 93,
	-1, 1553,
	5, 26,
	-2, 95,
	-1, 1606,
	5, 27,
	-2, 829,
	-1, 1710,
	5, 26,
	-2, 831,
	-1, 1798,
	58, 107,
	-2, 174,
	-1, 1801,
	58, 107,
	-2, 174,
	-1, 1862,
	5, 26,
	-2, 94,
	-1, 1872,
	187, 53,
	-2, 174,
	-1, 1913,
	58, 107,
	-2, 173,
	-1, 1936,
	5, 27,
	-2, 832,
	-1, 2105,
	5, 26,
	-2, 49,
}

const yyPrivate = 57344

const yyLast = 21003

var yyAct = [...]int16{
	271, 1929, 268, 1768, 1721, 1986, 1922, 718, 1774, 1873,
	1724, 1546, 1825, 546, 254, 276, 1258, 1987, 1875, 978,
	1848, 619, 1763, 532, 717, 1771, 1545, 1236, 1614, 1455,
	1685, 266, 287, 840, 94, 1498, 53, 94, 1261, 600,
	1486, 1456, 304, 1560, 1016, 996, 687, 275, 1285, 689,
	1452, 1223, 1169, 1025, 1108, 1091, 247, 1943, 1109, 1287,
	1019, 94, 94, 359, 1293, 359, 1637, 1040, 1785, 21,
	979, 925, 359, 359, 94, 1241, 279, 882, 1073, 1158,
	354, 915, 911, 94, 796, 94, 350, 1324, 705, 1228,
	1057, 94, 1086, 497, 859, 972, 1164, 964, 552, 248,
	249, 250, 251, 704, 1067, 1802, 975, 333, 618, 3,
	691, 832, 334, 340, 347, 676, 21, 1035, 1912, 725,
	719, 274, 720, 1306, 258, 643, 1146, 46, 561, 48,
	25, 26, 1401, 1059, 910, 2083, 52, 338, 1493, 262,
	1406, 1786, 1055, 575, 2048, 601, 585, 91, 335, 1764,
	585, 1499, 1787, 1101, 1102, 506, 253, 578, 579, 580,
	581, 582, 575, 1643, 499, 585, 502, 1596, 545, 505,
	489, 1500, 1501, 2038, 46, 343, 48, 25, 26, 1615,
	1616, 1617, 1618, 1619, 1620, 1502, 1283, 503, 1786, 507,
	508, 2112, 1652, 1961, 1962, 2118, 511, 2019, 512, 1787,
	1750, 1751, 1934, 1052, 519, 344, 2124, 1830, 2098, 1055,
	1056, 574, 573, 583, 584, 576, 577, 578, 579, 580,
	581, 582, 575, 1022, 2031, 585, 1165, 1166, 1980, 1829,
	1237, 94, 1063, 1161, 1043, 359, 359, 359, 359, 2018,
	359, 1447, 1958, 1600, 509, 1058, 1933, 1506, 1478, 1050,
	342, 1038, 1009, 2091, 1249, 540, 1793, 1248, 1039, 706,
	1250, 707, 1817, 1479, 1480, 359, 1792, 574, 573, 583,
	584, 576, 577, 578, 579, 580, 581, 582, 575, 1010,
	1011, 585, 1308, 606, 607, 608, 609, 610, 611, 612,
	1585, 830, 1584, 1583, 554, 831, 1061, 1074, 614, 1298,
	969, 1300, 1299, 1793, 1399, 1398, 1397, 1439, 1190, 1788,
	1789, 1791, 1188, 1792, 1063, 1790, 1046, 246, 1041, 1051,
	89, 85, 86, 2116, 87, 1184, 1048, 1047, 21, 1063,
	2004, 2003, 1867, 94, 1063, 1087, 790, 2110, 2109, 2094,
	94, 94, 94, 494, 521, 2095, 359, 1344, 1114, 2055,
	602, 1740, 2005, 359, 1866, 1910, 1788, 1789, 1791, 1770,
	1556, 1557, 1790, 2111, 1849, 2096, 1500, 1501, 555, 350,
	569, 2064, 572, 2037, 21, 2039, 1923, 1494, 587, 588,
	589, 590, 591, 592, 593, 545, 570, 571, 568, 594,
	595, 596, 597, 574, 573, 583, 584, 576, 577, 578,
	579, 580, 581, 582, 575, 586, 1901, 585, 21, 586,
	536, 537, 1379, 495, 54, 1924, 338, 1640, 976, 1707,
	2073, 1645, 1644, 1276, 586, 1492, 1567, 1036, 574, 573,
	583, 584, 576, 577, 578, 579, 580, 581, 582, 575,
	798, 1275, 585, 1568, 1037, 648, 671, 634, 649, 1263,
	49, 1692, 1044, 1575, 1400, 695, 1807, 545, 1045, 573,
	583, 584, 576, 577, 578, 579, 580, 581, 582, 575,
	2115, 46, 585, 48, 25, 26, 576, 577, 578, 579,
	580, 581, 582, 575, 586, 1786, 585, 1074, 1504, 1653,
	2063, 359, 359, 359, 359, 1163, 1787, 49, 2089, 293,
	498, 1088, 514, 359, 2030, 82, 94, 83, 83, 1818,
	1678, 94, 359, 88, 94, 1066, 784, 94, 1830, 1165,
	1166, 94, 1282, 359, 359, 359, 359, 359, 359, 359,
	359, 1053, 1021, 1054, 1963, 809, 1932, 359, 359, 1635,
	586, 997, 999, 1635, 1338, 2089, 496, 525, 1240, 1239,
	2088, 702, 1638, 1639, 1641, 1049, 1698, 94, 1376, 1902,
	1903, 1904, 353, 359, 490, 1238, 493, 492, 1268, 843,
	858, 500, 501, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 789, 856,
	791, 1266, 696, 510, 1200, 504, 230, 84, 804, 1380,
	1793, 818, 359, 799, 800, 359, 359, 604, 605, 904,
	1792, 860, 2102, 359, 1822, 1609, 801, 527, 359, 805,
	529, 1524, 1389, 998, 806, 1204, 1152, 810, 1534, 957,
	813, 838, 1967, 709, 617, 565, 520, 914, 835, 1269,
	1199, 917, 956, 958, 1969, 861, 857, 816, 966, 526,
	528, 1018, 1017, 1788, 1789, 1791, 1037, 558, 1384, 1790,
	560, 1139, 1036, 1841, 1840, 1377, 586, 1839, 1375, 2106,
	845, 94, 21, 560, 94, 94, 94, 94, 94, 1037,
	798, 1964, 1378, 559, 558, 1535, 94, 1838, 980, 94,
	21, 853, 855, 94, 1837, 1836, 1835, 1833, 94, 94,
	560, 586, 359, 604, 605, 1251, 888, 885, 1226, 649,
	359, 913, 887, 708, 2104, 797, 1449, 359, 922, 923,
	965, 1181, 1209, 1180, 961, 350, 905, 908, 2107, 1198,
	921, 586, 1742, 1015, 353, 353, 353, 353, 1772, 353,
	1383, 962, 559, 558, 1004, 586, 1140, 965, 971, 1738,
	338, 338, 338, 338, 338, 1260, 1260, 21, 793, 560,
	970, 866, 973, 974, 563, 338, 636, 637, 638, 639,
	640, 641, 642, 1260, 338, 864, 865, 863, 841, 842,
	1739, 1944, 559, 558, 977, 668, 981, 94, 359, 984,
	94, 1259, 94, 359, 49, 359, 94, 921, 94, 560,
	993, 1945, 1002, 1001, 359, 94, 1597, 1007, 94, 524,
	94, 1116, 1005, 94, 359, 1260, 1006, 1075, 1076, 1077,
	1078, 1272, 1023, 982, 983, 50, 985, 2076, 2075, 559,
	558, 1965, 1966, 1968, 1970, 1971, 862, 1093, 1070, 2036,
	1725, 1072, 2089, 799, 800, 353, 560, 2035, 559, 558,
	1944, 1834, 711, 1994, 1727, 2002, 801, 1148, 1662, 1149,
	1150, 1151, 856, 1309, 2034, 560, 545, 1155, 1156, 1157,
	1945, 1089, 1090, 1271, 583, 584, 576, 577, 578, 579,
	580, 581, 582, 575, 559, 558, 585, 1115, 574, 573,
	583, 584, 576, 577, 578, 579, 580, 581, 582, 575,
	1096, 560, 585, 1099, 2032, 1103, 860, 1946, 1942, 1107,
	46, 1113, 48, 25, 26, 1851, 1754, 359, 1117, 857,
	1661, 1134, 1670, 1135, 1786, 1309, 1136, 1594, 1726, 606,
	837, 1669, 1512, 559, 558, 1787, 559, 558, 1147, 1309,
	861, 1331, 46, 1451, 48, 25, 26, 1329, 1315, 1093,
	560, 2033, 1314, 560, 1305, 1706, 1786, 513, 1154, 1667,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1787, 94, 836,
	1170, 574, 573, 583, 584, 576, 577, 578, 579, 580,
	581, 582, 575, 1089, 1090, 585, 1187, 1577, 559, 558,
	724, 724, 785, 788, 50, 1167, 1191, 1651, 1325, 616,
	919, 359, 802, 1278, 94, 560, 616, 883, 1172, 884,
	81, 353, 849, 851, 852, 559, 558, 54, 1831, 850,
	359, 2108, 353, 353, 353, 353, 353, 353, 353, 353,
	1497, 359, 560, 1864, 2123, 545, 353, 353, 1496, 1793,
	1632, 2097, 359, 1254, 21, 516, 517, 518, 1495, 1792,
	1244, 1270, 94, 1252, 1243, 896, 1245, 815, 1206, 2016,
	545, 1208, 563, 1686, 2045, 353, 1277, 1632, 2026, 1973,
	332, 1793, 1864, 2025, 1233, 2022, 2021, 2009, 545, 1911,
	338, 1792, 1632, 2007, 1220, 1632, 2006, 1860, 1297, 1632,
	1974, 1854, 1788, 1789, 1791, 94, 359, 1246, 1790, 94,
	1593, 724, 814, 1295, 907, 907, 1686, 1766, 1686, 1749,
	1686, 545, 909, 1716, 1715, 1686, 1714, 353, 1318, 794,
	1320, 1321, 1322, 1323, 1788, 1789, 1791, 959, 1723, 792,
	1790, 522, 959, 1632, 1631, 1475, 545, 359, 515, 1224,
	94, 94, 1853, 1310, 1311, 586, 1313, 1760, 1316, 1317,
	1264, 1265, 1267, 359, 1608, 545, 1541, 1540, 1537, 1538,
	1759, 586, 1395, 1396, 1758, 1279, 1537, 1536, 1326, 1865,
	1346, 1864, 959, 1351, 1755, 1348, 1391, 1687, 1327, 1328,
	1674, 1330, 574, 573, 583, 584, 576, 577, 578, 579,
	580, 581, 582, 575, 1173, 545, 585, 46, 1345, 46,
	1663, 353, 1441, 1442, 1443, 1444, 1445, 699, 1332, 353,
	1402, 1343, 1336, 919, 545, 1659, 490, 673, 545, 716,
	715, 1655, 359, 359, 1218, 1580, 1531, 1709, 1446, 1219,
	1530, 1525, 54, 49, 980, 1393, 1392, 1387, 1454, 1453,
	980, 1225, 1224, 1448, 586, 1989, 1225, 50, 50, 50,
	46, 700, 1407, 698, 359, 1404, 1203, 672, 359, 1436,
	1463, 1725, 1457, 1564, 1438, 49, 1343, 1604, 673, 1485,
	1440, 1173, 1686, 1342, 1173, 1727, 1343, 1483, 1632, 1654,
	1476, 2092, 1003, 673, 698, 857, 673, 1097, 1543, 1542,
	21, 1224, 353, 1539, 353, 1464, 1477, 544, 1462, 1255,
	50, 1347, 1202, 724, 1008, 1173, 46, 1182, 48, 25,
	26, 701, 839, 353, 2113, 2011, 1484, 1859, 1845, 1297,
	1786, 1844, 1805, 1804, 1762, 1761, 1753, 1690, 1516, 1675,
	1459, 1787, 1517, 1523, 1295, 1513, 94, 1063, 353, 1505,
	1092, 1503, 1550, 94, 1522, 359, 1515, 1520, 359, 1726,
	1508, 359, 1470, 1468, 1334, 1526, 1527, 1235, 1529, 1087,
	1357, 1532, 1533, 1284, 1280, 1257, 1080, 1547, 1079, 678,
	681, 682, 683, 679, 94, 680, 684, 1229, 1230, 1234,
	359, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1094, 1095,
	359, 1528, 1068, 64, 1826, 1394, 1850, 1582, 1544, 1453,
	1563, 1335, 1559, 1232, 1098, 812, 21, 795, 21, 1570,
	990, 987, 988, 1391, 236, 991, 563, 989, 1571, 574,
	573, 583, 584, 576, 577, 578, 579, 580, 581, 582,
	575, 1573, 1552, 585, 1576, 1793, 1142, 1358, 1354, 1350,
	986, 1359, 1356, 1355, 2070, 1792, 1551, 1353, 1553, 1549,
	992, 2017, 682, 683, 1586, 586, 1558, 1143, 1360, 1388,
	678, 681, 682, 683, 679, 633, 680, 684, 1187, 359,
	1229, 1230, 359, 359, 359, 94, 359, 1191, 1611, 542,
	543, 2066, 1256, 359, 1319, 359, 547, 1572, 1788, 1789,
	1791, 1626, 714, 523, 1790, 1511, 1602, 231, 2057, 548,
	1242, 841, 842, 233, 1693, 1603, 1628, 62, 1254, 359,
	239, 235, 1612, 1105, 811, 1621, 1622, 1623, 1767, 353,
	1510, 1648, 1341, 1339, 1624, 359, 1337, 803, 686, 833,
	1262, 57, 59, 60, 61, 1647, 260, 261, 2086, 1796,
	1684, 1273, 237, 1555, 359, 94, 1491, 967, 1664, 1828,
	255, 359, 1650, 94, 252, 1302, 1680, 1642, 1681, 1682,
	1683, 2040, 1295, 1656, 1927, 94, 54, 359, 1810, 1671,
	256, 1679, 1926, 1665, 1809, 1547, 359, 1225, 1110, 1111,
	1112, 94, 1999, 1998, 1997, 1996, 1960, 1959, 46, 556,
	48, 25, 26, 1843, 1676, 1333, 1700, 1701, 1842, 1702,
	1703, 1704, 1786, 1490, 1489, 1819, 1274, 834, 56, 359,
	359, 1780, 8, 1787, 58, 1666, 1352, 1668, 1777, 7,
	232, 1778, 6, 1566, 1699, 1776, 5, 1696, 1020, 49,
	1689, 1695, 697, 359, 305, 47, 353, 51, 1, 1874,
	66, 65, 1928, 1405, 1100, 359, 1708, 1457, 1168, 613,
	291, 2093, 353, 2062, 1737, 277, 1613, 338, 1673, 1741,
	234, 1990, 241, 244, 1871, 1983, 1677, 1736, 243, 242,
	1720, 1900, 1304, 1735, 1042, 1852, 21, 2090, 1688, 359,
	1281, 1745, 47, 1743, 67, 1979, 1863, 359, 1554, 1340,
	259, 359, 586, 1361, 1122, 339, 1921, 1516, 1939, 1722,
	1634, 1028, 1765, 1627, 353, 1775, 1253, 488, 1547, 63,
	1832, 1756, 1029, 1757, 1027, 1026, 1710, 1793, 959, 1795,
	1024, 1461, 1242, 1307, 959, 1060, 723, 1792, 721, 722,
	726, 238, 345, 1827, 685, 710, 1349, 557, 1374, 1820,
	1373, 1118, 1382, 829, 1138, 1823, 539, 240, 1824, 598,
	1247, 352, 1457, 353, 1460, 551, 1925, 1487, 1808, 1207,
	630, 963, 278, 359, 848, 290, 289, 288, 1217, 567,
	1788, 1789, 1791, 337, 1857, 669, 1790, 677, 675, 674,
	21, 1231, 1227, 1855, 336, 1579, 1302, 359, 1856, 359,
	359, 359, 1869, 1599, 1547, 1906, 264, 1816, 541, 359,
	359, 359, 359, 359, 359, 359, 359, 1141, 24, 1797,
	55, 331, 19, 18, 17, 1858, 1919, 1920, 1861, 20,
	1821, 1909, 1870, 359, 1905, 1908, 784, 359, 16, 15,
	14, 359, 28, 1794, 1548, 980, 21, 1784, 13, 1935,
	1940, 12, 11, 10, 1561, 359, 359, 1565, 1954, 9,
	1569, 1783, 1782, 844, 1781, 1779, 4, 1955, 257, 22,
	359, 2, 0, 1975, 0, 359, 1978, 1956, 0, 531,
	531, 531, 531, 359, 531, 0, 1862, 0, 0, 1574,
	1991, 0, 0, 1977, 1984, 1988, 0, 0, 0, 353,
	0, 0, 0, 0, 47, 1947, 1948, 1949, 1950, 1951,
	0, 359, 0, 1976, 599, 0, 0, 1972, 603, 1952,
	1953, 49, 0, 0, 359, 0, 918, 920, 1914, 1915,
	1916, 1917, 1918, 2000, 359, 0, 0, 0, 615, 530,
	0, 0, 1993, 968, 0, 0, 0, 0, 0, 0,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 2013,
	632, 0, 635, 635, 635, 635, 635, 635, 635, 635,
	0, 664, 665, 666, 667, 2015, 0, 0, 1561, 2023,
	2024, 1561, 1561, 1561, 688, 1625, 0, 2041, 2027, 2043,
	0, 0, 353, 0, 353, 995, 0, 0, 2044, 0,
	359, 2047, 0, 0, 0, 0, 0, 1062, 550, 2053,
	0, 0, 2052, 2049, 2050, 0, 0, 2058, 1561, 2060,
	2061, 2059, 359, 2056, 0, 0, 2065, 0, 2069, 0,
	1775, 359, 0, 2067, 353, 2042, 2028, 2029, 0, 2046,
	0, 2074, 92, 2072, 0, 245, 0, 0, 0, 0,
	0, 94, 1548, 1672, 0, 0, 0, 2080, 0, 0,
	1561, 2081, 549, 553, 2079, 359, 265, 0, 359, 92,
	92, 0, 1991, 0, 566, 0, 1691, 0, 0, 2084,
	0, 0, 92, 0, 94, 1694, 2050, 1869, 2050, 2050,
	0, 92, 0, 92, 0, 0, 0, 2101, 0, 92,
	0, 0, 0, 0, 2103, 0, 0, 0, 0, 0,
	0, 0, 620, 359, 0, 0, 0, 2084, 1712, 1713,
	2084, 631, 0, 0, 359, 0, 0, 2119, 0, 0,
	2121, 0, 2120, 0, 0, 0, 2114, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 2050, 0,
	0, 0, 0, 0, 1744, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 21, 0, 531, 531, 531,
	531, 531, 531, 531, 531, 533, 534, 535, 0, 538,
	0, 531, 531, 0, 0, 1548, 0, 0, 1769, 0,
	0, 0, 0, 0, 0, 0, 1773, 2100, 0, 0,
	1798, 0, 0, 0, 1162, 2105, 574, 573, 583, 584,
	576, 577, 578, 579, 580, 581, 582, 575, 0, 1171,
	585, 1174, 1175, 0, 46, 0, 48, 25, 26, 1177,
	1178, 1179, 0, 0, 0, 0, 0, 0, 1786, 92,
	0, 1657, 1289, 1290, 1291, 0, 0, 0, 47, 1787,
	1294, 1292, 301, 302, 0, 0, 0, 1159, 0, 1160,
	0, 0, 0, 0, 0, 0, 621, 0, 0, 1205,
	0, 1548, 1487, 0, 1211, 80, 0, 0, 1213, 1214,
	0, 1215, 1216, 574, 573, 583, 584, 576, 577, 578,
	579, 580, 581, 582, 575, 0, 1872, 585, 1897, 1898,
	1899, 0, 0, 0, 0, 0, 0, 0, 1913, 1798,
	1798, 1913, 1798, 1798, 1487, 1487, 0, 0, 339, 339,
	339, 339, 339, 0, 0, 0, 0, 70, 75, 959,
	68, 0, 1937, 688, 0, 1000, 1938, 0, 0, 1201,
	1941, 92, 339, 71, 0, 78, 0, 0, 92, 693,
	92, 0, 0, 1793, 1769, 1487, 0, 0, 0, 0,
	0, 72, 73, 1792, 0, 846, 847, 0, 0, 1561,
	0, 0, 0, 0, 1981, 0, 0, 0, 0, 0,
	0, 0, 724, 574, 573, 583, 584, 576, 577, 578,
	579, 580, 581, 582, 575, 0, 0, 585, 0, 46,
	0, 48, 25, 26, 0, 0, 1788, 1789, 1791, 0,
	1995, 0, 1790, 1786, 0, 0, 46, 0, 48, 25,
	26, 0, 916, 1913, 1787, 0, 0, 0, 620, 0,
	1786, 924, 955, 2010, 0, 0, 0, 531, 0, 531,
	0, 1787, 0, 0, 0, 0, 0, 1658, 1506, 0,
	0, 808, 0, 0, 0, 0, 0, 0, 531, 0,
	0, 0, 819, 820, 821, 822, 823, 824, 825, 826,
	0, 0, 0, 0, 0, 0, 827, 828, 2085, 586,
	1403, 574, 573, 583, 584, 576, 577, 578, 579, 580,
	581, 582, 575, 0, 0, 585, 0, 0, 0, 2054,
	1298, 1153, 1300, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 1014, 0, 0, 1128, 92,
	69, 1487, 92, 0, 0, 92, 0, 0, 1793, 817,
	2071, 0, 1127, 0, 0, 0, 0, 0, 1792, 0,
	0, 0, 0, 0, 0, 1793, 0, 49, 74, 1474,
	0, 0, 0, 0, 0, 1792, 586, 0, 0, 0,
	76, 77, 1132, 79, 724, 92, 0, 2087, 0, 0,
	0, 0, 1126, 0, 817, 0, 0, 0, 0, 0,
	0, 1788, 1789, 1791, 0, 0, 0, 1790, 0, 0,
	0, 0, 0, 0, 0, 2051, 0, 0, 1788, 1789,
	1791, 0, 0, 0, 1790, 0, 0, 0, 0, 0,
	0, 0, 353, 0, 2001, 0, 0, 0, 0, 0,
	1221, 1222, 0, 1769, 265, 0, 1123, 1120, 1121, 0,
	1119, 265, 265, 0, 0, 0, 960, 265, 0, 0,
	0, 960, 0, 1144, 1145, 0, 553, 0, 339, 0,
	0, 0, 0, 0, 0, 46, 586, 48, 25, 26,
	1130, 1133, 0, 0, 0, 0, 0, 0, 0, 1786,
	0, 0, 0, 265, 265, 265, 265, 0, 0, 92,
	1787, 960, 92, 92, 92, 92, 92, 0, 0, 0,
	0, 0, 0, 0, 994, 0, 0, 92, 0, 0,
	1581, 693, 0, 0, 0, 0, 92, 92, 0, 1366,
	0, 0, 0, 0, 0, 1588, 0, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 1176, 0, 0, 0,
	0, 0, 1104, 0, 1106, 0, 0, 1064, 1065, 49,
	1069, 0, 1125, 1071, 1589, 1590, 0, 0, 1591, 1592,
	0, 0, 1595, 1137, 586, 0, 0, 0, 0, 0,
	1081, 1082, 1083, 1084, 1085, 0, 1605, 1606, 1607, 0,
	1610, 0, 1210, 0, 644, 1124, 0, 0, 0, 0,
	1367, 531, 0, 0, 1793, 0, 1369, 1362, 1363, 0,
	1370, 1365, 1364, 0, 1792, 92, 1372, 1368, 92, 0,
	92, 0, 0, 0, 92, 0, 92, 1371, 0, 646,
	0, 0, 0, 92, 0, 0, 92, 0, 92, 0,
	0, 92, 0, 0, 0, 0, 1660, 0, 0, 0,
	0, 0, 0, 1129, 0, 0, 0, 1788, 1789, 1791,
	0, 0, 0, 1790, 0, 0, 0, 817, 0, 0,
	0, 1131, 0, 1985, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 0, 47, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 661, 0, 0, 0,
	0, 0, 0, 1471, 1472, 1473, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 1697, 662, 645, 0, 0,
	0, 0, 651, 650, 0, 1065, 1082, 1705, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 265, 1507, 0, 0, 0, 0, 0, 0, 1717,
	1718, 1719, 0, 0, 1183, 1185, 0, 1186, 0, 0,
	0, 1518, 1189, 0, 0, 0, 0, 615, 0, 0,
	0, 0, 0, 0, 1192, 1193, 0, 1748, 1194, 1195,
	0, 1196, 1197, 0, 0, 0, 0, 0, 0, 0,
	0, 265, 0, 0, 0, 0, 1212, 0, 49, 0,
	0, 0, 47, 0, 47, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 663,
	0, 0, 0, 0, 0, 0, 0, 1811, 1812, 1813,
	1814, 1815, 92, 0, 0, 0, 1450, 46, 23, 48,
	25, 26, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 1466, 0, 0, 1467, 41, 0, 1469,
	0, 0, 27, 0, 0, 0, 0, 0, 0, 0,
	0, 1587, 0, 0, 1846, 0, 0, 0, 1481, 0,
	92, 0, 0, 36, 1303, 0, 0, 50, 0, 0,
	0, 0, 0, 0, 1312, 0, 1381, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1509, 0, 0,
	0, 0, 1598, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1931, 0, 0, 0, 0, 1936,
	0, 0, 0, 29, 30, 32, 31, 34, 0, 1646,
	0, 0, 0, 0, 0, 0, 644, 0, 1385, 1386,
	265, 0, 0, 0, 0, 1957, 0, 0, 0, 35,
	42, 43, 265, 0, 44, 45, 33, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 646, 265, 0, 0, 0, 0, 0, 0, 0,
	0, 1578, 0, 615, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 817, 0, 37, 38, 0, 39, 40,
	0, 0, 0, 0, 0, 339, 0, 960, 0, 2008,
	0, 0, 0, 960, 0, 0, 2014, 0, 0, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 1458,
	889, 890, 1711, 891, 892, 893, 895, 894, 1601, 886,
	647, 0, 0, 0, 0, 620, 0, 0, 662, 645,
	0, 0, 0, 0, 651, 650, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1747, 0, 1303, 0, 0, 0, 0,
	0, 0, 0, 1518, 0, 0, 1519, 1521, 0, 1153,
	0, 0, 0, 0, 1649, 0, 0, 0, 0, 0,
	0, 0, 0, 2068, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1806, 0,
	49, 0, 0, 1303, 92, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 1458, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 663, 0, 0, 0, 0, 0, 0, 0, 2099,
	0, 0, 92, 1876, 1877, 1878, 1879, 1880, 1881, 1882,
	1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892,
	1893, 1894, 1895, 1896, 0, 0, 1408, 0, 0, 0,
	0, 0, 47, 0, 0, 0, 1183, 1185, 0, 1186,
	0, 0, 0, 1189, 0, 0, 0, 0, 0, 2125,
	2126, 0, 0, 0, 0, 1192, 1193, 0, 0, 1194,
	1195, 1410, 1196, 1197, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1746, 0, 0, 0, 0, 0, 1752,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 693, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1633, 1636, 0, 0, 1418,
	1424, 1422, 0, 0, 1419, 0, 0, 1417, 0, 0,
	1426, 0, 0, 1425, 1412, 1421, 1423, 1420, 1415, 0,
	1411, 0, 1428, 1427, 1429, 1409, 1431, 0, 0, 0,
	1435, 1432, 1434, 1433, 0, 1430, 0, 0, 0, 0,
	0, 0, 0, 0, 1413, 932, 0, 0, 0, 0,
	0, 1303, 0, 92, 1847, 0, 1633, 0, 0, 0,
	0, 92, 0, 0, 1414, 1416, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 1868,
	0, 0, 0, 2020, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1907, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1930, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1303, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 0, 2012, 620, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1303, 474, 463, 0, 422, 476, 392, 410, 484, 412,
	413, 449, 371, 432, 161, 407, 389, 98, 395, 364,
	402, 365, 393, 424, 122, 390, 0, 465, 435, 136,
	226, 227, 482, 139, 440, 0, 185, 149, 0, 0,
	427, 467, 430, 458, 421, 450, 379, 439, 477, 408,
	445, 478, 0, 1930, 0, 358, 0, 1629, 960, 1630,
	0, 0, 0, 0, 0, 111, 0, 444, 472, 404,
	487, 0, 448, 363, 442, 0, 369, 372, 483, 470,
	399, 400, 0, 0, 0, 2082, 0, 0, 0, 426,
	431, 455, 418, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 396, 0, 438, 0, 0,
	0, 376, 370, 0, 423, 0, 0, 0, 378, 0,
	397, 456, 0, 360, 461, 468, 420, 145, 212, 471,
	417, 416, 168, 0, 114, 0, 191, 126, 409, 137,
	453, 485, 475, 428, 466, 394, 403, 116, 401, 175,
	162, 203, 437, 451, 173, 140, 195, 169, 202, 473,
	193, 211, 178, 106, 156, 96, 167, 174, 0, 115,
	0, 219, 220, 221, 222, 223, 224, 225, 368, 361,
	398, 459, 462, 383, 447, 373, 405, 454, 406, 429,
	388, 0, 0, 0, 0, 0, 0, 0, 184, 183,
	99, 192, 201, 112, 179, 102, 199, 188, 190, 147,
	132, 133, 181, 100, 101, 0, 172, 121, 166, 125,
	120, 159, 189, 150, 196, 197, 117, 216, 119, 118,
	187, 107, 209, 210, 104, 108, 208, 155, 160, 158,
	207, 194, 200, 148, 144, 0, 103, 198, 146, 143,
	135, 0, 123, 127, 164, 142, 165, 128, 152, 151,
	153, 0, 0, 157, 129, 0, 0, 0, 366, 0,
	186, 205, 217, 218, 367, 387, 469, 213, 0, 2078,
	0, 154, 109, 130, 180, 134, 141, 171, 215, 446,
	176, 113, 204, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 382, 386, 380, 381,
	433, 434, 479, 480, 481, 457, 377, 0, 384, 385,
	0, 464, 131, 228, 229, 436, 97, 105, 138, 486,
	214, 0, 170, 124, 206, 0, 0, 411, 362, 415,
	0, 0, 0, 0, 0, 0, 0, 374, 375, 177,
	0, 419, 414, 441, 443, 452, 460, 0, 391, 425,
	0, 110, 474, 463, 0, 422, 476, 392, 410, 484,
	412, 413, 449, 371, 432, 161, 407, 389, 98, 395,
	364, 402, 365, 393, 424, 122, 390, 0, 465, 435,
	136, 226, 227, 482, 139, 440, 0, 185, 149, 0,
	0, 427, 467, 430, 458, 421, 450, 379, 439, 477,
	408, 445, 478, 0, 0, 0, 270, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 444, 472,
	404, 487, 0, 448, 363, 442, 0, 369, 372, 483,
	470, 399, 400, 0, 0, 0, 0, 0, 0, 0,
	426, 431, 455, 418, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 854, 0, 396, 0, 438, 0,
	0, 0, 376, 370, 0, 423, 0, 0, 0, 378,
	0, 397, 456, 0, 360, 461, 468, 420, 145, 212,
	471, 417, 416, 168, 0, 114, 0, 191, 126, 409,
	137, 453, 485, 475, 428, 466, 394, 403, 116, 401,
	175, 162, 203, 437, 451, 173, 140, 195, 169, 202,
	473, 193, 211, 178, 106, 156, 96, 167, 174, 0,
	115, 0, 219, 220, 221, 222, 223, 224, 225, 368,
	361, 398, 459, 462, 383, 447, 373, 405, 454, 406,
	429, 388, 0, 0, 0, 0, 0, 0, 0, 184,
	183, 99, 192, 201, 112, 179, 102, 199, 188, 190,
	147, 132, 133, 181, 100, 101, 0, 172, 121, 166,
	125, 120, 159, 189, 150, 196, 197, 117, 216, 119,
	118, 187, 107, 209, 210, 104, 108, 208, 155, 160,
	158, 207, 194, 200, 148, 144, 0, 103, 198, 146,
	143, 135, 0, 123, 127, 164, 142, 165, 128, 152,
	151, 153, 0, 0, 157, 129, 0, 0, 0, 366,
	0, 186, 205, 217, 218, 367, 387, 469, 213, 0,
	0, 0, 154, 109, 130, 180, 134, 141, 171, 215,
	446, 176, 113, 204, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 382, 386, 380,
	381, 433, 434, 479, 480, 481, 457, 377, 0, 384,
	385, 0, 464, 131, 228, 229, 436, 97, 105, 138,
	486, 214, 0, 170, 124, 206, 0, 0, 411, 362,
	415, 0, 0, 0, 0, 0, 0, 0, 374, 375,
	177, 0, 419, 414, 441, 443, 452, 460, 0, 391,
	425, 0, 110, 474, 463, 0, 422, 476, 392, 410,
	484, 412, 413, 449, 371, 432, 161, 407, 389, 98,
	395, 364, 402, 365, 393, 424, 122, 390, 0, 465,
	435, 136, 226, 227, 482, 139, 440, 0, 185, 149,
	0, 0, 427, 467, 430, 458, 421, 450, 379, 439,
	477, 408, 445, 478, 0, 0, 0, 358, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 444,
	472, 404, 487, 0, 448, 363, 442, 0, 369, 372,
	483, 470, 399, 400, 1482, 0, 0, 0, 0, 0,
	0, 426, 431, 455, 418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 396, 0, 438,
	0, 0, 0, 376, 370, 0, 423, 0, 0, 0,
	378, 0, 397, 456, 0, 360, 461, 468, 420, 145,
	212, 471, 417, 416, 168, 0, 114, 0, 191, 126,
	409, 137, 453, 485, 475, 428, 466, 394, 403, 116,
	401, 175, 162, 203, 437, 451, 173, 140, 195, 169,
	202, 473, 193, 211, 178, 106, 156, 96, 167, 174,
	0, 115, 0, 219, 220, 221, 222, 223, 224, 225,
	368, 361, 398, 459, 462, 383, 447, 373, 405, 454,
	406, 429, 388, 0, 0, 0, 0, 0, 0, 0,
	184, 183, 99, 192, 201, 112, 179, 102, 199, 188,
	190, 147, 132, 133, 181, 100, 101, 0, 172, 121,
	166, 125, 120, 159, 189, 150, 196, 197, 117, 216,
	119, 118, 187, 107, 209, 210, 104, 108, 208, 155,
	160, 158, 207, 194, 200, 148, 144, 0, 103, 198,
	146, 143, 135, 0, 123, 127, 164, 142, 165, 128,
	152, 151, 153, 0, 0, 157, 129, 0, 0, 0,
	366, 0, 186, 205, 217, 218, 367, 387, 469, 213,
	0, 0, 0, 154, 109, 130, 180, 134, 141, 171,
	215, 446, 176, 113, 204, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 382, 386,
	380, 381, 433, 434, 479, 480, 481, 457, 377, 0,
	384, 385, 0, 464, 131, 228, 229, 436, 97, 105,
	138, 486, 214, 0, 170, 124, 206, 0, 0, 411,
	362, 415, 0, 0, 0, 0, 0, 0, 0, 374,
	375, 177, 0, 419, 414, 441, 443, 452, 460, 0,
	391, 425, 0, 110, 474, 463, 0, 422, 476, 392,
	410, 484, 412, 413, 449, 371, 432, 161, 407, 389,
	98, 395, 364, 402, 365, 393, 424, 122, 390, 0,
	465, 435, 136, 226, 227, 482, 139, 440, 0, 185,
	149, 0, 0, 427, 467, 430, 458, 421, 450, 379,
	439, 477, 408, 445, 478, 0, 0, 0, 270, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	444, 472, 404, 487, 0, 448, 363, 442, 0, 369,
	372, 483, 470, 399, 400, 0, 0, 0, 0, 0,
	0, 0, 426, 431, 455, 418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 396, 0,
	438, 0, 0, 0, 376, 370, 0, 423, 0, 0,
	0, 378, 0, 397, 456, 0, 360, 461, 468, 420,
	145, 212, 471, 417, 416, 168, 0, 114, 0, 191,
	126, 409, 137, 453, 485, 475, 428, 466, 394, 403,
	116, 401, 175, 162, 203, 437, 451, 173, 140, 195,
	169, 202, 473, 193, 211, 178, 106, 156, 96, 167,
	174, 0, 115, 0, 219, 220, 221, 222, 223, 224,
	225, 368, 361, 398, 459, 462, 383, 447, 373, 405,
	454, 406, 429, 388, 0, 0, 0, 0, 0, 0,
	0, 184, 183, 99, 192, 201, 112, 179, 102, 199,
	188, 190, 147, 132, 133, 181, 100, 101, 0, 172,
	121, 166, 125, 120, 159, 189, 150, 196, 197, 117,
	216, 119, 118, 187, 107, 209, 210, 104, 108, 208,
	155, 160, 158, 207, 194, 200, 148, 144, 0, 103,
	198, 146, 143, 135, 0, 123, 127, 164, 142, 165,
	128, 152, 151, 153, 0, 0, 157, 129, 0, 0,
	0, 366, 0, 186, 205, 217, 218, 367, 387, 469,
	213, 0, 0, 0, 154, 109, 130, 180, 134, 141,
	171, 215, 446, 176, 113, 204, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 382,
	386, 380, 381, 433, 434, 479, 480, 481, 457, 377,
	0, 384, 385, 0, 464, 131, 228, 229, 436, 97,
	105, 138, 486, 214, 0, 170, 124, 206, 0, 0,
	411, 362, 415, 0, 0, 0, 0, 0, 0, 0,
	374, 375, 177, 0, 419, 414, 441, 443, 452, 460,
	0, 391, 425, 0, 110, 474, 463, 0, 422, 476,
	392, 410, 484, 412, 413, 449, 371, 432, 161, 407,
	389, 98, 395, 364, 402, 365, 393, 424, 122, 390,
	0, 465, 435, 136, 226, 227, 482, 139, 440, 0,
	185, 149, 0, 0, 427, 467, 430, 458, 421, 450,
	379, 439, 477, 408, 445, 478, 0, 0, 0, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 444, 472, 404, 487, 0, 448, 363, 442, 0,
	369, 372, 483, 470, 399, 400, 0, 0, 0, 0,
	0, 0, 0, 426, 431, 455, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1390, 0, 396,
	0, 438, 0, 0, 0, 376, 370, 0, 423, 0,
	0, 0, 378, 0, 397, 456, 0, 360, 461, 468,
	420, 145, 212, 471, 417, 416, 168, 0, 114, 0,
	191, 126, 409, 137, 453, 485, 475, 428, 466, 394,
	403, 116, 401, 175, 162, 203, 437, 451, 173, 140,
	195, 169, 202, 473, 193, 211, 178, 106, 156, 96,
	167, 174, 0, 115, 0, 219, 220, 221, 222, 223,
	224, 225, 368, 361, 398, 459, 462, 383, 447, 373,
	405, 454, 406, 429, 388, 0, 0, 0, 0, 0,
	0, 0, 184, 183, 99, 192, 201, 112, 179, 102,
	199, 188, 190, 147, 132, 133, 181, 100, 101, 0,
	172, 121, 166, 125, 120, 159, 189, 150, 196, 197,
	117, 216, 119, 118, 187, 107, 209, 210, 104, 108,
	208, 155, 160, 158, 207, 194, 200, 148, 144, 0,
	103, 198, 146, 143, 135, 0, 123, 127, 164, 142,
	165, 128, 152, 151, 153, 0, 0, 157, 129, 0,
	0, 0, 366, 0, 186, 205, 217, 218, 367, 387,
	469, 213, 0, 0, 0, 154, 109, 130, 180, 134,
	141, 171, 215, 446, 176, 113, 204, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	382, 386, 380, 381, 433, 434, 479, 480, 481, 457,
	377, 0, 384, 385, 0, 464, 131, 228, 229, 436,
	97, 105, 138, 486, 214, 0, 170, 124, 206, 0,
	0, 411, 362, 415, 0, 0, 0, 0, 0, 0,
	0, 374, 375, 177, 0, 419, 414, 441, 443, 452,
	460, 0, 391, 425, 0, 110, 474, 463, 0, 422,
	476, 392, 410, 484, 412, 413, 449, 371, 432, 161,
	407, 389, 98, 395, 364, 402, 365, 393, 424, 122,
	390, 0, 465, 435, 136, 226, 227, 482, 139, 440,
	0, 185, 149, 0, 0, 427, 467, 430, 458, 421,
	450, 379, 439, 477, 408, 445, 478, 50, 0, 0,
	358, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 444, 472, 404, 487, 0, 448, 363, 442,
	0, 369, 372, 483, 470, 399, 400, 0, 0, 0,
	0, 0, 0, 0, 426, 431, 455, 418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	396, 0, 438, 0, 0, 0, 376, 370, 0, 423,
	0, 0, 0, 378, 0, 397, 456, 0, 360, 461,
	468, 420, 145, 212, 471, 417, 416, 168, 0, 114,
	0, 191, 126, 409, 137, 453, 485, 475, 428, 466,
	394, 403, 116, 401, 175, 162, 203, 437, 451, 173,
	140, 195, 169, 202, 473, 193, 211, 178, 106, 156,
	96, 167, 174, 0, 115, 0, 219, 220, 221, 222,
	223, 224, 225, 368, 361, 398, 459, 462, 383, 447,
	373, 405, 454, 406, 429, 388, 0, 0, 0, 0,
	0, 0, 0, 184, 183, 99, 192, 201, 112, 179,
	102, 199, 188, 190, 147, 132, 133, 181, 100, 101,
	0, 172, 121, 166, 125, 120, 159, 189, 150, 196,
	197, 117, 216, 119, 118, 187, 107, 209, 210, 104,
	108, 208, 155, 160, 158, 207, 194, 200, 148, 144,
	0, 103, 198, 146, 143, 135, 0, 123, 127, 164,
	142, 165, 128, 152, 151, 153, 0, 0, 157, 129,
	0, 0, 0, 366, 0, 186, 205, 217, 218, 367,
	387, 469, 213, 0, 0, 0, 154, 109, 130, 180,
	134, 141, 171, 215, 446, 176, 113, 204, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 382, 386, 380, 381, 433, 434, 479, 480, 481,
	457, 377, 0, 384, 385, 0, 464, 131, 228, 229,
	436, 97, 105, 138, 486, 214, 0, 170, 124, 206,
	0, 0, 411, 362, 415, 0, 0, 0, 0, 0,
	0, 0, 374, 375, 177, 0, 419, 414, 441, 443,
	452, 460, 0, 391, 425, 0, 110, 474, 463, 0,
	422, 476, 392, 410, 484, 412, 413, 449, 371, 432,
	161, 407, 389, 98, 395, 364, 402, 365, 393, 424,
	122, 390, 0, 465, 435, 136, 226, 227, 482, 139,
	440, 0, 185, 149, 0, 0, 427, 467, 430, 458,
	421, 450, 379, 439, 477, 408, 445, 478, 0, 0,
	0, 358, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 444, 472, 404, 487, 0, 448, 363,
	442, 0, 369, 372, 483, 470, 399, 400, 0, 0,
	0, 0, 0, 0, 0, 426, 431, 455, 418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 396, 0, 438, 0, 0, 0, 376, 370, 0,
	423, 0, 0, 0, 378, 0, 397, 456, 0, 360,
	461, 468, 420, 145, 212, 471, 417, 416, 168, 0,
	114, 0, 191, 126, 409, 137, 453, 485, 475, 428,
	466, 394, 403, 116, 401, 175, 162, 203, 437, 451,
	173, 140, 195, 169, 202, 473, 193, 211, 178, 106,
	156, 96, 167, 174, 0, 115, 0, 219, 220, 221,
	222, 223, 224, 225, 368, 361, 398, 459, 462, 383,
	447, 373, 405, 454, 406, 429, 388, 0, 0, 0,
	0, 0, 0, 0, 184, 183, 99, 192, 201, 112,
	179, 102, 199, 188, 190, 147, 132, 133, 181, 100,
	101, 0, 172, 121, 166, 125, 120, 159, 189, 150,
	196, 197, 117, 216, 119, 118, 187, 107, 209, 210,
	104, 356, 208, 155, 160, 158, 207, 194, 200, 148,
	144, 0, 103, 198, 146, 143, 135, 0, 123, 127,
	164, 142, 165, 128, 152, 151, 153, 0, 0, 157,
	129, 0, 0, 0, 366, 0, 186, 205, 217, 218,
	367, 387, 469, 213, 0, 0, 0, 357, 355, 130,
	180, 134, 141, 171, 215, 446, 176, 113, 204, 182,
	351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 382, 386, 380, 381, 433, 434, 479, 480,
	481, 457, 377, 0, 384, 385, 0, 464, 131, 228,
	229, 436, 97, 105, 138, 486, 214, 0, 170, 124,
	206, 0, 0, 411, 362, 415, 0, 0, 0, 0,
	0, 0, 0, 374, 375, 177, 0, 419, 414, 441,
	443, 452, 460, 0, 391, 425, 0, 110, 474, 463,
	0, 422, 476, 392, 410, 484, 412, 413, 449, 371,
	432, 161, 407, 389, 98, 395, 364, 402, 365, 393,
	424, 122, 390, 0, 465, 435, 136, 226, 227, 482,
	139, 440, 0, 185, 149, 0, 0, 427, 467, 430,
	458, 421, 450, 379, 439, 477, 408, 445, 478, 0,
	0, 0, 93, 0, 95, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 444, 472, 404, 487, 0, 448,
	363, 442, 0, 369, 372, 483, 470, 399, 400, 0,
	0, 0, 0, 0, 0, 0, 426, 431, 455, 418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 396, 0, 438, 0, 0, 0, 376, 370,
	0, 423, 0, 0, 0, 378, 0, 397, 456, 0,
	360, 461, 468, 420, 145, 212, 471, 417, 416, 168,
	0, 114, 0, 191, 126, 409, 137, 453, 485, 475,
	428, 466, 394, 403, 116, 401, 175, 162, 203, 437,
	451, 173, 140, 195, 169, 202, 473, 193, 211, 178,
	106, 156, 96, 167, 174, 0, 115, 0, 219, 220,
	221, 222, 223, 224, 225, 368, 361, 398, 459, 462,
	383, 447, 373, 405, 454, 406, 429, 388, 0, 0,
	0, 0, 0, 0, 0, 184, 183, 99, 192, 201,
	112, 179, 102, 199, 188, 190, 147, 132, 133, 181,
	100, 101, 0, 172, 121, 166, 125, 120, 159, 189,
	150, 196, 197, 117, 216, 119, 118, 187, 107, 209,
	210, 104, 108, 208, 155, 160, 158, 207, 194, 200,
	148, 144, 0, 103, 198, 146, 143, 135, 0, 123,
	127, 164, 142, 165, 128, 152, 151, 153, 0, 0,
	157, 129, 0, 0, 0, 366, 0, 186, 205, 217,
	218, 367, 387, 469, 213, 0, 0, 0, 154, 109,
	130, 180, 134, 141, 171, 215, 446, 176, 113, 204,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 382, 386, 380, 381, 433, 434, 479,
	480, 481, 457, 377, 0, 384, 385, 0, 464, 131,
	228, 229, 436, 97, 105, 138, 486, 214, 0, 170,
	124, 206, 0, 0, 411, 362, 415, 0, 0, 0,
	0, 0, 0, 0, 374, 375, 177, 0, 419, 414,
	441, 443, 452, 460, 0, 391, 425, 0, 110, 474,
	463, 0, 422, 476, 392, 410, 484, 412, 413, 449,
	371, 432, 161, 407, 389, 98, 395, 364, 402, 365,
	393, 424, 122, 390, 0, 465, 435, 136, 226, 227,
	482, 139, 440, 0, 185, 149, 0, 0, 427, 467,
	430, 458, 421, 450, 379, 439, 477, 408, 445, 478,
	0, 0, 0, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 444, 472, 404, 487, 0,
	448, 363, 442, 0, 369, 372, 483, 470, 399, 400,
	0, 0, 0, 0, 0, 0, 0, 426, 431, 455,
	418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 396, 0, 438, 0, 0, 0, 376,
	370, 0, 423, 0, 0, 0, 378, 0, 397, 456,
	0, 360, 461, 468, 420, 145, 212, 471, 417, 416,
	168, 0, 114, 0, 191, 126, 409, 137, 453, 485,
	475, 428, 466, 394, 403, 116, 401, 175, 162, 203,
	437, 451, 173, 140, 195, 169, 202, 473, 193, 211,
	178, 106, 156, 96, 167, 174, 0, 115, 0, 219,
	220, 221, 222, 223, 224, 225, 368, 361, 398, 459,
	462, 383, 447, 373, 405, 454, 406, 429, 388, 0,
	0, 0, 0, 0, 0, 0, 184, 183, 99, 192,
	703, 112, 179, 102, 199, 188, 190, 147, 132, 133,
	181, 100, 101, 0, 172, 121, 166, 125, 120, 159,
	189, 150, 196, 197, 117, 216, 119, 118, 187, 107,
	209, 210, 104, 356, 208, 155, 160, 158, 207, 194,
	200, 148, 144, 0, 103, 198, 146, 143, 135, 0,
	123, 127, 164, 142, 165, 128, 152, 151, 153, 0,
	0, 157, 129, 0, 0, 0, 366, 0, 186, 205,
	217, 218, 367, 387, 469, 213, 0, 0, 0, 357,
	355, 130, 180, 134, 141, 171, 215, 446, 176, 113,
	204, 182, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 382, 386, 380, 381, 433, 434,
	479, 480, 481, 457, 377, 0, 384, 385, 0, 464,
	131, 228, 229, 436, 97, 105, 138, 486, 214, 0,
	170, 124, 206, 0, 0, 411, 362, 415, 0, 0,
	0, 0, 0, 0, 0, 374, 375, 177, 0, 419,
	414, 441, 443, 452, 460, 0, 391, 425, 0, 110,
	474, 463, 0, 422, 476, 392, 410, 484, 412, 413,
	449, 371, 432, 161, 407, 389, 98, 395, 364, 402,
	365, 393, 424, 122, 390, 0, 465, 435, 136, 226,
	227, 482, 139, 440, 0, 185, 149, 0, 0, 427,
	467, 430, 458, 421, 450, 379, 439, 477, 408, 445,
	478, 0, 0, 0, 358, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 444, 472, 404, 487,
	0, 448, 363, 442, 0, 369, 372, 483, 470, 399,
	400, 0, 0, 0, 0, 0, 0, 0, 426, 431,
	455, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 396, 0, 438, 0, 0, 0,
	376, 370, 0, 423, 0, 0, 0, 378, 0, 397,
	456, 0, 360, 461, 468, 420, 145, 212, 471, 417,
	416, 168, 0, 114, 0, 191, 126, 409, 137, 453,
	485, 475, 428, 466, 394, 403, 116, 401, 175, 162,
	203, 437, 451, 173, 140, 195, 169, 202, 473, 193,
	211, 178, 106, 156, 96, 167, 174, 0, 115, 0,
	219, 220, 221, 222, 223, 224, 225, 368, 361, 398,
	459, 462, 383, 447, 373, 405, 454, 406, 429, 388,
	0, 0, 0, 0, 0, 0, 0, 184, 183, 99,
	192, 346, 112, 179, 102, 199, 188, 190, 147, 132,
	133, 181, 100, 101, 0, 172, 121, 166, 125, 120,
	159, 189, 150, 196, 197, 117, 216, 119, 118, 187,
	107, 209, 210, 104, 356, 208, 155, 160, 158, 207,
	194, 200, 148, 144, 0, 103, 198, 146, 143, 135,
	0, 123, 127, 164, 142, 165, 128, 152, 151, 153,
	0, 0, 157, 129, 0, 0, 0, 366, 0, 186,
	205, 217, 218, 367, 387, 469, 213, 0, 0, 0,
	357, 355, 349, 348, 134, 141, 171, 215, 446, 176,
	113, 204, 182, 351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 382, 386, 380, 381, 433,
	434, 479, 480, 481, 457, 377, 0, 384, 385, 0,
	464, 131, 228, 229, 436, 97, 105, 138, 486, 214,
	0, 170, 124, 206, 0, 0, 411, 362, 415, 0,
	0, 0, 0, 0, 0, 0, 374, 375, 177, 0,
	419, 414, 441, 443, 452, 460, 0, 391, 425, 0,
	110, 474, 463, 0, 422, 476, 392, 410, 484, 412,
	413, 449, 371, 432, 161, 407, 389, 98, 395, 364,
	402, 365, 393, 424, 122, 390, 0, 465, 435, 136,
	226, 227, 482, 139, 440, 0, 185, 149, 0, 0,
	427, 467, 430, 458, 421, 450, 379, 439, 477, 408,
	445, 478, 0, 0, 0, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 444, 472, 404,
	487, 0, 448, 363, 442, 0, 369, 372, 483, 470,
	399, 400, 0, 0, 0, 0, 0, 0, 0, 426,
	431, 455, 418, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 396, 0, 438, 0, 0,
	0, 376, 370, 0, 423, 0, 0, 0, 378, 0,
	397, 456, 0, 360, 461, 468, 420, 145, 212, 471,
	417, 416, 168, 0, 114, 0, 191, 126, 409, 137,
	453, 485, 475, 428, 466, 394, 403, 116, 401, 175,
	162, 203, 437, 451, 173, 140, 195, 169, 202, 473,
	193, 211, 178, 106, 156, 96, 167, 174, 0, 115,
	0, 219, 220, 221, 222, 223, 224, 225, 368, 361,
	398, 459, 462, 383, 447, 373, 405, 454, 406, 429,
	388, 0, 0, 0, 0, 0, 0, 0, 184, 183,
	99, 192, 201, 112, 179, 102, 199, 188, 190, 147,
	132, 133, 181, 100, 101, 0, 172, 121, 166, 125,
	120, 159, 189, 150, 196, 197, 117, 216, 119, 118,
	187, 107, 209, 210, 104, 108, 208, 155, 160, 158,
	207, 194, 200, 148, 144, 0, 103, 198, 146, 143,
	135, 0, 123, 127, 164, 142, 165, 128, 152, 151,
	153, 0, 0, 157, 129, 0, 0, 0, 366, 0,
	186, 205, 217, 218, 367, 387, 469, 213, 0, 0,
	0, 154, 109, 130, 180, 134, 141, 171, 215, 446,
	176, 113, 204, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 382, 386, 380, 381,
	433, 434, 479, 480, 481, 457, 377, 0, 384, 385,
	0, 464, 131, 228, 229, 436, 97, 105, 138, 486,
	214, 0, 170, 124, 206, 0, 0, 411, 362, 415,
	0, 0, 0, 0, 0, 0, 0, 374, 375, 177,
	0, 419, 414, 441, 443, 452, 460, 161, 391, 425,
	98, 110, 0, 273, 0, 0, 0, 122, 269, 0,
	0, 0, 136, 226, 227, 315, 139, 316, 0, 185,
	149, 0, 0, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 1012, 0, 50, 0, 0, 270, 294,
	272, 292, 296, 297, 298, 299, 0, 0, 111, 295,
	300, 301, 302, 1013, 0, 0, 0, 267, 285, 0,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 0, 0, 0, 0,
	328, 0, 284, 0, 0, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	145, 212, 0, 0, 326, 168, 0, 114, 0, 191,
	126, 0, 137, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 175, 162, 203, 0, 163, 173, 140, 195,
	169, 202, 0, 193, 211, 178, 106, 156, 96, 167,
	174, 0, 115, 0, 219, 220, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 183, 99, 192, 201, 112, 179, 102, 199,
	188, 190, 147, 132, 133, 181, 100, 101, 0, 172,
	121, 166, 125, 120, 159, 189, 150, 196, 197, 117,
	216, 119, 118, 187, 107, 209, 210, 104, 108, 208,
	155, 160, 158, 207, 194, 200, 148, 144, 0, 103,
	198, 146, 143, 135, 0, 123, 127, 164, 142, 165,
	128, 152, 151, 153, 330, 0, 157, 129, 0, 0,
	0, 0, 0, 186, 205, 217, 218, 0, 0, 0,
	213, 0, 0, 0, 154, 109, 130, 180, 134, 141,
	171, 215, 0, 176, 113, 204, 182, 303, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 317,
	327, 323, 324, 321, 322, 320, 319, 318, 329, 308,
	309, 310, 311, 313, 0, 131, 228, 229, 312, 97,
	105, 138, 0, 214, 0, 170, 124, 206, 161, 0,
	0, 98, 912, 0, 273, 0, 0, 0, 122, 269,
	0, 0, 177, 136, 226, 227, 315, 139, 316, 0,
	185, 149, 0, 325, 110, 0, 306, 307, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 270,
	294, 272, 292, 296, 297, 298, 299, 0, 0, 111,
	295, 300, 301, 302, 0, 0, 0, 0, 267, 285,
	0, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 263, 0, 0,
	0, 328, 0, 284, 0, 0, 280, 281, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 212, 0, 0, 326, 168, 0, 114, 0,
	191, 126, 0, 137, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 175, 162, 203, 0, 163, 173, 140,
	195, 169, 202, 0, 193, 211, 178, 106, 156, 96,
	167, 174, 0, 115, 0, 219, 220, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 183, 99, 192, 201, 112, 179, 102,
	199, 188, 190, 147, 132, 133, 181, 100, 101, 0,
	172, 121, 166, 125, 120, 159, 189, 150, 196, 197,
	117, 216, 119, 118, 187, 107, 209, 210, 104, 108,
	208, 155, 160, 158, 207, 194, 200, 148, 144, 0,
	103, 198, 146, 143, 135, 0, 123, 127, 164, 142,
	165, 128, 152, 151, 153, 330, 0, 157, 129, 0,
	0, 0, 0, 0, 186, 205, 217, 218, 0, 0,
	0, 213, 0, 0, 0, 154, 109, 130, 180, 134,
	141, 171, 215, 0, 176, 113, 204, 182, 303, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	317, 327, 323, 324, 321, 322, 320, 319, 318, 329,
	308, 309, 310, 311, 313, 0, 131, 228, 229, 312,
	97, 105, 138, 0, 214, 0, 170, 124, 206, 161,
	0, 0, 98, 0, 0, 273, 0, 0, 0, 122,
	269, 0, 0, 177, 136, 226, 227, 315, 139, 316,
	0, 185, 149, 0, 325, 110, 0, 306, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 545,
	270, 294, 272, 292, 296, 297, 298, 299, 0, 0,
	111, 295, 300, 301, 302, 0, 0, 0, 0, 267,
	285, 0, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 0, 0,
	0, 0, 328, 0, 284, 0, 0, 280, 281, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 145, 212, 0, 0, 326, 168, 0, 114,
	0, 191, 126, 0, 137, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 175, 162, 203, 0, 163, 173,
	140, 195, 169, 202, 0, 193, 211, 178, 106, 156,
	96, 167, 174, 0, 115, 0, 219, 220, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 183, 99, 192, 201, 112, 179,
	102, 199, 188, 190, 147, 132, 133, 181, 100, 101,
	0, 172, 121, 166, 125, 120, 159, 189, 150, 196,
	197, 117, 216, 119, 118, 187, 107, 209, 210, 104,
	108, 208, 155, 160, 158, 207, 194, 200, 148, 144,
	0, 103, 198, 146, 143, 135, 0, 123, 127, 164,
	142, 165, 128, 152, 151, 153, 330, 0, 157, 129,
	0, 0, 0, 0, 0, 186, 205, 217, 218, 0,
	0, 0, 213, 0, 0, 0, 154, 109, 130, 180,
	134, 141, 171, 215, 0, 176, 113, 204, 182, 303,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 317, 327, 323, 324, 321, 322, 320, 319, 318,
	329, 308, 309, 310, 311, 313, 0, 131, 228, 229,
	312, 97, 105, 138, 0, 214, 0, 170, 124, 206,
	161, 0, 0, 98, 0, 0, 273, 0, 0, 0,
	122, 269, 0, 0, 177, 136, 226, 227, 315, 139,
	316, 0, 185, 149, 0, 325, 110, 0, 306, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 270, 294, 272, 292, 296, 297, 298, 299, 0,
	0, 111, 295, 300, 301, 302, 0, 0, 0, 0,
	267, 285, 0, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 263,
	0, 0, 0, 328, 0, 284, 0, 0, 280, 281,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 145, 212, 0, 0, 326, 168, 0,
	114, 0, 191, 126, 0, 137, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 175, 162, 203, 0, 163,
	173, 140, 195, 169, 202, 0, 193, 211, 178, 106,
	156, 96, 167, 174, 0, 115, 0, 219, 220, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 183, 99, 192, 201, 112,
	179, 102, 199, 188, 190, 147, 132, 133, 181, 100,
	101, 0, 172, 121, 166, 125, 120, 159, 189, 150,
	196, 197, 117, 216, 119, 118, 187, 107, 209, 210,
	104, 108, 208, 155, 160, 158, 207, 194, 200, 148,
	144, 0, 103, 198, 146, 143, 135, 0, 123, 127,
	164, 142, 165, 128, 152, 151, 153, 330, 0, 157,
	129, 0, 0, 0, 0, 0, 186, 205, 217, 218,
	0, 0, 0, 213, 0, 0, 0, 154, 109, 130,
	180, 134, 141, 171, 215, 0, 176, 113, 204, 182,
	303, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 327, 323, 324, 321, 322, 320, 319,
	318, 329, 308, 309, 310, 311, 313, 0, 131, 228,
	229, 312, 97, 105, 138, 0, 214, 0, 170, 124,
	206, 161, 0, 0, 98, 0, 0, 273, 0, 0,
	0, 122, 269, 0, 0, 177, 136, 226, 227, 315,
	139, 316, 0, 185, 149, 0, 325, 110, 0, 306,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 270, 294, 272, 292, 296, 297, 298, 299,
	0, 0, 111, 295, 300, 301, 302, 0, 0, 0,
	0, 267, 285, 0, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	0, 0, 0, 0, 328, 0, 284, 0, 0, 926,
	281, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 212, 0, 0, 326, 168,
	0, 114, 0, 191, 126, 0, 137, 0, 0, 0,
	0, 0, 0, 0, 928, 0, 175, 162, 203, 0,
	163, 173, 140, 195, 169, 202, 0, 193, 211, 178,
	106, 156, 96, 167, 174, 0, 115, 0, 219, 220,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 183, 99, 192, 201,
	112, 179, 937, 943, 941, 190, 147, 938, 133, 181,
	936, 101, 0, 945, 121, 166, 944, 930, 940, 942,
	939, 934, 197, 929, 216, 947, 946, 948, 927, 950,
	210, 104, 108, 954, 951, 953, 952, 207, 949, 200,
	148, 144, 0, 103, 198, 146, 143, 931, 932, 123,
	127, 164, 142, 165, 128, 152, 151, 153, 330, 0,
	157, 129, 0, 0, 0, 0, 0, 933, 935, 217,
	218, 0, 0, 0, 213, 0, 0, 0, 154, 109,
	130, 180, 134, 141, 171, 215, 0, 176, 113, 204,
	182, 303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 317, 327, 323, 324, 321, 322, 320,
	319, 318, 329, 308, 309, 310, 311, 313, 0, 131,
	228, 229, 312, 97, 105, 138, 0, 214, 0, 170,
	124, 206, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 0, 177, 98, 0, 0,
	273, 0, 0, 0, 122, 269, 0, 325, 110, 136,
	226, 227, 315, 139, 316, 0, 185, 149, 0, 0,
	0, 0, 306, 307, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 270, 294, 272, 292, 296,
	297, 298, 299, 0, 0, 111, 295, 300, 301, 302,
	0, 0, 0, 0, 267, 285, 0, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 0, 0, 0, 0, 328, 0, 284,
	0, 0, 280, 281, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 145, 212, 0,
	0, 326, 168, 0, 114, 0, 191, 126, 0, 137,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 175,
	162, 203, 0, 163, 173, 140, 195, 169, 202, 0,
	193, 211, 178, 106, 156, 96, 167, 174, 0, 115,
	0, 219, 220, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 183,
	99, 192, 201, 112, 179, 102, 199, 188, 190, 147,
	132, 133, 181, 100, 101, 0, 172, 121, 166, 125,
	120, 159, 189, 150, 196, 197, 117, 216, 119, 118,
	187, 107, 209, 210, 104, 108, 208, 155, 160, 158,
	207, 194, 200, 148, 144, 0, 103, 198, 146, 143,
	135, 0, 123, 127, 164, 142, 165, 128, 152, 151,
	153, 330, 0, 157, 129, 0, 0, 0, 0, 0,
	186, 205, 217, 218, 0, 0, 0, 213, 0, 0,
	0, 154, 109, 130, 180, 134, 141, 171, 215, 0,
	176, 113, 204, 182, 303, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 317, 327, 323, 324,
	321, 322, 320, 319, 318, 329, 308, 309, 310, 311,
	313, 0, 131, 228, 229, 312, 97, 105, 138, 0,
	214, 0, 170, 124, 206, 161, 0, 0, 98, 0,
	0, 273, 0, 0, 0, 122, 269, 0, 0, 177,
	136, 226, 227, 315, 139, 316, 0, 185, 149, 0,
	325, 110, 0, 306, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 270, 294, 272, 292,
	296, 297, 298, 299, 0, 0, 111, 295, 300, 301,
	302, 0, 0, 0, 0, 267, 285, 0, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 283, 0, 0, 0, 0, 328, 0,
	284, 0, 0, 280, 281, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 145, 212,
	0, 0, 326, 168, 0, 114, 0, 191, 126, 0,
	137, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	175, 162, 203, 0, 163, 173, 140, 195, 169, 202,
	0, 193, 211, 178, 106, 156, 96, 167, 174, 0,
	115, 0, 219, 220, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	183, 99, 192, 201, 112, 179, 102, 199, 188, 190,
	147, 132, 133, 181, 100, 101, 0, 172, 121, 166,
	125, 120, 159, 189, 150, 196, 197, 117, 216, 119,
	118, 187, 107, 209, 210, 104, 108, 208, 155, 160,
	158, 207, 194, 200, 148, 144, 0, 103, 198, 146,
	143, 135, 0, 123, 127, 164, 142, 165, 128, 152,
	151, 153, 330, 0, 157, 129, 0, 0, 0, 0,
	0, 186, 205, 217, 218, 0, 0, 0, 213, 0,
	0, 0, 154, 109, 130, 180, 134, 141, 171, 215,
	0, 176, 113, 204, 182, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 317, 327, 323,
	324, 321, 322, 320, 319, 318, 329, 308, 309, 310,
	311, 313, 0, 131, 228, 229, 312, 97, 105, 138,
	0, 214, 0, 170, 124, 206, 161, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 122, 0, 0, 0,
	177, 136, 226, 227, 315, 139, 316, 0, 185, 149,
	0, 325, 110, 0, 306, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 270, 294, 272,
	292, 296, 297, 298, 299, 0, 0, 111, 295, 300,
	301, 302, 0, 0, 0, 0, 0, 285, 0, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 0, 0, 0, 0, 328,
	0, 284, 0, 0, 280, 281, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 145,
	212, 0, 0, 326, 168, 0, 114, 0, 191, 126,
	0, 137, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 175, 162, 203, 2122, 163, 173, 140, 195, 169,
	202, 0, 193, 211, 178, 106, 156, 96, 167, 174,
	0, 115, 0, 219, 220, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 183, 99, 192, 201, 112, 179, 102, 199, 188,
	190, 147, 132, 133, 181, 100, 101, 0, 172, 121,
	166, 125, 120, 159, 189, 150, 196, 197, 117, 216,
	119, 118, 187, 107, 209, 210, 104, 108, 208, 155,
	160, 158, 207, 194, 200, 148, 144, 0, 103, 198,
	146, 143, 135, 0, 123, 127, 164, 142, 165, 128,
	152, 151, 153, 330, 0, 157, 129, 0, 0, 0,
	0, 0, 186, 205, 217, 218, 0, 0, 0, 213,
	0, 0, 0, 154, 109, 130, 180, 134, 141, 171,
	215, 0, 176, 113, 204, 182, 303, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 317, 327,
	323, 324, 321, 322, 320, 319, 318, 329, 308, 309,
	310, 311, 313, 0, 131, 228, 229, 312, 97, 105,
	138, 0, 214, 0, 170, 124, 206, 161, 0, 0,
	98, 0, 0, 273, 0, 0, 0, 122, 0, 0,
	0, 177, 136, 226, 227, 315, 139, 316, 0, 185,
	149, 0, 325, 110, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 270, 294,
	272, 292, 296, 297, 298, 299, 0, 0, 111, 295,
	300, 301, 302, 0, 0, 0, 0, 0, 285, 0,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 0, 0, 0, 0,
	328, 0, 284, 0, 0, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	145, 212, 0, 0, 326, 168, 0, 114, 0, 191,
	126, 0, 137, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 175, 162, 203, 0, 163, 173, 140, 195,
	169, 202, 0, 193, 211, 178, 106, 156, 96, 167,
	174, 0, 115, 0, 219, 220, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 183, 99, 192, 201, 112, 179, 102, 199,
	188, 190, 147, 132, 133, 181, 100, 101, 0, 172,
	121, 166, 125, 120, 159, 189, 150, 196, 197, 117,
	216, 119, 118, 187, 107, 209, 210, 104, 108, 208,
	155, 160, 158, 207, 194, 200, 148, 144, 0, 103,
	198, 146, 143, 135, 0, 123, 127, 164, 142, 165,
	128, 152, 151, 153, 330, 0, 157, 129, 0, 0,
	0, 0, 0, 186, 205, 217, 218, 0, 0, 0,
	213, 0, 0, 0, 154, 109, 130, 180, 134, 141,
	171, 215, 0, 176, 113, 204, 182, 303, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 317,
	327, 323, 324, 321, 322, 320, 319, 318, 329, 308,
	309, 310, 311, 313, 0, 131, 228, 229, 312, 97,
	105, 138, 0, 214, 0, 170, 124, 206, 161, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 0, 177, 136, 226, 227, 315, 139, 316, 0,
	185, 149, 0, 325, 110, 0, 306, 307, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 270,
	294, 272, 292, 296, 297, 298, 299, 0, 0, 111,
	295, 300, 301, 302, 0, 0, 0, 0, 0, 285,
	0, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 0, 0, 0,
	0, 328, 0, 284, 0, 0, 280, 281, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 212, 0, 0, 326, 168, 0, 114, 0,
	191, 126, 0, 137, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 175, 162, 203, 0, 163, 173, 140,
	195, 169, 202, 0, 193, 211, 178, 106, 156, 96,
	167, 174, 0, 115, 0, 219, 220, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 183, 99, 192, 201, 112, 179, 102,
	199, 188, 190, 147, 132, 133, 181, 100, 101, 0,
	172, 121, 166, 125, 120, 159, 189, 150, 196, 197,
	117, 216, 119, 118, 187, 107, 209, 210, 104, 108,
	208, 155, 160, 158, 207, 194, 200, 148, 144, 0,
	103, 198, 146, 143, 135, 0, 123, 127, 164, 142,
	165, 128, 152, 151, 153, 330, 0, 157, 129, 0,
	0, 0, 0, 0, 186, 205, 217, 218, 0, 0,
	0, 213, 0, 0, 0, 154, 109, 130, 180, 134,
	141, 171, 215, 0, 176, 113, 204, 182, 303, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	317, 327, 323, 324, 321, 322, 320, 319, 318, 329,
	308, 309, 310, 311, 313, 0, 131, 228, 229, 312,
	97, 105, 138, 0, 214, 0, 170, 124, 206, 161,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 122,
	0, 0, 0, 177, 136, 226, 227, 315, 139, 316,
	0, 185, 149, 0, 325, 110, 0, 306, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 1184, 0, 0,
	270, 294, 272, 292, 296, 297, 298, 299, 0, 0,
	111, 295, 300, 301, 302, 0, 0, 0, 0, 0,
	285, 0, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 0, 0,
	0, 0, 328, 0, 284, 0, 0, 280, 281, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 145, 212, 0, 0, 326, 168, 0, 114,
	0, 191, 126, 0, 137, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 175, 162, 203, 0, 163, 173,
	140, 195, 169, 202, 0, 193, 211, 178, 106, 156,
	96, 167, 174, 0, 115, 0, 219, 220, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 183, 99, 192, 201, 112, 179,
	102, 199, 188, 190, 147, 132, 133, 181, 100, 101,
	0, 172, 121, 166, 125, 120, 159, 189, 150, 196,
	197, 117, 216, 119, 118, 187, 107, 209, 210, 104,
	108, 208, 155, 160, 158, 207, 194, 200, 148, 144,
	0, 103, 198, 146, 143, 135, 0, 123, 127, 164,
	142, 165, 128, 152, 151, 153, 330, 0, 157, 129,
	0, 0, 0, 0, 0, 186, 205, 217, 218, 0,
	0, 0, 213, 0, 0, 0, 154, 109, 130, 180,
	134, 141, 171, 215, 0, 176, 113, 204, 182, 303,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 317, 327, 323, 324, 321, 322, 320, 319, 318,
	329, 308, 309, 310, 311, 313, 0, 131, 228, 229,
	312, 97, 105, 138, 0, 214, 0, 170, 124, 206,
	161, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 177, 136, 226, 227, 0, 139,
	0, 0, 185, 149, 0, 325, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 0,
	0, 270, 0, 1288, 1289, 1290, 1291, 0, 0, 0,
	0, 111, 1294, 1292, 301, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 145, 212, 0, 0, 0, 168, 0,
	114, 0, 191, 126, 0, 137, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 175, 162, 203, 0, 163,
	173, 140, 195, 169, 202, 0, 193, 211, 178, 106,
	156, 96, 167, 174, 0, 115, 0, 219, 220, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 183, 99, 192, 201, 112,
	179, 102, 199, 188, 190, 147, 132, 133, 181, 100,
	101, 0, 172, 121, 166, 125, 120, 159, 189, 150,
	196, 197, 117, 216, 119, 118, 187, 107, 209, 210,
	104, 108, 208, 155, 160, 158, 207, 194, 200, 148,
	144, 0, 103, 198, 146, 143, 135, 0, 123, 127,
	164, 142, 165, 128, 152, 151, 153, 0, 0, 1296,
	1301, 0, 0, 0, 0, 0, 186, 205, 217, 218,
	0, 0, 0, 213, 0, 0, 0, 154, 109, 130,
	180, 134, 141, 171, 215, 0, 176, 113, 204, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1298, 0, 1300, 1299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 228,
	229, 0, 97, 105, 138, 0, 214, 0, 170, 124,
	206, 161, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 122, 0, 0, 0, 177, 136, 226, 227, 0,
	139, 0, 0, 185, 149, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1286,
	0, 0, 270, 0, 1288, 1289, 1290, 1291, 0, 0,
	0, 0, 111, 1294, 1292, 301, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 212, 0, 0, 0, 168,
	0, 114, 0, 191, 126, 0, 137, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 175, 162, 203, 0,
	163, 173, 140, 195, 169, 202, 0, 193, 211, 178,
	106, 156, 96, 167, 174, 0, 115, 0, 219, 220,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 183, 99, 192, 201,
	112, 179, 102, 199, 188, 190, 147, 132, 133, 181,
	100, 101, 0, 172, 121, 166, 125, 120, 159, 189,
	150, 196, 197, 117, 216, 119, 118, 187, 107, 209,
	210, 104, 108, 208, 155, 160, 158, 207, 194, 200,
	148, 144, 0, 103, 198, 146, 143, 135, 0, 123,
	127, 164, 142, 165, 128, 152, 151, 153, 0, 0,
	1296, 1301, 0, 0, 0, 0, 0, 186, 205, 217,
	218, 0, 0, 0, 213, 0, 0, 0, 154, 109,
	130, 180, 134, 141, 171, 215, 0, 176, 113, 204,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 0, 0, 98, 0, 0, 0, 0,
	0, 0, 122, 1298, 0, 1300, 1299, 136, 226, 227,
	0, 139, 0, 0, 185, 149, 0, 0, 0, 131,
	228, 229, 0, 97, 105, 138, 0, 214, 0, 170,
	124, 206, 0, 358, 294, 906, 292, 296, 297, 298,
	299, 0, 0, 111, 295, 300, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 145, 212, 0, 0, 0,
	168, 0, 114, 0, 191, 126, 0, 137, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 175, 162, 203,
	0, 163, 173, 140, 195, 169, 202, 0, 193, 211,
	178, 106, 156, 96, 167, 174, 0, 115, 0, 219,
	220, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 183, 99, 192,
	201, 112, 179, 102, 199, 188, 190, 147, 132, 133,
	181, 100, 101, 0, 172, 121, 166, 125, 120, 159,
	189, 150, 196, 197, 117, 216, 119, 118, 187, 107,
	209, 210, 104, 108, 208, 155, 160, 158, 207, 194,
	200, 148, 144, 0, 103, 198, 146, 143, 135, 0,
	123, 127, 164, 142, 165, 128, 152, 151, 153, 0,
	0, 157, 129, 0, 0, 0, 0, 0, 186, 205,
	217, 218, 0, 0, 0, 213, 0, 0, 0, 154,
	109, 130, 180, 134, 141, 171, 215, 0, 176, 113,
	204, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 750, 0, 136,
	226, 227, 0, 139, 0, 0, 185, 149, 0, 0,
	131, 228, 229, 0, 97, 105, 138, 0, 214, 0,
	170, 124, 206, 1803, 0, 358, 0, 1801, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 1800, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1799, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 145, 212, 0,
	0, 0, 168, 0, 114, 0, 191, 126, 0, 137,
	0, 0, 0, 0, 0, 0, 0, 751, 0, 175,
	162, 203, 0, 163, 173, 140, 195, 169, 202, 0,
	193, 211, 178, 106, 156, 96, 167, 174, 0, 115,
	0, 219, 220, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 183,
	99, 192, 201, 112, 179, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 0, 777, 778, 166, 779,
	780, 781, 783, 782, 752, 753, 754, 758, 756, 755,
	757, 729, 731, 210, 727, 730, 736, 732, 733, 734,
	748, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 749, 759, 760, 761, 762, 763, 764, 765,
	766, 0, 0, 157, 129, 0, 0, 0, 0, 0,
	186, 205, 217, 218, 0, 0, 0, 213, 0, 0,
	0, 154, 109, 130, 180, 134, 141, 171, 215, 0,
	176, 113, 204, 182, 161, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 750, 0, 136,
	226, 227, 0, 139, 0, 0, 185, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 228, 229, 358, 97, 728, 138, 0,
	214, 0, 170, 124, 206, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 900, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 145, 212, 0,
	0, 0, 168, 0, 114, 0, 191, 126, 0, 137,
	0, 0, 0, 0, 0, 0, 0, 751, 0, 175,
	162, 203, 0, 163, 173, 140, 195, 169, 202, 0,
	193, 211, 178, 106, 156, 96, 167, 174, 0, 115,
	0, 219, 220, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 183,
	99, 192, 201, 112, 179, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 0, 777, 778, 166, 779,
	780, 781, 783, 782, 752, 898, 754, 758, 756, 755,
	757, 729, 731, 210, 727, 897, 736, 732, 733, 734,
	748, 901, 738, 739, 740, 741, 742, 743, 744, 745,
	902, 903, 749, 759, 760, 761, 762, 763, 764, 765,
	766, 0, 0, 157, 129, 899, 0, 0, 0, 0,
	186, 205, 217, 218, 0, 0, 0, 213, 0, 0,
	0, 154, 109, 130, 180, 134, 141, 171, 215, 0,
	176, 113, 204, 182, 161, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 750, 0, 136,
	226, 227, 0, 139, 0, 0, 185, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 228, 229, 358, 97, 728, 138, 0,
	214, 0, 170, 124, 206, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 145, 212, 0,
	0, 0, 168, 0, 114, 0, 191, 126, 0, 137,
	0, 0, 0, 0, 0, 0, 0, 751, 0, 175,
	162, 203, 0, 163, 173, 140, 195, 169, 202, 0,
	193, 211, 178, 106, 156, 96, 167, 174, 0, 115,
	0, 219, 220, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 1992, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 183,
	99, 192, 201, 112, 179, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 0, 777, 778, 166, 779,
	780, 781, 783, 782, 752, 753, 754, 758, 756, 755,
	757, 729, 731, 210, 727, 730, 736, 732, 733, 734,
	748, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 749, 759, 760, 761, 762, 763, 764, 765,
	766, 0, 0, 157, 129, 0, 0, 0, 0, 0,
	186, 205, 217, 218, 0, 0, 0, 213, 0, 0,
	0, 154, 109, 130, 180, 134, 141, 171, 215, 0,
	176, 113, 204, 182, 0, 0, 0, 0, 161, 0,
	0, 98, 0, 562, 0, 0, 0, 0, 122, 0,
	0, 0, 0, 136, 226, 227, 0, 139, 0, 0,
	185, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 228, 229, 0, 97, 728, 138, 358,
	214, 564, 170, 124, 206, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 559, 558, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 212, 0, 0, 0, 168, 0, 114, 0,
	191, 126, 0, 137, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 175, 162, 203, 0, 163, 173, 140,
	195, 169, 202, 0, 193, 211, 178, 106, 156, 96,
	167, 174, 0, 115, 0, 219, 220, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 183, 99, 192, 201, 112, 179, 102,
	199, 188, 190, 147, 132, 133, 181, 100, 101, 0,
	172, 121, 166, 125, 120, 159, 189, 150, 196, 197,
	117, 216, 119, 118, 187, 107, 209, 210, 104, 108,
	208, 155, 160, 158, 207, 194, 200, 148, 144, 0,
	103, 198, 146, 143, 135, 0, 123, 127, 164, 142,
	165, 128, 152, 151, 153, 0, 0, 157, 129, 0,
	0, 0, 0, 0, 186, 205, 217, 218, 0, 0,
	0, 213, 0, 0, 0, 154, 109, 130, 180, 134,
	141, 171, 215, 0, 176, 113, 204, 182, 161, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 750, 0, 136, 226, 227, 0, 139, 0, 0,
	185, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 228, 229, 358,
	97, 105, 138, 0, 214, 0, 170, 124, 206, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 735, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 212, 0, 0, 0, 168, 0, 114, 0,
	191, 126, 0, 137, 0, 0, 0, 0, 0, 0,
	0, 751, 0, 175, 162, 203, 0, 163, 173, 140,
	195, 169, 202, 0, 193, 211, 178, 106, 156, 96,
	167, 174, 0, 115, 0, 219, 220, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 183, 99, 192, 201, 112, 179, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 0,
	777, 778, 166, 779, 780, 781, 783, 782, 752, 753,
	754, 758, 756, 755, 757, 729, 731, 210, 727, 730,
	736, 732, 733, 734, 748, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 749, 759, 760, 761,
	762, 763, 764, 765, 766, 0, 0, 157, 129, 0,
	0, 0, 0, 0, 186, 205, 217, 218, 0, 0,
	0, 213, 0, 0, 0, 154, 109, 130, 180, 134,
	141, 171, 215, 0, 176, 113, 204, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	161, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 136, 226, 227, 0, 139,
	0, 0, 185, 149, 0, 0, 131, 228, 229, 0,
	97, 728, 138, 0, 214, 0, 170, 124, 206, 1803,
	0, 358, 0, 1801, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 0, 1800, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1799, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 145, 212, 0, 0, 0, 168, 0,
	114, 0, 191, 126, 0, 137, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 175, 162, 203, 0, 163,
	173, 140, 195, 169, 202, 0, 193, 211, 178, 106,
	156, 96, 167, 174, 0, 115, 0, 219, 220, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 183, 99, 192, 201, 112,
	179, 102, 199, 188, 190, 147, 132, 133, 181, 100,
	101, 0, 172, 121, 166, 125, 120, 159, 189, 150,
	196, 197, 117, 216, 119, 118, 187, 107, 209, 210,
	104, 108, 208, 155, 160, 158, 207, 194, 200, 148,
	144, 0, 103, 198, 146, 143, 135, 0, 123, 127,
	164, 142, 165, 128, 152, 151, 153, 0, 0, 157,
	129, 0, 0, 0, 0, 0, 186, 205, 217, 218,
	0, 0, 0, 213, 0, 0, 0, 154, 109, 130,
	180, 134, 141, 171, 215, 0, 176, 113, 204, 182,
	0, 0, 0, 0, 161, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 136,
	226, 227, 0, 139, 0, 0, 185, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 228,
	229, 0, 97, 105, 138, 358, 214, 491, 170, 124,
	206, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1036, 145, 212, 0,
	0, 0, 1031, 0, 1030, 0, 1032, 1033, 0, 137,
	0, 0, 1034, 1037, 0, 0, 0, 116, 0, 175,
	162, 203, 0, 163, 173, 140, 195, 169, 202, 0,
	193, 211, 178, 106, 156, 96, 167, 174, 0, 115,
	0, 219, 220, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 183,
	99, 192, 201, 112, 179, 102, 199, 188, 190, 147,
	132, 133, 181, 100, 101, 0, 172, 121, 166, 125,
	120, 159, 189, 150, 196, 197, 117, 216, 119, 118,
	187, 107, 209, 210, 104, 108, 208, 155, 160, 158,
	207, 194, 200, 148, 144, 0, 103, 198, 146, 143,
	135, 0, 123, 127, 164, 142, 165, 128, 152, 151,
	153, 0, 0, 157, 129, 0, 0, 0, 0, 0,
	186, 205, 217, 218, 0, 0, 0, 213, 0, 0,
	0, 154, 109, 130, 180, 134, 141, 171, 215, 0,
	176, 113, 204, 182, 0, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 136, 226, 227, 0, 139, 0, 0, 185,
	149, 0, 131, 228, 229, 0, 97, 105, 138, 0,
	214, 0, 170, 124, 206, 50, 0, 0, 93, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 111, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	145, 212, 0, 0, 0, 168, 0, 114, 0, 191,
	126, 0, 137, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 175, 162, 203, 0, 163, 173, 140, 195,
	169, 202, 0, 193, 211, 178, 106, 156, 96, 167,
	174, 0, 115, 0, 219, 220, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 183, 99, 192, 201, 112, 179, 102, 199,
	188, 190, 147, 132, 133, 181, 100, 101, 0, 172,
	121, 166, 125, 120, 159, 189, 150, 196, 197, 117,
	216, 119, 118, 187, 107, 209, 210, 104, 108, 208,
	155, 160, 158, 207, 194, 200, 148, 144, 0, 103,
	198, 146, 143, 135, 0, 123, 127, 164, 142, 165,
	128, 152, 151, 153, 0, 0, 157, 129, 0, 0,
	0, 0, 0, 186, 205, 217, 218, 0, 0, 0,
	213, 0, 0, 0, 154, 109, 130, 180, 134, 141,
	171, 215, 0, 176, 113, 204, 182, 0, 0, 0,
	0, 161, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 122, 0, 0, 0, 0, 136, 226, 227, 0,
	139, 0, 0, 185, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 228, 229, 0, 97,
	105, 138, 93, 214, 95, 170, 124, 206, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 212, 0, 0, 0, 168,
	0, 114, 0, 191, 126, 0, 137, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 175, 162, 203, 0,
	163, 173, 140, 195, 169, 202, 0, 193, 211, 178,
	106, 156, 96, 167, 174, 0, 115, 0, 219, 220,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 183, 99, 192, 201,
	112, 179, 102, 199, 188, 190, 147, 132, 133, 181,
	100, 101, 0, 172, 121, 166, 125, 120, 159, 189,
	150, 196, 197, 117, 216, 119, 118, 187, 107, 209,
	210, 104, 108, 208, 155, 160, 158, 207, 194, 200,
	148, 144, 0, 103, 198, 146, 143, 135, 0, 123,
	127, 164, 142, 165, 128, 152, 151, 153, 0, 0,
	157, 129, 0, 0, 0, 0, 0, 186, 205, 217,
	218, 0, 0, 0, 213, 0, 0, 0, 154, 109,
	130, 180, 134, 141, 171, 215, 0, 176, 113, 204,
	182, 0, 0, 0, 0, 161, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 122, 0, 0, 0, 0,
	136, 226, 227, 0, 139, 0, 0, 185, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	228, 229, 0, 97, 105, 138, 270, 214, 95, 170,
	124, 206, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 2077, 0, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 145, 212,
	0, 0, 0, 168, 0, 114, 0, 191, 126, 0,
	137, 0, 0, 0, 1488, 0, 0, 0, 116, 0,
	175, 162, 203, 0, 163, 173, 140, 195, 169, 202,
	0, 193, 211, 178, 106, 156, 96, 167, 174, 0,
	115, 0, 219, 220, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	183, 99, 192, 201, 112, 179, 102, 199, 188, 190,
	147, 132, 133, 181, 100, 101, 0, 172, 121, 166,
	125, 120, 159, 189, 150, 196, 197, 117, 216, 119,
	118, 187, 107, 209, 210, 104, 108, 208, 155, 160,
	158, 207, 194, 200, 148, 144, 0, 103, 198, 146,
	143, 135, 0, 123, 127, 164, 142, 165, 128, 152,
	151, 153, 0, 0, 157, 129, 0, 0, 0, 0,
	0, 186, 205, 217, 218, 0, 0, 0, 213, 0,
	0, 0, 154, 109, 130, 180, 134, 141, 171, 215,
	0, 176, 113, 204, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 0, 0, 136, 226, 227, 0, 139, 0, 0,
	185, 149, 0, 131, 228, 229, 0, 97, 105, 138,
	0, 214, 0, 170, 124, 206, 50, 0, 0, 93,
	0, 95, 0, 0, 0, 0, 0, 0, 0, 111,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 212, 0, 0, 0, 168, 0, 114, 0,
	191, 126, 0, 137, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 175, 162, 203, 0, 163, 173, 140,
	195, 169, 202, 0, 193, 211, 178, 106, 156, 96,
	167, 174, 0, 115, 0, 219, 220, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 183, 99, 192, 201, 112, 179, 102,
	199, 188, 190, 147, 132, 133, 181, 100, 101, 0,
	172, 121, 166, 125, 120, 159, 189, 150, 196, 197,
	117, 216, 119, 118, 187, 107, 209, 210, 104, 108,
	208, 155, 160, 158, 207, 194, 200, 148, 144, 0,
	103, 198, 146, 143, 135, 0, 123, 127, 164, 142,
	165, 128, 152, 151, 153, 0, 0, 157, 129, 0,
	0, 0, 0, 0, 186, 205, 217, 218, 0, 0,
	0, 213, 0, 0, 0, 154, 109, 130, 180, 134,
	141, 171, 215, 0, 176, 113, 204, 182, 0, 0,
	0, 0, 161, 0, 0, 98, 0, 692, 0, 0,
	0, 0, 122, 0, 0, 0, 0, 136, 226, 227,
	0, 139, 0, 0, 185, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 228, 229, 0,
	97, 105, 138, 93, 214, 694, 170, 124, 206, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 145, 212, 0, 0, 0,
	168, 0, 114, 0, 191, 126, 0, 137, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 175, 162, 203,
	0, 163, 173, 140, 195, 169, 202, 0, 193, 211,
	178, 106, 156, 96, 167, 174, 0, 115, 0, 219,
	220, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 183, 99, 192,
	201, 112, 179, 102, 199, 188, 190, 147, 132, 133,
	181, 100, 101, 0, 172, 121, 166, 125, 120, 159,
	189, 150, 196, 197, 117, 216, 119, 118, 187, 107,
	209, 210, 104, 108, 208, 155, 160, 158, 207, 194,
	200, 148, 144, 0, 103, 198, 146, 143, 135, 0,
	123, 127, 164, 142, 165, 128, 152, 151, 153, 0,
	0, 157, 129, 0, 0, 0, 0, 0, 186, 205,
	217, 218, 0, 0, 0, 213, 0, 0, 0, 154,
	109, 130, 180, 134, 141, 171, 215, 0, 176, 113,
	204, 182, 0, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 122, 0, 0, 0, 0,
	136, 226, 227, 0, 139, 0, 0, 185, 149, 0,
	131, 228, 229, 0, 97, 105, 138, 0, 214, 0,
	170, 124, 206, 50, 0, 0, 358, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 145, 212,
	0, 0, 0, 168, 0, 114, 0, 191, 126, 0,
	137, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	175, 162, 203, 0, 163, 173, 140, 195, 169, 202,
	0, 193, 211, 178, 106, 156, 96, 167, 174, 0,
	115, 0, 219, 220, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	183, 99, 192, 201, 112, 179, 102, 199, 188, 190,
	147, 132, 133, 181, 100, 101, 0, 172, 121, 166,
	125, 120, 159, 189, 150, 196, 197, 117, 216, 119,
	118, 187, 107, 209, 210, 104, 108, 208, 155, 160,
	158, 207, 194, 200, 148, 144, 0, 103, 198, 146,
	143, 135, 0, 123, 127, 164, 142, 165, 128, 152,
	151, 153, 0, 0, 157, 129, 0, 0, 0, 0,
	0, 186, 205, 217, 218, 0, 0, 0, 213, 0,
	0, 0, 154, 109, 130, 180, 134, 141, 171, 215,
	0, 176, 113, 204, 182, 0, 0, 0, 0, 161,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 122,
	0, 0, 0, 0, 136, 226, 227, 0, 139, 0,
	0, 185, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 228, 229, 0, 97, 105, 138,
	93, 214, 95, 170, 124, 206, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 145, 212, 0, 0, 0, 168, 0, 114,
	0, 191, 126, 0, 137, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 175, 162, 203, 0, 163, 173,
	140, 195, 169, 202, 0, 193, 211, 178, 106, 156,
	96, 167, 174, 0, 115, 0, 219, 220, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 183, 99, 192, 201, 112, 179,
	102, 199, 188, 190, 147, 132, 133, 181, 100, 101,
	0, 172, 121, 166, 125, 120, 159, 189, 150, 196,
	197, 117, 216, 119, 118, 187, 107, 209, 210, 104,
	108, 208, 155, 160, 158, 207, 194, 200, 148, 144,
	0, 103, 198, 146, 143, 135, 0, 123, 127, 164,
	142, 165, 128, 152, 151, 153, 0, 0, 157, 129,
	0, 0, 0, 0, 0, 186, 205, 217, 218, 0,
	0, 0, 213, 0, 0, 0, 154, 109, 130, 180,
	134, 141, 171, 215, 807, 176, 113, 204, 182, 161,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 122,
	0, 0, 0, 0, 136, 226, 227, 0, 139, 0,
	0, 185, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 786, 0, 131, 228, 229,
	358, 97, 105, 138, 0, 214, 0, 170, 124, 206,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 145, 212, 0, 0, 0, 168, 0, 114,
	0, 191, 126, 0, 137, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 175, 162, 203, 0, 163, 173,
	140, 195, 169, 202, 0, 193, 211, 178, 106, 156,
	96, 167, 174, 0, 115, 0, 219, 220, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 787, 184, 183, 99, 192, 201, 112, 179,
	102, 199, 188, 190, 147, 132, 133, 181, 100, 101,
	0, 172, 121, 166, 125, 120, 159, 189, 150, 196,
	197, 117, 216, 119, 118, 187, 107, 209, 210, 104,
	108, 208, 155, 160, 158, 207, 194, 200, 148, 144,
	0, 103, 198, 146, 143, 135, 0, 123, 127, 164,
	142, 165, 128, 152, 151, 153, 0, 0, 157, 129,
	0, 0, 0, 0, 0, 186, 205, 217, 218, 0,
	0, 0, 213, 0, 0, 0, 154, 109, 130, 180,
	134, 141, 171, 215, 0, 176, 113, 204, 182, 0,
	0, 0, 0, 161, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 122, 713, 0, 0, 0, 136, 226,
	227, 0, 139, 0, 0, 185, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 228, 229,
	0, 97, 105, 138, 358, 214, 712, 170, 124, 206,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 212, 0, 0,
	0, 168, 0, 114, 0, 191, 126, 0, 137, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 175, 162,
	203, 0, 163, 173, 140, 195, 169, 202, 0, 193,
	211, 178, 106, 156, 96, 167, 174, 0, 115, 0,
	219, 220, 221, 222, 223, 224, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 183, 99,
	192, 201, 112, 179, 102, 199, 188, 190, 147, 132,
	133, 181, 100, 101, 0, 172, 121, 166, 125, 120,
	159, 189, 150, 196, 197, 117, 216, 119, 118, 187,
	107, 209, 210, 104, 108, 208, 155, 160, 158, 207,
	194, 200, 148, 144, 0, 103, 198, 146, 143, 135,
	0, 123, 127, 164, 142, 165, 128, 152, 151, 153,
	0, 0, 157, 129, 0, 0, 0, 0, 0, 186,
	205, 217, 218, 0, 0, 0, 213, 0, 0, 0,
	154, 109, 130, 180, 134, 141, 171, 215, 0, 176,
	113, 204, 182, 0, 0, 0, 0, 161, 0, 0,
	98, 0, 692, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 136, 226, 227, 0, 139, 0, 0, 185,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 228, 229, 0, 97, 105, 138, 93, 214,
	694, 170, 124, 206, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	145, 212, 0, 0, 0, 168, 0, 114, 0, 191,
	126, 0, 137, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 175, 162, 203, 0, 690, 173, 140, 195,
	169, 202, 0, 193, 211, 178, 106, 156, 96, 167,
	174, 0, 115, 0, 219, 220, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 183, 99, 192, 201, 112, 179, 102, 199,
	188, 190, 147, 132, 133, 181, 100, 101, 0, 172,
	121, 166, 125, 120, 159, 189, 150, 196, 197, 117,
	216, 119, 118, 187, 107, 209, 210, 104, 108, 208,
	155, 160, 158, 207, 194, 200, 148, 144, 0, 103,
	198, 146, 143, 135, 0, 123, 127, 164, 142, 165,
	128, 152, 151, 153, 0, 0, 157, 129, 0, 0,
	0, 0, 0, 186, 205, 217, 218, 0, 0, 0,
	213, 0, 0, 0, 154, 109, 130, 180, 134, 141,
	171, 215, 0, 176, 113, 204, 182, 0, 0, 0,
	0, 161, 0, 0, 98, 0, 0, 0, 0, 0,
	670, 122, 0, 0, 0, 0, 136, 226, 227, 0,
	139, 0, 0, 185, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 228, 229, 0, 97,
	105, 138, 93, 214, 95, 170, 124, 206, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 212, 0, 0, 0, 168,
	0, 114, 0, 191, 126, 0, 137, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 175, 162, 203, 0,
	163, 173, 140, 195, 169, 202, 0, 193, 211, 178,
	106, 156, 96, 167, 174, 0, 115, 0, 219, 220,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 183, 99, 192, 201,
	112, 179, 102, 199, 188, 190, 147, 132, 133, 181,
	100, 101, 0, 172, 121, 166, 125, 120, 159, 189,
	150, 196, 197, 117, 216, 119, 118, 187, 107, 209,
	210, 104, 108, 208, 155, 160, 158, 207, 194, 200,
	148, 144, 0, 103, 198, 146, 143, 135, 0, 123,
	127, 164, 142, 165, 128, 152, 151, 153, 0, 0,
	157, 129, 0, 0, 0, 0, 0, 186, 205, 217,
	218, 0, 0, 0, 213, 0, 0, 0, 154, 109,
	130, 180, 134, 141, 171, 215, 0, 176, 113, 204,
	182, 0, 0, 0, 341, 0, 0, 0, 0, 0,
	0, 161, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 122, 0, 0, 0, 0, 136, 226, 227, 0,
	139, 0, 0, 185, 149, 0, 0, 0, 0, 131,
	228, 229, 0, 97, 105, 138, 0, 214, 0, 170,
	124, 206, 93, 0, 95, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 212, 0, 0, 0, 168,
	0, 114, 0, 191, 126, 0, 137, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 175, 162, 203, 0,
	163, 173, 140, 195, 169, 202, 0, 193, 211, 178,
	106, 156, 96, 167, 174, 0, 115, 0, 219, 220,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 183, 99, 192, 201,
	112, 179, 102, 199, 188, 190, 147, 132, 133, 181,
	100, 101, 0, 172, 121, 166, 125, 120, 159, 189,
	150, 196, 197, 117, 216, 119, 118, 187, 107, 209,
	210, 104, 108, 208, 155, 160, 158, 207, 194, 200,
	148, 144, 0, 103, 198, 146, 143, 135, 0, 123,
	127, 164, 142, 165, 128, 152, 151, 153, 0, 0,
	157, 129, 0, 0, 0, 0, 0, 186, 205, 217,
	218, 0, 0, 0, 213, 0, 0, 0, 154, 109,
	130, 180, 134, 141, 171, 215, 0, 176, 113, 204,
	182, 0, 0, 0, 0, 161, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 122, 0, 0, 0, 0,
	136, 226, 227, 0, 139, 0, 0, 185, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	228, 229, 0, 97, 105, 138, 93, 214, 95, 170,
	124, 206, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 145, 212,
	0, 0, 0, 168, 0, 114, 0, 191, 126, 0,
	137, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	175, 162, 203, 0, 163, 173, 140, 195, 169, 202,
	0, 193, 211, 178, 106, 156, 96, 167, 174, 0,
	115, 0, 219, 220, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	183, 99, 192, 201, 112, 179, 102, 199, 188, 190,
	147, 132, 133, 181, 100, 101, 0, 172, 121, 166,
	125, 120, 159, 189, 150, 196, 197, 117, 216, 119,
	118, 187, 107, 209, 210, 104, 108, 208, 155, 160,
	158, 207, 194, 200, 148, 144, 0, 103, 198, 146,
	143, 135, 0, 123, 127, 164, 142, 165, 128, 152,
	151, 153, 0, 0, 157, 129, 0, 0, 0, 0,
	0, 186, 205, 217, 218, 0, 0, 0, 213, 0,
	0, 0, 154, 109, 130, 180, 134, 141, 171, 215,
	0, 176, 113, 204, 182, 0, 0, 0, 0, 161,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 122,
	0, 0, 0, 0, 136, 226, 227, 0, 139, 0,
	0, 185, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 228, 229, 0, 97, 105, 138,
	93, 214, 95, 170, 124, 206, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 145, 212, 0, 0, 0, 168, 0, 114,
	0, 191, 126, 0, 137, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 175, 162, 203, 0, 163, 173,
	140, 195, 169, 202, 0, 193, 211, 178, 106, 156,
	96, 167, 174, 0, 115, 0, 219, 220, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 183, 99, 192, 201, 112, 179,
	102, 199, 188, 190, 147, 132, 133, 181, 100, 101,
	0, 172, 121, 166, 125, 120, 159, 189, 150, 196,
	197, 117, 216, 119, 118, 187, 107, 209, 210, 104,
	108, 208, 155, 160, 158, 207, 194, 200, 148, 144,
	0, 103, 198, 146, 143, 135, 0, 123, 127, 164,
	142, 165, 128, 152, 151, 153, 0, 0, 157, 129,
	0, 0, 0, 0, 0, 186, 205, 217, 218, 0,
	0, 0, 213, 0, 0, 0, 154, 109, 130, 180,
	134, 141, 171, 215, 0, 176, 113, 204, 182, 161,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 122,
	0, 0, 0, 0, 136, 226, 227, 0, 139, 0,
	0, 185, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 228, 229,
	358, 97, 105, 138, 0, 214, 0, 170, 124, 206,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 145, 212, 0, 0, 0, 168, 0, 114,
	0, 191, 126, 0, 137, 0, 0, 0, 1488, 0,
	0, 0, 116, 0, 175, 162, 203, 0, 163, 173,
	140, 195, 169, 202, 0, 193, 211, 178, 106, 156,
	96, 167, 174, 0, 115, 0, 219, 220, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 183, 99, 192, 201, 112, 179,
	102, 199, 188, 190, 147, 132, 133, 181, 100, 101,
	0, 172, 121, 166, 125, 120, 159, 189, 150, 196,
	197, 117, 216, 119, 118, 187, 107, 209, 210, 104,
	108, 208, 155, 160, 158, 207, 194, 200, 148, 144,
	0, 103, 198, 146, 143, 135, 0, 123, 127, 164,
	142, 165, 128, 152, 151, 153, 0, 0, 157, 129,
	0, 0, 0, 0, 0, 186, 205, 217, 218, 0,
	0, 0, 213, 0, 0, 0, 154, 109, 130, 180,
	134, 141, 171, 215, 0, 176, 113, 204, 182, 161,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 122,
	0, 0, 0, 0, 136, 226, 227, 0, 139, 0,
	0, 185, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 228, 229,
	358, 97, 105, 138, 0, 214, 0, 170, 124, 206,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 145, 212, 0, 0, 0, 168, 0, 114,
	0, 191, 126, 0, 137, 0, 0, 0, 1562, 0,
	0, 0, 116, 0, 175, 162, 203, 0, 163, 173,
	140, 195, 169, 202, 0, 193, 211, 178, 106, 156,
	96, 167, 174, 0, 115, 0, 219, 220, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 183, 99, 192, 201, 112, 179,
	102, 199, 188, 190, 147, 132, 133, 181, 100, 101,
	0, 172, 121, 166, 125, 120, 159, 189, 150, 196,
	197, 117, 216, 119, 118, 187, 107, 209, 210, 104,
	108, 208, 155, 160, 158, 207, 194, 200, 148, 144,
	0, 103, 198, 146, 143, 135, 0, 123, 127, 164,
	142, 165, 128, 152, 151, 153, 0, 0, 157, 129,
	0, 0, 0, 0, 0, 186, 205, 217, 218, 0,
	0, 0, 213, 0, 0, 0, 154, 109, 130, 180,
	134, 141, 171, 215, 0, 176, 113, 204, 182, 0,
	0, 0, 0, 161, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 122, 0, 0, 0, 0, 136, 226,
	227, 0, 139, 0, 0, 185, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 228, 229,
	0, 97, 105, 138, 270, 214, 95, 170, 124, 206,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 212, 0, 0,
	0, 168, 0, 114, 0, 191, 126, 0, 137, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 175, 162,
	203, 0, 163, 173, 140, 195, 169, 202, 0, 193,
	211, 178, 106, 156, 96, 167, 174, 0, 115, 0,
	219, 220, 221, 222, 223, 224, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 183, 99,
	192, 201, 112, 179, 102, 199, 188, 190, 147, 132,
	133, 181, 100, 101, 0, 172, 121, 166, 125, 120,
	159, 189, 150, 196, 197, 117, 216, 119, 118, 187,
	107, 209, 210, 104, 108, 208, 155, 160, 158, 207,
	194, 200, 148, 144, 0, 103, 198, 146, 143, 135,
	0, 123, 127, 164, 142, 165, 128, 152, 151, 153,
	0, 0, 157, 129, 0, 0, 0, 0, 0, 186,
	205, 217, 218, 0, 0, 0, 213, 0, 0, 0,
	154, 109, 130, 180, 134, 141, 171, 215, 0, 176,
	113, 204, 182, 0, 0, 0, 0, 161, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 136, 226, 227, 0, 139, 0, 0, 185,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 228, 229, 0, 97, 105, 138, 93, 214,
	694, 170, 124, 206, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	145, 212, 0, 0, 0, 168, 0, 114, 0, 191,
	126, 0, 137, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 175, 162, 203, 0, 163, 173, 140, 195,
	169, 202, 0, 193, 211, 178, 106, 156, 96, 167,
	174, 0, 115, 0, 219, 220, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 183, 99, 192, 201, 112, 179, 102, 199,
	188, 190, 147, 132, 133, 181, 100, 101, 0, 172,
	121, 166, 125, 120, 159, 189, 150, 196, 197, 117,
	216, 119, 118, 187, 107, 209, 210, 104, 108, 208,
	155, 160, 158, 207, 194, 200, 148, 144, 0, 103,
	198, 146, 143, 135, 0, 123, 127, 164, 142, 165,
	128, 152, 151, 153, 0, 0, 157, 129, 0, 0,
	0, 0, 0, 186, 205, 217, 218, 0, 0, 0,
	213, 0, 0, 0, 154, 109, 130, 180, 134, 141,
	171, 215, 0, 176, 113, 204, 182, 161, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 136, 226, 227, 0, 139, 0, 0, 185,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 228, 229, 358, 97,
	105, 138, 0, 214, 0, 170, 124, 206, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	145, 212, 0, 0, 0, 168, 0, 114, 0, 191,
	126, 0, 137, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 175, 162, 203, 0, 163, 173, 140, 195,
	169, 202, 0, 193, 211, 178, 106, 156, 96, 167,
	174, 0, 115, 0, 219, 220, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 183, 99, 192, 201, 112, 179, 102, 199,
	188, 190, 147, 132, 133, 181, 100, 101, 0, 172,
	121, 166, 125, 120, 159, 189, 150, 196, 197, 117,
	216, 119, 118, 187, 107, 209, 210, 104, 108, 208,
	155, 160, 158, 207, 194, 200, 148, 144, 0, 103,
	198, 146, 143, 135, 0, 123, 127, 164, 142, 165,
	128, 152, 151, 153, 0, 0, 157, 129, 0, 0,
	0, 0, 0, 186, 205, 217, 218, 0, 0, 0,
	213, 0, 0, 0, 154, 109, 130, 180, 134, 141,
	171, 215, 0, 176, 113, 204, 182, 0, 0, 0,
	0, 161, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 122, 0, 0, 0, 0, 136, 226, 227, 0,
	139, 0, 0, 185, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 228, 229, 0, 97,
	105, 138, 358, 214, 564, 170, 124, 206, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 586, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 212, 0, 0, 0, 168,
	0, 114, 0, 191, 126, 0, 137, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 175, 162, 203, 0,
	163, 173, 140, 195, 169, 202, 0, 193, 211, 178,
	106, 156, 96, 167, 174, 0, 115, 0, 219, 220,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 183, 99, 192, 201,
	112, 179, 102, 199, 188, 190, 147, 132, 133, 181,
	100, 101, 0, 172, 121, 166, 125, 120, 159, 189,
	150, 196, 197, 117, 216, 119, 118, 187, 107, 209,
	210, 104, 108, 208, 155, 160, 158, 207, 194, 200,
	148, 144, 0, 103, 198, 146, 143, 135, 0, 123,
	127, 164, 142, 165, 128, 152, 151, 153, 0, 0,
	157, 129, 0, 0, 0, 0, 0, 186, 205, 217,
	218, 0, 0, 0, 213, 0, 0, 0, 154, 109,
	130, 180, 134, 141, 171, 215, 0, 176, 113, 204,
	182, 161, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 122, 0, 0, 0, 0, 136, 226, 227, 0,
	139, 0, 0, 185, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	228, 229, 358, 97, 105, 138, 0, 214, 0, 170,
	124, 206, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 212, 0, 0, 498, 168,
	0, 114, 0, 191, 126, 0, 137, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 175, 162, 203, 0,
	163, 173, 140, 195, 169, 202, 0, 193, 211, 178,
	106, 156, 96, 167, 174, 0, 115, 0, 219, 220,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 183, 99, 192, 201,
	112, 179, 102, 199, 188, 190, 147, 132, 133, 181,
	100, 101, 0, 172, 121, 166, 125, 120, 159, 189,
	150, 196, 197, 117, 216, 119, 118, 187, 107, 209,
	210, 104, 108, 208, 155, 160, 158, 207, 194, 200,
	148, 144, 0, 103, 198, 146, 143, 135, 0, 123,
	127, 164, 142, 165, 128, 152, 151, 153, 0, 0,
	157, 129, 0, 0, 0, 0, 0, 186, 205, 217,
	218, 0, 0, 0, 213, 0, 0, 0, 154, 109,
	130, 180, 134, 141, 171, 215, 0, 176, 113, 204,
	182, 0, 0, 0, 0, 161, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 122, 0, 0, 0, 0,
	136, 226, 227, 0, 139, 0, 0, 185, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	228, 229, 0, 97, 105, 138, 358, 214, 491, 170,
	124, 206, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 145, 212,
	0, 0, 0, 168, 0, 114, 0, 191, 126, 0,
	137, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	175, 162, 203, 0, 163, 173, 140, 195, 169, 202,
	0, 193, 211, 178, 106, 156, 96, 167, 174, 0,
	115, 0, 219, 220, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	183, 99, 192, 201, 112, 179, 102, 199, 188, 190,
	147, 132, 133, 181, 100, 101, 0, 172, 121, 166,
	125, 120, 159, 189, 150, 196, 197, 117, 216, 119,
	118, 187, 107, 209, 210, 104, 108, 208, 155, 160,
	158, 207, 194, 200, 148, 144, 0, 103, 198, 146,
	143, 135, 0, 123, 127, 164, 142, 165, 128, 152,
	151, 153, 0, 0, 157, 129, 0, 0, 0, 0,
	0, 186, 205, 217, 218, 0, 0, 0, 213, 0,
	0, 0, 154, 109, 130, 180, 134, 141, 171, 215,
	0, 176, 113, 204, 182, 161, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 122, 0, 0, 0, 0,
	136, 226, 227, 0, 139, 0, 0, 185, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 228, 229, 358, 97, 105, 138,
	0, 214, 0, 170, 124, 206, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 145, 212,
	0, 0, 0, 168, 0, 114, 0, 191, 126, 0,
	137, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	175, 162, 203, 0, 163, 173, 140, 195, 169, 202,
	0, 193, 211, 178, 106, 156, 96, 167, 174, 0,
	115, 0, 219, 220, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	183, 99, 192, 201, 112, 179, 102, 199, 188, 190,
	147, 132, 133, 181, 100, 101, 0, 172, 121, 166,
	125, 120, 159, 189, 150, 196, 197, 117, 216, 119,
	118, 187, 107, 209, 210, 104, 108, 208, 155, 160,
	158, 207, 194, 200, 148, 144, 0, 103, 198, 146,
	143, 135, 0, 123, 127, 164, 142, 165, 128, 152,
	151, 153, 0, 0, 157, 129, 0, 0, 0, 0,
	0, 186, 205, 217, 218, 0, 0, 0, 213, 0,
	0, 0, 154, 109, 130, 180, 134, 141, 171, 215,
	0, 176, 113, 204, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 228, 229, 0, 97, 105, 138,
	0, 214, 0, 170, 124, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110,
}

var yyPact = [...]int16{
	3001, -1000, -241, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1551, 1603, -1000, -1000, -1000, -1000, -1000, 1337, 2189,
	373, 468, 192, 17807, 467, 1381, 18091, -1000, 111, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1244, -1000, -1000,
	-1000, -1000, -1000, 1533, 1554, 1244, 1515, 8812, -1000, 374,
	15240, 17523, 7095, -1000, 20347, 437, 436, 211, 414, 365,
	365, 20627, 20063, 18091, 466, 365, -1000, -209, -172, -1000,
	-85, 464, 18091, -1000, 18091, 367, 1079, 367, 367, 367,
	18091, -1000, 517, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	18091, 1072, 1462, 488, 5611, 5611, 5611, 5611, 246, 5611,
	-28, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1437, 977, 1467, 9817, 9817, 1551, -1000, 1244,
	-1000, -1000, 1578, -1000, 13230, 516, -1000, 9817, 292, 1192,
	-1000, -1000, -229, 1192, -1000, -1000, 487, -1000, -1000, -1000,
	10810, 10810, 10810, 10810, 10810, 10810, 10810, -1000, -1000, -1000,
	-1000, 32, -1000, 938, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 515, -1000, 9486, 1192, 1192, 1192, 1192,
	1192, 1192, 1192, 1192, 9817, 1192, 1426, 1192, 1192, 1192,
	1192, 1192, 1192, 1192, 1192, 2648, 1192, 1192, 1192, 1192,
	-1000, 717, 17233, 1226, 1325, -1000, -1000, -1000, 1505, 14379,
	16949, 18091, 1196, -1000, 1254, 6724, -30, -1000, -1000, -1000,
	627, 514, 16665, -1000, -1000, -1000, 1461, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1162, -1000,
	13510, 13510, 16381, 20627, 365, 133, 365, 1070, 680, 1060,
	1353, 661, 20627, 1504, 365, 18091, -1000, -1000, -1000, -1000,
	16101, 5611, 402, 18091, 1490, 1351, 18091, 1043, 998, -1000,
	6353, -1000, 5611, 5611, 5611, 5611, 5611, 5611, 5611, 5611,
	-1000, -1000, -1000, -1000, -1000, -1000, 5611, 5611, -1000, 11,
	-1000, 1507, -1000, -1000, -1000, -1000, -1000, 1598, 542, 912,
	512, 1255, -1000, 753, 1533, 977, 18091, -1000, 9817, 9817,
	941, -1000, 19783, -1000, -1000, 4127, 567, 10810, 769, 681,
	10810, 10810, 10810, 10810, 10810, 10810, 10810, 10810, 10810, 10810,
	10810, 10810, 10810, 10810, 10810, 948, 3020, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 996,
	-1000, 12666, -1000, 1244, 12094, 12094, 35, 35, 35, 35,
	35, 35, 19499, -1000, -244, 8150, -1000, 7466, 977, 1156,
	607, 9486, 8812, 8812, 9143, 9817, 10810, 18935, 8812, 1507,
	665, 607, 18935, 1528, -1000, 977, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 63, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 8812, 8812, 8812, 8812, -1000, 261,
	18091, -1000, 18935, 15240, 15240, 15240, 15240, 15240, -1000, 1396,
	1367, -1000, 1368, 1366, 1406, 18091, -1000, 1160, 14379, 489,
	1192, -1000, 19219, -1000, -1000, 261, 1227, 15240, 18091, -1000,
	-1000, 5982, 1254, -30, 1247, -1000, -38, -13, 7819, 7466,
	536, -1000, -1000, -1000, -1000, 188, 14086, 180, -133, 21,
	-1000, -1000, -1000, -1000, -1000, 1281, -1000, -1000, -1000, 1281,
	278, 1336, 1281, 1336, -1000, 1281, 1336, 58, 58, 58,
	58, 58, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1312,
	1310, -1000, 1281, 1281, 1281, 1281, 1281, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1303, 279, 1303,
	1284, 1284, -1000, -1000, 180, 1334, 18091, 20627, 1350, 18091,
	-219, 18091, 5611, 1489, 5611, 18091, 1570, 18091, -1000, -1000,
	-1000, 152, 421, 13510, 18091, -1000, 2493, 18091, -1000, 18091,
	-1000, -1000, 18091, 5611, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 650,
	-1000, -1000, 1391, -1000, -1000, 1417, 9817, 9817, 4869, 9817,
	-1000, -1000, -1000, 1467, -1000, -1000, 567, 580, -1000, -1000,
	788, -1000, -1000, -1000, -1000, 507, 1192, -1000, 2370, -1000,
	-1000, -1000, -1000, 769, 10810, 10810, 10810, 2095, 2370, 2172,
	771, 357, 35, 50, 50, 31, 31, 31, 31, 31,
	371, 371, -1000, -1000, -1000, -1000, -110, -1000, 1281, 1303,
	279, 1303, 1284, 1284, -1000, -1000, 977, 258, 176, -1000,
	-1000, 58, -1000, -1000, -133, -1000, -229, 945, -1000, -1000,
	909, 977, 8812, 1137, 1156, -1000, 13230, -1000, -1000, 9817,
	-1000, 977, 1137, 1137, 666, 1250, 11141, 1281, -1000, 1281,
	1284, -1000, -1000, 97, 1281, 93, -1000, -1000, -1000, -1000,
	1284, -1000, -1000, -1000, -1000, -1000, 1281, 1281, -1000, -1000,
	1281, 1281, -1000, 1281, 1281, 706, 583, 2272, 1245, -1000,
	506, 1137, 8812, 638, -1000, 9817, 977, 18091, -1000, -1000,
	1137, 977, 1248, 1137, 1137, 1193, 1192, -1000, 1234, -1000,
	622, 1325, 1323, 1349, 1416, -1000, -1000, -1000, -1000, 1335,
	-1000, 1313, -1000, -1000, -1000, -1000, -113, 435, 419, 418,
	20627, -1000, 1565, 15240, 1229, -1000, -1000, 1247, -30, -37,
	-1000, -1000, -1000, -1000, 607, 619, -1000, -1000, 994, 7466,
	1242, 1448, -1000, -1000, -1000, -1000, -1000, -1000, 1309, 737,
	20627, 302, 297, 532, 509, 992, -1000, -1000, -1000, 802,
	-1000, 20627, -1000, 1597, -1000, -1000, 294, -1000, 276, 677,
	942, 18091, 1308, 170, 1307, 11803, 891, -1000, -256, -1000,
	6, -1000, -1000, 876, 58, 58, 1281, 58, 889, 58,
	58, -1000, -1000, 536, 1453, 536, 536, 536, 536, 937,
	937, -117, -117, -1000, -1000, -1000, -1000, 884, 1303, -1000,
	-1000, -1000, 878, -1000, 18091, 20627, 1298, 1347, 18091, 1503,
	412, -1000, -1000, 1500, -1000, -1000, -1000, 1499, 1219, -1000,
	-1000, 151, -1000, 421, -1000, 1570, -1000, 1246, -1000, 1301,
	2640, 535, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 255, 472, -1000, 5611, -1000, 646, 18091,
	18091, 8812, -1000, 1418, 607, 607, 503, -1000, -1000, -1000,
	-1000, -1000, 5240, 8812, -1000, 2095, 2370, 1318, -1000, 10810,
	10810, 78, -1000, 1281, -1000, 77, 76, -1000, 75, -1000,
	-229, -1000, 1137, 8812, -236, -1000, 607, -1000, -1000, -1000,
	3280, 948, 9817, -1000, 876, 248, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3280, 10810,
	10810, 10810, 10810, 10810, 4869, -99, 1217, 631, -1000, 9817,
	860, -1000, -1000, -1000, -1000, -1000, -1000, 1345, 18935, 1192,
	-1000, 15817, 20627, 1551, 18935, 9817, 9817, -1000, -1000, 9817,
	1297, -1000, 9817, -1000, -1000, -1000, -1000, 1296, 1192, 1192,
	1192, 1078, -1000, 1551, 1229, -1000, -1000, -1000, -43, -32,
	-1000, 9817, -1000, 4498, -1000, 188, -1000, 18371, -1000, 1594,
	1527, 283, 2, -1000, 989, 979, -1000, 971, -1000, -1000,
	5, -1000, -178, 113, -21, -1000, -1000, 1192, -1000, 1294,
	9817, 1497, -1000, 1466, 869, -1000, 11472, -1000, -229, -1000,
	-1000, -1000, -229, -1000, -1000, -1000, 1192, -1000, 1291, 1288,
	-1000, 1277, 1192, 502, -1000, -1000, -1000, -1000, -1000, 1173,
	536, 536, 58, 536, 1172, 1168, 536, 536, -1000, 569,
	-1000, -1000, -1000, -1000, 1109, -1000, 1101, -1000, -1000, 1236,
	-1000, 1099, 1233, 1344, 14947, 18091, 1286, 1244, 365, 1244,
	1524, 190, 18091, 1570, 18651, 1570, 1209, 20627, -1000, 296,
	20627, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 18091, -1000, -1000, -1000, -1000, -1000, 20627,
	315, -1000, -1000, 926, 9817, -1000, -1000, 1214, -1000, 7466,
	-1000, -1000, 977, -1000, 10810, 2370, 2370, 16, 15, 13,
	-1000, 909, -1000, -1000, -1000, -1000, 1192, 977, 1281, 1281,
	-1000, 1281, 1284, -1000, 97, 1281, 93, -1000, -1000, -1000,
	-1000, 1284, -1000, -1000, -1000, -1000, -1000, 1281, 1281, -1000,
	-1000, 1281, 1281, -1000, 1281, 1281, 977, 808, -1000, -1000,
	977, 327, 1081, 870, 110, 787, -1000, 1192, -92, -1000,
	607, 9817, -1000, 1468, 1185, 1210, -1000, -1000, 8481, 977,
	1097, 496, 1078, 1533, -1000, 607, 607, 607, 18651, 607,
	-187, 18651, 18651, 18651, 15524, 20627, 1533, -1000, -1000, -1000,
	-1000, 607, 3756, -1000, 7466, 1076, -1000, 273, 1281, 386,
	386, -200, 275, 274, 1192, -1000, -1000, -1000, -1000, -190,
	-1000, -1000, -1000, -1000, 677, -1000, 1277, 9817, 18651, 939,
	136, -1000, 1222, 1163, 2170, 1157, -1000, -1000, 977, -1000,
	862, -1000, 800, 1142, 7466, -1000, -1000, -1000, 536, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 58, 898, 58, 868,
	-1000, 859, 14947, 20627, 18091, 1122, 1221, -1000, 269, 1273,
	18651, -1000, 18091, -1000, 377, 1550, -1000, -1000, 1521, -1000,
	1215, -1000, -1000, 1154, 18091, 1271, 20627, -1000, -1000, 305,
	-1000, -1000, -1000, -1000, 1477, 20627, -1000, -1000, 607, 1565,
	15240, -1000, 2370, -1000, -1000, -1000, -1000, 399, -1000, -1000,
	-1000, -1000, -1000, 10810, 10810, -1000, 10810, 10810, 10810, 977,
	894, 607, 272, -1000, 1192, -1000, -1000, 1191, 20627, 20627,
	-1000, -1000, 1058, 1056, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1053, 1053, 1053, 489, -1000, -1000, -1000, -1000, -1000,
	-1000, 785, 18371, 1476, -1000, -1000, -1000, 695, -1000, -1000,
	709, 182, 678, -1000, 20627, -190, 9817, -1000, 1192, 808,
	1051, -149, 9817, 1270, 853, -1000, 1116, -229, 1192, -1000,
	-1000, -1000, -1000, -1000, 1192, -1000, 536, -1000, 536, 1106,
	1102, 1089, 1269, 1268, -216, 14947, 1049, 1495, 20627, -1000,
	-1000, -1000, -1000, -1000, 175, 656, 20627, 1582, 1520, -1000,
	13802, 1267, 1266, 1192, 320, 1561, 1211, -1000, 1552, 977,
	327, 327, 327, 327, 166, -1000, -1000, 1596, -1000, 1192,
	-1000, 1244, 495, -1000, -1000, -1000, -187, -1000, -1000, -1000,
	-113, 1340, 1206, 173, -1000, 959, 611, 790, 610, 609,
	608, 601, 581, 578, 577, -1000, -1000, -1000, 1589, -1000,
	-1000, -1000, 1583, 1265, -1000, 1262, 808, 9817, 196, 1342,
	-1000, -1000, 857, -1000, 1084, 1033, -1000, -1000, -1000, -1000,
	-216, 14947, 18371, 1565, 1261, 1029, 1565, 1244, 1114, -1000,
	169, 128, 9817, -1000, 1582, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1551, 20627, 3074, 20627, 20627,
	20627, 368, 10479, 9817, -1000, 656, 171, 1021, 12386, 13802,
	13802, 12386, 13802, 13802, 18371, 18371, 219, 268, 1558, 1548,
	9817, -1000, -1000, -1000, -1000, -1000, 977, 195, -144, 18935,
	1210, 977, 20627, -1000, -1000, -1000, 20627, -1000, -138, 1206,
	20627, -1000, 845, -1000, -1000, 727, 844, 727, 727, 727,
	727, 727, 386, 386, 20627, 18371, 196, 808, -1000, -94,
	1577, -156, 476, -1000, -1000, 1565, 1011, 1032, 785, 18651,
	-216, 785, -1000, -115, 20627, 9817, 2639, 1582, 607, -1000,
	1533, 1188, 12946, -1000, 796, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	20627, 1574, 1573, 1572, 1571, 2400, 292, 772, 127, 126,
	167, -1000, -1000, 12386, -1000, -1000, -1000, -1000, -1000, 1028,
	1025, 1020, -1000, 20627, 1259, -1000, 9817, 9817, 1002, -1000,
	607, -1000, 1410, -103, -150, 1082, -1000, -1000, 1192, 1018,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 677, 677, 1015, 1010, -1000, 196, -1000, 386,
	386, -1000, -1000, -1000, 161, 888, 801, 784, 776, 17,
	-1000, 1545, 785, 1565, 785, 1340, 1006, 1565, 1340, -1000,
	-231, -1000, 607, -1000, -1000, 1582, 2208, -1000, 1467, 20627,
	162, -1000, -1000, -1000, 3074, 1471, -1000, -1000, -1000, -1000,
	-1000, 1582, 1582, 1582, 1582, -1000, -1000, 293, -1000, 219,
	1445, 18371, 607, 943, -1000, 977, 9817, -1000, 1403, -1000,
	20627, -1000, 1206, -1000, -1000, 281, 785, -1000, -1000, -1000,
	765, -1000, 764, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14663, 1340, 785, -1000, -1000, -1000, 785, -1000, 9817, -242,
	-1000, 2383, -1000, -1000, 13510, 1519, -1000, 20627, 465, 1300,
	168, 904, 141, -1000, 148, -1000, 206, 983, -1000, -1000,
	-135, 977, -1000, 18091, 1340, -1000, -1000, -1000, 493, -1000,
	-1000, 1340, 607, 629, -1000, -1000, 1244, -1000, -1000, 1582,
	584, 644, 936, -1000, 138, -1000, 203, -1000, -155, -1000,
	1258, -1000, 7466, -1000, -1000, -1000, 335, 119, -1000, -1000,
	-1000, 1192, -152, 20627, -1000, -1000, 1582, 10148, -1000, 976,
	121, 327, 977, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1861, 108, 68, 1859, 1858, 1856, 1625, 1621, 1618,
	1611, 1855, 1854, 1852, 1851, 1849, 1843, 1842, 1841, 1838,
	1837, 1833, 1832, 1830, 1829, 1828, 1819, 1814, 1813, 1812,
	1507, 1811, 1810, 1808, 111, 1807, 1798, 1797, 1793, 79,
	95, 82, 81, 1796, 1785, 46, 112, 148, 1784, 89,
	1782, 1781, 250, 1779, 115, 1778, 1777, 113, 1775, 1773,
	45, 51, 31, 47, 1769, 1768, 121, 2, 1767, 1766,
	32, 1765, 1764, 94, 21, 29, 42, 41, 1762, 76,
	15, 1761, 97, 1760, 1759, 1758, 1756, 36, 1755, 98,
	33, 14, 13, 1754, 43, 22, 106, 75, 50, 19,
	205, 103, 1751, 70, 114, 88, 1750, 1010, 1749, 1747,
	1746, 1744, 1743, 1742, 957, 93, 1741, 1740, 1738, 25,
	30, 80, 0, 499, 23, 128, 1737, 1736, 1735, 1998,
	126, 110, 49, 1734, 56, 1929, 77, 1732, 1731, 71,
	125, 7, 122, 119, 1730, 120, 1729, 1728, 1726, 1997,
	104, 64, 78, 44, 1725, 1723, 90, 96, 92, 55,
	87, 105, 24, 1720, 1715, 1714, 53, 1712, 66, 38,
	3, 117, 1710, 1709, 1707, 1706, 1703, 60, 1701, 40,
	1700, 26, 11, 12, 4, 10, 1699, 1698, 1696, 6,
	1694, 1693, 1689, 1688, 39, 1686, 1685, 1684, 20, 1680,
	1675, 35, 16, 67, 48, 59, 1674, 1672, 57, 84,
	58, 1671, 54, 8, 5, 17, 1665, 9, 1664, 1661,
	1656, 27, 28, 1655, 1653, 1651, 1650, 1649, 1648, 52,
	1644, 1643, 1642, 1, 1641, 1640, 18, 1639, 1638, 1637,
	1634, 1297, 1632, 1630, 118, 1628, 1623, 1616, 1614, 447,
}

var yyR1 = [...]uint8{
	0, 238, 239, 239, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 6, 3, 4, 4, 5, 5,
	7, 7, 33, 33, 8, 9, 9, 9, 242, 242,
	52, 52, 96, 96, 10, 10, 10, 10, 11, 11,
	218, 218, 217, 219, 219, 12, 12, 12, 12, 12,
	211, 211, 211, 211, 211, 13, 13, 214, 214, 214,
	14, 14, 14, 101, 101, 105, 105, 105, 106, 106,
	106, 106, 230, 230, 137, 137, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 243, 243, 244, 244, 244,
	244, 244, 244, 244, 209, 209, 209, 209, 210, 210,
	210, 210, 212, 212, 213, 213, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 216, 216, 120, 120,
	192, 192, 192, 193, 193, 193, 193, 193, 193, 195,
	195, 196, 196, 127, 127, 197, 197, 22, 173, 174,
	174, 174, 174, 174, 174, 174, 161, 161, 141, 141,
	141, 141, 141, 141, 141, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 203, 203, 203, 203, 203, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 205, 206, 207,
	199, 199, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 151, 151, 151, 151,
	151, 151, 198, 198, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 145, 145, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 144, 144, 144, 144, 144,
	144, 144, 144, 146, 146, 146, 146, 146, 146, 146,
	146, 142, 142, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 148, 148, 148, 148,
	148, 148, 148, 148, 160, 160, 149, 149, 158, 158,
	159, 159, 159, 150, 150, 150, 157, 157, 157, 154,
	154, 155, 155, 156, 156, 156, 152, 152, 152, 153,
	153, 153, 163, 184, 184, 184, 186, 186, 187, 187,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 172, 172, 208, 208, 183, 183, 183, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 171, 171, 181,
	181, 182, 182, 179, 179, 179, 180, 166, 166, 166,
	166, 166, 167, 168, 168, 168, 168, 164, 165, 201,
	201, 201, 234, 234, 234, 234, 234, 234, 235, 235,
	202, 202, 169, 169, 170, 170, 177, 177, 177, 177,
	245, 245, 175, 175, 176, 176, 176, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	246, 246, 247, 247, 247, 247, 247, 247, 247, 190,
	188, 188, 189, 189, 17, 18, 18, 18, 18, 18,
	19, 19, 23, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	112, 112, 109, 109, 110, 110, 111, 111, 111, 113,
	113, 113, 138, 138, 138, 25, 25, 27, 27, 28,
	29, 26, 26, 26, 26, 26, 248, 30, 31, 31,
	32, 32, 32, 36, 36, 36, 34, 34, 35, 35,
	41, 41, 40, 40, 42, 42, 42, 42, 126, 126,
	126, 125, 125, 231, 231, 231, 231, 231, 44, 44,
	45, 45, 46, 46, 47, 47, 47, 221, 221, 220,
	220, 222, 222, 222, 222, 222, 222, 59, 59, 94,
	94, 94, 97, 97, 48, 48, 48, 48, 49, 49,
	50, 50, 51, 51, 133, 133, 132, 132, 132, 131,
	131, 53, 53, 53, 55, 54, 54, 54, 54, 56,
	56, 58, 58, 57, 57, 60, 60, 60, 60, 61,
	61, 95, 95, 43, 43, 43, 43, 43, 43, 43,
	108, 108, 63, 63, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 72, 72, 72, 72, 72, 72,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 39, 39, 73, 73, 73, 79, 74, 74, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 70, 70, 70, 70,
	70, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 249, 249, 71,
	71, 71, 71, 37, 37, 37, 37, 37, 136, 136,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 140, 140, 140, 140, 140, 140, 140, 140,
	83, 83, 38, 38, 81, 81, 82, 119, 119, 84,
	84, 80, 80, 80, 223, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 85, 85, 86, 86, 232,
	232, 233, 87, 87, 88, 88, 89, 90, 90, 90,
	91, 91, 91, 91, 92, 92, 92, 65, 65, 65,
	65, 65, 65, 93, 93, 93, 93, 98, 98, 75,
	75, 77, 77, 76, 78, 99, 99, 103, 100, 100,
	104, 104, 104, 104, 104, 20, 21, 102, 102, 102,
	128, 128, 128, 114, 114, 115, 115, 107, 107, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 117,
	117, 117, 118, 118, 123, 123, 124, 124, 129, 129,
	129, 130, 130, 224, 224, 224, 225, 225, 225, 226,
	226, 227, 228, 228, 229, 237, 237, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	240, 241, 134, 135, 135, 135,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 5, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 8, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 2, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 7, 10, 7, 5, 5, 11, 11,
	9, 13, 14, 5, 8, 0, 3, 0, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 1, 1,
	1, 3, 1, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 1, 4, 0, 3,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	2, 0, 3, 0, 1, 0, 2, 4, 4, 0,
	1, 3, 3, 3, 3, 3, 2, 2, 3, 1,
	1, 1, 1, 1, 0, 2, 2, 3, 2, 4,
	2, 4, 2, 2, 3, 2, 3, 2, 7, 9,
	3, 3, 6, 9, 9, 6, 6, 8, 8, 5,
	8, 7, 4, 2, 4, 6, 2, 4, 2, 1,
	1, 1, 2, 1, 1, 1, 3, 1, 2, 1,
	1, 2, 0, 4, 3, 4, 3, 3, 3, 3,
	3, 3, 3, 2, 4, 6, 2, 3, 2, 3,
	1, 3, 0, 2, 0, 3, 3, 2, 2, 2,
	2, 2, 3, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 2, 2,
	2, 1, 1, 1, 3, 3, 2, 2, 2, 1,
	1, 1, 1, 4, 4, 4, 4, 4, 1, 5,
	2, 2, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 3, 3, 0, 3, 3, 0,
	1, 0, 1, 0, 2, 1, 0, 3, 3, 0,
	1, 2, 6, 0, 1, 4, 1, 2, 1, 3,
	2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 1, 1, 0, 2, 5, 2, 3,
	3, 2, 3, 2, 2, 3, 4, 1, 1, 1,
	1, 1, 3, 3, 2, 2, 1, 2, 5, 5,
	8, 8, 13, 1, 1, 2, 2, 10, 7, 0,
	1, 1, 0, 1, 1, 1, 2, 2, 1, 2,
	0, 3, 0, 1, 1, 3, 0, 4, 1, 3,
	2, 1, 1, 2, 1, 1, 1, 6, 11, 13,
	13, 6, 7, 7, 7, 7, 7, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 5, 4, 6, 5, 4, 4,
	3, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 3, 3, 3, 3, 4, 3, 6, 4, 2,
	1, 1, 0, 1, 0, 1, 0, 2, 2, 0,
	2, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 3, 6, 4, 7, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 0, 4, 1,
	3, 1, 1, 1, 1, 1, 1, 4, 8, 1,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 0, 4, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 6, 2, 2, 2, 2, 2, 2, 2, 3,
	3, 1, 1, 1, 1, 2, 4, 5, 5, 6,
	4, 4, 4, 6, 6, 6, 6, 6, 8, 8,
	6, 8, 8, 9, 7, 5, 4, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 2, 2, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 0,
	2, 1, 3, 5, 3, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 3, 0, 2, 1,
	3, 1, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 5, 3, 1, 3, 1, 2, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 2, 0, 2, 2, 0,
	1, 4, 1, 3, 2, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -238, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -23, -24, -25, -27, -28, -29,
	-26, -3, -4, 7, -33, 9, 10, 31, -22, 122,
	123, 125, 124, 155, 126, 148, 52, 204, 205, 207,
	208, 26, 149, 150, 153, 154, 6, -240, 8, 329,
	56, -239, 377, -87, 15, -32, 5, -30, -248, -30,
	-30, -30, -30, -173, 56, -234, -235, -197, 131, 321,
	128, 144, 162, 163, 349, 129, 361, 362, 146, 364,
	76, -107, 132, 134, 129, 129, 130, 132, 321, 128,
	129, -57, -129, 59, -122, 61, 169, 340, 21, 204,
	217, 218, 209, 250, 238, 341, 167, 235, 239, 286,
	375, 69, 207, 295, 138, 173, 151, 230, 233, 232,
	224, 221, 28, 256, 347, 223, 141, 257, 261, 268,
	287, 336, 214, 215, 289, 254, 33, 143, 342, 37,
	159, 290, 259, 253, 248, 131, 252, 213, 247, 41,
	227, 263, 262, 264, 285, 241, 168, 267, 243, 225,
	242, 18, 154, 157, 258, 260, 222, 170, 136, 161,
	346, 291, 220, 158, 171, 153, 294, 363, 166, 208,
	288, 216, 297, 203, 202, 40, 274, 234, 211, 226,
	212, 140, 205, 164, 245, 160, 228, 229, 251, 210,
	246, 206, 162, 155, 296, 275, 348, 244, 240, 236,
	237, 165, 132, 281, 344, 292, 231, 276, 277, 175,
	176, 177, 178, 179, 180, 181, 34, 35, 337, 338,
	129, 116, 239, 122, 279, 130, 33, 161, -138, 129,
	-109, 281, 288, 287, 282, -129, 206, -134, -134, -134,
	-134, -134, -30, -2, -91, 17, 16, -5, -3, -240,
	21, 22, -42, 107, -43, -129, -62, 78, -67, 29,
	59, -122, 61, 24, -66, -63, -80, -223, -78, -79,
	116, 117, 105, 106, 113, 79, 118, -70, -68, -69,
	-71, -226, 62, -123, 60, 70, 63, 64, 65, 66,
	71, 72, 73, 298, -76, -240, 46, 47, 330, 331,
	332, 333, 339, 334, 81, 36, 38, 320, 328, 327,
	326, 324, 325, 322, 323, 374, 135, 321, 111, 329,
	265, -31, -107, -45, -46, -47, -48, -59, -79, -240,
	-57, 11, -52, -57, -100, -137, 206, -104, 288, 287,
	-124, 298, -102, -123, -121, 286, 239, 285, 59, -122,
	127, 183, 352, 77, 23, 25, 272, 278, 182, 80,
	116, 16, 81, 189, 361, 362, 115, 330, 122, 50,
	322, 323, 320, 187, 332, 333, 321, 279, 194, 20,
	29, 372, 10, 26, 149, 22, 109, 124, 184, 84,
	85, 152, 24, 150, 73, 190, 192, 19, 53, 142,
	11, 351, 13, 14, 366, 353, 135, 134, 96, 365,
	130, 48, 8, 118, 27, 373, 93, 44, 147, 193,
	46, 94, 17, 324, 325, 32, 339, 156, 111, 51,
	38, 367, 78, 368, 71, 54, 293, 188, 76, 15,
	49, 157, 369, 144, 191, 95, 125, 329, 47, 185,
	370, 128, 186, 6, 335, 31, 148, 45, 129, 280,
	83, 133, 72, 163, 5, 146, 9, 52, 55, 326,
	327, 328, 36, 82, 12, 145, 343, 74, -174, -161,
	-123, 61, 130, 130, 132, 202, 132, -115, 135, -115,
	-123, -123, -115, -57, 129, -115, 364, 361, 362, 329,
	129, -57, -57, -114, 135, 59, -114, -114, -114, -57,
	119, -57, 59, 31, 321, 59, 161, 129, 162, 132,
	-135, -240, -124, -135, -135, -135, 164, 165, -135, -110,
	283, -36, 42, 43, -241, 58, -92, 19, 32, -43,
	-129, -88, -89, -43, -87, -2, 11, -126, 77, 76,
	93, -125, 23, -123, 61, 119, -43, -64, 96, 78,
	94, 95, 80, 102, 101, 112, 105, 106, 107, 108,
	109, 110, 111, 103, 104, 115, 374, 86, 87, 88,
	89, 90, 91, 92, 97, 98, 99, 100, -108, -240,
	-194, 374, -79, -240, 120, 121, -67, -67, -67, -67,
	-67, -67, -67, -227, 266, -240, 61, 119, -2, -74,
	-43, -240, -240, -240, -240, -240, -240, -240, -240, -240,
	-83, -43, -240, 39, -249, -240, -249, -249, -249, -249,
	-249, -249, -249, -140, 116, 239, 151, 230, -143, -142,
	245, 244, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 238, 341, -240, -240, -240, -240, 68, -58,
	27, -57, 31, 57, -53, -55, -54, -56, 44, 48,
	50, 45, 46, 47, 51, -133, 23, -45, -240, -132,
	157, -131, 23, -129, 61, -57, -52, -242, 57, 11,
	55, 57, -100, 206, -101, -105, 289, 291, 86, 119,
	-128, -123, 61, 29, 31, 58, 57, -162, -141, -145,
	-142, -147, -146, -148, -123, -143, -144, 238, 341, 235,
	239, 236, 241, 242, 243, 116, 240, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 244, 256,
	31, 151, 228, 229, 230, 233, 232, 234, 231, 257,
	258, 259, 260, 261, 262, 263, 264, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 220, 221, 223,
	224, 225, 227, 226, -162, -123, 54, 201, -123, -115,
	203, -115, 59, 78, 59, 54, -209, 54, 19, 182,
	183, 195, -123, 23, -115, -57, -57, 293, -135, 133,
	-57, 24, 54, -57, 59, 59, -130, -129, -121, -135,
	-135, -135, -135, -135, -135, -135, -135, -135, -135, -112,
	280, 284, -34, 22, 9, 96, 57, 18, 119, 57,
	-90, 25, 26, -91, -241, -57, -43, -43, -72, 71,
	78, 72, 73, -125, 107, -130, -124, -121, -67, -73,
	-76, -79, 67, 96, 94, 95, 80, -67, -67, -67,
	-67, -67, -67, -67, -67, -67, -67, -67, -67, -67,
	-67, -67, -136, 59, 61, -145, 229, -140, -143, 220,
	221, 223, 224, 225, 227, 226, 59, 239, 229, 269,
	118, 245, 254, 255, -141, -66, 61, -123, -66, -123,
	378, -41, 22, -40, -74, -42, -43, -124, -241, 57,
	-241, -2, -40, -40, -43, -139, 116, 235, 151, 230,
	224, 254, 255, 274, 228, 275, 217, 209, 214, 227,
	225, 211, 226, 210, 223, 220, 233, 232, 234, 245,
	236, 241, 243, 242, 240, -43, -80, -67, -80, -123,
	-129, -40, -34, -81, -82, 82, -80, 19, -241, 237,
	-40, -41, -40, -40, -40, -96, 157, -57, -99, -103,
	-80, -46, -47, -47, -46, -47, 44, 44, 44, 49,
	44, 49, 44, -54, -129, -241, -60, 52, 134, 53,
	-240, -131, -96, 55, -45, -57, -104, -101, 57, 290,
	292, 293, 54, 74, -43, -124, -153, 116, 115, -177,
	-245, 344, 35, -161, -163, -166, -164, -165, -178, -167,
	138, 136, 140, 141, 146, -171, 130, 147, 71, 78,
	-203, 138, -206, 54, 272, 278, 136, 147, 146, 375,
	69, 139, 23, 351, 353, 29, 30, -156, 378, 266,
	-154, 275, -149, 56, -149, -149, 237, -150, 56, -149,
	-150, -149, -150, -152, 239, -152, -152, -152, -152, 56,
	56, -149, -149, -149, -149, -149, -158, 56, 222, -158,
	-158, -159, 56, -159, 54, 55, -57, -123, 54, -57,
	-230, 372, 373, -57, -135, 24, -135, -57, -212, -210,
	8, 9, 10, -57, 196, -209, -141, -57, -116, 127,
	124, 125, -190, 123, 272, 239, 69, 29, 15, 330,
	157, 348, 59, 158, -57, -57, -57, -135, -111, 11,
	96, -35, 45, 40, -43, -43, -130, -89, -92, 71,
	72, 73, 119, -240, -73, -67, -67, -67, -39, 152,
	77, 343, -241, 237, -157, 343, 344, -156, -228, -229,
	61, -241, -40, 57, -241, -241, -43, -241, -241, -241,
	57, 55, 57, -149, 56, -149, -149, -159, 215, -149,
	215, -159, -149, -149, -149, -149, -149, -149, 23, 57,
	11, 57, 57, 11, 119, -241, -40, -84, -82, 84,
	-43, -241, -129, -241, -241, -241, -241, -65, 31, 36,
	-2, -240, -240, -61, 57, 12, 86, -50, -49, 54,
	55, -51, 54, -49, 44, 44, -221, 343, 130, 130,
	130, -97, -123, -61, -45, -61, -105, -106, 294, 291,
	297, 86, 59, -175, -124, 57, 34, 56, -202, 54,
	78, -169, -123, 147, -171, -171, 59, -171, 59, 130,
	59, 71, 19, -123, 9, 147, 147, -202, 61, -57,
	56, -199, 352, 16, 56, -204, 56, -205, 61, 62,
	63, 64, 71, -151, 70, -63, 267, -70, 320, 323,
	322, 268, -123, -129, -207, 63, 379, -155, 276, 63,
	-152, -152, -149, -152, 63, 59, -152, -152, -153, 31,
	-153, -153, -153, -153, -160, 61, -160, -157, -157, 63,
	-158, 63, -57, -123, 56, 54, -57, 23, 132, 23,
	-192, 23, 54, 57, 196, -209, -212, 55, -134, -127,
	138, -166, -247, 146, 137, 142, 141, 59, 136, 140,
	157, -191, 137, 138, 142, 141, 59, 130, 147, 136,
	140, 157, 146, -117, -118, 133, 23, 130, 147, 157,
	127, -135, -113, 94, 12, -129, -129, -40, 41, 119,
	107, -124, -41, -39, 77, -67, -67, 228, 228, 228,
	379, 57, -194, -241, -42, -231, 376, -139, 116, 235,
	151, 230, 224, 254, 274, 228, 275, 217, 209, 214,
	227, 225, 211, 226, 210, 223, 220, 233, 232, 234,
	245, 236, 241, 243, 242, 240, -136, -43, -152, 59,
	-139, -67, -67, -67, -67, -67, -124, 340, -87, 85,
	-43, 83, -98, 54, -99, -75, -77, -76, -240, -2,
	-93, -123, -97, -87, -103, -43, -43, -43, 56, -43,
	56, -240, -240, -240, -241, 57, -87, -61, 291, 295,
	296, -43, 86, -124, -177, -182, -179, -123, 147, 10,
	9, 19, 142, 136, 375, 59, 59, 59, -201, 146,
	361, 362, 363, -203, 375, -151, 268, -240, 56, -43,
	23, 29, 63, -204, 56, -205, -194, -194, -240, -149,
	56, -149, 56, 56, 119, 58, -153, -153, -152, -153,
	58, 58, -153, -153, 59, 116, 58, 57, 58, 57,
	58, 57, 56, 55, 54, -181, -182, -70, -123, -57,
	56, -2, -115, -2, -193, 19, 170, 171, -57, -210,
	-94, -123, 147, -212, 54, -123, -246, 130, 147, -123,
	-134, -134, -57, -134, -123, 138, -166, 61, -43, -44,
	11, -241, -67, 277, 277, 277, -229, -240, -241, -241,
	-241, -241, -241, 19, 57, -241, 57, 19, -240, -38,
	335, -43, 28, -98, 57, -241, -241, -241, 57, 119,
	-241, -91, -94, -220, -222, 366, 367, 368, 369, 370,
	371, -94, -94, -94, -132, -123, -91, -176, -124, 61,
	63, 58, 57, -149, -180, 270, -149, -168, 166, 167,
	31, 168, -168, 363, 147, 147, -240, -201, -202, -43,
	-94, 58, 56, 353, 57, 58, -204, 61, 267, 58,
	-241, 58, 58, 58, -124, -153, -152, 61, -152, 63,
	63, -181, -123, -57, 58, 56, -94, -57, 133, 21,
	6, 8, 9, 10, 19, -120, 57, 23, -57, -243,
	56, -123, 146, 27, -123, -61, -45, -241, 157, -87,
	-67, -67, -67, -67, -67, -241, 61, 147, -77, 36,
	-2, -240, -123, -123, 58, 58, 57, -241, -241, -241,
	-60, -184, -186, 343, -185, 55, 143, 69, 175, 176,
	177, 178, 179, 180, 181, -179, -90, -202, 54, 71,
	169, -202, 54, -169, -123, -201, -43, -240, -241, 58,
	349, 350, -43, 56, 63, 58, -153, -153, 58, 58,
	58, 56, 56, -95, 365, -181, 58, 23, -170, -123,
	184, -119, 82, -123, -213, -215, -7, -9, -8, -11,
	-10, -12, -13, -14, -20, -3, 20, 31, 188, 189,
	194, 190, 145, 135, -21, -120, 19, -244, -123, 105,
	86, 61, -161, 57, 56, 56, -240, 136, -85, 13,
	16, -241, -241, -241, -241, -241, -37, 96, 343, 9,
	-75, -2, 119, -222, -221, -183, 54, -185, 343, 56,
	345, 59, -172, 86, 61, 86, 86, 86, 86, 86,
	86, 86, 9, 10, 56, 56, -241, -43, -198, 168,
	54, 58, -200, 58, 58, -95, -181, -182, -61, 56,
	58, -61, -2, -195, 57, 55, 185, 204, -43, -215,
	-87, -218, -123, -217, -237, -236, 299, 300, 301, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, -123, -123, -123,
	-211, 38, 191, 192, 193, -62, -67, -43, -62, -119,
	184, 58, -244, -123, -244, -244, -244, -244, -244, -182,
	-182, -188, -189, 157, 147, -86, 14, 16, -232, -233,
	-43, -241, 341, 51, 346, -99, -241, -123, -123, -187,
	-185, -123, 63, -208, 54, 74, 63, -208, -208, -208,
	-208, -208, -168, -168, -170, -182, -198, -241, 336, 10,
	9, 349, 350, 58, 205, 355, 356, 156, 357, 168,
	358, 359, -61, 58, 58, -184, -94, -95, -184, -196,
	343, -123, -43, -216, -215, 204, -214, -215, -91, 57,
	-219, -141, 186, -208, 57, -123, 11, 11, 11, 11,
	-215, 204, 83, 204, 204, 185, 58, 58, -241, 57,
	-123, 56, -43, -74, -241, -87, 57, 41, 342, 347,
	-240, 58, 57, -202, -202, 58, 58, -198, -168, -168,
	343, 63, 16, 63, 63, 63, 63, 356, 156, 358,
	16, -184, -61, -184, -183, 58, -61, -183, 375, -215,
	-215, 377, -92, -217, -123, 187, -236, 27, -214, -213,
	-214, -214, -224, 197, 78, -189, 36, -182, -241, -233,
	41, -123, -185, 139, -184, 63, 63, 360, -129, -183,
	-184, -184, -43, 377, -215, 85, 19, -123, 85, 377,
	377, 85, 377, -225, 198, 197, 159, 58, 343, -241,
	-57, -183, 119, -183, 85, -2, 85, 84, 85, 200,
	199, 160, 346, 56, -124, 135, 204, -240, 347, -170,
	-214, -67, 156, 58, 85, -241, -241,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 812, 0, 516, 516, 516, 516, 516, 0, -2,
	867, 0, 0, 0, 0, -2, 506, 507, 0, 509,
	510, 1192, 1192, 1192, 1192, 1192, 516, 0, 32, 33,
	1190, 1, 3, 820, 0, 0, 520, 899, 518, 867,
	0, 0, 0, 86, 159, 0, 0, 0, 0, 865,
	865, 0, 0, 0, 0, 865, 403, 404, 405, 408,
	0, 0, 0, 868, 0, 863, 0, 863, 863, 863,
	0, 471, 603, 888, 889, 890, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
	1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
	1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
	1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
	1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
	1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
	1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
	1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
	0, 0, 0, 0, 1193, 1193, 1193, 1193, 0, 1193,
	494, 489, 503, 504, 493, 505, 508, 511, 512, 513,
	514, 515, 523, 26, 824, 899, 899, 812, 28, 0,
	521, 522, 0, 534, 538, 0, 613, 899, 618, 620,
	-2, -2, -2, 0, 659, 660, 661, 662, 663, 664,
	899, 899, 899, 899, 899, 899, 899, 691, 692, 693,
	694, 0, 796, 791, 798, 799, 800, 801, 802, 803,
	804, 622, 623, 0, 844, 899, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 0, 0, 727, 727, 727,
	727, 727, 727, 727, 727, 0, 0, 0, 0, 0,
	900, 517, 0, 0, 550, 552, 553, 554, 584, 0,
	586, 0, 0, 40, 44, 0, 1161, 848, -2, -2,
	0, 0, 0, 886, 887, -2, 1068, -2, 884, 885,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 0, 160,
	174, 174, 0, 0, 865, 0, 865, 0, 0, 0,
	0, 0, 0, 0, 865, 0, 409, 406, 407, 156,
	0, 1193, 0, 0, 0, 0, 0, 0, 0, 470,
	0, 472, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
	481, 1194, 1195, 482, 483, 484, 1193, 1193, 486, 0,
	495, 526, 524, 525, 27, 1191, 22, 0, 0, 821,
	0, 813, 814, 817, 820, 26, 0, 535, 899, 899,
	0, 539, 0, 541, 542, 0, 616, 899, 0, 0,
	899, 899, 899, 899, 899, 899, 899, 899, 899, 899,
	899, 899, 899, 899, 899, 0, 0, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 619, 0,
	795, 174, 633, 0, 0, 0, 682, 683, 684, 685,
	686, 687, 688, 695, 0, -2, 797, 0, 26, 0,
	657, 899, 899, 899, 899, 899, 899, 0, 899, 526,
	0, 781, 0, 0, 718, 0, 719, 720, 721, 722,
	723, 724, 725, 726, 772, 0, 774, 775, 776, 777,
	778, 779, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 281, 282, 899, -2, 899, 899, 519, 42,
	0, 602, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 594, 0, 0, 0, 0, 585, 0, 0, 605,
	1123, 587, 0, 589, 590, -2, 0, 0, 0, 38,
	39, 0, 45, 1161, 47, 73, 0, 0, 899, 0,
	339, 860, 861, 862, 858, 416, 0, 166, 333, 329,
	169, 170, 171, 172, 173, 316, 254, -2, -2, -2,
	-2, -2, -2, -2, -2, 316, -2, -2, -2, -2,
	-2, 336, -2, -2, -2, -2, -2, 302, -2, 1083,
	0, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 167, 0, 0, 0, 0, 0,
	0, 0, 1193, 0, 1193, 0, 0, 0, 114, 115,
	116, 0, 0, 174, 0, 157, 0, 0, 437, 0,
	465, 864, 0, 1193, 468, 469, 604, 891, 892, 473,
	474, 475, 476, 477, 478, 479, 480, 485, 488, 496,
	490, 491, 528, 527, 825, 0, 899, 899, 0, 899,
	816, 818, 819, 824, 29, 24, 614, 615, 617, 634,
	0, 636, 638, 540, 536, 0, 792, -2, 624, 625,
	653, 654, 655, 0, 899, 899, 899, 651, 629, 0,
	665, 666, 667, 668, 669, 670, 671, 672, 673, 674,
	675, 676, 679, 738, 739, 680, 0, 690, 316, 318,
	318, 318, 320, 320, 271, 272, 0, 316, 316, 247,
	248, -2, -2, -2, 333, 677, 244, 0, 678, 689,
	0, 0, 899, 0, 0, 532, 538, 794, 656, 899,
	843, 26, 0, 0, 0, 0, -2, -2, -2, -2,
	-2, -2, 747, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 0, 661, 0, 0, 791,
	0, 0, 899, 789, 784, 899, 0, 0, 728, 773,
	0, 0, 531, 0, 0, 0, 0, 601, 609, 845,
	0, 551, 580, 582, 0, 577, 592, 593, 595, 0,
	597, 0, 599, 600, 555, 556, 557, 0, 0, 0,
	0, 588, 609, 0, 609, 41, 849, 46, 0, 0,
	76, 77, 850, 851, 852, 0, 854, 340, 0, 158,
	418, 0, 421, 161, 162, 163, 164, 165, 0, 410,
	-2, 1128, 1151, 1086, 0, 0, 377, 378, 176, 0,
	178, 0, 180, 0, 182, 183, 0, 185, 187, 410,
	0, 0, 0, 0, 0, 0, 0, 175, 0, 335,
	331, 330, 253, 0, 336, 336, 316, 336, 0, 336,
	336, 290, 291, 339, 0, 339, 339, 339, 339, 0,
	0, 326, 326, 276, 277, 278, 265, 0, 318, 267,
	268, 269, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 82, 83, 0, 96, 866, 97, 140, 0, 122,
	118, 119, 120, 0, 117, 0, 103, 0, 1192, 153,
	0, 879, 438, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 0, 0, 464, 1193, 467, 499, 0,
	0, 899, 529, 0, 822, 823, 0, 815, 23, 635,
	637, 639, 0, -2, 626, 651, 630, 0, 627, 899,
	899, 0, 621, -2, 246, 0, 0, 252, 0, 902,
	244, 696, 0, 899, 543, 700, 658, -2, 701, 702,
	0, 0, 899, 740, 1190, 336, 744, 745, 749, 750,
	752, 757, 763, 764, 767, 768, 770, 771, 0, 899,
	899, 899, 899, 899, 0, 0, 812, 0, 785, 899,
	0, 716, 717, 729, 730, 731, 732, 837, 0, 0,
	-2, 0, 0, 812, 0, 899, 899, 574, 581, 899,
	0, 575, 899, 576, 596, 598, 567, 0, 0, 0,
	0, 0, 572, 812, 609, 37, 74, 75, 0, 0,
	81, 899, 341, 0, 422, 416, 420, 0, 387, 0,
	0, 0, 413, 368, 0, 0, 371, 0, 373, -2,
	399, 177, 0, 0, 0, 184, 186, 0, 190, 191,
	899, 0, 220, 0, 0, 203, 0, 206, -2, 209,
	210, 211, 244, 213, 214, 215, 1117, 217, 316, 316,
	240, 1089, 0, 0, 218, 219, 334, 168, 332, 0,
	339, 339, 336, 339, 0, 0, 339, 339, 292, 0,
	293, 294, 295, 296, 0, 314, 0, 274, 275, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 865, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 427, 0,
	412, 431, 1192, 154, 452, 453, 454, 455, 456, 457,
	458, 1192, 439, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 449, 0, 1192, 880, 881, 882, 883, 0,
	0, 466, 487, 0, 899, 497, 498, 548, 826, 0,
	537, 793, 0, 628, 899, 652, 631, 0, 0, 0,
	901, 0, 904, 697, 533, 698, 0, 0, 316, 316,
	743, 316, 320, 746, 748, 316, 751, 753, 754, 755,
	756, 320, 758, 759, 760, 761, 762, 316, 316, 765,
	766, 316, 316, 769, 316, 316, 0, 0, 741, 742,
	0, 0, 0, 0, 0, 0, 792, 0, 782, 715,
	790, 899, 30, 0, 837, 827, 839, 841, 899, 26,
	0, 833, 0, 820, 846, 610, 847, 578, 0, 583,
	0, 0, 0, 0, 586, 0, 820, 36, 78, 79,
	80, 853, 0, 423, 419, 0, 381, 316, 316, 0,
	0, 0, 0, 0, 0, 369, 370, 372, 375, 399,
	400, 401, 202, 179, 410, 181, 0, 899, 0, 0,
	0, 221, 0, 0, 0, 0, 208, 212, 0, 236,
	0, 238, 0, 0, 0, 317, 283, 284, 339, 285,
	324, 325, 286, 287, 337, 338, 336, 0, 336, 0,
	321, 0, 0, 0, 0, 0, 379, 380, 316, 0,
	0, -2, 0, -2, 0, 0, 141, 142, 138, 123,
	121, 569, 570, 0, 0, 105, 0, 450, 451, 413,
	433, 434, 435, 436, 0, 412, 432, 500, 501, 609,
	0, 699, 632, 681, 327, 328, 903, 0, 703, 706,
	704, 705, 707, 899, 899, 710, 899, 899, 899, 0,
	0, 786, 0, 31, 0, 842, -2, 0, 0, 0,
	43, 34, 0, 0, 559, 561, 562, 563, 564, 565,
	566, 0, 0, 0, 605, 573, 35, 417, 424, 425,
	426, 343, 0, 817, 385, 386, 384, 410, 393, 394,
	0, 0, 410, 411, 412, 399, 899, 376, 0, 0,
	0, 0, 899, 199, 0, 204, 0, 244, 0, 207,
	216, 237, 239, 241, 0, 289, 339, 315, 339, 0,
	0, 0, 0, 0, 611, 0, 0, 0, 0, 144,
	145, 146, 147, 148, 0, 787, 0, 0, 138, 104,
	107, 0, 0, 0, 413, 805, 549, 544, 0, 0,
	0, 0, 0, 0, 733, 714, 783, 0, 840, 0,
	-2, 0, 835, 834, 579, 558, 0, 606, 607, 608,
	557, 365, 344, 0, 346, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 382, 383, 388, 0, 395,
	396, 389, 0, 0, 413, 0, 0, 899, 242, 192,
	195, 196, 0, 222, 0, 0, 304, 305, 319, 322,
	611, 0, 0, 609, 0, 0, 609, 0, 149, 414,
	0, 0, 899, 571, 100, 124, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 812, 0, 516, 0, 0,
	0, 60, 899, 899, 855, 787, 0, 0, -2, 107,
	107, -2, 107, 107, 0, 0, 0, 0, 807, 0,
	899, 546, 709, 708, 711, 712, 0, 0, 0, 0,
	830, 26, 0, 560, 568, 342, 0, 347, 0, 0,
	0, 350, 0, 362, 352, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 242, 0, 188, 0,
	0, 0, 0, 201, 205, 609, 0, 0, 343, 0,
	611, 343, -2, 151, 0, 899, 139, 0, 788, 125,
	820, 48, -2, 50, 0, 905, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 55, 56, 57,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 106, 108, -2, 109, 110, 111, 112, 113, 0,
	0, 0, 460, 0, 0, 25, 899, 899, 0, 809,
	811, 713, 0, 0, 0, 838, -2, 836, 366, 0,
	348, 353, 351, 354, 363, 364, 355, 356, 357, 358,
	359, 360, 410, 410, 0, 0, 398, 242, 243, 0,
	0, 197, 198, 200, 0, 0, 0, 0, 0, 0,
	233, 0, 343, 609, 343, 365, 0, 609, 365, 98,
	0, 415, 150, 99, 136, 0, 0, 67, 824, 0,
	0, 52, 54, 856, 0, 58, 61, 62, 63, 64,
	65, 0, 0, 0, 0, 139, 428, 893, 459, 0,
	0, 0, 808, 806, 545, 0, 899, 734, 0, 737,
	0, 345, 0, 390, 391, 0, 343, 189, 193, 194,
	0, 224, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 365, 343, 90, 88, 612, 343, 92, 899, 0,
	68, 0, 135, 51, 174, 0, 906, 0, 0, 0,
	0, 0, 896, 894, 0, 461, 0, 0, 547, 810,
	735, 0, 349, 0, 365, 223, 225, 234, 0, 87,
	91, 365, 152, 0, 69, 101, 0, 59, 66, 0,
	0, 71, 0, 430, 0, 895, 0, 429, 0, 367,
	0, 397, 0, 89, 137, -2, 0, 0, 102, 897,
	898, 0, 0, 0, 235, 70, 0, 899, 736, 0,
	0, 0, 0, 392, 72, 462, 463,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 377,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 378, 3, 379, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:415
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:420
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:421
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:425
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:448
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:456
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:462
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 25:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:469
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:475
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:479
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:485
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:489
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:496
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:508
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:520
		{
			yyVAL.str = InsertStr
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:524
		{
			yyVAL.str = ReplaceStr
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:530
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:536
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:540
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:544
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:549
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:550
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:554
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:558
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:563
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:567
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:573
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:577
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:581
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:585
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:591
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:595
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:608
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:612
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:618
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:623
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:627
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:633
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:640
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:647
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:654
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:662
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:672
		{
			yyVAL.str = ""
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:676
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:680
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:684
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:688
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:694
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:701
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:711
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:715
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:719
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:726
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:735
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:743
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:754
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:758
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:764
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:768
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:772
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:778
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:782
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:786
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:790
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:796
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:800
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:806
		{
			yyVAL.str = SessionStr
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:810
		{
			yyVAL.str = GlobalStr
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:816
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 87:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:821
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 88:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:841
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 89:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:861
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:882
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 91:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:898
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 92:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:915
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 93:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:934
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 94:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:945
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:957
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:968
		{
			yyVAL.statement = &DBDDL{Action: Create, DBName: string(yyDollar[4].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:972
		{
			yyVAL.statement = &DBDDL{Action: Create, DBName: string(yyDollar[4].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:976
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 99:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:992
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      []Statement{yyDollar[11].statement},
				},
			}
		}
	case 100:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1006
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 101:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1020
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 102:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1033
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[4].colIdent,
					TableName: yyDollar[8].tableName,
					Time:      yyDollar[5].str,
					Event:     yyDollar[6].strs,
					Body:      yyDollar[12].blockStatement,
				},
			}
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1047
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 104:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1058
		{
			yyVAL.statement = &DDL{Action: Create, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1063
		{
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1064
		{
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1068
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1069
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1070
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1071
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1072
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1073
		{
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1074
		{
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1078
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1082
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1086
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1090
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1100
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1104
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1109
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1115
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1119
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1125
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1129
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1135
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1147
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1159
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1166
		{
			yyVAL.empty = struct{}{}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1168
		{
			yyVAL.empty = struct{}{}
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1171
		{
			yyVAL.bytes = nil
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1175
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1179
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1184
		{
			yyVAL.bytes = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1188
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1192
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1196
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1200
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1204
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1209
		{
			yyVAL.expr = nil
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1213
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1218
		{
			yyVAL.expr = nil
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1222
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1227
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1231
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1236
		{
			yyVAL.bytes = nil
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1240
		{
			yyVAL.bytes = nil
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1246
		{
			yyVAL.ddl = &DDL{Action: Create, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1253
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1259
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1263
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1268
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1272
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1276
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1280
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1284
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1290
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1295
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1301
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1317
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1323
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1336
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1341
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1346
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1351
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1357
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1362
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1367
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1372
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1377
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1382
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1387
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1392
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1397
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1406
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1416
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1421
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1426
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1433
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1440
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1448
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1453
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1458
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1463
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1469
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1475
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1481
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1487
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1494
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1498
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1502
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1506
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1510
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1516
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1520
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1524
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1528
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1532
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1536
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1540
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1544
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1548
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1554
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1560
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1566
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1572
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1576
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1581
		{
			yyVAL.sequence = &Sequence{}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1585
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1590
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1595
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1600
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1605
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1610
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1615
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1620
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1625
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1630
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1635
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1640
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 235:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1645
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1652
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1656
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1660
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1664
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1668
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1672
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1677
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1681
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1686
		{
			yyVAL.bytes = nil
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1700
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1705
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1711
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1719
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1723
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1731
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 305:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1962
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1972
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1977
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1982
		{
			yyVAL.optVal = nil
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1986
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1991
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 319:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1995
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2003
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2007
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2013
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2021
		{
			yyVAL.optVal = nil
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2025
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2029
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2038
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2042
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2046
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2051
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2055
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2060
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2064
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2069
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2073
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2077
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2082
		{
			yyVAL.str = ""
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2086
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2090
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2095
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2099
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2103
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2109
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2114
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2118
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2122
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2128
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2132
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2138
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2142
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2148
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2152
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2157
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2161
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2165
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2169
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2173
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2177
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2181
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2185
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2189
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2195
		{
			yyVAL.str = ""
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2199
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2205
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2209
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2215
		{
			yyVAL.indexPartition = nil
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2219
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 367:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2223
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2229
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2233
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2237
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2241
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2245
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2249
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2253
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2257
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2261
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2267
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2271
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2277
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2282
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2288
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2292
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2298
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2303
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2307
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2317
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2322
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2329
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 390:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2336
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 391:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2343
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 392:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2352
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2364
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2368
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2372
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2376
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 397:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2382
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2393
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2403
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2407
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2411
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2417
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2421
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2425
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2429
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2433
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2437
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2443
		{
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2444
		{
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2448
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2452
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2457
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2464
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2468
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2475
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2479
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2485
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2489
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2494
		{
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2495
		{
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2499
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2503
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2509
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2513
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2517
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 427:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2523
		{
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 428:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2527
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 429:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2541
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 430:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2555
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 431:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2574
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 432:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2583
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 433:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2592
		{
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 434:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2596
		{
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 435:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2600
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameTable, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 436:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2605
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2610
		{
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[3].tableName.toViewName(), NewName: yyDollar[3].tableName.toViewName()}
		}
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2614
		{
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 459:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2646
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2652
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2656
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 462:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2662
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 463:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2666
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 464:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2672
		{
			yyVAL.statement = &DDL{Action: RenameTable, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2678
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: Drop, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2686
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2691
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: Drop, Table: yyDollar[4].tableName.toViewName(), IfExists: exists}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2699
		{
			yyVAL.statement = &DBDDL{Action: Drop, DBName: string(yyDollar[4].bytes)}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2703
		{
			yyVAL.statement = &DBDDL{Action: Drop, DBName: string(yyDollar[4].bytes)}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2709
		{
			yyVAL.statement = &DDL{Action: TruncateTable, Table: yyDollar[3].tableName}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2713
		{
			yyVAL.statement = &DDL{Action: TruncateTable, Table: yyDollar[2].tableName}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2718
		{
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2724
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2728
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2732
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2737
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2741
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2745
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2749
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2753
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2757
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2761
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2765
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2769
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2773
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2777
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2781
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2791
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2795
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2801
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2805
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2811
		{
			yyVAL.str = ""
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2815
		{
			yyVAL.str = "extended "
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2821
		{
			yyVAL.str = ""
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2825
		{
			yyVAL.str = "full "
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2831
		{
			yyVAL.str = ""
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2835
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2839
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2845
		{
			yyVAL.showFilter = nil
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2849
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2853
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2859
		{
			yyVAL.str = ""
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2863
		{
			yyVAL.str = SessionStr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2867
		{
			yyVAL.str = GlobalStr
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2873
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2877
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2883
		{
			yyVAL.statement = &Begin{}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2887
		{
			yyVAL.statement = &Begin{}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2893
		{
			yyVAL.statement = &Commit{}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2899
		{
			yyVAL.statement = &Rollback{}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2905
		{
			yyVAL.statement = &OtherRead{}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2909
		{
			yyVAL.statement = &OtherRead{}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2913
		{
			yyVAL.statement = &OtherRead{}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2917
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2921
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2926
		{
			setAllowComments(yylex, true)
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2930
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2936
		{
			yyVAL.bytes2 = nil
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2940
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2946
		{
			yyVAL.str = UnionStr
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2950
		{
			yyVAL.str = UnionAllStr
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2954
		{
			yyVAL.str = UnionDistinctStr
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2959
		{
			yyVAL.str = ""
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2963
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2967
		{
			yyVAL.str = SQLCacheStr
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2972
		{
			yyVAL.str = ""
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2976
		{
			yyVAL.str = DistinctStr
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2981
		{
			yyVAL.str = ""
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2985
		{
			yyVAL.str = StraightJoinHint
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2990
		{
			yyVAL.selectExprs = nil
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2994
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3000
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3004
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3010
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3014
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3018
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3022
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3027
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3031
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3035
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3042
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3047
		{
			yyVAL.overExpr = nil
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3051
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 545:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3055
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3059
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 547:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3063
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3068
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3072
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3078
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3082
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3092
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3096
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3100
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3105
		{
			yyVAL.strs = []string{}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3109
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3115
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3119
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3125
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3129
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3133
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3137
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3141
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3145
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3151
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 568:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3155
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3161
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3166
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3170
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3176
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3180
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3193
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3197
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3201
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3205
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3211
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3213
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3217
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3219
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3223
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3225
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3228
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3230
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3233
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3237
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3241
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3248
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3254
		{
			yyVAL.str = JoinStr
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3258
		{
			yyVAL.str = JoinStr
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3262
		{
			yyVAL.str = JoinStr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3268
		{
			yyVAL.str = StraightJoinStr
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3274
		{
			yyVAL.str = LeftJoinStr
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3278
		{
			yyVAL.str = LeftJoinStr
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3282
		{
			yyVAL.str = RightJoinStr
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3286
		{
			yyVAL.str = RightJoinStr
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3292
		{
			yyVAL.str = NaturalJoinStr
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3296
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3306
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3310
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3316
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3320
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3325
		{
			yyVAL.indexHints = nil
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3329
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3333
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3337
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3342
		{
			yyVAL.expr = nil
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3346
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3351
		{
			yyVAL.columns = nil
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3355
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3361
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3365
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3369
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3373
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3377
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3381
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3385
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3391
		{
			yyVAL.str = ""
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3395
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3401
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3405
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3411
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3415
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3419
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3423
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 628:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3427
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3431
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3435
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 631:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3439
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 632:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3443
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3447
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3453
		{
			yyVAL.str = IsNullStr
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3457
		{
			yyVAL.str = IsNotNullStr
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3461
		{
			yyVAL.str = IsTrueStr
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3465
		{
			yyVAL.str = IsNotTrueStr
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3469
		{
			yyVAL.str = IsFalseStr
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3473
		{
			yyVAL.str = IsNotFalseStr
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3479
		{
			yyVAL.str = EqualStr
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3483
		{
			yyVAL.str = LessThanStr
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3487
		{
			yyVAL.str = GreaterThanStr
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3491
		{
			yyVAL.str = LessEqualStr
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3495
		{
			yyVAL.str = GreaterEqualStr
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3499
		{
			yyVAL.str = NotEqualStr
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3503
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3507
		{
			yyVAL.str = PosixRegexStr
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3511
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3515
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3519
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3524
		{
			yyVAL.expr = nil
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3528
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3534
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3538
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3542
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3548
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3554
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3558
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3564
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3568
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3572
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3576
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3580
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3584
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3588
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3592
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3596
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3600
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3604
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3608
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3612
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3616
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3620
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3624
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3628
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3632
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3636
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3640
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3644
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3648
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 681:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3652
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3656
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3660
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3664
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3672
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3686
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3690
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3694
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3702
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3710
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3718
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 696:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3728
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 697:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3732
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 698:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3736
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 699:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3740
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 700:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3744
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3754
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3758
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 703:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3762
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 704:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3766
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 705:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3770
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 706:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3774
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 707:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3778
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 708:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3782
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 709:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3786
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 710:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3790
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 711:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3794
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 712:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3798
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 713:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3802
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 714:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3806
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 715:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3810
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3814
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3819
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3829
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3833
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3837
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3841
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3846
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3851
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3856
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3861
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3865
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 729:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3879
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3883
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3887
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 732:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3891
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3897
		{
			yyVAL.str = ""
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3901
		{
			yyVAL.str = BooleanModeStr
		}
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3905
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 736:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3909
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3913
		{
			yyVAL.str = QueryExpansionStr
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3923
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3929
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3933
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3937
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3941
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3945
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3949
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3955
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3959
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3963
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3967
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3971
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3975
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3979
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3983
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3987
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3991
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3995
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3999
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4003
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4007
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4011
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4015
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4019
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4023
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4027
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4031
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4035
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4039
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4043
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4047
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4051
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4055
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4065
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4069
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4073
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4077
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4081
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4085
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4089
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 780:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4094
		{
			yyVAL.expr = nil
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4098
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4103
		{
			yyVAL.str = string("")
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4107
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4113
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4117
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 786:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4123
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4128
		{
			yyVAL.empty = struct{}{}
		}
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4130
		{
			yyVAL.empty = struct{}{}
		}
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4133
		{
			yyVAL.expr = nil
		}
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4137
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4143
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4147
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 793:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4151
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4157
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4163
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4167
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4172
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4177
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4181
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4185
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4189
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4201
		{
			yyVAL.expr = &NullVal{}
		}
	case 805:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4206
		{
			yyVAL.exprs = nil
		}
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4210
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 807:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4215
		{
			yyVAL.expr = nil
		}
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4219
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4225
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4229
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4235
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 812:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4240
		{
			yyVAL.orderBy = nil
		}
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4244
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4250
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4254
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4260
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4265
		{
			yyVAL.str = AscScr
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4269
		{
			yyVAL.str = AscScr
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4273
		{
			yyVAL.str = DescScr
		}
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4278
		{
			yyVAL.limit = nil
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4282
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 822:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4286
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 823:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4290
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4295
		{
			yyVAL.str = ""
		}
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4299
		{
			yyVAL.str = ForUpdateStr
		}
	case 826:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4303
		{
			yyVAL.str = ShareModeStr
		}
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4316
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4320
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4324
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 830:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4329
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 831:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4333
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 832:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4337
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4344
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4348
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4352
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 836:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4356
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4361
		{
			yyVAL.updateExprs = nil
		}
	case 838:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4365
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4371
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4375
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4381
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4385
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4391
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4397
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4407
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4411
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4417
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4423
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4427
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 850:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4433
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4437
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4441
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 853:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4446
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4450
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4456
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4462
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4469
		{
			yyVAL.bytes = []byte("charset")
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4476
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4480
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4484
		{
			yyVAL.expr = &Default{}
		}
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4489
		{
			yyVAL.byt = 0
		}
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4491
		{
			yyVAL.byt = 1
		}
	case 865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4494
		{
			yyVAL.empty = struct{}{}
		}
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4496
		{
			yyVAL.empty = struct{}{}
		}
	case 867:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4499
		{
			yyVAL.str = ""
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4501
		{
			yyVAL.str = IgnoreStr
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4505
		{
			yyVAL.empty = struct{}{}
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4507
		{
			yyVAL.empty = struct{}{}
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4509
		{
			yyVAL.empty = struct{}{}
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4511
		{
			yyVAL.empty = struct{}{}
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4513
		{
			yyVAL.empty = struct{}{}
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4515
		{
			yyVAL.empty = struct{}{}
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4517
		{
			yyVAL.empty = struct{}{}
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4519
		{
			yyVAL.empty = struct{}{}
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4521
		{
			yyVAL.empty = struct{}{}
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4523
		{
			yyVAL.empty = struct{}{}
		}
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4526
		{
			yyVAL.empty = struct{}{}
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4528
		{
			yyVAL.empty = struct{}{}
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4530
		{
			yyVAL.empty = struct{}{}
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4534
		{
			yyVAL.empty = struct{}{}
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4536
		{
			yyVAL.empty = struct{}{}
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4540
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4544
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4551
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4557
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4561
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4566
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4573
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 893:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4579
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4583
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 895:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4587
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4593
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4597
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4601
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 899:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4607
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4611
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 901:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4618
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4625
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4629
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4636
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4642
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4646
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4957
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4966
		{
			decNesting(yylex)
		}
	case 1192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4971
		{
			forceEOF(yylex)
		}
	case 1193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4976
		{
			forceEOF(yylex)
		}
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4980
		{
			forceEOF(yylex)
		}
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4984
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
