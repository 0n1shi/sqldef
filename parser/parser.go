// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const STATUS = 57489
const VARIABLES = 57490
const RESTRICT = 57491
const CASCADE = 57492
const NO = 57493
const ACTION = 57494
const PERMISSIVE = 57495
const RESTRICTIVE = 57496
const PUBLIC = 57497
const CURRENT_USER = 57498
const SESSION_USER = 57499
const PAD_INDEX = 57500
const FILLFACTOR = 57501
const IGNORE_DUP_KEY = 57502
const STATISTICS_NORECOMPUTE = 57503
const STATISTICS_INCREMENTAL = 57504
const ALLOW_ROW_LOCKS = 57505
const ALLOW_PAGE_LOCKS = 57506
const BEFORE = 57507
const AFTER = 57508
const EACH = 57509
const ROW = 57510
const SCROLL = 57511
const CURSOR = 57512
const OPEN = 57513
const CLOSE = 57514
const FETCH = 57515
const PRIOR = 57516
const FIRST = 57517
const LAST = 57518
const DEALLOCATE = 57519
const INSTEAD = 57520
const OF = 57521
const DEFERRABLE = 57522
const INITIALLY = 57523
const IMMEDIATE = 57524
const DEFERRED = 57525
const CONCURRENTLY = 57526
const SQL = 57527
const SECURITY = 57528
const BEGIN = 57529
const START = 57530
const TRANSACTION = 57531
const COMMIT = 57532
const ROLLBACK = 57533
const BIT = 57534
const TINYINT = 57535
const SMALLINT = 57536
const SMALLSERIAL = 57537
const MEDIUMINT = 57538
const INT = 57539
const INTEGER = 57540
const SERIAL = 57541
const BIGINT = 57542
const BIGSERIAL = 57543
const INTNUM = 57544
const REAL = 57545
const DOUBLE = 57546
const PRECISION = 57547
const FLOAT_TYPE = 57548
const DECIMAL = 57549
const NUMERIC = 57550
const SMALLMONEY = 57551
const MONEY = 57552
const TIME = 57553
const TIMESTAMP = 57554
const DATETIME = 57555
const YEAR = 57556
const DATETIMEOFFSET = 57557
const DATETIME2 = 57558
const SMALLDATETIME = 57559
const CHAR = 57560
const VARCHAR = 57561
const VARYING = 57562
const BOOL = 57563
const CHARACTER = 57564
const VARBINARY = 57565
const NCHAR = 57566
const NVARCHAR = 57567
const NTEXT = 57568
const UUID = 57569
const TEXT = 57570
const TINYTEXT = 57571
const MEDIUMTEXT = 57572
const LONGTEXT = 57573
const CITEXT = 57574
const BLOB = 57575
const TINYBLOB = 57576
const MEDIUMBLOB = 57577
const LONGBLOB = 57578
const JSON = 57579
const JSONB = 57580
const ENUM = 57581
const GEOMETRY = 57582
const POINT = 57583
const LINESTRING = 57584
const POLYGON = 57585
const GEOMETRYCOLLECTION = 57586
const MULTIPOINT = 57587
const MULTILINESTRING = 57588
const MULTIPOLYGON = 57589
const VARIADIC = 57590
const ARRAY = 57591
const NOW = 57592
const GETDATE = 57593
const BPCHAR = 57594
const TEXT_PATTERN_OPS = 57595
const NULLX = 57596
const AUTO_INCREMENT = 57597
const APPROXNUM = 57598
const SIGNED = 57599
const UNSIGNED = 57600
const ZEROFILL = 57601
const ZONE = 57602
const AUTOINCREMENT = 57603
const DATABASES = 57604
const TABLES = 57605
const VSCHEMA_TABLES = 57606
const EXTENDED = 57607
const FULL = 57608
const PROCESSLIST = 57609
const NAMES = 57610
const CHARSET = 57611
const GLOBAL = 57612
const SESSION = 57613
const ISOLATION = 57614
const LEVEL = 57615
const READ = 57616
const WRITE = 57617
const ONLY = 57618
const REPEATABLE = 57619
const COMMITTED = 57620
const UNCOMMITTED = 57621
const SERIALIZABLE = 57622
const NEW = 57623
const CONCAT_NULL_YIELDS_NULL = 57624
const CURSOR_CLOSE_ON_COMMIT = 57625
const QUOTED_IDENTIFIER = 57626
const ARITHABORT = 57627
const FMTONLY = 57628
const NOCOUNT = 57629
const NOEXEC = 57630
const NUMERIC_ROUNDABORT = 57631
const ANSI_DEFAULTS = 57632
const ANSI_NULL_DFLT_OFF = 57633
const ANSI_NULL_DFLT_ON = 57634
const ANSI_NULLS = 57635
const ANSI_PADDING = 57636
const ANSI_WARNINGS = 57637
const FORCEPLAN = 57638
const SHOWPLAN_ALL = 57639
const SHOWPLAN_TEXT = 57640
const SHOWPLAN_XML = 57641
const IMPLICIT_TRANSACTIONS = 57642
const REMOTE_PROC_TRANSACTIONS = 57643
const XACT_ABORT = 57644
const CURRENT_TIMESTAMP = 57645
const DATABASE = 57646
const CURRENT_DATE = 57647
const CURRENT_TIME = 57648
const LOCALTIME = 57649
const LOCALTIMESTAMP = 57650
const UTC_DATE = 57651
const UTC_TIME = 57652
const UTC_TIMESTAMP = 57653
const REPLACE = 57654
const CONVERT = 57655
const CAST = 57656
const SUBSTR = 57657
const SUBSTRING = 57658
const GROUP_CONCAT = 57659
const SEPARATOR = 57660
const INHERIT = 57661
const LEAD = 57662
const LAG = 57663
const MATCH = 57664
const AGAINST = 57665
const BOOLEAN = 57666
const LANGUAGE = 57667
const WITH = 57668
const WITHOUT = 57669
const PARSER = 57670
const QUERY = 57671
const EXPANSION = 57672
const UNUSED = 57673
const VIRTUAL = 57674
const STORED = 57675
const GENERATED = 57676
const ALWAYS = 57677
const IDENTITY = 57678
const SEQUENCE = 57679
const INCREMENT = 57680
const MINVALUE = 57681
const CACHE = 57682
const CYCLE = 57683
const OWNED = 57684
const NONE = 57685
const CLUSTERED = 57686
const NONCLUSTERED = 57687
const REPLICATION = 57688
const COLUMNSTORE = 57689
const INCLUDE = 57690
const HOLDLOCK = 57691
const NOLOCK = 57692
const NOWAIT = 57693
const PAGLOCK = 57694
const ROWLOCK = 57695
const TABLELOCK = 57696
const DEFINER = 57697
const INVOKER = 57698
const TYPECAST = 57699
const CHECK = 57700
const OVER = 57701

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	130, 387,
	-2, 143,
	-1, 461,
	59, 362,
	-2, 359,
	-1, 480,
	119, 773,
	-2, 232,
	-1, 498,
	119, 771,
	-2, 767,
	-1, 499,
	119, 772,
	-2, 768,
	-1, 603,
	119, 773,
	-2, 232,
	-1, 625,
	266, 782,
	-2, 680,
	-1, 660,
	266, 782,
	-2, 427,
	-1, 690,
	5, 33,
	-2, 13,
	-1, 696,
	5, 33,
	-2, 15,
	-1, 832,
	266, 782,
	-2, 427,
	-1, 978,
	119, 775,
	-2, 770,
	-1, 989,
	266, 782,
	-2, 301,
	-1, 1058,
	266, 782,
	-2, 427,
	-1, 1118,
	58, 95,
	-2, 162,
	-1, 1121,
	58, 95,
	-2, 162,
	-1, 1170,
	5, 34,
	-2, 553,
	-1, 1240,
	5, 33,
	-2, 14,
	-1, 1253,
	187, 60,
	-2, 162,
	-1, 1294,
	58, 95,
	-2, 161,
	-1, 1416,
	86, 951,
	-2, 92,
	-1, 1420,
	86, 944,
	-2, 757,
	-1, 1502,
	55, 47,
	57, 47,
	-2, 49,
	-1, 1661,
	5, 33,
	-2, 728,
	-1, 1686,
	5, 33,
	-2, 56,
	-1, 1754,
	5, 34,
	-2, 729,
	-1, 1784,
	5, 33,
	-2, 731,
	-1, 1805,
	5, 34,
	-2, 732,
}

const yyPrivate = 57344

const yyLast = 17541

var yyAct = [...]int16{
	499, 1593, 1679, 1763, 1712, 985, 1611, 615, 1713, 795,
	1392, 1525, 33, 1709, 587, 1652, 1084, 33, 33, 110,
	1684, 1594, 1070, 1538, 1671, 1527, 123, 1537, 1512, 1400,
	1414, 33, 33, 1586, 1401, 1087, 901, 874, 1090, 1523,
	1257, 703, 1411, 1254, 1397, 1166, 1234, 685, 513, 889,
	1127, 1229, 913, 26, 1101, 1393, 1150, 962, 590, 988,
	122, 651, 1160, 580, 1066, 1025, 598, 725, 1028, 447,
	450, 284, 684, 1039, 939, 1308, 250, 605, 977, 1053,
	130, 124, 850, 585, 556, 878, 125, 822, 453, 30,
	794, 568, 189, 586, 104, 105, 198, 218, 299, 854,
	33, 33, 477, 298, 479, 233, 485, 213, 129, 129,
	1332, 252, 113, 502, 110, 975, 1583, 9, 1293, 1216,
	110, 248, 33, 755, 756, 757, 758, 759, 752, 752,
	563, 762, 762, 1417, 1494, 813, 760, 761, 753, 754,
	755, 756, 757, 758, 759, 752, 1648, 762, 762, 652,
	266, 751, 750, 760, 761, 753, 754, 755, 756, 757,
	758, 759, 752, 1067, 1406, 762, 750, 760, 761, 753,
	754, 755, 756, 757, 758, 759, 752, 190, 193, 762,
	294, 295, 569, 107, 753, 754, 755, 756, 757, 758,
	759, 752, 110, 33, 762, 110, 115, 110, 110, 30,
	110, 570, 571, 475, 731, 572, 33, 110, 110, 116,
	117, 1807, 110, 33, 194, 1744, 196, 1803, 1474, 1702,
	898, 835, 1132, 251, 33, 207, 1764, 1765, 1766, 1767,
	1768, 1769, 306, 1353, 1354, 33, 929, 930, 1680, 693,
	1131, 1114, 1104, 1103, 1467, 110, 693, 1796, 1114, 1104,
	1103, 525, 526, 1105, 215, 1386, 1163, 1224, 286, 1743,
	1105, 1348, 1701, 1323, 1106, 1464, 118, 1735, 1736, 493,
	290, 1106, 1622, 1623, 1690, 1734, 309, 1689, 208, 1539,
	1691, 1540, 1621, 129, 210, 307, 846, 1450, 110, 33,
	446, 864, 110, 254, 268, 269, 270, 271, 279, 863,
	504, 454, 524, 521, 789, 1340, 33, 1355, 871, 256,
	267, 1036, 465, 469, 259, 489, 1330, 517, 518, 519,
	520, 490, 677, 492, 491, 1795, 496, 676, 282, 751,
	750, 760, 761, 753, 754, 755, 756, 757, 758, 759,
	752, 1182, 487, 762, 1180, 1739, 444, 1634, 245, 1433,
	1245, 195, 1697, 1696, 248, 249, 289, 1637, 228, 292,
	1557, 296, 297, 101, 303, 1638, 532, 200, 1112, 564,
	543, 304, 438, 1533, 1635, 1112, 441, 1244, 1111, 236,
	1554, 1086, 919, 545, 1151, 1111, 1587, 25, 699, 700,
	763, 763, 875, 1649, 243, 1781, 231, 570, 571, 460,
	544, 1302, 199, 232, 733, 1359, 763, 763, 506, 471,
	732, 508, 1283, 511, 512, 468, 467, 1361, 1473, 710,
	1475, 1107, 1108, 1110, 763, 200, 455, 1109, 1107, 1108,
	1110, 229, 1331, 102, 1109, 846, 711, 548, 763, 896,
	20, 713, 15, 33, 562, 550, 1561, 1738, 230, 1126,
	33, 114, 531, 763, 1356, 16, 535, 23, 27, 728,
	882, 239, 458, 234, 244, 537, 103, 574, 1683, 1682,
	461, 241, 240, 17, 18, 1681, 260, 100, 579, 1556,
	99, 119, 746, 283, 749, 267, 112, 230, 1612, 1614,
	764, 765, 766, 767, 768, 769, 770, 555, 747, 748,
	745, 771, 772, 773, 774, 751, 750, 760, 761, 753,
	754, 755, 756, 757, 758, 759, 752, 551, 836, 762,
	446, 440, 723, 723, 1466, 779, 780, 557, 1192, 1132,
	201, 202, 1800, 229, 1478, 110, 6, 7, 549, 474,
	1757, 1650, 110, 203, 33, 489, 653, 33, 1542, 33,
	230, 554, 1700, 33, 1365, 663, 496, 665, 1196, 1168,
	668, 669, 1115, 214, 1057, 1284, 1285, 1286, 793, 1115,
	1613, 573, 487, 575, 1191, 792, 553, 523, 527, 33,
	529, 648, 737, 650, 456, 457, 459, 743, 201, 202,
	661, 691, 206, 691, 726, 727, 729, 237, 515, 514,
	686, 203, 763, 238, 1357, 1358, 1360, 1362, 1363, 1376,
	1740, 687, 671, 1122, 742, 263, 1692, 1631, 265, 946,
	738, 704, 796, 740, 708, 29, 712, 690, 730, 696,
	446, 807, 1693, 944, 945, 943, 1669, 779, 780, 742,
	1541, 702, 707, 777, 1143, 736, 1142, 1141, 706, 714,
	695, 914, 915, 33, 1140, 1139, 704, 1138, 664, 1137,
	19, 735, 33, 846, 1135, 790, 855, 1657, 1350, 672,
	853, 691, 21, 22, 1190, 24, 246, 1694, 247, 844,
	1088, 741, 740, 33, 110, 1029, 716, 1174, 921, 1173,
	33, 1029, 452, 1201, 741, 740, 110, 209, 742, 688,
	242, 1432, 741, 740, 1309, 204, 701, 1424, 741, 740,
	33, 742, 452, 859, 33, 741, 740, 1378, 1309, 742,
	827, 33, 1352, 1209, 1310, 742, 828, 741, 740, 918,
	129, 873, 742, 33, 852, 216, 1239, 917, 1310, 446,
	925, 741, 740, 487, 742, 464, 931, 932, 686, 691,
	1571, 1570, 839, 940, 867, 1468, 1377, 1472, 742, 687,
	868, 452, 741, 740, 739, 451, 577, 704, 815, 816,
	817, 818, 819, 820, 821, 741, 740, 942, 763, 742,
	33, 33, 741, 740, 1471, 880, 510, 895, 33, 452,
	509, 897, 742, 1470, 33, 858, 916, 463, 557, 742,
	613, 920, 1469, 796, 941, 912, 987, 1018, 1311, 1307,
	923, 892, 505, 934, 936, 937, 1044, 1019, 1021, 108,
	935, 922, 866, 1030, 860, 924, 862, 1153, 1154, 1155,
	848, 847, 865, 691, 647, 505, 505, 530, 528, 501,
	963, 1042, 964, 845, 968, 965, 1569, 1167, 869, 577,
	828, 967, 691, 791, 791, 1136, 33, 972, 972, 861,
	881, 522, 978, 970, 973, 974, 470, 890, 846, 693,
	446, 446, 984, 986, 875, 1790, 1789, 846, 1024, 890,
	1788, 1022, 1133, 33, 1242, 1777, 1022, 969, 983, 1733,
	846, 33, 1756, 846, 1659, 33, 720, 1639, 693, 1660,
	1114, 1104, 1103, 1509, 846, 1037, 670, 1040, 1041, 1059,
	567, 1060, 1105, 566, 108, 1038, 1706, 846, 1368, 577,
	108, 1046, 1292, 1106, 565, 1048, 976, 979, 462, 1506,
	1227, 1074, 1149, 1055, 890, 1485, 1129, 720, 1445, 686,
	1242, 1444, 1441, 1440, 1590, 1068, 1505, 1091, 720, 1437,
	687, 940, 1514, 1517, 1518, 1519, 1515, 1212, 1516, 1520,
	1085, 693, 1672, 1673, 720, 1436, 720, 1369, 1089, 1049,
	846, 1710, 1118, 1507, 1668, 1505, 693, 1633, 1114, 1104,
	1103, 890, 1069, 981, 846, 1225, 33, 1169, 890, 928,
	1105, 1783, 108, 720, 719, 108, 1225, 108, 108, 1508,
	108, 1106, 941, 680, 679, 674, 675, 308, 108, 674,
	673, 577, 108, 1117, 121, 120, 1581, 875, 1156, 1243,
	1211, 1242, 1195, 1116, 1063, 1509, 542, 1112, 541, 1062,
	1509, 542, 110, 790, 1061, 1202, 1045, 1111, 891, 870,
	849, 1668, 546, 841, 838, 108, 667, 666, 662, 497,
	1668, 1752, 693, 981, 1509, 33, 1620, 1534, 1407, 1049,
	1379, 1049, 1049, 1055, 1175, 1179, 33, 890, 1194, 720,
	837, 678, 542, 682, 681, 1183, 577, 1232, 1235, 1728,
	1107, 1108, 1110, 1726, 1698, 256, 1109, 1438, 108, 1672,
	1673, 1778, 108, 1226, 1246, 285, 1200, 1147, 1146, 1198,
	1125, 1124, 577, 1065, 1064, 1112, 33, 1043, 33, 33,
	33, 1236, 894, 1223, 872, 1111, 689, 110, 1289, 33,
	33, 33, 33, 33, 33, 33, 33, 978, 1221, 33,
	691, 686, 1055, 33, 1217, 446, 1219, 1222, 691, 1248,
	659, 1220, 687, 557, 1238, 658, 1247, 33, 33, 1214,
	1514, 1517, 1518, 1519, 1515, 656, 1516, 1520, 1107, 1108,
	1110, 578, 1710, 1319, 1109, 533, 1237, 280, 1305, 33,
	476, 472, 1300, 1301, 1240, 1287, 1290, 449, 287, 288,
	1675, 1338, 189, 1253, 273, 1279, 1280, 1281, 1249, 1250,
	1251, 976, 1255, 272, 261, 1320, 1294, 1118, 1118, 1294,
	1118, 1118, 557, 557, 11, 1321, 1303, 1351, 1128, 1152,
	1306, 683, 1317, 1318, 534, 1312, 1313, 1314, 1315, 1316,
	1326, 1115, 291, 197, 1085, 557, 582, 33, 1384, 1333,
	902, 1371, 1337, 1335, 1678, 1677, 1349, 1602, 1295, 1296,
	1297, 1298, 1299, 33, 904, 1601, 446, 1742, 1605, 1388,
	1341, 110, 110, 1606, 33, 1603, 33, 1079, 1080, 1381,
	1604, 1607, 1579, 1518, 1519, 1488, 978, 809, 1372, 1631,
	448, 1394, 1547, 1230, 446, 516, 646, 616, 1750, 497,
	1409, 1291, 1549, 33, 914, 915, 1231, 439, 1380, 305,
	1522, 1399, 1373, 1083, 884, 33, 885, 886, 887, 1115,
	1390, 645, 1334, 1395, 704, 1076, 1077, 1749, 540, 883,
	1404, 1617, 538, 536, 840, 481, 482, 483, 903, 205,
	1387, 1026, 1435, 486, 484, 494, 495, 1228, 1339, 1031,
	1347, 129, 1423, 446, 497, 108, 888, 698, 561, 1071,
	1574, 1434, 108, 1430, 1476, 1072, 875, 1632, 1748, 1708,
	905, 906, 907, 908, 909, 910, 911, 1225, 1465, 1429,
	1425, 300, 301, 302, 1797, 1428, 33, 1427, 1426, 1325,
	1324, 1145, 1294, 560, 559, 1375, 1144, 466, 1451, 1446,
	877, 879, 1504, 1489, 1490, 1235, 709, 893, 1442, 1443,
	8, 1, 1447, 1448, 1256, 13, 110, 110, 12, 1651,
	1215, 293, 1479, 1165, 788, 602, 110, 110, 33, 1636,
	1555, 588, 1762, 33, 1408, 1398, 1252, 1389, 1282, 500,
	33, 1484, 235, 1210, 473, 1487, 1491, 14, 1385, 1241,
	697, 539, 1304, 1492, 899, 722, 221, 212, 715, 33,
	33, 1503, 1550, 446, 1552, 1370, 1498, 1495, 1497, 1374,
	442, 1531, 28, 10, 1134, 1535, 222, 1493, 220, 219,
	691, 857, 217, 503, 1404, 1548, 253, 258, 281, 128,
	1553, 1551, 126, 127, 131, 1412, 1521, 110, 1560, 1367,
	1543, 547, 497, 1052, 108, 1532, 1558, 775, 1091, 1688,
	446, 1419, 1717, 1233, 1747, 1707, 108, 1544, 1199, 1334,
	1582, 110, 806, 1027, 589, 110, 110, 933, 601, 600,
	110, 110, 110, 110, 110, 599, 557, 1559, 900, 1658,
	488, 493, 110, 1595, 744, 110, 1403, 1499, 1513, 110,
	1511, 1510, 1576, 33, 1674, 33, 1589, 1670, 1402, 1596,
	1580, 1463, 1599, 33, 1591, 1597, 1598, 1626, 1600, 1608,
	33, 1647, 1585, 1078, 1616, 1383, 1102, 876, 1081, 1409,
	1501, 1502, 110, 1404, 1619, 1618, 5, 1113, 1404, 1404,
	1404, 1404, 1404, 490, 1100, 492, 491, 4, 3, 691,
	1653, 927, 110, 1404, 1099, 1098, 1022, 1097, 1481, 1095,
	1483, 110, 1628, 308, 1096, 1093, 1094, 1092, 1073, 857,
	857, 692, 2, 0, 1023, 857, 1497, 1247, 1497, 1023,
	129, 0, 446, 1642, 0, 983, 33, 0, 0, 0,
	446, 1656, 0, 0, 1676, 0, 1482, 1629, 0, 1654,
	1665, 1486, 857, 857, 857, 857, 0, 0, 980, 982,
	1404, 691, 0, 0, 1687, 1695, 0, 0, 0, 1404,
	0, 33, 857, 0, 1032, 1033, 1034, 0, 1035, 0,
	0, 1711, 0, 33, 33, 1588, 1562, 0, 1714, 0,
	1592, 0, 691, 497, 1595, 1724, 1627, 1661, 1725, 0,
	0, 1727, 0, 1595, 1719, 0, 0, 1585, 0, 1705,
	1723, 0, 0, 1685, 1047, 0, 1050, 1051, 1737, 33,
	0, 0, 1720, 1577, 0, 1722, 0, 1578, 1686, 0,
	0, 0, 1653, 0, 0, 1741, 0, 691, 0, 0,
	0, 796, 1746, 0, 1082, 1751, 1641, 33, 446, 0,
	33, 33, 33, 110, 33, 0, 0, 1022, 0, 0,
	1718, 1685, 0, 1759, 1773, 1760, 1022, 576, 0, 0,
	1775, 1497, 0, 1716, 1779, 796, 0, 33, 33, 1780,
	1714, 1782, 0, 0, 0, 0, 654, 0, 1761, 1148,
	0, 1770, 1771, 1772, 660, 0, 1085, 0, 0, 0,
	1794, 0, 0, 0, 1703, 0, 0, 0, 1798, 0,
	0, 1714, 0, 0, 1801, 0, 1585, 1802, 0, 1804,
	0, 33, 0, 0, 704, 0, 0, 704, 704, 704,
	691, 1774, 1595, 1164, 694, 0, 694, 0, 781, 782,
	783, 784, 785, 786, 787, 0, 857, 1170, 1171, 0,
	1172, 1497, 1204, 0, 1786, 1787, 0, 0, 1655, 0,
	691, 0, 734, 0, 0, 0, 1784, 1664, 0, 1666,
	857, 1667, 0, 0, 0, 0, 0, 0, 308, 857,
	0, 776, 778, 0, 0, 497, 0, 0, 1197, 0,
	0, 0, 0, 0, 1203, 1022, 1799, 0, 1806, 0,
	0, 1205, 1206, 660, 1207, 1208, 255, 0, 0, 0,
	0, 0, 1213, 0, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 0, 808, 0, 810, 811, 812, 814,
	814, 814, 814, 814, 814, 814, 814, 108, 831, 832,
	833, 834, 0, 1721, 693, 0, 1114, 1104, 1103, 0,
	0, 0, 693, 0, 1114, 1104, 1103, 0, 1105, 0,
	0, 0, 0, 0, 0, 0, 1105, 0, 0, 1106,
	0, 0, 0, 0, 0, 0, 0, 1106, 0, 0,
	0, 0, 0, 0, 0, 660, 0, 0, 0, 0,
	0, 938, 694, 0, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 0,
	0, 0, 0, 1322, 0, 0, 0, 308, 0, 0,
	0, 0, 0, 1630, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 926, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 262, 0, 0, 264, 0, 1020,
	0, 0, 0, 0, 0, 0, 0, 0, 1460, 846,
	0, 1461, 0, 0, 274, 275, 276, 277, 278, 0,
	0, 108, 108, 1112, 0, 0, 694, 0, 0, 0,
	0, 1112, 0, 1111, 1366, 0, 0, 0, 0, 0,
	0, 1111, 0, 0, 0, 797, 0, 0, 0, 0,
	0, 1382, 751, 750, 760, 761, 753, 754, 755, 756,
	757, 758, 759, 752, 0, 0, 762, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1107, 1108, 1110, 0,
	0, 1458, 1109, 0, 1107, 1108, 1110, 0, 0, 0,
	1109, 0, 0, 751, 750, 760, 761, 753, 754, 755,
	756, 757, 758, 759, 752, 1457, 1058, 762, 0, 0,
	0, 0, 0, 0, 0, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 1075, 751, 750, 760, 761, 753,
	754, 755, 756, 757, 758, 759, 752, 0, 0, 762,
	0, 1157, 1158, 1159, 0, 0, 0, 0, 0, 1452,
	0, 1453, 1454, 0, 857, 1455, 1456, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 108, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 1529, 1477, 0,
	1327, 0, 0, 0, 0, 0, 781, 751, 750, 760,
	761, 753, 754, 755, 756, 757, 758, 759, 752, 0,
	0, 762, 0, 0, 751, 750, 760, 761, 753, 754,
	755, 756, 757, 758, 759, 752, 0, 1115, 762, 0,
	0, 0, 0, 0, 1058, 1115, 1162, 751, 750, 760,
	761, 753, 754, 755, 756, 757, 758, 759, 752, 0,
	0, 762, 0, 0, 0, 0, 0, 1573, 0, 0,
	751, 750, 760, 761, 753, 754, 755, 756, 757, 758,
	759, 752, 0, 0, 762, 1631, 1193, 0, 0, 0,
	0, 108, 0, 1496, 0, 108, 108, 1568, 1161, 1023,
	108, 108, 108, 108, 108, 0, 0, 0, 0, 0,
	0, 0, 1609, 1575, 0, 108, 0, 0, 0, 1529,
	0, 0, 0, 0, 0, 0, 0, 0, 1288, 0,
	751, 750, 760, 761, 753, 754, 755, 756, 757, 758,
	759, 752, 0, 694, 762, 763, 0, 823, 0, 0,
	0, 694, 108, 0, 0, 0, 0, 1610, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 655, 657, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 1328, 1329,
	902, 108, 825, 0, 0, 0, 763, 0, 0, 0,
	0, 0, 0, 1640, 904, 0, 0, 1643, 1644, 1645,
	1646, 0, 0, 0, 0, 0, 0, 0, 1342, 1343,
	1344, 1345, 1346, 0, 0, 0, 0, 0, 763, 751,
	750, 760, 761, 753, 754, 755, 756, 757, 758, 759,
	752, 0, 823, 762, 721, 724, 0, 0, 0, 0,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	1023, 182, 183, 0, 184, 185, 186, 188, 187, 1023,
	966, 826, 0, 0, 0, 0, 0, 825, 903, 132,
	824, 0, 0, 0, 0, 830, 829, 0, 0, 0,
	763, 1699, 0, 0, 1364, 1704, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 763, 0, 0,
	905, 906, 907, 908, 909, 910, 911, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1732, 1405,
	763, 0, 0, 1529, 0, 172, 173, 174, 175, 176,
	177, 178, 179, 180, 181, 0, 0, 0, 0, 1745,
	0, 0, 0, 763, 1449, 0, 826, 0, 0, 1753,
	1754, 1755, 0, 1758, 132, 824, 0, 0, 0, 0,
	830, 829, 0, 0, 721, 693, 0, 1114, 1104, 1103,
	0, 1439, 133, 693, 0, 1114, 1104, 1103, 0, 1105,
	0, 0, 693, 0, 1114, 1104, 1103, 1105, 1023, 0,
	1106, 0, 0, 0, 0, 0, 1105, 0, 1106, 0,
	0, 0, 0, 763, 1791, 1792, 1793, 1106, 0, 0,
	0, 0, 0, 0, 0, 693, 1462, 1114, 1104, 1103,
	0, 0, 0, 693, 0, 1114, 1104, 1103, 0, 1105,
	0, 0, 0, 1805, 0, 0, 0, 1105, 0, 0,
	1106, 0, 0, 0, 1776, 0, 0, 0, 1106, 0,
	0, 0, 1584, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1130, 0,
	0, 0, 0, 1524, 1563, 1564, 0, 1565, 1566, 1567,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 763, 0, 1112, 0, 0, 0, 0, 0,
	0, 0, 1112, 0, 1111, 0, 0, 0, 0, 0,
	0, 1112, 1111, 0, 0, 0, 0, 0, 0, 0,
	0, 1111, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
	1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1278, 0, 1112, 0, 0, 1107, 1108, 1110,
	0, 0, 1112, 1109, 1111, 1107, 1108, 1110, 0, 0,
	0, 1109, 1111, 0, 1107, 1108, 1110, 0, 0, 0,
	1109, 0, 1405, 0, 0, 0, 0, 1405, 1405, 1405,
	1405, 1405, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1524, 0, 1615, 0, 0, 1107, 1108, 1110,
	0, 0, 0, 1109, 0, 1107, 1108, 1110, 0, 0,
	0, 1109, 0, 1431, 0, 0, 0, 0, 0, 0,
	0, 1391, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1405,
	0, 0, 0, 0, 1662, 1663, 0, 0, 1405, 0,
	0, 0, 0, 0, 0, 0, 1176, 1177, 0, 1178,
	0, 0, 0, 0, 1181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 694, 1184, 1185, 1115, 0,
	1186, 1187, 0, 1188, 1189, 0, 1115, 0, 0, 0,
	0, 0, 0, 0, 0, 1115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1715, 0,
	694, 0, 0, 0, 0, 0, 0, 0, 1115, 0,
	0, 0, 0, 0, 0, 0, 1115, 0, 0, 1729,
	1730, 1731, 0, 0, 0, 0, 0, 0, 424, 413,
	0, 372, 426, 342, 360, 434, 362, 363, 399, 321,
	382, 58, 357, 339, 36, 345, 314, 352, 315, 343,
	374, 43, 340, 0, 415, 385, 49, 96, 0, 432,
	52, 390, 0, 75, 56, 0, 0, 377, 417, 380,
	408, 371, 400, 329, 389, 427, 358, 395, 428, 0,
	0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
	1715, 0, 0, 1785, 394, 422, 354, 437, 0, 398,
	313, 392, 0, 319, 322, 433, 420, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 376, 381, 405, 368,
	0, 1715, 0, 694, 0, 0, 0, 0, 0, 0,
	0, 0, 346, 0, 388, 0, 0, 0, 326, 320,
	0, 373, 0, 0, 0, 328, 0, 347, 406, 0,
	310, 411, 418, 370, 55, 84, 421, 367, 366, 0,
	0, 0, 0, 0, 0, 359, 50, 403, 435, 425,
	378, 416, 344, 353, 0, 351, 67, 59, 80, 387,
	401, 65, 53, 78, 62, 79, 423, 77, 83, 70,
	38, 57, 34, 61, 66, 0, 42, 0, 89, 90,
	91, 92, 93, 94, 95, 318, 311, 348, 409, 412,
	333, 397, 323, 355, 404, 356, 379, 338, 0, 0,
	0, 0, 0, 0, 0, 74, 73, 37, 76, 1413,
	40, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	0, 0, 0, 1176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 87,
	88, 317, 337, 419, 85, 0, 0, 0, 1422, 1420,
	1416, 1415, 48, 54, 64, 86, 396, 68, 41, 81,
	72, 1418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 336, 330, 331, 383, 384, 429,
	430, 431, 407, 327, 0, 334, 335, 0, 414, 47,
	97, 98, 386, 35, 0, 51, 436, 0, 0, 63,
	45, 82, 0, 0, 361, 312, 365, 0, 0, 0,
	0, 0, 0, 0, 324, 325, 69, 0, 369, 364,
	391, 393, 402, 410, 0, 341, 375, 424, 413, 0,
	372, 426, 342, 360, 434, 362, 363, 399, 321, 382,
	58, 357, 339, 36, 345, 314, 352, 315, 343, 374,
	43, 340, 0, 415, 385, 49, 96, 0, 432, 52,
	390, 0, 75, 56, 0, 0, 377, 417, 380, 408,
	371, 400, 329, 389, 427, 358, 395, 428, 0, 0,
	0, 32, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 394, 422, 354, 437, 0, 398, 313,
	392, 0, 319, 322, 433, 420, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 376, 381, 405, 368, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 388, 0, 0, 0, 326, 320, 0,
	373, 0, 0, 0, 328, 0, 347, 406, 0, 310,
	411, 418, 370, 55, 84, 421, 367, 366, 0, 0,
	0, 0, 0, 0, 359, 50, 403, 435, 425, 378,
	416, 344, 353, 0, 351, 67, 59, 80, 387, 401,
	65, 53, 78, 62, 79, 423, 77, 83, 70, 38,
	57, 34, 61, 66, 0, 42, 0, 89, 90, 91,
	92, 93, 94, 95, 318, 311, 348, 409, 412, 333,
	397, 323, 355, 404, 356, 379, 338, 0, 0, 0,
	0, 0, 0, 0, 74, 73, 37, 76, 1536, 40,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 0, 0, 87, 88,
	317, 337, 419, 85, 0, 0, 0, 1422, 1420, 46,
	0, 48, 54, 64, 86, 396, 68, 41, 81, 72,
	1418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 332, 336, 330, 331, 383, 384, 429, 430,
	431, 407, 327, 0, 334, 335, 0, 414, 47, 97,
	98, 386, 35, 0, 51, 436, 0, 0, 63, 45,
	82, 0, 0, 361, 312, 365, 0, 0, 0, 0,
	0, 0, 0, 324, 325, 69, 0, 369, 364, 391,
	393, 402, 410, 0, 341, 375, 424, 413, 0, 372,
	426, 342, 360, 434, 362, 363, 399, 321, 382, 58,
	357, 339, 36, 345, 314, 352, 315, 343, 374, 43,
	340, 0, 415, 385, 49, 96, 0, 432, 52, 390,
	0, 75, 56, 0, 0, 377, 417, 380, 408, 371,
	400, 329, 389, 427, 358, 395, 428, 0, 0, 0,
	32, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 394, 422, 354, 437, 0, 398, 313, 392,
	0, 319, 322, 433, 420, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 376, 381, 405, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	346, 0, 388, 0, 0, 0, 326, 320, 0, 373,
	0, 0, 0, 328, 0, 347, 406, 0, 310, 411,
	418, 370, 55, 84, 421, 367, 366, 0, 0, 0,
	0, 0, 0, 359, 50, 403, 435, 425, 378, 416,
	344, 353, 0, 351, 67, 59, 80, 387, 401, 65,
	53, 78, 62, 79, 423, 77, 83, 70, 38, 57,
	34, 61, 66, 0, 42, 0, 89, 90, 91, 92,
	93, 94, 95, 318, 311, 348, 409, 412, 333, 397,
	323, 355, 404, 356, 379, 338, 0, 0, 0, 0,
	0, 0, 0, 74, 73, 37, 76, 0, 40, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 87, 88, 317,
	337, 419, 85, 0, 0, 0, 1422, 1420, 46, 0,
	48, 54, 64, 86, 396, 68, 41, 81, 72, 1418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 336, 330, 331, 383, 384, 429, 430, 431,
	407, 327, 0, 334, 335, 0, 414, 47, 97, 98,
	386, 35, 0, 51, 436, 0, 0, 63, 45, 82,
	0, 0, 361, 312, 365, 0, 0, 0, 0, 0,
	0, 0, 324, 325, 69, 0, 369, 364, 391, 393,
	402, 410, 0, 341, 375, 424, 413, 0, 372, 426,
	342, 360, 434, 362, 363, 399, 321, 382, 58, 357,
	339, 36, 345, 314, 352, 315, 343, 374, 43, 340,
	0, 415, 385, 49, 96, 0, 432, 52, 390, 0,
	75, 56, 0, 0, 377, 417, 380, 408, 371, 400,
	329, 389, 427, 358, 395, 428, 0, 0, 0, 498,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 394, 422, 354, 437, 0, 398, 313, 392, 0,
	319, 322, 433, 420, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 376, 381, 405, 368, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1218, 0, 346,
	0, 388, 0, 0, 0, 326, 320, 0, 373, 0,
	0, 0, 328, 0, 347, 406, 0, 310, 411, 418,
	370, 55, 84, 421, 367, 366, 0, 0, 0, 0,
	0, 0, 359, 50, 403, 435, 425, 378, 416, 344,
	353, 0, 351, 67, 59, 80, 387, 401, 65, 53,
	78, 62, 79, 423, 77, 83, 70, 38, 57, 34,
	61, 66, 0, 42, 0, 89, 90, 91, 92, 93,
	94, 95, 318, 311, 348, 409, 412, 333, 397, 323,
	355, 404, 356, 379, 338, 0, 0, 0, 0, 0,
	0, 0, 74, 73, 37, 76, 0, 40, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 0, 0, 0, 87, 88, 317, 337,
	419, 85, 0, 0, 0, 0, 39, 46, 0, 48,
	54, 64, 86, 396, 68, 41, 81, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	332, 336, 330, 331, 383, 384, 429, 430, 431, 407,
	327, 0, 334, 335, 0, 414, 47, 97, 98, 386,
	35, 0, 51, 436, 0, 0, 63, 45, 82, 0,
	0, 361, 312, 365, 0, 0, 0, 0, 0, 0,
	0, 324, 325, 69, 0, 369, 364, 391, 393, 402,
	410, 0, 341, 375, 424, 413, 0, 372, 426, 342,
	360, 434, 362, 363, 399, 321, 382, 58, 357, 339,
	36, 345, 314, 352, 315, 343, 374, 43, 340, 0,
	415, 385, 49, 96, 0, 432, 52, 390, 0, 75,
	56, 0, 0, 377, 417, 380, 408, 371, 400, 329,
	389, 427, 358, 395, 428, 0, 0, 0, 32, 0,
	717, 0, 718, 0, 0, 0, 0, 0, 0, 0,
	394, 422, 354, 437, 0, 398, 313, 392, 0, 319,
	322, 433, 420, 349, 350, 0, 0, 0, 0, 0,
	0, 0, 376, 381, 405, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	388, 0, 0, 0, 326, 320, 0, 373, 0, 0,
	0, 328, 0, 347, 406, 0, 310, 411, 418, 370,
	55, 84, 421, 367, 366, 0, 0, 0, 0, 0,
	0, 359, 50, 403, 435, 425, 378, 416, 344, 353,
	0, 351, 67, 59, 80, 387, 401, 65, 53, 78,
	62, 79, 423, 77, 83, 70, 38, 57, 34, 61,
	66, 0, 42, 0, 89, 90, 91, 92, 93, 94,
	95, 318, 311, 348, 409, 412, 333, 397, 323, 355,
	404, 356, 379, 338, 0, 0, 0, 0, 0, 0,
	0, 74, 73, 37, 76, 0, 40, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 87, 88, 317, 337, 419,
	85, 0, 0, 0, 0, 39, 46, 0, 48, 54,
	64, 86, 396, 68, 41, 81, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	336, 330, 331, 383, 384, 429, 430, 431, 407, 327,
	0, 334, 335, 0, 414, 47, 97, 98, 386, 35,
	0, 51, 436, 0, 0, 63, 45, 82, 0, 0,
	361, 312, 365, 0, 0, 0, 0, 0, 0, 0,
	324, 325, 69, 0, 369, 364, 391, 393, 402, 410,
	0, 341, 375, 424, 413, 0, 372, 426, 342, 360,
	434, 362, 363, 399, 321, 382, 58, 357, 339, 36,
	345, 314, 352, 315, 343, 374, 43, 340, 0, 415,
	385, 49, 96, 0, 432, 52, 390, 0, 75, 56,
	0, 0, 377, 417, 380, 408, 371, 400, 329, 389,
	427, 358, 395, 428, 0, 443, 0, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 445, 0, 394,
	422, 354, 437, 0, 398, 313, 392, 0, 319, 322,
	433, 420, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 376, 381, 405, 368, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 388,
	0, 0, 0, 326, 320, 0, 373, 0, 0, 0,
	328, 0, 347, 406, 0, 310, 411, 418, 370, 55,
	84, 421, 367, 366, 0, 0, 0, 0, 0, 0,
	359, 50, 403, 435, 425, 378, 416, 344, 353, 0,
	351, 67, 59, 80, 387, 401, 65, 53, 78, 62,
	79, 423, 77, 83, 70, 38, 57, 34, 61, 66,
	0, 42, 0, 89, 90, 91, 92, 93, 94, 95,
	318, 311, 348, 409, 412, 333, 397, 323, 355, 404,
	356, 379, 338, 0, 0, 0, 0, 0, 0, 0,
	74, 73, 37, 76, 0, 40, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 0, 0, 0, 87, 88, 317, 337, 419, 85,
	0, 0, 0, 0, 39, 46, 0, 48, 54, 64,
	86, 396, 68, 41, 81, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 336,
	330, 331, 383, 384, 429, 430, 431, 407, 327, 0,
	334, 335, 0, 414, 47, 97, 98, 386, 35, 0,
	51, 436, 0, 0, 63, 45, 82, 0, 0, 361,
	312, 365, 0, 0, 0, 0, 0, 0, 0, 324,
	325, 69, 0, 369, 364, 391, 393, 402, 410, 0,
	341, 375, 424, 413, 0, 372, 426, 342, 360, 434,
	362, 363, 399, 321, 382, 58, 357, 339, 36, 345,
	314, 352, 315, 343, 374, 43, 340, 0, 415, 385,
	49, 96, 0, 432, 52, 390, 0, 75, 56, 0,
	0, 377, 417, 380, 408, 371, 400, 329, 389, 427,
	358, 395, 428, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 394, 422,
	354, 437, 0, 398, 313, 392, 0, 319, 322, 433,
	420, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	376, 381, 405, 368, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 346, 0, 388, 0,
	0, 0, 326, 320, 0, 373, 0, 0, 0, 328,
	0, 347, 406, 0, 310, 411, 418, 370, 55, 84,
	421, 367, 366, 0, 0, 0, 0, 0, 0, 359,
	50, 403, 435, 425, 378, 416, 344, 353, 0, 351,
	67, 59, 80, 387, 401, 65, 53, 78, 62, 79,
	423, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 318,
	311, 348, 409, 412, 333, 397, 323, 355, 404, 356,
	379, 338, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 87, 88, 317, 337, 419, 85, 0,
	0, 0, 0, 39, 46, 0, 48, 54, 64, 86,
	396, 68, 41, 81, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 336, 330,
	331, 383, 384, 429, 430, 431, 407, 327, 0, 334,
	335, 0, 414, 47, 97, 98, 386, 35, 0, 51,
	436, 0, 0, 63, 45, 82, 0, 0, 361, 312,
	365, 0, 0, 0, 0, 0, 0, 0, 324, 325,
	69, 0, 369, 364, 391, 393, 402, 410, 0, 341,
	375, 424, 413, 0, 372, 426, 342, 360, 434, 362,
	363, 399, 321, 382, 58, 357, 339, 36, 345, 314,
	352, 315, 343, 374, 43, 340, 0, 415, 385, 49,
	96, 0, 432, 52, 390, 0, 75, 56, 0, 0,
	377, 417, 380, 408, 371, 400, 329, 389, 427, 358,
	395, 428, 0, 0, 0, 498, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 394, 422, 354,
	437, 0, 398, 313, 392, 0, 319, 322, 433, 420,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 376,
	381, 405, 368, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 388, 0, 0,
	0, 326, 320, 0, 373, 0, 0, 0, 328, 0,
	347, 406, 0, 310, 411, 418, 370, 55, 84, 421,
	367, 366, 0, 0, 0, 0, 0, 0, 359, 50,
	403, 435, 425, 378, 416, 344, 353, 0, 351, 67,
	59, 80, 387, 401, 65, 53, 78, 62, 79, 423,
	77, 83, 70, 38, 57, 34, 61, 66, 0, 42,
	0, 89, 90, 91, 92, 93, 94, 95, 318, 311,
	348, 409, 412, 333, 397, 323, 355, 404, 356, 379,
	338, 0, 0, 0, 0, 0, 0, 0, 74, 73,
	37, 76, 0, 40, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 87, 88, 317, 337, 419, 85, 0, 0,
	0, 0, 39, 46, 0, 48, 54, 64, 86, 396,
	68, 41, 81, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 336, 330, 331,
	383, 384, 429, 430, 431, 407, 327, 0, 334, 335,
	0, 414, 47, 97, 98, 386, 35, 0, 51, 436,
	0, 0, 63, 45, 82, 0, 0, 361, 312, 365,
	0, 0, 0, 0, 0, 0, 0, 324, 325, 69,
	0, 369, 364, 391, 393, 402, 410, 0, 341, 375,
	424, 413, 0, 372, 426, 342, 360, 434, 362, 363,
	399, 321, 382, 58, 357, 339, 36, 345, 314, 352,
	315, 343, 374, 43, 340, 0, 415, 385, 49, 96,
	0, 432, 52, 390, 0, 75, 56, 0, 0, 377,
	417, 380, 408, 371, 400, 329, 389, 427, 358, 395,
	428, 0, 0, 0, 32, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 394, 422, 354, 437,
	0, 398, 313, 392, 0, 319, 322, 433, 420, 349,
	350, 552, 0, 0, 0, 0, 0, 0, 376, 381,
	405, 368, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 388, 0, 0, 0,
	326, 320, 0, 373, 0, 0, 0, 328, 0, 347,
	406, 0, 310, 411, 418, 370, 55, 84, 421, 367,
	366, 0, 0, 0, 0, 0, 0, 359, 50, 403,
	435, 425, 378, 416, 344, 353, 0, 351, 67, 59,
	80, 387, 401, 65, 53, 78, 62, 79, 423, 77,
	83, 70, 38, 57, 34, 61, 66, 0, 42, 0,
	89, 90, 91, 92, 93, 94, 95, 318, 311, 348,
	409, 412, 333, 397, 323, 355, 404, 356, 379, 338,
	0, 0, 0, 0, 0, 0, 0, 74, 73, 37,
	76, 0, 40, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 87, 88, 317, 337, 419, 85, 0, 0, 0,
	0, 39, 46, 0, 48, 54, 64, 86, 396, 68,
	41, 81, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 336, 330, 331, 383,
	384, 429, 430, 431, 407, 327, 0, 334, 335, 0,
	414, 47, 97, 98, 386, 35, 0, 51, 436, 0,
	0, 63, 45, 82, 0, 0, 361, 312, 365, 0,
	0, 0, 0, 0, 0, 0, 324, 325, 69, 0,
	369, 364, 391, 393, 402, 410, 0, 341, 375, 424,
	413, 0, 372, 426, 342, 360, 434, 362, 363, 399,
	321, 382, 58, 357, 339, 36, 345, 314, 352, 315,
	343, 374, 43, 340, 0, 415, 385, 49, 96, 0,
	432, 52, 390, 0, 75, 56, 0, 0, 377, 417,
	380, 408, 371, 400, 329, 389, 427, 358, 395, 428,
	0, 0, 0, 109, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 394, 422, 354, 437, 0,
	398, 313, 392, 0, 319, 322, 433, 420, 349, 350,
	0, 0, 0, 0, 0, 0, 0, 376, 381, 405,
	368, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 388, 0, 0, 0, 326,
	320, 0, 373, 0, 0, 0, 328, 0, 347, 406,
	0, 310, 411, 418, 370, 55, 84, 421, 367, 366,
	0, 0, 0, 0, 0, 0, 359, 50, 403, 435,
	425, 378, 416, 344, 353, 0, 351, 67, 59, 80,
	387, 401, 65, 53, 78, 62, 79, 423, 77, 83,
	70, 38, 57, 34, 61, 66, 0, 42, 0, 89,
	90, 91, 92, 93, 94, 95, 318, 311, 348, 409,
	412, 333, 397, 323, 355, 404, 356, 379, 338, 0,
	0, 0, 0, 0, 0, 0, 74, 73, 37, 76,
	0, 40, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 316, 0, 0, 0,
	87, 88, 317, 337, 419, 85, 0, 0, 0, 0,
	39, 46, 0, 48, 54, 64, 86, 396, 68, 41,
	81, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 332, 336, 330, 331, 383, 384,
	429, 430, 431, 407, 327, 0, 334, 335, 0, 414,
	47, 97, 98, 386, 35, 0, 51, 436, 0, 0,
	63, 45, 82, 0, 0, 361, 312, 365, 0, 0,
	0, 0, 0, 0, 0, 324, 325, 69, 0, 369,
	364, 391, 393, 402, 410, 0, 341, 375, 424, 413,
	0, 372, 426, 342, 360, 434, 362, 363, 399, 321,
	382, 58, 357, 339, 36, 345, 314, 352, 315, 343,
	374, 43, 340, 0, 415, 385, 49, 96, 0, 432,
	52, 390, 0, 75, 56, 0, 0, 377, 417, 380,
	408, 371, 400, 329, 389, 427, 358, 395, 428, 0,
	0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 394, 422, 354, 437, 0, 398,
	313, 392, 0, 319, 322, 433, 420, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 376, 381, 405, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 346, 0, 388, 0, 0, 0, 326, 320,
	0, 373, 0, 0, 0, 328, 0, 347, 406, 0,
	310, 411, 418, 370, 55, 84, 421, 367, 366, 0,
	0, 0, 0, 0, 0, 359, 50, 403, 435, 425,
	378, 416, 344, 353, 0, 351, 67, 59, 80, 387,
	401, 65, 53, 78, 62, 79, 423, 77, 83, 70,
	38, 57, 34, 61, 66, 0, 42, 0, 89, 90,
	91, 92, 93, 94, 95, 318, 311, 348, 409, 412,
	333, 397, 323, 355, 404, 356, 379, 338, 0, 0,
	0, 0, 0, 0, 0, 74, 73, 37, 76, 0,
	40, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 87,
	88, 317, 337, 419, 85, 0, 0, 0, 0, 39,
	46, 0, 48, 54, 64, 86, 396, 68, 41, 81,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 336, 330, 331, 383, 384, 429,
	430, 431, 407, 327, 0, 334, 335, 0, 414, 47,
	97, 98, 386, 35, 0, 51, 436, 0, 0, 63,
	45, 82, 0, 0, 361, 312, 365, 0, 0, 0,
	0, 0, 0, 0, 324, 325, 69, 0, 369, 364,
	391, 393, 402, 410, 58, 341, 375, 36, 0, 0,
	584, 0, 0, 0, 43, 583, 0, 0, 0, 49,
	96, 0, 626, 52, 627, 0, 75, 56, 0, 0,
	0, 0, 617, 618, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 498, 606, 603, 604, 608,
	609, 610, 611, 0, 0, 0, 607, 612, 494, 495,
	0, 0, 0, 0, 581, 596, 0, 625, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 593, 594, 0, 0, 0, 0, 642, 0, 595,
	0, 0, 989, 592, 597, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 84, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 0, 0, 0, 0, 0, 991, 0, 67,
	59, 80, 0, 0, 65, 53, 78, 62, 79, 0,
	77, 83, 70, 38, 57, 34, 61, 66, 0, 42,
	0, 89, 90, 91, 92, 93, 94, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 73,
	37, 76, 0, 40, 71, 1000, 1006, 1004, 0, 0,
	1001, 0, 0, 999, 0, 0, 1008, 0, 60, 1007,
	993, 1003, 1005, 1002, 997, 0, 992, 0, 1010, 1009,
	1011, 990, 1013, 0, 0, 0, 1017, 1014, 1016, 1015,
	628, 1012, 0, 0, 0, 0, 0, 0, 0, 0,
	994, 995, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 644, 0, 629, 630, 0, 0, 0, 0, 0,
	996, 998, 87, 88, 0, 0, 0, 85, 0, 0,
	0, 0, 39, 46, 0, 48, 54, 64, 86, 0,
	68, 41, 81, 72, 614, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 631, 641, 637, 638,
	635, 636, 634, 633, 632, 643, 619, 620, 621, 622,
	624, 0, 47, 97, 98, 623, 35, 0, 51, 0,
	0, 0, 63, 45, 82, 58, 0, 0, 36, 0,
	0, 584, 0, 0, 0, 43, 583, 0, 0, 69,
	49, 96, 0, 626, 52, 627, 0, 75, 56, 0,
	639, 0, 0, 617, 618, 0, 0, 0, 0, 0,
	0, 1624, 0, 577, 0, 0, 498, 606, 603, 604,
	608, 609, 610, 611, 0, 0, 0, 607, 612, 494,
	495, 1625, 0, 0, 0, 581, 596, 0, 625, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 593, 594, 0, 0, 0, 0, 642, 0,
	595, 0, 0, 591, 592, 597, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 84,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 59, 80, 0, 0, 65, 53, 78, 62, 79,
	0, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 644, 0, 629, 630, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 0, 0, 85, 0,
	0, 0, 0, 39, 46, 0, 48, 54, 64, 86,
	0, 68, 41, 81, 72, 614, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 631, 641, 637,
	638, 635, 636, 634, 633, 632, 643, 619, 620, 621,
	622, 624, 0, 47, 97, 98, 623, 35, 0, 51,
	0, 0, 0, 63, 45, 82, 58, 0, 0, 36,
	851, 0, 584, 0, 0, 0, 43, 583, 0, 0,
	69, 49, 96, 0, 626, 52, 627, 0, 75, 56,
	0, 639, 0, 0, 617, 618, 0, 0, 0, 0,
	0, 0, 0, 0, 577, 0, 0, 498, 606, 603,
	604, 608, 609, 610, 611, 0, 0, 0, 607, 612,
	494, 495, 0, 0, 0, 0, 581, 596, 0, 625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 593, 594, 856, 0, 0, 0, 642,
	0, 595, 0, 0, 591, 592, 597, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	84, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 59, 80, 0, 0, 65, 53, 78, 62,
	79, 0, 77, 83, 70, 38, 57, 34, 61, 66,
	0, 42, 0, 89, 90, 91, 92, 93, 94, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 73, 37, 76, 0, 40, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 628, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 644, 0, 629, 630, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 0, 0, 0, 85,
	0, 0, 0, 0, 39, 46, 0, 48, 54, 64,
	86, 0, 68, 41, 81, 72, 614, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 631, 641,
	637, 638, 635, 636, 634, 633, 632, 643, 619, 620,
	621, 622, 624, 0, 47, 97, 98, 623, 35, 0,
	51, 0, 0, 0, 63, 45, 82, 58, 0, 0,
	36, 0, 0, 584, 0, 0, 0, 43, 583, 0,
	0, 69, 49, 96, 0, 626, 52, 627, 0, 75,
	56, 0, 639, 0, 0, 617, 618, 0, 0, 0,
	0, 0, 0, 0, 0, 577, 0, 846, 498, 606,
	603, 604, 608, 609, 610, 611, 0, 0, 0, 607,
	612, 494, 495, 0, 0, 0, 0, 581, 596, 0,
	625, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 593, 594, 0, 0, 0, 0,
	642, 0, 595, 0, 0, 591, 592, 597, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 84, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 67, 59, 80, 0, 0, 65, 53, 78,
	62, 79, 0, 77, 83, 70, 38, 57, 34, 61,
	66, 0, 42, 0, 89, 90, 91, 92, 93, 94,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 73, 37, 76, 0, 40, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 628, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 644, 0, 629, 630, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 0, 0,
	85, 0, 0, 0, 0, 39, 46, 0, 48, 54,
	64, 86, 0, 68, 41, 81, 72, 614, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 631,
	641, 637, 638, 635, 636, 634, 633, 632, 643, 619,
	620, 621, 622, 624, 0, 47, 97, 98, 623, 35,
	0, 51, 0, 0, 0, 63, 45, 82, 58, 0,
	0, 36, 0, 0, 584, 0, 0, 0, 43, 583,
	0, 0, 69, 49, 96, 0, 626, 52, 627, 0,
	75, 56, 0, 639, 0, 0, 617, 618, 0, 0,
	0, 0, 0, 0, 0, 0, 577, 0, 0, 498,
	606, 603, 604, 608, 609, 610, 611, 0, 0, 0,
	607, 612, 494, 495, 0, 0, 0, 0, 581, 596,
	0, 625, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 593, 594, 856, 0, 0,
	0, 642, 0, 595, 0, 0, 591, 592, 597, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 84, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 59, 80, 0, 0, 65, 53,
	78, 62, 79, 0, 77, 83, 70, 38, 57, 34,
	61, 66, 0, 42, 0, 89, 90, 91, 92, 93,
	94, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 73, 37, 76, 0, 40, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 644, 0, 629, 630, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 0, 0,
	0, 85, 0, 0, 0, 0, 39, 46, 0, 48,
	54, 64, 86, 0, 68, 41, 81, 72, 614, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	631, 641, 637, 638, 635, 636, 634, 633, 632, 643,
	619, 620, 621, 622, 624, 0, 47, 97, 98, 623,
	35, 0, 51, 0, 0, 0, 63, 45, 82, 693,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 69, 36, 0, 0, 584, 0, 0,
	0, 43, 583, 0, 639, 0, 49, 96, 0, 626,
	52, 627, 0, 75, 56, 0, 0, 0, 0, 617,
	618, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 0, 498, 606, 603, 604, 608, 609, 610, 611,
	0, 0, 0, 607, 612, 494, 495, 0, 0, 0,
	0, 581, 596, 0, 625, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 593, 594,
	0, 0, 0, 0, 642, 0, 595, 0, 0, 591,
	592, 597, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 84, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 59, 80, 0,
	0, 65, 53, 78, 62, 79, 0, 77, 83, 70,
	38, 57, 34, 61, 66, 0, 42, 0, 89, 90,
	91, 92, 93, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 73, 37, 76, 0,
	40, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 628, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 644, 0,
	629, 630, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 0, 0, 85, 0, 0, 0, 0, 39,
	46, 0, 48, 54, 64, 86, 0, 68, 41, 81,
	72, 614, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 631, 641, 637, 638, 635, 636, 634,
	633, 632, 643, 619, 620, 621, 622, 624, 0, 47,
	97, 98, 623, 35, 0, 51, 0, 0, 0, 63,
	45, 82, 58, 0, 0, 36, 0, 0, 584, 0,
	0, 0, 43, 583, 0, 0, 69, 49, 96, 0,
	626, 52, 627, 0, 75, 56, 0, 639, 0, 0,
	617, 618, 0, 0, 0, 0, 0, 0, 0, 0,
	577, 0, 0, 498, 606, 603, 604, 608, 609, 610,
	611, 0, 0, 0, 607, 612, 494, 495, 0, 0,
	0, 0, 581, 596, 0, 625, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 593,
	594, 0, 0, 0, 0, 642, 0, 595, 0, 0,
	591, 592, 597, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 84, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 59, 80,
	0, 0, 65, 53, 78, 62, 79, 0, 77, 83,
	70, 38, 57, 34, 61, 66, 0, 42, 0, 89,
	90, 91, 92, 93, 94, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 73, 37, 76,
	0, 40, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 644,
	0, 629, 630, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 0, 0, 0, 85, 0, 0, 0, 0,
	39, 46, 0, 48, 54, 64, 86, 0, 68, 41,
	81, 72, 614, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 631, 641, 637, 638, 635, 636,
	634, 633, 632, 643, 619, 620, 621, 622, 624, 0,
	47, 97, 98, 623, 35, 0, 51, 0, 0, 0,
	63, 45, 82, 58, 0, 0, 36, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 155, 69, 49, 96,
	0, 0, 52, 0, 0, 75, 56, 0, 639, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1123, 0, 32, 0, 1121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 0, 0, 0, 0, 0, 156, 0, 67, 59,
	80, 0, 0, 65, 53, 78, 62, 79, 0, 77,
	83, 70, 38, 57, 34, 61, 66, 0, 42, 0,
	89, 90, 91, 92, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 73, 37,
	76, 0, 40, 71, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 0, 182, 183, 60, 184, 185,
	186, 188, 187, 157, 158, 159, 163, 161, 160, 162,
	134, 136, 0, 132, 135, 141, 137, 138, 139, 153,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 154, 164, 165, 166, 167, 168, 169, 170, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 0, 0, 85, 0, 0, 0,
	0, 39, 46, 0, 48, 54, 64, 86, 0, 68,
	41, 81, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 97, 98, 0, 35, 133, 51, 0, 0,
	0, 63, 45, 82, 58, 0, 0, 36, 0, 0,
	584, 0, 0, 0, 43, 0, 0, 0, 69, 49,
	96, 0, 626, 52, 627, 0, 75, 56, 0, 0,
	0, 0, 617, 618, 0, 0, 0, 0, 0, 0,
	0, 0, 577, 0, 0, 498, 606, 603, 604, 608,
	609, 610, 611, 0, 0, 0, 607, 612, 494, 495,
	0, 0, 0, 0, 0, 596, 0, 625, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 593, 594, 0, 0, 0, 0, 642, 0, 595,
	0, 0, 591, 592, 597, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 84, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
	59, 80, 0, 0, 65, 53, 78, 62, 79, 0,
	77, 83, 70, 38, 57, 34, 61, 66, 0, 42,
	0, 89, 90, 91, 92, 93, 94, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 73,
	37, 76, 0, 40, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 644, 0, 629, 630, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 0, 0, 0, 85, 0, 0,
	0, 0, 39, 46, 0, 48, 54, 64, 86, 0,
	68, 41, 81, 72, 614, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 631, 641, 637, 638,
	635, 636, 634, 633, 632, 643, 619, 620, 621, 622,
	624, 0, 47, 97, 98, 623, 35, 0, 51, 0,
	0, 0, 63, 45, 82, 58, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 69,
	49, 96, 0, 626, 52, 627, 0, 75, 56, 0,
	639, 0, 0, 617, 618, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 498, 606, 603, 604,
	608, 609, 610, 611, 0, 0, 0, 607, 612, 494,
	495, 0, 0, 0, 0, 0, 596, 0, 625, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 593, 594, 0, 0, 0, 0, 642, 0,
	595, 0, 0, 591, 592, 597, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 84,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 59, 80, 0, 0, 65, 53, 78, 62, 79,
	0, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 644, 0, 629, 630, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 0, 0, 85, 0,
	0, 0, 0, 39, 46, 0, 48, 54, 64, 86,
	0, 68, 41, 81, 72, 614, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 631, 641, 637,
	638, 635, 636, 634, 633, 632, 643, 619, 620, 621,
	622, 624, 0, 47, 97, 98, 623, 35, 0, 51,
	0, 0, 0, 63, 45, 82, 58, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 43, 0, 0, 0,
	69, 49, 96, 0, 626, 52, 627, 0, 75, 56,
	0, 639, 0, 0, 617, 618, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 0, 0, 498, 606, 603,
	604, 608, 609, 610, 611, 0, 0, 0, 607, 612,
	494, 495, 0, 0, 0, 0, 0, 596, 0, 625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 593, 594, 0, 0, 0, 0, 642,
	0, 595, 0, 0, 591, 592, 597, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	84, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 59, 80, 0, 0, 65, 53, 78, 62,
	79, 0, 77, 83, 70, 38, 57, 34, 61, 66,
	0, 42, 0, 89, 90, 91, 92, 93, 94, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 73, 37, 76, 0, 40, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 628, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 644, 0, 629, 630, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 0, 0, 0, 85,
	0, 0, 1336, 0, 39, 46, 0, 48, 54, 64,
	86, 0, 68, 41, 81, 72, 614, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 991, 631, 641,
	637, 638, 635, 636, 634, 633, 632, 643, 619, 620,
	621, 622, 624, 0, 47, 97, 98, 623, 35, 0,
	51, 0, 0, 0, 63, 45, 82, 58, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 43, 0, 0,
	155, 69, 49, 96, 0, 0, 52, 0, 0, 75,
	56, 0, 639, 0, 0, 1000, 1006, 1004, 0, 0,
	1001, 0, 0, 999, 0, 0, 1008, 0, 32, 1007,
	993, 1003, 1005, 1002, 997, 0, 992, 0, 1010, 1009,
	1011, 990, 1013, 0, 0, 0, 1017, 1014, 1016, 1015,
	0, 1012, 0, 0, 0, 0, 0, 0, 0, 0,
	994, 995, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	996, 998, 0, 0, 0, 140, 0, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 67, 59, 80, 0, 0, 65, 53, 78,
	62, 79, 0, 77, 83, 70, 38, 57, 34, 61,
	66, 0, 42, 0, 89, 90, 91, 92, 93, 94,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 73, 37, 76, 0, 40, 71, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 0, 182,
	183, 60, 184, 185, 186, 188, 187, 157, 158, 159,
	163, 161, 160, 162, 134, 136, 0, 132, 135, 141,
	137, 138, 139, 153, 142, 143, 144, 145, 146, 147,
	148, 149, 150, 151, 152, 154, 164, 165, 166, 167,
	168, 169, 170, 171, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 0, 0,
	85, 0, 0, 0, 0, 39, 46, 0, 48, 54,
	64, 86, 0, 68, 41, 81, 72, 58, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 43, 0, 0,
	155, 0, 49, 96, 0, 0, 52, 0, 0, 75,
	56, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 97, 98, 32, 35,
	133, 51, 0, 0, 0, 63, 45, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 67, 59, 80, 0, 0, 65, 53, 78,
	62, 79, 0, 77, 83, 70, 38, 57, 34, 61,
	66, 0, 42, 0, 89, 90, 91, 92, 93, 94,
	95, 0, 0, 0, 0, 1410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 73, 37, 76, 0, 40, 71, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 0, 182,
	183, 60, 184, 185, 186, 188, 187, 157, 158, 159,
	163, 161, 160, 162, 134, 136, 0, 132, 135, 141,
	137, 138, 139, 153, 142, 143, 144, 145, 146, 147,
	148, 149, 150, 151, 152, 154, 164, 165, 166, 167,
	168, 169, 170, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 0, 0,
	85, 0, 0, 0, 0, 39, 46, 0, 48, 54,
	64, 86, 0, 68, 41, 81, 72, 58, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 43, 0, 0,
	155, 0, 49, 96, 0, 0, 52, 0, 0, 75,
	56, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 97, 98, 32, 35,
	133, 51, 0, 0, 0, 63, 45, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 67, 59, 80, 0, 0, 65, 53, 78,
	62, 79, 0, 77, 83, 70, 38, 57, 34, 61,
	66, 0, 42, 0, 89, 90, 91, 92, 93, 94,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 73, 37, 76, 0, 40, 71, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 0, 182,
	183, 60, 184, 185, 186, 188, 187, 157, 158, 159,
	163, 161, 160, 162, 134, 136, 0, 132, 135, 141,
	137, 138, 139, 153, 142, 143, 144, 145, 146, 147,
	148, 149, 150, 151, 152, 154, 164, 165, 166, 167,
	168, 169, 170, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 0, 0,
	85, 0, 0, 0, 0, 39, 46, 0, 48, 54,
	64, 86, 0, 68, 41, 81, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 49, 96, 0, 0,
	52, 0, 0, 75, 56, 47, 97, 98, 0, 35,
	133, 51, 0, 0, 0, 63, 45, 82, 0, 649,
	0, 0, 498, 0, 480, 481, 482, 483, 0, 0,
	0, 0, 69, 486, 484, 494, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 59, 80, 0,
	0, 65, 53, 78, 62, 79, 0, 77, 83, 70,
	38, 57, 34, 61, 66, 0, 42, 0, 89, 90,
	91, 92, 93, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 73, 37, 76, 0,
	40, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	488, 493, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 0, 0, 85, 0, 0, 0, 0, 39,
	46, 0, 48, 54, 64, 86, 0, 68, 41, 81,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 490, 0, 492, 491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	97, 98, 0, 35, 0, 51, 0, 0, 0, 63,
	45, 82, 58, 0, 0, 36, 0, 0, 0, 0,
	0, 0, 43, 0, 0, 0, 69, 49, 96, 0,
	0, 52, 0, 0, 75, 56, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	478, 0, 0, 498, 0, 480, 481, 482, 483, 0,
	0, 0, 0, 0, 486, 484, 494, 495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 59, 80,
	0, 0, 65, 53, 78, 62, 79, 0, 77, 83,
	70, 38, 57, 34, 61, 66, 0, 42, 0, 89,
	90, 91, 92, 93, 94, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 73, 37, 76,
	0, 40, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 36, 60, 0, 0, 0,
	0, 0, 43, 0, 0, 0, 0, 49, 96, 0,
	0, 52, 0, 0, 75, 56, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 0, 32, 0, 0, 0, 0, 0, 0,
	0, 488, 493, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 0, 0, 0, 85, 0, 0, 0, 0,
	39, 46, 0, 48, 54, 64, 86, 0, 68, 41,
	81, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 490, 0, 492, 491, 0, 0,
	0, 0, 0, 0, 0, 55, 84, 0, 0, 0,
	47, 97, 98, 0, 35, 0, 51, 50, 0, 0,
	63, 45, 82, 0, 0, 0, 0, 67, 59, 80,
	0, 0, 65, 53, 78, 62, 79, 69, 77, 83,
	70, 38, 57, 34, 61, 66, 0, 42, 0, 89,
	90, 91, 92, 93, 94, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 73, 37, 76,
	0, 40, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 36, 60, 0, 0, 0,
	0, 0, 43, 0, 0, 0, 0, 49, 96, 0,
	0, 52, 0, 0, 75, 56, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 0, 32, 606, 971, 604, 608, 609, 610,
	611, 0, 0, 0, 607, 612, 0, 0, 0, 0,
	87, 88, 0, 0, 0, 85, 0, 0, 0, 0,
	39, 46, 0, 48, 54, 64, 86, 0, 68, 41,
	81, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 84, 0, 0, 0,
	47, 97, 98, 0, 35, 0, 51, 50, 0, 0,
	63, 45, 82, 0, 0, 0, 0, 67, 59, 80,
	0, 0, 65, 53, 78, 62, 79, 69, 77, 83,
	70, 38, 57, 34, 61, 66, 0, 42, 763, 89,
	90, 91, 92, 93, 94, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 73, 37, 76,
	0, 40, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	49, 96, 0, 0, 52, 0, 0, 75, 56, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 32, 0, 31, 0,
	87, 88, 0, 0, 0, 85, 0, 0, 0, 0,
	39, 46, 0, 48, 54, 64, 86, 0, 68, 41,
	81, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 97, 98, 0, 35, 0, 51, 229, 55, 84,
	63, 45, 82, 224, 0, 223, 0, 225, 226, 0,
	50, 0, 0, 227, 230, 0, 0, 69, 0, 0,
	67, 59, 80, 0, 0, 65, 53, 78, 62, 79,
	0, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 36, 0, 1054, 0, 0, 0, 0, 43,
	0, 0, 0, 44, 49, 96, 0, 0, 52, 0,
	0, 75, 56, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 0, 0, 85, 0,
	32, 0, 1056, 39, 46, 0, 48, 54, 64, 86,
	0, 68, 41, 81, 72, 0, 0, 741, 740, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 97, 98, 0, 35, 0, 51,
	0, 0, 0, 63, 45, 82, 0, 0, 0, 0,
	0, 0, 55, 84, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 50, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 67, 59, 80, 0, 0, 65,
	53, 78, 62, 79, 0, 77, 83, 70, 38, 57,
	34, 61, 66, 0, 42, 0, 89, 90, 91, 92,
	93, 94, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 73, 37, 76, 0, 40, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 49, 96, 0, 0,
	52, 0, 0, 75, 56, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1123, 0, 32, 0, 1121, 0, 0, 87, 88, 0,
	0, 0, 85, 0, 0, 0, 0, 39, 46, 0,
	48, 54, 64, 86, 0, 68, 41, 81, 72, 1120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 47, 97, 98,
	0, 35, 0, 51, 55, 84, 0, 63, 45, 82,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 67, 59, 80, 0,
	0, 65, 53, 78, 62, 79, 0, 77, 83, 70,
	38, 57, 34, 61, 66, 0, 42, 0, 89, 90,
	91, 92, 93, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 73, 37, 76, 0,
	40, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 693, 0, 0, 0, 60, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 36, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 49, 96,
	0, 0, 52, 0, 0, 75, 56, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 577, 0, 0, 109, 0, 111, 0, 0, 87,
	88, 0, 0, 0, 85, 0, 0, 0, 0, 39,
	46, 0, 48, 54, 64, 86, 0, 68, 41, 81,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	97, 98, 0, 35, 0, 51, 55, 84, 0, 63,
	45, 82, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 67, 59,
	80, 0, 0, 65, 53, 78, 62, 79, 0, 77,
	83, 70, 38, 57, 34, 61, 66, 0, 42, 0,
	89, 90, 91, 92, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 73, 37,
	76, 0, 40, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 36, 60, 1528, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 49, 96,
	0, 0, 52, 0, 0, 75, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 109, 0, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 0, 0, 85, 0, 0, 0,
	0, 39, 46, 0, 48, 54, 64, 86, 0, 68,
	41, 81, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 84, 0, 0,
	0, 47, 97, 98, 0, 35, 0, 51, 50, 0,
	0, 63, 45, 82, 0, 0, 0, 0, 67, 59,
	80, 0, 1526, 65, 53, 78, 62, 79, 69, 77,
	83, 70, 38, 57, 34, 61, 66, 0, 42, 0,
	89, 90, 91, 92, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 73, 37,
	76, 0, 40, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 36, 60, 1528, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 49, 96,
	0, 0, 52, 0, 0, 75, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 109, 0, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 0, 0, 85, 0, 0, 0,
	0, 39, 46, 0, 48, 54, 64, 86, 0, 68,
	41, 81, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 84, 0, 0,
	0, 47, 97, 98, 0, 35, 0, 51, 50, 0,
	0, 63, 45, 82, 0, 0, 0, 0, 67, 59,
	80, 0, 0, 65, 53, 78, 62, 79, 69, 77,
	83, 70, 38, 57, 34, 61, 66, 0, 42, 0,
	89, 90, 91, 92, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 73, 37,
	76, 0, 40, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 693, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	49, 96, 0, 0, 52, 0, 0, 75, 56, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 32, 0, 0, 0,
	0, 87, 88, 0, 0, 0, 85, 0, 0, 0,
	0, 39, 46, 0, 48, 54, 64, 86, 0, 68,
	41, 81, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 97, 98, 0, 35, 0, 51, 55, 84,
	0, 63, 45, 82, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	67, 59, 80, 0, 0, 65, 53, 78, 62, 79,
	0, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 43, 0, 0,
	0, 0, 49, 96, 0, 0, 52, 0, 0, 75,
	56, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 577, 0, 0, 109, 0,
	111, 0, 0, 87, 88, 0, 0, 0, 85, 0,
	0, 0, 0, 39, 46, 0, 48, 54, 64, 86,
	0, 68, 41, 81, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 97, 98, 0, 35, 0, 51,
	55, 84, 0, 63, 45, 82, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 67, 59, 80, 0, 0, 65, 53, 78,
	62, 79, 0, 77, 83, 70, 38, 57, 34, 61,
	66, 0, 42, 0, 89, 90, 91, 92, 93, 94,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 73, 37, 76, 0, 40, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	36, 60, 0, 0, 0, 0, 0, 43, 0, 0,
	0, 0, 49, 96, 0, 0, 52, 0, 0, 75,
	56, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 0, 109, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 0, 0,
	85, 0, 0, 0, 0, 39, 46, 0, 48, 54,
	64, 86, 0, 68, 41, 81, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 84, 0, 0, 0, 47, 97, 98, 0, 35,
	0, 51, 50, 0, 0, 63, 45, 82, 0, 0,
	0, 0, 67, 59, 80, 0, 0, 65, 53, 78,
	62, 79, 69, 77, 83, 70, 38, 57, 34, 61,
	66, 0, 42, 0, 89, 90, 91, 92, 93, 94,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 73, 37, 76, 0, 40, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 36, 0, 0, 0, 0, 0, 0, 43,
	1546, 0, 0, 0, 49, 96, 0, 0, 52, 0,
	0, 75, 56, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	32, 0, 1545, 0, 0, 87, 88, 0, 0, 0,
	85, 0, 0, 0, 0, 39, 46, 0, 48, 54,
	64, 86, 0, 68, 41, 81, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 97, 98, 0, 35,
	0, 51, 55, 84, 0, 63, 45, 82, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 0, 0, 1572,
	0, 0, 69, 0, 67, 59, 80, 0, 0, 65,
	53, 78, 62, 79, 0, 77, 83, 70, 38, 57,
	34, 61, 66, 0, 42, 0, 89, 90, 91, 92,
	93, 94, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 73, 37, 76, 0, 40, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 36, 60, 0, 0, 0, 0, 1500, 43,
	0, 0, 0, 0, 49, 96, 0, 0, 52, 0,
	0, 75, 56, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 0,
	109, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	0, 0, 85, 0, 0, 0, 0, 39, 46, 0,
	48, 54, 64, 86, 0, 68, 41, 81, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 84, 0, 0, 0, 47, 97, 98,
	0, 35, 0, 51, 50, 0, 0, 63, 45, 82,
	0, 0, 0, 0, 67, 59, 80, 0, 0, 65,
	53, 78, 62, 79, 69, 77, 83, 70, 38, 57,
	34, 61, 66, 0, 42, 0, 89, 90, 91, 92,
	93, 94, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 73, 37, 76, 0, 40, 71,
	0, 0, 1396, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 36, 60, 0, 0, 0, 0, 0, 43,
	0, 0, 0, 0, 49, 96, 0, 0, 52, 0,
	0, 75, 56, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 0,
	109, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	0, 0, 85, 0, 0, 0, 0, 39, 46, 0,
	48, 54, 64, 86, 0, 68, 41, 81, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 84, 0, 0, 0, 47, 97, 98,
	0, 35, 0, 51, 50, 0, 0, 63, 45, 82,
	0, 0, 0, 0, 67, 59, 80, 0, 0, 65,
	53, 78, 62, 79, 69, 77, 83, 70, 38, 57,
	34, 61, 66, 0, 42, 0, 89, 90, 91, 92,
	93, 94, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 73, 37, 76, 0, 40, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 49, 96, 0, 0,
	52, 0, 0, 75, 56, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 498, 0, 111, 0, 0, 87, 88, 0,
	0, 0, 85, 0, 0, 0, 0, 39, 46, 0,
	48, 54, 64, 86, 0, 68, 41, 81, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 47, 97, 98,
	0, 35, 0, 51, 55, 84, 0, 63, 45, 82,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 0,
	558, 0, 0, 0, 69, 0, 67, 59, 80, 0,
	0, 65, 53, 78, 62, 79, 0, 77, 83, 70,
	38, 57, 34, 61, 66, 0, 42, 0, 89, 90,
	91, 92, 93, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 73, 37, 76, 0,
	40, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 36, 60, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 49, 96, 0, 0,
	52, 0, 0, 75, 56, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	0, 0, 109, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 0, 0, 85, 0, 0, 0, 0, 39,
	46, 0, 48, 54, 64, 86, 0, 68, 41, 81,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 84, 0, 0, 0, 47,
	97, 98, 0, 35, 0, 51, 50, 0, 0, 63,
	45, 82, 0, 0, 0, 0, 67, 59, 80, 0,
	0, 65, 53, 78, 62, 79, 69, 77, 83, 70,
	38, 57, 34, 61, 66, 0, 42, 0, 89, 90,
	91, 92, 93, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 73, 37, 76, 0,
	40, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 36, 60, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 49, 96, 0, 0,
	52, 0, 0, 75, 56, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 44,
	0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 0, 0, 85, 0, 0, 0, 0, 39,
	46, 0, 48, 54, 64, 86, 211, 68, 41, 81,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 84, 0, 0, 0, 47,
	97, 98, 0, 35, 0, 51, 50, 0, 0, 63,
	45, 82, 0, 0, 0, 0, 67, 59, 80, 0,
	0, 65, 53, 78, 62, 79, 69, 77, 83, 70,
	38, 57, 34, 61, 66, 0, 42, 0, 89, 90,
	91, 92, 93, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 74, 73, 37, 76, 0,
	40, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 36, 60, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 49, 96, 0, 0,
	52, 0, 0, 75, 56, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	0, 0, 498, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 0, 0, 85, 0, 0, 0, 0, 39,
	46, 0, 48, 54, 64, 86, 0, 68, 41, 81,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 84, 0, 0, 0, 47,
	97, 98, 0, 35, 0, 51, 50, 0, 0, 63,
	45, 82, 0, 0, 0, 0, 67, 59, 80, 0,
	0, 65, 53, 78, 62, 79, 69, 77, 83, 70,
	38, 57, 34, 61, 66, 0, 42, 0, 89, 90,
	91, 92, 93, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 73, 37, 76, 0,
	40, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 36, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 49, 96,
	0, 0, 52, 0, 0, 75, 56, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 0, 0, 87,
	88, 0, 0, 0, 85, 0, 0, 0, 0, 39,
	46, 0, 48, 54, 64, 86, 0, 68, 41, 81,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	97, 98, 0, 35, 0, 51, 55, 84, 0, 63,
	45, 82, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 0, 705, 0, 0, 0, 69, 0, 67, 59,
	80, 0, 0, 65, 53, 78, 62, 79, 0, 77,
	83, 70, 38, 57, 34, 61, 66, 0, 42, 0,
	89, 90, 91, 92, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 73, 37,
	76, 0, 40, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 36, 60, 0, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 49, 96,
	0, 0, 52, 0, 0, 75, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 109, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 0, 0, 85, 0, 0, 0,
	0, 39, 46, 0, 48, 54, 64, 86, 0, 68,
	41, 81, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 84, 0, 0,
	0, 47, 97, 98, 0, 35, 0, 51, 50, 0,
	0, 63, 45, 82, 0, 0, 0, 0, 67, 59,
	80, 0, 0, 65, 53, 78, 62, 79, 69, 77,
	83, 70, 38, 57, 34, 61, 66, 0, 42, 0,
	89, 90, 91, 92, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 73, 37,
	76, 0, 40, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 36, 60, 0, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 49, 96,
	0, 0, 52, 0, 0, 75, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 109, 0, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 0, 0, 85, 0, 0, 0,
	0, 39, 46, 0, 48, 54, 64, 86, 0, 68,
	41, 81, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 84, 0, 0,
	0, 47, 97, 98, 0, 35, 0, 51, 50, 0,
	0, 63, 45, 82, 0, 0, 0, 0, 67, 59,
	80, 0, 0, 65, 53, 78, 62, 79, 69, 77,
	83, 70, 38, 57, 34, 61, 66, 0, 42, 0,
	89, 90, 91, 92, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 73, 37,
	76, 0, 40, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	49, 96, 0, 0, 52, 0, 0, 75, 56, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 32, 0, 0, 0,
	0, 87, 88, 0, 0, 0, 85, 0, 0, 0,
	0, 39, 46, 0, 48, 54, 64, 86, 0, 68,
	41, 81, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 97, 98, 0, 35, 0, 51, 55, 84,
	0, 63, 45, 82, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 0, 558, 0, 0, 0, 69, 0,
	67, 59, 80, 0, 0, 65, 53, 78, 62, 79,
	0, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 36, 60,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	49, 96, 0, 0, 52, 0, 0, 75, 56, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 32, 0, 1056, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 0, 0, 85, 0,
	0, 0, 0, 39, 46, 0, 48, 54, 64, 86,
	0, 68, 41, 81, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 84,
	0, 0, 0, 47, 97, 98, 0, 35, 0, 51,
	50, 0, 0, 63, 45, 82, 0, 0, 0, 0,
	67, 59, 80, 0, 0, 65, 53, 78, 62, 79,
	69, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 36, 60,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	49, 96, 0, 0, 52, 0, 0, 75, 56, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 0, 0, 85, 0,
	0, 0, 0, 39, 46, 0, 48, 54, 64, 86,
	0, 68, 41, 81, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 84,
	0, 0, 106, 47, 97, 98, 0, 35, 0, 51,
	50, 0, 0, 63, 45, 82, 0, 0, 0, 0,
	67, 59, 80, 0, 0, 65, 53, 78, 62, 79,
	69, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 36, 60,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	49, 96, 0, 0, 52, 0, 0, 75, 56, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 32, 0, 31, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 0, 0, 85, 0,
	0, 0, 0, 39, 46, 0, 48, 54, 64, 86,
	0, 68, 41, 81, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 84,
	0, 0, 0, 47, 97, 98, 0, 35, 0, 51,
	50, 0, 0, 63, 45, 82, 0, 0, 0, 0,
	67, 59, 80, 0, 0, 65, 53, 78, 62, 79,
	69, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 36, 60,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	49, 96, 0, 0, 52, 0, 0, 75, 56, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 0, 0, 85, 0,
	0, 0, 0, 39, 46, 0, 48, 54, 64, 86,
	0, 68, 41, 81, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 84,
	0, 0, 0, 47, 97, 98, 0, 35, 0, 51,
	50, 0, 0, 63, 45, 82, 0, 0, 0, 0,
	67, 59, 80, 0, 0, 65, 53, 78, 62, 79,
	69, 77, 83, 70, 38, 57, 34, 61, 66, 0,
	42, 0, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	73, 37, 76, 0, 40, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 0, 0, 85, 0,
	0, 0, 0, 39, 46, 0, 48, 54, 64, 86,
	0, 68, 41, 81, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 97, 98, 0, 35, 0, 51,
	0, 0, 0, 63, 45, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69,
}

var yyPact = [...]int16{
	414, -1000, -260, -1000, -1000, 1148, 311, 324, -1000, -1000,
	-1000, 16977, 350, 347, 231, 334, 17177, 16777, 15965, 357,
	316, -1000, -168, -152, -1000, -63, 352, -1000, 957, -1000,
	11219, 11219, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15353,
	17177, 316, 148, 316, 1169, 348, 627, 1296, 473, -1000,
	-1000, -1000, 316, 15965, 619, -1000, -1000, -1000, -1000, 15153,
	219, 12457, 325, -155, 18, -1000, -1000, -1000, -1000, -1000,
	1029, -1000, -1000, -1000, 1029, 77, 1138, 1029, 1138, -1000,
	1029, 1138, 71, 71, 71, 71, 71, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1137, 1128, -1000, 1029, 1029, 1029,
	1029, 1029, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1111, 106, 1111, 1039, 1039, -1000, -1000, 325,
	1124, 15965, 17177, 1168, 15965, -192, 15965, 15965, 1353, 15965,
	-1000, -1000, -1000, 175, 1265, 11219, 6284, 15965, -1000, 1263,
	394, 15965, 4808, -1000, 1236, -1000, -1000, -1000, -1000, -1000,
	-1000, 1121, 711, 17177, 279, 301, 403, 340, 869, -1000,
	-1000, -1000, 726, -1000, 17177, -1000, 1368, -1000, -1000, 269,
	-1000, 268, 614, 805, 15965, 1115, 187, 1114, 11844, 776,
	-1000, -266, -1000, 24, -1000, -1000, 749, 71, 1029, -1000,
	71, 727, 71, 71, -1000, -1000, 483, 1244, 483, 483,
	483, 483, 800, 800, -92, -92, -1000, -1000, -1000, -1000,
	775, 1111, -1000, -1000, -1000, 774, -1000, 15965, 17177, 1109,
	1160, 15965, 1290, 333, -1000, -1000, 1289, 1285, 974, -1000,
	-1000, 174, -1000, 406, -1000, 17177, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 987, -1000,
	299, 390, 5915, 219, -1000, -1000, -1000, -1000, -1000, 16377,
	-1000, 1364, 1319, 302, -6, -1000, 865, 854, -1000, 851,
	-1000, -1000, 36, -1000, -158, 92, 1, -1000, -1000, 1020,
	-1000, 1105, 9004, 1278, -1000, 1247, 771, -1000, 11513, -1000,
	-225, -1000, -1000, -1000, -225, -1000, -1000, -1000, 1020, -1000,
	1099, 1089, -1000, 1084, -1000, -1000, 1020, 471, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 990, 483, 71, 483, 989,
	988, 483, 483, -1000, -1000, 847, 553, -1000, -1000, -1000,
	-1000, 952, -1000, 948, -1000, 99, 94, -1000, 1014, -1000,
	946, 1018, 1157, 14953, 15965, 1060, 1046, 316, 1046, 1318,
	218, 15965, 1353, 15765, 1353, 406, 17177, 289, 17177, -1000,
	-1000, 303, 4439, -1000, -1000, 936, -1000, 253, 1029, 428,
	428, -159, 263, 257, 1020, -1000, -1000, -1000, -1000, -160,
	-1000, -1000, -1000, -1000, 614, -1000, 9004, -1000, 15765, 706,
	-1000, 9004, 404, 1020, 1020, -1000, -1000, 405, -1000, -1000,
	-1000, 9997, 9997, 9997, 9997, 9997, 9997, 9997, -1000, -1000,
	-1000, -1000, 38, -225, -1000, 793, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 456, 449, -1000, 8673, 1020, 1020, 1020,
	1020, 1020, 1020, 1020, 1020, 9004, 1020, 1228, 1020, 1020,
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 2326,
	1020, 1020, 1020, 1020, -1000, 165, -1000, 1013, 986, 1253,
	985, -1000, 10659, -1000, 819, -1000, 773, -1000, 772, 982,
	7668, 6653, -1000, -1000, 483, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 71, 798, 71, 22, 14, 769, -1000,
	759, 14953, 17177, 15965, 981, 1012, -1000, 252, 1058, 15765,
	-1000, 1331, 1375, -1000, 1046, 15965, -1000, 327, 1288, -1000,
	-1000, 1317, -1000, 1010, -1000, -1000, 1015, 1353, 1056, 17177,
	-1000, -1000, 293, 17177, -1000, -1000, -1000, -1000, -1000, 1175,
	16377, 1259, -1000, -1000, -1000, 683, -1000, -1000, 658, 213,
	634, -1000, 17177, -160, 9004, -1000, 1020, 605, 931, -113,
	9004, 9004, 742, 521, 9997, 710, 539, 9997, 9997, 9997,
	9997, 9997, 9997, 9997, 9997, 9997, 9997, 9997, 9997, 9997,
	9997, 9997, 781, 2241, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 828, -1000, 1046, 12244,
	12244, 32, 32, 32, 32, 32, 32, 12044, -1000, -263,
	-1000, -1000, 5546, 6653, 819, 926, 686, 8673, 8330, 8330,
	7006, 9004, 9997, 15553, 8330, 1299, 603, 686, 15553, 1310,
	819, 819, 819, -1000, 819, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 74, -1000, -1000, -1000, -1000, -1000,
	-1000, 8330, 8330, 8330, 8330, 9004, 1051, 753, -1000, 978,
	-225, -1000, -1000, -1000, -155, -1000, -1000, -1000, -1000, -1000,
	819, 8330, 912, 926, -1000, 12681, -1000, 445, 1020, -1000,
	483, -1000, 483, -1000, -1000, 976, 971, 966, 1048, 1047,
	-202, 749, 14953, 924, 1322, 1329, 1046, 1284, 1215, -1000,
	819, 1270, 17177, -1000, -1000, -1000, -1000, -1000, 197, 598,
	17177, 2586, 969, -1000, 12893, 1045, 1044, 313, 1154, 2335,
	184, -1000, 823, 578, 794, 573, 571, 569, 568, 561,
	560, 558, -1000, -1000, -1000, -1000, -1000, 1367, -1000, -1000,
	-1000, 1361, 1042, -1000, 1041, 605, 9004, 216, 1155, -1000,
	-1000, 521, 546, -1000, -1000, 756, -1000, -1000, 2328, -1000,
	-1000, -1000, -1000, 710, 9997, 9997, 9997, 2156, 2328, 2179,
	33, 64, 32, 16, 16, 17, 17, 17, 17, 17,
	79, 79, -1000, -1000, -1000, -1000, -87, -1000, 1029, 819,
	-1000, -225, 792, -1000, -1000, 786, 1020, 440, -1000, -1000,
	-1000, 9004, -1000, 819, 912, 12681, 912, 632, 1007, 10328,
	1029, -1000, 1029, 1039, -1000, -1000, 129, 1029, 126, -1000,
	-1000, -1000, -1000, 1039, -1000, -1000, -1000, -1000, -1000, 1029,
	1029, -1000, -1000, 1029, 1029, -1000, 1029, 1029, 651, 517,
	2239, 1011, -1000, 439, 912, 8330, -1000, 609, -1000, 9004,
	819, 15965, -1000, -1000, -1000, -1000, -1000, 912, 819, 1004,
	912, 912, 665, -1000, 962, 899, -1000, -1000, 912, 8330,
	-257, -1000, -1000, -1000, 16577, -1000, -1000, 4070, 8330, -1000,
	-1000, -1000, -1000, -202, 14953, 16377, 1345, 1037, 872, 1345,
	1254, 9004, 9004, 1331, -1000, 1046, -1000, -1000, 1299, -1000,
	-1000, 668, -1000, 1046, 964, -1000, 192, 146, 9004, -1000,
	2586, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1331, -1000, -1000, -1000, 17177, 2433, 17177, 17177, 17177,
	374, 9666, 9004, -1000, -1000, -1000, 15965, 864, 9335, 12893,
	12893, 9335, 12893, 12893, 16377, 16377, 254, -1000, 17177, -1000,
	-123, 2335, 17177, -1000, 746, -1000, -1000, 664, 745, 664,
	664, 664, 664, 664, 428, 428, 17177, 16377, 216, 605,
	-1000, -73, 1360, -1000, -1000, -1000, -1000, 2156, 2328, 2133,
	-1000, 9997, 9997, 88, -1000, 53, -1000, -225, 6653, 686,
	-1000, -1000, -1000, 10496, 781, 9004, -1000, 246, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10496, 9997, 9997, 9997, 9997, 9997, 5546, -79, 1002, 583,
	-1000, 9004, 639, -1000, -1000, -1000, -1000, -1000, -1000, -116,
	249, -1000, -1000, -1000, -1000, -1000, 1020, -1000, -1000, 435,
	819, 1345, 860, 909, 1175, 9004, 15765, -202, 1175, -1000,
	1366, 513, 699, 1003, -1000, 626, 1322, 819, 1183, -1000,
	-1000, -88, 17177, 9004, 2627, 2586, 686, -1000, 1322, 324,
	14741, 13929, 1001, 10939, -1000, 2963, 650, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 17177, 1357, 1356, 1354, 1348, 2619, 404, 618,
	145, 1303, -1000, -1000, 9335, -1000, -1000, -1000, -1000, -1000,
	907, 891, 1031, 1020, 885, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 614, 614, 883,
	880, -1000, 216, -1000, 428, 428, -1000, 9997, 2328, 2328,
	10, -1000, 786, -1000, -1000, 819, 1029, 819, 605, -1000,
	-1000, 819, 228, 2116, 2054, 1981, 2022, -1000, 1020, -70,
	-1000, 686, 9004, -1000, -1000, -1000, 181, 739, 730, 721,
	694, 62, -1000, 1328, 377, 5177, -1000, 1175, 1345, 1175,
	1154, 686, 877, 1345, 1154, -1000, 1225, 9004, 9004, 9004,
	-1000, 1254, -1000, 8330, -1000, -1000, -241, -1000, 686, -1000,
	-1000, 2586, 1926, -1000, 1254, 14541, 15965, 918, -1000, 968,
	1106, -1000, -1000, -1000, 1267, 13105, 13305, 17177, 186, -1000,
	-1000, 1000, 3332, -10, -1000, -1000, -1000, 554, 429, 14341,
	-1000, 1241, -1000, -1000, 2433, 1255, -1000, -1000, -1000, -1000,
	-1000, 2586, 2586, 2586, 598, 196, -1000, 282, 16377, 17177,
	-1000, 2335, -1000, -1000, 307, 1175, -1000, -1000, -1000, 2328,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 9997, 9997, -1000,
	9997, 9997, 9997, 819, 785, 686, 688, -1000, 687, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 14129, -1000, 1324, 819,
	-1000, 1154, 1175, -1000, -1000, -1000, 1175, -1000, 1221, 686,
	686, -1000, -1000, 1005, 9004, -261, 2577, -1000, -1000, 229,
	15965, -1000, 229, 889, 13929, 15965, -1000, -1000, 15553, 13929,
	13929, 13929, 13929, 13929, -1000, 1201, 1193, -1000, 1211, 1204,
	1217, 15965, -1000, 846, 13105, 436, 1020, -1000, 16165, -1000,
	-1000, -1000, 11219, 1292, 3701, 1000, -10, 999, -1000, -8,
	-20, 7337, 6653, 483, -1000, -1000, -1000, -1000, -1000, 17177,
	1918, 970, 892, 143, 189, 159, -1000, 168, 839, 819,
	-1000, 15965, 1154, 228, 228, 228, 228, 50, -1000, -1000,
	-1000, -1000, -1000, 422, 9004, -1000, -1000, -1000, 1154, -1000,
	1345, 13929, 686, 582, -1000, -1000, 863, 1020, -1000, 1345,
	13929, 973, -1000, 984, -1000, 550, 1106, 1035, 1126, 908,
	-1000, -1000, -1000, -1000, 1191, -1000, 1190, -1000, -1000, -1000,
	-1000, -105, 345, 339, 338, 17177, -1000, 1046, -1000, 999,
	-10, -17, -1000, -1000, -1000, -1000, 686, 530, -1000, -1000,
	-1000, 2586, 547, 593, 2586, -1000, -1000, 153, -1000, -1000,
	-1000, 1028, -1000, -1000, -1000, -1000, -1000, 819, 211, -127,
	6653, 859, -1000, 686, -1000, 1336, 997, -1000, 1108, 15553,
	1020, -1000, 13717, 17177, 1331, 973, -1000, 1331, 15553, 9004,
	-1000, -1000, 9004, 1027, -1000, 9004, -1000, -1000, -1000, -1000,
	1023, 1020, 1020, 1020, 832, -1000, -1000, -1000, -1000, -16,
	-28, -1000, 9004, 312, 141, 233, -1000, -1000, 17177, -1000,
	1206, -83, -132, -1000, -1000, 819, 9004, 1334, 1291, -1000,
	1250, 917, 994, -1000, -1000, 7999, 819, 835, 421, 832,
	1322, -1000, 1322, -1000, 686, 686, 15765, 686, -140, 15765,
	15765, 15765, 13505, 17177, -1000, -1000, -1000, 686, -1000, 2586,
	2569, 827, -1000, 1050, -1000, -1000, -1000, -1000, 9004, 9004,
	248, -1000, 1020, -1000, -1000, 955, 17177, 17177, -1000, -1000,
	-1000, 822, 818, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	810, 810, 810, 436, -1000, 240, -1000, -1000, -96, 686,
	996, 1355, -1000, 1020, -1000, 1046, 413, -1000, -1000, -1000,
	-140, -1000, -1000, -1000, -105, -1000, -129, 15553, 994, 819,
	17177, -1000, -1000, -136, 993, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1602, 90, 54, 1601, 1598, 1597, 1596, 1595, 1594,
	1589, 1587, 1585, 1584, 1578, 1577, 1574, 1567, 1566, 85,
	1558, 1557, 1556, 65, 1555, 1553, 1551, 1541, 62, 73,
	82, 99, 5, 1540, 39, 29, 34, 1538, 24, 1537,
	1534, 44, 1531, 28, 1530, 1528, 164, 1527, 1526, 6,
	257, 63, 93, 1524, 1519, 83, 1226, 1515, 1509, 66,
	1508, 1507, 74, 9, 4, 7, 8, 1504, 58, 14,
	1503, 68, 1502, 1498, 1495, 1494, 37, 1493, 46, 52,
	22, 51, 1492, 41, 64, 33, 20, 13, 1, 42,
	27, 1491, 21, 30, 23, 1489, 53, 1487, 112, 35,
	49, 69, 0, 77, 133, 79, 1483, 1481, 1480, 800,
	78, 25, 11, 1476, 57, 1475, 59, 87, 26, 86,
	80, 1474, 81, 1473, 1472, 1469, 1468, 1467, 1886, 476,
	106, 150, 48, 1466, 1463, 76, 302, 298, 71, 303,
	613, 60, 1462, 1459, 1458, 97, 1456, 67, 88, 16,
	358, 1454, 1453, 1452, 1450, 1438, 1437, 1436, 84, 1435,
	72, 47, 50, 220, 36, 1434, 1432, 1431, 1430, 61,
	1429, 1428, 1427, 56, 1424, 1423, 91, 70, 105, 102,
	104, 1422, 1419, 75, 96, 98, 1418, 103, 38, 10,
	55, 1417, 43, 1416, 1414, 1412, 2, 3, 1411, 1410,
	1409, 1405, 1404, 1403, 45, 1401, 1400, 1399, 15, 1398,
	1395, 40, 1394, 1391, 1390, 1387, 1386, 1277, 843, 1382,
	118, 107, 1381, 135,
}

var yyR1 = [...]uint8{
	0, 213, 214, 214, 1, 1, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 15, 15, 15, 15, 15, 216, 216,
	2, 2, 3, 4, 4, 5, 5, 6, 6, 22,
	22, 7, 8, 8, 8, 219, 219, 41, 41, 85,
	85, 9, 9, 9, 9, 10, 10, 193, 193, 192,
	194, 194, 11, 11, 11, 11, 11, 186, 186, 186,
	186, 186, 12, 12, 189, 189, 189, 13, 13, 13,
	90, 90, 94, 94, 94, 95, 95, 95, 95, 205,
	205, 115, 115, 215, 215, 220, 220, 220, 220, 220,
	220, 220, 184, 184, 184, 184, 185, 185, 185, 185,
	187, 187, 188, 188, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 191, 191, 100, 100, 167, 167,
	167, 168, 168, 168, 168, 168, 168, 170, 170, 171,
	171, 107, 107, 172, 172, 18, 152, 153, 153, 153,
	153, 153, 153, 153, 140, 140, 118, 118, 118, 118,
	118, 118, 118, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 178, 178, 178, 178, 178, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 180, 181, 182, 174, 174,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 130, 130, 130, 130, 130, 130,
	173, 173, 169, 169, 169, 169, 122, 122, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 121, 121,
	121, 121, 121, 121, 121, 126, 126, 123, 123, 123,
	123, 123, 123, 123, 123, 119, 119, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 127,
	127, 125, 125, 125, 125, 125, 125, 125, 125, 139,
	139, 128, 128, 137, 137, 138, 138, 138, 129, 129,
	129, 136, 136, 136, 133, 133, 134, 134, 135, 135,
	135, 131, 131, 131, 132, 132, 132, 142, 163, 163,
	163, 165, 165, 166, 166, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 151, 151, 183, 183,
	162, 162, 162, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 150, 150, 160, 160, 161, 161, 158, 158,
	158, 159, 145, 145, 145, 145, 145, 146, 147, 147,
	147, 147, 143, 144, 176, 176, 176, 209, 209, 209,
	209, 209, 209, 210, 210, 177, 177, 148, 148, 149,
	149, 156, 156, 156, 156, 221, 221, 154, 154, 154,
	155, 155, 155, 222, 19, 20, 20, 21, 21, 21,
	25, 25, 25, 23, 23, 24, 24, 30, 30, 29,
	29, 31, 31, 31, 31, 106, 106, 106, 105, 105,
	206, 206, 206, 206, 206, 33, 33, 34, 34, 35,
	35, 36, 36, 36, 196, 196, 195, 195, 197, 197,
	197, 197, 197, 197, 48, 48, 83, 83, 83, 86,
	86, 37, 37, 37, 37, 38, 38, 39, 39, 40,
	40, 113, 113, 112, 112, 112, 111, 111, 42, 42,
	42, 44, 43, 43, 43, 43, 45, 45, 47, 47,
	46, 46, 49, 49, 49, 49, 50, 50, 84, 84,
	32, 32, 32, 32, 32, 32, 32, 97, 97, 52,
	52, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 61, 61, 61, 61, 61, 61, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 28, 28,
	62, 62, 62, 68, 63, 63, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 59, 59, 59, 59, 59, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 223, 223, 60,
	60, 60, 60, 26, 26, 26, 26, 26, 114, 114,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 117, 117, 117, 117, 117, 117, 117, 117,
	72, 72, 27, 27, 70, 70, 71, 99, 99, 73,
	73, 69, 69, 69, 198, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 74, 74, 75, 75, 207,
	207, 208, 76, 76, 77, 77, 78, 79, 79, 79,
	80, 80, 80, 80, 81, 81, 81, 54, 54, 54,
	54, 54, 54, 82, 82, 82, 82, 87, 87, 64,
	64, 66, 66, 65, 67, 88, 88, 92, 89, 89,
	93, 93, 93, 93, 93, 16, 17, 91, 91, 91,
	108, 108, 108, 98, 98, 96, 96, 103, 103, 104,
	104, 109, 109, 109, 110, 110, 199, 199, 199, 200,
	200, 200, 201, 201, 202, 203, 203, 204, 212, 212,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 217, 218,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 7, 10, 7, 11, 11, 9, 13,
	16, 5, 8, 11, 13, 13, 6, 7, 1, 1,
	4, 6, 10, 1, 3, 1, 3, 7, 8, 1,
	1, 8, 8, 7, 6, 1, 1, 1, 3, 0,
	4, 3, 4, 5, 4, 2, 6, 1, 3, 2,
	0, 1, 2, 2, 2, 3, 5, 0, 2, 2,
	2, 2, 3, 5, 1, 2, 3, 7, 5, 9,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 0, 3, 0, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 1, 1, 1, 3,
	1, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 4, 0, 3, 0, 2,
	2, 0, 2, 2, 2, 2, 2, 0, 2, 0,
	3, 0, 1, 0, 2, 4, 4, 0, 1, 3,
	3, 3, 3, 3, 2, 2, 3, 1, 1, 1,
	1, 1, 0, 2, 2, 3, 2, 4, 2, 4,
	2, 2, 3, 2, 3, 2, 7, 9, 3, 3,
	6, 9, 9, 6, 6, 8, 8, 5, 8, 7,
	4, 2, 4, 6, 2, 4, 2, 1, 1, 1,
	2, 1, 1, 1, 3, 1, 2, 1, 1, 2,
	0, 4, 3, 4, 3, 3, 3, 3, 3, 3,
	3, 2, 4, 6, 2, 3, 2, 3, 1, 3,
	0, 2, 0, 2, 2, 3, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
	2, 2, 2, 1, 1, 0, 1, 1, 3, 3,
	2, 2, 2, 1, 1, 1, 1, 4, 5, 4,
	4, 4, 1, 2, 2, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 3,
	3, 0, 3, 3, 0, 1, 0, 1, 0, 2,
	1, 0, 3, 3, 0, 1, 2, 6, 0, 1,
	4, 1, 2, 1, 3, 2, 3, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 1, 1,
	0, 2, 5, 2, 3, 3, 2, 3, 2, 2,
	3, 4, 1, 1, 1, 1, 1, 3, 3, 2,
	2, 1, 2, 5, 5, 8, 8, 13, 1, 1,
	2, 2, 10, 7, 0, 1, 1, 0, 1, 1,
	1, 2, 2, 1, 2, 0, 3, 0, 1, 1,
	3, 0, 4, 1, 3, 2, 1, 1, 2, 1,
	1, 1, 1, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 3, 6, 4, 7, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 0, 4, 1, 3, 1, 1,
	1, 1, 1, 1, 4, 8, 1, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 0, 4,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 6, 2,
	2, 2, 2, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 2, 4, 5, 5, 6, 4, 4, 4,
	6, 6, 6, 6, 6, 8, 8, 6, 8, 8,
	9, 7, 5, 4, 4, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 2, 2, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 0,
	2, 1, 3, 5, 3, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 3, 0, 2, 1,
	3, 1, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 5, 3, 1, 3, 1, 2, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 2, 0,
	2, 2, 0, 1, 4, 1, 3, 2, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -213, -1, -14, -15, -18, 122, 123, -214, 377,
	-152, 56, -209, -210, -172, 131, 144, 162, 163, 349,
	129, 361, 362, 146, 364, 76, -96, 134, -153, -140,
	-103, 61, 59, -102, 169, 340, 21, 204, 167, 286,
	207, 295, 173, 28, 256, 347, 287, 336, 289, 33,
	143, 342, 37, 159, 290, 131, 41, 168, 18, 154,
	222, 170, 161, 346, 291, 158, 171, 153, 294, 363,
	166, 208, 297, 203, 202, 40, 205, 164, 160, 162,
	155, 296, 348, 165, 132, 281, 292, 276, 277, 175,
	176, 177, 178, 179, 180, 181, 34, 337, 338, 130,
	130, 132, 202, 132, -103, -103, 135, -46, -109, 59,
	-102, 61, 129, -98, 135, 364, 361, 362, 329, 129,
	58, 57, -141, -118, -122, -119, -124, -123, -125, -103,
	-120, -121, 238, 341, 235, 239, 236, 241, 242, 243,
	116, 240, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 244, 256, 31, 151, 228, 229, 230,
	233, 232, 234, 231, 257, 258, 259, 260, 261, 262,
	263, 264, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 220, 221, 223, 224, 225, 227, 226, -141,
	-103, 54, 201, -103, -98, 203, -98, 54, -184, 54,
	19, 182, 183, 195, 78, 23, 119, -98, -46, 78,
	-46, 293, -156, -221, 344, 35, -140, -142, -145, -143,
	-144, -157, -146, 138, 136, 140, 141, 146, -150, 130,
	147, 71, 78, -178, 138, -181, 54, 272, 278, 136,
	147, 146, 375, 69, 139, 23, 351, 353, 29, 30,
	-135, 378, 266, -133, 275, -128, 56, -128, -127, 237,
	-129, 56, -128, -129, -128, -129, -131, 239, -131, -131,
	-131, -131, 56, 56, -128, -128, -128, -128, -128, -137,
	56, -126, 222, -137, -138, 56, -138, 54, 55, -46,
	-103, 54, -46, -205, 372, 373, -46, -46, -187, -185,
	8, 9, 10, -46, 196, 24, -118, -110, -109, -101,
	127, 183, 352, 77, 23, 25, 272, 278, 182, 80,
	116, 16, 81, 189, 361, 362, 115, 330, 122, 50,
	322, 323, 320, 187, 332, 333, 321, 279, 194, 20,
	29, 372, 10, 26, 149, 22, 109, 124, 184, 84,
	85, 152, 24, 150, 73, 190, 192, 19, 53, 142,
	11, 351, 13, 14, 366, 353, 135, 134, 96, 365,
	130, 48, 8, 118, 27, 373, 93, 44, 147, 193,
	46, 94, 17, 324, 325, 32, 339, 156, 111, 51,
	38, 367, 78, 368, 71, 54, 293, 188, 76, 15,
	49, 157, 369, 144, 191, 95, 125, 329, 47, 185,
	370, 128, 186, 6, 335, 31, 148, 45, 129, 280,
	83, 133, 72, 163, 5, 146, 9, 52, 55, 326,
	327, 328, 36, 82, 12, 145, 343, 74, -46, 24,
	127, -46, -154, 57, -104, 69, -103, -101, 34, 56,
	-177, 54, 78, -148, -103, 147, -150, -150, 59, -150,
	59, 130, 59, 71, 19, -103, 9, 147, 147, -177,
	61, -46, 56, -174, 352, 16, 56, -179, 56, -180,
	61, 62, 63, 64, 71, -130, 70, -52, 267, -59,
	320, 323, 322, 268, 72, 73, -103, -109, 59, -102,
	-182, 63, 379, -134, 276, 63, -131, -128, -131, 63,
	59, -131, -131, -132, 116, 115, 31, -132, -132, -132,
	-132, -139, 61, -139, -136, 343, 344, -136, 63, -137,
	63, -46, -103, 56, 54, -46, 23, 132, 23, -167,
	23, 54, 57, 196, -184, -103, 55, -107, 138, -145,
	146, 127, 86, -104, -221, -161, -158, -103, 147, 10,
	9, 19, 142, 136, 375, 59, 59, 59, -176, 146,
	361, 362, 363, -178, 375, -130, -217, 56, 56, -32,
	-51, 78, -56, 29, 24, -55, -52, -69, -198, -67,
	-68, 116, 117, 105, 106, 113, 79, 118, -59, -57,
	-58, -60, -201, 61, 62, -103, 60, 70, 63, 64,
	65, 66, 71, -109, 298, -65, -217, 46, 47, 330,
	331, 332, 333, 339, 334, 81, 36, 38, 244, 267,
	268, 320, 328, 327, 326, 324, 325, 322, 323, 374,
	135, 321, 111, 329, 265, 23, 29, 63, -179, 56,
	-180, -169, 374, -169, -217, -128, 56, -128, 56, 56,
	-217, 119, 58, -132, -131, -132, 58, 58, -132, -132,
	59, 59, 116, 58, 57, 58, 228, 228, 57, 58,
	57, 56, 55, 54, -160, -161, -59, -103, -46, 56,
	-2, -3, -4, 6, -217, -98, -2, -168, 19, 170,
	171, -46, -185, -83, -103, 147, -187, -184, -103, -216,
	130, 147, -103, 138, -145, -155, -104, 61, 63, 58,
	57, -128, -159, 270, -128, -147, 166, 167, 31, 168,
	-147, 363, 147, 147, -217, -176, -177, -32, -83, 58,
	77, 76, 93, -32, -53, 96, 78, 94, 95, 80,
	102, 101, 112, 105, 106, 107, 108, 109, 110, 111,
	103, 104, 115, 374, 86, 87, 88, 89, 90, 91,
	92, 97, 98, 99, 100, -97, -217, -68, -217, 120,
	121, -56, -56, -56, -56, -56, -56, -56, -202, 266,
	-169, 61, 119, 119, -2, -63, -32, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -72, -32, -217, 39,
	-217, -217, -217, -223, -217, -223, -223, -223, -223, -223,
	-223, -223, -117, 116, 239, 151, 230, -120, -119, 245,
	244, -217, -217, -217, -217, 56, 353, 57, 58, -179,
	61, 58, 269, 118, -118, -218, 58, 58, 58, 58,
	-30, 22, -29, -63, -31, -32, 107, -109, -104, -132,
	-131, 61, -131, 277, 277, 63, 63, -160, -103, -46,
	58, 56, 56, -83, -76, 15, -21, 5, -19, -222,
	-2, -46, 133, 21, 6, 8, 9, 10, 19, -100,
	57, 23, -187, -215, 56, -103, 146, -103, -163, -165,
	343, -164, 55, 143, 69, 175, 176, 177, 178, 179,
	180, 181, -158, -79, 25, 26, -177, 54, 71, 169,
	-177, 54, -148, -103, -176, -32, -217, -218, 58, 349,
	350, -32, -32, -61, 71, 78, 72, 73, -56, -62,
	-65, -68, 67, 96, 94, 95, 80, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-56, -56, -114, 59, 61, -122, 229, -117, -120, 59,
	-55, 61, -103, -55, -103, 378, -104, -110, -101, -104,
	-218, 57, -218, -2, -29, -32, -29, -32, -116, 116,
	235, 151, 230, 224, 254, 255, 274, 228, 275, 217,
	209, 214, 227, 225, 211, 226, 210, 223, 220, 233,
	232, 234, 245, 236, 241, 243, 242, 240, -32, -69,
	-56, -69, -103, -109, -29, -23, 22, -70, -71, 82,
	-69, 19, -218, -218, -218, -218, 237, -29, -30, -29,
	-29, -29, -32, 56, 63, 58, -135, -218, -29, 57,
	-218, -218, -106, -105, 23, -103, 61, 119, -217, -132,
	-132, 58, 58, 58, 56, 56, -84, 365, -160, 58,
	-80, 17, 16, -5, -3, -217, 21, 22, -25, 42,
	43, -20, -218, 23, -149, -103, 184, -99, 82, -103,
	-188, -190, -6, -8, -7, -10, -9, -11, -12, -13,
	-16, -3, -22, 10, 9, 20, 31, 188, 189, 194,
	190, 145, 135, -17, 8, 329, 54, -220, -103, 105,
	86, 61, -140, 57, 56, 56, 136, -162, 54, -164,
	343, 56, 345, 59, -151, 86, 61, 86, 86, 86,
	86, 86, 86, 86, 9, 10, 56, 56, -218, -32,
	-173, 168, 54, 71, 72, 73, -62, -56, -56, -56,
	-28, 152, 77, 343, -218, -203, -204, 61, 119, -32,
	-218, -218, -218, 57, 55, 57, -128, -128, -128, -138,
	215, -128, 215, -138, -128, -128, -128, -128, -128, -128,
	23, 57, 11, 57, 57, 11, 119, -218, -29, -73,
	-71, 84, -32, -218, -109, -218, -218, -218, -218, 58,
	-175, 58, 58, -218, -31, -206, 376, -105, 107, -110,
	-30, -84, -160, -161, -50, 12, 56, 58, -50, -81,
	19, 32, -32, -77, -78, -32, -76, -2, -23, 68,
	-2, -170, 57, 55, 185, 204, -32, -190, -76, -19,
	-19, -19, -193, -103, -192, -19, -212, -211, 299, 300,
	301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, -103,
	-103, -103, -186, 38, 191, 192, 193, -51, -56, -32,
	-51, -46, 58, -220, -103, -220, -220, -220, -220, -220,
	-161, -161, 147, -103, -166, -164, -103, 63, -183, 54,
	74, 63, -183, -183, -183, -183, -183, -147, -147, -149,
	-161, -173, -218, 336, 10, 9, -28, 77, -56, -56,
	228, 379, 57, -169, -104, -116, 116, -114, -32, -131,
	59, -116, -56, -56, -56, -56, -56, -104, 340, -76,
	85, -32, 83, 349, 350, 58, 205, 355, 356, 156,
	357, 168, 358, 359, -217, 119, -218, -50, 58, 58,
	-163, -32, -83, -84, -163, 9, 96, 57, 18, 57,
	-79, -80, -218, -24, 45, -171, 343, -103, -32, -191,
	-190, 204, -189, -190, -80, -96, 11, -41, -46, -34,
	-35, -36, -37, -48, -68, -217, -46, 57, -194, -118,
	186, -89, -115, 206, -93, 288, 287, -104, 298, -91,
	286, 239, 285, -183, 57, -103, 11, 11, 11, 11,
	-190, 204, 83, 204, -100, 19, 58, 58, 56, -217,
	58, 57, -177, -177, 58, 58, -173, -147, -147, -56,
	277, -204, -218, -218, -218, -218, -218, 19, 57, -218,
	57, 19, -217, -27, 335, -32, 343, 63, 16, 63,
	63, 63, 63, 356, 156, 358, 16, -218, 157, -76,
	107, -163, -50, -163, -162, 58, -50, -162, 40, -32,
	-32, -78, -81, -29, 375, -190, 377, -190, -81, -47,
	27, -46, -46, -41, -219, 57, 11, 55, 31, 57,
	-42, -44, -43, -45, 44, 48, 50, 45, 46, 47,
	51, -113, 23, -34, -217, -112, 157, -111, 23, -109,
	61, -192, -103, 187, 57, -89, 206, -90, -94, 289,
	291, 86, 119, -108, -103, 61, 29, 31, -211, 27,
	-189, -188, -189, -99, 184, -199, 197, 78, -161, -103,
	-164, 139, -163, -56, -56, -56, -56, -56, -218, 61,
	63, 63, 360, -109, 16, -218, -162, -163, -163, 41,
	-33, 11, -32, 377, 85, -190, -85, 157, -46, -85,
	55, -34, -46, -88, -92, -69, -35, -36, -36, -35,
	-36, 44, 44, 44, 49, 44, 49, 44, -43, -109,
	-218, -49, 52, 134, 53, -217, -111, 19, -93, -90,
	57, 290, 292, 293, 54, 74, -32, -104, -132, -103,
	85, 377, 377, 85, 204, 185, -200, 198, 197, 58,
	-218, -46, -162, -218, -218, -218, -218, -26, 96, 343,
	119, -207, -208, -32, -162, -50, -34, 85, -54, 31,
	36, -2, -217, -217, -50, -34, -50, -50, 57, 86,
	-39, -38, 54, 55, -40, 54, -38, 44, 44, -196,
	343, 130, 130, 130, -86, -103, -2, -94, -95, 294,
	291, 297, 86, 85, 84, -189, 200, 199, 56, -218,
	341, 51, 346, -104, -218, -76, 57, -74, 13, -87,
	54, -88, -64, -66, -65, -217, -2, -82, -103, -86,
	-76, -50, -76, -92, -32, -32, 56, -32, 56, -217,
	-217, -217, -218, 57, 291, 295, 296, -32, 135, 204,
	377, -149, 41, 342, 347, -218, -208, -75, 14, 16,
	28, -87, 57, -218, -218, -218, 57, 119, -218, -80,
	-80, -83, -195, -197, 366, 367, 368, 369, 370, 371,
	-83, -83, -83, -112, -103, -189, 85, 58, 41, -32,
	-63, 147, -66, 36, -2, -217, -103, -103, 58, 58,
	57, -218, -218, -218, -49, 85, 343, 9, -64, -2,
	119, -197, -196, 346, -88, -218, -103, 347,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 765, 1, 3,
	6, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	763, 388, 389, 390, 393, 0, 0, 766, 0, 148,
	162, 162, 767, 768, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 0,
	0, 763, 0, 763, 0, 0, 0, 0, 500, 771,
	772, 773, 763, 0, 0, 394, 391, 392, 144, 0,
	401, 0, 154, 318, 314, 157, 158, 159, 160, 161,
	301, 237, 265, 266, 301, 289, 308, 301, 308, 272,
	301, 308, 321, 321, 321, 321, 321, 280, 281, 282,
	283, 284, 285, 286, 949, 0, 257, 301, 301, 301,
	301, 301, 263, 264, 291, 292, 293, 294, 295, 296,
	297, 298, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 303, 255, 303, 305, 305, 253, 254, 155,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 0, 0, 162, 0, 0, 145, 0,
	0, 0, 146, 403, 0, 406, 149, 150, 151, 152,
	153, 0, 395, 397, 0, 0, 0, 0, 0, 362,
	363, 164, 0, 166, 0, 168, 0, 170, 171, 0,
	173, 175, 395, 0, 0, 0, 0, 0, 0, 0,
	163, 0, 320, 316, 315, 236, 0, 321, 301, 290,
	321, 0, 321, 321, 273, 274, 324, 0, 324, 324,
	324, 324, 0, 0, 311, 311, 260, 261, 262, 248,
	0, 303, 256, 250, 251, 0, 252, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 0, 128, 0, 110,
	106, 107, 108, 0, 105, 0, 21, 501, 774, 775,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 0, 764,
	141, 0, 0, 0, 407, 409, 769, 770, 405, 0,
	372, 0, 0, 0, 398, 353, 0, 0, 356, 0,
	358, -2, 384, 165, 0, 0, 0, 172, 174, 0,
	178, 179, 782, 0, 208, 0, 0, 191, 0, 194,
	-2, 197, 198, 199, 232, 201, 202, 203, 0, 205,
	301, 301, 228, 0, 519, 520, 0, 0, -2, -2,
	206, 207, 319, 156, 317, 0, 324, 321, 324, 0,
	0, 324, 324, 275, 325, 0, 0, 276, 277, 278,
	279, 0, 299, 0, 258, 0, 0, 259, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 763, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 397, 26,
	142, 0, 0, 408, 404, 0, 366, 301, 301, 0,
	0, 0, 0, 0, 0, 354, 355, 357, 360, 384,
	385, 386, 190, 167, 395, 169, 782, 1004, 0, 0,
	510, 782, 515, 517, 0, 556, 557, 558, 559, 560,
	561, 782, 782, 782, 782, 782, 782, 782, 588, 589,
	590, 591, 0, -2, 696, 691, 698, 699, 700, 701,
	702, 703, 704, 0, 0, 744, 782, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, 0, 0,
	0, 627, 627, 627, 627, 627, 627, 627, 627, 0,
	0, 0, 0, 0, 783, 0, 209, 0, 0, 0,
	0, 196, 162, 200, 0, 224, 0, 226, 0, 0,
	-2, 0, 302, 267, 324, 269, 309, 310, 270, 271,
	326, 322, 323, 321, 0, 321, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 364, 365, 301, 0, 0,
	-2, 712, 0, 413, 0, 0, -2, 0, 0, 129,
	130, 126, 111, 109, 466, 467, 0, 0, 93, 0,
	28, 29, 398, 397, 27, 402, 410, 411, 412, 328,
	0, 717, 370, 371, 369, 395, 378, 379, 0, 0,
	395, 396, 397, 384, 782, 361, 0, 0, 0, 0,
	782, 782, 0, 513, 782, 0, 0, 782, 782, 782,
	782, 782, 782, 782, 782, 782, 782, 782, 782, 782,
	782, 782, 0, 0, 537, 538, 539, 540, 541, 542,
	543, 544, 545, 546, 547, 516, 0, 530, 0, 0,
	0, 579, 580, 581, 582, 583, 584, 585, 592, 0,
	695, 697, 0, 0, 33, 0, 554, 782, 782, 782,
	782, 782, 782, 0, 782, 423, 0, 681, 0, 0,
	0, 0, 0, 618, 0, 619, 620, 621, 622, 623,
	624, 625, 626, 672, 0, 674, 675, 676, 677, 678,
	679, 782, -2, 782, 782, 782, 187, 0, 192, 0,
	232, 195, 233, 234, 318, 204, 1005, 225, 227, 229,
	0, 782, 0, 0, 429, 435, 431, 0, 0, 268,
	324, 300, 324, 312, 313, 0, 0, 0, 0, 0,
	508, 1004, 0, 0, 720, 0, 0, 417, 420, 415,
	33, 0, 0, 132, 133, 134, 135, 136, 0, 687,
	0, 0, 0, 22, 95, 0, 0, 398, 350, 329,
	0, 331, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 367, 368, 718, 719, 373, 0, 380, 381,
	374, 0, 0, 398, 0, 0, 782, 230, 180, 183,
	184, 511, 512, 514, 531, 0, 533, 535, 521, 522,
	550, 551, 552, 0, 782, 782, 782, 548, 526, 0,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 576, 638, 639, 577, 0, 587, 301, 0,
	574, 232, 0, 575, 586, 0, 692, 0, -2, 694,
	553, 782, 743, 33, 0, 435, 0, 0, 0, -2,
	301, 643, 301, 305, 646, 647, 648, 301, 651, 653,
	654, 655, 656, 305, 658, 659, 660, 661, 662, 301,
	301, 665, 666, 301, 301, 669, 301, 301, 0, 558,
	0, 0, 691, 0, 0, 782, 424, 689, 684, 782,
	0, 0, 615, 616, 617, 628, 673, 0, 0, 428,
	0, 0, 0, 210, 0, 0, 235, 593, 0, 782,
	440, 597, 432, 436, 0, 438, 439, 0, -2, 287,
	288, 304, 307, 508, 0, 0, 506, 0, 0, 506,
	724, 782, 782, 712, 35, 0, 418, 419, 423, 421,
	422, 414, 34, 0, 137, 399, 0, 0, 782, 468,
	18, 112, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 712, 413, 413, 413, 0, 413, 0, 0, 0,
	67, 782, 782, 755, 39, 40, 0, 0, -2, 95,
	95, -2, 95, 95, 0, 0, 0, 327, 0, 332,
	0, 0, 0, 335, 0, 347, 337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 230, 0,
	176, 0, 0, 532, 534, 536, 523, 548, 527, 0,
	524, 782, 782, 0, 518, 0, 785, 232, 0, 555,
	-2, 598, 599, 0, 0, 782, 640, 321, 644, 645,
	649, 650, 652, 657, 663, 664, 667, 668, 670, 671,
	0, 782, 782, 782, 782, 782, 0, 0, 712, 0,
	685, 782, 0, 613, 614, 629, 630, 631, 632, 0,
	0, 189, 193, 594, 430, 595, 0, 437, 433, 0,
	0, 506, 0, 0, 328, 782, 0, 508, 328, 30,
	0, 0, 721, 713, 714, 717, 720, 33, 425, 416,
	-2, 139, 0, 782, 127, 0, 688, 113, 720, 765,
	0, 0, 55, -2, 57, 0, 0, 788, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 62,
	63, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	510, 126, 94, 96, -2, 97, 98, 99, 100, 101,
	0, 0, 0, 351, 0, 333, 338, 336, 339, 348,
	349, 340, 341, 342, 343, 344, 345, 395, 395, 0,
	0, 383, 230, 231, 0, 0, 525, 782, 549, 528,
	0, 784, 0, 787, 693, 0, 301, 0, 0, 641,
	642, 0, 0, 0, 0, 0, 0, 692, 0, 682,
	612, 690, 782, 185, 186, 188, 0, 0, 0, 0,
	0, 0, 221, 0, 0, 0, 596, 328, 506, 328,
	350, 507, 0, 506, 350, 725, 0, 782, 782, 782,
	716, 724, 36, 782, 426, 16, 0, 400, 138, 17,
	124, 0, 0, 74, 724, 0, 0, 0, 47, 0,
	447, 449, 450, 451, 481, 0, 483, 0, 0, 59,
	61, 51, 0, 0, 748, 91, -2, 0, 0, 0,
	-2, 0, 759, 756, 0, 65, 68, 69, 70, 71,
	72, 0, 0, 0, 687, 0, 23, 776, 0, 0,
	330, 0, 375, 376, 0, 328, 177, 181, 182, 529,
	578, 786, 600, 603, 601, 602, 604, 782, 782, 607,
	782, 782, 782, 0, 0, 686, 0, 212, 0, 214,
	215, 216, 217, 218, 219, 220, 0, 441, 0, 0,
	434, 350, 328, 10, 8, 509, 328, 12, 0, 722,
	723, 715, 31, 445, 782, 0, 0, 75, 123, 49,
	0, 499, -2, 0, 0, 0, 45, 46, 0, 0,
	0, 0, 0, 0, 488, 0, 0, 491, 0, 0,
	0, 0, 482, 0, 0, 502, 0, 484, 0, 486,
	487, 58, 162, 0, 0, 52, 0, 54, 80, 0,
	0, 782, 0, 324, 760, 761, 762, 758, 789, 0,
	0, 0, 0, 0, 0, 779, 777, 0, 0, 0,
	334, 0, 350, 0, 0, 0, 0, 633, 611, 683,
	211, 213, 222, 0, 782, 443, 7, 11, 350, 726,
	506, 0, 140, 0, 19, 76, 0, 0, 498, 506,
	0, 506, 48, 506, 745, 0, 448, 477, 479, 0,
	474, 489, 490, 492, 0, 494, 0, 496, 497, 452,
	453, 454, 0, 0, 0, 0, 485, 0, 749, 53,
	0, 0, 83, 84, 750, 751, 752, 0, 754, 66,
	73, 0, 0, 78, 0, 127, 25, 0, 778, 24,
	352, 0, 382, 606, 605, 608, 609, 0, 0, 0,
	0, 0, 709, 711, 9, 705, 446, 125, 737, 0,
	0, -2, 0, 0, 712, 506, 44, 712, 0, 782,
	471, 478, 782, 0, 472, 782, 473, 493, 495, 464,
	0, 0, 0, 0, 0, 469, -2, 81, 82, 0,
	0, 88, 782, 0, 0, 0, 780, 781, 0, 610,
	0, 0, 0, 223, 442, 0, 782, 707, 0, 37,
	0, 737, 727, 739, 741, 782, 33, 0, 733, 0,
	720, 43, 720, 746, 747, 475, 0, 480, 0, 0,
	0, 0, 483, 0, 85, 86, 87, 753, 77, 0,
	0, 0, 634, 0, 637, 444, 710, 32, 782, 782,
	0, 38, 0, 742, -2, 0, 0, 0, 50, 42,
	41, 0, 0, 456, 458, 459, 460, 461, 462, 463,
	0, 0, 0, 502, 470, 0, 20, 377, 635, 708,
	706, 0, 740, 0, -2, 0, 735, 734, 476, 455,
	0, 503, 504, 505, 454, 79, 0, 0, 730, 33,
	0, 457, 465, 0, 738, -2, 736, 636,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 377,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 378, 3, 379, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:406
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:411
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:412
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:420
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:425
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:445
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:465
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:486
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:502
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:519
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:538
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:549
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:561
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:572
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:588
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      []Statement{yyDollar[11].statement},
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:602
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:616
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:629
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[6].colIdent,
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:643
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:654
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 23:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:660
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 24:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:674
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:688
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:707
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:716
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:731
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:739
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 32:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:746
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:752
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:756
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:762
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:766
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:773
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:785
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:797
		{
			yyVAL.str = InsertStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:801
		{
			yyVAL.str = ReplaceStr
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:807
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:813
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:817
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:821
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:826
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:827
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:831
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:835
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:840
		{
			yyVAL.partitions = nil
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:844
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:850
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:854
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:858
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:862
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:868
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:872
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:885
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:889
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:895
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:900
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:904
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:910
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:917
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:924
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:931
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:939
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:949
		{
			yyVAL.str = ""
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:953
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:957
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:961
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:965
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:971
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:978
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:988
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:992
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:996
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 77:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1003
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1012
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 79:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1020
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1031
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1035
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1041
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1045
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1049
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1055
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1059
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1063
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1067
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1073
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1077
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1083
		{
			yyVAL.str = SessionStr
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1087
		{
			yyVAL.str = GlobalStr
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1092
		{
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1093
		{
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1097
		{
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1098
		{
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1099
		{
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1100
		{
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1101
		{
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1102
		{
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1103
		{
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1107
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1111
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1115
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1119
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1125
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1129
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1133
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1138
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1144
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1148
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1154
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1158
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1164
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1176
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1188
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1195
		{
			yyVAL.empty = struct{}{}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1197
		{
			yyVAL.empty = struct{}{}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1200
		{
			yyVAL.bytes = nil
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1204
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1208
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1213
		{
			yyVAL.bytes = nil
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1217
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1221
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1225
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1229
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1233
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1238
		{
			yyVAL.expr = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1242
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1247
		{
			yyVAL.expr = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1251
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1256
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1260
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1265
		{
			yyVAL.bytes = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1269
		{
			yyVAL.bytes = nil
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1275
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1282
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1288
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1292
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1297
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1301
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1305
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1309
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1313
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1319
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1324
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1330
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1341
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1346
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1352
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1365
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1370
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1375
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1380
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1386
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1391
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1396
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1401
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1406
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1411
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1416
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1421
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1426
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1435
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1445
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1450
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1455
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1462
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1469
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1477
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1482
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1487
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1492
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1498
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1504
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1510
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1516
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1523
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1527
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 193:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1531
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1535
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1539
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1545
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1549
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1553
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1557
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1561
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1565
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1569
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1573
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1577
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1583
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1589
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1595
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1601
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1605
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1610
		{
			yyVAL.sequence = &Sequence{}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1614
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1619
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1624
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1629
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1634
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1639
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1644
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1649
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1654
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1659
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1664
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1669
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1674
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1681
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1685
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1689
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1693
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1697
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1701
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1706
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1710
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1715
		{
			yyVAL.bytes = nil
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1724
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1729
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1816
		{
			yyVAL.str = ""
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1820
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1922
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1926
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1930
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 288:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1960
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1964
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1994
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1998
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2004
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2009
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2014
		{
			yyVAL.optVal = nil
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2018
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2023
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2027
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2035
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2039
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2045
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2053
		{
			yyVAL.optVal = nil
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2057
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2061
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2070
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2074
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2078
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2083
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2087
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2092
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2096
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2101
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2105
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2109
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2114
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2118
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2122
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2127
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2131
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2135
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2141
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2146
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2150
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2154
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2160
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2164
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2170
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2174
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2180
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2184
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2189
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2193
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2197
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2201
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2205
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2209
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2213
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2217
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2221
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2227
		{
			yyVAL.str = ""
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2231
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2237
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2241
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2247
		{
			yyVAL.indexPartition = nil
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2251
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 352:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2255
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2261
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2265
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2269
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2273
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2277
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2281
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2285
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2289
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2293
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2299
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2303
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2309
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2314
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2320
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2324
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2330
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2335
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2339
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2349
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 373:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2354
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2361
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 375:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2368
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 376:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2375
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 377:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2384
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2396
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2400
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2404
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2408
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 382:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2414
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 383:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2425
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2435
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2439
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2443
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2449
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2453
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2457
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2461
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2465
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2469
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2475
		{
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2476
		{
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2480
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2484
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2489
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2496
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2500
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2507
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2511
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2517
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2521
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2526
		{
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2527
		{
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2531
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2535
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2539
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2545
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2549
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2553
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2558
		{
			setAllowComments(yylex, true)
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2562
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2568
		{
			yyVAL.bytes2 = nil
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2572
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2578
		{
			yyVAL.str = UnionStr
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2582
		{
			yyVAL.str = UnionAllStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2586
		{
			yyVAL.str = UnionDistinctStr
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2591
		{
			yyVAL.str = ""
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2595
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2599
		{
			yyVAL.str = SQLCacheStr
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2604
		{
			yyVAL.str = ""
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2608
		{
			yyVAL.str = DistinctStr
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2613
		{
			yyVAL.str = ""
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2617
		{
			yyVAL.str = StraightJoinHint
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2622
		{
			yyVAL.selectExprs = nil
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2626
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2632
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2636
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2642
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2646
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2650
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 434:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2654
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2659
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2663
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2667
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2674
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2679
		{
			yyVAL.overExpr = nil
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2683
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 442:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2687
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2691
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 444:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2695
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2700
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2704
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2710
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2714
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2724
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2728
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2732
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2737
		{
			yyVAL.strs = []string{}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2741
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2747
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2751
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2757
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2761
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2765
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2769
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2773
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2777
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2783
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 465:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2787
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2793
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2798
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2802
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2808
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2812
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2825
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2829
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2833
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2837
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2843
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2845
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2849
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2851
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2855
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2857
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2860
		{
			yyVAL.empty = struct{}{}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2862
		{
			yyVAL.empty = struct{}{}
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2865
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2869
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2873
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2880
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2886
		{
			yyVAL.str = JoinStr
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2890
		{
			yyVAL.str = JoinStr
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2894
		{
			yyVAL.str = JoinStr
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2900
		{
			yyVAL.str = StraightJoinStr
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2906
		{
			yyVAL.str = LeftJoinStr
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2910
		{
			yyVAL.str = LeftJoinStr
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2914
		{
			yyVAL.str = RightJoinStr
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2918
		{
			yyVAL.str = RightJoinStr
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2924
		{
			yyVAL.str = NaturalJoinStr
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2928
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2938
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2942
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2948
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2952
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2957
		{
			yyVAL.indexHints = nil
		}
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2961
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 504:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2965
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 505:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2969
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2974
		{
			yyVAL.expr = nil
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2978
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2983
		{
			yyVAL.columns = nil
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2987
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2993
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2997
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3001
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3005
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3009
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3013
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3017
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3023
		{
			yyVAL.str = ""
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3027
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3033
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3037
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3043
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3047
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3051
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3055
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 525:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3059
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3063
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3067
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3071
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 529:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3075
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3079
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3085
		{
			yyVAL.str = IsNullStr
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3089
		{
			yyVAL.str = IsNotNullStr
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3093
		{
			yyVAL.str = IsTrueStr
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3097
		{
			yyVAL.str = IsNotTrueStr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3101
		{
			yyVAL.str = IsFalseStr
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3105
		{
			yyVAL.str = IsNotFalseStr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3111
		{
			yyVAL.str = EqualStr
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3115
		{
			yyVAL.str = LessThanStr
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3119
		{
			yyVAL.str = GreaterThanStr
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3123
		{
			yyVAL.str = LessEqualStr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3127
		{
			yyVAL.str = GreaterEqualStr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3131
		{
			yyVAL.str = NotEqualStr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3135
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3139
		{
			yyVAL.str = PosixRegexStr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3143
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3147
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3151
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3156
		{
			yyVAL.expr = nil
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3160
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3166
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3170
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3174
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3180
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3186
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3190
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3196
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3200
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3204
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3208
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3212
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3216
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3220
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3224
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3228
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3232
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3236
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3240
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3244
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3248
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3252
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3256
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3260
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3264
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3268
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3272
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3276
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3280
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 578:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3284
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3288
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3292
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3296
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3304
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3318
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3322
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3326
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3334
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3342
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3350
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3360
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 594:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3364
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3368
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 596:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3372
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3376
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3386
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3390
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 600:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3394
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 601:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3398
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 602:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3402
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 603:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3406
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 604:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3410
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 605:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3414
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 606:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3418
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 607:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3422
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 608:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3426
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 609:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3430
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 610:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3434
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 611:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3438
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3442
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3446
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3451
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3455
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3459
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3463
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3473
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3477
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3481
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3485
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3490
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3495
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3500
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3505
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3509
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3523
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3527
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3531
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3535
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3541
		{
			yyVAL.str = ""
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3545
		{
			yyVAL.str = BooleanModeStr
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3549
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 636:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3553
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3557
		{
			yyVAL.str = QueryExpansionStr
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3563
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3567
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3573
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3577
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3581
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3585
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3589
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3593
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3599
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3603
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3607
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3611
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3615
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3619
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3623
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3627
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3631
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3635
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3639
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3643
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3647
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3651
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3655
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3659
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3663
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3667
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3671
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3675
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3679
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3683
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3687
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3691
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3695
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3699
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3705
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3709
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3713
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3717
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3721
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3725
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3729
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3733
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3738
		{
			yyVAL.expr = nil
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3742
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3747
		{
			yyVAL.str = string("")
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3751
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3757
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3761
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3767
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3772
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3774
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3777
		{
			yyVAL.expr = nil
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3781
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3787
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3791
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 693:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3795
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3801
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3807
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3811
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3816
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3821
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3825
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3829
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3833
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3837
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3841
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3845
		{
			yyVAL.expr = &NullVal{}
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3850
		{
			yyVAL.exprs = nil
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3854
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3859
		{
			yyVAL.expr = nil
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3863
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3869
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3873
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3879
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3884
		{
			yyVAL.orderBy = nil
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3888
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3894
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3898
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3904
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3909
		{
			yyVAL.str = AscScr
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3913
		{
			yyVAL.str = AscScr
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3917
		{
			yyVAL.str = DescScr
		}
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3922
		{
			yyVAL.limit = nil
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3926
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 722:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3930
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 723:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3934
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3939
		{
			yyVAL.str = ""
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3943
		{
			yyVAL.str = ForUpdateStr
		}
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3947
		{
			yyVAL.str = ShareModeStr
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3960
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3964
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3968
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 730:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3973
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3977
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 732:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3981
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3988
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3992
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3996
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 736:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4000
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4005
		{
			yyVAL.updateExprs = nil
		}
	case 738:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4009
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4015
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4019
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4025
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4029
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4035
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4041
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4051
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4055
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4067
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4071
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4077
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4081
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4085
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 753:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4090
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4094
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4100
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4106
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4113
		{
			yyVAL.bytes = []byte("charset")
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4120
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4124
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4128
		{
			yyVAL.expr = &Default{}
		}
	case 763:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4133
		{
			yyVAL.empty = struct{}{}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4135
		{
			yyVAL.empty = struct{}{}
		}
	case 765:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4138
		{
			yyVAL.str = ""
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4140
		{
			yyVAL.str = IgnoreStr
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4144
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4148
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4155
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4161
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4165
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4170
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4177
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4183
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4187
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4191
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4201
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4205
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4215
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 784:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4222
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4229
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4233
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4240
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4246
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4250
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4492
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4501
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
