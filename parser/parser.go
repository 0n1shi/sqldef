// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const STATUS = 57489
const VARIABLES = 57490
const RESTRICT = 57491
const CASCADE = 57492
const NO = 57493
const ACTION = 57494
const PERMISSIVE = 57495
const RESTRICTIVE = 57496
const PUBLIC = 57497
const CURRENT_USER = 57498
const SESSION_USER = 57499
const PAD_INDEX = 57500
const FILLFACTOR = 57501
const IGNORE_DUP_KEY = 57502
const STATISTICS_NORECOMPUTE = 57503
const STATISTICS_INCREMENTAL = 57504
const ALLOW_ROW_LOCKS = 57505
const ALLOW_PAGE_LOCKS = 57506
const BEFORE = 57507
const AFTER = 57508
const EACH = 57509
const ROW = 57510
const SCROLL = 57511
const CURSOR = 57512
const OPEN = 57513
const CLOSE = 57514
const FETCH = 57515
const PRIOR = 57516
const FIRST = 57517
const LAST = 57518
const DEALLOCATE = 57519
const INSTEAD = 57520
const OF = 57521
const DEFERRABLE = 57522
const INITIALLY = 57523
const IMMEDIATE = 57524
const DEFERRED = 57525
const CONCURRENTLY = 57526
const SQL = 57527
const SECURITY = 57528
const BEGIN = 57529
const START = 57530
const TRANSACTION = 57531
const COMMIT = 57532
const ROLLBACK = 57533
const BIT = 57534
const TINYINT = 57535
const SMALLINT = 57536
const SMALLSERIAL = 57537
const MEDIUMINT = 57538
const INT = 57539
const INTEGER = 57540
const SERIAL = 57541
const BIGINT = 57542
const BIGSERIAL = 57543
const INTNUM = 57544
const REAL = 57545
const DOUBLE = 57546
const PRECISION = 57547
const FLOAT_TYPE = 57548
const DECIMAL = 57549
const NUMERIC = 57550
const SMALLMONEY = 57551
const MONEY = 57552
const TIME = 57553
const TIMESTAMP = 57554
const DATETIME = 57555
const YEAR = 57556
const DATETIMEOFFSET = 57557
const DATETIME2 = 57558
const SMALLDATETIME = 57559
const CHAR = 57560
const VARCHAR = 57561
const VARYING = 57562
const BOOL = 57563
const CHARACTER = 57564
const VARBINARY = 57565
const NCHAR = 57566
const NVARCHAR = 57567
const NTEXT = 57568
const UUID = 57569
const TEXT = 57570
const TINYTEXT = 57571
const MEDIUMTEXT = 57572
const LONGTEXT = 57573
const CITEXT = 57574
const BLOB = 57575
const TINYBLOB = 57576
const MEDIUMBLOB = 57577
const LONGBLOB = 57578
const JSON = 57579
const JSONB = 57580
const ENUM = 57581
const GEOMETRY = 57582
const POINT = 57583
const LINESTRING = 57584
const POLYGON = 57585
const GEOMETRYCOLLECTION = 57586
const MULTIPOINT = 57587
const MULTILINESTRING = 57588
const MULTIPOLYGON = 57589
const VARIADIC = 57590
const ARRAY = 57591
const NOW = 57592
const GETDATE = 57593
const BPCHAR = 57594
const TEXT_PATTERN_OPS = 57595
const NULLX = 57596
const AUTO_INCREMENT = 57597
const APPROXNUM = 57598
const SIGNED = 57599
const UNSIGNED = 57600
const ZEROFILL = 57601
const ZONE = 57602
const AUTOINCREMENT = 57603
const DATABASES = 57604
const TABLES = 57605
const VSCHEMA_TABLES = 57606
const EXTENDED = 57607
const FULL = 57608
const PROCESSLIST = 57609
const NAMES = 57610
const CHARSET = 57611
const GLOBAL = 57612
const SESSION = 57613
const ISOLATION = 57614
const LEVEL = 57615
const READ = 57616
const WRITE = 57617
const ONLY = 57618
const REPEATABLE = 57619
const COMMITTED = 57620
const UNCOMMITTED = 57621
const SERIALIZABLE = 57622
const NEW = 57623
const CONCAT_NULL_YIELDS_NULL = 57624
const CURSOR_CLOSE_ON_COMMIT = 57625
const QUOTED_IDENTIFIER = 57626
const ARITHABORT = 57627
const FMTONLY = 57628
const NOCOUNT = 57629
const NOEXEC = 57630
const NUMERIC_ROUNDABORT = 57631
const ANSI_DEFAULTS = 57632
const ANSI_NULL_DFLT_OFF = 57633
const ANSI_NULL_DFLT_ON = 57634
const ANSI_NULLS = 57635
const ANSI_PADDING = 57636
const ANSI_WARNINGS = 57637
const FORCEPLAN = 57638
const SHOWPLAN_ALL = 57639
const SHOWPLAN_TEXT = 57640
const SHOWPLAN_XML = 57641
const IMPLICIT_TRANSACTIONS = 57642
const REMOTE_PROC_TRANSACTIONS = 57643
const XACT_ABORT = 57644
const CURRENT_TIMESTAMP = 57645
const DATABASE = 57646
const CURRENT_DATE = 57647
const CURRENT_TIME = 57648
const LOCALTIME = 57649
const LOCALTIMESTAMP = 57650
const UTC_DATE = 57651
const UTC_TIME = 57652
const UTC_TIMESTAMP = 57653
const REPLACE = 57654
const CONVERT = 57655
const CAST = 57656
const SUBSTR = 57657
const SUBSTRING = 57658
const GROUP_CONCAT = 57659
const SEPARATOR = 57660
const INHERIT = 57661
const LEAD = 57662
const LAG = 57663
const MATCH = 57664
const AGAINST = 57665
const BOOLEAN = 57666
const LANGUAGE = 57667
const WITH = 57668
const WITHOUT = 57669
const PARSER = 57670
const QUERY = 57671
const EXPANSION = 57672
const UNUSED = 57673
const VIRTUAL = 57674
const STORED = 57675
const GENERATED = 57676
const ALWAYS = 57677
const IDENTITY = 57678
const SEQUENCE = 57679
const INCREMENT = 57680
const MINVALUE = 57681
const CACHE = 57682
const CYCLE = 57683
const OWNED = 57684
const NONE = 57685
const CLUSTERED = 57686
const NONCLUSTERED = 57687
const REPLICATION = 57688
const COLUMNSTORE = 57689
const INCLUDE = 57690
const HOLDLOCK = 57691
const NOLOCK = 57692
const NOWAIT = 57693
const PAGLOCK = 57694
const ROWLOCK = 57695
const TABLELOCK = 57696
const DEFINER = 57697
const INVOKER = 57698
const TYPECAST = 57699
const CHECK = 57700
const OVER = 57701

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	130, 390,
	-2, 143,
	-1, 168,
	116, 945,
	151, 945,
	209, 945,
	210, 945,
	211, 945,
	214, 945,
	217, 945,
	220, 945,
	223, 945,
	224, 945,
	225, 945,
	226, 945,
	227, 945,
	228, 945,
	230, 945,
	232, 945,
	233, 945,
	234, 945,
	235, 945,
	236, 945,
	240, 945,
	241, 945,
	242, 945,
	243, 945,
	245, 945,
	249, 945,
	254, 945,
	255, 945,
	-2, 269,
	-1, 169,
	116, 946,
	151, 946,
	209, 946,
	210, 946,
	211, 946,
	214, 946,
	217, 946,
	220, 946,
	223, 946,
	224, 946,
	225, 946,
	226, 946,
	227, 946,
	228, 946,
	230, 946,
	232, 946,
	233, 946,
	234, 946,
	235, 946,
	236, 946,
	240, 946,
	241, 946,
	242, 946,
	243, 946,
	245, 946,
	249, 946,
	254, 946,
	255, 946,
	-2, 270,
	-1, 171,
	151, 948,
	209, 948,
	210, 948,
	211, 948,
	214, 948,
	217, 948,
	220, 948,
	223, 948,
	224, 948,
	225, 948,
	226, 948,
	227, 948,
	228, 948,
	230, 948,
	232, 948,
	233, 948,
	234, 948,
	235, 948,
	236, 948,
	240, 948,
	241, 948,
	242, 948,
	243, 948,
	245, 948,
	249, 948,
	254, 948,
	255, 948,
	-2, 304,
	-1, 179,
	151, 1015,
	209, 1015,
	210, 1015,
	211, 1015,
	214, 1015,
	217, 1015,
	220, 1015,
	223, 1015,
	224, 1015,
	225, 1015,
	226, 1015,
	227, 1015,
	228, 1015,
	230, 1015,
	232, 1015,
	233, 1015,
	234, 1015,
	235, 1015,
	236, 1015,
	240, 1015,
	241, 1015,
	242, 1015,
	243, 1015,
	245, 1015,
	249, 1015,
	254, 1015,
	255, 1015,
	-2, 324,
	-1, 180,
	151, 977,
	209, 977,
	210, 977,
	211, 977,
	214, 977,
	217, 977,
	220, 977,
	223, 977,
	224, 977,
	225, 977,
	226, 977,
	227, 977,
	228, 977,
	230, 977,
	232, 977,
	233, 977,
	234, 977,
	235, 977,
	236, 977,
	240, 977,
	241, 977,
	242, 977,
	243, 977,
	245, 977,
	249, 977,
	254, 977,
	255, 977,
	-2, 324,
	-1, 181,
	151, 973,
	209, 973,
	210, 973,
	211, 973,
	214, 973,
	217, 973,
	220, 973,
	223, 973,
	224, 973,
	225, 973,
	226, 973,
	227, 973,
	228, 973,
	230, 973,
	232, 973,
	233, 973,
	234, 973,
	235, 973,
	236, 973,
	240, 973,
	241, 973,
	242, 973,
	243, 973,
	245, 973,
	249, 973,
	254, 973,
	255, 973,
	-2, 324,
	-1, 183,
	116, 944,
	151, 944,
	209, 944,
	210, 944,
	211, 944,
	214, 944,
	217, 944,
	220, 944,
	223, 944,
	224, 944,
	225, 944,
	226, 944,
	227, 944,
	228, 944,
	230, 944,
	232, 944,
	233, 944,
	234, 944,
	235, 944,
	236, 944,
	240, 944,
	241, 944,
	242, 944,
	243, 944,
	245, 944,
	249, 944,
	254, 944,
	255, 944,
	-2, 285,
	-1, 184,
	116, 1014,
	151, 1014,
	209, 1014,
	210, 1014,
	211, 1014,
	214, 1014,
	217, 1014,
	220, 1014,
	223, 1014,
	224, 1014,
	225, 1014,
	226, 1014,
	227, 1014,
	228, 1014,
	230, 1014,
	232, 1014,
	233, 1014,
	234, 1014,
	235, 1014,
	236, 1014,
	240, 1014,
	241, 1014,
	242, 1014,
	243, 1014,
	245, 1014,
	249, 1014,
	254, 1014,
	255, 1014,
	-2, 286,
	-1, 185,
	116, 975,
	151, 975,
	209, 975,
	210, 975,
	211, 975,
	214, 975,
	217, 975,
	220, 975,
	223, 975,
	224, 975,
	225, 975,
	226, 975,
	227, 975,
	228, 975,
	230, 975,
	232, 975,
	233, 975,
	234, 975,
	235, 975,
	236, 975,
	240, 975,
	241, 975,
	242, 975,
	243, 975,
	245, 975,
	249, 975,
	254, 975,
	255, 975,
	-2, 287,
	-1, 186,
	116, 972,
	151, 972,
	209, 972,
	210, 972,
	211, 972,
	214, 972,
	217, 972,
	220, 972,
	223, 972,
	224, 972,
	225, 972,
	226, 972,
	227, 972,
	228, 972,
	230, 972,
	232, 972,
	233, 972,
	234, 972,
	235, 972,
	236, 972,
	240, 972,
	241, 972,
	242, 972,
	243, 972,
	245, 972,
	249, 972,
	254, 972,
	255, 972,
	-2, 288,
	-1, 189,
	116, 1021,
	151, 1021,
	209, 1021,
	210, 1021,
	211, 1021,
	214, 1021,
	217, 1021,
	220, 1021,
	223, 1021,
	224, 1021,
	225, 1021,
	226, 1021,
	227, 1021,
	228, 1021,
	230, 1021,
	232, 1021,
	233, 1021,
	234, 1021,
	235, 1021,
	236, 1021,
	240, 1021,
	241, 1021,
	242, 1021,
	243, 1021,
	245, 1021,
	249, 1021,
	254, 1021,
	255, 1021,
	-2, 291,
	-1, 194,
	116, 1013,
	151, 1013,
	209, 1013,
	210, 1013,
	211, 1013,
	214, 1013,
	217, 1013,
	220, 1013,
	223, 1013,
	224, 1013,
	225, 1013,
	226, 1013,
	227, 1013,
	228, 1013,
	230, 1013,
	232, 1013,
	233, 1013,
	234, 1013,
	235, 1013,
	236, 1013,
	240, 1013,
	241, 1013,
	242, 1013,
	243, 1013,
	245, 1013,
	249, 1013,
	254, 1013,
	255, 1013,
	-2, 304,
	-1, 199,
	116, 1027,
	151, 1027,
	209, 1027,
	210, 1027,
	211, 1027,
	214, 1027,
	217, 1027,
	220, 1027,
	223, 1027,
	224, 1027,
	225, 1027,
	226, 1027,
	227, 1027,
	228, 1027,
	230, 1027,
	232, 1027,
	233, 1027,
	234, 1027,
	235, 1027,
	236, 1027,
	240, 1027,
	241, 1027,
	242, 1027,
	243, 1027,
	245, 1027,
	249, 1027,
	254, 1027,
	255, 1027,
	-2, 268,
	-1, 200,
	116, 958,
	151, 958,
	209, 958,
	210, 958,
	211, 958,
	214, 958,
	217, 958,
	220, 958,
	223, 958,
	224, 958,
	225, 958,
	226, 958,
	227, 958,
	228, 958,
	230, 958,
	232, 958,
	233, 958,
	234, 958,
	235, 958,
	236, 958,
	240, 958,
	241, 958,
	242, 958,
	243, 958,
	245, 958,
	249, 958,
	254, 958,
	255, 958,
	-2, 294,
	-1, 201,
	116, 988,
	151, 988,
	209, 988,
	210, 988,
	211, 988,
	214, 988,
	217, 988,
	220, 988,
	223, 988,
	224, 988,
	225, 988,
	226, 988,
	227, 988,
	228, 988,
	230, 988,
	232, 988,
	233, 988,
	234, 988,
	235, 988,
	236, 988,
	240, 988,
	241, 988,
	242, 988,
	243, 988,
	245, 988,
	249, 988,
	254, 988,
	255, 988,
	-2, 295,
	-1, 202,
	116, 971,
	151, 971,
	209, 971,
	210, 971,
	211, 971,
	214, 971,
	217, 971,
	220, 971,
	223, 971,
	224, 971,
	225, 971,
	226, 971,
	227, 971,
	228, 971,
	230, 971,
	232, 971,
	233, 971,
	234, 971,
	235, 971,
	236, 971,
	240, 971,
	241, 971,
	242, 971,
	243, 971,
	245, 971,
	249, 971,
	254, 971,
	255, 971,
	-2, 296,
	-1, 203,
	116, 989,
	151, 989,
	209, 989,
	210, 989,
	211, 989,
	214, 989,
	217, 989,
	220, 989,
	223, 989,
	224, 989,
	225, 989,
	226, 989,
	227, 989,
	228, 989,
	230, 989,
	232, 989,
	233, 989,
	234, 989,
	235, 989,
	236, 989,
	240, 989,
	241, 989,
	242, 989,
	243, 989,
	245, 989,
	249, 989,
	254, 989,
	255, 989,
	-2, 297,
	-1, 204,
	116, 959,
	151, 959,
	209, 959,
	210, 959,
	211, 959,
	214, 959,
	217, 959,
	220, 959,
	223, 959,
	224, 959,
	225, 959,
	226, 959,
	227, 959,
	228, 959,
	230, 959,
	232, 959,
	233, 959,
	234, 959,
	235, 959,
	236, 959,
	240, 959,
	241, 959,
	242, 959,
	243, 959,
	245, 959,
	249, 959,
	254, 959,
	255, 959,
	-2, 298,
	-1, 205,
	116, 980,
	151, 980,
	209, 980,
	210, 980,
	211, 980,
	214, 980,
	217, 980,
	220, 980,
	223, 980,
	224, 980,
	225, 980,
	226, 980,
	227, 980,
	228, 980,
	230, 980,
	232, 980,
	233, 980,
	234, 980,
	235, 980,
	236, 980,
	240, 980,
	241, 980,
	242, 980,
	243, 980,
	245, 980,
	249, 980,
	254, 980,
	255, 980,
	-2, 299,
	-1, 206,
	116, 979,
	151, 979,
	209, 979,
	210, 979,
	211, 979,
	214, 979,
	217, 979,
	220, 979,
	223, 979,
	224, 979,
	225, 979,
	226, 979,
	227, 979,
	228, 979,
	230, 979,
	232, 979,
	233, 979,
	234, 979,
	235, 979,
	236, 979,
	240, 979,
	241, 979,
	242, 979,
	243, 979,
	245, 979,
	249, 979,
	254, 979,
	255, 979,
	-2, 300,
	-1, 207,
	116, 981,
	151, 981,
	209, 981,
	210, 981,
	211, 981,
	214, 981,
	217, 981,
	220, 981,
	223, 981,
	224, 981,
	225, 981,
	226, 981,
	227, 981,
	228, 981,
	230, 981,
	232, 981,
	233, 981,
	234, 981,
	235, 981,
	236, 981,
	240, 981,
	241, 981,
	242, 981,
	243, 981,
	245, 981,
	249, 981,
	254, 981,
	255, 981,
	-2, 301,
	-1, 211,
	116, 1008,
	151, 1008,
	209, 1008,
	210, 1008,
	211, 1008,
	214, 1008,
	217, 1008,
	220, 1008,
	223, 1008,
	224, 1008,
	225, 1008,
	226, 1008,
	227, 1008,
	228, 1008,
	230, 1008,
	232, 1008,
	233, 1008,
	234, 1008,
	235, 1008,
	236, 1008,
	240, 1008,
	241, 1008,
	242, 1008,
	243, 1008,
	245, 1008,
	249, 1008,
	254, 1008,
	255, 1008,
	-2, 246,
	-1, 212,
	116, 976,
	151, 976,
	209, 976,
	210, 976,
	211, 976,
	214, 976,
	217, 976,
	220, 976,
	223, 976,
	224, 976,
	225, 976,
	226, 976,
	227, 976,
	228, 976,
	230, 976,
	232, 976,
	233, 976,
	234, 976,
	235, 976,
	236, 976,
	240, 976,
	241, 976,
	242, 976,
	243, 976,
	245, 976,
	249, 976,
	254, 976,
	255, 976,
	-2, 247,
	-1, 214,
	116, 963,
	151, 963,
	209, 963,
	210, 963,
	211, 963,
	214, 963,
	217, 963,
	220, 963,
	223, 963,
	224, 963,
	225, 963,
	226, 963,
	227, 963,
	228, 963,
	230, 963,
	232, 963,
	233, 963,
	234, 963,
	235, 963,
	236, 963,
	240, 963,
	241, 963,
	242, 963,
	243, 963,
	245, 963,
	249, 963,
	254, 963,
	255, 963,
	-2, 249,
	-1, 215,
	116, 1003,
	151, 1003,
	209, 1003,
	210, 1003,
	211, 1003,
	214, 1003,
	217, 1003,
	220, 1003,
	223, 1003,
	224, 1003,
	225, 1003,
	226, 1003,
	227, 1003,
	228, 1003,
	230, 1003,
	232, 1003,
	233, 1003,
	234, 1003,
	235, 1003,
	236, 1003,
	240, 1003,
	241, 1003,
	242, 1003,
	243, 1003,
	245, 1003,
	249, 1003,
	254, 1003,
	255, 1003,
	-2, 250,
	-1, 217,
	116, 943,
	151, 943,
	209, 943,
	210, 943,
	211, 943,
	214, 943,
	217, 943,
	220, 943,
	223, 943,
	224, 943,
	225, 943,
	226, 943,
	227, 943,
	228, 943,
	230, 943,
	232, 943,
	233, 943,
	234, 943,
	235, 943,
	236, 943,
	240, 943,
	241, 943,
	242, 943,
	243, 943,
	245, 943,
	249, 943,
	254, 943,
	255, 943,
	-2, 252,
	-1, 219,
	116, 953,
	151, 953,
	209, 953,
	210, 953,
	211, 953,
	214, 953,
	217, 953,
	220, 953,
	223, 953,
	224, 953,
	225, 953,
	226, 953,
	227, 953,
	228, 953,
	230, 953,
	232, 953,
	233, 953,
	234, 953,
	235, 953,
	236, 953,
	240, 953,
	241, 953,
	242, 953,
	243, 953,
	245, 953,
	249, 953,
	254, 953,
	255, 953,
	-2, 306,
	-1, 497,
	59, 365,
	-2, 362,
	-1, 516,
	119, 773,
	-2, 232,
	-1, 534,
	119, 771,
	-2, 767,
	-1, 535,
	119, 772,
	-2, 768,
	-1, 641,
	119, 773,
	-2, 232,
	-1, 663,
	266, 782,
	-2, 680,
	-1, 695,
	266, 782,
	-2, 430,
	-1, 726,
	5, 33,
	-2, 13,
	-1, 732,
	5, 33,
	-2, 15,
	-1, 872,
	266, 782,
	-2, 430,
	-1, 887,
	116, 324,
	266, 324,
	378, 324,
	-2, 237,
	-1, 888,
	266, 289,
	378, 289,
	-2, 238,
	-1, 889,
	266, 290,
	378, 290,
	-2, 239,
	-1, 1025,
	119, 775,
	-2, 770,
	-1, 1036,
	266, 782,
	-2, 304,
	-1, 1090,
	116, 304,
	266, 304,
	378, 304,
	-2, 233,
	-1, 1104,
	266, 782,
	-2, 430,
	-1, 1164,
	58, 95,
	-2, 162,
	-1, 1167,
	58, 95,
	-2, 162,
	-1, 1216,
	5, 34,
	-2, 556,
	-1, 1286,
	5, 33,
	-2, 14,
	-1, 1299,
	187, 60,
	-2, 162,
	-1, 1340,
	58, 95,
	-2, 161,
	-1, 1461,
	86, 1002,
	-2, 91,
	-1, 1462,
	86, 961,
	-2, 92,
	-1, 1466,
	86, 949,
	-2, 757,
	-1, 1468,
	86, 982,
	-2, 759,
	-1, 1548,
	55, 47,
	57, 47,
	-2, 49,
	-1, 1707,
	5, 33,
	-2, 728,
	-1, 1732,
	5, 33,
	-2, 56,
	-1, 1800,
	5, 34,
	-2, 729,
	-1, 1830,
	5, 33,
	-2, 731,
	-1, 1851,
	5, 34,
	-2, 732,
}

const yyPrivate = 57344

const yyLast = 19609

var yyAct = [...]int16{
	535, 1639, 1725, 1809, 1758, 1755, 830, 625, 1759, 1571,
	1730, 653, 33, 1657, 1698, 831, 1116, 33, 33, 146,
	1147, 1130, 1584, 1717, 1460, 1558, 1583, 1438, 1457, 1632,
	947, 33, 33, 1463, 159, 1573, 1133, 1136, 1446, 1173,
	1303, 739, 1280, 1300, 628, 1439, 1640, 721, 1569, 1443,
	1275, 944, 1083, 1212, 761, 550, 486, 26, 920, 1447,
	1452, 1196, 935, 959, 1112, 1008, 686, 1035, 1206, 482,
	158, 618, 1072, 1024, 1354, 924, 720, 985, 1075, 143,
	896, 286, 320, 1099, 900, 636, 302, 623, 561, 166,
	161, 160, 855, 593, 605, 334, 489, 624, 513, 1339,
	254, 234, 225, 846, 515, 335, 521, 149, 269, 248,
	538, 1694, 1378, 1022, 1629, 9, 787, 786, 796, 797,
	789, 790, 791, 792, 793, 794, 795, 788, 288, 1262,
	798, 788, 284, 600, 798, 1540, 33, 33, 798, 789,
	790, 791, 792, 793, 794, 795, 788, 1506, 892, 798,
	146, 782, 687, 785, 330, 331, 146, 1113, 33, 800,
	801, 802, 803, 804, 805, 806, 151, 783, 784, 781,
	807, 808, 809, 810, 787, 786, 796, 797, 789, 790,
	791, 792, 793, 794, 795, 788, 606, 767, 798, 607,
	608, 787, 786, 796, 797, 789, 790, 791, 792, 793,
	794, 795, 788, 609, 1520, 798, 152, 153, 511, 875,
	244, 1853, 1399, 1400, 975, 976, 246, 1790, 1849, 1748,
	643, 1270, 791, 792, 793, 794, 795, 788, 146, 33,
	798, 146, 30, 146, 146, 1178, 146, 140, 141, 1177,
	287, 1513, 33, 146, 146, 230, 1726, 232, 146, 33,
	292, 165, 165, 1842, 251, 1432, 243, 562, 563, 1209,
	33, 1789, 1394, 1369, 1510, 154, 304, 305, 306, 307,
	1585, 33, 1586, 318, 1747, 1780, 342, 1736, 613, 558,
	1735, 146, 479, 1737, 1781, 1782, 1668, 1669, 325, 1667,
	1496, 328, 540, 332, 333, 910, 339, 1810, 1811, 1812,
	1813, 1814, 1815, 909, 474, 322, 290, 825, 477, 917,
	1386, 292, 345, 303, 292, 729, 343, 1160, 1150, 1149,
	292, 1080, 1376, 713, 146, 33, 712, 316, 146, 1151,
	526, 1228, 528, 527, 729, 505, 1160, 1150, 1149, 1226,
	1152, 507, 33, 1785, 264, 1680, 1479, 1291, 1151, 231,
	137, 1743, 1742, 1683, 1684, 1329, 226, 229, 1695, 1152,
	554, 555, 556, 557, 1603, 580, 236, 340, 1579, 1681,
	525, 1290, 601, 1600, 1132, 735, 736, 965, 30, 892,
	542, 543, 523, 545, 568, 548, 549, 1633, 572, 799,
	296, 1827, 1197, 799, 1841, 746, 496, 799, 265, 1348,
	564, 607, 608, 769, 1519, 942, 1521, 768, 799, 1168,
	504, 281, 747, 1679, 494, 266, 503, 284, 285, 491,
	138, 29, 787, 786, 796, 797, 789, 790, 791, 792,
	793, 794, 795, 788, 1377, 585, 798, 599, 764, 236,
	1607, 581, 272, 587, 1158, 749, 1172, 799, 1784, 326,
	1658, 1660, 27, 921, 1157, 150, 928, 279, 574, 267,
	1729, 139, 165, 1158, 799, 1507, 268, 497, 1728, 481,
	1727, 136, 135, 1157, 235, 155, 588, 148, 611, 33,
	490, 476, 1846, 1602, 266, 265, 33, 1401, 1803, 799,
	303, 501, 315, 317, 319, 1090, 892, 1153, 1154, 1156,
	1696, 295, 266, 1155, 1588, 532, 876, 1422, 1330, 1331,
	1332, 1411, 590, 6, 7, 1242, 1153, 1154, 1156, 1214,
	1238, 1512, 1155, 759, 275, 759, 270, 280, 1178, 237,
	238, 1103, 1659, 592, 277, 276, 829, 562, 563, 815,
	816, 828, 239, 696, 510, 569, 242, 787, 786, 796,
	797, 789, 790, 791, 792, 793, 794, 795, 788, 552,
	551, 798, 582, 250, 1746, 299, 1237, 252, 301, 707,
	778, 1738, 146, 762, 763, 765, 1715, 586, 1587, 146,
	726, 33, 732, 1189, 33, 1405, 33, 688, 1188, 560,
	33, 566, 33, 591, 727, 1524, 727, 1407, 698, 699,
	525, 701, 237, 238, 704, 705, 492, 493, 495, 612,
	610, 776, 523, 683, 1187, 239, 1373, 33, 1186, 685,
	1739, 992, 1185, 752, 1184, 479, 708, 778, 1183, 815,
	816, 700, 724, 1181, 1402, 990, 991, 989, 1161, 737,
	787, 786, 796, 797, 789, 790, 791, 792, 793, 794,
	795, 788, 766, 1703, 798, 1396, 722, 1161, 774, 1424,
	273, 960, 961, 777, 776, 1740, 274, 813, 772, 488,
	1478, 1076, 25, 1247, 1134, 727, 1076, 742, 967, 963,
	778, 245, 731, 487, 743, 738, 1677, 240, 33, 750,
	729, 964, 1160, 1150, 1149, 799, 1355, 33, 1423, 481,
	500, 771, 488, 488, 1151, 1677, 594, 488, 826, 1615,
	615, 899, 777, 776, 1285, 1152, 1356, 777, 776, 33,
	146, 988, 890, 894, 1617, 20, 33, 15, 541, 778,
	904, 893, 146, 1616, 778, 532, 541, 926, 1518, 282,
	16, 283, 23, 892, 1213, 547, 33, 1179, 898, 546,
	33, 727, 499, 777, 776, 1517, 905, 33, 17, 18,
	1398, 777, 776, 278, 860, 861, 1514, 919, 1516, 33,
	778, 848, 849, 850, 851, 852, 853, 854, 778, 1236,
	915, 1357, 523, 879, 1403, 1404, 1406, 1408, 1409, 1353,
	1255, 723, 927, 986, 913, 892, 906, 541, 908, 1088,
	1220, 740, 1219, 722, 744, 912, 748, 911, 777, 776,
	481, 682, 481, 1515, 777, 776, 33, 33, 962, 1158,
	799, 777, 776, 966, 33, 778, 987, 567, 565, 1157,
	33, 778, 777, 776, 1016, 727, 537, 740, 778, 938,
	1030, 775, 1199, 1200, 1201, 827, 1066, 1068, 1182, 778,
	958, 1009, 1077, 1010, 727, 907, 615, 559, 921, 777,
	776, 827, 1023, 1026, 970, 968, 506, 706, 980, 982,
	983, 604, 1153, 1154, 1156, 981, 778, 1355, 1155, 1552,
	1470, 936, 892, 1836, 1835, 936, 1834, 1031, 1033, 1014,
	861, 1011, 1013, 1071, 1288, 1823, 1554, 1356, 1025, 603,
	1752, 892, 33, 1017, 1020, 1779, 892, 1414, 165, 1802,
	892, 756, 1685, 799, 1555, 892, 1271, 481, 602, 729,
	936, 1531, 1555, 1553, 1081, 1551, 1084, 1085, 498, 33,
	756, 1491, 1288, 1490, 1487, 1486, 1338, 33, 723, 914,
	1636, 33, 1551, 1120, 1705, 19, 740, 756, 1483, 1706,
	1094, 756, 1482, 1082, 1273, 651, 1756, 21, 22, 1714,
	24, 1555, 1105, 1627, 1106, 1271, 941, 756, 1415, 615,
	943, 1504, 1092, 1091, 144, 1258, 1175, 594, 1095, 892,
	936, 1115, 729, 1137, 1028, 892, 936, 974, 921, 969,
	756, 755, 716, 715, 948, 1114, 1257, 710, 711, 710,
	709, 986, 157, 156, 722, 1289, 1503, 1288, 950, 1095,
	1714, 1241, 1829, 1161, 1109, 787, 786, 796, 797, 789,
	790, 791, 792, 793, 794, 795, 788, 1108, 1162, 798,
	1095, 579, 615, 33, 987, 1107, 1019, 1019, 1089, 937,
	1163, 916, 895, 882, 1021, 1756, 878, 703, 702, 481,
	481, 697, 1560, 1563, 1564, 1565, 1561, 1240, 1562, 1566,
	1069, 1786, 1718, 1719, 1714, 1069, 578, 1202, 1798, 579,
	1028, 729, 891, 579, 1555, 1666, 1580, 1453, 1425, 146,
	1095, 654, 949, 1221, 936, 826, 756, 877, 787, 786,
	796, 797, 789, 790, 791, 792, 793, 794, 795, 788,
	714, 33, 798, 718, 717, 144, 483, 615, 1774, 1772,
	1744, 144, 33, 292, 951, 952, 953, 954, 955, 956,
	957, 615, 1101, 1225, 1484, 1244, 1718, 1719, 1283, 1272,
	321, 1193, 1192, 1229, 1171, 1170, 1286, 1023, 1111, 723,
	1110, 1087, 727, 940, 918, 694, 725, 693, 691, 1131,
	727, 616, 33, 1246, 33, 33, 33, 1135, 570, 1269,
	316, 1164, 512, 146, 508, 33, 33, 33, 33, 33,
	33, 33, 33, 1025, 1267, 33, 485, 1265, 1282, 33,
	1260, 309, 1293, 144, 1263, 1266, 144, 1268, 144, 144,
	308, 144, 297, 33, 33, 11, 722, 1284, 344, 144,
	323, 324, 583, 144, 1721, 1032, 1294, 1174, 1351, 1198,
	719, 571, 327, 233, 1365, 33, 1651, 1649, 1346, 1347,
	1430, 1652, 1650, 1337, 1295, 1296, 1297, 1724, 1301, 1333,
	1336, 1653, 1723, 1564, 1565, 1648, 144, 1647, 225, 1824,
	533, 1366, 1125, 1126, 1788, 1363, 1364, 1625, 1380, 1534,
	845, 484, 1593, 1101, 553, 1796, 1367, 1276, 681, 1595,
	1358, 1359, 1360, 1361, 1362, 1341, 1342, 1343, 1344, 1345,
	1277, 475, 1372, 33, 960, 961, 1393, 341, 1568, 144,
	1379, 948, 946, 144, 1129, 680, 1383, 1381, 799, 33,
	930, 577, 931, 932, 933, 950, 575, 146, 146, 1427,
	33, 573, 33, 1395, 1387, 929, 1122, 1123, 1663, 241,
	1385, 1440, 1025, 1073, 1418, 1481, 1078, 934, 734, 598,
	1117, 1101, 1416, 1795, 481, 1620, 1420, 1522, 1118, 33,
	921, 723, 594, 1794, 1455, 1754, 1436, 1274, 1419, 1271,
	1475, 33, 1450, 1474, 1473, 1426, 1445, 1472, 1560, 1563,
	1564, 1565, 1561, 1441, 1562, 1566, 1191, 1444, 336, 337,
	338, 799, 1371, 1370, 597, 596, 1843, 1421, 1190, 949,
	502, 923, 1299, 925, 1325, 1326, 1327, 1469, 249, 1476,
	1550, 745, 939, 8, 1, 1340, 1164, 1164, 1340, 1164,
	1164, 594, 594, 1302, 13, 1349, 12, 1697, 1261, 1352,
	1480, 951, 952, 953, 954, 955, 956, 957, 329, 1211,
	824, 640, 33, 1131, 594, 1682, 1601, 626, 1808, 1454,
	1488, 1489, 1298, 1435, 1328, 1493, 1494, 536, 271, 1256,
	1492, 509, 1497, 14, 1431, 481, 1287, 733, 576, 1350,
	945, 758, 146, 146, 257, 1380, 751, 478, 28, 10,
	1180, 258, 146, 146, 33, 256, 1530, 255, 253, 33,
	1533, 539, 289, 481, 164, 1527, 33, 1529, 1537, 1525,
	533, 162, 727, 163, 167, 1458, 1567, 1589, 1538, 584,
	1098, 811, 1539, 1541, 1543, 33, 33, 1581, 1734, 1413,
	1465, 1544, 1549, 740, 1763, 1279, 1450, 1577, 1793, 620,
	1753, 1245, 1547, 1548, 842, 1596, 1074, 1598, 627, 1433,
	979, 1594, 639, 638, 637, 1704, 1597, 1599, 1606, 780,
	165, 1449, 481, 146, 1137, 1545, 533, 144, 1559, 1557,
	1556, 1720, 1604, 1716, 144, 1448, 1626, 1509, 1693, 1124,
	1429, 1148, 922, 1608, 1127, 5, 1159, 146, 1146, 1471,
	4, 146, 146, 3, 1145, 1144, 146, 146, 146, 146,
	146, 1340, 1641, 1143, 1141, 1142, 1139, 1622, 146, 1176,
	1140, 146, 1138, 1119, 728, 146, 2, 1030, 1635, 33,
	1623, 33, 0, 0, 1624, 0, 0, 614, 1631, 33,
	0, 727, 1654, 0, 1642, 1450, 33, 1645, 0, 1637,
	1450, 1450, 1450, 1450, 1450, 1664, 689, 1634, 146, 1665,
	1662, 0, 1638, 1455, 695, 1450, 1643, 1644, 0, 1646,
	0, 0, 1673, 0, 0, 0, 0, 0, 146, 0,
	0, 0, 481, 0, 0, 0, 1528, 146, 0, 1707,
	0, 1532, 1543, 1293, 1543, 1674, 0, 0, 1688, 0,
	0, 903, 0, 727, 0, 730, 0, 730, 0, 0,
	0, 0, 33, 0, 1700, 0, 0, 0, 1687, 1722,
	1732, 0, 1450, 533, 1578, 144, 1702, 0, 0, 481,
	0, 1450, 0, 770, 727, 1711, 1590, 144, 0, 1733,
	0, 0, 0, 0, 0, 0, 0, 33, 0, 0,
	0, 0, 0, 812, 814, 594, 1605, 1757, 1741, 33,
	33, 0, 0, 1641, 617, 1762, 291, 0, 1760, 0,
	1765, 0, 1641, 1631, 0, 695, 0, 0, 0, 727,
	1749, 0, 0, 0, 0, 0, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 33, 844, 0, 847, 847,
	847, 847, 847, 847, 847, 847, 1751, 871, 872, 873,
	874, 1769, 0, 1797, 0, 0, 1787, 1792, 0, 1766,
	0, 0, 1768, 33, 0, 1069, 33, 33, 33, 146,
	33, 0, 0, 1805, 344, 1806, 0, 1543, 1819, 0,
	903, 903, 0, 0, 0, 1070, 903, 0, 0, 165,
	1070, 481, 0, 33, 33, 695, 0, 1828, 1830, 481,
	1760, 1826, 730, 1821, 1807, 0, 1675, 1816, 1817, 1818,
	773, 0, 727, 0, 0, 779, 0, 903, 903, 903,
	903, 0, 1631, 1840, 1844, 0, 0, 0, 1845, 0,
	1847, 1760, 0, 1848, 0, 1850, 973, 33, 1701, 0,
	0, 1641, 727, 903, 972, 0, 0, 1710, 0, 1712,
	832, 1713, 0, 0, 0, 0, 0, 1543, 0, 843,
	0, 0, 0, 0, 533, 0, 0, 0, 0, 0,
	0, 0, 1731, 0, 0, 0, 0, 293, 294, 0,
	298, 0, 0, 300, 0, 0, 730, 0, 0, 0,
	0, 901, 0, 1027, 1029, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 833, 0, 481, 0, 0,
	1079, 0, 0, 0, 0, 0, 1069, 0, 0, 1764,
	1731, 0, 0, 1767, 0, 1069, 0, 0, 0, 729,
	0, 1160, 1150, 1149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1151, 729, 0, 1160, 1150, 1149, 0,
	0, 0, 0, 689, 1152, 1131, 0, 0, 1151, 1093,
	0, 1096, 1097, 0, 0, 0, 971, 0, 0, 1152,
	0, 0, 977, 978, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 740, 740, 740, 1128,
	1820, 0, 0, 0, 1121, 0, 0, 0, 0, 0,
	0, 0, 544, 0, 0, 0, 0, 0, 1676, 0,
	0, 0, 0, 1832, 1833, 0, 0, 0, 903, 0,
	0, 0, 0, 0, 1250, 0, 0, 0, 0, 832,
	0, 0, 1034, 1065, 1194, 0, 0, 0, 0, 0,
	0, 903, 0, 0, 0, 0, 0, 0, 0, 344,
	903, 0, 0, 0, 1069, 0, 533, 1852, 1158, 0,
	0, 0, 0, 729, 0, 1160, 1150, 1149, 1157, 0,
	0, 1086, 0, 1158, 0, 0, 0, 1151, 0, 1210,
	0, 0, 0, 1157, 0, 0, 0, 0, 1152, 0,
	0, 0, 0, 1216, 1217, 1104, 1218, 796, 797, 789,
	790, 791, 792, 793, 794, 795, 788, 0, 144, 798,
	0, 1153, 1154, 1156, 0, 0, 0, 1155, 0, 817,
	818, 819, 820, 821, 822, 823, 1153, 1154, 1156, 0,
	0, 0, 1155, 0, 1243, 0, 0, 0, 0, 0,
	1249, 0, 0, 0, 1251, 1252, 0, 1253, 1254, 0,
	0, 0, 0, 0, 0, 0, 0, 1259, 0, 1239,
	0, 0, 0, 0, 0, 0, 0, 0, 1195, 787,
	786, 796, 797, 789, 790, 791, 792, 793, 794, 795,
	788, 0, 0, 798, 0, 0, 0, 0, 344, 0,
	0, 0, 1158, 730, 0, 856, 0, 0, 0, 0,
	0, 730, 1157, 787, 786, 796, 797, 789, 790, 791,
	792, 793, 794, 795, 788, 0, 0, 798, 0, 0,
	1207, 0, 0, 0, 1215, 0, 0, 0, 0, 0,
	858, 0, 0, 690, 692, 0, 0, 0, 0, 0,
	0, 0, 144, 144, 0, 1153, 1154, 1156, 0, 0,
	0, 1155, 1161, 880, 517, 518, 519, 0, 1368, 0,
	0, 0, 522, 520, 530, 531, 0, 1161, 0, 0,
	984, 0, 1248, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 208, 209,
	210, 864, 865, 213, 866, 867, 216, 868, 0, 0,
	1677, 757, 760, 0, 0, 0, 0, 0, 0, 859,
	0, 0, 0, 1278, 1281, 1678, 0, 869, 857, 0,
	0, 0, 0, 863, 862, 0, 0, 0, 1067, 1412,
	1292, 0, 0, 0, 1410, 786, 796, 797, 789, 790,
	791, 792, 793, 794, 795, 788, 1428, 0, 798, 0,
	0, 0, 0, 0, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 799, 1451,
	0, 0, 0, 0, 0, 903, 0, 0, 0, 0,
	1208, 0, 0, 0, 0, 0, 1161, 144, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 1575, 0,
	0, 0, 0, 0, 787, 786, 796, 797, 789, 790,
	791, 792, 793, 794, 795, 788, 0, 1384, 798, 0,
	870, 1485, 0, 0, 0, 0, 0, 0, 0, 0,
	757, 0, 0, 0, 1542, 0, 0, 0, 0, 0,
	0, 0, 799, 1397, 1498, 0, 1499, 1500, 0, 0,
	1501, 1502, 0, 0, 1505, 0, 0, 0, 0, 881,
	613, 0, 0, 0, 0, 0, 1508, 1417, 1619, 0,
	0, 0, 0, 1523, 0, 0, 799, 0, 0, 0,
	1203, 1204, 1205, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 144, 0, 0, 0, 144, 144, 0, 0,
	1070, 144, 144, 144, 144, 144, 0, 0, 0, 0,
	0, 0, 526, 1655, 528, 527, 144, 0, 0, 0,
	1575, 0, 0, 1570, 0, 0, 817, 0, 0, 787,
	786, 796, 797, 789, 790, 791, 792, 793, 794, 795,
	788, 0, 0, 798, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1614, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 0, 0, 0, 0, 1621, 0,
	294, 311, 0, 0, 1511, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 799, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1535,
	1536, 1281, 1451, 0, 0, 0, 0, 1451, 1451, 1451,
	1451, 1451, 1656, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1570, 0, 1661, 0, 0, 1334, 0, 0,
	0, 1070, 0, 0, 0, 0, 0, 0, 0, 0,
	1070, 0, 0, 0, 0, 0, 0, 0, 1686, 0,
	0, 0, 1689, 1690, 1691, 1692, 0, 799, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1374, 1375, 1451,
	0, 0, 0, 0, 1708, 1709, 0, 0, 1451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1575, 0, 0, 1388, 1389, 1390,
	1391, 1392, 0, 0, 0, 730, 1628, 856, 0, 0,
	0, 0, 0, 1222, 1223, 0, 1224, 0, 0, 0,
	0, 1227, 0, 0, 0, 0, 1745, 0, 0, 0,
	1750, 0, 0, 1230, 1231, 0, 0, 1232, 1233, 0,
	1234, 1235, 858, 0, 0, 0, 0, 0, 1761, 0,
	730, 0, 0, 1672, 729, 0, 1160, 1150, 1149, 1070,
	0, 0, 0, 1778, 0, 0, 0, 544, 1151, 1775,
	1776, 1777, 799, 0, 0, 0, 0, 0, 0, 1152,
	0, 0, 0, 0, 1791, 0, 1699, 0, 0, 0,
	0, 0, 0, 0, 1799, 1800, 1801, 0, 1804, 0,
	208, 209, 210, 864, 865, 213, 866, 867, 216, 868,
	0, 218, 1015, 0, 220, 221, 222, 224, 223, 0,
	1012, 859, 0, 0, 0, 0, 0, 0, 0, 869,
	857, 0, 0, 1495, 0, 863, 862, 0, 0, 0,
	1761, 0, 0, 1831, 0, 0, 0, 0, 0, 1837,
	1838, 1839, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1761, 0, 730, 0, 0, 0, 0, 1851, 0,
	0, 1770, 0, 1158, 1771, 0, 0, 1773, 0, 0,
	0, 0, 0, 1157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1783, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1699, 0,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 870, 0, 0, 0, 1153, 1154, 1156, 0,
	0, 0, 1155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 0,
	1825, 832, 0, 1609, 1610, 0, 1611, 1612, 1613, 0,
	0, 0, 460, 449, 0, 408, 462, 378, 396, 470,
	398, 399, 435, 357, 418, 80, 393, 375, 36, 381,
	350, 388, 351, 379, 410, 49, 376, 0, 451, 421,
	60, 132, 0, 468, 63, 426, 0, 102, 73, 0,
	0, 413, 453, 416, 444, 407, 436, 365, 425, 463,
	394, 431, 464, 0, 0, 0, 534, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 430, 458,
	390, 473, 0, 434, 349, 428, 0, 355, 358, 469,
	456, 385, 386, 0, 0, 0, 0, 0, 0, 1222,
	412, 417, 441, 404, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1264, 0, 382, 1161, 424, 0,
	0, 0, 362, 356, 0, 409, 0, 0, 0, 364,
	0, 383, 442, 0, 346, 447, 454, 406, 69, 119,
	457, 403, 402, 0, 0, 0, 0, 104, 52, 395,
	61, 439, 471, 461, 414, 452, 380, 389, 0, 387,
	92, 81, 113, 423, 437, 90, 64, 107, 87, 112,
	459, 106, 118, 95, 42, 78, 34, 86, 91, 0,
	47, 0, 125, 126, 127, 128, 129, 130, 131, 354,
	347, 384, 445, 448, 369, 433, 359, 391, 440, 392,
	415, 374, 0, 0, 0, 0, 0, 0, 0, 101,
	100, 37, 105, 111, 45, 96, 0, 0, 0, 103,
	71, 0, 58, 98, 0, 38, 0, 0, 48, 85,
	0, 0, 0, 0, 0, 0, 108, 0, 122, 0,
	0, 0, 0, 0, 117, 40, 43, 0, 0, 0,
	0, 116, 0, 110, 72, 68, 0, 39, 109, 70,
	67, 0, 0, 50, 53, 83, 66, 84, 54, 75,
	74, 76, 0, 0, 79, 55, 0, 0, 0, 352,
	0, 0, 0, 123, 124, 353, 373, 455, 120, 0,
	0, 0, 77, 44, 56, 97, 59, 65, 89, 121,
	432, 93, 46, 114, 99, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 0, 368, 372, 366,
	367, 419, 420, 465, 466, 467, 443, 363, 0, 370,
	371, 0, 450, 57, 133, 134, 422, 35, 41, 62,
	472, 0, 0, 88, 51, 115, 0, 0, 397, 348,
	401, 0, 0, 0, 0, 0, 0, 0, 360, 361,
	94, 0, 405, 400, 427, 429, 438, 446, 0, 377,
	411, 460, 449, 0, 408, 462, 378, 396, 470, 398,
	399, 435, 357, 418, 80, 393, 375, 36, 381, 350,
	388, 351, 379, 410, 49, 376, 0, 451, 421, 60,
	132, 0, 468, 63, 426, 0, 102, 73, 0, 0,
	413, 453, 416, 444, 407, 436, 365, 425, 463, 394,
	431, 464, 0, 0, 0, 32, 0, 753, 0, 754,
	0, 0, 0, 0, 0, 0, 0, 430, 458, 390,
	473, 0, 434, 349, 428, 0, 355, 358, 469, 456,
	385, 386, 0, 0, 0, 0, 0, 0, 0, 412,
	417, 441, 404, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 382, 0, 424, 0, 0,
	0, 362, 356, 0, 409, 0, 0, 0, 364, 0,
	383, 442, 0, 346, 447, 454, 406, 69, 119, 457,
	403, 402, 0, 0, 0, 0, 104, 52, 395, 61,
	439, 471, 461, 414, 452, 380, 389, 0, 387, 92,
	81, 113, 423, 437, 90, 64, 107, 87, 112, 459,
	106, 118, 95, 42, 78, 34, 86, 91, 0, 47,
	0, 125, 126, 127, 128, 129, 130, 131, 354, 347,
	384, 445, 448, 369, 433, 359, 391, 440, 392, 415,
	374, 0, 0, 0, 0, 0, 0, 0, 101, 100,
	37, 105, 111, 45, 96, 0, 0, 0, 103, 71,
	0, 58, 98, 0, 38, 0, 0, 48, 85, 0,
	0, 0, 0, 0, 0, 108, 0, 122, 0, 0,
	0, 0, 0, 117, 40, 43, 0, 0, 0, 0,
	116, 0, 110, 72, 68, 0, 39, 109, 70, 67,
	0, 0, 50, 53, 83, 66, 84, 54, 75, 74,
	76, 0, 0, 79, 55, 0, 0, 0, 352, 0,
	0, 0, 123, 124, 353, 373, 455, 120, 0, 0,
	0, 77, 44, 56, 97, 59, 65, 89, 121, 432,
	93, 46, 114, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 368, 372, 366, 367,
	419, 420, 465, 466, 467, 443, 363, 0, 370, 371,
	0, 450, 57, 133, 134, 422, 35, 41, 62, 472,
	0, 0, 88, 51, 115, 0, 0, 397, 348, 401,
	0, 0, 0, 0, 0, 0, 0, 360, 361, 94,
	0, 405, 400, 427, 429, 438, 446, 0, 377, 411,
	460, 449, 0, 408, 462, 378, 396, 470, 398, 399,
	435, 357, 418, 80, 393, 375, 36, 381, 350, 388,
	351, 379, 410, 49, 376, 0, 451, 421, 60, 132,
	0, 468, 63, 426, 0, 102, 73, 0, 0, 413,
	453, 416, 444, 407, 436, 365, 425, 463, 394, 431,
	464, 0, 0, 0, 32, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 430, 458, 390, 473,
	0, 434, 349, 428, 0, 355, 358, 469, 456, 385,
	386, 0, 0, 0, 0, 0, 0, 0, 412, 417,
	441, 404, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 382, 0, 424, 0, 0, 0,
	362, 356, 0, 409, 0, 0, 0, 364, 0, 383,
	442, 0, 346, 447, 454, 406, 69, 119, 457, 403,
	402, 0, 0, 0, 0, 104, 52, 395, 61, 439,
	471, 461, 414, 452, 380, 389, 0, 387, 92, 81,
	113, 423, 437, 90, 64, 107, 87, 112, 459, 106,
	118, 95, 42, 78, 34, 86, 91, 0, 47, 0,
	125, 126, 127, 128, 129, 130, 131, 354, 347, 384,
	445, 448, 369, 433, 359, 391, 440, 392, 415, 374,
	0, 0, 0, 0, 0, 0, 0, 101, 100, 37,
	105, 111, 45, 96, 0, 0, 0, 103, 71, 0,
	58, 98, 0, 38, 0, 0, 48, 85, 0, 0,
	0, 0, 0, 0, 108, 0, 122, 0, 0, 0,
	0, 0, 117, 40, 1467, 0, 0, 0, 0, 116,
	0, 110, 72, 68, 0, 39, 109, 70, 67, 0,
	0, 50, 53, 83, 66, 84, 54, 75, 74, 76,
	0, 0, 79, 55, 0, 0, 0, 352, 0, 0,
	0, 123, 124, 353, 373, 455, 120, 0, 0, 0,
	1468, 1466, 56, 97, 59, 65, 89, 121, 432, 93,
	46, 114, 99, 1464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 368, 372, 366, 367, 419,
	420, 465, 466, 467, 443, 363, 0, 370, 371, 0,
	450, 57, 133, 134, 422, 35, 41, 62, 472, 0,
	0, 88, 51, 115, 0, 0, 397, 348, 401, 0,
	0, 0, 0, 0, 0, 0, 360, 361, 94, 0,
	405, 400, 427, 429, 438, 446, 0, 377, 411, 460,
	449, 0, 408, 462, 378, 396, 470, 398, 399, 435,
	357, 418, 80, 393, 375, 36, 381, 350, 388, 351,
	379, 410, 49, 376, 0, 451, 421, 60, 132, 0,
	468, 63, 426, 0, 102, 73, 0, 0, 413, 453,
	416, 444, 407, 436, 365, 425, 463, 394, 431, 464,
	0, 0, 0, 32, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 430, 458, 390, 473, 0,
	434, 349, 428, 0, 355, 358, 469, 456, 385, 386,
	0, 0, 0, 0, 0, 0, 0, 412, 417, 441,
	404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 382, 0, 424, 0, 0, 0, 362,
	356, 0, 409, 0, 0, 0, 364, 0, 383, 442,
	0, 346, 447, 454, 406, 69, 119, 457, 403, 402,
	0, 0, 0, 0, 104, 52, 395, 61, 439, 471,
	461, 414, 452, 380, 389, 0, 387, 92, 81, 113,
	423, 437, 90, 64, 107, 87, 112, 459, 106, 118,
	95, 42, 78, 34, 86, 91, 0, 47, 0, 125,
	126, 127, 128, 129, 130, 131, 354, 347, 384, 445,
	448, 369, 433, 359, 391, 440, 392, 415, 374, 0,
	0, 0, 0, 0, 0, 0, 101, 100, 37, 105,
	1582, 45, 96, 0, 0, 0, 103, 71, 0, 58,
	98, 0, 38, 0, 0, 48, 85, 0, 0, 0,
	0, 0, 0, 108, 0, 122, 0, 0, 0, 0,
	0, 117, 40, 1467, 0, 0, 0, 0, 116, 0,
	110, 72, 68, 0, 39, 109, 70, 67, 0, 0,
	50, 53, 83, 66, 84, 54, 75, 74, 76, 0,
	0, 79, 55, 0, 0, 0, 352, 0, 0, 0,
	123, 124, 353, 373, 455, 120, 0, 0, 0, 1468,
	1466, 56, 97, 59, 65, 89, 121, 432, 93, 46,
	114, 99, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 368, 372, 366, 367, 419, 420,
	465, 466, 467, 443, 363, 0, 370, 371, 0, 450,
	57, 133, 134, 422, 35, 41, 62, 472, 0, 0,
	88, 51, 115, 0, 0, 397, 348, 401, 0, 0,
	0, 0, 0, 0, 0, 360, 361, 94, 0, 405,
	400, 427, 429, 438, 446, 0, 377, 411, 460, 449,
	0, 408, 462, 378, 396, 470, 398, 399, 435, 357,
	418, 80, 393, 375, 36, 381, 350, 388, 351, 379,
	410, 49, 376, 0, 451, 421, 60, 132, 0, 468,
	63, 426, 0, 102, 73, 0, 0, 413, 453, 416,
	444, 407, 436, 365, 425, 463, 394, 431, 464, 0,
	0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 430, 458, 390, 473, 0, 434,
	349, 428, 0, 355, 358, 469, 456, 385, 386, 0,
	0, 0, 0, 0, 0, 0, 412, 417, 441, 404,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1526, 0, 382, 0, 424, 0, 0, 0, 362, 356,
	0, 409, 0, 0, 0, 364, 0, 383, 442, 0,
	346, 447, 454, 406, 69, 119, 457, 403, 402, 0,
	0, 0, 0, 104, 52, 395, 61, 439, 471, 461,
	414, 452, 380, 389, 0, 387, 92, 81, 113, 423,
	437, 90, 64, 107, 87, 112, 459, 106, 118, 95,
	42, 78, 34, 86, 91, 0, 47, 0, 125, 126,
	127, 128, 129, 130, 131, 354, 347, 384, 445, 448,
	369, 433, 359, 391, 440, 392, 415, 374, 0, 0,
	0, 0, 0, 0, 0, 101, 100, 37, 105, 111,
	45, 96, 0, 0, 0, 103, 71, 0, 58, 98,
	0, 38, 0, 0, 48, 85, 0, 0, 0, 0,
	0, 0, 108, 0, 122, 0, 0, 0, 0, 0,
	117, 40, 43, 0, 0, 0, 0, 116, 0, 110,
	72, 68, 0, 39, 109, 70, 67, 0, 0, 50,
	53, 83, 66, 84, 54, 75, 74, 76, 0, 0,
	79, 55, 0, 0, 0, 352, 0, 0, 0, 123,
	124, 353, 373, 455, 120, 0, 0, 0, 77, 44,
	56, 97, 59, 65, 89, 121, 432, 93, 46, 114,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 368, 372, 366, 367, 419, 420, 465,
	466, 467, 443, 363, 0, 370, 371, 0, 450, 57,
	133, 134, 422, 35, 41, 62, 472, 0, 0, 88,
	51, 115, 0, 0, 397, 348, 401, 0, 0, 0,
	0, 0, 0, 0, 360, 361, 94, 0, 405, 400,
	427, 429, 438, 446, 0, 377, 411, 460, 449, 0,
	408, 462, 378, 396, 470, 398, 399, 435, 357, 418,
	80, 393, 375, 36, 381, 350, 388, 351, 379, 410,
	49, 376, 0, 451, 421, 60, 132, 0, 468, 63,
	426, 0, 102, 73, 0, 0, 413, 453, 416, 444,
	407, 436, 365, 425, 463, 394, 431, 464, 0, 0,
	0, 32, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 430, 458, 390, 473, 0, 434, 349,
	428, 0, 355, 358, 469, 456, 385, 386, 0, 0,
	0, 0, 0, 0, 0, 412, 417, 441, 404, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 382, 0, 424, 0, 0, 0, 362, 356, 0,
	409, 0, 0, 0, 364, 0, 383, 442, 0, 346,
	447, 454, 406, 69, 119, 457, 403, 402, 0, 0,
	0, 0, 104, 52, 395, 61, 439, 471, 461, 414,
	452, 380, 389, 0, 387, 92, 81, 113, 423, 437,
	90, 64, 107, 87, 112, 459, 106, 118, 95, 42,
	78, 34, 86, 91, 0, 47, 0, 125, 126, 127,
	128, 129, 130, 131, 354, 347, 384, 445, 448, 369,
	433, 359, 391, 440, 392, 415, 374, 0, 0, 0,
	0, 0, 0, 0, 101, 100, 37, 105, 1459, 45,
	96, 0, 0, 0, 103, 71, 0, 58, 98, 0,
	38, 0, 0, 48, 85, 0, 0, 0, 0, 0,
	0, 108, 0, 122, 0, 0, 0, 0, 0, 117,
	40, 1467, 0, 0, 0, 0, 116, 0, 110, 72,
	68, 0, 39, 109, 70, 67, 0, 0, 50, 53,
	83, 66, 84, 54, 75, 74, 76, 0, 0, 79,
	55, 0, 0, 0, 352, 0, 0, 0, 123, 124,
	353, 373, 455, 120, 0, 0, 0, 1468, 1466, 1462,
	1461, 59, 65, 89, 121, 432, 93, 46, 114, 99,
	1464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 368, 372, 366, 367, 419, 420, 465, 466,
	467, 443, 363, 0, 370, 371, 0, 450, 57, 133,
	134, 422, 35, 41, 62, 472, 0, 0, 88, 51,
	115, 0, 0, 397, 348, 401, 0, 0, 0, 0,
	0, 0, 0, 360, 361, 94, 0, 405, 400, 427,
	429, 438, 446, 0, 377, 411, 460, 449, 0, 408,
	462, 378, 396, 470, 398, 399, 435, 357, 418, 80,
	393, 375, 36, 381, 350, 388, 351, 379, 410, 49,
	376, 0, 451, 421, 60, 132, 0, 468, 63, 426,
	0, 102, 73, 0, 0, 413, 453, 416, 444, 407,
	436, 365, 425, 463, 394, 431, 464, 0, 0, 0,
	534, 0, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 430, 458, 390, 473, 0, 434, 349, 428,
	0, 355, 358, 469, 456, 385, 386, 0, 0, 0,
	0, 0, 0, 0, 412, 417, 441, 404, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	382, 0, 424, 0, 0, 0, 362, 356, 0, 409,
	0, 0, 0, 364, 0, 383, 442, 0, 346, 447,
	454, 406, 69, 119, 457, 403, 402, 0, 0, 0,
	0, 104, 52, 395, 61, 439, 471, 461, 414, 452,
	380, 389, 0, 387, 92, 81, 113, 423, 437, 90,
	64, 107, 87, 112, 459, 106, 118, 95, 42, 78,
	34, 86, 91, 0, 47, 0, 125, 126, 127, 128,
	129, 130, 131, 354, 347, 384, 445, 448, 369, 433,
	359, 391, 440, 392, 415, 374, 0, 0, 0, 0,
	0, 0, 0, 101, 100, 37, 105, 111, 45, 96,
	0, 0, 0, 103, 71, 0, 58, 98, 0, 38,
	0, 0, 48, 85, 0, 0, 0, 0, 0, 0,
	108, 0, 122, 0, 0, 0, 0, 0, 117, 40,
	43, 0, 0, 0, 0, 116, 0, 110, 72, 68,
	0, 39, 109, 70, 67, 0, 0, 50, 53, 83,
	66, 84, 54, 75, 74, 76, 0, 0, 79, 55,
	0, 0, 0, 352, 0, 0, 0, 123, 124, 353,
	373, 455, 120, 0, 0, 0, 77, 44, 56, 97,
	59, 65, 89, 121, 432, 93, 46, 114, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 368, 372, 366, 367, 419, 420, 465, 466, 467,
	443, 363, 0, 370, 371, 0, 450, 57, 133, 134,
	422, 35, 41, 62, 472, 0, 0, 88, 51, 115,
	0, 0, 397, 348, 401, 0, 0, 0, 0, 0,
	0, 0, 360, 361, 94, 0, 405, 400, 427, 429,
	438, 446, 0, 377, 411, 460, 449, 0, 408, 462,
	378, 396, 470, 398, 399, 435, 357, 418, 80, 393,
	375, 36, 381, 350, 388, 351, 379, 410, 49, 376,
	0, 451, 421, 60, 132, 0, 468, 63, 426, 0,
	102, 73, 0, 0, 413, 453, 416, 444, 407, 436,
	365, 425, 463, 394, 431, 464, 0, 0, 0, 32,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 480,
	0, 430, 458, 390, 473, 0, 434, 349, 428, 0,
	355, 358, 469, 456, 385, 386, 0, 0, 0, 0,
	0, 0, 0, 412, 417, 441, 404, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 382,
	0, 424, 0, 0, 0, 362, 356, 0, 409, 0,
	0, 0, 364, 0, 383, 442, 0, 346, 447, 454,
	406, 69, 119, 457, 403, 402, 0, 0, 0, 0,
	104, 52, 395, 61, 439, 471, 461, 414, 452, 380,
	389, 0, 387, 92, 81, 113, 423, 437, 90, 64,
	107, 87, 112, 459, 106, 118, 95, 42, 78, 34,
	86, 91, 0, 47, 0, 125, 126, 127, 128, 129,
	130, 131, 354, 347, 384, 445, 448, 369, 433, 359,
	391, 440, 392, 415, 374, 0, 0, 0, 0, 0,
	0, 0, 101, 100, 37, 105, 111, 45, 96, 0,
	0, 0, 103, 71, 0, 58, 98, 0, 38, 0,
	0, 48, 85, 0, 0, 0, 0, 0, 0, 108,
	0, 122, 0, 0, 0, 0, 0, 117, 40, 43,
	0, 0, 0, 0, 116, 0, 110, 72, 68, 0,
	39, 109, 70, 67, 0, 0, 50, 53, 83, 66,
	84, 54, 75, 74, 76, 0, 0, 79, 55, 0,
	0, 0, 352, 0, 0, 0, 123, 124, 353, 373,
	455, 120, 0, 0, 0, 77, 44, 56, 97, 59,
	65, 89, 121, 432, 93, 46, 114, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	368, 372, 366, 367, 419, 420, 465, 466, 467, 443,
	363, 0, 370, 371, 0, 450, 57, 133, 134, 422,
	35, 41, 62, 472, 0, 0, 88, 51, 115, 0,
	0, 397, 348, 401, 0, 0, 0, 0, 0, 0,
	0, 360, 361, 94, 0, 405, 400, 427, 429, 438,
	446, 0, 377, 411, 460, 449, 0, 408, 462, 378,
	396, 470, 398, 399, 435, 357, 418, 80, 393, 375,
	36, 381, 350, 388, 351, 379, 410, 49, 376, 0,
	451, 421, 60, 132, 0, 468, 63, 426, 0, 102,
	73, 0, 0, 413, 453, 416, 444, 407, 436, 365,
	425, 463, 394, 431, 464, 0, 0, 0, 32, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	430, 458, 390, 473, 0, 434, 349, 428, 0, 355,
	358, 469, 456, 385, 386, 589, 0, 0, 0, 0,
	0, 0, 412, 417, 441, 404, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 382, 0,
	424, 0, 0, 0, 362, 356, 0, 409, 0, 0,
	0, 364, 0, 383, 442, 0, 346, 447, 454, 406,
	69, 119, 457, 403, 402, 0, 0, 0, 0, 104,
	52, 395, 61, 439, 471, 461, 414, 452, 380, 389,
	0, 387, 92, 81, 113, 423, 437, 90, 64, 107,
	87, 112, 459, 106, 118, 95, 42, 78, 34, 86,
	91, 0, 47, 0, 125, 126, 127, 128, 129, 130,
	131, 354, 347, 384, 445, 448, 369, 433, 359, 391,
	440, 392, 415, 374, 0, 0, 0, 0, 0, 0,
	0, 101, 100, 37, 105, 111, 45, 96, 0, 0,
	0, 103, 71, 0, 58, 98, 0, 38, 0, 0,
	48, 85, 0, 0, 0, 0, 0, 0, 108, 0,
	122, 0, 0, 0, 0, 0, 117, 40, 43, 0,
	0, 0, 0, 116, 0, 110, 72, 68, 0, 39,
	109, 70, 67, 0, 0, 50, 53, 83, 66, 84,
	54, 75, 74, 76, 0, 0, 79, 55, 0, 0,
	0, 352, 0, 0, 0, 123, 124, 353, 373, 455,
	120, 0, 0, 0, 77, 44, 56, 97, 59, 65,
	89, 121, 432, 93, 46, 114, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 368,
	372, 366, 367, 419, 420, 465, 466, 467, 443, 363,
	0, 370, 371, 0, 450, 57, 133, 134, 422, 35,
	41, 62, 472, 0, 0, 88, 51, 115, 0, 0,
	397, 348, 401, 0, 0, 0, 0, 0, 0, 0,
	360, 361, 94, 0, 405, 400, 427, 429, 438, 446,
	0, 377, 411, 460, 449, 0, 408, 462, 378, 396,
	470, 398, 399, 435, 357, 418, 80, 393, 375, 36,
	381, 350, 388, 351, 379, 410, 49, 376, 0, 451,
	421, 60, 132, 0, 468, 63, 426, 0, 102, 73,
	0, 0, 413, 453, 416, 444, 407, 436, 365, 425,
	463, 394, 431, 464, 0, 0, 0, 145, 0, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 430,
	458, 390, 473, 0, 434, 349, 428, 0, 355, 358,
	469, 456, 385, 386, 0, 0, 0, 0, 0, 0,
	0, 412, 417, 441, 404, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 382, 0, 424,
	0, 0, 0, 362, 356, 0, 409, 0, 0, 0,
	364, 0, 383, 442, 0, 346, 447, 454, 406, 69,
	119, 457, 403, 402, 0, 0, 0, 0, 104, 52,
	395, 61, 439, 471, 461, 414, 452, 380, 389, 0,
	387, 92, 81, 113, 423, 437, 90, 64, 107, 87,
	112, 459, 106, 118, 95, 42, 78, 34, 86, 91,
	0, 47, 0, 125, 126, 127, 128, 129, 130, 131,
	354, 347, 384, 445, 448, 369, 433, 359, 391, 440,
	392, 415, 374, 0, 0, 0, 0, 0, 0, 0,
	101, 100, 37, 105, 111, 45, 96, 0, 0, 0,
	103, 71, 0, 58, 98, 0, 38, 0, 0, 48,
	85, 0, 0, 0, 0, 0, 0, 108, 0, 122,
	0, 0, 0, 0, 0, 117, 40, 43, 0, 0,
	0, 0, 116, 0, 110, 72, 68, 0, 39, 109,
	70, 67, 0, 0, 50, 53, 83, 66, 84, 54,
	75, 74, 76, 0, 0, 79, 55, 0, 0, 0,
	352, 0, 0, 0, 123, 124, 353, 373, 455, 120,
	0, 0, 0, 77, 44, 56, 97, 59, 65, 89,
	121, 432, 93, 46, 114, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 368, 372,
	366, 367, 419, 420, 465, 466, 467, 443, 363, 0,
	370, 371, 0, 450, 57, 133, 134, 422, 35, 41,
	62, 472, 0, 0, 88, 51, 115, 0, 0, 397,
	348, 401, 0, 0, 0, 0, 0, 0, 0, 360,
	361, 94, 0, 405, 400, 427, 429, 438, 446, 0,
	377, 411, 460, 449, 0, 408, 462, 378, 396, 470,
	398, 399, 435, 357, 418, 80, 393, 375, 36, 381,
	350, 388, 351, 379, 410, 49, 376, 0, 451, 421,
	60, 132, 0, 468, 63, 426, 0, 102, 73, 0,
	0, 413, 453, 416, 444, 407, 436, 365, 425, 463,
	394, 431, 464, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 430, 458,
	390, 473, 0, 434, 349, 428, 0, 355, 358, 469,
	456, 385, 386, 0, 0, 0, 0, 0, 0, 0,
	412, 417, 441, 404, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 382, 0, 424, 0,
	0, 0, 362, 356, 0, 409, 0, 0, 0, 364,
	0, 383, 442, 0, 346, 447, 454, 406, 69, 119,
	457, 403, 402, 0, 0, 0, 0, 104, 52, 395,
	61, 439, 471, 461, 414, 452, 380, 389, 0, 387,
	92, 81, 113, 423, 437, 90, 64, 107, 87, 112,
	459, 106, 118, 95, 42, 78, 34, 86, 91, 0,
	47, 0, 125, 126, 127, 128, 129, 130, 131, 354,
	347, 384, 445, 448, 369, 433, 359, 391, 440, 392,
	415, 374, 0, 0, 0, 0, 0, 0, 0, 101,
	100, 37, 105, 111, 45, 96, 0, 0, 0, 103,
	71, 0, 58, 98, 0, 38, 0, 0, 48, 85,
	0, 0, 0, 0, 0, 0, 108, 0, 122, 0,
	0, 0, 0, 0, 117, 40, 43, 0, 0, 0,
	0, 116, 0, 110, 72, 68, 0, 39, 109, 70,
	67, 0, 0, 50, 53, 83, 66, 84, 54, 75,
	74, 76, 0, 0, 79, 55, 0, 0, 0, 352,
	0, 0, 0, 123, 124, 353, 373, 455, 120, 0,
	0, 0, 77, 44, 56, 97, 59, 65, 89, 121,
	432, 93, 46, 114, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 368, 372, 366,
	367, 419, 420, 465, 466, 467, 443, 363, 0, 370,
	371, 0, 450, 57, 133, 134, 422, 35, 41, 62,
	472, 0, 0, 88, 51, 115, 0, 0, 397, 348,
	401, 0, 0, 0, 0, 0, 0, 0, 360, 361,
	94, 0, 405, 400, 427, 429, 438, 446, 80, 377,
	411, 36, 0, 0, 622, 0, 0, 0, 49, 621,
	0, 0, 0, 60, 132, 0, 664, 63, 665, 0,
	102, 73, 0, 0, 0, 0, 655, 656, 0, 0,
	0, 0, 0, 0, 0, 0, 615, 0, 0, 534,
	644, 641, 642, 646, 647, 648, 649, 0, 0, 0,
	645, 650, 530, 531, 0, 0, 0, 0, 619, 634,
	0, 663, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 631, 632, 0, 0, 0,
	0, 677, 0, 633, 0, 0, 1036, 630, 635, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 119, 0, 0, 675, 0, 0, 0, 0,
	104, 52, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 1038, 0, 92, 81, 113, 0, 82, 90, 64,
	107, 87, 112, 0, 106, 118, 95, 42, 78, 34,
	86, 91, 0, 47, 0, 125, 126, 127, 128, 129,
	130, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 100, 37, 105, 111, 45, 96, 1047,
	1053, 1051, 103, 71, 1048, 58, 98, 1046, 38, 0,
	1055, 48, 85, 1054, 1040, 1050, 1052, 1049, 1044, 108,
	1039, 122, 1057, 1056, 1058, 1037, 1060, 117, 40, 43,
	1064, 1061, 1063, 1062, 116, 1059, 110, 72, 68, 0,
	39, 109, 70, 67, 1041, 1042, 50, 53, 83, 66,
	84, 54, 75, 74, 76, 679, 0, 79, 55, 0,
	0, 0, 0, 0, 1043, 1045, 123, 124, 0, 0,
	0, 120, 0, 0, 0, 77, 44, 56, 97, 59,
	65, 89, 121, 0, 93, 46, 114, 99, 652, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	666, 676, 672, 673, 670, 671, 669, 668, 667, 678,
	657, 658, 659, 660, 662, 0, 57, 133, 134, 661,
	35, 41, 62, 0, 0, 0, 88, 51, 115, 80,
	0, 0, 36, 0, 0, 622, 0, 0, 0, 49,
	621, 0, 0, 94, 60, 132, 0, 664, 63, 665,
	0, 102, 73, 0, 674, 0, 0, 655, 656, 0,
	0, 0, 0, 0, 0, 1670, 0, 615, 0, 0,
	534, 644, 641, 642, 646, 647, 648, 649, 0, 0,
	0, 645, 650, 530, 531, 1671, 0, 0, 0, 619,
	634, 0, 663, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 729, 0, 1160,
	1150, 1149, 0, 0, 0, 0, 631, 632, 0, 0,
	0, 1151, 677, 0, 633, 0, 0, 629, 630, 635,
	0, 0, 1152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 119, 0, 0, 675, 0, 0, 0,
	0, 104, 52, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 81, 113, 0, 82, 90,
	64, 107, 87, 112, 0, 106, 118, 95, 42, 78,
	34, 86, 91, 0, 47, 0, 125, 126, 127, 128,
	129, 130, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 100, 37, 105, 111, 45, 96,
	0, 0, 0, 103, 71, 0, 58, 98, 0, 38,
	0, 0, 48, 85, 0, 0, 1158, 0, 0, 0,
	108, 0, 122, 0, 0, 0, 1157, 0, 117, 40,
	43, 0, 0, 0, 0, 116, 0, 110, 72, 68,
	0, 39, 109, 70, 67, 0, 0, 50, 53, 83,
	66, 84, 54, 75, 74, 76, 679, 0, 79, 55,
	0, 0, 0, 0, 0, 0, 0, 123, 124, 1153,
	1154, 1156, 120, 0, 0, 1155, 77, 44, 56, 97,
	59, 65, 89, 121, 0, 93, 46, 114, 99, 652,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 666, 676, 672, 673, 670, 671, 669, 668, 667,
	678, 657, 658, 659, 660, 662, 0, 57, 133, 134,
	661, 35, 41, 62, 0, 0, 0, 88, 51, 115,
	80, 0, 0, 36, 897, 0, 622, 0, 0, 0,
	49, 621, 0, 0, 94, 60, 132, 0, 664, 63,
	665, 0, 102, 73, 0, 674, 0, 0, 655, 656,
	0, 0, 0, 0, 0, 0, 0, 0, 615, 0,
	0, 534, 644, 641, 642, 646, 647, 648, 649, 0,
	0, 0, 645, 650, 530, 531, 0, 0, 0, 0,
	619, 634, 0, 663, 0, 0, 0, 0, 0, 0,
	1161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 631, 632, 902,
	0, 0, 0, 677, 0, 633, 0, 0, 629, 630,
	635, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 119, 0, 0, 675, 0, 0,
	0, 0, 104, 52, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 81, 113, 0, 82,
	90, 64, 107, 87, 112, 0, 106, 118, 95, 42,
	78, 34, 86, 91, 0, 47, 0, 125, 126, 127,
	128, 129, 130, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 100, 37, 105, 111, 45,
	96, 0, 0, 0, 103, 71, 0, 58, 98, 0,
	38, 0, 0, 48, 85, 0, 0, 0, 0, 0,
	0, 108, 0, 122, 0, 0, 0, 0, 0, 117,
	40, 43, 0, 0, 0, 0, 116, 0, 110, 72,
	68, 0, 39, 109, 70, 67, 0, 0, 50, 53,
	83, 66, 84, 54, 75, 74, 76, 679, 0, 79,
	55, 0, 0, 0, 0, 0, 0, 0, 123, 124,
	0, 0, 0, 120, 0, 0, 0, 77, 44, 56,
	97, 59, 65, 89, 121, 0, 93, 46, 114, 99,
	652, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 666, 676, 672, 673, 670, 671, 669, 668,
	667, 678, 657, 658, 659, 660, 662, 0, 57, 133,
	134, 661, 35, 41, 62, 0, 0, 0, 88, 51,
	115, 80, 0, 0, 36, 0, 0, 622, 0, 0,
	0, 49, 621, 0, 0, 94, 60, 132, 0, 664,
	63, 665, 0, 102, 73, 0, 674, 0, 0, 655,
	656, 0, 0, 0, 0, 0, 0, 0, 0, 615,
	0, 892, 534, 644, 641, 642, 646, 647, 648, 649,
	0, 0, 0, 645, 650, 530, 531, 0, 0, 0,
	0, 619, 634, 0, 663, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 631, 632,
	0, 0, 0, 0, 677, 0, 633, 0, 0, 629,
	630, 635, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 119, 0, 0, 675, 0,
	0, 0, 0, 104, 52, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 81, 113, 0,
	82, 90, 64, 107, 87, 112, 0, 106, 118, 95,
	42, 78, 34, 86, 91, 0, 47, 0, 125, 126,
	127, 128, 129, 130, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 100, 37, 105, 111,
	45, 96, 0, 0, 0, 103, 71, 0, 58, 98,
	0, 38, 0, 0, 48, 85, 0, 0, 0, 0,
	0, 0, 108, 0, 122, 0, 0, 0, 0, 0,
	117, 40, 43, 0, 0, 0, 0, 116, 0, 110,
	72, 68, 0, 39, 109, 70, 67, 0, 0, 50,
	53, 83, 66, 84, 54, 75, 74, 76, 679, 0,
	79, 55, 0, 0, 0, 0, 0, 0, 0, 123,
	124, 0, 0, 0, 120, 0, 0, 0, 77, 44,
	56, 97, 59, 65, 89, 121, 0, 93, 46, 114,
	99, 652, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 666, 676, 672, 673, 670, 671, 669,
	668, 667, 678, 657, 658, 659, 660, 662, 0, 57,
	133, 134, 661, 35, 41, 62, 0, 0, 0, 88,
	51, 115, 80, 0, 0, 36, 0, 0, 622, 0,
	0, 0, 49, 621, 0, 0, 94, 60, 132, 0,
	664, 63, 665, 0, 102, 73, 0, 674, 0, 0,
	655, 656, 0, 0, 0, 0, 0, 0, 0, 0,
	615, 0, 0, 534, 644, 641, 642, 646, 647, 648,
	649, 0, 0, 0, 645, 650, 530, 531, 0, 0,
	0, 0, 619, 634, 0, 663, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 631,
	632, 902, 0, 0, 0, 677, 0, 633, 0, 0,
	629, 630, 635, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 119, 0, 0, 675,
	0, 0, 0, 0, 104, 52, 0, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 81, 113,
	0, 82, 90, 64, 107, 87, 112, 0, 106, 118,
	95, 42, 78, 34, 86, 91, 0, 47, 0, 125,
	126, 127, 128, 129, 130, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 100, 37, 105,
	111, 45, 96, 0, 0, 0, 103, 71, 0, 58,
	98, 0, 38, 0, 0, 48, 85, 0, 0, 0,
	0, 0, 0, 108, 0, 122, 0, 0, 0, 0,
	0, 117, 40, 43, 0, 0, 0, 0, 116, 0,
	110, 72, 68, 0, 39, 109, 70, 67, 0, 0,
	50, 53, 83, 66, 84, 54, 75, 74, 76, 679,
	0, 79, 55, 0, 0, 0, 0, 0, 0, 0,
	123, 124, 0, 0, 0, 120, 0, 0, 0, 77,
	44, 56, 97, 59, 65, 89, 121, 0, 93, 46,
	114, 99, 652, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 666, 676, 672, 673, 670, 671,
	669, 668, 667, 678, 657, 658, 659, 660, 662, 0,
	57, 133, 134, 661, 35, 41, 62, 0, 0, 0,
	88, 51, 115, 729, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 94, 36, 0,
	0, 622, 0, 0, 0, 49, 621, 0, 674, 0,
	60, 132, 0, 664, 63, 665, 0, 102, 73, 0,
	0, 0, 0, 655, 656, 0, 0, 0, 0, 0,
	0, 0, 0, 615, 0, 0, 534, 644, 641, 642,
	646, 647, 648, 649, 0, 0, 0, 645, 650, 530,
	531, 0, 0, 0, 0, 619, 634, 0, 663, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 631, 632, 0, 0, 0, 0, 677, 0,
	633, 0, 0, 629, 630, 635, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 119,
	0, 0, 675, 0, 0, 0, 0, 104, 52, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 81, 113, 0, 82, 90, 64, 107, 87, 112,
	0, 106, 118, 95, 42, 78, 34, 86, 91, 0,
	47, 0, 125, 126, 127, 128, 129, 130, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	100, 37, 105, 111, 45, 96, 0, 0, 0, 103,
	71, 0, 58, 98, 0, 38, 0, 0, 48, 85,
	0, 0, 0, 0, 0, 0, 108, 0, 122, 0,
	0, 0, 0, 0, 117, 40, 43, 0, 0, 0,
	0, 116, 0, 110, 72, 68, 0, 39, 109, 70,
	67, 0, 0, 50, 53, 83, 66, 84, 54, 75,
	74, 76, 679, 0, 79, 55, 0, 0, 0, 0,
	0, 0, 0, 123, 124, 0, 0, 0, 120, 0,
	0, 0, 77, 44, 56, 97, 59, 65, 89, 121,
	0, 93, 46, 114, 99, 652, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 666, 676, 672,
	673, 670, 671, 669, 668, 667, 678, 657, 658, 659,
	660, 662, 0, 57, 133, 134, 661, 35, 41, 62,
	0, 0, 0, 88, 51, 115, 80, 0, 0, 36,
	0, 0, 622, 0, 0, 0, 49, 621, 0, 0,
	94, 60, 132, 0, 664, 63, 665, 0, 102, 73,
	0, 674, 0, 0, 655, 656, 0, 0, 0, 0,
	0, 0, 0, 0, 615, 0, 0, 534, 644, 641,
	642, 646, 647, 648, 649, 0, 0, 0, 645, 650,
	530, 531, 0, 0, 0, 0, 619, 634, 0, 663,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 631, 632, 0, 0, 0, 0, 677,
	0, 633, 0, 0, 629, 630, 635, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	119, 0, 0, 675, 0, 0, 0, 0, 104, 52,
	0, 61, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 81, 113, 0, 82, 90, 64, 107, 87,
	112, 0, 106, 118, 95, 42, 78, 34, 86, 91,
	0, 47, 0, 125, 126, 127, 128, 129, 130, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 100, 37, 105, 111, 45, 96, 0, 0, 0,
	103, 71, 0, 58, 98, 0, 38, 0, 0, 48,
	85, 0, 0, 0, 0, 0, 0, 108, 0, 122,
	0, 0, 0, 0, 0, 117, 40, 43, 0, 0,
	0, 0, 116, 0, 110, 72, 68, 0, 39, 109,
	70, 67, 0, 0, 50, 53, 83, 66, 84, 54,
	75, 74, 76, 679, 0, 79, 55, 0, 0, 0,
	0, 0, 0, 0, 123, 124, 0, 0, 0, 120,
	0, 0, 0, 77, 44, 56, 97, 59, 65, 89,
	121, 0, 93, 46, 114, 99, 652, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 666, 676,
	672, 673, 670, 671, 669, 668, 667, 678, 657, 658,
	659, 660, 662, 0, 57, 133, 134, 661, 35, 41,
	62, 0, 0, 0, 88, 51, 115, 80, 0, 0,
	36, 0, 0, 622, 0, 0, 0, 49, 0, 0,
	0, 94, 60, 132, 0, 664, 63, 665, 0, 102,
	73, 0, 674, 0, 0, 655, 656, 0, 0, 0,
	0, 0, 0, 0, 0, 615, 0, 0, 534, 644,
	641, 642, 646, 647, 648, 649, 0, 0, 0, 645,
	650, 530, 531, 0, 0, 0, 0, 0, 634, 0,
	663, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 631, 632, 0, 0, 0, 0,
	677, 0, 633, 0, 0, 629, 630, 635, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 119, 0, 0, 675, 0, 0, 0, 0, 104,
	52, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 81, 113, 0, 82, 90, 64, 107,
	87, 112, 0, 106, 118, 95, 42, 78, 34, 86,
	91, 0, 47, 0, 125, 126, 127, 128, 129, 130,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 100, 37, 105, 111, 45, 96, 0, 0,
	0, 103, 71, 0, 58, 98, 0, 38, 0, 0,
	48, 85, 0, 0, 0, 0, 0, 0, 108, 0,
	122, 0, 0, 0, 0, 0, 117, 40, 43, 0,
	0, 0, 0, 116, 0, 110, 72, 68, 0, 39,
	109, 70, 67, 0, 0, 50, 53, 83, 66, 84,
	54, 75, 74, 76, 679, 0, 79, 55, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 0, 0, 0,
	120, 0, 0, 0, 77, 44, 56, 97, 59, 65,
	89, 121, 0, 93, 46, 114, 99, 652, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 666,
	676, 672, 673, 670, 671, 669, 668, 667, 678, 657,
	658, 659, 660, 662, 0, 57, 133, 134, 661, 35,
	41, 62, 0, 0, 0, 88, 51, 115, 80, 0,
	0, 36, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 0, 94, 60, 132, 0, 664, 63, 665, 0,
	102, 73, 0, 674, 0, 0, 655, 656, 0, 0,
	0, 0, 0, 0, 0, 0, 615, 0, 0, 534,
	644, 641, 642, 646, 647, 648, 649, 0, 0, 0,
	645, 650, 530, 531, 0, 0, 0, 0, 0, 634,
	0, 663, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 631, 632, 0, 0, 0,
	0, 677, 0, 633, 0, 0, 629, 630, 635, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 119, 0, 0, 675, 0, 0, 0, 0,
	104, 52, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 81, 113, 0, 82, 90, 64,
	107, 87, 112, 0, 106, 118, 95, 42, 78, 34,
	86, 91, 0, 47, 0, 125, 126, 127, 128, 129,
	130, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 100, 37, 105, 111, 45, 96, 0,
	0, 0, 103, 71, 0, 58, 98, 0, 38, 0,
	0, 48, 85, 0, 0, 0, 0, 0, 0, 108,
	0, 122, 0, 0, 0, 0, 0, 117, 40, 43,
	0, 0, 0, 0, 116, 0, 110, 72, 68, 0,
	39, 109, 70, 67, 0, 0, 50, 53, 83, 66,
	84, 54, 75, 74, 76, 679, 0, 79, 55, 0,
	0, 0, 0, 0, 0, 0, 123, 124, 0, 0,
	0, 120, 0, 0, 0, 77, 44, 56, 97, 59,
	65, 89, 121, 0, 93, 46, 114, 99, 652, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	666, 676, 672, 673, 670, 671, 669, 668, 667, 678,
	657, 658, 659, 660, 662, 0, 57, 133, 134, 661,
	35, 41, 62, 0, 0, 0, 88, 51, 115, 80,
	0, 0, 36, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 94, 60, 132, 0, 664, 63, 665,
	0, 102, 73, 0, 674, 0, 0, 655, 656, 0,
	0, 0, 0, 0, 0, 0, 0, 917, 0, 0,
	534, 644, 641, 642, 646, 647, 648, 649, 0, 0,
	0, 645, 650, 530, 531, 0, 0, 0, 0, 0,
	634, 0, 663, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 631, 632, 0, 0,
	0, 0, 677, 0, 633, 0, 0, 629, 630, 635,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 119, 0, 0, 675, 0, 0, 0,
	0, 104, 52, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 81, 113, 0, 82, 90,
	64, 107, 87, 112, 0, 106, 118, 95, 42, 78,
	34, 86, 91, 0, 47, 0, 125, 126, 127, 128,
	129, 130, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 100, 37, 105, 111, 45, 96,
	0, 0, 0, 103, 71, 0, 58, 98, 0, 38,
	0, 0, 48, 85, 0, 0, 0, 0, 0, 0,
	108, 0, 122, 0, 0, 0, 0, 0, 117, 40,
	43, 0, 0, 0, 0, 116, 0, 110, 72, 68,
	0, 39, 109, 70, 67, 0, 0, 50, 53, 83,
	66, 84, 54, 75, 74, 76, 679, 0, 79, 55,
	0, 0, 0, 0, 0, 0, 0, 123, 124, 0,
	0, 0, 120, 0, 0, 0, 77, 44, 56, 97,
	59, 65, 89, 121, 0, 93, 46, 114, 99, 652,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 666, 676, 672, 673, 670, 671, 669, 668, 667,
	678, 657, 658, 659, 660, 662, 0, 57, 133, 134,
	661, 35, 41, 62, 0, 0, 0, 88, 51, 115,
	80, 0, 0, 36, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 191, 94, 60, 132, 0, 0, 63,
	0, 0, 102, 73, 0, 674, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1169,
	0, 32, 0, 1167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1165, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 119, 0, 0, 0, 0, 0,
	0, 0, 104, 52, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 92, 81, 113, 0, 82,
	90, 64, 107, 87, 112, 0, 106, 118, 95, 42,
	78, 34, 86, 91, 0, 47, 0, 125, 126, 127,
	128, 129, 130, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 100, 37, 105, 111, 45,
	96, 208, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 0, 218, 219, 85, 220, 221, 222, 224, 223,
	193, 194, 195, 199, 197, 196, 198, 170, 172, 117,
	168, 171, 177, 173, 174, 175, 189, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 190, 200,
	201, 202, 203, 204, 205, 206, 207, 0, 0, 79,
	55, 0, 0, 0, 0, 0, 0, 0, 123, 124,
	0, 0, 0, 120, 0, 0, 0, 77, 44, 56,
	97, 59, 65, 89, 121, 0, 93, 46, 114, 99,
	80, 0, 0, 36, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 191, 0, 60, 132, 0, 0, 63,
	0, 0, 102, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 133,
	134, 32, 35, 169, 62, 0, 0, 0, 88, 51,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	886, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 119, 0, 0, 0, 0, 0,
	0, 0, 104, 52, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 92, 81, 113, 0, 82,
	90, 64, 107, 87, 112, 0, 106, 118, 95, 42,
	78, 34, 86, 91, 0, 47, 0, 125, 126, 127,
	128, 129, 130, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 100, 37, 105, 111, 45,
	96, 208, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 0, 218, 219, 85, 220, 221, 222, 224, 223,
	193, 884, 195, 199, 197, 196, 198, 170, 172, 117,
	168, 883, 177, 173, 174, 175, 189, 887, 179, 180,
	181, 182, 183, 184, 185, 186, 888, 889, 190, 200,
	201, 202, 203, 204, 205, 206, 207, 0, 0, 79,
	55, 885, 0, 0, 0, 0, 0, 0, 123, 124,
	0, 0, 0, 120, 0, 0, 0, 77, 44, 56,
	97, 59, 65, 89, 121, 0, 93, 46, 114, 99,
	80, 0, 0, 36, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 191, 0, 60, 132, 0, 0, 63,
	0, 0, 102, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 133,
	134, 32, 35, 169, 62, 0, 0, 0, 88, 51,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 119, 0, 0, 0, 0, 0,
	0, 0, 104, 52, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 92, 81, 113, 0, 82,
	90, 64, 107, 87, 112, 0, 106, 118, 95, 42,
	78, 34, 86, 91, 0, 47, 0, 125, 126, 127,
	128, 129, 130, 131, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 100, 37, 105, 111, 45,
	96, 208, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 0, 218, 219, 85, 220, 221, 222, 224, 223,
	193, 194, 195, 199, 197, 196, 198, 170, 172, 117,
	168, 171, 177, 173, 174, 175, 189, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 190, 200,
	201, 202, 203, 204, 205, 206, 207, 0, 0, 79,
	55, 0, 0, 0, 0, 0, 0, 0, 123, 124,
	0, 0, 0, 120, 0, 0, 0, 77, 44, 56,
	97, 59, 65, 89, 121, 0, 93, 46, 114, 99,
	80, 0, 0, 36, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 191, 0, 60, 132, 0, 0, 63,
	0, 0, 102, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 133,
	134, 32, 35, 169, 62, 0, 0, 0, 88, 51,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 119, 0, 0, 0, 0, 0,
	0, 0, 104, 52, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 92, 81, 113, 0, 82,
	90, 64, 107, 87, 112, 0, 106, 118, 95, 42,
	78, 34, 86, 91, 0, 47, 0, 125, 126, 127,
	128, 129, 130, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 100, 37, 105, 111, 45,
	96, 208, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 0, 218, 219, 85, 220, 221, 222, 224, 223,
	193, 194, 195, 199, 197, 196, 198, 170, 172, 117,
	168, 171, 177, 173, 174, 175, 189, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 190, 200,
	201, 202, 203, 204, 205, 206, 207, 0, 0, 79,
	55, 0, 0, 1382, 0, 0, 0, 0, 123, 124,
	0, 0, 0, 120, 0, 0, 0, 77, 44, 56,
	97, 59, 65, 89, 121, 0, 93, 46, 114, 99,
	80, 0, 0, 36, 0, 0, 0, 0, 1038, 0,
	49, 0, 0, 0, 0, 60, 132, 0, 0, 63,
	0, 0, 102, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 133,
	134, 32, 35, 169, 62, 0, 0, 0, 88, 51,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 1047, 1053, 1051, 0,
	0, 1048, 0, 0, 1046, 0, 0, 1055, 0, 0,
	1054, 1040, 1050, 1052, 1049, 1044, 0, 1039, 0, 1057,
	1056, 1058, 1037, 1060, 0, 0, 0, 1064, 1061, 1063,
	1062, 0, 1059, 0, 0, 0, 0, 0, 0, 0,
	0, 1041, 1042, 69, 119, 0, 0, 0, 0, 0,
	0, 0, 104, 52, 0, 61, 0, 0, 0, 0,
	0, 1043, 1045, 0, 0, 92, 81, 113, 0, 82,
	90, 64, 107, 87, 112, 0, 106, 118, 95, 42,
	78, 34, 86, 91, 0, 47, 0, 125, 126, 127,
	128, 129, 130, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 100, 37, 105, 111, 45,
	96, 0, 0, 0, 103, 71, 0, 58, 98, 0,
	38, 0, 0, 48, 85, 0, 0, 0, 0, 0,
	0, 108, 0, 122, 0, 0, 0, 0, 0, 117,
	40, 43, 0, 0, 0, 0, 116, 0, 110, 72,
	68, 0, 39, 109, 70, 67, 0, 0, 50, 53,
	83, 66, 84, 54, 75, 74, 76, 0, 0, 79,
	55, 0, 0, 0, 0, 0, 0, 0, 123, 124,
	0, 0, 0, 120, 0, 0, 0, 77, 44, 56,
	97, 59, 65, 89, 121, 0, 93, 46, 114, 99,
	0, 729, 0, 1160, 1150, 1149, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 1151, 0, 36, 0, 0,
	0, 0, 0, 0, 49, 0, 1152, 0, 0, 60,
	132, 0, 0, 63, 0, 0, 102, 73, 57, 133,
	134, 0, 35, 41, 62, 0, 0, 0, 88, 51,
	115, 0, 684, 0, 0, 534, 0, 516, 517, 518,
	519, 0, 0, 0, 0, 94, 522, 520, 530, 531,
	0, 0, 0, 0, 0, 0, 799, 0, 0, 0,
	1822, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 119, 0,
	1158, 0, 0, 0, 0, 0, 104, 52, 0, 61,
	1157, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	81, 113, 0, 82, 90, 64, 107, 87, 112, 0,
	106, 118, 95, 42, 78, 34, 86, 91, 0, 47,
	0, 125, 126, 127, 128, 129, 130, 131, 0, 0,
	0, 0, 0, 1153, 1154, 1156, 0, 0, 0, 1155,
	0, 729, 0, 1160, 1150, 1149, 0, 0, 101, 100,
	37, 105, 111, 45, 96, 1151, 0, 0, 103, 71,
	0, 58, 98, 0, 38, 0, 1152, 48, 85, 0,
	0, 0, 0, 0, 0, 108, 0, 122, 0, 0,
	0, 0, 0, 117, 40, 43, 0, 0, 0, 0,
	116, 0, 110, 72, 68, 0, 39, 109, 70, 67,
	0, 0, 50, 53, 83, 66, 84, 54, 75, 74,
	76, 0, 0, 524, 529, 0, 0, 0, 0, 0,
	1630, 0, 123, 124, 0, 0, 0, 120, 0, 0,
	0, 77, 44, 56, 97, 59, 65, 89, 121, 0,
	93, 46, 114, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 526, 0, 528, 527,
	1158, 0, 0, 0, 1161, 0, 0, 0, 0, 0,
	1157, 0, 57, 133, 134, 0, 35, 41, 62, 0,
	0, 0, 88, 51, 115, 80, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 94,
	60, 132, 0, 0, 63, 0, 0, 102, 73, 0,
	0, 0, 0, 1153, 1154, 1156, 0, 0, 0, 1155,
	0, 0, 0, 514, 0, 0, 534, 0, 516, 517,
	518, 519, 0, 0, 0, 0, 0, 522, 520, 530,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 119,
	0, 0, 0, 0, 0, 0, 0, 104, 52, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 81, 113, 0, 82, 90, 64, 107, 87, 112,
	0, 106, 118, 95, 42, 78, 34, 86, 91, 0,
	47, 0, 125, 126, 127, 128, 129, 130, 131, 0,
	0, 0, 0, 0, 1161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	100, 37, 105, 111, 45, 96, 0, 0, 0, 103,
	71, 0, 58, 98, 0, 38, 0, 0, 48, 85,
	0, 0, 0, 0, 0, 0, 108, 0, 122, 0,
	0, 0, 0, 0, 117, 40, 43, 0, 0, 0,
	0, 116, 0, 110, 72, 68, 0, 39, 109, 70,
	67, 0, 0, 50, 53, 83, 66, 84, 54, 75,
	74, 76, 0, 0, 524, 529, 0, 0, 0, 0,
	0, 0, 0, 123, 124, 0, 0, 0, 120, 0,
	0, 0, 77, 44, 56, 97, 59, 65, 89, 121,
	0, 93, 46, 114, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 49, 526, 0, 528,
	527, 60, 132, 0, 0, 63, 0, 0, 102, 73,
	0, 0, 0, 57, 133, 134, 0, 35, 41, 62,
	0, 0, 0, 88, 51, 115, 0, 32, 644, 1018,
	642, 646, 647, 648, 649, 0, 0, 0, 645, 650,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	119, 0, 0, 0, 0, 0, 0, 0, 104, 52,
	0, 61, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 81, 113, 0, 82, 90, 64, 107, 87,
	112, 0, 106, 118, 95, 42, 78, 34, 86, 91,
	0, 47, 0, 125, 126, 127, 128, 129, 130, 131,
	0, 0, 729, 0, 1160, 1150, 1149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1151, 0, 0, 0,
	101, 100, 37, 105, 111, 45, 96, 1152, 0, 0,
	103, 71, 0, 58, 98, 0, 38, 0, 0, 48,
	85, 0, 0, 0, 0, 0, 0, 108, 0, 122,
	0, 0, 0, 0, 0, 117, 40, 43, 0, 0,
	0, 0, 116, 0, 110, 72, 68, 0, 39, 109,
	70, 67, 0, 0, 50, 53, 83, 66, 84, 54,
	75, 74, 76, 0, 0, 79, 55, 0, 0, 0,
	0, 0, 0, 0, 123, 124, 0, 0, 0, 120,
	0, 0, 0, 77, 44, 56, 97, 59, 65, 89,
	121, 0, 93, 46, 114, 99, 0, 0, 0, 0,
	80, 0, 0, 36, 0, 0, 0, 0, 0, 0,
	49, 1158, 0, 0, 0, 60, 132, 0, 0, 63,
	0, 1157, 102, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 57, 133, 134, 0, 35, 41,
	62, 32, 0, 31, 88, 51, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 1153, 1154, 1156, 0, 0, 0,
	1155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 69, 119, 0, 0, 0, 260, 0,
	259, 0, 261, 262, 0, 61, 0, 0, 263, 266,
	0, 0, 0, 0, 0, 92, 81, 113, 0, 82,
	90, 64, 107, 87, 112, 0, 106, 118, 95, 42,
	78, 34, 86, 91, 0, 47, 0, 125, 126, 127,
	128, 129, 130, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 100, 37, 105, 111, 45,
	96, 0, 0, 0, 103, 71, 0, 58, 98, 0,
	38, 0, 0, 48, 85, 1161, 0, 0, 0, 0,
	0, 108, 0, 122, 0, 0, 0, 0, 0, 117,
	40, 43, 0, 0, 0, 0, 116, 0, 110, 72,
	68, 0, 39, 109, 70, 67, 0, 0, 50, 53,
	83, 66, 84, 54, 75, 74, 76, 0, 0, 79,
	55, 0, 0, 0, 0, 0, 0, 0, 123, 124,
	0, 0, 0, 120, 0, 0, 0, 77, 44, 56,
	97, 59, 65, 89, 121, 0, 93, 46, 114, 99,
	0, 0, 0, 0, 80, 0, 0, 36, 0, 1100,
	0, 0, 0, 0, 49, 0, 0, 0, 0, 60,
	132, 0, 0, 63, 0, 0, 102, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 133,
	134, 0, 35, 41, 62, 32, 0, 1102, 88, 51,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 777, 776, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 778,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 119, 0,
	0, 0, 0, 0, 0, 0, 104, 52, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	81, 113, 0, 82, 90, 64, 107, 87, 112, 0,
	106, 118, 95, 42, 78, 34, 86, 91, 0, 47,
	0, 125, 126, 127, 128, 129, 130, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 100,
	37, 105, 111, 45, 96, 0, 0, 0, 103, 71,
	0, 58, 98, 0, 38, 0, 0, 48, 85, 0,
	0, 0, 0, 0, 0, 108, 0, 122, 0, 0,
	0, 0, 0, 117, 40, 43, 0, 0, 0, 0,
	116, 0, 110, 72, 68, 0, 39, 109, 70, 67,
	0, 0, 50, 53, 83, 66, 84, 54, 75, 74,
	76, 0, 0, 79, 55, 0, 0, 0, 0, 0,
	0, 0, 123, 124, 0, 0, 0, 120, 0, 0,
	0, 77, 44, 56, 97, 59, 65, 89, 121, 0,
	93, 46, 114, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 60, 132, 0, 0, 63, 0, 0, 102, 73,
	0, 0, 57, 133, 134, 0, 35, 41, 62, 0,
	0, 0, 88, 51, 115, 1169, 0, 32, 0, 1167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1165, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	119, 0, 0, 0, 0, 0, 0, 0, 104, 52,
	0, 61, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 81, 113, 0, 82, 90, 64, 107, 87,
	112, 0, 106, 118, 95, 42, 78, 34, 86, 91,
	0, 47, 0, 125, 126, 127, 128, 129, 130, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 100, 37, 105, 111, 45, 96, 0, 0, 0,
	103, 71, 0, 58, 98, 0, 38, 0, 0, 48,
	85, 0, 0, 0, 0, 0, 0, 108, 0, 122,
	0, 0, 0, 0, 0, 117, 40, 43, 0, 0,
	0, 0, 116, 0, 110, 72, 68, 0, 39, 109,
	70, 67, 0, 0, 50, 53, 83, 66, 84, 54,
	75, 74, 76, 0, 0, 79, 55, 0, 0, 0,
	0, 0, 0, 0, 123, 124, 0, 0, 0, 120,
	0, 0, 0, 77, 44, 56, 97, 59, 65, 89,
	121, 0, 93, 46, 114, 99, 0, 729, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 36, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 60, 132, 0, 0, 63, 0,
	0, 102, 73, 0, 57, 133, 134, 0, 35, 41,
	62, 0, 0, 0, 88, 51, 115, 615, 0, 0,
	145, 0, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 119, 0, 0, 0, 0, 0, 0,
	0, 104, 52, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 81, 113, 0, 82, 90,
	64, 107, 87, 112, 0, 106, 118, 95, 42, 78,
	34, 86, 91, 0, 47, 0, 125, 126, 127, 128,
	129, 130, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 100, 37, 105, 111, 45, 96,
	0, 0, 0, 103, 71, 0, 58, 98, 0, 38,
	0, 0, 48, 85, 0, 0, 0, 0, 0, 0,
	108, 0, 122, 0, 0, 0, 0, 0, 117, 40,
	43, 0, 0, 0, 0, 116, 0, 110, 72, 68,
	0, 39, 109, 70, 67, 0, 0, 50, 53, 83,
	66, 84, 54, 75, 74, 76, 0, 0, 79, 55,
	0, 0, 0, 0, 0, 0, 0, 123, 124, 0,
	0, 0, 120, 0, 0, 0, 77, 44, 56, 97,
	59, 65, 89, 121, 0, 93, 46, 114, 99, 0,
	0, 0, 0, 80, 0, 0, 36, 0, 1574, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 60, 132,
	0, 0, 63, 0, 0, 102, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 133, 134,
	0, 35, 41, 62, 145, 0, 1576, 88, 51, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 119, 0, 0,
	0, 0, 0, 0, 0, 104, 52, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 81,
	113, 0, 82, 90, 64, 107, 87, 112, 0, 106,
	118, 95, 42, 78, 34, 86, 91, 0, 47, 0,
	125, 126, 127, 128, 129, 130, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 100, 37,
	105, 111, 45, 96, 0, 0, 0, 103, 71, 0,
	58, 98, 0, 38, 0, 0, 48, 85, 0, 0,
	0, 0, 0, 0, 108, 0, 122, 0, 0, 0,
	0, 0, 117, 40, 43, 0, 0, 0, 0, 116,
	0, 110, 72, 68, 0, 39, 109, 70, 67, 0,
	0, 50, 53, 83, 66, 84, 54, 75, 74, 76,
	0, 0, 79, 55, 0, 0, 0, 0, 0, 0,
	0, 123, 124, 0, 0, 0, 120, 0, 0, 0,
	77, 44, 56, 97, 59, 65, 89, 121, 0, 93,
	46, 114, 99, 0, 729, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 60, 132, 0, 0, 63, 0, 0, 102, 73,
	0, 57, 133, 134, 0, 35, 41, 62, 0, 0,
	0, 88, 51, 115, 615, 0, 0, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	119, 0, 0, 0, 0, 0, 0, 0, 104, 52,
	0, 61, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 81, 113, 0, 82, 90, 64, 107, 87,
	112, 0, 106, 118, 95, 42, 78, 34, 86, 91,
	0, 47, 0, 125, 126, 127, 128, 129, 130, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 100, 37, 105, 111, 45, 96, 0, 0, 0,
	103, 71, 0, 58, 98, 0, 38, 0, 0, 48,
	85, 0, 0, 0, 0, 0, 0, 108, 0, 122,
	0, 0, 0, 0, 0, 117, 40, 43, 0, 0,
	0, 0, 116, 0, 110, 72, 68, 0, 39, 109,
	70, 67, 0, 0, 50, 53, 83, 66, 84, 54,
	75, 74, 76, 0, 0, 79, 55, 0, 0, 0,
	0, 0, 0, 0, 123, 124, 0, 0, 0, 120,
	0, 0, 0, 77, 44, 56, 97, 59, 65, 89,
	121, 0, 93, 46, 114, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 36, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 60, 132, 0, 0, 63, 0,
	0, 102, 73, 0, 57, 133, 134, 0, 35, 41,
	62, 0, 0, 0, 88, 51, 115, 615, 0, 0,
	145, 0, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 119, 0, 0, 0, 0, 0, 0,
	0, 104, 52, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 81, 113, 0, 82, 90,
	64, 107, 87, 112, 0, 106, 118, 95, 42, 78,
	34, 86, 91, 0, 47, 0, 125, 126, 127, 128,
	129, 130, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 100, 37, 105, 111, 45, 96,
	0, 0, 0, 103, 71, 0, 58, 98, 0, 38,
	0, 0, 48, 85, 0, 0, 0, 0, 0, 0,
	108, 0, 122, 0, 0, 0, 0, 0, 117, 40,
	43, 0, 0, 0, 0, 116, 0, 110, 72, 68,
	0, 39, 109, 70, 67, 0, 0, 50, 53, 83,
	66, 84, 54, 75, 74, 76, 0, 0, 79, 55,
	0, 0, 0, 0, 0, 0, 0, 123, 124, 0,
	0, 0, 120, 0, 0, 0, 77, 44, 56, 97,
	59, 65, 89, 121, 0, 93, 46, 114, 99, 0,
	0, 0, 0, 80, 0, 0, 36, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 60, 132,
	0, 0, 63, 0, 0, 102, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 133, 134,
	0, 35, 41, 62, 145, 0, 147, 88, 51, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 119, 0, 0,
	0, 0, 0, 0, 0, 104, 52, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 81,
	113, 0, 82, 90, 64, 107, 87, 112, 0, 106,
	118, 95, 42, 78, 34, 86, 91, 0, 47, 0,
	125, 126, 127, 128, 129, 130, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 100, 37,
	105, 111, 45, 96, 0, 0, 0, 103, 71, 0,
	58, 98, 0, 38, 0, 0, 48, 85, 0, 0,
	0, 0, 0, 0, 108, 0, 122, 0, 0, 0,
	0, 0, 117, 40, 43, 0, 0, 0, 0, 116,
	0, 110, 72, 68, 0, 39, 109, 70, 67, 0,
	0, 50, 53, 83, 66, 84, 54, 75, 74, 76,
	0, 0, 79, 55, 0, 0, 0, 0, 0, 0,
	0, 123, 124, 0, 0, 0, 120, 0, 0, 0,
	77, 44, 56, 97, 59, 65, 89, 121, 0, 93,
	46, 114, 99, 0, 0, 0, 0, 80, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 49, 1592, 0,
	0, 0, 60, 132, 0, 0, 63, 0, 0, 102,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 133, 134, 0, 35, 41, 62, 32, 0,
	1591, 88, 51, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1618, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 119, 0, 0, 0, 0, 0, 0, 0, 104,
	52, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 81, 113, 0, 82, 90, 64, 107,
	87, 112, 0, 106, 118, 95, 42, 78, 34, 86,
	91, 0, 47, 0, 125, 126, 127, 128, 129, 130,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 100, 37, 105, 111, 45, 96, 0, 0,
	0, 103, 71, 0, 58, 98, 0, 38, 0, 0,
	48, 85, 0, 0, 0, 0, 0, 0, 108, 0,
	122, 0, 0, 0, 0, 0, 117, 40, 43, 0,
	0, 0, 0, 116, 0, 110, 72, 68, 0, 39,
	109, 70, 67, 0, 0, 50, 53, 83, 66, 84,
	54, 75, 74, 76, 0, 0, 79, 55, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 0, 0, 0,
	120, 0, 0, 0, 77, 44, 56, 97, 59, 65,
	89, 121, 0, 93, 46, 114, 99, 0, 0, 0,
	0, 80, 0, 0, 36, 0, 1574, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 60, 132, 0, 0,
	63, 0, 0, 102, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 133, 134, 0, 35,
	41, 62, 145, 0, 1576, 88, 51, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 119, 0, 0, 0, 0,
	0, 0, 0, 104, 52, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 81, 113, 0,
	1572, 90, 64, 107, 87, 112, 0, 106, 118, 95,
	42, 78, 34, 86, 91, 0, 47, 0, 125, 126,
	127, 128, 129, 130, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 100, 37, 105, 111,
	45, 96, 0, 0, 0, 103, 71, 0, 58, 98,
	0, 38, 0, 0, 48, 85, 0, 0, 0, 0,
	0, 0, 108, 0, 122, 0, 0, 0, 0, 0,
	117, 40, 43, 0, 0, 0, 0, 116, 0, 110,
	72, 68, 0, 39, 109, 70, 67, 0, 0, 50,
	53, 83, 66, 84, 54, 75, 74, 76, 0, 0,
	79, 55, 0, 0, 0, 0, 0, 0, 0, 123,
	124, 0, 0, 0, 120, 0, 0, 0, 77, 44,
	56, 97, 59, 65, 89, 121, 0, 93, 46, 114,
	99, 0, 0, 0, 0, 80, 0, 0, 36, 0,
	0, 0, 0, 0, 1546, 49, 0, 0, 0, 0,
	60, 132, 0, 0, 63, 0, 0, 102, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 57,
	133, 134, 0, 35, 41, 62, 145, 0, 147, 88,
	51, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 119,
	0, 0, 0, 0, 0, 0, 0, 104, 52, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 81, 113, 0, 82, 90, 64, 107, 87, 112,
	0, 106, 118, 95, 42, 78, 34, 86, 91, 0,
	47, 0, 125, 126, 127, 128, 129, 130, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	100, 37, 105, 111, 45, 96, 0, 0, 0, 103,
	71, 0, 58, 98, 0, 38, 0, 0, 48, 85,
	0, 0, 0, 0, 0, 0, 108, 0, 122, 0,
	0, 0, 0, 0, 117, 40, 43, 0, 0, 0,
	0, 116, 0, 110, 72, 68, 0, 39, 109, 70,
	67, 0, 0, 50, 53, 83, 66, 84, 54, 75,
	74, 76, 0, 0, 79, 55, 0, 0, 0, 0,
	0, 0, 0, 123, 124, 0, 0, 0, 120, 0,
	0, 0, 77, 44, 56, 97, 59, 65, 89, 121,
	0, 93, 46, 114, 99, 0, 0, 0, 1442, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	60, 132, 0, 0, 63, 0, 0, 102, 73, 0,
	0, 0, 0, 57, 133, 134, 0, 35, 41, 62,
	0, 0, 0, 88, 51, 115, 145, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 119,
	0, 0, 0, 0, 0, 0, 0, 104, 52, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 81, 113, 0, 82, 90, 64, 107, 87, 112,
	0, 106, 118, 95, 42, 78, 34, 86, 91, 0,
	47, 0, 125, 126, 127, 128, 129, 130, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	100, 37, 105, 111, 45, 96, 0, 0, 0, 103,
	71, 0, 58, 98, 0, 38, 0, 0, 48, 85,
	0, 0, 0, 0, 0, 0, 108, 0, 122, 0,
	0, 0, 0, 0, 117, 40, 43, 0, 0, 0,
	0, 116, 0, 110, 72, 68, 0, 39, 109, 70,
	67, 0, 0, 50, 53, 83, 66, 84, 54, 75,
	74, 76, 0, 0, 79, 55, 0, 0, 0, 0,
	0, 0, 0, 123, 124, 0, 0, 0, 120, 0,
	0, 0, 77, 44, 56, 97, 59, 65, 89, 121,
	0, 93, 46, 114, 99, 0, 0, 0, 0, 80,
	0, 0, 36, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 60, 132, 0, 0, 63, 0,
	0, 102, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 133, 134, 0, 35, 41, 62,
	534, 0, 147, 88, 51, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 119, 0, 0, 0, 0, 0, 0,
	0, 104, 52, 0, 61, 0, 0, 0, 595, 0,
	0, 0, 0, 0, 92, 81, 113, 0, 82, 90,
	64, 107, 87, 112, 0, 106, 118, 95, 42, 78,
	34, 86, 91, 0, 47, 0, 125, 126, 127, 128,
	129, 130, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 100, 37, 105, 111, 45, 96,
	0, 0, 0, 103, 71, 0, 58, 98, 0, 38,
	0, 0, 48, 85, 0, 0, 0, 0, 0, 0,
	108, 0, 122, 0, 0, 0, 0, 0, 117, 40,
	43, 0, 0, 0, 0, 116, 0, 110, 72, 68,
	0, 39, 109, 70, 67, 0, 0, 50, 53, 83,
	66, 84, 54, 75, 74, 76, 0, 0, 79, 55,
	0, 0, 0, 0, 0, 0, 0, 123, 124, 0,
	0, 0, 120, 0, 0, 0, 77, 44, 56, 97,
	59, 65, 89, 121, 0, 93, 46, 114, 99, 0,
	0, 0, 0, 80, 0, 0, 36, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 60, 132,
	0, 0, 63, 0, 0, 102, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 133, 134,
	0, 35, 41, 62, 145, 0, 147, 88, 51, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 119, 0, 0,
	0, 0, 0, 0, 0, 104, 52, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 81,
	113, 0, 82, 90, 64, 107, 87, 112, 0, 106,
	118, 95, 42, 78, 34, 86, 91, 0, 47, 0,
	125, 126, 127, 128, 129, 130, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 100, 37,
	105, 111, 45, 96, 0, 0, 0, 103, 71, 0,
	58, 98, 0, 38, 0, 0, 48, 85, 0, 0,
	0, 0, 0, 0, 108, 0, 122, 0, 0, 0,
	0, 0, 117, 40, 43, 0, 0, 0, 0, 116,
	0, 110, 72, 68, 0, 39, 109, 70, 67, 0,
	0, 50, 53, 83, 66, 84, 54, 75, 74, 76,
	0, 0, 79, 55, 0, 0, 0, 0, 0, 0,
	0, 123, 124, 0, 0, 0, 120, 0, 0, 0,
	77, 44, 56, 97, 59, 65, 89, 121, 247, 93,
	46, 114, 99, 80, 0, 0, 36, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 60, 132,
	0, 0, 63, 0, 0, 102, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 57, 133, 134, 32, 35, 41, 62, 0, 0,
	0, 88, 51, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 119, 0, 0,
	0, 0, 0, 0, 0, 104, 52, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 81,
	113, 0, 82, 90, 64, 107, 87, 112, 0, 106,
	118, 95, 42, 78, 34, 86, 91, 0, 47, 0,
	125, 126, 127, 128, 129, 130, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 101, 100, 37,
	105, 111, 45, 96, 0, 0, 0, 103, 71, 0,
	58, 98, 0, 38, 0, 0, 48, 85, 0, 0,
	0, 0, 0, 0, 108, 0, 122, 0, 0, 0,
	0, 0, 117, 40, 43, 0, 0, 0, 0, 116,
	0, 110, 72, 68, 0, 39, 109, 70, 67, 0,
	0, 50, 53, 83, 66, 84, 54, 75, 74, 76,
	0, 0, 79, 55, 0, 0, 0, 0, 0, 0,
	0, 123, 124, 0, 0, 0, 120, 0, 0, 0,
	77, 44, 56, 97, 59, 65, 89, 121, 0, 93,
	46, 114, 99, 0, 0, 0, 0, 80, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	0, 0, 60, 132, 0, 0, 63, 0, 0, 102,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 133, 134, 0, 35, 41, 62, 534, 0,
	147, 88, 51, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 119, 0, 0, 0, 0, 0, 0, 0, 104,
	52, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 81, 113, 0, 82, 90, 64, 107,
	87, 112, 0, 106, 118, 95, 42, 78, 34, 86,
	91, 0, 47, 0, 125, 126, 127, 128, 129, 130,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 100, 37, 105, 111, 45, 96, 0, 0,
	0, 103, 71, 0, 58, 98, 0, 38, 0, 0,
	48, 85, 0, 0, 0, 0, 0, 0, 108, 0,
	122, 0, 0, 0, 0, 0, 117, 40, 43, 0,
	0, 0, 0, 116, 0, 110, 72, 68, 0, 39,
	109, 70, 67, 0, 0, 50, 53, 83, 66, 84,
	54, 75, 74, 76, 0, 0, 79, 55, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 0, 0, 0,
	120, 0, 0, 0, 77, 44, 56, 97, 59, 65,
	89, 121, 0, 93, 46, 114, 99, 80, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	0, 0, 60, 132, 0, 0, 63, 0, 0, 102,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 133, 134, 32, 35,
	41, 62, 0, 0, 0, 88, 51, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 119, 0, 0, 0, 0, 0, 0, 0, 104,
	52, 0, 61, 0, 0, 0, 741, 0, 0, 0,
	0, 0, 92, 81, 113, 0, 82, 90, 64, 107,
	87, 112, 0, 106, 118, 95, 42, 78, 34, 86,
	91, 0, 47, 0, 125, 126, 127, 128, 129, 130,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 100, 37, 105, 111, 45, 96, 0, 0,
	0, 103, 71, 0, 58, 98, 0, 38, 0, 0,
	48, 85, 0, 0, 0, 0, 0, 0, 108, 0,
	122, 0, 0, 0, 0, 0, 117, 40, 43, 0,
	0, 0, 0, 116, 0, 110, 72, 68, 0, 39,
	109, 70, 67, 0, 0, 50, 53, 83, 66, 84,
	54, 75, 74, 76, 0, 0, 79, 55, 0, 0,
	0, 0, 0, 0, 0, 123, 124, 0, 0, 0,
	120, 0, 0, 0, 77, 44, 56, 97, 59, 65,
	89, 121, 0, 93, 46, 114, 99, 0, 0, 0,
	0, 80, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 60, 132, 0, 0,
	63, 0, 0, 102, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 133, 134, 0, 35,
	41, 62, 145, 0, 147, 88, 51, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 119, 0, 0, 0, 0,
	0, 0, 0, 104, 52, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 81, 113, 0,
	82, 90, 64, 107, 87, 112, 0, 106, 118, 95,
	42, 78, 34, 86, 91, 0, 47, 0, 125, 126,
	127, 128, 129, 130, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 100, 37, 105, 111,
	45, 96, 0, 0, 0, 103, 71, 0, 58, 98,
	0, 38, 0, 0, 48, 85, 0, 0, 0, 0,
	0, 0, 108, 0, 122, 0, 0, 0, 0, 0,
	117, 40, 43, 0, 0, 0, 0, 116, 0, 110,
	72, 68, 0, 39, 109, 70, 67, 0, 0, 50,
	53, 83, 66, 84, 54, 75, 74, 76, 0, 0,
	79, 55, 0, 0, 0, 0, 0, 0, 0, 123,
	124, 0, 0, 0, 120, 0, 0, 0, 77, 44,
	56, 97, 59, 65, 89, 121, 0, 93, 46, 114,
	99, 0, 0, 0, 0, 80, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	60, 132, 0, 0, 63, 0, 0, 102, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 57,
	133, 134, 0, 35, 41, 62, 145, 0, 1576, 88,
	51, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 119,
	0, 0, 0, 0, 0, 0, 0, 104, 52, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 81, 113, 0, 82, 90, 64, 107, 87, 112,
	0, 106, 118, 95, 42, 78, 34, 86, 91, 0,
	47, 0, 125, 126, 127, 128, 129, 130, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	100, 37, 105, 111, 45, 96, 0, 0, 0, 103,
	71, 0, 58, 98, 0, 38, 0, 0, 48, 85,
	0, 0, 0, 0, 0, 0, 108, 0, 122, 0,
	0, 0, 0, 0, 117, 40, 43, 0, 0, 0,
	0, 116, 0, 110, 72, 68, 0, 39, 109, 70,
	67, 0, 0, 50, 53, 83, 66, 84, 54, 75,
	74, 76, 0, 0, 79, 55, 0, 0, 0, 0,
	0, 0, 0, 123, 124, 0, 0, 0, 120, 0,
	0, 0, 77, 44, 56, 97, 59, 65, 89, 121,
	0, 93, 46, 114, 99, 80, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	60, 132, 0, 0, 63, 0, 0, 102, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 133, 134, 32, 35, 41, 62,
	0, 0, 0, 88, 51, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 119,
	0, 0, 0, 0, 0, 0, 0, 104, 52, 0,
	61, 0, 0, 0, 595, 0, 0, 0, 0, 0,
	92, 81, 113, 0, 82, 90, 64, 107, 87, 112,
	0, 106, 118, 95, 42, 78, 34, 86, 91, 0,
	47, 0, 125, 126, 127, 128, 129, 130, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	100, 37, 105, 111, 45, 96, 0, 0, 0, 103,
	71, 0, 58, 98, 0, 38, 0, 0, 48, 85,
	0, 0, 0, 0, 0, 0, 108, 0, 122, 0,
	0, 0, 0, 0, 117, 40, 43, 0, 0, 0,
	0, 116, 0, 110, 72, 68, 0, 39, 109, 70,
	67, 0, 0, 50, 53, 83, 66, 84, 54, 75,
	74, 76, 0, 0, 79, 55, 0, 0, 0, 0,
	0, 0, 0, 123, 124, 0, 0, 0, 120, 0,
	0, 0, 77, 44, 56, 97, 59, 65, 89, 121,
	0, 93, 46, 114, 99, 0, 0, 0, 0, 80,
	0, 0, 36, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 60, 132, 0, 0, 63, 0,
	0, 102, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 133, 134, 0, 35, 41, 62,
	32, 0, 1102, 88, 51, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 119, 0, 0, 0, 0, 0, 0,
	0, 104, 52, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 81, 113, 0, 82, 90,
	64, 107, 87, 112, 0, 106, 118, 95, 42, 78,
	34, 86, 91, 0, 47, 0, 125, 126, 127, 128,
	129, 130, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 100, 37, 105, 111, 45, 96,
	0, 0, 0, 103, 71, 0, 58, 98, 0, 38,
	0, 0, 48, 85, 0, 0, 0, 0, 0, 0,
	108, 0, 122, 0, 0, 0, 0, 0, 117, 40,
	43, 0, 0, 0, 0, 116, 0, 110, 72, 68,
	0, 39, 109, 70, 67, 0, 0, 50, 53, 83,
	66, 84, 54, 75, 74, 76, 0, 0, 79, 55,
	0, 0, 0, 0, 0, 0, 0, 123, 124, 0,
	0, 0, 120, 0, 0, 0, 77, 44, 56, 97,
	59, 65, 89, 121, 0, 93, 46, 114, 99, 80,
	0, 0, 36, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 60, 132, 0, 0, 63, 0,
	0, 102, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 133, 134,
	32, 35, 41, 62, 0, 0, 0, 88, 51, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 119, 0, 0, 142, 0, 0, 0,
	0, 104, 52, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 81, 113, 0, 82, 90,
	64, 107, 87, 112, 0, 106, 118, 95, 42, 78,
	34, 86, 91, 0, 47, 0, 125, 126, 127, 128,
	129, 130, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 100, 37, 105, 111, 45, 96,
	0, 0, 0, 103, 71, 0, 58, 98, 0, 38,
	0, 0, 48, 85, 0, 0, 0, 0, 0, 0,
	108, 0, 122, 0, 0, 0, 0, 0, 117, 40,
	43, 0, 0, 0, 0, 116, 0, 110, 72, 68,
	0, 39, 109, 70, 67, 0, 0, 50, 53, 83,
	66, 84, 54, 75, 74, 76, 0, 0, 79, 55,
	0, 0, 0, 0, 0, 0, 0, 123, 124, 0,
	0, 0, 120, 0, 0, 0, 77, 44, 56, 97,
	59, 65, 89, 121, 0, 93, 46, 114, 99, 0,
	0, 0, 0, 80, 0, 0, 36, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 60, 132,
	0, 0, 63, 0, 0, 102, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 133, 134,
	0, 35, 41, 62, 32, 0, 31, 88, 51, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 119, 0, 0,
	0, 0, 0, 0, 0, 104, 52, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 81,
	113, 0, 82, 90, 64, 107, 87, 112, 0, 106,
	118, 95, 42, 78, 34, 86, 91, 0, 47, 0,
	125, 126, 127, 128, 129, 130, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 100, 37,
	105, 111, 45, 96, 0, 0, 0, 103, 71, 0,
	58, 98, 0, 38, 0, 0, 48, 85, 0, 0,
	0, 0, 0, 0, 108, 0, 122, 0, 0, 0,
	0, 0, 117, 40, 43, 0, 0, 0, 0, 116,
	0, 110, 72, 68, 0, 39, 109, 70, 67, 0,
	0, 50, 53, 83, 66, 84, 54, 75, 74, 76,
	0, 0, 79, 55, 0, 0, 0, 0, 0, 0,
	0, 123, 124, 0, 0, 0, 120, 0, 0, 0,
	77, 44, 56, 97, 59, 65, 89, 121, 0, 93,
	46, 114, 99, 80, 0, 0, 36, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 60, 132,
	0, 0, 63, 0, 0, 102, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 133, 134, 32, 35, 41, 62, 0, 0,
	0, 88, 51, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 119, 0, 0,
	0, 0, 0, 0, 0, 104, 52, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 81,
	113, 0, 82, 90, 64, 107, 87, 112, 0, 106,
	118, 95, 42, 78, 34, 86, 91, 0, 47, 0,
	125, 126, 127, 128, 129, 130, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 100, 37,
	105, 111, 45, 96, 0, 0, 0, 103, 71, 0,
	58, 98, 0, 38, 0, 0, 48, 85, 0, 0,
	0, 0, 0, 0, 108, 0, 122, 0, 0, 0,
	0, 0, 117, 40, 43, 0, 0, 0, 0, 116,
	0, 110, 72, 68, 0, 39, 109, 70, 67, 0,
	0, 50, 53, 83, 66, 84, 54, 75, 74, 76,
	0, 0, 79, 55, 0, 0, 0, 0, 0, 0,
	0, 123, 124, 0, 0, 0, 120, 0, 0, 0,
	77, 44, 56, 97, 59, 65, 89, 121, 0, 93,
	46, 114, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 133, 134, 0, 35, 41, 62, 0, 0,
	0, 88, 51, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94,
}

var yyPact = [...]int16{
	391, -1000, -262, -1000, -1000, 1139, 596, 318, -1000, -1000,
	-1000, 18965, 342, 341, 218, 329, 19245, 18681, 17553, 348,
	320, -1000, -198, -155, -1000, -64, 346, -1000, 945, -1000,
	11212, 11212, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 16705, 19245, 320, 146, 320,
	1159, 420, 609, 1286, 427, -1000, -1000, -1000, 320, 17553,
	603, -1000, -1000, -1000, -1000, 16425, 219, 12692, 388, -138,
	31, -1000, -1000, -1000, -1000, -1000, 1057, -1000, -1000, -1000,
	1057, 264, 1136, 1057, 1136, -1000, 1057, 1136, 74, 74,
	74, 74, 74, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1134, 1125, -1000, 1057, 1057, 1057, 1057, 1057, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1104, 271,
	1104, 1074, 1074, -1000, -1000, 388, 1146, 17553, 19245, 1158,
	17553, -218, 17553, 17553, 1350, 17553, -1000, -1000, -1000, 171,
	1253, 11212, 6328, 17553, -1000, 1247, 354, 17553, 5590, 1049,
	1217, -1000, -1000, -1000, -1000, -1000, -1000, 1120, 629, 19245,
	272, 268, 355, 337, 869, -1000, -1000, -1000, 681, -1000,
	19245, -1000, 1361, -1000, -1000, 269, -1000, 263, 591, 805,
	17553, 1108, 192, 1106, 12117, 773, -1000, -269, -1000, 16,
	-1000, -1000, 734, 74, 74, 1057, 74, 686, 74, 74,
	-1000, -1000, 444, 1223, 444, 444, 444, 444, 796, 796,
	-86, -86, -1000, -1000, -1000, -1000, 765, 1104, -1000, -1000,
	-1000, 764, -1000, 17553, 19245, 1102, 1157, 17553, 1278, 326,
	-1000, -1000, 1273, 1268, 1012, -1000, -1000, 169, -1000, 347,
	-1000, 19245, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1147, -1000, 297, 349, 5959, -1000,
	-1000, -1000, -1000, 219, -1000, 18117, -1000, 1355, 1300, 295,
	-3, -1000, 859, 840, -1000, 812, -1000, -1000, 40, -1000,
	-160, 103, 10, -1000, -1000, 1051, -1000, 1095, 9048, 1262,
	-1000, 1229, 748, -1000, 11786, -1000, -222, -1000, -1000, -1000,
	-222, -1000, -1000, -1000, 1051, -1000, 1092, 1091, -1000, 1089,
	-1000, -1000, 1051, 424, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 993, 444, 444, 74, 444, 990, 989, 444, 444,
	-1000, -1000, 808, 510, -1000, -1000, -1000, -1000, 942, -1000,
	940, -1000, 98, 95, -1000, 1043, -1000, 935, 1048, 1156,
	16141, 17553, 1090, 1065, 320, 1065, 1299, 205, 17553, 1350,
	17269, 1350, 347, 19245, 265, 19245, -1000, -1000, 307, 3376,
	-1000, 5590, 933, -1000, 255, 1057, 407, 407, -176, 260,
	256, 1051, -1000, -1000, -1000, -1000, -172, -1000, -1000, -1000,
	-1000, 591, -1000, 1089, 9048, -1000, 17269, 783, -1000, 9048,
	73, 1051, 1051, -1000, -1000, 419, -1000, -1000, -1000, 9710,
	9710, 9710, 9710, 9710, 9710, 9710, -1000, -1000, -1000, -1000,
	41, -222, -1000, 800, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 422, 417, -1000, 8717, 1051, 1051, 1051, 1051, 1051,
	1051, 1051, 1051, 9048, 1051, 1211, 1051, 1051, 1051, 1051,
	1051, 1051, 1051, 1051, 2089, 1051, 1051, 1051, 1051, -1000,
	153, -1000, 1030, 988, 2202, 985, -1000, 10652, -1000, 737,
	-1000, 673, -1000, 665, 984, 7712, 6697, -1000, -1000, -1000,
	444, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 74,
	794, 74, 26, 18, 744, -1000, 742, 16141, 19245, 17553,
	983, 1029, -1000, 253, 1088, 17269, -1000, 1315, 1366, -1000,
	1065, 17553, -1000, 323, 1284, -1000, -1000, 1298, -1000, 1027,
	-1000, -1000, 1016, 1350, 1087, 19245, -1000, -1000, 259, 19245,
	-1000, -1000, -1000, -1000, -1000, 939, 18117, 1249, -1000, -1000,
	-1000, 625, -1000, -1000, 620, 208, 624, -1000, 19245, -172,
	9048, -1000, 1051, 685, 929, -135, 9048, 9048, 797, 477,
	9710, 654, 541, 9710, 9710, 9710, 9710, 9710, 9710, 9710,
	9710, 9710, 9710, 9710, 9710, 9710, 9710, 9710, 792, 2631,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 775, -1000, 1065, 12408, 12408, 23, 23, 23,
	23, 23, 23, 11492, -1000, -265, -1000, -1000, 5221, 6697,
	737, 927, 738, 8717, 8374, 8374, 7050, 9048, 9710, 16989,
	8374, 1291, 594, 738, 16989, 1297, -1000, 737, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 84, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 8374, 8374, 8374, 8374, 9048, 1085, 736, -1000, 980,
	-222, 1051, -1000, 258, 194, -1000, -1000, 74, -1000, -1000,
	-138, -1000, -1000, -1000, -1000, -1000, 737, 8374, 921, 927,
	-1000, 12976, -1000, 412, 1051, -1000, 444, -1000, 444, -1000,
	-1000, 977, 969, 956, 1084, 1082, -208, 734, 16141, 923,
	1303, 1312, 1065, 1285, 1200, -1000, 737, 1261, 19245, -1000,
	-1000, -1000, -1000, -1000, 190, 592, 19245, 7471, 974, -1000,
	13268, 1079, 1078, 310, 1153, 1226, 183, -1000, 688, 547,
	787, 542, 538, 536, 532, 528, 502, 497, -1000, -1000,
	-1000, -1000, -1000, 1359, -1000, -1000, -1000, 1346, 1076, -1000,
	1075, 685, 9048, 224, 1155, -1000, -1000, 477, 534, -1000,
	-1000, 771, -1000, -1000, 2438, -1000, -1000, -1000, -1000, 654,
	9710, 9710, 9710, 2078, 2438, 2313, 2004, 2243, 23, 115,
	115, 19, 19, 19, 19, 19, 34, 34, -1000, -1000,
	-1000, -1000, -84, -1000, 1057, 271, 737, -1000, -222, 784,
	-1000, -1000, 683, 1051, 400, -1000, -1000, -1000, 9048, -1000,
	737, 921, 12976, 921, 745, 1026, 10041, 1057, -1000, 1057,
	1074, -1000, -1000, 124, 1057, 116, -1000, -1000, -1000, -1000,
	1074, -1000, -1000, -1000, -1000, -1000, 1057, 1057, -1000, -1000,
	1057, 1057, -1000, 1057, 1057, 756, 509, 2112, 1000, -1000,
	396, 921, 8374, -1000, 589, -1000, 9048, 737, 17553, -1000,
	-1000, 921, 737, 1023, 921, 921, 732, -1000, 938, 917,
	1057, -1000, -1000, -1000, 921, 8374, -247, -1000, -1000, -1000,
	18401, -1000, -1000, 3007, 8374, -1000, -1000, -1000, -1000, -208,
	16141, 18117, 1327, 1073, 896, 1327, 1238, 9048, 9048, 1315,
	-1000, 1065, -1000, -1000, 1291, -1000, -1000, 646, -1000, 1065,
	950, -1000, 186, 143, 9048, -1000, 7471, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1315, -1000, -1000,
	-1000, 19245, 3006, 19245, 19245, 19245, 317, 9379, 9048, -1000,
	-1000, -1000, 17553, 878, 10372, 13268, 13268, 10372, 13268, 13268,
	18117, 18117, 252, -1000, 19245, -1000, -110, 1226, 19245, -1000,
	726, -1000, -1000, 642, 718, 642, 642, 642, 642, 642,
	407, 407, 19245, 18117, 224, 685, -1000, -73, 1353, -1000,
	-1000, -1000, -1000, 2078, 2438, 539, -1000, 9710, 9710, 94,
	-1000, 55, -1000, -222, 6697, 738, -1000, -1000, -1000, 11367,
	792, 9048, -1000, 251, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11367, 9710, 9710, 9710,
	9710, 9710, 5221, -78, 973, 570, -1000, 9048, 677, -1000,
	-1000, -1000, -1000, -1000, -1000, -137, 429, -1000, -1000, -1000,
	-1000, -1000, 1051, -1000, -1000, 392, 737, 1327, 849, 910,
	939, 9048, 17269, -208, 939, -1000, 1358, 411, 641, 1021,
	-1000, 636, 1303, 737, 1175, -1000, -1000, -88, 19245, 9048,
	12586, 7471, 738, -1000, 1303, 318, 15857, 14431, 1020, 10932,
	-1000, 4852, 823, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19245, 1336,
	1333, 1332, 1329, 2788, 73, 587, 142, 1296, -1000, -1000,
	10372, -1000, -1000, -1000, -1000, -1000, 894, 890, 1068, 1051,
	877, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 591, 591, 875, 873, -1000, 224, -1000,
	407, 407, -1000, 9710, 2438, 2438, 13, -1000, 683, -1000,
	-1000, 737, 1057, 737, 685, -1000, -1000, 737, 321, 987,
	914, 90, 446, -1000, 1051, -71, -1000, 738, 9048, -1000,
	-1000, -1000, 178, 750, 705, 692, 675, 48, -1000, 1311,
	438, 4483, -1000, 939, 1327, 939, 1153, 738, 863, 1327,
	1153, -1000, 1209, 9048, 9048, 9048, -1000, 1238, -1000, 8374,
	-1000, -1000, -240, -1000, 738, -1000, -1000, 7471, 2067, -1000,
	1238, 15567, 17553, 868, -1000, 865, 1304, -1000, -1000, -1000,
	1255, 13561, 15283, 19245, 181, -1000, -1000, 1019, 4114, -19,
	-1000, -1000, -1000, 492, 385, 14999, -1000, 1221, -1000, -1000,
	3006, 1232, -1000, -1000, -1000, -1000, -1000, 7471, 7471, 7471,
	592, 189, -1000, 286, 18117, 19245, -1000, 1226, -1000, -1000,
	301, 939, -1000, -1000, -1000, 2438, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 9710, 9710, -1000, 9710, 9710, 9710, 737,
	648, 738, 670, -1000, 661, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14715, -1000, 1309, 737, -1000, 1153, 939, -1000,
	-1000, -1000, 939, -1000, 1206, 738, 738, -1000, -1000, 952,
	9048, -263, 11975, -1000, -1000, 230, 17553, -1000, 230, 885,
	14431, 17553, -1000, -1000, 16989, 14431, 14431, 14431, 14431, 14431,
	-1000, 1193, 1191, -1000, 1173, 1172, 1187, 17553, -1000, 857,
	13561, 398, 1051, -1000, 17837, -1000, -1000, -1000, 11212, 1289,
	3745, 1019, -19, 1018, -1000, -1, -6, 7381, 6697, 444,
	-1000, -1000, -1000, -1000, -1000, 19245, 1933, 1948, 328, 141,
	184, 155, -1000, 157, 854, 737, -1000, 17553, 1153, 321,
	321, 321, 321, 15, -1000, -1000, -1000, -1000, -1000, 381,
	9048, -1000, -1000, -1000, 1153, -1000, 1327, 14431, 738, 568,
	-1000, -1000, 913, 1051, -1000, 1327, 14431, 904, -1000, 953,
	-1000, 490, 1304, 1072, 1150, 1008, -1000, -1000, -1000, -1000,
	1188, -1000, 1183, -1000, -1000, -1000, -1000, -97, 340, 338,
	330, 19245, -1000, 1065, -1000, 1018, -19, -14, -1000, -1000,
	-1000, -1000, 738, 485, -1000, -1000, -1000, 7471, 535, 581,
	7471, -1000, -1000, 152, -1000, -1000, -1000, 1054, -1000, -1000,
	-1000, -1000, -1000, 737, 223, -127, 6697, 843, -1000, 738,
	-1000, 1322, 1017, -1000, 991, 16989, 1051, -1000, 14138, 19245,
	1315, 904, -1000, 1315, 16989, 9048, -1000, -1000, 9048, 1053,
	-1000, 9048, -1000, -1000, -1000, -1000, 1052, 1051, 1051, 1051,
	848, -1000, -1000, -1000, -1000, -16, -11, -1000, 9048, 313,
	139, 684, -1000, -1000, 19245, -1000, 1203, -81, -130, -1000,
	-1000, 737, 9048, 1319, 1307, -1000, 1227, 902, 1011, -1000,
	-1000, 8043, 737, 852, 369, 848, 1303, -1000, 1303, -1000,
	738, 738, 17269, 738, -69, 17269, 17269, 17269, 13845, 19245,
	-1000, -1000, -1000, 738, -1000, 7471, 11785, 837, -1000, 1198,
	-1000, -1000, -1000, -1000, 9048, 9048, 244, -1000, 1051, -1000,
	-1000, 976, 19245, 19245, -1000, -1000, -1000, 828, 826, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 824, 824, 824, 398,
	-1000, 309, -1000, -1000, -90, 738, 1013, 1357, -1000, 1051,
	-1000, 1065, 363, -1000, -1000, -1000, -69, -1000, -1000, -1000,
	-97, -1000, -128, 16989, 1011, 737, 19245, -1000, -1000, -136,
	1007, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1576, 6, 20, 1574, 1573, 1572, 1570, 1566, 1565,
	1564, 1563, 1555, 1554, 1553, 1550, 1548, 1546, 1545, 75,
	1544, 1542, 1541, 72, 1540, 1539, 1538, 1537, 68, 52,
	80, 84, 1205, 1536, 48, 38, 59, 1535, 23, 1533,
	1531, 49, 1530, 25, 1529, 1528, 60, 1525, 1521, 13,
	221, 71, 97, 1519, 1515, 87, 1499, 1514, 1513, 85,
	1512, 1510, 77, 15, 4, 11, 8, 1508, 44, 7,
	1506, 78, 1504, 1501, 1500, 1498, 58, 1495, 42, 63,
	16, 50, 1494, 41, 64, 29, 10, 5, 1, 28,
	26, 1490, 46, 24, 22, 1488, 57, 1481, 107, 36,
	62, 69, 0, 220, 33, 83, 1480, 1479, 1477, 955,
	73, 35, 9, 1476, 65, 1475, 67, 92, 34, 90,
	89, 1474, 91, 1473, 1471, 1464, 1716, 390, 106, 86,
	55, 1462, 1461, 81, 88, 273, 82, 279, 409, 70,
	1458, 1457, 1455, 100, 1451, 54, 96, 21, 344, 1450,
	1449, 1448, 1447, 1446, 109, 1444, 93, 1441, 76, 47,
	39, 51, 30, 1440, 1439, 1438, 1437, 66, 1436, 1434,
	1433, 61, 1431, 1429, 94, 56, 108, 98, 104, 1428,
	1427, 74, 101, 105, 1424, 95, 37, 27, 45, 1423,
	43, 1422, 1419, 1418, 2, 3, 1417, 1416, 1415, 1411,
	1410, 1409, 53, 1408, 1398, 1397, 14, 1396, 1394, 40,
	1393, 1384, 1383, 1382, 1381, 1081, 1072, 1380, 99, 1378,
	1373, 103,
}

var yyR1 = [...]uint8{
	0, 211, 212, 212, 1, 1, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 15, 15, 15, 15, 15, 214, 214,
	2, 2, 3, 4, 4, 5, 5, 6, 6, 22,
	22, 7, 8, 8, 8, 217, 217, 41, 41, 85,
	85, 9, 9, 9, 9, 10, 10, 191, 191, 190,
	192, 192, 11, 11, 11, 11, 11, 184, 184, 184,
	184, 184, 12, 12, 187, 187, 187, 13, 13, 13,
	90, 90, 94, 94, 94, 95, 95, 95, 95, 203,
	203, 115, 115, 213, 213, 218, 218, 218, 218, 218,
	218, 218, 182, 182, 182, 182, 183, 183, 183, 183,
	185, 185, 186, 186, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 189, 189, 100, 100, 165, 165,
	165, 166, 166, 166, 166, 166, 166, 168, 168, 169,
	169, 107, 107, 170, 170, 18, 150, 151, 151, 151,
	151, 151, 151, 151, 138, 138, 118, 118, 118, 118,
	118, 118, 118, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 176, 176, 176, 176, 176, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 178, 179, 180, 172, 172,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 128, 128, 128, 128, 128, 128,
	171, 171, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 122, 122, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 121, 121, 121, 121, 121, 121, 121,
	121, 123, 123, 123, 123, 123, 123, 123, 123, 119,
	119, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 125, 125, 125, 125, 125, 125,
	125, 125, 137, 137, 126, 126, 135, 135, 136, 136,
	136, 127, 127, 127, 134, 134, 134, 131, 131, 132,
	132, 133, 133, 133, 129, 129, 129, 130, 130, 130,
	140, 161, 161, 161, 163, 163, 164, 164, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 149,
	149, 181, 181, 160, 160, 160, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 148, 148, 158, 158, 159,
	159, 156, 156, 156, 157, 143, 143, 143, 143, 143,
	144, 145, 145, 145, 145, 141, 142, 174, 174, 174,
	207, 207, 207, 207, 207, 207, 208, 208, 175, 175,
	146, 146, 147, 147, 154, 154, 154, 154, 219, 219,
	152, 152, 152, 153, 153, 153, 220, 19, 20, 20,
	21, 21, 21, 25, 25, 25, 23, 23, 24, 24,
	30, 30, 29, 29, 31, 31, 31, 31, 106, 106,
	106, 105, 105, 204, 204, 204, 204, 204, 33, 33,
	34, 34, 35, 35, 36, 36, 36, 194, 194, 193,
	193, 195, 195, 195, 195, 195, 195, 48, 48, 83,
	83, 83, 86, 86, 37, 37, 37, 37, 38, 38,
	39, 39, 40, 40, 113, 113, 112, 112, 112, 111,
	111, 42, 42, 42, 44, 43, 43, 43, 43, 45,
	45, 47, 47, 46, 46, 49, 49, 49, 49, 50,
	50, 84, 84, 32, 32, 32, 32, 32, 32, 32,
	97, 97, 52, 52, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 61, 61, 61, 61, 61, 61,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 28, 28, 62, 62, 62, 68, 63, 63, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 59, 59, 59, 59,
	59, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 221, 221, 60,
	60, 60, 60, 26, 26, 26, 26, 26, 114, 114,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 117, 117, 117, 117, 117, 117, 117, 117,
	72, 72, 27, 27, 70, 70, 71, 99, 99, 73,
	73, 69, 69, 69, 196, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 74, 74, 75, 75, 205,
	205, 206, 76, 76, 77, 77, 78, 79, 79, 79,
	80, 80, 80, 80, 81, 81, 81, 54, 54, 54,
	54, 54, 54, 82, 82, 82, 82, 87, 87, 64,
	64, 66, 66, 65, 67, 88, 88, 92, 89, 89,
	93, 93, 93, 93, 93, 16, 17, 91, 91, 91,
	108, 108, 108, 98, 98, 96, 96, 103, 103, 104,
	104, 109, 109, 109, 110, 110, 197, 197, 197, 198,
	198, 198, 199, 199, 200, 201, 201, 202, 210, 210,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	215, 216,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 7, 10, 7, 11, 11, 9, 13,
	16, 5, 8, 11, 13, 13, 6, 7, 1, 1,
	4, 6, 10, 1, 3, 1, 3, 7, 8, 1,
	1, 8, 8, 7, 6, 1, 1, 1, 3, 0,
	4, 3, 4, 5, 4, 2, 6, 1, 3, 2,
	0, 1, 2, 2, 2, 3, 5, 0, 2, 2,
	2, 2, 3, 5, 1, 2, 3, 7, 5, 9,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 0, 3, 0, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 1, 1, 1, 3,
	1, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 4, 0, 3, 0, 2,
	2, 0, 2, 2, 2, 2, 2, 0, 2, 0,
	3, 0, 1, 0, 2, 4, 4, 0, 1, 3,
	3, 3, 3, 3, 2, 2, 3, 1, 1, 1,
	1, 1, 0, 2, 2, 3, 2, 4, 2, 4,
	2, 2, 3, 2, 3, 2, 7, 9, 3, 3,
	6, 9, 9, 6, 6, 8, 8, 5, 8, 7,
	4, 2, 4, 6, 2, 4, 2, 1, 1, 1,
	2, 1, 1, 1, 3, 1, 2, 1, 1, 2,
	0, 4, 3, 4, 3, 3, 3, 3, 3, 3,
	3, 2, 4, 6, 2, 3, 2, 3, 1, 3,
	0, 2, 0, 3, 3, 2, 2, 2, 2, 2,
	3, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 2, 2, 2, 2, 1,
	1, 1, 3, 3, 2, 2, 2, 1, 1, 1,
	1, 4, 4, 4, 4, 4, 1, 5, 2, 2,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 3, 3, 0, 3, 3, 0, 1, 0,
	1, 0, 2, 1, 0, 3, 3, 0, 1, 2,
	6, 0, 1, 4, 1, 2, 1, 3, 2, 3,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 1, 1, 0, 2, 5, 2, 3, 3, 2,
	3, 2, 2, 3, 4, 1, 1, 1, 1, 1,
	3, 3, 2, 2, 1, 2, 5, 5, 8, 8,
	13, 1, 1, 2, 2, 10, 7, 0, 1, 1,
	0, 1, 1, 1, 2, 2, 1, 2, 0, 3,
	0, 1, 1, 3, 0, 4, 1, 3, 2, 1,
	1, 2, 1, 1, 1, 1, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 3, 6, 4, 7, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 0, 4, 1,
	3, 1, 1, 1, 1, 1, 1, 4, 8, 1,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 0, 4, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 6, 2, 2, 2, 2, 2, 2, 2, 3,
	3, 1, 1, 1, 1, 2, 4, 5, 5, 6,
	4, 4, 4, 6, 6, 6, 6, 6, 8, 8,
	6, 8, 8, 9, 7, 5, 4, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 2, 2, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 0,
	2, 1, 3, 5, 3, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 3, 0, 2, 1,
	3, 1, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 5, 3, 1, 3, 1, 2, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 2, 0,
	2, 2, 0, 1, 4, 1, 3, 2, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -211, -1, -14, -15, -18, 122, 123, -212, 377,
	-150, 56, -207, -208, -170, 131, 144, 162, 163, 349,
	129, 361, 362, 146, 364, 76, -96, 134, -151, -138,
	-103, 61, 59, -102, 169, 340, 21, 204, 218, 250,
	238, 341, 167, 239, 286, 207, 295, 173, 221, 28,
	256, 347, 141, 257, 261, 268, 287, 336, 215, 289,
	33, 143, 342, 37, 159, 290, 259, 253, 248, 131,
	252, 213, 247, 41, 263, 262, 264, 285, 168, 267,
	18, 154, 157, 258, 260, 222, 170, 161, 346, 291,
	158, 171, 153, 294, 363, 166, 208, 288, 216, 297,
	203, 202, 40, 212, 140, 205, 164, 160, 229, 251,
	246, 206, 162, 155, 296, 348, 244, 237, 165, 132,
	281, 292, 231, 276, 277, 175, 176, 177, 178, 179,
	180, 181, 34, 337, 338, 130, 130, 132, 202, 132,
	-103, -103, 135, -46, -109, 59, -102, 61, 129, -98,
	135, 364, 361, 362, 329, 129, 58, 57, -139, -118,
	-122, -119, -124, -123, -125, -103, -120, -121, 238, 341,
	235, 239, 236, 241, 242, 243, 116, 240, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 244,
	256, 31, 151, 228, 229, 230, 233, 232, 234, 231,
	257, 258, 259, 260, 261, 262, 263, 264, 209, 210,
	211, 212, 213, 214, 215, 216, 217, 218, 220, 221,
	223, 224, 225, 227, 226, -139, -103, 54, 201, -103,
	-98, 203, -98, 54, -182, 54, 19, 182, 183, 195,
	78, 23, 119, -98, -46, 78, -46, 293, -154, -219,
	344, 35, -138, -140, -143, -141, -142, -155, -144, 138,
	136, 140, 141, 146, -148, 130, 147, 71, 78, -176,
	138, -179, 54, 272, 278, 136, 147, 146, 375, 69,
	139, 23, 351, 353, 29, 30, -133, 378, 266, -131,
	275, -126, 56, -126, -126, 237, -127, 56, -126, -127,
	-126, -127, -129, 239, -129, -129, -129, -129, 56, 56,
	-126, -126, -126, -126, -126, -135, 56, 222, -135, -135,
	-136, 56, -136, 54, 55, -46, -103, 54, -46, -203,
	372, 373, -46, -46, -185, -183, 8, 9, 10, -46,
	196, 24, -118, -110, -109, -101, 127, 183, 352, 77,
	23, 25, 272, 278, 182, 80, 116, 16, 81, 189,
	361, 362, 115, 330, 122, 50, 322, 323, 320, 187,
	332, 333, 321, 279, 194, 20, 29, 372, 10, 26,
	149, 22, 109, 124, 184, 84, 85, 152, 24, 150,
	73, 190, 192, 19, 53, 142, 11, 351, 13, 14,
	366, 353, 135, 134, 96, 365, 130, 48, 8, 118,
	27, 373, 93, 44, 147, 193, 46, 94, 17, 324,
	325, 32, 339, 156, 111, 51, 38, 367, 78, 368,
	71, 54, 293, 188, 76, 15, 49, 157, 369, 144,
	191, 95, 125, 329, 47, 185, 370, 128, 186, 6,
	335, 31, 148, 45, 129, 280, 83, 133, 72, 163,
	5, 146, 9, 52, 55, 326, 327, 328, 36, 82,
	12, 145, 343, 74, -46, 24, 127, -46, -152, -104,
	69, -103, -101, 57, 34, 56, -175, 54, 78, -146,
	-103, 147, -148, -148, 59, -148, 59, 130, 59, 71,
	19, -103, 9, 147, 147, -175, 61, -46, 56, -172,
	352, 16, 56, -177, 56, -178, 61, 62, 63, 64,
	71, -128, 70, -52, 267, -59, 320, 323, 322, 268,
	72, 73, -103, -109, 59, -102, -180, 63, 379, -132,
	276, 63, -129, -129, -126, -129, 63, 59, -129, -129,
	-130, 116, 115, 31, -130, -130, -130, -130, -137, 61,
	-137, -134, 343, 344, -134, 63, -135, 63, -46, -103,
	56, 54, -46, 23, 132, 23, -165, 23, 54, 57,
	196, -182, -103, 55, -107, 138, -143, 146, 127, 86,
	-104, -154, -159, -156, -103, 147, 10, 9, 19, 142,
	136, 375, 59, 59, 59, -174, 146, 361, 362, 363,
	-176, 375, -128, 268, -215, 56, 56, -32, -51, 78,
	-56, 29, 24, -55, -52, -69, -196, -67, -68, 116,
	117, 105, 106, 113, 79, 118, -59, -57, -58, -60,
	-199, 61, 62, -103, 60, 70, 63, 64, 65, 66,
	71, -109, 298, -65, -215, 46, 47, 330, 331, 332,
	333, 339, 334, 81, 36, 38, 320, 328, 327, 326,
	324, 325, 322, 323, 374, 135, 321, 111, 329, 265,
	23, 29, 63, -177, 56, -178, -167, 374, -167, -215,
	-126, 56, -126, 56, 56, -215, 119, 58, -130, -130,
	-129, -130, 58, 58, -130, -130, 59, 59, 116, 58,
	57, 58, 228, 228, 57, 58, 57, 56, 55, 54,
	-158, -159, -59, -103, -46, 56, -2, -3, -4, 6,
	-215, -98, -2, -166, 19, 170, 171, -46, -183, -83,
	-103, 147, -185, -182, -103, -214, 130, 147, -103, 138,
	-143, -153, -104, 61, 63, 58, 57, -126, -157, 270,
	-126, -145, 166, 167, 31, 168, -145, 363, 147, 147,
	-215, -174, -175, -32, -83, 58, 77, 76, 93, -32,
	-53, 96, 78, 94, 95, 80, 102, 101, 112, 105,
	106, 107, 108, 109, 110, 111, 103, 104, 115, 374,
	86, 87, 88, 89, 90, 91, 92, 97, 98, 99,
	100, -97, -215, -68, -215, 120, 121, -56, -56, -56,
	-56, -56, -56, -56, -200, 266, -167, 61, 119, 119,
	-2, -63, -32, -215, -215, -215, -215, -215, -215, -215,
	-215, -215, -72, -32, -215, 39, -221, -215, -221, -221,
	-221, -221, -221, -221, -221, -117, 116, 239, 151, 230,
	-120, -119, 245, 244, 212, 213, 215, 216, 218, 238,
	341, -215, -215, -215, -215, 56, 353, 57, 58, -177,
	61, 267, 58, 239, 229, 269, 118, 245, 254, 255,
	-118, -216, 58, 58, 58, 58, -30, 22, -29, -63,
	-31, -32, 107, -109, -104, -130, -129, 61, -129, 277,
	277, 63, 63, -158, -103, -46, 58, 56, 56, -83,
	-76, 15, -21, 5, -19, -220, -2, -46, 133, 21,
	6, 8, 9, 10, 19, -100, 57, 23, -185, -213,
	56, -103, 146, -103, -161, -163, 343, -162, 55, 143,
	69, 175, 176, 177, 178, 179, 180, 181, -156, -79,
	25, 26, -175, 54, 71, 169, -175, 54, -146, -103,
	-174, -32, -215, -216, 58, 349, 350, -32, -32, -61,
	71, 78, 72, 73, -56, -62, -65, -68, 67, 96,
	94, 95, 80, -56, -56, -56, -56, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -114, 59,
	61, -122, 229, -117, -120, 221, 59, -55, 61, -103,
	-55, -103, 378, -104, -110, -101, -104, -216, 57, -216,
	-2, -29, -32, -29, -32, -116, 116, 235, 151, 230,
	224, 254, 255, 274, 228, 275, 217, 209, 214, 227,
	225, 211, 226, 210, 223, 220, 233, 232, 234, 245,
	236, 241, 243, 242, 240, -32, -69, -56, -69, -103,
	-109, -29, -23, 22, -70, -71, 82, -69, 19, -216,
	237, -29, -30, -29, -29, -29, -32, 56, 63, 58,
	237, -134, -133, -216, -29, 57, -216, -216, -106, -105,
	23, -103, 61, 119, -215, -130, -130, 58, 58, 58,
	56, 56, -84, 365, -158, 58, -80, 17, 16, -5,
	-3, -215, 21, 22, -25, 42, 43, -20, -216, 23,
	-147, -103, 184, -99, 82, -103, -186, -188, -6, -8,
	-7, -10, -9, -11, -12, -13, -16, -3, -22, 10,
	9, 20, 31, 188, 189, 194, 190, 145, 135, -17,
	8, 329, 54, -218, -103, 105, 86, 61, -138, 57,
	56, 56, 136, -160, 54, -162, 343, 56, 345, 59,
	-149, 86, 61, 86, 86, 86, 86, 86, 86, 86,
	9, 10, 56, 56, -216, -32, -171, 168, 54, 71,
	72, 73, -62, -56, -56, -56, -28, 152, 77, 343,
	-216, -201, -202, 61, 119, -32, -216, -216, -216, 57,
	55, 57, -126, -126, -126, -136, 215, -126, 215, -136,
	-126, -126, -126, -126, -126, -126, 23, 57, 11, 57,
	57, 11, 119, -216, -29, -73, -71, 84, -32, -216,
	-109, -216, -216, -216, -216, 58, -173, 58, 58, -216,
	-31, -204, 376, -105, 107, -110, -30, -84, -158, -159,
	-50, 12, 56, 58, -50, -81, 19, 32, -32, -77,
	-78, -32, -76, -2, -23, 68, -2, -168, 57, 55,
	185, 204, -32, -188, -76, -19, -19, -19, -191, -103,
	-190, -19, -210, -209, 299, 300, 301, 302, 303, 304,
	305, 306, 307, 308, 309, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, -103, -103, -103, -184, 38,
	191, 192, 193, -51, -56, -32, -51, -46, 58, -218,
	-103, -218, -218, -218, -218, -218, -159, -159, 147, -103,
	-164, -162, -103, 63, -181, 54, 74, 63, -181, -181,
	-181, -181, -181, -145, -145, -147, -159, -171, -216, 336,
	10, 9, -28, 77, -56, -56, 228, 379, 57, -167,
	-104, -116, 116, -114, -32, -129, 59, -116, -56, -56,
	-56, -56, -56, -104, 340, -76, 85, -32, 83, 349,
	350, 58, 205, 355, 356, 156, 357, 168, 358, 359,
	-215, 119, -216, -50, 58, 58, -161, -32, -83, -84,
	-161, 9, 96, 57, 18, 57, -79, -80, -216, -24,
	45, -169, 343, -103, -32, -189, -188, 204, -187, -188,
	-80, -96, 11, -41, -46, -34, -35, -36, -37, -48,
	-68, -215, -46, 57, -192, -118, 186, -89, -115, 206,
	-93, 288, 287, -104, 298, -91, 286, 239, 285, -181,
	57, -103, 11, 11, 11, 11, -188, 204, 83, 204,
	-100, 19, 58, 58, 56, -215, 58, 57, -175, -175,
	58, 58, -171, -145, -145, -56, 277, -202, -216, -216,
	-216, -216, -216, 19, 57, -216, 57, 19, -215, -27,
	335, -32, 343, 63, 16, 63, 63, 63, 63, 356,
	156, 358, 16, -216, 157, -76, 107, -161, -50, -161,
	-160, 58, -50, -160, 40, -32, -32, -78, -81, -29,
	375, -188, 377, -188, -81, -47, 27, -46, -46, -41,
	-217, 57, 11, 55, 31, 57, -42, -44, -43, -45,
	44, 48, 50, 45, 46, 47, 51, -113, 23, -34,
	-215, -112, 157, -111, 23, -109, 61, -190, -103, 187,
	57, -89, 206, -90, -94, 289, 291, 86, 119, -108,
	-103, 61, 29, 31, -209, 27, -187, -186, -187, -99,
	184, -197, 197, 78, -159, -103, -162, 139, -161, -56,
	-56, -56, -56, -56, -216, 61, 63, 63, 360, -109,
	16, -216, -160, -161, -161, 41, -33, 11, -32, 377,
	85, -188, -85, 157, -46, -85, 55, -34, -46, -88,
	-92, -69, -35, -36, -36, -35, -36, 44, 44, 44,
	49, 44, 49, 44, -43, -109, -216, -49, 52, 134,
	53, -215, -111, 19, -93, -90, 57, 290, 292, 293,
	54, 74, -32, -104, -130, -103, 85, 377, 377, 85,
	204, 185, -198, 198, 197, 58, -216, -46, -160, -216,
	-216, -216, -216, -26, 96, 343, 119, -205, -206, -32,
	-160, -50, -34, 85, -54, 31, 36, -2, -215, -215,
	-50, -34, -50, -50, 57, 86, -39, -38, 54, 55,
	-40, 54, -38, 44, 44, -194, 343, 130, 130, 130,
	-86, -103, -2, -94, -95, 294, 291, 297, 86, 85,
	84, -187, 200, 199, 56, -216, 341, 51, 346, -104,
	-216, -76, 57, -74, 13, -87, 54, -88, -64, -66,
	-65, -215, -2, -82, -103, -86, -76, -50, -76, -92,
	-32, -32, 56, -32, 56, -215, -215, -215, -216, 57,
	291, 295, 296, -32, 135, 204, 377, -147, 41, 342,
	347, -216, -206, -75, 14, 16, 28, -87, 57, -216,
	-216, -216, 57, 119, -216, -80, -80, -83, -193, -195,
	366, 367, 368, 369, 370, 371, -83, -83, -83, -112,
	-103, -187, 85, 58, 41, -32, -63, 147, -66, 36,
	-2, -215, -103, -103, 58, 58, 57, -216, -216, -216,
	-49, 85, 343, 9, -64, -2, 119, -195, -194, 346,
	-88, -216, -103, 347,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 765, 1, 3,
	6, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	763, 391, 392, 393, 396, 0, 0, 766, 0, 148,
	162, 162, 767, 768, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 0, 0, 763, 0, 763,
	0, 0, 0, 0, 503, 771, 772, 773, 763, 0,
	0, 397, 394, 395, 144, 0, 404, 0, 154, 321,
	317, 157, 158, 159, 160, 161, 304, 242, -2, -2,
	304, -2, 311, 304, 311, 276, 304, 311, 324, -2,
	-2, -2, 324, -2, -2, -2, -2, 289, 290, -2,
	955, 0, 261, 304, -2, 304, 304, 304, 267, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 243, 244,
	245, -2, -2, 248, -2, -2, 251, -2, 306, -2,
	306, 308, 308, 259, 260, 155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 0,
	0, 162, 0, 0, 145, 0, 0, 0, 146, 406,
	0, 409, 149, 150, 151, 152, 153, 0, 398, 400,
	0, 1009, 957, 0, 0, 365, 366, 164, 0, 166,
	0, 168, 0, 170, 171, 0, 173, 175, 398, 0,
	0, 0, 0, 0, 0, 0, 163, 0, 323, 319,
	318, 241, 0, 324, 324, 304, 324, 0, 324, 324,
	278, 279, 327, 0, 327, 327, 327, 327, 0, 0,
	314, 314, 264, 265, 266, 253, 0, 306, 255, 256,
	257, 0, 258, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 128, 0, 110, 106, 107, 108, 0,
	105, 0, 21, 504, 774, 775, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 0, 764, 141, 0, 0, 410,
	412, 769, 770, 404, 408, 0, 375, 0, 0, 0,
	401, 356, 0, 0, 359, 0, 361, -2, 387, 165,
	0, 0, 0, 172, 174, 0, 178, 179, 782, 0,
	208, 0, 0, 191, 0, 194, -2, 197, 198, 199,
	232, 201, 202, 203, 984, 205, 304, 304, 228, 960,
	522, 523, 0, 0, -2, -2, 206, 207, 322, 156,
	320, 0, 327, 327, 324, 327, 0, 0, 327, 327,
	280, 328, 0, 0, 281, 282, 283, 284, 0, 302,
	0, 262, 0, 0, 263, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 763, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 400, 26, 142, 0, 0,
	411, 407, 0, 369, 304, 304, 0, 0, 0, 0,
	0, 0, 357, 358, 360, 363, 387, 388, 389, 190,
	167, 398, 169, 0, 782, 1040, 0, 0, 513, 782,
	518, 520, 0, 559, 560, 561, 562, 563, 564, 782,
	782, 782, 782, 782, 782, 782, 591, 592, 593, 594,
	0, -2, 696, 691, 698, 699, 700, 701, 702, 703,
	704, 0, 0, 744, 782, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 0, 0, 627, 627, 627, 627,
	627, 627, 627, 627, 0, 0, 0, 0, 0, 783,
	0, 209, 0, 0, 0, 0, 196, 162, 200, 0,
	224, 0, 226, 0, 0, -2, 0, 305, 271, 272,
	327, 273, 312, 313, 274, 275, 329, 325, 326, 324,
	0, 324, 0, 0, 0, 309, 0, 0, 0, 0,
	0, 367, 368, 304, 0, 0, -2, 712, 0, 416,
	0, 0, -2, 0, 0, 129, 130, 126, 111, 109,
	469, 470, 0, 0, 93, 0, 28, 29, 401, 400,
	27, 405, 413, 414, 415, 331, 0, 717, 373, 374,
	372, 398, 381, 382, 0, 0, 398, 399, 400, 387,
	782, 364, 0, 0, 0, 0, 782, 782, 0, 516,
	782, 0, 0, 782, 782, 782, 782, 782, 782, 782,
	782, 782, 782, 782, 782, 782, 782, 782, 0, 0,
	540, 541, 542, 543, 544, 545, 546, 547, 548, 549,
	550, 519, 0, 533, 0, 0, 0, 582, 583, 584,
	585, 586, 587, 588, 595, 0, 695, 697, 0, 0,
	33, 0, 557, 782, 782, 782, 782, 782, 782, 0,
	782, 426, 0, 681, 0, 0, 618, 0, 619, 620,
	621, 622, 623, 624, 625, 626, 672, 0, 674, 675,
	676, 677, 678, 679, 246, 247, 249, 250, 252, 269,
	270, 782, -2, 782, 782, 782, 187, 0, 192, 0,
	232, 0, 195, 304, 304, 235, 236, -2, -2, -2,
	321, 204, 1041, 225, 227, 229, 0, 782, 0, 0,
	432, 438, 434, 0, 0, 277, 327, 303, 327, 315,
	316, 0, 0, 0, 0, 0, 511, 1040, 0, 0,
	720, 0, 0, 420, 423, 418, 33, 0, 0, 132,
	133, 134, 135, 136, 0, 687, 0, 0, 0, 22,
	95, 0, 0, 401, 353, 332, 0, 334, 0, 349,
	0, 0, 0, 0, 0, 0, 0, 0, 370, 371,
	718, 719, 376, 0, 383, 384, 377, 0, 0, 401,
	0, 0, 782, 230, 180, 183, 184, 514, 515, 517,
	534, 0, 536, 538, 524, 525, 553, 554, 555, 0,
	782, 782, 782, 551, 529, 0, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 579, 638,
	639, 580, 0, 590, 304, 306, 0, 577, 232, 0,
	578, 589, 0, 692, 0, -2, 694, 556, 782, 743,
	33, 0, 438, 0, 0, 0, -2, 304, 643, 304,
	308, 646, 647, 648, 304, 651, 653, 654, 655, 656,
	308, 658, 659, 660, 661, 662, 304, 304, 665, 666,
	304, 304, 669, 304, 304, 0, 561, 0, 0, 691,
	0, 0, 782, 427, 689, 684, 782, 0, 0, 628,
	673, 0, 0, 431, 0, 0, 0, 210, 0, 0,
	-2, 234, 240, 596, 0, 782, 443, 600, 435, 439,
	0, 441, 442, 0, -2, 292, 293, 307, 310, 511,
	0, 0, 509, 0, 0, 509, 724, 782, 782, 712,
	35, 0, 421, 422, 426, 424, 425, 417, 34, 0,
	137, 402, 0, 0, 782, 471, 18, 112, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 712, 416, 416,
	416, 0, 416, 0, 0, 0, 67, 782, 782, 755,
	39, 40, 0, 0, -2, 95, 95, -2, 95, 95,
	0, 0, 0, 330, 0, 335, 0, 0, 0, 338,
	0, 350, 340, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 230, 0, 176, 0, 0, 535,
	537, 539, 526, 551, 530, 0, 527, 782, 782, 0,
	521, 0, 785, 232, 0, 558, -2, 601, 602, 0,
	0, 782, 640, 324, 644, 645, 649, 650, 652, 657,
	663, 664, 667, 668, 670, 671, 0, 782, 782, 782,
	782, 782, 0, 0, 712, 0, 685, 782, 0, 616,
	617, 629, 630, 631, 632, 0, 0, 189, 193, 597,
	433, 598, 0, 440, 436, 0, 0, 509, 0, 0,
	331, 782, 0, 511, 331, 30, 0, 0, 721, 713,
	714, 717, 720, 33, 428, 419, -2, 139, 0, 782,
	127, 0, 688, 113, 720, 765, 0, 0, 55, -2,
	57, 0, 0, 788, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 62, 63, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 513, 126, 94, 96,
	-2, 97, 98, 99, 100, 101, 0, 0, 0, 354,
	0, 336, 341, 339, 342, 351, 352, 343, 344, 345,
	346, 347, 348, 398, 398, 0, 0, 386, 230, 231,
	0, 0, 528, 782, 552, 531, 0, 784, 0, 787,
	693, 0, 304, 0, 0, 641, 642, 0, 0, 0,
	0, 0, 0, 692, 0, 682, 615, 690, 782, 185,
	186, 188, 0, 0, 0, 0, 0, 0, 221, 0,
	0, 0, 599, 331, 509, 331, 353, 510, 0, 509,
	353, 725, 0, 782, 782, 782, 716, 724, 36, 782,
	429, 16, 0, 403, 138, 17, 124, 0, 0, 74,
	724, 0, 0, 0, 47, 0, 450, 452, 453, 454,
	484, 0, 486, 0, 0, 59, 61, 51, 0, 1016,
	748, -2, -2, 0, 0, 0, -2, 948, -2, 756,
	0, 65, 68, 69, 70, 71, 72, 0, 0, 0,
	687, 0, 23, 776, 0, 0, 333, 0, 378, 379,
	0, 331, 177, 181, 182, 532, 581, 786, 603, 606,
	604, 605, 607, 782, 782, 610, 782, 782, 782, 0,
	0, 686, 0, 212, 0, 214, 215, 216, 217, 218,
	219, 220, 0, 444, 0, 0, 437, 353, 331, 10,
	8, 512, 331, 12, 0, 722, 723, 715, 31, 448,
	782, 0, 0, 75, 123, 49, 0, 502, -2, 0,
	0, 0, 45, 46, 0, 0, 0, 0, 0, 0,
	491, 0, 0, 494, 0, 0, 0, 0, 485, 0,
	0, 505, 987, 487, 0, 489, 490, 58, 162, 0,
	0, 52, 1016, 54, 80, 0, 0, 782, 0, 327,
	760, 761, 762, 758, 789, 0, 0, 0, 0, 0,
	0, 779, 777, 0, 0, 0, 337, 0, 353, 0,
	0, 0, 0, 633, 614, 683, 211, 213, 222, 0,
	782, 446, 7, 11, 353, 726, 509, 0, 140, 0,
	19, 76, 0, 0, 501, 509, 0, 509, 48, 509,
	745, 0, 451, 480, 482, 0, 477, 492, 493, 495,
	0, 497, 0, 499, 500, 455, 456, 457, 0, 0,
	0, 0, 488, 0, 749, 53, 0, 0, 83, 84,
	750, 751, 752, 0, 754, 66, 73, 0, 0, 78,
	0, 127, 25, 0, 778, 24, 355, 0, 385, 609,
	608, 611, 612, 0, 0, 0, 0, 0, 709, 711,
	9, 705, 449, 125, 737, 0, 0, -2, 0, 0,
	712, 509, 44, 712, 0, 782, 474, 481, 782, 0,
	475, 782, 476, 496, 498, 467, 0, 0, 0, 0,
	0, 472, -2, 81, 82, 0, 0, 88, 782, 0,
	0, 0, 780, 781, 0, 613, 0, 0, 0, 223,
	445, 0, 782, 707, 0, 37, 0, 737, 727, 739,
	741, 782, 33, 0, 733, 0, 720, 43, 720, 746,
	747, 478, 0, 483, 0, 0, 0, 0, 486, 0,
	85, 86, 87, 753, 77, 0, 0, 0, 634, 0,
	637, 447, 710, 32, 782, 782, 0, 38, 0, 742,
	-2, 0, 0, 0, 50, 42, 41, 0, 0, 459,
	461, 462, 463, 464, 465, 466, 0, 0, 0, 505,
	473, 0, 20, 380, 635, 708, 706, 0, 740, 0,
	-2, 0, 735, 734, 479, 458, 0, 506, 507, 508,
	457, 79, 0, 0, 730, 33, 0, 460, 468, 0,
	738, -2, 736, 636,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 377,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 378, 3, 379, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:405
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:410
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:411
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:419
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:424
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:444
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:464
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:485
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:501
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:518
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:537
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:548
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:560
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:571
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:587
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      []Statement{yyDollar[11].statement},
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:601
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:615
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:628
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[6].colIdent,
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:642
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:653
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 23:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:659
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 24:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:673
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:687
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:706
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:715
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:730
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:738
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 32:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:745
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:751
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:755
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:761
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:765
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:772
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:784
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:796
		{
			yyVAL.str = InsertStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:800
		{
			yyVAL.str = ReplaceStr
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:806
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:812
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:816
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:820
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:825
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:826
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:830
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:834
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:839
		{
			yyVAL.partitions = nil
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:843
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:849
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:853
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:857
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:861
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:867
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:871
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:884
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:888
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:894
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:899
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:903
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:909
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:916
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:923
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:930
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:938
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:948
		{
			yyVAL.str = ""
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:952
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:956
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:960
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:964
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:970
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:977
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:987
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:991
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:995
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 77:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1002
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1011
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 79:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1019
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1030
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1034
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1040
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1044
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1048
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1054
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1058
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1062
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1066
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1072
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1076
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1082
		{
			yyVAL.str = SessionStr
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1086
		{
			yyVAL.str = GlobalStr
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1091
		{
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1092
		{
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1096
		{
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1097
		{
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1098
		{
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1099
		{
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1100
		{
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1101
		{
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1102
		{
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1106
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1110
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1114
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1118
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1124
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1128
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1132
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1137
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1143
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1147
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1153
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1157
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1163
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1175
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1187
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1194
		{
			yyVAL.empty = struct{}{}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1196
		{
			yyVAL.empty = struct{}{}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1199
		{
			yyVAL.bytes = nil
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1203
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1207
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1212
		{
			yyVAL.bytes = nil
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1216
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1220
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1224
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1228
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1232
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1237
		{
			yyVAL.expr = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1241
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1246
		{
			yyVAL.expr = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1250
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1255
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1259
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1264
		{
			yyVAL.bytes = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1268
		{
			yyVAL.bytes = nil
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1274
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1281
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1287
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1291
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1296
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1300
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1304
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1308
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1318
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1323
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1329
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1340
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1345
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1351
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1364
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1369
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1374
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1379
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1385
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1390
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1395
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1400
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1405
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1410
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1415
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1420
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1425
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1434
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1444
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1449
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1454
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1461
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1468
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1476
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1481
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1486
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1491
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1497
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1503
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1509
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1515
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1522
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1526
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 193:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1530
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1534
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1538
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1544
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1548
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1552
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1556
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1560
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1564
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1568
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1572
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1576
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1582
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1588
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1594
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1600
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1604
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1609
		{
			yyVAL.sequence = &Sequence{}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1613
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1618
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1623
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1628
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1633
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1638
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1643
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1648
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1653
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1658
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1663
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1668
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1673
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1680
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1684
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1688
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1692
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1696
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1700
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1705
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1709
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1714
		{
			yyVAL.bytes = nil
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1728
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1733
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 293:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1994
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2000
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2005
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2010
		{
			yyVAL.optVal = nil
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2014
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2019
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2023
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2031
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2035
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2041
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2049
		{
			yyVAL.optVal = nil
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2053
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2057
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2066
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2070
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2074
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2079
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2083
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2088
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2092
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2097
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2101
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2105
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2110
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2114
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2118
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2123
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2127
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2131
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2137
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2142
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2146
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2150
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2156
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2160
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2166
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2170
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2176
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2180
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2185
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2189
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2193
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2197
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2201
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2205
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2209
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2213
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2217
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2223
		{
			yyVAL.str = ""
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2227
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2233
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2237
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2243
		{
			yyVAL.indexPartition = nil
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2247
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2251
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2257
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2261
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2265
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2269
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2273
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2277
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2281
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2285
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2289
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2295
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2299
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2305
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2310
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2316
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2320
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2326
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2331
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2335
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2345
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 376:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2350
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2357
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 378:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2364
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 379:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2371
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 380:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2380
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2392
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2396
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2400
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2404
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 385:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2410
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 386:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2421
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2431
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2435
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2439
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2445
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2449
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2453
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2457
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2461
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2465
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2471
		{
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2472
		{
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2476
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2480
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2485
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2492
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2496
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2503
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2507
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2513
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2517
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2522
		{
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2523
		{
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2527
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2531
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2535
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2541
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2545
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2549
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2554
		{
			setAllowComments(yylex, true)
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2558
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2564
		{
			yyVAL.bytes2 = nil
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2568
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2574
		{
			yyVAL.str = UnionStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2578
		{
			yyVAL.str = UnionAllStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2582
		{
			yyVAL.str = UnionDistinctStr
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2587
		{
			yyVAL.str = ""
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2591
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2595
		{
			yyVAL.str = SQLCacheStr
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2600
		{
			yyVAL.str = ""
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2604
		{
			yyVAL.str = DistinctStr
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2609
		{
			yyVAL.str = ""
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2613
		{
			yyVAL.str = StraightJoinHint
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2618
		{
			yyVAL.selectExprs = nil
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2622
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2628
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2632
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2638
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2642
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2646
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2650
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2655
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2659
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2663
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2670
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2675
		{
			yyVAL.overExpr = nil
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2679
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 445:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2683
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2687
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 447:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2691
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2696
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2700
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2706
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2710
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2720
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2724
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2728
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2733
		{
			yyVAL.strs = []string{}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2737
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2743
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2747
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2753
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2757
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2761
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2765
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2769
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2773
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2779
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 468:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2783
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2789
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2794
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2798
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2804
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2808
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2821
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2825
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2829
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2833
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2839
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2841
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2845
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2847
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2851
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2853
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2856
		{
			yyVAL.empty = struct{}{}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2858
		{
			yyVAL.empty = struct{}{}
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2861
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2865
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2869
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2876
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2882
		{
			yyVAL.str = JoinStr
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2886
		{
			yyVAL.str = JoinStr
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2890
		{
			yyVAL.str = JoinStr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2896
		{
			yyVAL.str = StraightJoinStr
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2902
		{
			yyVAL.str = LeftJoinStr
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2906
		{
			yyVAL.str = LeftJoinStr
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2910
		{
			yyVAL.str = RightJoinStr
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2914
		{
			yyVAL.str = RightJoinStr
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2920
		{
			yyVAL.str = NaturalJoinStr
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2924
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2934
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2938
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2944
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2948
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2953
		{
			yyVAL.indexHints = nil
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2957
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2961
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 508:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2965
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2970
		{
			yyVAL.expr = nil
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2974
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2979
		{
			yyVAL.columns = nil
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2983
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2989
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2993
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2997
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3001
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3005
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3009
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3013
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3019
		{
			yyVAL.str = ""
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3023
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3029
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3033
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3039
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3043
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3047
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3051
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3055
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3059
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3063
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 531:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3067
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 532:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3071
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3075
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3081
		{
			yyVAL.str = IsNullStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3085
		{
			yyVAL.str = IsNotNullStr
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3089
		{
			yyVAL.str = IsTrueStr
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3093
		{
			yyVAL.str = IsNotTrueStr
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3097
		{
			yyVAL.str = IsFalseStr
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3101
		{
			yyVAL.str = IsNotFalseStr
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3107
		{
			yyVAL.str = EqualStr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3111
		{
			yyVAL.str = LessThanStr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3115
		{
			yyVAL.str = GreaterThanStr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3119
		{
			yyVAL.str = LessEqualStr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3123
		{
			yyVAL.str = GreaterEqualStr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3127
		{
			yyVAL.str = NotEqualStr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3131
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3135
		{
			yyVAL.str = PosixRegexStr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3139
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3143
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3147
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3152
		{
			yyVAL.expr = nil
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3156
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3162
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3166
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3170
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3176
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3182
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3186
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3192
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3196
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3200
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3204
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3208
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3212
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3216
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3220
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3224
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3228
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3232
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3236
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3240
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3244
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3248
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3252
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3256
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3260
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3264
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3268
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3272
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3276
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 581:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3280
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3284
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3288
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3292
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3300
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3314
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3318
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3322
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3330
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3338
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3346
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3356
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 597:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3360
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 598:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3364
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 599:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3368
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3372
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3382
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3386
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 603:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3390
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 604:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3394
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 605:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3398
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3402
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 607:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3406
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 608:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3410
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 609:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3414
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 610:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3418
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 611:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3422
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 612:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3426
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 613:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3430
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 614:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3434
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3438
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3442
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3447
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3457
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3461
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3465
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3469
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3474
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3479
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3484
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3489
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3493
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3507
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3511
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3515
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3519
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3525
		{
			yyVAL.str = ""
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3529
		{
			yyVAL.str = BooleanModeStr
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3533
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 636:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3537
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3541
		{
			yyVAL.str = QueryExpansionStr
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3547
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3551
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3557
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3561
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3565
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3569
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3573
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3577
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3583
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3587
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3591
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3595
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3599
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3603
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3607
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3611
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3615
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3619
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3623
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3627
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3631
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3635
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3639
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3643
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3647
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3651
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3655
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3659
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3663
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3667
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3671
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3675
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3679
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3683
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3689
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3693
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3697
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3701
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3705
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3709
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3713
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3717
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3722
		{
			yyVAL.expr = nil
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3726
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3731
		{
			yyVAL.str = string("")
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3735
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3741
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3745
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3751
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3756
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3758
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3761
		{
			yyVAL.expr = nil
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3765
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3771
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3775
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 693:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3779
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3785
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3791
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3795
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3800
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3805
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3809
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3813
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3817
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3821
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3825
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3829
		{
			yyVAL.expr = &NullVal{}
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3834
		{
			yyVAL.exprs = nil
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3838
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3843
		{
			yyVAL.expr = nil
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3847
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3853
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3857
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3863
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3868
		{
			yyVAL.orderBy = nil
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3872
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3878
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3882
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3888
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3893
		{
			yyVAL.str = AscScr
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3897
		{
			yyVAL.str = AscScr
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3901
		{
			yyVAL.str = DescScr
		}
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3906
		{
			yyVAL.limit = nil
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3910
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 722:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3914
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 723:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3918
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3923
		{
			yyVAL.str = ""
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3927
		{
			yyVAL.str = ForUpdateStr
		}
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3931
		{
			yyVAL.str = ShareModeStr
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3944
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3948
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3952
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 730:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3957
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3961
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 732:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3965
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3972
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3976
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3980
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 736:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3984
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3989
		{
			yyVAL.updateExprs = nil
		}
	case 738:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3993
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3999
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4003
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4009
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4013
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4019
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4025
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4035
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4039
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4045
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4051
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4055
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4065
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4069
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 753:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4074
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4078
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4084
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4090
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4097
		{
			yyVAL.bytes = []byte("charset")
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4104
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4108
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4112
		{
			yyVAL.expr = &Default{}
		}
	case 763:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4117
		{
			yyVAL.empty = struct{}{}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4119
		{
			yyVAL.empty = struct{}{}
		}
	case 765:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4122
		{
			yyVAL.str = ""
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4124
		{
			yyVAL.str = IgnoreStr
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4128
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4132
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4139
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4145
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4149
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4154
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4161
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4167
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4171
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4175
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4181
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4185
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4189
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4195
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4199
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 784:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4206
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4213
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4217
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4224
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4230
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4234
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4512
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4521
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
