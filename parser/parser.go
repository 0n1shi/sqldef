// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const POSIX_REGEX = 57427
const POSIX_REGEX_CI = 57428
const POSIX_NOT_REGEX = 57429
const POSIX_NOT_REGEX_CI = 57430
const SHIFT_LEFT = 57431
const SHIFT_RIGHT = 57432
const DIV = 57433
const MOD = 57434
const UNARY = 57435
const COLLATE = 57436
const BINARY = 57437
const UNDERSCORE_BINARY = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const SCHEMA = 57448
const TABLE = 57449
const INDEX = 57450
const VIEW = 57451
const TO = 57452
const IGNORE = 57453
const IF = 57454
const PRIMARY = 57455
const COLUMN = 57456
const CONSTRAINT = 57457
const REFERENCES = 57458
const SPATIAL = 57459
const FULLTEXT = 57460
const FOREIGN = 57461
const KEY_BLOCK_SIZE = 57462
const POLICY = 57463
const WHILE = 57464
const UNIQUE = 57465
const KEY = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const TYPE = 57482
const VINDEX = 57483
const VINDEXES = 57484
const STATUS = 57485
const VARIABLES = 57486
const RESTRICT = 57487
const CASCADE = 57488
const NO = 57489
const ACTION = 57490
const PERMISSIVE = 57491
const RESTRICTIVE = 57492
const PUBLIC = 57493
const CURRENT_USER = 57494
const SESSION_USER = 57495
const PAD_INDEX = 57496
const FILLFACTOR = 57497
const IGNORE_DUP_KEY = 57498
const STATISTICS_NORECOMPUTE = 57499
const STATISTICS_INCREMENTAL = 57500
const ALLOW_ROW_LOCKS = 57501
const ALLOW_PAGE_LOCKS = 57502
const BEFORE = 57503
const AFTER = 57504
const EACH = 57505
const ROW = 57506
const SCROLL = 57507
const CURSOR = 57508
const OPEN = 57509
const CLOSE = 57510
const FETCH = 57511
const PRIOR = 57512
const FIRST = 57513
const LAST = 57514
const DEALLOCATE = 57515
const DEFERRABLE = 57516
const INITIALLY = 57517
const IMMEDIATE = 57518
const DEFERRED = 57519
const CONCURRENTLY = 57520
const BEGIN = 57521
const START = 57522
const TRANSACTION = 57523
const COMMIT = 57524
const ROLLBACK = 57525
const BIT = 57526
const TINYINT = 57527
const SMALLINT = 57528
const SMALLSERIAL = 57529
const MEDIUMINT = 57530
const INT = 57531
const INTEGER = 57532
const SERIAL = 57533
const BIGINT = 57534
const BIGSERIAL = 57535
const INTNUM = 57536
const REAL = 57537
const DOUBLE = 57538
const PRECISION = 57539
const FLOAT_TYPE = 57540
const DECIMAL = 57541
const NUMERIC = 57542
const SMALLMONEY = 57543
const MONEY = 57544
const TIME = 57545
const TIMESTAMP = 57546
const DATETIME = 57547
const YEAR = 57548
const DATETIMEOFFSET = 57549
const DATETIME2 = 57550
const SMALLDATETIME = 57551
const CHAR = 57552
const VARCHAR = 57553
const VARYING = 57554
const BOOL = 57555
const CHARACTER = 57556
const VARBINARY = 57557
const NCHAR = 57558
const NVARCHAR = 57559
const NTEXT = 57560
const UUID = 57561
const TEXT = 57562
const TINYTEXT = 57563
const MEDIUMTEXT = 57564
const LONGTEXT = 57565
const CITEXT = 57566
const BLOB = 57567
const TINYBLOB = 57568
const MEDIUMBLOB = 57569
const LONGBLOB = 57570
const JSON = 57571
const JSONB = 57572
const ENUM = 57573
const GEOMETRY = 57574
const POINT = 57575
const LINESTRING = 57576
const POLYGON = 57577
const GEOMETRYCOLLECTION = 57578
const MULTIPOINT = 57579
const MULTILINESTRING = 57580
const MULTIPOLYGON = 57581
const VARIADIC = 57582
const ARRAY = 57583
const NOW = 57584
const GETDATE = 57585
const BPCHAR = 57586
const TEXT_PATTERN_OPS = 57587
const NULLX = 57588
const AUTO_INCREMENT = 57589
const APPROXNUM = 57590
const SIGNED = 57591
const UNSIGNED = 57592
const ZEROFILL = 57593
const ZONE = 57594
const AUTOINCREMENT = 57595
const DATABASES = 57596
const TABLES = 57597
const VITESS_KEYSPACES = 57598
const VITESS_SHARDS = 57599
const VITESS_TABLETS = 57600
const VSCHEMA_TABLES = 57601
const EXTENDED = 57602
const FULL = 57603
const PROCESSLIST = 57604
const NAMES = 57605
const CHARSET = 57606
const GLOBAL = 57607
const SESSION = 57608
const ISOLATION = 57609
const LEVEL = 57610
const READ = 57611
const WRITE = 57612
const ONLY = 57613
const REPEATABLE = 57614
const COMMITTED = 57615
const UNCOMMITTED = 57616
const SERIALIZABLE = 57617
const NEW = 57618
const CURRENT_TIMESTAMP = 57619
const DATABASE = 57620
const CURRENT_DATE = 57621
const CURRENT_TIME = 57622
const LOCALTIME = 57623
const LOCALTIMESTAMP = 57624
const UTC_DATE = 57625
const UTC_TIME = 57626
const UTC_TIMESTAMP = 57627
const REPLACE = 57628
const CONVERT = 57629
const CAST = 57630
const SUBSTR = 57631
const SUBSTRING = 57632
const GROUP_CONCAT = 57633
const SEPARATOR = 57634
const INHERIT = 57635
const MATCH = 57636
const AGAINST = 57637
const BOOLEAN = 57638
const LANGUAGE = 57639
const WITH = 57640
const WITHOUT = 57641
const PARSER = 57642
const QUERY = 57643
const EXPANSION = 57644
const UNUSED = 57645
const VIRTUAL = 57646
const STORED = 57647
const GENERATED = 57648
const ALWAYS = 57649
const IDENTITY = 57650
const SEQUENCE = 57651
const INCREMENT = 57652
const MINVALUE = 57653
const CACHE = 57654
const CYCLE = 57655
const OWNED = 57656
const NONE = 57657
const CLUSTERED = 57658
const NONCLUSTERED = 57659
const REPLICATION = 57660
const INCLUDE = 57661
const HOLDLOCK = 57662
const NOLOCK = 57663
const NOWAIT = 57664
const PAGLOCK = 57665
const ROWLOCK = 57666
const TABLELOCK = 57667
const TYPECAST = 57668
const CHECK = 57669

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	126, 142,
	-2, 132,
	-1, 36,
	160, 471,
	161, 471,
	-2, 461,
	-1, 272,
	114, 827,
	-2, 823,
	-1, 273,
	114, 828,
	-2, 824,
	-1, 315,
	258, 837,
	-2, 721,
	-1, 347,
	81, 1051,
	-2, 82,
	-1, 348,
	81, 1002,
	-2, 83,
	-1, 354,
	81, 981,
	-2, 794,
	-1, 356,
	81, 1025,
	-2, 796,
	-1, 609,
	258, 837,
	-2, 499,
	-1, 658,
	258, 837,
	-2, 499,
	-1, 687,
	52, 41,
	54, 41,
	-2, 43,
	-1, 848,
	114, 830,
	-2, 826,
	-1, 1102,
	258, 837,
	-2, 499,
	-1, 1123,
	5, 28,
	-2, 620,
	-1, 1148,
	5, 27,
	-2, 767,
	-1, 1196,
	56, 349,
	-2, 346,
	-1, 1256,
	5, 27,
	-2, 90,
	-1, 1491,
	5, 28,
	-2, 768,
	-1, 1592,
	5, 27,
	-2, 770,
	-1, 1761,
	5, 28,
	-2, 771,
	-1, 1916,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 19672

var yyAct = [...]int16{
	273, 1690, 1868, 1647, 1751, 1048, 270, 612, 3, 1607,
	1734, 1650, 535, 1604, 1559, 778, 1497, 1869, 1520, 1151,
	251, 1723, 277, 931, 53, 1164, 21, 522, 1713, 1185,
	268, 1501, 288, 1558, 1350, 90, 613, 1188, 90, 824,
	487, 949, 1351, 1380, 974, 276, 305, 1258, 1211, 1347,
	681, 1041, 679, 980, 1112, 250, 280, 1056, 607, 1057,
	245, 995, 90, 90, 358, 1217, 973, 932, 1169, 358,
	1768, 1323, 358, 358, 90, 873, 902, 897, 1107, 90,
	66, 90, 255, 1024, 1115, 353, 784, 90, 1244, 697,
	990, 349, 919, 1156, 850, 541, 485, 928, 969, 1813,
	339, 668, 346, 683, 246, 247, 248, 249, 1036, 547,
	696, 717, 334, 275, 332, 711, 712, 636, 337, 1089,
	555, 1228, 1011, 333, 257, 260, 48, 26, 27, 891,
	1317, 1895, 1387, 52, 1861, 87, 264, 343, 1661, 1502,
	1503, 1504, 1505, 1506, 1507, 341, 1008, 608, 28, 1407,
	568, 567, 577, 578, 570, 571, 572, 573, 574, 575,
	576, 569, 1724, 342, 579, 572, 573, 574, 575, 576,
	569, 488, 489, 579, 497, 1526, 1394, 1209, 1852, 501,
	1929, 502, 1695, 1681, 1786, 1787, 1534, 509, 568, 567,
	577, 578, 570, 571, 572, 573, 574, 575, 576, 569,
	1108, 579, 579, 569, 1833, 1393, 579, 1922, 1759, 1694,
	1010, 1116, 1117, 900, 577, 578, 570, 571, 572, 573,
	574, 575, 576, 569, 90, 1845, 579, 1907, 358, 358,
	358, 358, 1049, 358, 1804, 1165, 1014, 1832, 1758, 520,
	358, 1342, 1783, 1485, 499, 1373, 1398, 1667, 962, 570,
	571, 572, 573, 574, 575, 576, 569, 1666, 530, 579,
	1177, 1374, 1375, 1176, 544, 1465, 1178, 358, 1464, 1481,
	534, 85, 81, 82, 83, 963, 964, 1230, 815, 543,
	1222, 1013, 1224, 1223, 698, 816, 699, 606, 598, 599,
	600, 601, 602, 603, 604, 1025, 1645, 1114, 1015, 1015,
	1581, 57, 1662, 1663, 1665, 1320, 923, 1319, 1664, 1474,
	1037, 568, 567, 577, 578, 570, 571, 572, 573, 574,
	575, 576, 569, 244, 511, 579, 59, 60, 61, 62,
	63, 594, 90, 1472, 1927, 1823, 1920, 1919, 1903, 90,
	90, 90, 1904, 1866, 1874, 358, 1388, 1623, 1729, 1649,
	1439, 1440, 358, 1714, 526, 527, 1851, 563, 1853, 566,
	1921, 1905, 1752, 786, 1296, 581, 582, 583, 584, 585,
	586, 587, 349, 564, 565, 562, 588, 589, 590, 591,
	568, 567, 577, 578, 570, 571, 572, 573, 574, 575,
	576, 569, 929, 786, 579, 337, 1739, 580, 488, 489,
	1788, 1523, 1753, 1589, 1478, 534, 580, 1682, 568, 567,
	577, 578, 570, 571, 572, 573, 574, 575, 576, 569,
	1445, 49, 579, 1316, 991, 785, 515, 1528, 1527, 1203,
	1202, 1190, 663, 1574, 580, 580, 1446, 641, 1386, 580,
	992, 687, 642, 84, 1882, 1455, 568, 567, 577, 578,
	570, 571, 572, 573, 574, 575, 576, 569, 1535, 580,
	579, 1396, 1873, 1900, 1672, 1926, 950, 952, 523, 524,
	525, 1038, 528, 1695, 1018, 1025, 504, 493, 78, 532,
	79, 1844, 694, 79, 1565, 1208, 688, 358, 627, 794,
	1293, 90, 580, 490, 517, 1792, 519, 1168, 1167, 90,
	1166, 90, 358, 1757, 90, 1518, 1324, 90, 1518, 1794,
	776, 90, 500, 358, 358, 358, 358, 358, 358, 358,
	358, 893, 787, 788, 223, 516, 518, 358, 358, 80,
	1297, 892, 90, 1521, 1522, 1524, 1911, 895, 596, 597,
	1326, 1195, 1789, 1686, 1193, 951, 896, 358, 1740, 1741,
	1742, 90, 787, 788, 1494, 1415, 1305, 358, 580, 545,
	1131, 894, 1101, 822, 827, 701, 611, 559, 849, 510,
	1423, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 710, 847, 971, 970,
	819, 777, 1294, 554, 1292, 1917, 803, 358, 358, 790,
	1706, 791, 552, 1084, 795, 358, 1705, 798, 1295, 851,
	1196, 1328, 358, 991, 1704, 1333, 1008, 1327, 554, 852,
	857, 503, 1325, 907, 1301, 1424, 992, 580, 1331, 992,
	801, 534, 817, 1703, 855, 856, 854, 1702, 997, 903,
	1701, 1329, 1330, 912, 915, 848, 899, 553, 552, 921,
	1700, 836, 1004, 1698, 993, 580, 1436, 920, 1179, 1154,
	994, 1332, 1334, 90, 554, 514, 90, 90, 90, 90,
	90, 829, 1790, 1791, 1793, 1795, 1796, 844, 90, 846,
	1127, 90, 1126, 1085, 700, 90, 1915, 933, 907, 1344,
	90, 90, 878, 580, 358, 821, 876, 642, 877, 553,
	552, 1300, 358, 1918, 1187, 506, 507, 508, 358, 781,
	887, 889, 1622, 553, 552, 549, 554, 1000, 1625, 996,
	1005, 349, 337, 337, 337, 337, 337, 1002, 1001, 968,
	554, 820, 920, 917, 1138, 975, 925, 337, 1621, 1199,
	1187, 793, 957, 1769, 553, 552, 337, 1885, 553, 552,
	486, 1822, 804, 805, 806, 807, 808, 809, 810, 811,
	1187, 554, 1770, 930, 1884, 554, 812, 813, 840, 842,
	843, 77, 1186, 1850, 841, 825, 826, 358, 946, 935,
	936, 358, 938, 358, 90, 955, 90, 1198, 954, 934,
	358, 958, 937, 90, 1187, 90, 959, 294, 90, 358,
	1849, 492, 1098, 1099, 1100, 978, 960, 629, 630, 631,
	632, 633, 634, 635, 1026, 1027, 1028, 1029, 1848, 991,
	1608, 553, 552, 1771, 986, 1043, 985, 1716, 987, 988,
	908, 909, 331, 1610, 989, 992, 916, 50, 554, 1128,
	1091, 553, 552, 553, 552, 1546, 1767, 853, 1346, 1231,
	847, 998, 1545, 1846, 1231, 1635, 1231, 999, 554, 1554,
	554, 352, 1104, 1105, 1106, 1553, 491, 1403, 1251, 495,
	496, 924, 494, 926, 927, 874, 498, 875, 50, 1039,
	1040, 1249, 1699, 610, 1055, 1588, 1061, 553, 552, 1062,
	1551, 1113, 1273, 1079, 1696, 1080, 1847, 1457, 1081, 1245,
	1205, 851, 358, 610, 554, 1609, 1727, 1934, 848, 1391,
	1006, 852, 1007, 1515, 1906, 1596, 1892, 1515, 1857, 1090,
	567, 577, 578, 570, 571, 572, 573, 574, 575, 576,
	569, 1003, 1390, 579, 1389, 1043, 1148, 1515, 1840, 1611,
	1612, 1613, 1614, 1615, 1616, 1617, 1727, 1839, 534, 1103,
	1608, 1836, 1835, 1152, 358, 1073, 1197, 90, 1016, 1017,
	1019, 1020, 1021, 1610, 1022, 1023, 1274, 1270, 1267, 1072,
	1275, 1272, 1271, 1180, 358, 1171, 75, 1173, 1828, 534,
	1856, 1032, 1033, 1034, 1051, 1035, 358, 1276, 886, 1039,
	1040, 1515, 1825, 691, 1269, 800, 1077, 358, 1515, 1824,
	1802, 975, 1596, 1749, 1720, 1071, 90, 1596, 1632, 1172,
	799, 1137, 782, 337, 1596, 534, 1599, 1598, 1182, 780,
	1052, 512, 1054, 1596, 1597, 352, 352, 352, 352, 505,
	352, 1161, 486, 1204, 692, 1609, 690, 352, 1082, 1515,
	1514, 1221, 1370, 534, 1493, 534, 90, 358, 1097, 1719,
	358, 1174, 1430, 1429, 1219, 1256, 1426, 1427, 1068, 1065,
	1066, 1728, 1064, 1727, 557, 1426, 1425, 1121, 534, 1611,
	1612, 1613, 1614, 1615, 1616, 1617, 1718, 1259, 1191, 1192,
	1194, 1644, 358, 1606, 1640, 90, 90, 533, 905, 534,
	1639, 1075, 1078, 90, 665, 534, 708, 707, 1636, 1572,
	1232, 1233, 358, 1235, 1236, 1237, 1206, 23, 1547, 1537,
	1348, 23, 1119, 1152, 1153, 1314, 1315, 1247, 1248, 1416,
	1246, 76, 54, 1238, 1265, 1240, 1241, 1242, 1243, 1310,
	1263, 1135, 23, 905, 1591, 1146, 1337, 1338, 1147, 1340,
	1341, 1262, 352, 1308, 1263, 1266, 1254, 1250, 1264, 703,
	358, 358, 1811, 1153, 50, 1283, 665, 1354, 50, 1339,
	1343, 1121, 1133, 956, 1489, 690, 580, 1130, 1515, 933,
	1349, 1070, 1318, 70, 74, 933, 1358, 664, 665, 50,
	1311, 1536, 358, 1312, 358, 358, 1121, 1435, 71, 1428,
	75, 1181, 1372, 1306, 1352, 1152, 1371, 961, 1322, 1379,
	1336, 665, 1121, 1335, 1069, 1132, 72, 73, 68, 975,
	1129, 975, 693, 1693, 1556, 1555, 50, 848, 823, 1357,
	1359, 1923, 257, 1830, 1284, 1801, 1722, 1721, 1378, 1286,
	1279, 1280, 1710, 1287, 1282, 1281, 1709, 1669, 1392, 1289,
	1285, 1668, 1646, 1634, 1074, 1221, 1575, 1414, 1377, 1015,
	1288, 1042, 1433, 90, 358, 1234, 1413, 1278, 1219, 1411,
	1076, 1404, 1395, 90, 1400, 1365, 1363, 1397, 358, 50,
	358, 1037, 1406, 1252, 1253, 1408, 1210, 1184, 1031, 358,
	1157, 1158, 1691, 1030, 716, 65, 670, 673, 674, 675,
	671, 90, 672, 676, 779, 1715, 1163, 358, 1557, 352,
	1434, 1348, 1160, 797, 783, 531, 358, 835, 1162, 90,
	352, 352, 352, 352, 352, 352, 352, 352, 1419, 940,
	1462, 1298, 1443, 1442, 352, 352, 939, 1459, 1879, 1448,
	1831, 1417, 1418, 1310, 1420, 1421, 1422, 943, 1450, 1304,
	1086, 941, 944, 1877, 831, 69, 942, 945, 1096, 674,
	675, 1456, 1453, 1431, 557, 261, 262, 352, 1095, 1239,
	548, 1460, 536, 1441, 358, 337, 706, 358, 358, 358,
	90, 358, 1463, 546, 537, 513, 1402, 1487, 358, 1496,
	1470, 1867, 1576, 1508, 1509, 1510, 825, 826, 1053, 796,
	1401, 1452, 1513, 1261, 888, 888, 1047, 789, 678, 1488,
	548, 358, 890, 1525, 252, 975, 258, 259, 358, 352,
	1567, 1896, 1568, 1569, 1570, 1571, 358, 1533, 913, 913,
	1511, 1094, 1182, 1854, 913, 1566, 1531, 1438, 1385, 1093,
	1675, 253, 54, 1674, 1530, 90, 358, 358, 1221, 1579,
	1153, 1819, 1818, 1548, 257, 358, 48, 26, 27, 1707,
	1817, 1219, 1683, 1816, 1538, 550, 358, 1708, 1661, 1410,
	1412, 1201, 913, 1259, 975, 818, 1560, 56, 28, 1058,
	1059, 1060, 1785, 1784, 1384, 1383, 1656, 8, 58, 266,
	1268, 1564, 1444, 1563, 689, 1582, 1583, 51, 1584, 1585,
	1586, 352, 1653, 7, 358, 358, 534, 1654, 6, 352,
	1592, 1652, 5, 1, 1111, 352, 605, 292, 1902, 1550,
	1872, 1552, 278, 1500, 1812, 1732, 358, 1807, 1549, 670,
	673, 674, 675, 671, 1738, 672, 676, 1717, 358, 1157,
	1158, 1207, 1590, 67, 1803, 1562, 1352, 568, 567, 577,
	578, 570, 571, 572, 573, 574, 575, 576, 569, 1726,
	1620, 579, 1580, 1603, 1437, 1624, 1619, 358, 90, 1618,
	1260, 1467, 1468, 1277, 1469, 1626, 358, 1667, 1471, 1628,
	1473, 1050, 1257, 1067, 1044, 1750, 358, 1666, 352, 1764,
	352, 1605, 1517, 983, 972, 484, 64, 716, 1560, 1641,
	1651, 1697, 1670, 984, 982, 981, 352, 358, 979, 1660,
	709, 1685, 1009, 1229, 1012, 715, 713, 714, 718, 231,
	344, 677, 702, 551, 1291, 1692, 1290, 1063, 1516, 1519,
	352, 1299, 1662, 1663, 1665, 814, 1684, 1083, 1664, 1689,
	529, 1688, 828, 233, 1821, 592, 1092, 1175, 1352, 351,
	1355, 540, 1673, 1578, 1136, 624, 918, 279, 839, 1637,
	291, 1638, 290, 289, 830, 1145, 561, 336, 1643, 661,
	669, 667, 358, 358, 358, 358, 666, 1159, 1730, 358,
	358, 1155, 335, 1744, 1307, 1484, 1680, 1660, 834, 1560,
	1725, 25, 55, 1747, 1748, 1731, 263, 358, 19, 18,
	17, 20, 358, 16, 15, 14, 358, 1743, 1746, 557,
	904, 906, 29, 13, 1765, 12, 933, 1760, 11, 10,
	358, 358, 1755, 1779, 9, 1659, 922, 1658, 1657, 1655,
	4, 254, 22, 358, 2, 1780, 1777, 1778, 358, 0,
	0, 0, 538, 542, 358, 0, 0, 1799, 0, 358,
	1781, 49, 1797, 1800, 0, 0, 0, 1808, 0, 560,
	0, 1170, 1810, 358, 1560, 1798, 1660, 0, 0, 0,
	0, 1820, 0, 0, 0, 1826, 0, 948, 0, 0,
	1660, 352, 0, 1772, 1773, 1774, 1775, 1776, 0, 0,
	0, 0, 0, 1189, 580, 0, 614, 0, 0, 0,
	0, 0, 0, 0, 1200, 625, 0, 0, 1516, 0,
	0, 0, 358, 1842, 1843, 0, 1226, 1837, 1838, 0,
	0, 1841, 358, 0, 1858, 0, 0, 1855, 1859, 0,
	0, 0, 1864, 1863, 1860, 0, 1871, 1862, 0, 0,
	0, 358, 1875, 1876, 1870, 358, 1660, 0, 0, 0,
	1651, 0, 0, 0, 1255, 1878, 1881, 352, 1660, 1660,
	1660, 0, 0, 0, 1883, 90, 0, 0, 0, 0,
	1891, 0, 0, 0, 0, 0, 358, 0, 358, 1888,
	0, 1890, 0, 0, 0, 0, 1889, 0, 0, 352,
	1893, 0, 1482, 90, 0, 1910, 1899, 0, 1730, 1899,
	1912, 0, 0, 0, 0, 1660, 0, 1660, 1660, 352,
	0, 0, 0, 1913, 1916, 0, 0, 1914, 0, 0,
	0, 0, 358, 0, 0, 0, 1925, 0, 0, 0,
	0, 0, 0, 0, 358, 0, 0, 1930, 0, 352,
	1931, 0, 0, 0, 0, 1932, 0, 0, 0, 1924,
	0, 0, 0, 0, 913, 0, 0, 1356, 1170, 1899,
	913, 0, 0, 0, 1660, 306, 47, 1479, 1660, 568,
	567, 577, 578, 570, 571, 572, 573, 574, 575, 576,
	569, 0, 0, 579, 1110, 0, 0, 0, 0, 352,
	0, 352, 1381, 1909, 0, 1118, 0, 1120, 0, 0,
	0, 0, 0, 0, 0, 1123, 1124, 1125, 0, 0,
	0, 0, 0, 47, 1134, 0, 0, 0, 0, 1140,
	1226, 256, 1141, 1142, 1143, 1144, 0, 338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1313, 0,
	637, 0, 837, 838, 568, 567, 577, 578, 570, 571,
	572, 573, 574, 575, 576, 569, 0, 0, 579, 0,
	0, 1432, 568, 567, 577, 578, 570, 571, 572, 573,
	574, 575, 576, 569, 639, 1447, 579, 1449, 257, 0,
	48, 26, 27, 0, 0, 0, 1451, 0, 0, 0,
	1109, 0, 1661, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 28, 0, 1454, 614, 0, 0, 910, 911,
	0, 0, 0, 352, 568, 567, 577, 578, 570, 571,
	572, 573, 574, 575, 576, 569, 0, 0, 579, 0,
	645, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	0, 879, 880, 0, 881, 882, 883, 885, 884, 0,
	0, 640, 1935, 0, 0, 0, 0, 0, 0, 655,
	638, 0, 0, 0, 0, 644, 643, 0, 0, 0,
	0, 1498, 0, 0, 1498, 1498, 1498, 0, 1512, 0,
	0, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	967, 0, 0, 521, 521, 521, 521, 0, 521, 0,
	0, 1667, 0, 0, 0, 521, 0, 0, 1498, 0,
	0, 1666, 0, 1226, 0, 1539, 580, 1321, 0, 0,
	0, 0, 47, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 593, 0, 0,
	595, 1561, 656, 352, 352, 257, 0, 48, 26, 27,
	0, 0, 1573, 0, 0, 0, 1662, 1663, 1665, 1661,
	609, 0, 1664, 1577, 0, 0, 0, 1369, 0, 28,
	0, 0, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 0, 626, 628, 628, 628, 628, 628, 628, 628,
	628, 580, 657, 658, 659, 660, 0, 0, 0, 0,
	0, 1594, 1595, 0, 680, 0, 0, 0, 0, 580,
	1087, 1088, 0, 542, 0, 0, 0, 0, 0, 1901,
	0, 0, 0, 1381, 539, 0, 257, 0, 48, 26,
	27, 0, 0, 0, 0, 1627, 0, 0, 0, 0,
	1661, 0, 257, 0, 48, 26, 27, 0, 0, 0,
	28, 0, 0, 0, 0, 0, 1661, 0, 0, 88,
	0, 580, 243, 1561, 1642, 0, 28, 0, 1667, 0,
	0, 0, 0, 1648, 0, 49, 0, 0, 1666, 0,
	0, 0, 0, 1498, 267, 0, 88, 88, 0, 0,
	0, 0, 0, 0, 0, 1122, 0, 0, 88, 0,
	1898, 0, 0, 88, 1687, 88, 0, 0, 0, 1461,
	1139, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 1662, 1663, 1665, 0, 0, 0, 1664,
	0, 0, 0, 1475, 1476, 1477, 0, 0, 1480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1667,
	0, 1490, 1491, 1492, 1561, 1495, 0, 0, 0, 1666,
	0, 0, 0, 0, 0, 1667, 0, 521, 0, 1733,
	1735, 1736, 1737, 0, 637, 1666, 1381, 1381, 521, 521,
	521, 521, 521, 521, 521, 521, 0, 0, 0, 0,
	0, 913, 521, 521, 1762, 0, 0, 0, 0, 1763,
	0, 0, 0, 1766, 1662, 1663, 1665, 1544, 639, 0,
	1664, 0, 0, 0, 0, 0, 0, 1648, 1381, 0,
	1662, 1663, 1665, 0, 0, 0, 1664, 0, 0, 1561,
	1381, 0, 1809, 0, 0, 1805, 0, 0, 0, 0,
	0, 716, 49, 0, 0, 0, 1815, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1829, 47, 0, 0, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 257, 0, 48, 26, 27, 0,
	0, 615, 1587, 0, 0, 640, 0, 0, 1661, 0,
	0, 0, 0, 655, 638, 0, 0, 0, 28, 644,
	643, 0, 0, 0, 0, 0, 1600, 1601, 1602, 1498,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1865,
	0, 0, 0, 49, 0, 0, 0, 0, 1345, 0,
	1631, 338, 338, 338, 338, 338, 0, 0, 1381, 49,
	0, 0, 1880, 1360, 1361, 0, 680, 1362, 953, 0,
	1364, 0, 0, 0, 0, 338, 88, 0, 0, 0,
	0, 0, 0, 88, 685, 88, 0, 0, 0, 1376,
	229, 0, 0, 716, 0, 1897, 656, 0, 0, 0,
	1676, 1677, 1678, 1679, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 239, 0, 0, 1667, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1666, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 0, 0, 0, 1711, 0, 0,
	0, 1648, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 521, 0, 521, 224,
	0, 0, 1662, 1663, 1665, 226, 0, 0, 1664, 0,
	0, 0, 232, 228, 521, 23, 24, 48, 26, 27,
	0, 0, 0, 0, 0, 0, 0, 0, 1756, 0,
	0, 0, 0, 1761, 0, 42, 0, 0, 0, 28,
	0, 1458, 0, 230, 0, 0, 0, 234, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 37, 0,
	1782, 0, 50, 1102, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 88, 0, 0, 88, 0,
	0, 88, 0, 0, 0, 802, 1486, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 0, 0, 1827, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	0, 49, 0, 0, 0, 88, 30, 31, 33, 32,
	35, 0, 0, 0, 802, 0, 0, 0, 0, 1532,
	0, 0, 0, 0, 1149, 1150, 0, 0, 0, 0,
	0, 36, 43, 44, 0, 0, 45, 46, 34, 227,
	0, 235, 236, 237, 238, 242, 0, 0, 0, 0,
	241, 240, 338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 0, 0, 0, 0,
	0, 267, 267, 0, 0, 914, 914, 267, 0, 0,
	0, 914, 0, 0, 0, 38, 39, 0, 40, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1908, 0,
	0, 0, 267, 267, 267, 267, 0, 88, 0, 914,
	88, 88, 88, 88, 88, 0, 0, 0, 0, 0,
	0, 0, 947, 0, 0, 88, 0, 0, 0, 685,
	0, 0, 0, 47, 88, 88, 0, 0, 0, 1629,
	0, 0, 0, 0, 1633, 0, 0, 0, 0, 0,
	1936, 1937, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	88, 0, 0, 1353, 0, 47, 0, 88, 0, 88,
	1712, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1366, 1367, 1368, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 802, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1745, 0, 267,
	0, 0, 0, 0, 1754, 614, 0, 0, 0, 0,
	1399, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1409, 0, 0, 0,
	0, 0, 609, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1806, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 338, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 1227, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1894, 0, 0, 1529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1302,
	1303, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 1353, 802, 0, 1593, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 914, 0, 0, 0, 0, 0, 914, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1630, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 609, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1227, 0, 0,
	0, 0, 1671, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1353, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 685, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1834,
	1227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1227, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1227, 0, 88, 0, 0, 0, 0, 1928, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1227, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 914, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1227, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 470,
	459, 0, 420, 472, 390, 408, 480, 410, 411, 446,
	370, 429, 155, 405, 388, 93, 393, 363, 400, 364,
	391, 422, 117, 389, 461, 432, 131, 478, 134, 437,
	0, 177, 143, 0, 0, 424, 463, 427, 454, 419,
	447, 378, 436, 473, 406, 442, 474, 0, 0, 0,
	357, 0, 976, 977, 0, 0, 0, 0, 0, 106,
	0, 441, 468, 402, 483, 445, 362, 439, 0, 368,
	371, 479, 466, 397, 398, 1183, 0, 0, 0, 0,
	0, 0, 423, 428, 451, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 394, 1887,
	435, 0, 0, 0, 375, 369, 0, 421, 0, 0,
	0, 377, 0, 395, 452, 0, 359, 457, 464, 418,
	204, 467, 415, 414, 162, 0, 109, 88, 183, 121,
	407, 132, 449, 481, 471, 425, 462, 392, 401, 111,
	399, 169, 156, 195, 434, 157, 167, 135, 187, 163,
	194, 469, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 367, 360, 396, 455, 458, 382, 444, 372,
	403, 450, 404, 426, 387, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 0, 151, 124, 0, 0, 0, 365, 0,
	178, 197, 214, 215, 366, 386, 465, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 443, 170, 108, 196, 176, 0, 381, 385,
	379, 380, 430, 431, 475, 476, 477, 453, 376, 0,
	383, 384, 0, 460, 126, 433, 92, 100, 133, 482,
	211, 0, 164, 119, 198, 0, 0, 409, 361, 413,
	0, 0, 0, 0, 0, 0, 0, 373, 374, 171,
	417, 412, 438, 440, 448, 456, 470, 459, 105, 420,
	472, 390, 408, 480, 410, 411, 446, 370, 429, 155,
	405, 388, 93, 393, 363, 400, 364, 391, 422, 117,
	389, 461, 432, 131, 478, 134, 437, 0, 177, 143,
	0, 0, 424, 463, 427, 454, 419, 447, 378, 436,
	473, 406, 442, 474, 0, 0, 0, 357, 0, 976,
	977, 0, 0, 0, 0, 0, 106, 0, 441, 468,
	402, 483, 445, 362, 439, 0, 368, 371, 479, 466,
	397, 398, 0, 0, 0, 0, 0, 0, 0, 423,
	428, 451, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 394, 0, 435, 0, 0,
	0, 375, 369, 0, 421, 0, 0, 0, 377, 0,
	395, 452, 0, 359, 457, 464, 418, 204, 467, 415,
	414, 162, 0, 109, 0, 183, 121, 407, 132, 449,
	481, 471, 425, 462, 392, 401, 111, 399, 169, 156,
	195, 434, 157, 167, 135, 187, 163, 194, 469, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 367,
	360, 396, 455, 458, 382, 444, 372, 403, 450, 404,
	426, 387, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 0,
	151, 124, 0, 0, 0, 365, 0, 178, 197, 214,
	215, 366, 386, 465, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 443,
	170, 108, 196, 176, 0, 381, 385, 379, 380, 430,
	431, 475, 476, 477, 453, 376, 0, 383, 384, 0,
	460, 126, 433, 92, 100, 133, 482, 211, 0, 164,
	119, 198, 0, 0, 409, 361, 413, 0, 0, 0,
	0, 0, 0, 0, 373, 374, 171, 417, 412, 438,
	440, 448, 456, 470, 459, 105, 420, 472, 390, 408,
	480, 410, 411, 446, 370, 429, 155, 405, 388, 93,
	393, 363, 400, 364, 391, 422, 117, 389, 461, 432,
	131, 478, 134, 437, 0, 177, 143, 0, 0, 424,
	463, 427, 454, 419, 447, 378, 436, 473, 406, 442,
	474, 0, 0, 0, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 441, 468, 402, 483, 445,
	362, 439, 0, 368, 371, 479, 466, 397, 398, 0,
	0, 0, 0, 0, 0, 0, 423, 428, 451, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1309, 0, 394, 0, 435, 0, 0, 0, 375, 369,
	0, 421, 0, 0, 0, 377, 0, 395, 452, 0,
	359, 457, 464, 418, 204, 467, 415, 414, 162, 0,
	109, 0, 183, 121, 407, 132, 449, 481, 471, 425,
	462, 392, 401, 111, 399, 169, 156, 195, 434, 157,
	167, 135, 187, 163, 194, 469, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 367, 360, 396, 455,
	458, 382, 444, 372, 403, 450, 404, 426, 387, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 0, 151, 124, 0,
	0, 0, 365, 0, 178, 197, 214, 215, 366, 386,
	465, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 443, 170, 108, 196,
	176, 0, 381, 385, 379, 380, 430, 431, 475, 476,
	477, 453, 376, 0, 383, 384, 0, 460, 126, 433,
	92, 100, 133, 482, 211, 0, 164, 119, 198, 0,
	0, 409, 361, 413, 0, 0, 0, 0, 0, 0,
	0, 373, 374, 171, 417, 412, 438, 440, 448, 456,
	470, 459, 105, 420, 472, 390, 408, 480, 410, 411,
	446, 370, 429, 155, 405, 388, 93, 393, 363, 400,
	364, 391, 422, 117, 389, 461, 432, 131, 478, 134,
	437, 0, 177, 143, 0, 0, 424, 463, 427, 454,
	419, 447, 378, 436, 473, 406, 442, 474, 50, 0,
	0, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 441, 468, 402, 483, 445, 362, 439, 0,
	368, 371, 479, 466, 397, 398, 0, 0, 0, 0,
	0, 0, 0, 423, 428, 451, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 394,
	0, 435, 0, 0, 0, 375, 369, 0, 421, 0,
	0, 0, 377, 0, 395, 452, 0, 359, 457, 464,
	418, 204, 467, 415, 414, 162, 0, 109, 0, 183,
	121, 407, 132, 449, 481, 471, 425, 462, 392, 401,
	111, 399, 169, 156, 195, 434, 157, 167, 135, 187,
	163, 194, 469, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 367, 360, 396, 455, 458, 382, 444,
	372, 403, 450, 404, 426, 387, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 0, 151, 124, 0, 0, 0, 365,
	0, 178, 197, 214, 215, 366, 386, 465, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 443, 170, 108, 196, 176, 0, 381,
	385, 379, 380, 430, 431, 475, 476, 477, 453, 376,
	0, 383, 384, 0, 460, 126, 433, 92, 100, 133,
	482, 211, 0, 164, 119, 198, 0, 0, 409, 361,
	413, 0, 0, 0, 0, 0, 0, 0, 373, 374,
	171, 417, 412, 438, 440, 448, 456, 470, 459, 105,
	420, 472, 390, 408, 480, 410, 411, 446, 370, 429,
	155, 405, 388, 93, 393, 363, 400, 364, 391, 422,
	117, 389, 461, 432, 131, 478, 134, 437, 0, 177,
	143, 0, 0, 424, 463, 427, 454, 419, 447, 378,
	436, 473, 406, 442, 474, 0, 0, 0, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 441,
	468, 402, 483, 445, 362, 439, 0, 368, 371, 479,
	466, 397, 398, 0, 0, 0, 0, 0, 0, 0,
	423, 428, 451, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 394, 0, 435, 0,
	0, 0, 375, 369, 0, 421, 0, 0, 0, 377,
	0, 395, 452, 0, 359, 457, 464, 418, 204, 467,
	415, 414, 162, 0, 109, 0, 183, 121, 407, 132,
	449, 481, 471, 425, 462, 392, 401, 111, 399, 169,
	156, 195, 434, 157, 167, 135, 187, 163, 194, 469,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	367, 360, 396, 455, 458, 382, 444, 372, 403, 450,
	404, 426, 387, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 355, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 151, 124, 0, 0, 0, 365, 0, 178, 197,
	214, 215, 366, 386, 465, 207, 208, 209, 210, 0,
	0, 0, 356, 354, 125, 174, 129, 136, 165, 212,
	443, 170, 108, 196, 176, 350, 381, 385, 379, 380,
	430, 431, 475, 476, 477, 453, 376, 0, 383, 384,
	0, 460, 126, 433, 92, 100, 133, 482, 211, 0,
	164, 119, 198, 0, 0, 409, 361, 413, 0, 0,
	0, 0, 0, 0, 0, 373, 374, 171, 417, 412,
	438, 440, 448, 456, 470, 459, 105, 420, 472, 390,
	408, 480, 410, 411, 446, 370, 429, 155, 405, 388,
	93, 393, 363, 400, 364, 391, 422, 117, 389, 461,
	432, 131, 478, 134, 437, 0, 177, 143, 0, 0,
	424, 463, 427, 454, 419, 447, 378, 436, 473, 406,
	442, 474, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 441, 468, 402, 483,
	445, 362, 439, 0, 368, 371, 479, 466, 397, 398,
	0, 0, 0, 0, 0, 0, 0, 423, 428, 451,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 845, 0, 394, 0, 435, 0, 0, 0, 375,
	369, 0, 421, 0, 0, 0, 377, 0, 395, 452,
	0, 359, 457, 464, 418, 204, 467, 415, 414, 162,
	0, 109, 0, 183, 121, 407, 132, 449, 481, 471,
	425, 462, 392, 401, 111, 399, 169, 156, 195, 434,
	157, 167, 135, 187, 163, 194, 469, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 367, 360, 396,
	455, 458, 382, 444, 372, 403, 450, 404, 426, 387,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 0, 151, 124,
	0, 0, 0, 365, 0, 178, 197, 214, 215, 366,
	386, 465, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 443, 170, 108,
	196, 176, 0, 381, 385, 379, 380, 430, 431, 475,
	476, 477, 453, 376, 0, 383, 384, 0, 460, 126,
	433, 92, 100, 133, 482, 211, 0, 164, 119, 198,
	0, 0, 409, 361, 413, 0, 0, 0, 0, 0,
	0, 0, 373, 374, 171, 417, 412, 438, 440, 448,
	456, 470, 459, 105, 420, 472, 390, 408, 480, 410,
	411, 446, 370, 429, 155, 405, 388, 93, 393, 363,
	400, 364, 391, 422, 117, 389, 461, 432, 131, 478,
	134, 437, 0, 177, 143, 0, 0, 424, 463, 427,
	454, 419, 447, 378, 436, 473, 406, 442, 474, 0,
	0, 0, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 441, 468, 402, 483, 445, 362, 439,
	0, 368, 371, 479, 466, 397, 398, 0, 0, 0,
	0, 0, 0, 0, 423, 428, 451, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	394, 0, 435, 0, 0, 0, 375, 369, 0, 421,
	0, 0, 0, 377, 0, 395, 452, 0, 359, 457,
	464, 418, 204, 467, 415, 414, 162, 0, 109, 0,
	183, 121, 407, 132, 449, 481, 471, 425, 462, 392,
	401, 111, 399, 169, 156, 195, 434, 157, 167, 135,
	187, 163, 194, 469, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 367, 360, 396, 455, 458, 382,
	444, 372, 403, 450, 404, 426, 387, 0, 0, 0,
	0, 0, 94, 184, 695, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 355, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 0, 151, 124, 0, 0, 0,
	365, 0, 178, 197, 214, 215, 366, 386, 465, 207,
	208, 209, 210, 0, 0, 0, 356, 354, 125, 174,
	129, 136, 165, 212, 443, 170, 108, 196, 176, 350,
	381, 385, 379, 380, 430, 431, 475, 476, 477, 453,
	376, 0, 383, 384, 0, 460, 126, 433, 92, 100,
	133, 482, 211, 0, 164, 119, 198, 0, 0, 409,
	361, 413, 0, 0, 0, 0, 0, 0, 0, 373,
	374, 171, 417, 412, 438, 440, 448, 456, 470, 459,
	105, 420, 472, 390, 408, 480, 410, 411, 446, 370,
	429, 155, 405, 388, 93, 393, 363, 400, 364, 391,
	422, 117, 389, 461, 432, 131, 478, 134, 437, 0,
	177, 143, 0, 0, 424, 463, 427, 454, 419, 447,
	378, 436, 473, 406, 442, 474, 0, 0, 0, 357,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	441, 468, 402, 483, 445, 362, 439, 0, 368, 371,
	479, 466, 397, 398, 0, 0, 0, 0, 0, 0,
	0, 423, 428, 451, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 394, 0, 435,
	0, 0, 0, 375, 369, 0, 421, 0, 0, 0,
	377, 0, 395, 452, 0, 359, 457, 464, 418, 204,
	467, 415, 414, 162, 0, 109, 0, 183, 121, 407,
	132, 449, 481, 471, 425, 462, 392, 401, 111, 399,
	169, 156, 195, 434, 157, 167, 135, 187, 163, 194,
	469, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 367, 360, 396, 455, 458, 382, 444, 372, 403,
	450, 404, 426, 387, 0, 0, 0, 0, 0, 94,
	184, 345, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 355, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 365, 0, 178,
	197, 214, 215, 366, 386, 465, 207, 208, 209, 210,
	0, 0, 0, 356, 354, 348, 347, 129, 136, 165,
	212, 443, 170, 108, 196, 176, 350, 381, 385, 379,
	380, 430, 431, 475, 476, 477, 453, 376, 0, 383,
	384, 0, 460, 126, 433, 92, 100, 133, 482, 211,
	0, 164, 119, 198, 0, 0, 409, 361, 413, 0,
	0, 0, 0, 0, 0, 0, 373, 374, 171, 417,
	412, 438, 440, 448, 456, 470, 459, 105, 420, 472,
	390, 408, 480, 410, 411, 446, 370, 429, 155, 405,
	388, 93, 393, 363, 400, 364, 391, 422, 117, 389,
	461, 432, 131, 478, 134, 437, 0, 177, 143, 0,
	0, 424, 463, 427, 454, 419, 447, 378, 436, 473,
	406, 442, 474, 0, 0, 0, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 441, 468, 402,
	483, 445, 362, 439, 0, 368, 371, 479, 466, 397,
	398, 0, 0, 0, 0, 0, 0, 0, 423, 428,
	451, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 394, 0, 435, 0, 0, 0,
	375, 369, 0, 421, 0, 0, 0, 377, 0, 395,
	452, 0, 359, 457, 464, 418, 204, 467, 415, 414,
	162, 0, 109, 0, 183, 121, 407, 132, 449, 481,
	471, 425, 462, 392, 401, 111, 399, 169, 156, 195,
	434, 157, 167, 135, 187, 163, 194, 469, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 367, 360,
	396, 455, 458, 382, 444, 372, 403, 450, 404, 426,
	387, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 151,
	124, 0, 0, 0, 365, 0, 178, 197, 214, 215,
	366, 386, 465, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 443, 170,
	108, 196, 176, 0, 381, 385, 379, 380, 430, 431,
	475, 476, 477, 453, 376, 0, 383, 384, 0, 460,
	126, 433, 92, 100, 133, 482, 211, 0, 164, 119,
	198, 0, 0, 409, 361, 413, 0, 0, 0, 0,
	0, 0, 0, 373, 374, 171, 417, 412, 438, 440,
	448, 456, 470, 459, 105, 420, 472, 390, 408, 480,
	410, 411, 446, 370, 429, 155, 405, 388, 93, 393,
	363, 400, 364, 391, 422, 117, 389, 461, 432, 131,
	478, 134, 437, 0, 177, 143, 0, 0, 424, 463,
	427, 454, 419, 447, 378, 436, 473, 406, 442, 474,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 441, 468, 402, 483, 445, 362,
	439, 0, 368, 371, 479, 466, 397, 398, 0, 0,
	0, 0, 0, 0, 0, 423, 428, 451, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 394, 0, 435, 0, 0, 0, 375, 369, 0,
	421, 0, 0, 0, 377, 0, 395, 452, 0, 359,
	457, 464, 418, 204, 467, 415, 414, 162, 0, 109,
	0, 183, 121, 407, 132, 449, 481, 471, 425, 462,
	392, 401, 111, 399, 169, 156, 195, 434, 157, 167,
	135, 187, 163, 194, 469, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 367, 360, 396, 455, 458,
	382, 444, 372, 403, 450, 404, 426, 387, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 0, 151, 124, 0, 0,
	0, 365, 0, 178, 197, 214, 215, 366, 386, 465,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 443, 170, 108, 196, 176,
	0, 381, 385, 379, 380, 430, 431, 475, 476, 477,
	453, 376, 0, 383, 384, 0, 460, 126, 433, 92,
	100, 133, 482, 211, 0, 164, 119, 198, 0, 0,
	409, 361, 413, 0, 0, 0, 0, 0, 0, 0,
	373, 374, 171, 417, 412, 438, 440, 448, 456, 470,
	459, 105, 420, 472, 390, 408, 480, 410, 411, 446,
	370, 429, 155, 405, 388, 93, 393, 363, 400, 364,
	391, 422, 117, 389, 461, 432, 131, 478, 134, 437,
	0, 177, 143, 0, 0, 424, 463, 427, 454, 419,
	447, 378, 436, 473, 406, 442, 474, 0, 0, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 441, 468, 402, 483, 445, 362, 439, 0, 368,
	371, 479, 466, 397, 398, 0, 0, 0, 0, 0,
	0, 0, 423, 428, 451, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 394, 0,
	435, 0, 0, 0, 375, 369, 0, 421, 0, 0,
	0, 377, 0, 395, 452, 0, 359, 457, 464, 418,
	204, 467, 415, 414, 162, 0, 109, 0, 183, 121,
	407, 132, 449, 481, 471, 425, 462, 392, 401, 111,
	399, 169, 156, 195, 434, 157, 167, 135, 187, 163,
	194, 469, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 367, 360, 396, 455, 458, 382, 444, 372,
	403, 450, 404, 426, 387, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 0, 151, 124, 0, 0, 0, 365, 0,
	178, 197, 214, 215, 366, 386, 465, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 443, 170, 108, 196, 176, 0, 381, 385,
	379, 380, 430, 431, 475, 476, 477, 453, 376, 0,
	383, 384, 0, 460, 126, 433, 92, 100, 133, 482,
	211, 0, 164, 119, 198, 0, 0, 409, 361, 413,
	0, 0, 0, 0, 0, 0, 0, 373, 374, 171,
	417, 412, 438, 440, 448, 456, 155, 0, 105, 93,
	0, 0, 274, 0, 0, 0, 117, 271, 0, 0,
	131, 316, 134, 0, 0, 177, 143, 0, 0, 0,
	0, 307, 308, 0, 0, 0, 0, 0, 0, 965,
	0, 50, 0, 0, 272, 295, 293, 297, 298, 299,
	300, 0, 0, 106, 296, 301, 302, 303, 966, 0,
	0, 269, 286, 0, 315, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	0, 0, 0, 0, 328, 0, 285, 0, 0, 281,
	282, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 326, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 330, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 304, 317, 327, 323, 324, 321, 322, 320, 319,
	318, 329, 309, 310, 311, 312, 314, 0, 126, 313,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 0,
	155, 0, 0, 93, 898, 0, 274, 0, 0, 0,
	117, 271, 0, 171, 131, 316, 134, 0, 0, 177,
	143, 325, 105, 0, 0, 307, 308, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 295,
	293, 297, 298, 299, 300, 0, 0, 106, 296, 301,
	302, 303, 0, 0, 0, 269, 286, 0, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 265, 0, 0, 0, 328, 0,
	285, 0, 0, 281, 282, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 326, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 330,
	0, 151, 124, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 304, 317, 327, 323, 324,
	321, 322, 320, 319, 318, 329, 309, 310, 311, 312,
	314, 0, 126, 313, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 155, 0, 0, 93, 0, 0,
	274, 0, 0, 0, 117, 271, 0, 171, 131, 316,
	134, 0, 0, 177, 143, 325, 105, 0, 0, 307,
	308, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 534, 272, 295, 293, 297, 298, 299, 300, 0,
	0, 106, 296, 301, 302, 303, 0, 0, 0, 269,
	286, 0, 315, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 0, 0,
	0, 0, 328, 0, 285, 0, 0, 281, 282, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 326, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 330, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 304,
	317, 327, 323, 324, 321, 322, 320, 319, 318, 329,
	309, 310, 311, 312, 314, 0, 126, 313, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 0, 274, 0, 0, 0, 117, 271,
	0, 171, 131, 316, 134, 0, 0, 177, 143, 325,
	105, 0, 0, 307, 308, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 272, 295, 293, 297,
	298, 299, 300, 0, 0, 106, 296, 301, 302, 303,
	0, 0, 0, 269, 286, 0, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 265, 0, 0, 0, 328, 0, 285, 0,
	0, 281, 282, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 326,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 330, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 304, 317, 327, 323, 324, 321, 322,
	320, 319, 318, 329, 309, 310, 311, 312, 314, 0,
	126, 313, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 0, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 155, 0, 0, 93,
	0, 0, 274, 325, 105, 0, 117, 271, 0, 0,
	131, 316, 134, 0, 0, 177, 143, 0, 0, 0,
	0, 307, 308, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 272, 295, 293, 297, 298, 299,
	300, 0, 0, 106, 296, 301, 302, 303, 0, 0,
	0, 269, 286, 0, 315, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	0, 0, 0, 0, 328, 0, 285, 0, 0, 281,
	282, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 326, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 330, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 304, 317, 327, 323, 324, 321, 322, 320, 319,
	318, 329, 309, 310, 311, 312, 314, 0, 126, 313,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 0,
	155, 0, 0, 93, 0, 0, 274, 0, 0, 0,
	117, 271, 0, 171, 131, 316, 134, 0, 0, 177,
	143, 325, 105, 0, 0, 307, 308, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 295,
	293, 297, 298, 299, 300, 0, 0, 106, 296, 301,
	302, 303, 0, 0, 0, 269, 286, 0, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 0, 0, 0, 0, 328, 0,
	285, 0, 0, 281, 282, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 326, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 330,
	0, 151, 124, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 304, 317, 327, 323, 324,
	321, 322, 320, 319, 318, 329, 309, 310, 311, 312,
	314, 0, 126, 313, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 316,
	134, 0, 0, 177, 143, 325, 105, 0, 0, 307,
	308, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 272, 295, 293, 297, 298, 299, 300, 0,
	0, 106, 296, 301, 302, 303, 0, 0, 0, 0,
	286, 0, 315, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 0, 0,
	0, 0, 328, 0, 285, 0, 0, 281, 282, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 326, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 1933, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 330, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 304,
	317, 327, 323, 324, 321, 322, 320, 319, 318, 329,
	309, 310, 311, 312, 314, 0, 126, 313, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 0, 274, 0, 0, 0, 117, 0,
	0, 171, 131, 316, 134, 0, 0, 177, 143, 325,
	105, 0, 0, 307, 308, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 272, 295, 293, 297,
	298, 299, 300, 0, 0, 106, 296, 301, 302, 303,
	0, 0, 0, 0, 286, 0, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 0, 0, 0, 0, 328, 0, 285, 0,
	0, 281, 282, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 326,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 330, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 304, 317, 327, 323, 324, 321, 322,
	320, 319, 318, 329, 309, 310, 311, 312, 314, 0,
	126, 313, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 316, 134, 0,
	0, 177, 143, 325, 105, 0, 0, 307, 308, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 295, 293, 297, 298, 299, 300, 0, 0, 106,
	296, 301, 302, 303, 0, 0, 0, 0, 286, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 0, 0, 0, 0,
	328, 0, 285, 0, 0, 281, 282, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 326, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 330, 0, 151, 124, 0, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 304, 317, 327,
	323, 324, 321, 322, 320, 319, 318, 329, 309, 310,
	311, 312, 314, 0, 126, 313, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 0, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 325, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 577, 578, 570, 571,
	572, 573, 574, 575, 576, 569, 0, 0, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 0,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 171, 131, 0, 134, 0, 0, 177,
	143, 580, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1405, 0, 0, 272, 0,
	1213, 1214, 1215, 0, 0, 0, 0, 106, 1218, 1216,
	302, 303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 1220, 1225, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 1222, 0, 1224, 1223,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1212,
	0, 0, 272, 0, 1213, 1214, 1215, 0, 0, 0,
	0, 106, 1218, 1216, 302, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 0, 1220, 1225, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	1222, 0, 1224, 1223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 0, 1213, 1214,
	1215, 0, 0, 0, 0, 106, 1218, 1216, 302, 303,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 1220,
	1225, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 1222, 0, 1224, 1223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	357, 295, 293, 297, 298, 299, 300, 0, 0, 106,
	296, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 0, 151, 124, 0, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 0, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 742, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 727,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	1814, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 0,
	769, 770, 160, 771, 772, 773, 775, 774, 744, 745,
	746, 750, 748, 747, 749, 721, 723, 202, 719, 722,
	728, 724, 725, 726, 740, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 741, 751, 752, 753,
	754, 755, 756, 757, 758, 0, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	92, 720, 133, 0, 211, 0, 164, 119, 198, 0,
	155, 0, 0, 93, 0, 556, 0, 0, 0, 0,
	117, 0, 0, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 357, 0,
	558, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 553, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 151, 124, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 742, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 727, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 743, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 0, 769, 770,
	160, 771, 772, 773, 775, 774, 744, 745, 746, 750,
	748, 747, 749, 721, 723, 202, 719, 722, 728, 724,
	725, 726, 740, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 741, 751, 752, 753, 754, 755,
	756, 757, 758, 0, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 92, 720,
	133, 0, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 684, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 686, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 23, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 0, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 117, 0, 171, 0, 131, 0, 134,
	0, 0, 177, 143, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 0, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 0, 134, 0, 0, 177, 143, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1045, 0, 0, 0, 0, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1046, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 0, 151, 124,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	23, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	0, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 171, 0, 131, 0, 134, 0,
	0, 177, 143, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 0, 151, 124, 0, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 0, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 357, 0, 0, 832, 0, 0,
	833, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 0,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 705, 0, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 357, 0,
	704, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 151, 124, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 155, 0, 0, 93, 0, 684,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 686, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 682, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 0, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 1886, 117, 0, 171, 0, 131, 0, 134,
	0, 0, 177, 143, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 1382, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 0, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 0, 134, 0, 0, 177, 143, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	1499, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 0, 151, 124,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	0, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 1382, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 1541, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 1540, 200,
	149, 154, 152, 199, 1542, 192, 142, 139, 0, 98,
	190, 140, 138, 1543, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 0, 151, 124, 894, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 0, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 171, 131, 0, 134, 0, 0, 177, 143,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 0,
	151, 124, 0, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 0, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 171, 131, 0, 134,
	0, 0, 177, 143, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 686, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 0, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 0, 134, 0, 0, 177, 143, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 357, 0, 558, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 0, 151, 124,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	0, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 792, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 662, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 0, 151, 124, 0, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 340, 211, 0, 164, 119, 198, 0, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 171, 131, 0, 134, 0, 0, 177, 143,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 0,
	151, 124, 0, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 0, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 171, 131, 0, 134,
	0, 0, 177, 143, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 0, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 0, 134, 0, 0, 177, 143, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 0, 151, 124,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	0, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 0, 151, 124, 0, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 105,
}

var yyPact = [...]int16{
	2749, -1000, -212, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1417, 1462, -1000, -1000, -1000, -1000, -1000, -1000, 1232,
	1050, 352, 405, 148, 18415, 400, 2628, 19023, -1000, 125,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1126, -1000, -1000,
	-1000, -1000, -1000, 1387, 1415, 1216, 1385, 1316, -1000, 8670,
	355, 16591, 18111, 6423, -1000, 976, -162, 367, 18719, 348,
	348, 18719, 18719, 19023, 348, -1000, -59, 388, 19023, -1000,
	19023, 347, 973, 347, 347, 347, 19023, -1000, 455, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 19023, 965, 1345, 370, 5075, 5075, 5075,
	5075, 194, 5075, -20, 1254, -1000, -1000, -1000, -1000, 5075,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	893, 1343, 9292, 9292, 1417, -1000, 1126, -1000, -1000, -1000,
	1338, -1000, -1000, 651, 1444, -1000, 12332, 453, -1000, 9292,
	284, 1163, -1000, -1000, 1163, -1000, -1000, 423, -1000, -1000,
	-1000, 10204, 10204, 10204, 10204, 10204, 10204, 10204, -1000, -1000,
	-1000, -1000, 29, -196, 825, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 452, -1000, 8988, 1163, 1163, 1163,
	1163, 1163, 1163, 1163, 1163, 9292, 1163, 1163, 1163, 1163,
	1163, 1163, 1163, 1163, 1163, 2353, 1163, 1163, 1163, 1163,
	-1000, 17807, 1147, 1245, -1000, -1000, -1000, 1375, 13854, 14766,
	19023, 982, -1000, 1158, 6086, 0, -1000, -1000, -1000, 603,
	451, 14462, -1000, -1000, -1000, 1336, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1042, -1000, 12636, 385, -1000, -1000,
	19023, 1242, 963, 636, 956, 1253, 374, 1374, 19023, -1000,
	17503, 5075, 362, 19023, 1365, 1252, 19023, 954, 939, -1000,
	7434, -1000, 5075, 5075, 5075, 5075, 5075, 5075, 5075, 5075,
	-1000, -1000, -1000, -1000, -1000, -1000, 5075, 5075, -1000, 6,
	-1000, 19023, -1000, -1000, -1000, -1000, 1456, 499, 677, 449,
	1164, -1000, 750, 1387, 893, 1316, 14158, 1265, -1000, -1000,
	19023, -1000, 9292, 9292, 701, -1000, 17199, -1000, -1000, 5749,
	505, 10204, 784, 545, 10204, 10204, 10204, 10204, 10204, 10204,
	10204, 10204, 10204, 10204, 10204, 10204, 10204, 10204, 10204, 819,
	1919, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 932, -1000, 1126, 11724, 11724, 91, 91,
	91, 91, 91, 91, 10508, -1000, -217, -1000, 300, 8062,
	-1000, 6760, 893, 1034, 642, 8988, 8670, 8670, 9292, 9292,
	19327, 19327, 8670, 1378, 580, 642, 19327, -1000, 893, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 77, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 8670, 8670, 8670,
	8670, 241, 19023, -1000, 19327, 16591, 16591, 16591, 16591, 16591,
	-1000, 1285, 1278, -1000, 1300, 1296, 1306, 19023, -1000, 1040,
	13854, 417, 1163, -1000, 16895, -1000, -1000, 241, 1111, 16591,
	19023, -1000, -1000, 5412, 1158, 0, 1143, -1000, -37, -12,
	7758, 6760, 478, -1000, -1000, -1000, -1000, 4401, 694, 587,
	-136, 14, -1000, -1000, -1000, -1000, -1000, 1196, -1000, -1000,
	-1000, 1196, 245, 1196, 1196, 1196, -1000, 1196, 1196, 64,
	64, 64, 64, 64, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1230, 1225, -1000, 1196, 1196, 1196, -1000, 1196, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1218,
	257, 1218, 1198, 1198, -1000, -1000, 13549, 1373, -83, 928,
	5075, 1364, 5075, 19023, 1461, 19023, -1000, -1000, -1000, 12636,
	-1000, 940, 19023, -1000, 19023, -1000, -1000, 19023, 5075, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 592, -1000, -1000, -1000, -1000, 1303,
	9292, 9292, 7097, 9292, -1000, -1000, -1000, 1343, -1000, 1378,
	1410, -1000, 1325, 1315, 8670, -1000, -1000, 505, 530, -1000,
	-1000, 735, -1000, -1000, -1000, -1000, 448, 1163, -1000, 312,
	-1000, -1000, -1000, -1000, 784, 10204, 10204, 10204, 54, 312,
	2008, 116, 823, 91, 63, 63, 96, 96, 96, 96,
	96, 149, 149, -1000, -1000, -1000, -1000, -1000, 1196, 1218,
	257, 1218, 1198, 1198, -1000, -1000, 893, -1000, 845, -1000,
	-1000, 833, 68, -104, -1000, -1000, -1000, 893, 8670, 1034,
	1148, 12332, -1000, -1000, -1000, 9292, -1000, 893, 1013, 1013,
	628, 816, 1156, -1000, 446, 1151, 1013, 8670, 655, -1000,
	9292, 893, -1000, -1000, 1013, 893, 1013, 1013, 1105, 1163,
	-1000, 1141, -1000, 578, 1245, 1229, 1251, 1478, -1000, -1000,
	-1000, -1000, 1267, -1000, 1255, -1000, -1000, -1000, -1000, -80,
	375, 373, 372, 18719, -1000, 1428, 16591, 1102, -1000, -1000,
	1143, 0, -26, -1000, -1000, -1000, -1000, 642, 577, -1000,
	-1000, 917, 1137, 4064, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1224, 721, 18719, 290, 299, 488, 485,
	900, -1000, -1000, -1000, 720, -1000, 18719, 1452, -1000, -1000,
	289, -1000, 288, 631, 842, 19023, 161, 1223, 11116, -1000,
	-226, -1000, 9, -1000, -1000, 795, 64, 64, 1196, 64,
	64, 64, -1000, -1000, 478, 1329, 478, 478, 478, 478,
	841, 841, -104, -104, -1000, -1000, -1000, 822, 1218, -1000,
	-1000, -1000, 809, -1000, 1222, 19023, 18719, 1126, -1000, 6760,
	-1000, -1000, -1000, -1000, -1000, 1370, 1090, -1000, -1000, -1000,
	-1000, 344, -1000, -1000, 836, 1099, 467, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 213, 408,
	-1000, 5075, -1000, 612, 19023, 19023, 1301, 642, 642, 442,
	-1000, -1000, 19023, -1000, -1000, -1000, -1000, 1132, -1000, -1000,
	-1000, 4738, 8670, -1000, 54, 312, 1956, -1000, 10204, 10204,
	-1000, 76, -1000, -196, -1000, -1000, 87, 85, -1000, 1013,
	-1000, 8670, 642, -1000, -1000, -1000, 395, 819, 395, 10204,
	10204, 7097, 10204, 10204, -71, 1107, 609, -1000, 9292, 770,
	-1000, -1000, -1000, -1000, -1000, 1250, 19327, 1163, -1000, 13245,
	18719, 1417, 19327, 9292, 9292, -1000, -1000, 9292, 1213, -1000,
	9292, -1000, -1000, -1000, -1000, 1212, 1163, 1163, 1163, 988,
	-1000, 1417, 1102, -1000, -1000, -1000, -41, -29, -1000, 9292,
	-1000, 4401, -1000, 4401, 15375, -1000, 1465, 1409, 302, 2,
	-1000, 878, 876, -1000, 853, -1000, -1000, 65, -1000, -159,
	117, -14, -1000, -1000, 1163, -1000, 1211, 1367, -1000, 1347,
	808, -1000, 10812, -194, -1000, -1000, -196, -1000, -1000, -1000,
	1163, -1000, 1206, 1203, -1000, 1194, 1163, 441, -1000, -1000,
	-1000, 1064, 478, 478, 64, 478, 478, 478, -1000, 514,
	-1000, -1000, -1000, -1000, 1011, -1000, 1002, -1000, -1000, 1135,
	-1000, 998, 19023, 18719, 1199, 1249, -1000, 1133, -1000, 575,
	1408, 184, 19023, 1461, 1461, -1000, 295, 18719, -1000, 18719,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 18719, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	19023, -1000, -1000, -1000, -1000, -1000, 18719, 313, -1000, -1000,
	839, 9292, -1000, -1000, -1000, 6760, -1000, 1428, 16591, -1000,
	-1000, 893, -1000, 10204, 312, 312, -1000, 833, -1000, -1,
	-4, -1000, -1000, 893, 1196, 1196, -1000, 1196, 1198, -1000,
	-1000, 1196, 126, 1196, 102, 893, 893, 350, 1938, -1000,
	215, 1863, 1163, -66, -1000, 642, 9292, -1000, 1349, 1059,
	1110, -1000, -1000, 8366, 893, 990, 440, 988, 1387, -1000,
	642, 642, 642, 15679, 642, -198, 15679, 15679, 15679, 12940,
	18719, 1387, -1000, -1000, -1000, -1000, 642, 4064, -1000, 985,
	-1000, 246, 1196, 371, 371, -160, 287, 286, 1163, -1000,
	-1000, -1000, -1000, -162, -1000, -1000, 631, -1000, 1194, 9292,
	15679, 133, -1000, 1127, 1054, 11420, -1000, 16287, -1000, 893,
	-1000, 797, -1000, 790, 1053, 6760, -1000, -1000, -1000, 478,
	-1000, -1000, -1000, -1000, -1000, 64, 832, 64, 806, -1000,
	800, 1162, 1247, 15983, 19023, 6760, 4401, 357, 1404, -1000,
	-1000, 1396, -1000, 1076, 18719, -1000, -1000, 293, -1000, 1193,
	-1000, -1000, -1000, -1000, 1355, 18719, -1000, -1000, 642, 1426,
	1124, -1000, 312, -1000, -1000, -1000, -1000, -1000, 244, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10204, 10204,
	-1000, 10204, 10204, 10204, 893, 827, 642, 262, -1000, 1163,
	-1000, -1000, 1101, 18719, 18719, -1000, -1000, 969, -1000, -1000,
	962, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 960, 960,
	960, 417, -1000, -1000, 768, 15375, 1361, -1000, -1000, -1000,
	687, -1000, -1000, 645, 182, 667, -1000, 18719, -162, 9292,
	-1000, 1163, 576, 953, 9292, 1190, 796, -1000, 1043, -1000,
	68, -104, -1000, -1000, -1000, -1000, -1000, -1000, 1163, -1000,
	478, -1000, 478, 1035, 1029, 15983, 18719, 19023, 1026, 1114,
	-1000, 243, 1189, -1000, -1000, 18719, -1000, -1000, -1000, -1000,
	-1000, 169, 2558, 1188, 1184, 15679, 1163, 334, 1419, 1414,
	-1000, -1000, 1441, 1441, 1441, 1441, 92, -1000, -1000, 1443,
	-1000, 1163, -1000, 1126, 429, -1000, 18719, -1000, -1000, -198,
	-1000, -1000, -1000, -80, 1231, 898, 156, -1000, 838, 572,
	824, 569, 559, 556, 552, 533, 525, 519, -1000, -1000,
	-1000, 1440, -1000, -1000, -1000, 1447, 1183, -1000, 1179, 576,
	9292, 189, 1244, 772, -1000, 1021, 994, -1000, -1000, -1000,
	-1000, 949, 1174, 1173, -174, 795, 15983, 1009, -1000, 167,
	2558, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1417, 18719, 18719, 18719, 18719, 361, 9900, 9292, 15375, 15375,
	948, 211, 261, -1000, 9292, 9292, -1000, -1000, -1000, -1000,
	893, 190, -110, 19327, 1110, 893, 18719, -1000, -1000, -1000,
	-1000, 18719, -1000, -135, 898, 18719, -1000, 787, -1000, -1000,
	692, 764, 692, 692, 692, 692, 692, 371, 371, 18719,
	15375, 189, 576, -1000, -68, 1463, -137, 345, -1000, -1000,
	-174, 15983, 15375, 1428, 1172, 945, -81, 18719, 9292, 2326,
	-1000, 1387, 1098, 12028, -1000, -1000, -1000, -1000, 18719, 1442,
	1439, 1431, 1430, 1438, 284, 673, 139, 944, 937, 1242,
	924, -1000, 18719, 1170, 642, 1079, -1000, 1292, -77, -115,
	899, -1000, -1000, 1163, 897, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 631, 631, 892,
	883, -1000, 189, -1000, 371, 371, -1000, -1000, -1000, 166,
	837, 759, 741, 714, 28, -1000, 1407, 1428, 925, 863,
	768, 15679, -174, -1000, -210, -1000, 642, -1000, -1000, 2558,
	1343, 18719, 160, -1000, -1000, 1354, -1000, -1000, -1000, -1000,
	-1000, 2558, 2558, 2558, -1000, 271, -83, -1000, 211, 1310,
	15375, -1000, 1290, -1000, 18719, -1000, 898, -1000, -1000, 311,
	768, -1000, -1000, -1000, 705, -1000, 688, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 15070, 768, 1428, 768, 1231, 861,
	1428, 9292, -214, -1000, -1000, 12636, 1392, 18719, 2310, -1000,
	118, 2229, 146, -1000, 151, -1000, -1000, 208, 859, -88,
	893, -1000, 19023, 1231, -1000, -1000, -1000, 422, 1231, 768,
	-1000, -1000, -1000, 768, 642, 606, 1126, -1000, -1000, -1000,
	515, 624, -1000, 143, -1000, 206, -1000, -111, -1000, 1168,
	-1000, 6760, -1000, -1000, 1231, -1000, -1000, 336, 138, -1000,
	-1000, 1163, -139, 18719, -1000, -1000, -1000, 2558, 9596, -1000,
	852, 2062, 1441, 893, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1724, 7, 26, 1722, 1721, 1720, 1501, 1497, 1492,
	1476, 1719, 1718, 1717, 1715, 1714, 1709, 1708, 1705, 1703,
	1702, 1695, 1694, 1693, 1691, 1690, 1689, 1688, 301, 1686,
	1682, 1681, 109, 1678, 125, 1676, 1675, 78, 213, 77,
	76, 1479, 1674, 52, 123, 112, 1672, 93, 1671, 1667,
	145, 1666, 101, 1661, 1660, 100, 1659, 1657, 41, 19,
	30, 45, 1656, 1655, 113, 6, 1654, 1653, 1652, 32,
	1650, 1648, 94, 36, 34, 46, 42, 1647, 56, 22,
	1646, 92, 1645, 1644, 1643, 1642, 24, 1641, 95, 39,
	20, 12, 1640, 16, 21, 97, 68, 49, 23, 137,
	110, 1639, 67, 102, 89, 1637, 1636, 771, 1635, 1633,
	1630, 1627, 1625, 1621, 621, 801, 1617, 1616, 1614, 85,
	0, 797, 27, 120, 1613, 80, 1612, 2314, 119, 103,
	50, 1611, 60, 239, 75, 1610, 1609, 71, 117, 99,
	116, 111, 1608, 115, 1607, 1606, 1605, 236, 65, 83,
	98, 1604, 1603, 1602, 84, 108, 51, 88, 96, 1600,
	1598, 1595, 1594, 53, 1593, 18, 37, 3, 90, 1591,
	1586, 1585, 1584, 66, 44, 1583, 43, 1582, 33, 14,
	1, 13, 9, 1581, 1579, 1575, 4, 1573, 47, 1572,
	5, 1571, 15, 1563, 1560, 1554, 58, 1549, 1534, 1533,
	28, 1531, 1527, 40, 29, 61, 48, 70, 86, 59,
	1524, 57, 11, 2, 17, 1517, 10, 1515, 1514, 1513,
	25, 31, 1512, 1510, 1508, 1507, 1506, 1504, 54, 1503,
	1487, 1955, 1087, 1484, 1482, 1480, 1478, 488,
}

var yyR1 = [...]uint8{
	0, 229, 230, 230, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 233,
	233, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 217, 217, 216, 218, 218, 12, 12, 12, 12,
	12, 210, 210, 210, 210, 210, 13, 13, 213, 213,
	14, 14, 14, 100, 100, 104, 104, 104, 105, 105,
	105, 105, 135, 135, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 208, 208,
	208, 209, 209, 209, 211, 211, 212, 212, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 215, 215, 194,
	194, 194, 195, 195, 195, 195, 195, 195, 197, 197,
	198, 198, 125, 125, 192, 192, 191, 190, 190, 189,
	189, 188, 199, 199, 20, 170, 171, 171, 171, 171,
	171, 171, 171, 158, 139, 139, 139, 139, 139, 139,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 205, 205, 205, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 201, 201,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 148, 148, 148, 148, 148, 148,
	200, 200, 196, 196, 196, 196, 196, 196, 143, 143,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	142, 142, 142, 142, 142, 142, 142, 142, 144, 144,
	144, 144, 144, 144, 144, 144, 140, 140, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 146, 146, 146, 146, 146, 146, 146, 146, 157,
	157, 147, 147, 155, 155, 156, 156, 156, 154, 154,
	154, 151, 151, 152, 152, 153, 153, 153, 149, 149,
	149, 150, 150, 150, 160, 181, 181, 181, 183, 183,
	184, 184, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 169, 169, 207, 207, 180, 180, 180,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 168,
	168, 178, 178, 179, 179, 176, 176, 176, 177, 163,
	163, 163, 163, 163, 164, 165, 165, 165, 165, 161,
	162, 203, 203, 203, 204, 204, 166, 166, 167, 167,
	172, 172, 172, 173, 173, 173, 174, 174, 174, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 234, 234, 235, 235, 235, 235, 235,
	235, 235, 187, 185, 185, 186, 186, 17, 18, 18,
	18, 18, 18, 19, 19, 21, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 112,
	112, 109, 109, 110, 110, 111, 111, 111, 113, 113,
	113, 136, 136, 136, 23, 23, 25, 25, 26, 27,
	24, 24, 24, 24, 24, 236, 28, 29, 29, 30,
	30, 30, 34, 34, 34, 32, 32, 33, 33, 39,
	39, 38, 38, 40, 40, 40, 40, 124, 124, 124,
	123, 123, 42, 42, 43, 43, 44, 44, 45, 45,
	45, 220, 220, 219, 219, 221, 221, 221, 221, 221,
	221, 57, 57, 93, 93, 93, 96, 96, 46, 46,
	46, 46, 47, 47, 48, 48, 49, 49, 131, 131,
	130, 130, 130, 129, 129, 51, 51, 51, 53, 52,
	52, 52, 52, 54, 54, 56, 56, 55, 55, 58,
	58, 58, 58, 59, 59, 94, 94, 41, 41, 41,
	41, 41, 41, 41, 108, 108, 61, 61, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 71, 71,
	71, 71, 71, 71, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 37, 37, 72, 72, 72,
	78, 73, 73, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 69, 69,
	69, 69, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 237, 237, 70, 70,
	70, 70, 35, 35, 35, 35, 35, 134, 134, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 138, 138, 138, 138, 138, 138, 138,
	138, 82, 82, 36, 36, 80, 80, 81, 83, 83,
	79, 79, 79, 222, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 66, 66, 66, 84, 84, 85,
	85, 86, 86, 87, 87, 88, 89, 89, 89, 90,
	90, 90, 90, 91, 91, 91, 63, 63, 63, 63,
	63, 63, 92, 92, 92, 92, 97, 97, 74, 74,
	76, 76, 75, 77, 98, 98, 102, 99, 99, 103,
	103, 103, 103, 103, 101, 101, 101, 126, 126, 126,
	106, 106, 114, 114, 115, 115, 107, 107, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 117, 117,
	117, 118, 118, 121, 121, 122, 122, 127, 127, 128,
	128, 223, 223, 223, 224, 224, 224, 225, 225, 226,
	227, 227, 228, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	231, 232, 132, 133, 133, 133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 14, 13, 15, 13, 14,
	6, 5, 5, 5, 11, 11, 9, 5, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 1, 4, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 0, 1, 3, 3,
	3, 3, 3, 2, 3, 1, 1, 1, 1, 1,
	2, 2, 3, 2, 4, 4, 2, 2, 3, 2,
	3, 2, 7, 9, 3, 3, 6, 9, 9, 8,
	8, 5, 8, 7, 4, 2, 4, 6, 2, 1,
	1, 2, 1, 1, 1, 3, 3, 1, 1, 2,
	0, 4, 3, 4, 3, 3, 3, 3, 3, 3,
	3, 2, 4, 6, 2, 3, 2, 3, 1, 3,
	0, 2, 0, 3, 3, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 3, 2, 2, 2, 2, 1, 1, 1, 3,
	3, 2, 1, 2, 1, 1, 1, 1, 4, 4,
	4, 4, 4, 1, 5, 2, 2, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 3,
	3, 0, 1, 0, 1, 0, 2, 1, 0, 3,
	3, 0, 1, 2, 6, 0, 1, 4, 1, 2,
	1, 3, 2, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 1, 1, 0, 2, 5,
	2, 3, 3, 2, 3, 2, 2, 3, 4, 1,
	1, 1, 1, 1, 3, 3, 2, 2, 1, 2,
	5, 5, 8, 8, 13, 1, 1, 2, 2, 10,
	7, 0, 1, 1, 0, 3, 0, 1, 1, 3,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	11, 13, 13, 7, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 3,
	6, 4, 2, 4, 2, 2, 2, 2, 3, 1,
	1, 0, 1, 0, 1, 0, 2, 2, 0, 2,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 0, 4, 1, 3, 1, 1, 1, 1, 1,
	1, 4, 8, 1, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 0, 4, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 3, 1, 1, 1, 1, 2, 4, 5,
	6, 4, 4, 4, 6, 6, 6, 6, 8, 8,
	6, 8, 8, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 1, 2, 1, 2,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 3, 1, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 5, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 2, 0, 2, 2, 0, 1, 4,
	1, 3, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -229, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	117, 118, 120, 119, 149, 121, 142, 49, 196, 197,
	199, 200, 26, 143, 144, 147, 148, -231, 8, 303,
	53, -230, 345, -86, 15, -30, 5, -28, -236, -28,
	-28, -28, -28, -28, -170, 53, -125, -199, 158, 295,
	123, 138, 156, 157, 124, 140, 71, -107, 126, 128,
	124, 124, 125, 126, 295, 123, 124, -55, -127, 56,
	-120, 165, 312, 21, 196, 209, 210, 201, 242, 230,
	313, 163, 227, 231, 281, 344, 65, 199, 290, 132,
	169, 145, 222, 225, 224, 216, 213, 28, 248, 319,
	215, 135, 249, 253, 260, 282, 310, 206, 207, 284,
	246, 32, 137, 314, 34, 153, 285, 251, 245, 240,
	244, 205, 239, 38, 219, 255, 254, 256, 280, 233,
	164, 259, 235, 217, 234, 18, 148, 151, 250, 252,
	214, 166, 130, 155, 318, 286, 212, 152, 167, 147,
	289, 335, 162, 200, 283, 208, 292, 37, 266, 226,
	203, 218, 204, 134, 197, 160, 237, 154, 220, 221,
	243, 202, 238, 198, 156, 149, 291, 267, 320, 236,
	232, 228, 229, 161, 126, 158, 159, 273, 274, 275,
	276, 316, 287, 223, 268, 269, 171, 172, 173, 174,
	175, 176, 177, 124, 111, 231, 117, 271, 125, 32,
	155, -136, 124, -109, 159, 273, 274, 275, 276, 56,
	283, 282, 277, -127, 198, -132, -132, -132, -132, -132,
	-2, -90, 17, 16, -5, -3, -231, 6, 21, 22,
	-34, 39, 40, -29, -40, 102, -41, -127, -60, 73,
	-65, 29, 56, -120, 24, -64, -61, -79, -222, -77,
	-78, 111, 112, 100, 101, 108, 74, 113, -69, -67,
	-68, -70, -225, 58, -121, 57, 66, 59, 60, 61,
	62, 67, 68, 69, 293, -75, -231, 43, 44, 304,
	305, 306, 307, 311, 308, 76, 33, 294, 302, 301,
	300, 298, 299, 296, 297, 343, 129, 295, 106, 303,
	257, -107, -43, -44, -45, -46, -57, -78, -231, -55,
	11, -50, -55, -99, -135, 198, -103, 283, 282, -122,
	293, -101, -121, -119, 281, 231, 280, 56, -120, 122,
	179, 324, 72, 23, 25, 264, 270, 178, 75, 111,
	16, 76, 185, 333, 334, 110, 304, 117, 47, 296,
	297, 294, 183, 306, 307, 295, 271, 190, 20, 29,
	10, 26, 143, 22, 104, 119, 180, 79, 80, 146,
	24, 144, 69, 186, 188, 19, 50, 136, 11, 323,
	13, 14, 337, 325, 129, 128, 91, 336, 125, 45,
	8, 113, 27, 88, 41, 141, 189, 43, 89, 17,
	298, 299, 31, 311, 150, 106, 48, 35, 338, 73,
	339, 67, 51, 288, 184, 71, 15, 46, 340, 138,
	187, 90, 120, 303, 44, 181, 341, 123, 182, 6,
	309, 30, 142, 42, 124, 272, 78, 127, 68, 157,
	5, 140, 9, 49, 52, 300, 301, 302, 33, 77,
	12, 139, 315, 70, -171, -158, 56, -203, 333, 334,
	126, -121, -115, 129, -115, -121, -121, -55, -115, 303,
	124, -55, -55, -114, 129, 56, -114, -114, -114, -55,
	114, -55, 56, 30, 295, 56, 155, 124, 156, 126,
	-133, -231, -122, -133, -133, -133, 160, 161, -133, -110,
	278, 51, -133, -232, 55, -91, 19, 31, -41, -127,
	-87, -88, -41, -86, -2, -28, 35, -32, 22, 64,
	11, -124, 72, 71, 88, -123, 23, -121, 58, 114,
	-41, -62, 91, 73, 89, 90, 75, 97, 96, 107,
	100, 101, 102, 103, 104, 105, 106, 98, 99, 110,
	343, 81, 82, 83, 84, 85, 86, 87, 92, 93,
	94, 95, -108, -231, -78, -231, 115, 116, -65, -65,
	-65, -65, -65, -65, -65, -226, 258, -196, 343, -231,
	58, 114, -2, -73, -41, -231, -231, -231, -231, -231,
	-231, -231, -231, -231, -82, -41, -231, -237, -231, -237,
	-237, -237, -237, -237, -237, -237, -138, 111, 231, 145,
	222, -141, -140, 237, 236, 201, 202, 203, 204, 205,
	206, 207, 208, 209, 210, 230, 313, -231, -231, -231,
	-231, -56, 27, -55, 30, 54, -51, -53, -52, -54,
	41, 45, 47, 42, 43, 44, 48, -131, 23, -43,
	-231, -130, 151, -129, 23, -127, 58, -55, -50, -233,
	54, 11, 52, 54, -99, 198, -100, -104, 284, 286,
	81, 114, -126, -121, 58, 29, 30, 55, 54, -159,
	-139, -143, -140, -145, -144, -146, -121, -141, -142, 230,
	313, 227, 231, 228, 233, 234, 235, 111, 232, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	236, 248, 30, 145, 220, 221, 222, 225, 224, 226,
	223, 249, 250, 251, 252, 253, 254, 255, 256, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 212,
	213, 215, 216, 217, 219, 218, 125, -55, -192, 52,
	56, 73, 56, 51, -208, 51, 19, 178, 179, 23,
	-55, -55, 288, -133, 127, -55, 24, 51, -55, 56,
	56, -128, -127, -119, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -112, 272, 279, -55, 9, 91,
	54, 18, 114, 54, -89, 25, 26, -90, -232, -34,
	-66, -121, 59, 62, -33, 42, -55, -41, -41, -71,
	67, 73, 68, 69, -123, 102, -128, -122, -119, -65,
	-72, -75, -78, 63, 91, 89, 90, 75, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -134, 56, 58, -143, -138, -141, 212,
	213, 215, 216, 217, 219, 218, 56, -64, -121, -64,
	-121, 346, 231, 221, 261, 237, 246, -39, 22, -73,
	-38, -41, -40, -122, -232, 54, -232, -2, -38, -38,
	-41, -41, -79, -121, -127, -79, -38, -32, -80, -81,
	77, -79, -232, 229, -38, -39, -38, -38, -95, 151,
	-55, -98, -102, -79, -44, -45, -45, -44, -45, 41,
	41, 41, 46, 41, 46, 41, -52, -127, -232, -58,
	49, 128, 50, -231, -129, -95, 52, -43, -55, -103,
	-100, 54, 285, 287, 288, 51, 70, -41, -122, -150,
	111, 110, -172, -173, -174, -122, 58, 59, -158, -160,
	-163, -161, -162, -175, -164, 132, 130, 134, 135, 140,
	-168, 125, 141, 67, 73, -205, 132, 51, 264, 270,
	130, 141, 140, 344, 65, 133, 323, 325, 29, -153,
	346, 258, -151, 267, -147, 53, -147, -147, 229, -147,
	-147, -147, -147, -147, -149, 231, -149, -149, -149, -149,
	53, 53, -147, -147, -147, -147, -155, 53, 214, -155,
	-155, -156, 53, -156, -121, 51, 195, 23, -190, 315,
	-191, 56, -133, 24, -133, -55, -211, -209, 8, 9,
	10, -55, -139, -116, 122, 119, 120, -187, 118, 264,
	231, 65, 29, 15, 304, 151, 320, 56, 152, -55,
	-55, -55, -133, -111, 11, 91, 37, -41, -41, -128,
	-88, -91, -106, 19, 11, 33, 33, -38, 67, 68,
	69, 114, -231, -72, -65, -65, -65, -37, 146, 72,
	-232, -227, -228, 58, 229, -154, 315, 316, -232, -38,
	-232, 54, -41, -232, -232, -232, 54, 52, 23, 54,
	11, 114, 54, 11, -232, -38, -83, -81, 79, -41,
	-232, -232, -232, -232, -232, -63, 30, 33, -2, -231,
	-231, -59, 54, 12, 81, -48, -47, 51, 52, -49,
	51, -47, 41, 41, -220, 315, 125, 125, 125, -96,
	-121, -59, -43, -59, -104, -105, 289, 286, 292, 81,
	56, 54, -174, 81, 53, -204, 51, 73, -166, -121,
	141, -168, -168, 56, -168, 56, 125, 56, 67, 19,
	-121, 9, 141, 141, -204, 58, -55, -201, 324, 16,
	53, -206, 53, 58, 59, 60, 67, -148, 66, -61,
	259, -69, 294, 297, 296, 260, -121, -127, 347, -152,
	268, 59, -149, -149, -147, -149, -149, -149, -150, 30,
	-150, -150, -150, -150, -157, 58, -157, -154, -154, 59,
	-155, 59, 51, 52, -55, -121, -2, -189, -188, -122,
	-194, 23, 51, 54, -208, -132, -125, 132, -235, 158,
	131, 136, 135, 56, 130, 134, 151, -193, 158, 131,
	132, 136, 135, 56, 125, 141, 130, 134, 151, 140,
	-117, -118, 127, 23, 125, 141, 151, 122, -133, -113,
	89, 12, -127, -127, 38, 114, -55, -42, 11, 102,
	-122, -39, -37, 72, -65, -65, 347, 54, -196, 220,
	220, -232, -40, -137, 111, 227, 145, 222, 216, 246,
	247, 233, 266, 220, 267, -134, -137, -65, -65, -122,
	-65, -65, 312, -86, 80, -41, 78, -97, 51, -98,
	-74, -76, -75, -231, -2, -92, -121, -96, -86, -102,
	-41, -41, -41, 53, -41, 53, -231, -231, -231, -232,
	54, -86, -59, 286, 290, 291, -41, -173, -174, -179,
	-176, -121, 141, 10, 9, 19, 136, 130, 344, 56,
	56, 56, -203, 140, 335, -205, 344, -148, 260, -231,
	53, 23, 29, 59, -206, 53, -196, 343, -196, -231,
	-147, 53, -147, 53, 53, 114, 55, -150, -150, -149,
	-150, -150, -150, 56, 111, 55, 54, 55, 54, 55,
	54, -55, -121, 53, 51, 54, 81, -195, 19, 166,
	167, -55, -209, -211, -234, 125, 141, -121, -132, -121,
	-132, -121, -55, -132, -121, 132, -163, 58, -41, -59,
	-43, -232, -65, -228, 269, 269, -232, -147, -147, -147,
	-156, -147, 207, -147, 207, -232, -232, -232, 54, 19,
	-232, 54, 19, -231, -36, 309, -41, 28, -97, 54,
	-232, -232, -232, 54, 114, -232, -90, -93, -121, 141,
	-219, -221, 337, 338, 339, 340, 341, 342, -93, -93,
	-93, -130, -121, -90, 55, 54, -147, -177, 262, -147,
	-165, 162, 163, 30, 164, -165, 335, 141, 141, -231,
	-203, -204, -41, -93, 53, 325, 54, 55, -206, -121,
	231, 221, 237, 246, -232, 55, 55, 55, -122, -150,
	-149, 58, -149, 59, 59, 53, 52, 51, -178, -179,
	-69, -121, -55, -188, -174, 127, 21, 6, 8, 9,
	10, 19, 23, -121, 140, 53, 27, -121, -84, 13,
	-149, 56, -65, -65, -65, -65, -65, -232, 58, 141,
	-76, 33, -2, -231, -121, -121, 54, 55, 55, 54,
	-232, -232, -232, -58, -181, -183, 315, -182, 52, 137,
	65, 171, 172, 173, 174, 175, 176, 177, -176, -89,
	-204, 51, 67, 165, -204, 51, -166, -121, -203, -41,
	-231, -232, 55, -41, 53, 59, 55, -150, -150, 55,
	55, -178, -121, -55, 55, 53, 53, -167, -121, 180,
	-212, -214, -7, -9, -8, -11, -10, -12, -13, -14,
	-3, 20, 184, 185, 190, 186, 139, 129, 53, 53,
	-93, -231, 130, -85, 14, 16, -232, -232, -232, -232,
	-35, 91, 315, 9, -74, -2, 114, -121, -221, -220,
	-180, 51, -182, 315, 53, 317, 56, -169, 81, 58,
	81, 81, 81, 81, 81, 81, 81, 9, 10, 53,
	53, -232, -41, -200, 164, 51, 55, -202, 55, 55,
	55, 53, 53, -94, 336, -178, -197, 54, 52, 181,
	-214, -86, -217, -121, -216, -121, -121, -121, -210, 35,
	187, 188, 189, -60, -65, -41, -60, -179, -179, 55,
	-185, -186, 151, 141, -41, -73, -232, 313, 48, 318,
	-98, -232, -121, -121, -184, -182, -121, 59, -207, 51,
	70, 59, -207, -207, -207, -207, -207, -165, -165, -167,
	-179, -200, -232, 310, 10, 9, 321, 322, 55, 197,
	327, 328, 150, 329, 164, 330, 331, -94, -178, -179,
	-59, 53, 55, -198, 315, -121, -41, -215, -214, 196,
	-90, 54, -218, -139, 182, -121, 11, 11, 11, 11,
	-214, 196, 78, 196, 55, 55, -192, -232, 54, -121,
	53, 38, 314, 319, -231, 55, 54, -204, -204, 55,
	55, -200, -165, -165, 315, 59, 16, 59, 59, 59,
	59, 328, 150, 330, 16, -59, 55, 55, -181, -93,
	-94, 344, -214, -91, -216, -121, 183, 27, -213, -214,
	-212, -213, -223, 191, 73, -190, -186, 33, -179, 38,
	-121, -182, 133, -181, 59, 59, 332, -127, -181, -59,
	-181, -180, 55, -59, -41, 345, 19, -121, 80, -214,
	345, 80, -224, 192, 191, 153, 55, 315, -232, -55,
	-180, 114, -180, -181, -181, 80, -2, 80, 79, 194,
	193, 154, 318, 53, -122, -180, 129, 196, -231, 319,
	-167, -213, -65, 150, 55, 80, -232, -232,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 751, 0, 485, 485, 485, 485, 485, 485, 0,
	-2, 806, 0, 0, 0, 0, -2, 475, 476, 0,
	478, 479, 1102, 1102, 1102, 1102, 1102, 0, 33, 34,
	1100, 1, 3, 759, 0, 0, 489, 492, 487, 837,
	806, 0, 0, 0, 84, 146, 371, 0, 0, 804,
	804, 0, 0, 0, 804, 133, 0, 0, 0, 807,
	0, 802, 0, 802, 802, 802, 0, 434, 567, 827,
	828, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 0, 0, 0, 0, 1103, 1103, 1103,
	1103, 0, 1103, 463, 452, 454, 455, 456, 457, 1103,
	472, 473, 462, 474, 477, 480, 481, 482, 483, 484,
	27, 763, 837, 837, 751, 29, 0, 485, 490, 491,
	495, 493, 494, 486, 0, 503, 507, 0, 577, 837,
	582, 584, -2, -2, 0, 623, 624, 625, 626, 627,
	628, 837, 837, 837, 837, 837, 837, 837, 653, 654,
	655, 656, 0, 222, 730, 737, 738, 739, 740, 741,
	742, 743, 586, 587, 0, 783, 837, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 686, 686, 686,
	686, 686, 686, 686, 686, 0, 0, 0, 0, 0,
	838, 0, 0, 514, 516, 517, 518, 548, 0, 550,
	0, 0, 41, 45, 0, 1070, 787, -2, -2, 0,
	0, 0, 825, 826, -2, 980, -2, 823, 824, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 0, 147, 0, 0, 372, 373,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 143,
	0, 1103, 0, 0, 0, 0, 0, 0, 0, 433,
	0, 435, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103,
	444, 1104, 1105, 445, 446, 447, 1103, 1103, 449, 0,
	464, 0, 458, 28, 1101, 22, 0, 0, 760, 0,
	752, 753, 756, 759, 27, 492, 0, 497, 496, 488,
	0, 504, 837, 837, 0, 508, 0, 510, 511, 0,
	580, 837, 0, 0, 837, 837, 837, 837, 837, 837,
	837, 837, 837, 837, 837, 837, 837, 837, 837, 0,
	0, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 583, 0, 597, 0, 0, 0, 645, 646,
	647, 648, 649, 650, 0, 657, 0, 735, 0, -2,
	736, 0, 27, 0, 621, 837, 837, 837, 837, 837,
	0, 0, 837, 495, 0, 722, 0, 677, 0, 678,
	679, 680, 681, 682, 683, 684, 685, 713, 0, 715,
	716, 717, 718, 719, 720, 230, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 256, 257, 837, -2, 837,
	837, 43, 0, 566, 0, 0, 0, 0, 0, 0,
	555, 0, 0, 558, 0, 0, 0, 0, 549, 0,
	0, 569, 1034, 551, 0, 553, 554, -2, 0, 0,
	0, 39, 40, 0, 46, 1070, 48, 73, 0, 0,
	837, 0, 311, 797, 798, 799, 795, 380, 0, 153,
	305, 301, 155, 156, 157, 158, 159, 291, 229, 256,
	257, 291, 291, 291, 291, 291, 263, 291, 291, 308,
	308, 308, 308, 308, 272, 273, 274, 275, 276, 277,
	278, 995, 0, 248, 291, 291, 291, 252, 291, 254,
	255, 281, 282, 283, 284, 285, 286, 287, 288, 230,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 293,
	293, 293, 295, 295, 246, 247, 0, 0, 137, 0,
	1103, 0, 1103, 0, 0, 0, 98, 99, 100, 0,
	144, 0, 0, 400, 0, 428, 803, 0, 1103, 431,
	432, 568, 829, 830, 436, 437, 438, 439, 440, 441,
	442, 443, 448, 451, 465, 459, 460, 453, 764, 0,
	837, 837, 0, 837, 755, 757, 758, 763, 30, 495,
	0, 744, 0, 0, 837, 498, 25, 578, 579, 581,
	598, 0, 600, 602, 509, 505, 0, 731, -2, 588,
	589, 617, 618, 619, 0, 837, 837, 837, 615, 593,
	0, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 643, 697, 698, 644, 652, 291, 293,
	293, 293, 295, 295, 246, 247, 0, 641, 0, 642,
	651, 0, 0, 298, 225, 226, 227, 0, 837, 0,
	500, 507, 501, 733, 620, 837, 782, 27, 0, 0,
	0, 0, 0, 730, 0, 0, 0, 837, 728, 725,
	837, 0, 687, 714, 0, 0, 0, 0, 0, 0,
	565, 573, 784, 0, 515, 544, 546, 0, 541, 556,
	557, 559, 0, 561, 0, 563, 564, 519, 520, 521,
	0, 0, 0, 0, 552, 573, 0, 573, 42, 788,
	47, 0, 0, 76, 77, 789, 790, 791, 0, 793,
	312, 0, 145, 381, 383, 386, 387, 388, 148, 149,
	150, 151, 152, 0, 374, 376, 0, 0, 0, 0,
	0, 349, 350, 161, 0, 163, 0, 0, 166, 167,
	0, 169, 171, 374, 0, 0, 0, 0, 0, 160,
	0, 307, 303, 302, 228, 0, 308, 308, 291, 308,
	308, 308, 265, 266, 311, 0, 311, 311, 311, 311,
	0, 0, 298, 298, 251, 253, 240, 0, 293, 242,
	243, 244, 0, 245, 0, 0, 0, 0, 91, 0,
	135, 136, 92, 805, 93, 119, 0, 104, 101, 102,
	103, 0, 97, 1102, 132, 0, 818, 401, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 0, 0,
	427, 1103, 430, 468, 0, 0, 0, 761, 762, 0,
	754, 23, 0, 800, 801, 745, 746, 512, 599, 601,
	603, 0, -2, 590, 615, 594, 0, 591, 837, 837,
	585, 0, 840, 222, 223, 224, 0, 0, 658, 0,
	661, 837, 622, -2, 662, 663, 0, 0, 0, 837,
	837, 0, 837, 837, 0, 751, 0, 726, 837, 0,
	676, 688, 689, 690, 691, 776, 0, 0, -2, 0,
	0, 751, 0, 837, 837, 538, 545, 837, 0, 539,
	837, 540, 560, 562, 531, 0, 0, 0, 0, 0,
	536, 751, 573, 38, 74, 75, 0, 0, 81, 837,
	313, 0, 384, 0, 0, 359, 0, 0, 0, 377,
	340, 0, 0, 343, 0, 345, -2, 371, 162, 0,
	0, 0, 168, 170, 0, 174, 175, 0, 198, 0,
	0, 185, 0, 222, 189, 190, 222, 192, 193, 194,
	1028, 197, 291, 291, 218, 1001, 0, 0, 306, 154,
	304, 0, 311, 311, 308, 311, 311, 311, 267, 0,
	268, 269, 270, 271, 0, 289, 0, 249, 250, 0,
	241, 0, 0, 0, 0, 0, -2, 138, 139, 0,
	122, 0, 0, 0, 0, 389, 0, 0, 1102, 0,
	415, 416, 417, 418, 419, 420, 421, 1102, 0, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 412,
	0, 1102, 819, 820, 821, 822, 0, 0, 429, 450,
	0, 837, 466, 467, 765, 0, 24, 573, 0, 506,
	732, 0, 592, 837, 616, 595, 839, 0, 842, 0,
	0, 659, 502, 0, 291, 291, 702, 291, 295, 705,
	706, 291, 708, 291, 711, 0, 0, 0, 0, 731,
	0, 0, 0, 723, 675, 729, 837, 31, 0, 776,
	766, 778, 780, 837, 27, 0, 772, 0, 759, 785,
	574, 786, 542, 0, 547, 0, 0, 0, 0, 550,
	0, 759, 37, 78, 79, 80, 792, 382, 385, 0,
	353, 291, 291, 0, 0, 0, 0, 0, 0, 341,
	342, 344, 347, 371, 184, 164, 374, 165, 0, 837,
	0, 0, 199, 0, 0, 0, 188, 0, 191, 0,
	214, 0, 216, 0, 0, 0, 292, 258, 259, 311,
	260, 261, 262, 309, 310, 308, 0, 308, 0, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	121, 0, 105, 0, 0, 413, 414, 0, 394, 0,
	395, 397, 398, 399, 0, 376, 393, 469, 470, 747,
	513, 660, 596, 841, 299, 300, 664, 699, 308, 703,
	704, 707, 709, 710, 712, 666, 665, 667, 837, 837,
	670, 837, 837, 837, 0, 0, 727, 0, 32, 0,
	781, -2, 0, 0, 0, 44, 35, 0, 533, 534,
	0, 523, 525, 526, 527, 528, 529, 530, 0, 0,
	0, 569, 537, 36, 315, 0, 756, 357, 358, 356,
	374, 365, 366, 0, 0, 374, 375, 376, 371, 837,
	348, 0, 0, 0, 837, 181, 0, 186, 0, 196,
	980, 298, 226, 227, 195, 215, 217, 219, 0, 264,
	311, 290, 311, 0, 0, 0, 0, 0, 0, 351,
	352, 291, 0, 140, 141, 0, 123, 124, 125, 126,
	127, 0, 0, 0, 0, 0, 0, 377, 749, 0,
	700, 701, 0, 0, 0, 0, 692, 674, 724, 0,
	779, 0, -2, 0, 774, 773, 0, 543, 522, 0,
	570, 571, 572, 521, 337, 316, 0, 318, 0, 333,
	0, 0, 0, 0, 0, 0, 0, 0, 354, 355,
	360, 0, 367, 368, 361, 0, 0, 377, 0, 0,
	837, 220, 176, 0, 200, 0, 0, 279, 280, 294,
	297, 0, 0, 0, 575, 1100, 0, 128, 378, 0,
	96, 106, 108, 109, 110, 111, 112, 113, 114, 115,
	751, 0, 0, 0, 0, 61, 837, 837, 0, 0,
	0, 0, 0, 26, 837, 837, 668, 669, 671, 672,
	0, 0, 0, 0, 769, 27, 0, 535, 524, 532,
	314, 0, 319, 0, 0, 0, 322, 0, 334, 324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 172, 0, 0, 0, 0, 183, 187,
	575, 0, 0, 573, 0, 0, 130, 0, 837, 0,
	107, 759, 49, 54, 51, 56, 57, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 577, 0, 0, 134,
	0, 423, 0, 0, 750, 748, 673, 0, 0, 0,
	777, -2, 775, 338, 0, 320, 325, 323, 326, 335,
	336, 327, 328, 329, 330, 331, 332, 374, 374, 0,
	0, 370, 220, 221, 0, 0, 179, 180, 182, 0,
	0, 0, 0, 0, 0, 211, 0, 573, 0, 0,
	315, 0, 575, 94, 0, 379, 129, 95, 117, 0,
	763, 0, 0, 53, 55, 59, 62, 63, 64, 65,
	66, 0, 0, 0, 390, 831, 137, 422, 0, 0,
	0, 693, 0, 696, 0, 317, 0, 362, 363, 0,
	315, 173, 177, 178, 0, 202, 0, 204, 205, 206,
	207, 208, 209, 210, 0, 315, 573, 315, 337, 0,
	573, 837, 0, 116, 52, 0, 0, 0, 0, 68,
	0, 0, 834, 832, 0, 396, 424, 0, 0, 694,
	0, 321, 0, 337, 201, 203, 212, 0, 337, 315,
	88, 86, 576, 315, 131, 0, 0, 60, 67, 69,
	0, 71, 392, 0, 833, 0, 391, 0, 339, 0,
	369, 0, 85, 89, 337, 118, -2, 0, 0, 835,
	836, 0, 0, 0, 213, 87, 70, 0, 837, 695,
	0, 0, 0, 0, 364, 72, 425, 426,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 105, 97, 3,
	53, 55, 102, 100, 54, 101, 114, 103, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 345,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 346, 3, 347, 107, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 96, 3, 108,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 98, 99, 104,
	106, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:383
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:388
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:389
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:393
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:416
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:424
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:428
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:434
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:441
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:447
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:451
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:457
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:461
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:468
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:480
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:492
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:496
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:502
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:508
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:512
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:516
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:521
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:522
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:526
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:530
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:535
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:539
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:545
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:549
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:553
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:557
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:563
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:567
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:580
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:584
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:590
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:595
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:599
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:605
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:612
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:619
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:626
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:634
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:644
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:648
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:652
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:656
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:660
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:666
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:673
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:683
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:687
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:694
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:703
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:711
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:722
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:726
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:732
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:736
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:740
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:746
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:750
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:754
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:758
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:764
		{
			yyVAL.str = SessionStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:768
		{
			yyVAL.str = GlobalStr
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:774
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 85:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:779
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 86:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:799
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 87:
		yyDollar = yyS[yypt-15 : yypt+1]
//line parser.y:819
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[6].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[12].columns,
					Where:     NewWhere(WhereStr, yyDollar[13].expr),
					Options:   yyDollar[14].indexOptions,
					Partition: yyDollar[15].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 88:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:840
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 89:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:856
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[11].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:872
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:880
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:888
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:892
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:896
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 95:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:908
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 96:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:919
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:930
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:942
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:946
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:950
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:956
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:960
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:964
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:970
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:974
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:980
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:984
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:990
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1001
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1013
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1020
		{
			yyVAL.bytes = nil
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1024
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1028
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1033
		{
			yyVAL.bytes = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1037
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1041
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1045
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1049
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1053
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1058
		{
			yyVAL.expr = nil
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1062
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1067
		{
			yyVAL.expr = nil
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1071
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1076
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1080
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1085
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1089
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1095
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1100
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1105
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1111
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1116
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1122
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1127
		{
			yyVAL.bytes = nil
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1131
		{
			yyVAL.bytes = nil
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1137
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1144
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1150
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1154
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1159
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1163
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1167
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1171
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1175
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1181
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1187
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1198
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1204
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1216
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1221
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1226
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1231
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1236
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1241
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1246
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1251
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1256
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1261
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1266
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1271
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1280
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1290
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1295
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1300
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1307
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1314
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1322
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1327
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1333
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1339
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1345
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1351
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1358
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1362
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1366
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1372
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1376
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1380
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1384
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1388
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1392
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1396
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1400
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1404
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1408
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1414
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1418
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1423
		{
			yyVAL.sequence = &Sequence{}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1427
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1432
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1437
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1442
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1447
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1452
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1457
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1462
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1467
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1472
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1477
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1482
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 213:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1487
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1494
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1498
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1502
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1506
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1510
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1514
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1519
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1523
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1528
		{
			yyVAL.bytes = nil
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1539
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1544
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1550
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1570
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1578
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1592
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1598
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1604
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1628
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1632
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1638
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1642
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1646
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1650
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1654
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1658
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1662
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1666
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1672
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1676
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1702
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1754
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 280:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1811
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1816
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1821
		{
			yyVAL.optVal = nil
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1825
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1830
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 294:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1834
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1842
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1846
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1852
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1860
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1864
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1868
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1873
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1877
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1882
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1886
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1891
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1895
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1899
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1904
		{
			yyVAL.str = ""
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1908
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1912
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1917
		{
			yyVAL.str = ""
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1921
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1925
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1931
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1936
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1940
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1944
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1950
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1954
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1960
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1964
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1970
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1974
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1979
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1983
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1987
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1991
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1995
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1999
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2003
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2007
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2011
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2017
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2021
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2027
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2031
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2037
		{
			yyVAL.indexPartition = nil
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2041
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 339:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2045
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2051
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2055
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2059
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2063
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2067
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2071
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2075
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2079
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2083
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2089
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2093
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2099
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2104
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2110
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2114
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2120
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2125
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2129
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2139
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 360:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2144
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 361:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2151
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 362:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2158
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 363:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2165
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 364:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2174
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(String(yyDollar[10].tableName)),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2186
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2190
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2194
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2198
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 369:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2204
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2215
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2225
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2229
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2233
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2239
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2243
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2248
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2255
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2259
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2264
		{
			yyVAL.str = ""
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2268
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2272
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2280
		{
			yyVAL.str = yyDollar[1].str
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2284
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2288
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2294
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2298
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2302
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2308
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 390:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2312
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 391:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2326
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 392:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2340
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 393:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2359
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 394:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2368
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2372
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 396:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2376
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 397:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2389
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2399
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 399:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2404
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2409
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2413
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 422:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2445
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2451
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2455
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 425:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2461
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 426:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2465
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2471
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2477
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 429:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2485
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 430:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2490
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2498
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2502
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2508
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2512
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2517
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2523
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2527
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2531
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2536
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2540
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2544
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2548
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2552
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2556
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2560
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2564
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2568
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2572
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2576
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2580
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2590
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2594
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2598
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2602
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2606
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2610
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2614
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2624
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2630
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2634
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2640
		{
			yyVAL.str = ""
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2644
		{
			yyVAL.str = "extended "
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2650
		{
			yyVAL.str = ""
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2654
		{
			yyVAL.str = "full "
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2660
		{
			yyVAL.str = ""
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2664
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2668
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2674
		{
			yyVAL.showFilter = nil
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2678
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2682
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2688
		{
			yyVAL.str = ""
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2692
		{
			yyVAL.str = SessionStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2696
		{
			yyVAL.str = GlobalStr
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2702
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2706
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2712
		{
			yyVAL.statement = &Begin{}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2716
		{
			yyVAL.statement = &Begin{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2722
		{
			yyVAL.statement = &Commit{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2728
		{
			yyVAL.statement = &Rollback{}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2734
		{
			yyVAL.statement = &OtherRead{}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2738
		{
			yyVAL.statement = &OtherRead{}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2742
		{
			yyVAL.statement = &OtherRead{}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2746
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2750
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2755
		{
			setAllowComments(yylex, true)
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2759
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2765
		{
			yyVAL.bytes2 = nil
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2769
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2775
		{
			yyVAL.str = UnionStr
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2779
		{
			yyVAL.str = UnionAllStr
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2783
		{
			yyVAL.str = UnionDistinctStr
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2788
		{
			yyVAL.str = ""
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2792
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2796
		{
			yyVAL.str = SQLCacheStr
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2801
		{
			yyVAL.str = ""
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2805
		{
			yyVAL.str = DistinctStr
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2810
		{
			yyVAL.str = ""
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2814
		{
			yyVAL.str = StraightJoinHint
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2819
		{
			yyVAL.selectExprs = nil
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2823
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2829
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2833
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2839
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2843
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2847
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2851
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2856
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2860
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2864
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2871
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2876
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2880
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2886
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2890
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2900
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2904
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2908
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2913
		{
			yyVAL.strs = []string{}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2917
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2923
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2927
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2933
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2937
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2941
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2945
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2949
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2953
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2959
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 532:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2963
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2969
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2974
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2978
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2984
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2988
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3001
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3005
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3009
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3013
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3019
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3021
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3025
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3027
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3031
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3033
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3036
		{
			yyVAL.empty = struct{}{}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3038
		{
			yyVAL.empty = struct{}{}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3041
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3045
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3049
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3056
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3062
		{
			yyVAL.str = JoinStr
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3066
		{
			yyVAL.str = JoinStr
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3070
		{
			yyVAL.str = JoinStr
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3076
		{
			yyVAL.str = StraightJoinStr
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3082
		{
			yyVAL.str = LeftJoinStr
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3086
		{
			yyVAL.str = LeftJoinStr
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3090
		{
			yyVAL.str = RightJoinStr
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3094
		{
			yyVAL.str = RightJoinStr
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3100
		{
			yyVAL.str = NaturalJoinStr
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3104
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3114
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3118
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3124
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3128
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3133
		{
			yyVAL.indexHints = nil
		}
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3137
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3141
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3145
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3150
		{
			yyVAL.expr = nil
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3154
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3159
		{
			yyVAL.columns = nil
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3163
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3169
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3173
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3177
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3181
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3185
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3189
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3193
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3199
		{
			yyVAL.str = ""
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3203
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3209
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3213
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3219
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3223
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3227
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3231
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3235
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3239
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3243
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3247
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 596:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3251
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3255
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3261
		{
			yyVAL.str = IsNullStr
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3265
		{
			yyVAL.str = IsNotNullStr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3269
		{
			yyVAL.str = IsTrueStr
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3273
		{
			yyVAL.str = IsNotTrueStr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3277
		{
			yyVAL.str = IsFalseStr
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3281
		{
			yyVAL.str = IsNotFalseStr
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3287
		{
			yyVAL.str = EqualStr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3291
		{
			yyVAL.str = LessThanStr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3295
		{
			yyVAL.str = GreaterThanStr
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3299
		{
			yyVAL.str = LessEqualStr
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3303
		{
			yyVAL.str = GreaterEqualStr
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3307
		{
			yyVAL.str = NotEqualStr
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3311
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3315
		{
			yyVAL.str = PosixRegexStr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3319
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3323
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3327
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3332
		{
			yyVAL.expr = nil
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3336
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3342
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3346
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3350
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3356
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3362
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3366
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3372
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3376
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3380
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3384
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3388
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3392
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3396
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3400
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3404
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3408
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3412
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3416
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3420
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3424
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3428
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3432
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3436
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3440
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3444
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3448
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3452
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3456
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3460
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3464
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3468
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3476
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3490
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3494
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3498
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3506
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3514
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3524
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 659:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3528
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 660:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3532
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3536
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3546
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3550
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 664:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3554
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 665:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3558
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 666:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3562
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 667:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3566
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 668:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3570
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 669:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3574
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 670:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3578
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 671:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3582
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 672:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3586
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 673:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3590
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 674:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3594
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 675:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3598
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3602
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3612
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3616
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3620
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3624
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3629
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3634
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3639
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3644
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3648
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3662
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 689:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3666
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3670
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3674
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3680
		{
			yyVAL.str = ""
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3684
		{
			yyVAL.str = BooleanModeStr
		}
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3688
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 695:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3692
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3696
		{
			yyVAL.str = QueryExpansionStr
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3702
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3706
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3712
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3716
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3720
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3724
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3728
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3732
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3738
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3742
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3746
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3750
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3754
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3758
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3762
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3766
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3772
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3776
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3780
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3784
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3788
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3792
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3796
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3800
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3805
		{
			yyVAL.expr = nil
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3809
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3814
		{
			yyVAL.str = string("")
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3818
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3824
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3828
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3834
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3839
		{
			yyVAL.expr = nil
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3843
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3849
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3853
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 732:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3857
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3863
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3869
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3873
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3878
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3883
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3887
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3891
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3895
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3899
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3903
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3907
		{
			yyVAL.expr = &NullVal{}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3913
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3922
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3926
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3931
		{
			yyVAL.exprs = nil
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3935
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 749:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3940
		{
			yyVAL.expr = nil
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3944
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3949
		{
			yyVAL.orderBy = nil
		}
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3953
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3959
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3963
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3969
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3974
		{
			yyVAL.str = AscScr
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3978
		{
			yyVAL.str = AscScr
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3982
		{
			yyVAL.str = DescScr
		}
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3987
		{
			yyVAL.limit = nil
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3991
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3995
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 762:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3999
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 763:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4004
		{
			yyVAL.str = ""
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4008
		{
			yyVAL.str = ForUpdateStr
		}
	case 765:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4012
		{
			yyVAL.str = ShareModeStr
		}
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4025
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4029
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4033
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 769:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4038
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 770:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4042
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 771:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4046
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4053
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4057
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4061
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 775:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4065
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4070
		{
			yyVAL.updateExprs = nil
		}
	case 777:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4074
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4080
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4084
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4090
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4094
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4100
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4106
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4116
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4120
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4126
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4132
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4136
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4142
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4146
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4150
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 792:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4155
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4159
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4166
		{
			yyVAL.bytes = []byte("charset")
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4173
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4177
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4181
		{
			yyVAL.expr = &Default{}
		}
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4190
		{
			yyVAL.byt = 0
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4192
		{
			yyVAL.byt = 1
		}
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4195
		{
			yyVAL.empty = struct{}{}
		}
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4197
		{
			yyVAL.empty = struct{}{}
		}
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4200
		{
			yyVAL.str = ""
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4202
		{
			yyVAL.str = IgnoreStr
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4206
		{
			yyVAL.empty = struct{}{}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4208
		{
			yyVAL.empty = struct{}{}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4210
		{
			yyVAL.empty = struct{}{}
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4212
		{
			yyVAL.empty = struct{}{}
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4214
		{
			yyVAL.empty = struct{}{}
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4216
		{
			yyVAL.empty = struct{}{}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4218
		{
			yyVAL.empty = struct{}{}
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4220
		{
			yyVAL.empty = struct{}{}
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4222
		{
			yyVAL.empty = struct{}{}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4224
		{
			yyVAL.empty = struct{}{}
		}
	case 818:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4227
		{
			yyVAL.empty = struct{}{}
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4229
		{
			yyVAL.empty = struct{}{}
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4231
		{
			yyVAL.empty = struct{}{}
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4235
		{
			yyVAL.empty = struct{}{}
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4237
		{
			yyVAL.empty = struct{}{}
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4241
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4245
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4252
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4258
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4262
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4269
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 831:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4275
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4279
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4283
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4289
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4293
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4297
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4303
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4307
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 839:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4314
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4321
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4325
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4332
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4615
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4624
		{
			decNesting(yylex)
		}
	case 1102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4629
		{
			forceEOF(yylex)
		}
	case 1103:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4634
		{
			forceEOF(yylex)
		}
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4638
		{
			forceEOF(yylex)
		}
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4642
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
