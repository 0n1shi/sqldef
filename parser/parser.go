// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const VINDEX = 57489
const VINDEXES = 57490
const STATUS = 57491
const VARIABLES = 57492
const RESTRICT = 57493
const CASCADE = 57494
const NO = 57495
const ACTION = 57496
const PERMISSIVE = 57497
const RESTRICTIVE = 57498
const PUBLIC = 57499
const CURRENT_USER = 57500
const SESSION_USER = 57501
const PAD_INDEX = 57502
const FILLFACTOR = 57503
const IGNORE_DUP_KEY = 57504
const STATISTICS_NORECOMPUTE = 57505
const STATISTICS_INCREMENTAL = 57506
const ALLOW_ROW_LOCKS = 57507
const ALLOW_PAGE_LOCKS = 57508
const BEFORE = 57509
const AFTER = 57510
const EACH = 57511
const ROW = 57512
const SCROLL = 57513
const CURSOR = 57514
const OPEN = 57515
const CLOSE = 57516
const FETCH = 57517
const PRIOR = 57518
const FIRST = 57519
const LAST = 57520
const DEALLOCATE = 57521
const INSTEAD = 57522
const OF = 57523
const DEFERRABLE = 57524
const INITIALLY = 57525
const IMMEDIATE = 57526
const DEFERRED = 57527
const CONCURRENTLY = 57528
const SQL = 57529
const SECURITY = 57530
const BEGIN = 57531
const START = 57532
const TRANSACTION = 57533
const COMMIT = 57534
const ROLLBACK = 57535
const BIT = 57536
const TINYINT = 57537
const SMALLINT = 57538
const SMALLSERIAL = 57539
const MEDIUMINT = 57540
const INT = 57541
const INTEGER = 57542
const SERIAL = 57543
const BIGINT = 57544
const BIGSERIAL = 57545
const INTNUM = 57546
const REAL = 57547
const DOUBLE = 57548
const PRECISION = 57549
const FLOAT_TYPE = 57550
const DECIMAL = 57551
const NUMERIC = 57552
const SMALLMONEY = 57553
const MONEY = 57554
const TIME = 57555
const TIMESTAMP = 57556
const DATETIME = 57557
const YEAR = 57558
const DATETIMEOFFSET = 57559
const DATETIME2 = 57560
const SMALLDATETIME = 57561
const CHAR = 57562
const VARCHAR = 57563
const VARYING = 57564
const BOOL = 57565
const CHARACTER = 57566
const VARBINARY = 57567
const NCHAR = 57568
const NVARCHAR = 57569
const NTEXT = 57570
const UUID = 57571
const TEXT = 57572
const TINYTEXT = 57573
const MEDIUMTEXT = 57574
const LONGTEXT = 57575
const CITEXT = 57576
const BLOB = 57577
const TINYBLOB = 57578
const MEDIUMBLOB = 57579
const LONGBLOB = 57580
const JSON = 57581
const JSONB = 57582
const ENUM = 57583
const GEOMETRY = 57584
const POINT = 57585
const LINESTRING = 57586
const POLYGON = 57587
const GEOMETRYCOLLECTION = 57588
const MULTIPOINT = 57589
const MULTILINESTRING = 57590
const MULTIPOLYGON = 57591
const VARIADIC = 57592
const ARRAY = 57593
const NOW = 57594
const GETDATE = 57595
const BPCHAR = 57596
const TEXT_PATTERN_OPS = 57597
const NULLX = 57598
const AUTO_INCREMENT = 57599
const APPROXNUM = 57600
const SIGNED = 57601
const UNSIGNED = 57602
const ZEROFILL = 57603
const ZONE = 57604
const AUTOINCREMENT = 57605
const DATABASES = 57606
const TABLES = 57607
const VSCHEMA_TABLES = 57608
const EXTENDED = 57609
const FULL = 57610
const PROCESSLIST = 57611
const NAMES = 57612
const CHARSET = 57613
const GLOBAL = 57614
const SESSION = 57615
const ISOLATION = 57616
const LEVEL = 57617
const READ = 57618
const WRITE = 57619
const ONLY = 57620
const REPEATABLE = 57621
const COMMITTED = 57622
const UNCOMMITTED = 57623
const SERIALIZABLE = 57624
const NEW = 57625
const CONCAT_NULL_YIELDS_NULL = 57626
const CURSOR_CLOSE_ON_COMMIT = 57627
const QUOTED_IDENTIFIER = 57628
const ARITHABORT = 57629
const FMTONLY = 57630
const NOCOUNT = 57631
const NOEXEC = 57632
const NUMERIC_ROUNDABORT = 57633
const ANSI_DEFAULTS = 57634
const ANSI_NULL_DFLT_OFF = 57635
const ANSI_NULL_DFLT_ON = 57636
const ANSI_NULLS = 57637
const ANSI_PADDING = 57638
const ANSI_WARNINGS = 57639
const FORCEPLAN = 57640
const SHOWPLAN_ALL = 57641
const SHOWPLAN_TEXT = 57642
const SHOWPLAN_XML = 57643
const IMPLICIT_TRANSACTIONS = 57644
const REMOTE_PROC_TRANSACTIONS = 57645
const XACT_ABORT = 57646
const CURRENT_TIMESTAMP = 57647
const DATABASE = 57648
const CURRENT_DATE = 57649
const CURRENT_TIME = 57650
const LOCALTIME = 57651
const LOCALTIMESTAMP = 57652
const UTC_DATE = 57653
const UTC_TIME = 57654
const UTC_TIMESTAMP = 57655
const REPLACE = 57656
const CONVERT = 57657
const CAST = 57658
const SUBSTR = 57659
const SUBSTRING = 57660
const GROUP_CONCAT = 57661
const SEPARATOR = 57662
const INHERIT = 57663
const LEAD = 57664
const LAG = 57665
const MATCH = 57666
const AGAINST = 57667
const BOOLEAN = 57668
const LANGUAGE = 57669
const WITH = 57670
const WITHOUT = 57671
const PARSER = 57672
const QUERY = 57673
const EXPANSION = 57674
const UNUSED = 57675
const VIRTUAL = 57676
const STORED = 57677
const GENERATED = 57678
const ALWAYS = 57679
const IDENTITY = 57680
const SEQUENCE = 57681
const INCREMENT = 57682
const MINVALUE = 57683
const CACHE = 57684
const CYCLE = 57685
const OWNED = 57686
const NONE = 57687
const CLUSTERED = 57688
const NONCLUSTERED = 57689
const REPLICATION = 57690
const COLUMNSTORE = 57691
const INCLUDE = 57692
const HOLDLOCK = 57693
const NOLOCK = 57694
const NOWAIT = 57695
const PAGLOCK = 57696
const ROWLOCK = 57697
const TABLELOCK = 57698
const DEFINER = 57699
const INVOKER = 57700
const TYPECAST = 57701
const CHECK = 57702
const OVER = 57703

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 26,
	-2, 4,
	-1, 29,
	130, 412,
	-2, 164,
	-1, 35,
	166, 516,
	167, 516,
	-2, 506,
	-1, 274,
	119, 906,
	-2, 902,
	-1, 275,
	119, 907,
	-2, 903,
	-1, 276,
	119, 908,
	-2, 254,
	-1, 318,
	268, 917,
	-2, 795,
	-1, 352,
	86, 1158,
	-2, 84,
	-1, 353,
	86, 1108,
	-2, 85,
	-1, 359,
	86, 1087,
	-2, 875,
	-1, 361,
	86, 1132,
	-2, 877,
	-1, 621,
	268, 917,
	-2, 544,
	-1, 671,
	268, 917,
	-2, 544,
	-1, 701,
	55, 40,
	57, 40,
	-2, 42,
	-1, 733,
	116, 1082,
	251, 1082,
	257, 1082,
	-2, 291,
	-1, 734,
	116, 1083,
	251, 1083,
	257, 1083,
	-2, 292,
	-1, 735,
	251, 1085,
	257, 1085,
	-2, 326,
	-1, 736,
	251, 1086,
	257, 1086,
	-2, 326,
	-1, 737,
	251, 1187,
	257, 1187,
	-2, 333,
	-1, 738,
	251, 1133,
	257, 1133,
	-2, 326,
	-1, 739,
	251, 1138,
	257, 1138,
	-2, 333,
	-1, 740,
	116, 1136,
	251, 1136,
	257, 1136,
	-2, 298,
	-1, 742,
	116, 1186,
	251, 1186,
	257, 1186,
	-2, 333,
	-1, 743,
	251, 1172,
	257, 1172,
	-2, 346,
	-1, 744,
	251, 1178,
	257, 1178,
	-2, 346,
	-1, 745,
	251, 1126,
	257, 1126,
	-2, 346,
	-1, 746,
	251, 1122,
	257, 1122,
	-2, 346,
	-1, 748,
	116, 1081,
	251, 1081,
	257, 1081,
	-2, 307,
	-1, 749,
	116, 1176,
	251, 1176,
	257, 1176,
	-2, 308,
	-1, 750,
	116, 1124,
	251, 1124,
	257, 1124,
	-2, 309,
	-1, 751,
	116, 1121,
	251, 1121,
	257, 1121,
	-2, 310,
	-1, 752,
	116, 1113,
	251, 1113,
	257, 1113,
	-2, 311,
	-1, 754,
	116, 1185,
	251, 1185,
	257, 1185,
	-2, 313,
	-1, 757,
	116, 1094,
	251, 1094,
	257, 1094,
	-2, 283,
	-1, 758,
	116, 1174,
	251, 1174,
	257, 1174,
	-2, 326,
	-1, 759,
	116, 1175,
	251, 1175,
	257, 1175,
	-2, 326,
	-1, 760,
	116, 1095,
	251, 1095,
	257, 1095,
	-2, 326,
	-1, 761,
	116, 1096,
	251, 1096,
	257, 1096,
	-2, 326,
	-1, 762,
	116, 1097,
	251, 1097,
	257, 1097,
	-2, 326,
	-1, 763,
	116, 1165,
	251, 1165,
	257, 1165,
	-2, 289,
	-1, 764,
	116, 1196,
	251, 1196,
	257, 1196,
	-2, 290,
	-1, 765,
	116, 1105,
	251, 1105,
	257, 1105,
	-2, 316,
	-1, 766,
	116, 1142,
	251, 1142,
	257, 1142,
	-2, 317,
	-1, 767,
	116, 1120,
	251, 1120,
	257, 1120,
	-2, 318,
	-1, 768,
	116, 1143,
	251, 1143,
	257, 1143,
	-2, 319,
	-1, 769,
	116, 1106,
	251, 1106,
	257, 1106,
	-2, 320,
	-1, 770,
	116, 1130,
	251, 1130,
	257, 1130,
	-2, 321,
	-1, 771,
	116, 1129,
	251, 1129,
	257, 1129,
	-2, 322,
	-1, 772,
	116, 1131,
	251, 1131,
	257, 1131,
	-2, 323,
	-1, 773,
	116, 1080,
	251, 1080,
	257, 1080,
	-2, 265,
	-1, 774,
	116, 1177,
	251, 1177,
	257, 1177,
	-2, 266,
	-1, 775,
	116, 1166,
	251, 1166,
	257, 1166,
	-2, 267,
	-1, 776,
	116, 1168,
	251, 1168,
	257, 1168,
	-2, 268,
	-1, 777,
	116, 1125,
	251, 1125,
	257, 1125,
	-2, 269,
	-1, 778,
	116, 1110,
	251, 1110,
	257, 1110,
	-2, 270,
	-1, 779,
	116, 1111,
	251, 1111,
	257, 1111,
	-2, 271,
	-1, 780,
	116, 1159,
	251, 1159,
	257, 1159,
	-2, 272,
	-1, 781,
	116, 1078,
	251, 1078,
	257, 1078,
	-2, 273,
	-1, 782,
	116, 1079,
	251, 1079,
	257, 1079,
	-2, 274,
	-1, 783,
	116, 1150,
	251, 1150,
	257, 1150,
	-2, 328,
	-1, 784,
	116, 1099,
	251, 1099,
	257, 1099,
	-2, 328,
	-1, 785,
	116, 1103,
	251, 1103,
	257, 1103,
	-2, 328,
	-1, 786,
	116, 1098,
	251, 1098,
	257, 1098,
	-2, 330,
	-1, 787,
	116, 1137,
	251, 1137,
	257, 1137,
	-2, 330,
	-1, 788,
	116, 1128,
	251, 1128,
	257, 1128,
	-2, 281,
	-1, 789,
	116, 1167,
	251, 1167,
	257, 1167,
	-2, 282,
	-1, 866,
	119, 910,
	-2, 905,
	-1, 910,
	116, 346,
	268, 346,
	380, 346,
	-2, 259,
	-1, 911,
	268, 311,
	380, 311,
	-2, 260,
	-1, 912,
	268, 312,
	380, 312,
	-2, 261,
	-1, 935,
	268, 917,
	-2, 326,
	-1, 936,
	57, 326,
	59, 326,
	241, 326,
	-2, 1085,
	-1, 937,
	57, 757,
	-2, 1094,
	-1, 938,
	57, 326,
	-2, 1095,
	-1, 939,
	57, 330,
	-2, 1098,
	-1, 940,
	57, 760,
	-2, 1113,
	-1, 942,
	57, 326,
	-2, 1133,
	-1, 943,
	57, 763,
	-2, 1164,
	-1, 944,
	57, 326,
	-2, 1174,
	-1, 945,
	57, 766,
	-2, 1183,
	-1, 946,
	57, 768,
	-2, 1078,
	-1, 947,
	57, 769,
	-2, 1080,
	-1, 948,
	57, 770,
	-2, 1110,
	-1, 949,
	57, 771,
	-2, 1128,
	-1, 950,
	57, 330,
	-2, 1137,
	-1, 951,
	57, 773,
	-2, 1166,
	-1, 952,
	57, 774,
	-2, 1167,
	-1, 953,
	57, 775,
	-2, 1177,
	-1, 954,
	57, 776,
	-2, 1103,
	-1, 955,
	57, 777,
	-2, 1150,
	-1, 956,
	57, 326,
	-2, 1096,
	-1, 957,
	57, 326,
	-2, 1097,
	-1, 958,
	57, 780,
	-2, 1165,
	-1, 959,
	57, 781,
	-2, 1172,
	-1, 960,
	57, 326,
	-2, 1187,
	-1, 961,
	57, 784,
	-2, 1136,
	-1, 962,
	57, 326,
	-2, 1138,
	-1, 963,
	57, 326,
	-2, 1186,
	-1, 1039,
	142, 422,
	-2, 1092,
	-1, 1166,
	268, 917,
	-2, 544,
	-1, 1176,
	116, 326,
	268, 326,
	380, 326,
	-2, 255,
	-1, 1190,
	5, 27,
	-2, 670,
	-1, 1233,
	5, 26,
	-2, 846,
	-1, 1282,
	59, 387,
	-2, 384,
	-1, 1301,
	119, 908,
	-2, 254,
	-1, 1570,
	5, 26,
	-2, 93,
	-1, 1572,
	5, 26,
	-2, 95,
	-1, 1629,
	5, 27,
	-2, 847,
	-1, 1738,
	5, 26,
	-2, 849,
	-1, 1826,
	58, 108,
	-2, 183,
	-1, 1829,
	58, 108,
	-2, 183,
	-1, 1893,
	5, 26,
	-2, 94,
	-1, 1903,
	189, 53,
	-2, 183,
	-1, 1944,
	58, 108,
	-2, 182,
	-1, 1969,
	5, 27,
	-2, 850,
	-1, 2137,
	5, 26,
	-2, 49,
}

const yyPrivate = 57344

const yyLast = 21451

var yyAct = [...]int16{
	363, 1796, 2019, 1856, 1113, 1749, 1752, 1962, 724, 2020,
	1954, 1802, 1904, 1879, 1906, 1660, 552, 798, 624, 3,
	987, 625, 1565, 280, 723, 1799, 1791, 1637, 1564, 1581,
	1271, 1473, 1711, 258, 95, 1249, 270, 95, 1274, 308,
	291, 606, 1516, 1474, 1976, 849, 1005, 1504, 1650, 693,
	1943, 1354, 279, 695, 53, 1298, 1470, 1034, 275, 1182,
	1122, 95, 95, 1300, 1049, 1306, 257, 1100, 1813, 21,
	537, 1236, 1121, 1028, 988, 95, 891, 1254, 1171, 358,
	804, 1095, 1082, 934, 95, 1337, 95, 920, 283, 924,
	1241, 711, 95, 1044, 251, 973, 502, 1066, 868, 558,
	1076, 1830, 710, 351, 697, 984, 1025, 1177, 682, 278,
	337, 1319, 1419, 731, 726, 725, 21, 338, 841, 649,
	567, 1159, 919, 1068, 262, 2115, 52, 1064, 46, 1061,
	48, 25, 26, 354, 1511, 1064, 1065, 252, 253, 254,
	255, 1424, 1814, 581, 2080, 1535, 591, 266, 591, 342,
	339, 607, 1792, 1815, 584, 585, 586, 587, 588, 581,
	1052, 272, 591, 1110, 1111, 1517, 493, 511, 504, 1666,
	507, 1996, 1520, 510, 1296, 1059, 2150, 1047, 1638, 1639,
	1640, 1641, 1642, 1643, 1048, 2051, 582, 583, 584, 585,
	586, 587, 588, 581, 535, 575, 591, 578, 1518, 1519,
	550, 512, 513, 593, 594, 595, 596, 597, 598, 599,
	348, 576, 577, 574, 600, 601, 602, 603, 580, 579,
	589, 590, 582, 583, 584, 585, 586, 587, 588, 581,
	981, 2144, 591, 1967, 95, 1067, 2070, 1994, 1995, 1861,
	1675, 1031, 1055, 2063, 1050, 1060, 1778, 1779, 2130, 268,
	346, 1860, 1057, 1056, 1178, 1179, 1114, 1821, 2013, 1072,
	275, 275, 1250, 1174, 2050, 1966, 1465, 1820, 1991, 2000,
	1623, 514, 275, 1524, 1262, 640, 1496, 1261, 1019, 1020,
	1263, 1018, 561, 2002, 545, 275, 275, 275, 275, 275,
	275, 275, 46, 1321, 48, 25, 26, 90, 86, 87,
	838, 88, 1497, 1498, 839, 712, 1814, 713, 1608, 1607,
	275, 530, 1816, 1817, 1819, 1606, 560, 1815, 1818, 275,
	1997, 1070, 620, 1457, 1197, 1311, 1083, 1313, 1312, 978,
	1072, 1072, 21, 1417, 1416, 1072, 1096, 95, 1415, 250,
	1204, 1202, 2148, 2037, 95, 95, 95, 589, 590, 582,
	583, 584, 585, 586, 587, 588, 581, 2036, 1898, 591,
	46, 796, 48, 25, 26, 2126, 608, 2142, 2141, 498,
	2096, 2156, 2127, 1360, 1814, 1512, 1127, 2087, 21, 2038,
	1053, 532, 1518, 1519, 534, 1815, 1054, 1848, 1897, 806,
	1941, 1798, 580, 579, 589, 590, 582, 583, 584, 585,
	586, 587, 588, 581, 1577, 1578, 591, 592, 1880, 592,
	1768, 2143, 21, 531, 533, 541, 542, 2128, 1955, 54,
	354, 1821, 1397, 592, 805, 1588, 985, 1718, 1045, 1956,
	1735, 1820, 342, 538, 539, 540, 1418, 543, 2069, 2123,
	2071, 499, 1589, 654, 655, 1046, 612, 613, 614, 615,
	616, 617, 618, 49, 1932, 1668, 1667, 592, 1289, 1062,
	806, 1063, 551, 1288, 1276, 1510, 2105, 1598, 1836, 2147,
	1998, 1999, 2001, 2003, 2004, 1522, 1816, 1817, 1819, 503,
	1006, 1008, 1818, 1058, 551, 519, 84, 1351, 83, 1821,
	84, 2095, 89, 592, 1704, 817, 500, 1253, 1252, 1820,
	515, 2124, 1251, 497, 1097, 1083, 496, 509, 233, 555,
	559, 95, 1295, 1176, 1075, 1663, 95, 1394, 85, 95,
	790, 572, 95, 1398, 2134, 2062, 95, 580, 579, 589,
	590, 582, 583, 584, 585, 586, 587, 588, 581, 1676,
	1658, 591, 1861, 1853, 1816, 1817, 1819, 95, 1178, 1179,
	1818, 1658, 1030, 1632, 807, 808, 1543, 1965, 1407, 626,
	708, 1727, 1007, 95, 1217, 275, 275, 809, 637, 610,
	611, 1165, 275, 1281, 275, 529, 847, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 715, 623, 852, 795, 702, 797, 642, 643,
	644, 645, 646, 647, 648, 826, 812, 571, 525, 1933,
	1934, 1935, 1027, 1026, 869, 1279, 913, 49, 1553, 844,
	592, 566, 275, 1872, 1395, 807, 808, 1393, 275, 275,
	275, 275, 275, 275, 275, 275, 1849, 1402, 809, 275,
	1871, 1396, 865, 923, 1282, 2138, 930, 824, 564, 1152,
	1870, 866, 1661, 1662, 1664, 1213, 965, 967, 1869, 565,
	564, 1046, 975, 870, 566, 2121, 2035, 592, 1868, 2139,
	1867, 275, 275, 275, 275, 1554, 566, 95, 21, 275,
	95, 95, 95, 95, 95, 49, 1045, 1866, 1864, 862,
	518, 1574, 95, 864, 926, 95, 21, 565, 564, 95,
	1264, 1212, 989, 1046, 95, 95, 897, 655, 894, 850,
	851, 816, 896, 930, 566, 275, 875, 1239, 714, 1401,
	914, 917, 827, 828, 829, 830, 831, 832, 833, 834,
	873, 874, 872, 2121, 1153, 867, 835, 836, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 1013, 971, 551, 2136, 1467, 1800, 980,
	565, 564, 853, 21, 610, 611, 1882, 974, 342, 342,
	342, 342, 342, 565, 564, 674, 1273, 566, 354, 521,
	522, 523, 801, 342, 565, 564, 1024, 974, 297, 1222,
	566, 1767, 342, 95, 966, 1770, 95, 990, 95, 1002,
	993, 566, 592, 1010, 95, 1686, 95, 1011, 2108, 1766,
	1322, 1015, 1016, 95, 855, 856, 95, 1272, 95, 1273,
	1129, 95, 2107, 2068, 1032, 927, 929, 1084, 1085, 1086,
	1087, 991, 992, 1273, 994, 1194, 2067, 1193, 2066, 50,
	1079, 1273, 977, 1081, 1979, 1975, 275, 275, 275, 275,
	871, 357, 922, 494, 1782, 1102, 565, 564, 501, 931,
	932, 505, 506, 1977, 1384, 970, 1098, 1099, 1865, 1161,
	1211, 925, 1734, 566, 275, 275, 275, 626, 1674, 1685,
	933, 964, 1977, 1978, 1322, 2027, 46, 1285, 48, 25,
	26, 1128, 565, 564, 1004, 1694, 565, 564, 1693, 1469,
	1814, 979, 1978, 982, 983, 1680, 1302, 1303, 1304, 566,
	2064, 1815, 869, 566, 1307, 1305, 305, 306, 865, 858,
	860, 861, 275, 565, 564, 1530, 859, 866, 1322, 275,
	1162, 1163, 1164, 1328, 1344, 1385, 275, 1327, 1342, 1284,
	566, 1387, 1380, 1381, 1691, 1388, 1383, 1382, 1160, 1318,
	1183, 1390, 1386, 1600, 892, 50, 893, 2065, 1620, 1338,
	622, 870, 1389, 846, 1023, 2120, 1291, 622, 1862, 1379,
	1102, 1167, 275, 82, 54, 275, 1515, 95, 1895, 2155,
	551, 1098, 1099, 579, 589, 590, 582, 583, 584, 585,
	586, 587, 588, 581, 1514, 1117, 591, 1119, 1655, 2129,
	1712, 2077, 845, 1233, 1655, 2058, 2006, 1200, 1895, 2057,
	1942, 1180, 1513, 95, 1283, 1821, 1150, 551, 1205, 2054,
	2053, 565, 564, 2043, 551, 1820, 357, 357, 357, 357,
	1265, 357, 1116, 336, 905, 1168, 1169, 1170, 566, 823,
	580, 579, 589, 590, 582, 583, 584, 585, 586, 587,
	588, 581, 822, 21, 591, 1655, 2040, 569, 1655, 2039,
	1891, 95, 1257, 1655, 2007, 275, 1712, 1952, 1221, 802,
	1816, 1817, 1819, 1712, 1794, 1885, 1818, 1712, 1777, 1712,
	551, 1744, 1743, 1256, 1246, 1258, 1712, 1742, 1884, 1290,
	1655, 1654, 1493, 551, 1788, 1157, 1158, 612, 559, 1267,
	800, 342, 1631, 551, 95, 1310, 1175, 527, 95, 1259,
	1560, 1559, 1787, 1681, 1524, 1556, 1557, 1308, 1556, 1555,
	1786, 1184, 520, 1187, 1188, 1186, 551, 928, 551, 679,
	551, 1190, 1191, 1192, 1783, 1277, 1278, 1280, 357, 1698,
	684, 687, 688, 689, 685, 717, 686, 690, 722, 721,
	1242, 1243, 1185, 95, 95, 275, 1323, 1324, 46, 1326,
	705, 1329, 1330, 1896, 1687, 1895, 1311, 275, 1313, 1312,
	46, 1218, 1682, 275, 275, 1339, 1224, 1678, 1189, 1343,
	1226, 1227, 1603, 1228, 1229, 1355, 1550, 275, 1737, 1331,
	1367, 1333, 1334, 1335, 1336, 1231, 275, 1713, 1340, 1341,
	1232, 1362, 1219, 1549, 706, 1544, 704, 1361, 50, 1471,
	1216, 49, 1237, 275, 275, 275, 275, 275, 275, 1585,
	50, 1238, 1359, 275, 1223, 1420, 1364, 54, 1186, 928,
	1358, 1359, 275, 1359, 1238, 1012, 1409, 704, 275, 275,
	275, 678, 46, 275, 1237, 2048, 275, 1411, 2022, 1627,
	679, 1712, 1472, 1477, 1410, 989, 1215, 592, 1655, 2121,
	1677, 989, 1573, 1562, 1561, 275, 679, 679, 1558, 1186,
	1268, 1454, 1475, 1017, 1466, 1186, 1422, 1425, 1195, 1237,
	707, 1456, 848, 730, 730, 791, 794, 50, 1464, 2145,
	2045, 1481, 50, 1503, 275, 1458, 810, 866, 1890, 1876,
	275, 1875, 1833, 21, 1832, 357, 1790, 1789, 1781, 1719,
	1716, 1494, 1482, 1480, 1699, 592, 357, 357, 357, 357,
	357, 357, 357, 357, 1542, 1072, 1101, 1569, 1541, 1495,
	357, 357, 1539, 1526, 1413, 1414, 1488, 1501, 1486, 1347,
	1310, 1096, 1502, 1534, 1399, 1297, 1293, 1536, 275, 95,
	1270, 1521, 1308, 1523, 1089, 1531, 1088, 569, 1753, 95,
	357, 1242, 1243, 1533, 1103, 1104, 1155, 1077, 64, 1570,
	799, 1572, 1755, 1363, 1459, 1460, 1461, 1462, 1463, 1857,
	1881, 1563, 1471, 1348, 1245, 1405, 1421, 1107, 1566, 820,
	803, 546, 95, 999, 1248, 1247, 730, 997, 1000, 916,
	916, 996, 998, 275, 995, 548, 549, 918, 1547, 2102,
	2049, 1156, 357, 275, 1001, 1406, 688, 689, 639, 21,
	1580, 21, 968, 2099, 1269, 553, 1332, 968, 720, 528,
	1545, 1546, 1529, 1548, 1584, 1625, 1551, 1552, 554, 2089,
	850, 851, 1118, 1720, 819, 1455, 1754, 1795, 1571, 1616,
	1528, 1357, 1352, 259, 1350, 1492, 1599, 811, 684, 687,
	688, 689, 685, 1591, 686, 690, 692, 968, 264, 265,
	275, 842, 1468, 1593, 2118, 62, 1824, 275, 1409, 1609,
	1756, 1757, 1758, 1759, 1760, 1761, 1762, 1596, 1483, 1484,
	1710, 1576, 1485, 95, 1509, 1487, 357, 976, 1200, 57,
	59, 60, 61, 1706, 357, 1707, 1708, 1709, 1205, 1958,
	2072, 494, 1959, 54, 1499, 1634, 1635, 1842, 1705, 1644,
	1645, 1646, 256, 260, 1665, 1838, 275, 1238, 1649, 1626,
	2032, 580, 579, 589, 590, 582, 583, 584, 585, 586,
	587, 588, 581, 1527, 913, 591, 1647, 1123, 1124, 1125,
	1873, 2031, 1374, 1671, 2030, 2029, 1673, 1993, 1992, 1874,
	1670, 562, 275, 1850, 95, 1508, 1507, 1287, 843, 56,
	58, 1651, 95, 1267, 1605, 1808, 8, 1805, 7, 1806,
	6, 1368, 1106, 1804, 5, 1308, 95, 1587, 1679, 357,
	1695, 357, 1029, 1715, 703, 51, 1, 1905, 66, 1700,
	730, 65, 1566, 1961, 95, 1725, 1423, 1109, 1181, 619,
	357, 1604, 295, 2125, 1688, 2094, 281, 275, 275, 1636,
	275, 275, 275, 1703, 2023, 1702, 1611, 1902, 2016, 1375,
	1371, 1366, 1931, 1376, 1373, 1372, 357, 1317, 1690, 1370,
	1692, 1051, 1883, 1294, 1355, 1651, 67, 2012, 1751, 1738,
	1377, 1894, 1601, 1723, 1689, 1612, 1613, 1369, 1575, 1614,
	1615, 1356, 1378, 1618, 1115, 1726, 1353, 1475, 1135, 1953,
	275, 1736, 1972, 1750, 1722, 1657, 275, 1628, 1629, 1630,
	1037, 1633, 1266, 492, 63, 1863, 1038, 1036, 1035, 1033,
	1320, 1765, 342, 1069, 1748, 729, 1769, 727, 728, 21,
	275, 732, 1764, 1763, 241, 349, 1771, 691, 716, 1365,
	563, 1773, 1392, 1391, 569, 1131, 1400, 837, 1151, 1624,
	544, 243, 1534, 1803, 604, 1260, 626, 356, 1793, 1478,
	557, 1957, 1837, 1220, 636, 972, 282, 857, 1684, 294,
	1566, 293, 292, 1230, 573, 341, 675, 1823, 683, 1834,
	681, 680, 1244, 1240, 340, 1602, 1622, 1858, 1852, 1847,
	547, 1154, 24, 55, 335, 19, 18, 1825, 17, 1851,
	20, 16, 1854, 15, 14, 1672, 275, 1475, 1728, 1729,
	1840, 1730, 1731, 1732, 1855, 28, 1822, 1812, 13, 12,
	275, 11, 10, 9, 1811, 1810, 1809, 1784, 1255, 1785,
	1807, 275, 4, 261, 22, 2, 592, 0, 21, 0,
	0, 1724, 1900, 1888, 1893, 1886, 0, 357, 1887, 0,
	0, 275, 275, 1733, 0, 0, 0, 0, 1275, 0,
	1566, 0, 0, 0, 0, 0, 0, 0, 0, 1286,
	0, 0, 0, 275, 0, 1745, 1746, 1747, 0, 1940,
	0, 275, 0, 1315, 790, 1950, 1951, 1936, 1939, 0,
	0, 0, 0, 1889, 21, 0, 1892, 1973, 1901, 0,
	0, 1968, 0, 1776, 989, 0, 0, 1987, 1945, 1946,
	1947, 1948, 1949, 0, 0, 0, 0, 0, 0, 1985,
	1986, 1989, 0, 1346, 0, 2008, 0, 275, 2011, 1988,
	309, 47, 0, 357, 0, 0, 0, 2017, 0, 0,
	0, 0, 2024, 1980, 1981, 1982, 1983, 1984, 2010, 1774,
	2009, 0, 0, 0, 0, 1780, 1839, 1841, 0, 1843,
	1844, 1845, 1846, 0, 0, 2021, 0, 46, 357, 48,
	25, 26, 1619, 551, 0, 0, 2033, 0, 47, 0,
	2026, 1814, 0, 0, 357, 0, 263, 0, 2005, 275,
	275, 343, 1815, 0, 0, 0, 0, 0, 0, 0,
	2041, 0, 0, 0, 0, 1877, 0, 0, 0, 0,
	0, 2047, 1937, 0, 0, 0, 580, 579, 589, 590,
	582, 583, 584, 585, 586, 587, 588, 581, 0, 0,
	591, 0, 0, 0, 2059, 0, 357, 0, 2060, 2061,
	0, 2073, 2076, 2075, 0, 2079, 2055, 2056, 0, 0,
	968, 0, 0, 1479, 1255, 1878, 968, 0, 2081, 2082,
	0, 0, 0, 0, 0, 2085, 0, 2090, 2084, 2092,
	2093, 1960, 2088, 0, 0, 1803, 2097, 2091, 1964, 275,
	1899, 0, 0, 1969, 2098, 357, 2101, 0, 0, 1505,
	0, 2104, 0, 0, 2106, 0, 1821, 0, 2100, 0,
	0, 1938, 0, 95, 0, 0, 1820, 2111, 2074, 1990,
	2112, 275, 2078, 0, 2113, 0, 0, 0, 1315, 0,
	0, 0, 1963, 2116, 0, 2024, 0, 0, 0, 0,
	2082, 1900, 2082, 2082, 0, 0, 95, 0, 0, 0,
	2133, 0, 0, 0, 0, 0, 0, 2135, 0, 0,
	0, 1816, 1817, 1819, 0, 0, 0, 1818, 0, 0,
	0, 2116, 0, 0, 2116, 0, 1567, 2137, 536, 536,
	536, 536, 0, 536, 0, 0, 2015, 2151, 0, 1582,
	275, 2152, 1586, 0, 2042, 1590, 0, 0, 1592, 0,
	0, 0, 2082, 0, 47, 0, 0, 0, 1594, 0,
	0, 0, 0, 0, 605, 0, 0, 0, 609, 0,
	0, 0, 0, 0, 0, 0, 1597, 21, 0, 0,
	0, 0, 0, 0, 0, 0, 357, 0, 621, 0,
	0, 0, 0, 0, 0, 2146, 0, 0, 2046, 626,
	627, 628, 629, 630, 631, 632, 633, 634, 635, 0,
	638, 0, 641, 641, 641, 641, 641, 641, 641, 641,
	0, 670, 671, 672, 673, 0, 0, 0, 0, 344,
	0, 0, 0, 0, 694, 0, 239, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1071, 0, 0, 0,
	0, 592, 49, 46, 0, 48, 25, 26, 0, 0,
	0, 0, 0, 92, 0, 1582, 0, 1814, 1582, 1582,
	1582, 0, 1648, 0, 0, 0, 0, 0, 1815, 357,
	0, 357, 0, 0, 0, 0, 0, 0, 1963, 0,
	0, 347, 0, 0, 2131, 0, 0, 556, 0, 0,
	2122, 2153, 0, 0, 508, 1582, 0, 0, 0, 0,
	0, 0, 0, 516, 1683, 517, 0, 0, 0, 234,
	2114, 524, 357, 0, 0, 236, 0, 0, 0, 0,
	0, 93, 242, 238, 249, 0, 0, 0, 0, 0,
	1567, 1696, 0, 0, 2157, 2158, 0, 0, 1582, 0,
	0, 1617, 357, 357, 0, 269, 0, 0, 93, 93,
	0, 0, 0, 0, 240, 0, 1717, 0, 244, 0,
	0, 0, 93, 0, 0, 0, 0, 1721, 0, 0,
	0, 93, 1821, 93, 0, 0, 0, 0, 0, 93,
	0, 0, 1820, 0, 0, 580, 579, 589, 590, 582,
	583, 584, 585, 586, 587, 588, 581, 536, 0, 591,
	1740, 1741, 0, 0, 0, 0, 0, 0, 536, 536,
	536, 536, 536, 536, 536, 536, 1412, 0, 0, 0,
	0, 0, 536, 536, 1505, 0, 0, 1816, 1817, 1819,
	0, 0, 0, 1818, 235, 0, 1772, 0, 0, 0,
	580, 579, 589, 590, 582, 583, 584, 585, 586, 587,
	588, 581, 0, 526, 591, 0, 580, 579, 589, 590,
	582, 583, 584, 585, 586, 587, 588, 581, 1567, 0,
	591, 1173, 0, 1797, 237, 0, 245, 248, 1214, 0,
	0, 1801, 247, 246, 0, 1826, 0, 0, 1582, 0,
	47, 0, 0, 0, 0, 580, 579, 589, 590, 582,
	583, 584, 585, 586, 587, 588, 581, 1172, 627, 591,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 580, 579, 589, 590, 582, 583, 584, 585,
	586, 587, 588, 581, 0, 0, 591, 580, 579, 589,
	590, 582, 583, 584, 585, 586, 587, 588, 581, 0,
	0, 591, 0, 81, 0, 0, 677, 0, 1567, 1505,
	343, 343, 343, 343, 343, 701, 1753, 0, 49, 0,
	0, 0, 0, 0, 0, 694, 0, 1009, 0, 0,
	1755, 0, 0, 1903, 343, 1928, 1929, 1930, 0, 0,
	0, 0, 0, 0, 0, 1944, 1826, 1826, 1944, 1826,
	1826, 1505, 1505, 0, 0, 71, 76, 0, 68, 0,
	0, 1141, 0, 0, 0, 0, 2083, 0, 0, 968,
	0, 72, 1970, 79, 93, 1140, 1971, 0, 0, 0,
	1974, 93, 699, 93, 0, 0, 0, 0, 0, 73,
	74, 69, 0, 0, 1797, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 1754, 1145, 0, 0, 0, 1582,
	592, 0, 0, 0, 2014, 1139, 0, 0, 0, 0,
	0, 0, 730, 0, 0, 0, 0, 650, 0, 0,
	0, 536, 0, 536, 0, 0, 0, 0, 1756, 1757,
	1758, 1759, 1760, 1761, 1762, 0, 0, 0, 0, 0,
	2028, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 652, 1944, 0, 592, 0, 0, 0, 1136,
	1133, 1134, 0, 1132, 2044, 0, 0, 0, 0, 0,
	813, 592, 0, 0, 0, 814, 0, 0, 818, 0,
	0, 821, 0, 0, 0, 0, 1166, 0, 0, 0,
	0, 0, 0, 1143, 1146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 840, 0, 0, 0,
	592, 0, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 854, 898, 899, 0, 900, 901, 902, 904,
	903, 2086, 895, 653, 0, 0, 0, 592, 93, 0,
	70, 668, 651, 93, 0, 0, 93, 657, 656, 93,
	0, 0, 592, 825, 1505, 0, 0, 0, 0, 0,
	0, 2103, 0, 0, 0, 0, 0, 0, 75, 0,
	0, 0, 0, 0, 93, 0, 0, 1138, 0, 0,
	77, 78, 0, 80, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 730, 1859, 0, 2119, 825,
	0, 0, 0, 0, 0, 1234, 1235, 0, 0, 0,
	1137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 0, 48,
	25, 26, 0, 343, 0, 0, 986, 0, 0, 0,
	0, 1814, 0, 357, 669, 0, 0, 0, 0, 269,
	0, 0, 1815, 0, 1797, 0, 269, 269, 0, 0,
	0, 969, 269, 0, 1014, 0, 969, 0, 1142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 269,
	269, 269, 0, 0, 93, 650, 969, 93, 93, 93,
	93, 93, 1073, 1074, 0, 1078, 0, 0, 1080, 1003,
	0, 0, 93, 0, 0, 0, 699, 0, 0, 0,
	0, 93, 93, 0, 0, 1090, 1091, 1092, 1093, 1094,
	652, 0, 0, 0, 46, 23, 48, 25, 26, 0,
	0, 0, 1105, 0, 0, 1108, 1821, 1112, 0, 0,
	0, 0, 0, 1120, 41, 1126, 1820, 0, 0, 27,
	536, 0, 1130, 0, 0, 1147, 0, 1148, 0, 0,
	1149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	36, 0, 0, 0, 50, 0, 0, 0, 0, 0,
	658, 659, 660, 661, 662, 663, 664, 665, 666, 667,
	0, 1816, 1817, 1819, 0, 0, 0, 1818, 0, 0,
	93, 653, 0, 93, 46, 93, 48, 25, 26, 668,
	651, 93, 0, 93, 0, 657, 656, 0, 1814, 0,
	93, 0, 0, 93, 0, 93, 0, 0, 93, 1815,
	0, 0, 0, 1476, 0, 47, 0, 0, 0, 0,
	29, 30, 32, 31, 34, 0, 0, 0, 0, 0,
	0, 0, 1489, 1490, 1491, 825, 46, 0, 48, 25,
	26, 0, 0, 1074, 1091, 0, 35, 42, 43, 0,
	1814, 44, 45, 33, 0, 46, 0, 48, 25, 26,
	0, 1815, 0, 2140, 0, 0, 0, 0, 0, 1814,
	0, 1525, 1196, 1198, 0, 1199, 0, 0, 0, 1201,
	1815, 1203, 0, 0, 0, 0, 0, 0, 0, 0,
	1537, 0, 669, 1206, 1207, 0, 621, 1208, 0, 1209,
	1210, 0, 0, 0, 37, 38, 0, 39, 40, 269,
	0, 0, 49, 1821, 46, 2117, 48, 25, 26, 0,
	0, 0, 0, 1820, 0, 0, 0, 0, 1814, 0,
	0, 47, 0, 47, 0, 0, 0, 0, 0, 1815,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 1225, 1821, 0, 0, 1816, 1817,
	1819, 0, 0, 0, 1818, 1820, 0, 0, 0, 0,
	1292, 0, 0, 0, 1821, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1820, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 1610, 0, 0, 0, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 0, 0,
	1816, 1817, 1819, 1345, 0, 0, 1818, 1349, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1816,
	1817, 1819, 0, 1821, 0, 1818, 1621, 0, 93, 0,
	0, 0, 1316, 1820, 0, 2034, 1907, 1908, 1909, 1910,
	1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
	1921, 1922, 1923, 1924, 1925, 1926, 1927, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 1669, 0, 93, 0, 0, 1816, 1817,
	1819, 0, 0, 0, 1818, 0, 0, 0, 0, 49,
	0, 0, 0, 1325, 2018, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1403, 1404, 269, 0, 0, 0, 0, 0, 621, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	49, 0, 0, 0, 343, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 825, 0, 0, 1476, 0,
	0, 1739, 0, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 1538, 1540,
	0, 0, 1775, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1537, 0, 0, 0, 0, 0, 1568, 1166,
	0, 0, 0, 0, 0, 0, 0, 0, 1579, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 0, 0,
	0, 0, 0, 0, 0, 0, 1426, 0, 0, 0,
	0, 1835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1595, 0, 0, 0, 0, 0, 0, 1476, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1428, 0, 0, 0, 1316, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1196, 1198, 0, 1199, 0, 0, 1201,
	0, 1203, 0, 0, 0, 0, 47, 0, 0, 93,
	0, 0, 0, 1206, 1207, 0, 0, 1208, 0, 1209,
	1210, 1437, 1443, 1441, 0, 0, 1438, 0, 0, 1436,
	0, 0, 1445, 0, 0, 1444, 1430, 1440, 1442, 1439,
	1434, 0, 1429, 0, 1447, 1446, 1448, 1427, 1450, 0,
	0, 0, 1453, 1432, 1452, 1451, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 1431, 941, 0, 0,
	0, 0, 1656, 1659, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 1435, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	699, 0, 0, 1697, 0, 0, 0, 0, 0, 0,
	0, 1701, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1656, 1714, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1316,
	0, 93, 2052, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 0, 478,
	467, 0, 426, 480, 396, 414, 488, 416, 417, 453,
	375, 436, 162, 411, 393, 99, 399, 368, 406, 369,
	397, 428, 123, 394, 0, 469, 439, 137, 229, 230,
	486, 140, 444, 0, 186, 150, 0, 0, 431, 471,
	434, 462, 425, 454, 383, 443, 481, 412, 449, 482,
	0, 0, 0, 362, 0, 1652, 0, 1653, 969, 0,
	0, 0, 0, 112, 0, 448, 476, 408, 491, 0,
	452, 367, 446, 0, 373, 376, 487, 474, 403, 404,
	0, 0, 0, 0, 0, 0, 0, 430, 435, 459,
	422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 400, 0, 442, 0, 0, 0, 380,
	374, 0, 427, 0, 0, 0, 382, 0, 401, 460,
	0, 364, 465, 472, 424, 146, 213, 475, 421, 420,
	169, 0, 115, 0, 192, 127, 413, 138, 457, 489,
	479, 432, 470, 398, 407, 117, 405, 176, 163, 204,
	441, 455, 174, 141, 196, 170, 203, 477, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 222, 223, 224, 225, 226, 227, 228, 372, 365,
	402, 463, 466, 387, 451, 377, 409, 458, 410, 433,
	392, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 219, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 2132, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 370, 0,
	187, 206, 220, 221, 371, 391, 473, 216, 0, 0,
	2110, 155, 110, 131, 181, 135, 142, 172, 218, 450,
	177, 114, 205, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 386, 390, 384, 385,
	437, 438, 483, 484, 485, 461, 381, 0, 388, 389,
	0, 468, 132, 231, 232, 440, 98, 106, 139, 490,
	217, 0, 171, 125, 207, 0, 0, 415, 366, 419,
	0, 0, 0, 0, 0, 0, 0, 378, 379, 178,
	0, 423, 418, 445, 447, 456, 464, 0, 395, 429,
	0, 111, 478, 467, 0, 426, 480, 396, 414, 488,
	416, 417, 453, 375, 436, 162, 411, 393, 99, 399,
	368, 406, 369, 397, 428, 123, 394, 0, 469, 439,
	137, 229, 230, 486, 140, 444, 0, 186, 150, 0,
	0, 431, 471, 434, 462, 425, 454, 383, 443, 481,
	412, 449, 482, 0, 0, 0, 274, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 448, 476,
	408, 491, 0, 452, 367, 446, 0, 373, 376, 487,
	474, 403, 404, 0, 0, 0, 0, 0, 0, 0,
	430, 435, 459, 422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 863, 0, 400, 0, 442, 0,
	0, 0, 380, 374, 0, 427, 0, 0, 0, 382,
	0, 401, 460, 0, 364, 465, 472, 424, 146, 213,
	475, 421, 420, 169, 0, 115, 0, 192, 127, 413,
	138, 457, 489, 479, 432, 470, 398, 407, 117, 405,
	176, 163, 204, 441, 455, 174, 141, 196, 170, 203,
	477, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 222, 223, 224, 225, 226, 227,
	228, 372, 365, 402, 463, 466, 387, 451, 377, 409,
	458, 410, 433, 392, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	219, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 370, 0, 187, 206, 220, 221, 371, 391, 473,
	216, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 218, 450, 177, 114, 205, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 386,
	390, 384, 385, 437, 438, 483, 484, 485, 461, 381,
	0, 388, 389, 0, 468, 132, 231, 232, 440, 98,
	106, 139, 490, 217, 0, 171, 125, 207, 0, 0,
	415, 366, 419, 0, 0, 0, 0, 0, 0, 0,
	378, 379, 178, 0, 423, 418, 445, 447, 456, 464,
	0, 395, 429, 0, 111, 478, 467, 0, 426, 480,
	396, 414, 488, 416, 417, 453, 375, 436, 162, 411,
	393, 99, 399, 368, 406, 369, 397, 428, 123, 394,
	0, 469, 439, 137, 229, 230, 486, 140, 444, 0,
	186, 150, 0, 0, 431, 471, 434, 462, 425, 454,
	383, 443, 481, 412, 449, 482, 0, 0, 0, 362,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 448, 476, 408, 491, 0, 452, 367, 446, 0,
	373, 376, 487, 474, 403, 404, 1500, 0, 0, 0,
	0, 0, 0, 430, 435, 459, 422, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 400,
	0, 442, 0, 0, 0, 380, 374, 0, 427, 0,
	0, 0, 382, 0, 401, 460, 0, 364, 465, 472,
	424, 146, 213, 475, 421, 420, 169, 0, 115, 0,
	192, 127, 413, 138, 457, 489, 479, 432, 470, 398,
	407, 117, 405, 176, 163, 204, 441, 455, 174, 141,
	196, 170, 203, 477, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 222, 223, 224,
	225, 226, 227, 228, 372, 365, 402, 463, 466, 387,
	451, 377, 409, 458, 410, 433, 392, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 219, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 370, 0, 187, 206, 220, 221,
	371, 391, 473, 216, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 218, 450, 177, 114, 205, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 386, 390, 384, 385, 437, 438, 483, 484,
	485, 461, 381, 0, 388, 389, 0, 468, 132, 231,
	232, 440, 98, 106, 139, 490, 217, 0, 171, 125,
	207, 0, 0, 415, 366, 419, 0, 0, 0, 0,
	0, 0, 0, 378, 379, 178, 0, 423, 418, 445,
	447, 456, 464, 0, 395, 429, 0, 111, 478, 467,
	0, 426, 480, 396, 414, 488, 416, 417, 453, 375,
	436, 162, 411, 393, 99, 399, 368, 406, 369, 397,
	428, 123, 394, 0, 469, 439, 137, 229, 230, 486,
	140, 444, 0, 186, 150, 0, 0, 431, 471, 434,
	462, 425, 454, 383, 443, 481, 412, 449, 482, 0,
	0, 0, 274, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 112, 0, 448, 476, 408, 491, 0, 452,
	367, 446, 0, 373, 376, 487, 474, 403, 404, 0,
	0, 0, 0, 0, 0, 0, 430, 435, 459, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 400, 0, 442, 0, 0, 0, 380, 374,
	0, 427, 0, 0, 0, 382, 0, 401, 460, 0,
	364, 465, 472, 424, 146, 213, 475, 421, 420, 169,
	0, 115, 0, 192, 127, 413, 138, 457, 489, 479,
	432, 470, 398, 407, 117, 405, 176, 163, 204, 441,
	455, 174, 141, 196, 170, 203, 477, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	222, 223, 224, 225, 226, 227, 228, 372, 365, 402,
	463, 466, 387, 451, 377, 409, 458, 410, 433, 392,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 219, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 370, 0, 187,
	206, 220, 221, 371, 391, 473, 216, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 218, 450, 177,
	114, 205, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 386, 390, 384, 385, 437,
	438, 483, 484, 485, 461, 381, 0, 388, 389, 0,
	468, 132, 231, 232, 440, 98, 106, 139, 490, 217,
	0, 171, 125, 207, 0, 0, 415, 366, 419, 0,
	0, 0, 0, 0, 0, 0, 378, 379, 178, 0,
	423, 418, 445, 447, 456, 464, 0, 395, 429, 0,
	111, 478, 467, 0, 426, 480, 396, 414, 488, 416,
	417, 453, 375, 436, 162, 411, 393, 99, 399, 368,
	406, 369, 397, 428, 123, 394, 0, 469, 439, 137,
	229, 230, 486, 140, 444, 0, 186, 150, 0, 0,
	431, 471, 434, 462, 425, 454, 383, 443, 481, 412,
	449, 482, 0, 0, 0, 362, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 448, 476, 408,
	491, 0, 452, 367, 446, 0, 373, 376, 487, 474,
	403, 404, 0, 0, 0, 0, 0, 0, 0, 430,
	435, 459, 422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1408, 0, 400, 0, 442, 0, 0,
	0, 380, 374, 0, 427, 0, 0, 0, 382, 0,
	401, 460, 0, 364, 465, 472, 424, 146, 213, 475,
	421, 420, 169, 0, 115, 0, 192, 127, 413, 138,
	457, 489, 479, 432, 470, 398, 407, 117, 405, 176,
	163, 204, 441, 455, 174, 141, 196, 170, 203, 477,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 222, 223, 224, 225, 226, 227, 228,
	372, 365, 402, 463, 466, 387, 451, 377, 409, 458,
	410, 433, 392, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 219,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	370, 0, 187, 206, 220, 221, 371, 391, 473, 216,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	218, 450, 177, 114, 205, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 386, 390,
	384, 385, 437, 438, 483, 484, 485, 461, 381, 0,
	388, 389, 0, 468, 132, 231, 232, 440, 98, 106,
	139, 490, 217, 0, 171, 125, 207, 0, 0, 415,
	366, 419, 0, 0, 0, 0, 0, 0, 0, 378,
	379, 178, 0, 423, 418, 445, 447, 456, 464, 0,
	395, 429, 0, 111, 478, 467, 0, 426, 480, 396,
	414, 488, 416, 417, 453, 375, 436, 162, 411, 393,
	99, 399, 368, 406, 369, 397, 428, 123, 394, 0,
	469, 439, 137, 229, 230, 486, 140, 444, 0, 186,
	150, 0, 0, 431, 471, 434, 462, 425, 454, 383,
	443, 481, 412, 449, 482, 50, 0, 0, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	448, 476, 408, 491, 0, 452, 367, 446, 0, 373,
	376, 487, 474, 403, 404, 0, 0, 0, 0, 0,
	0, 0, 430, 435, 459, 422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 400, 0,
	442, 0, 0, 0, 380, 374, 0, 427, 0, 0,
	0, 382, 0, 401, 460, 0, 364, 465, 472, 424,
	146, 213, 475, 421, 420, 169, 0, 115, 0, 192,
	127, 413, 138, 457, 489, 479, 432, 470, 398, 407,
	117, 405, 176, 163, 204, 441, 455, 174, 141, 196,
	170, 203, 477, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 222, 223, 224, 225,
	226, 227, 228, 372, 365, 402, 463, 466, 387, 451,
	377, 409, 458, 410, 433, 392, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 219, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 370, 0, 187, 206, 220, 221, 371,
	391, 473, 216, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 218, 450, 177, 114, 205, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 386, 390, 384, 385, 437, 438, 483, 484, 485,
	461, 381, 0, 388, 389, 0, 468, 132, 231, 232,
	440, 98, 106, 139, 490, 217, 0, 171, 125, 207,
	0, 0, 415, 366, 419, 0, 0, 0, 0, 0,
	0, 0, 378, 379, 178, 0, 423, 418, 445, 447,
	456, 464, 0, 395, 429, 0, 111, 478, 467, 0,
	426, 480, 396, 414, 488, 416, 417, 453, 375, 436,
	162, 411, 393, 99, 399, 368, 406, 369, 397, 428,
	123, 394, 0, 469, 439, 137, 229, 230, 486, 140,
	444, 0, 186, 150, 0, 0, 431, 471, 434, 462,
	425, 454, 383, 443, 481, 412, 449, 482, 0, 0,
	0, 362, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 448, 476, 408, 491, 0, 452, 367,
	446, 0, 373, 376, 487, 474, 403, 404, 0, 0,
	0, 0, 0, 0, 0, 430, 435, 459, 422, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 400, 0, 442, 0, 0, 0, 380, 374, 0,
	427, 0, 0, 0, 382, 0, 401, 460, 0, 364,
	465, 472, 424, 146, 213, 475, 421, 420, 169, 0,
	115, 0, 192, 127, 413, 138, 457, 489, 479, 432,
	470, 398, 407, 117, 405, 176, 163, 204, 441, 455,
	174, 141, 196, 170, 203, 477, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 222,
	223, 224, 225, 226, 227, 228, 372, 365, 402, 463,
	466, 387, 451, 377, 409, 458, 410, 433, 392, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 219, 120, 119, 188, 108,
	210, 211, 105, 360, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 0,
	0, 158, 130, 0, 0, 0, 370, 0, 187, 206,
	220, 221, 371, 391, 473, 216, 0, 0, 0, 361,
	359, 131, 181, 135, 142, 172, 218, 450, 177, 114,
	205, 183, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 390, 384, 385, 437, 438,
	483, 484, 485, 461, 381, 0, 388, 389, 0, 468,
	132, 231, 232, 440, 98, 106, 139, 490, 217, 0,
	171, 125, 207, 0, 0, 415, 366, 419, 0, 0,
	0, 0, 0, 0, 0, 378, 379, 178, 0, 423,
	418, 445, 447, 456, 464, 0, 395, 429, 0, 111,
	478, 467, 0, 426, 480, 396, 414, 488, 416, 417,
	453, 375, 436, 162, 411, 393, 99, 399, 368, 406,
	369, 397, 428, 123, 394, 0, 469, 439, 137, 229,
	230, 486, 140, 444, 0, 186, 150, 0, 0, 431,
	471, 434, 462, 425, 454, 383, 443, 481, 412, 449,
	482, 0, 0, 0, 94, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 448, 476, 408, 491,
	0, 452, 367, 446, 0, 373, 376, 487, 474, 403,
	404, 0, 0, 0, 0, 0, 0, 0, 430, 435,
	459, 422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 400, 0, 442, 0, 0, 0,
	380, 374, 0, 427, 0, 0, 0, 382, 0, 401,
	460, 0, 364, 465, 472, 424, 146, 213, 475, 421,
	420, 169, 0, 115, 0, 192, 127, 413, 138, 457,
	489, 479, 432, 470, 398, 407, 117, 405, 176, 163,
	204, 441, 455, 174, 141, 196, 170, 203, 477, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 222, 223, 224, 225, 226, 227, 228, 372,
	365, 402, 463, 466, 387, 451, 377, 409, 458, 410,
	433, 392, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 219, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 370,
	0, 187, 206, 220, 221, 371, 391, 473, 216, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 218,
	450, 177, 114, 205, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 386, 390, 384,
	385, 437, 438, 483, 484, 485, 461, 381, 0, 388,
	389, 0, 468, 132, 231, 232, 440, 98, 106, 139,
	490, 217, 0, 171, 125, 207, 0, 0, 415, 366,
	419, 0, 0, 0, 0, 0, 0, 0, 378, 379,
	178, 0, 423, 418, 445, 447, 456, 464, 0, 395,
	429, 0, 111, 478, 467, 0, 426, 480, 396, 414,
	488, 416, 417, 453, 375, 436, 162, 411, 393, 99,
	399, 368, 406, 369, 397, 428, 123, 394, 0, 469,
	439, 137, 229, 230, 486, 140, 444, 0, 186, 150,
	0, 0, 431, 471, 434, 462, 425, 454, 383, 443,
	481, 412, 449, 482, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 448,
	476, 408, 491, 0, 452, 367, 446, 0, 373, 376,
	487, 474, 403, 404, 0, 0, 0, 0, 0, 0,
	0, 430, 435, 459, 422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 400, 0, 442,
	0, 0, 0, 380, 374, 0, 427, 0, 0, 0,
	382, 0, 401, 460, 0, 364, 465, 472, 424, 146,
	213, 475, 421, 420, 169, 0, 115, 0, 192, 127,
	413, 138, 457, 489, 479, 432, 470, 398, 407, 117,
	405, 176, 163, 204, 441, 455, 174, 141, 196, 170,
	203, 477, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 222, 223, 224, 225, 226,
	227, 228, 372, 365, 402, 463, 466, 387, 451, 377,
	409, 458, 410, 433, 392, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 709, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 219, 120, 119, 188, 108, 210, 211, 105, 360,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 370, 0, 187, 206, 220, 221, 371, 391,
	473, 216, 0, 0, 0, 361, 359, 131, 181, 135,
	142, 172, 218, 450, 177, 114, 205, 183, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	386, 390, 384, 385, 437, 438, 483, 484, 485, 461,
	381, 0, 388, 389, 0, 468, 132, 231, 232, 440,
	98, 106, 139, 490, 217, 0, 171, 125, 207, 0,
	0, 415, 366, 419, 0, 0, 0, 0, 0, 0,
	0, 378, 379, 178, 0, 423, 418, 445, 447, 456,
	464, 0, 395, 429, 0, 111, 478, 467, 0, 426,
	480, 396, 414, 488, 416, 417, 453, 375, 436, 162,
	411, 393, 99, 399, 368, 406, 369, 397, 428, 123,
	394, 0, 469, 439, 137, 229, 230, 486, 140, 444,
	0, 186, 150, 0, 0, 431, 471, 434, 462, 425,
	454, 383, 443, 481, 412, 449, 482, 0, 0, 0,
	362, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 448, 476, 408, 491, 0, 452, 367, 446,
	0, 373, 376, 487, 474, 403, 404, 0, 0, 0,
	0, 0, 0, 0, 430, 435, 459, 422, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	400, 0, 442, 0, 0, 0, 380, 374, 0, 427,
	0, 0, 0, 382, 0, 401, 460, 0, 364, 465,
	472, 424, 146, 213, 475, 421, 420, 169, 0, 115,
	0, 192, 127, 413, 138, 457, 489, 479, 432, 470,
	398, 407, 117, 405, 176, 163, 204, 441, 455, 174,
	141, 196, 170, 203, 477, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 222, 223,
	224, 225, 226, 227, 228, 372, 365, 402, 463, 466,
	387, 451, 377, 409, 458, 410, 433, 392, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 350,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 219, 120, 119, 188, 108, 210,
	211, 105, 360, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 370, 0, 187, 206, 220,
	221, 371, 391, 473, 216, 0, 0, 0, 361, 359,
	353, 352, 135, 142, 172, 218, 450, 177, 114, 205,
	183, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 386, 390, 384, 385, 437, 438, 483,
	484, 485, 461, 381, 0, 388, 389, 0, 468, 132,
	231, 232, 440, 98, 106, 139, 490, 217, 0, 171,
	125, 207, 0, 0, 415, 366, 419, 0, 0, 0,
	0, 0, 0, 0, 378, 379, 178, 0, 423, 418,
	445, 447, 456, 464, 0, 395, 429, 0, 111, 478,
	467, 0, 426, 480, 396, 414, 488, 416, 417, 453,
	375, 436, 162, 411, 393, 99, 399, 368, 406, 369,
	397, 428, 123, 394, 0, 469, 439, 137, 229, 230,
	486, 140, 444, 0, 186, 150, 0, 0, 431, 471,
	434, 462, 425, 454, 383, 443, 481, 412, 449, 482,
	0, 0, 0, 362, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 448, 476, 408, 491, 0,
	452, 367, 446, 0, 373, 376, 487, 474, 403, 404,
	0, 0, 0, 0, 0, 0, 0, 430, 435, 459,
	422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 400, 0, 442, 0, 0, 0, 380,
	374, 0, 427, 0, 0, 0, 382, 0, 401, 460,
	0, 364, 465, 472, 424, 146, 213, 475, 421, 420,
	169, 0, 115, 0, 192, 127, 413, 138, 457, 489,
	479, 432, 470, 398, 407, 117, 405, 176, 163, 204,
	441, 455, 174, 141, 196, 170, 203, 477, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 222, 223, 224, 225, 226, 227, 228, 372, 365,
	402, 463, 466, 387, 451, 377, 409, 458, 410, 433,
	392, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 219, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 370, 0,
	187, 206, 220, 221, 371, 391, 473, 216, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 218, 450,
	177, 114, 205, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 386, 390, 384, 385,
	437, 438, 483, 484, 485, 461, 381, 0, 388, 389,
	0, 468, 132, 231, 232, 440, 98, 106, 139, 490,
	217, 0, 171, 125, 207, 0, 0, 415, 366, 419,
	0, 0, 0, 0, 0, 0, 0, 378, 379, 178,
	0, 423, 418, 445, 447, 456, 464, 162, 395, 429,
	99, 111, 0, 277, 0, 0, 0, 123, 273, 0,
	0, 0, 137, 229, 230, 319, 140, 320, 0, 186,
	150, 0, 0, 0, 0, 310, 311, 0, 0, 0,
	0, 0, 0, 1021, 0, 50, 0, 0, 274, 298,
	276, 296, 300, 301, 302, 303, 0, 0, 112, 299,
	304, 305, 306, 1022, 0, 0, 0, 271, 289, 0,
	318, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 287, 0, 0, 0, 0,
	332, 0, 288, 0, 0, 284, 285, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 330, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 222, 223, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 219, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 334, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 220, 221, 0,
	0, 0, 216, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 218, 0, 177, 114, 205, 183, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 321, 331, 327, 328, 325, 326, 324, 323, 322,
	333, 312, 313, 314, 315, 317, 0, 132, 231, 232,
	316, 98, 106, 139, 0, 217, 0, 171, 125, 207,
	162, 0, 0, 99, 921, 0, 277, 0, 0, 0,
	123, 273, 0, 0, 178, 137, 229, 230, 319, 140,
	320, 0, 186, 150, 0, 329, 111, 0, 310, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 274, 298, 276, 296, 300, 301, 302, 303, 0,
	0, 112, 299, 304, 305, 306, 0, 0, 0, 0,
	271, 289, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 287, 267,
	0, 0, 0, 332, 0, 288, 0, 0, 284, 285,
	290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 330, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 0, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 222,
	223, 224, 225, 226, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 219, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 334,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	220, 221, 0, 0, 0, 216, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 218, 0, 177, 114,
	205, 183, 307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 321, 331, 327, 328, 325, 326,
	324, 323, 322, 333, 312, 313, 314, 315, 317, 0,
	132, 231, 232, 316, 98, 106, 139, 0, 217, 0,
	171, 125, 207, 162, 0, 0, 99, 0, 0, 277,
	0, 0, 0, 123, 273, 0, 0, 178, 137, 229,
	230, 319, 140, 320, 0, 186, 150, 0, 329, 111,
	0, 310, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 551, 274, 298, 276, 296, 300, 301,
	302, 303, 0, 0, 112, 299, 304, 305, 306, 0,
	0, 0, 0, 271, 289, 0, 318, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 287, 0, 0, 0, 0, 332, 0, 288, 0,
	0, 284, 285, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	330, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 222, 223, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 219, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 334, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 220, 221, 0, 0, 0, 216, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 218,
	0, 177, 114, 205, 183, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 321, 331, 327,
	328, 325, 326, 324, 323, 322, 333, 312, 313, 314,
	315, 317, 0, 132, 231, 232, 316, 98, 106, 139,
	0, 217, 0, 171, 125, 207, 162, 0, 0, 99,
	0, 0, 277, 0, 0, 0, 123, 273, 0, 0,
	178, 137, 229, 230, 319, 140, 320, 0, 186, 150,
	0, 329, 111, 0, 310, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 274, 298, 276,
	296, 300, 301, 302, 303, 0, 0, 112, 299, 304,
	305, 306, 0, 0, 0, 0, 271, 289, 0, 318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 287, 267, 0, 0, 0, 332,
	0, 288, 0, 0, 284, 285, 290, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 330, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 219, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 334, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 220, 221, 0, 0,
	0, 216, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 218, 0, 177, 114, 205, 183, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	321, 331, 327, 328, 325, 326, 324, 323, 322, 333,
	312, 313, 314, 315, 317, 0, 132, 231, 232, 316,
	98, 106, 139, 0, 217, 0, 171, 125, 207, 162,
	0, 0, 99, 0, 0, 277, 0, 0, 0, 123,
	273, 0, 0, 178, 137, 229, 230, 319, 140, 320,
	0, 186, 150, 0, 329, 111, 0, 310, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	274, 298, 276, 296, 300, 301, 302, 303, 0, 0,
	112, 299, 304, 305, 306, 0, 0, 0, 0, 271,
	289, 0, 318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 287, 0, 0,
	0, 0, 332, 0, 288, 0, 0, 935, 285, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 330, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 937, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 222, 223,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 947, 953, 951, 191, 148, 948, 134, 182,
	946, 102, 0, 955, 122, 167, 954, 939, 950, 952,
	949, 944, 198, 938, 219, 957, 956, 958, 936, 960,
	211, 105, 109, 963, 942, 962, 961, 208, 959, 201,
	149, 145, 0, 104, 199, 147, 144, 940, 941, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 334, 0,
	158, 130, 0, 0, 0, 0, 0, 943, 945, 220,
	221, 0, 0, 0, 216, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 218, 0, 177, 114, 205,
	183, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 321, 331, 327, 328, 325, 326, 324,
	323, 322, 333, 312, 313, 314, 315, 317, 0, 132,
	231, 232, 316, 98, 106, 139, 0, 217, 0, 171,
	125, 207, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 178, 99, 0, 0,
	277, 0, 0, 0, 123, 273, 0, 329, 111, 137,
	229, 230, 319, 140, 320, 0, 186, 150, 0, 0,
	0, 0, 310, 311, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 274, 298, 276, 296, 300,
	301, 302, 303, 0, 0, 112, 299, 304, 305, 306,
	0, 0, 0, 0, 271, 289, 0, 318, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 287, 0, 0, 0, 0, 332, 0, 288,
	0, 0, 284, 285, 290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 330, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 222, 223, 224, 225, 226, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 219,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 334, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 220, 221, 0, 0, 0, 216,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	218, 0, 177, 114, 205, 183, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 321, 331,
	327, 328, 325, 326, 324, 323, 322, 333, 312, 313,
	314, 315, 317, 0, 132, 231, 232, 316, 98, 106,
	139, 0, 217, 0, 171, 125, 207, 162, 0, 0,
	99, 0, 0, 277, 0, 0, 0, 123, 273, 0,
	0, 178, 137, 229, 230, 319, 140, 320, 0, 186,
	150, 0, 329, 111, 0, 310, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 274, 298,
	276, 296, 300, 301, 302, 303, 0, 0, 112, 299,
	304, 305, 306, 0, 0, 0, 0, 271, 289, 0,
	318, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 287, 0, 0, 0, 0,
	332, 0, 288, 0, 0, 284, 285, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 330, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 222, 223, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 219, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 334, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 220, 221, 0,
	0, 0, 216, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 218, 0, 177, 114, 205, 183, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 321, 331, 327, 328, 325, 326, 324, 323, 322,
	333, 312, 313, 314, 315, 317, 0, 132, 231, 232,
	316, 98, 106, 139, 0, 217, 0, 171, 125, 207,
	162, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 178, 137, 229, 230, 319, 140,
	320, 0, 186, 150, 0, 329, 111, 0, 310, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 274, 298, 276, 296, 300, 301, 302, 303, 0,
	0, 112, 299, 304, 305, 306, 0, 0, 0, 0,
	0, 289, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 287, 0,
	0, 0, 0, 332, 0, 288, 0, 0, 284, 285,
	290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 213, 0, 0, 330, 169, 0,
	115, 0, 192, 127, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 176, 163, 204, 2154, 164,
	174, 141, 196, 170, 203, 0, 214, 215, 194, 212,
	179, 107, 157, 97, 168, 175, 0, 116, 0, 222,
	223, 224, 225, 226, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 184, 100, 193,
	202, 113, 180, 103, 200, 189, 191, 148, 133, 134,
	182, 101, 102, 0, 173, 122, 167, 126, 121, 160,
	190, 151, 197, 198, 118, 219, 120, 119, 188, 108,
	210, 211, 105, 109, 209, 156, 161, 159, 208, 195,
	201, 149, 145, 0, 104, 199, 147, 144, 136, 0,
	124, 128, 165, 143, 166, 129, 153, 152, 154, 334,
	0, 158, 130, 0, 0, 0, 0, 0, 187, 206,
	220, 221, 0, 0, 0, 216, 0, 0, 0, 155,
	110, 131, 181, 135, 142, 172, 218, 0, 177, 114,
	205, 183, 307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 321, 331, 327, 328, 325, 326,
	324, 323, 322, 333, 312, 313, 314, 315, 317, 0,
	132, 231, 232, 316, 98, 106, 139, 0, 217, 0,
	171, 125, 207, 162, 0, 0, 99, 0, 0, 277,
	0, 0, 0, 123, 0, 0, 0, 178, 137, 229,
	230, 319, 140, 320, 0, 186, 150, 0, 329, 111,
	0, 310, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 274, 298, 276, 296, 300, 301,
	302, 303, 0, 0, 112, 299, 304, 305, 306, 0,
	0, 0, 0, 0, 289, 0, 318, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 287, 0, 0, 0, 0, 332, 0, 288, 0,
	0, 284, 285, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	330, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 222, 223, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 219, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 334, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 220, 221, 0, 0, 0, 216, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 218,
	0, 177, 114, 205, 183, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 321, 331, 327,
	328, 325, 326, 324, 323, 322, 333, 312, 313, 314,
	315, 317, 0, 132, 231, 232, 316, 98, 106, 139,
	0, 217, 0, 171, 125, 207, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	178, 137, 229, 230, 319, 140, 320, 0, 186, 150,
	0, 329, 111, 0, 310, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 274, 298, 276,
	296, 300, 301, 302, 303, 0, 0, 112, 299, 304,
	305, 306, 0, 0, 0, 0, 0, 289, 0, 318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 287, 0, 0, 0, 0, 332,
	0, 288, 0, 0, 284, 285, 290, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 330, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 219, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 334, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 220, 221, 0, 0,
	0, 216, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 218, 0, 177, 114, 205, 183, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	321, 331, 327, 328, 325, 326, 324, 323, 322, 333,
	312, 313, 314, 315, 317, 0, 132, 231, 232, 316,
	98, 106, 139, 0, 217, 0, 171, 125, 207, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 178, 137, 229, 230, 319, 140, 320,
	0, 186, 150, 0, 329, 111, 0, 310, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 1197, 0, 0,
	274, 298, 276, 296, 300, 301, 302, 303, 0, 0,
	112, 299, 304, 305, 306, 0, 0, 0, 0, 0,
	289, 0, 318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 287, 0, 0,
	0, 0, 332, 0, 288, 0, 0, 284, 285, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 330, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 222, 223,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 219, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 334, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 220,
	221, 0, 0, 0, 216, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 218, 0, 177, 114, 205,
	183, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 321, 331, 327, 328, 325, 326, 324,
	323, 322, 333, 312, 313, 314, 315, 317, 0, 132,
	231, 232, 316, 98, 106, 139, 0, 217, 0, 171,
	125, 207, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 178, 137, 229, 230,
	0, 140, 0, 0, 186, 150, 0, 329, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1532, 0, 0, 274, 0, 1301, 1302, 1303, 1304, 0,
	0, 0, 0, 112, 1307, 1305, 305, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 222, 223, 224, 225, 226, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 219, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 1309, 1314, 0, 0, 0, 0, 0,
	187, 206, 220, 221, 0, 0, 0, 216, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 218, 0,
	177, 114, 205, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1311, 0, 1313, 1312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 231, 232, 0, 98, 106, 139, 0,
	217, 0, 171, 125, 207, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 178,
	137, 229, 230, 0, 140, 0, 0, 186, 150, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 0, 274, 0, 1301, 1302,
	1303, 1304, 0, 0, 0, 0, 112, 1307, 1305, 305,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 222, 223, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	219, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 1309, 1314, 0, 0,
	0, 0, 0, 187, 206, 220, 221, 0, 0, 0,
	216, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 218, 0, 177, 114, 205, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 1311,
	0, 1313, 1312, 137, 229, 230, 0, 140, 0, 0,
	186, 150, 0, 0, 0, 132, 231, 232, 0, 98,
	106, 139, 0, 217, 0, 171, 125, 207, 0, 362,
	298, 915, 296, 300, 301, 302, 303, 0, 0, 112,
	299, 304, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 222, 223, 224,
	225, 226, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 219, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 220, 221,
	0, 0, 0, 216, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 218, 0, 177, 114, 205, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 756, 0, 137, 229, 230,
	0, 140, 0, 0, 186, 150, 0, 0, 132, 231,
	232, 0, 98, 106, 139, 0, 217, 0, 171, 125,
	207, 1831, 0, 362, 0, 1829, 0, 0, 0, 0,
	0, 0, 0, 112, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	1828, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1827,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 757, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 222, 223, 224, 225, 226, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 0, 783, 784, 167, 785,
	786, 787, 789, 788, 758, 759, 760, 764, 762, 761,
	763, 735, 737, 211, 733, 736, 742, 738, 739, 740,
	754, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 755, 765, 766, 767, 768, 769, 770, 771,
	772, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 220, 221, 0, 0, 0, 216, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 218, 0,
	177, 114, 205, 183, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 756, 0, 137,
	229, 230, 0, 140, 0, 0, 186, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 231, 232, 362, 98, 734, 139, 0,
	217, 0, 171, 125, 207, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 741, 0, 909, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 0, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 757, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 222, 223, 224, 225, 226, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 0, 783, 784,
	167, 785, 786, 787, 789, 788, 758, 907, 760, 764,
	762, 761, 763, 735, 737, 211, 733, 906, 742, 738,
	739, 740, 754, 910, 744, 745, 746, 747, 748, 749,
	750, 751, 911, 912, 755, 765, 766, 767, 768, 769,
	770, 771, 772, 0, 0, 158, 130, 908, 0, 0,
	0, 0, 187, 206, 220, 221, 0, 0, 0, 216,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	218, 0, 177, 114, 205, 183, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 756,
	0, 137, 229, 230, 0, 140, 0, 0, 186, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 231, 232, 362, 98, 734,
	139, 0, 217, 0, 171, 125, 207, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 757,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 2025, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 0,
	783, 784, 167, 785, 786, 787, 789, 788, 758, 759,
	760, 764, 762, 761, 763, 735, 737, 211, 733, 736,
	742, 738, 739, 740, 754, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 755, 765, 766, 767,
	768, 769, 770, 771, 772, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 220, 221, 0, 0,
	0, 216, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 218, 0, 177, 114, 205, 183, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 568, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 137, 229, 230,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 231, 232, 0,
	98, 734, 139, 362, 217, 570, 171, 125, 207, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	565, 564, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 566, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 222, 223, 224, 225, 226, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 219, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 220, 221, 0, 0, 0, 216, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 218, 0,
	177, 114, 205, 183, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 756, 0, 137,
	229, 230, 0, 140, 0, 0, 186, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 231, 232, 362, 98, 106, 139, 0,
	217, 0, 171, 125, 207, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 741, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 213, 0,
	0, 0, 169, 0, 115, 0, 192, 127, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 757, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 222, 223, 224, 225, 226, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 0, 783, 784,
	167, 785, 786, 787, 789, 788, 758, 759, 760, 764,
	762, 761, 763, 735, 737, 211, 733, 736, 742, 738,
	739, 740, 754, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 755, 765, 766, 767, 768, 769,
	770, 771, 772, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 220, 221, 0, 0, 0, 216,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	218, 0, 177, 114, 205, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 137, 229, 230, 0, 140, 0, 0,
	186, 150, 0, 0, 132, 231, 232, 0, 98, 734,
	139, 0, 217, 0, 171, 125, 207, 1831, 0, 362,
	0, 1829, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 1828, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1827, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 213, 0, 0, 0, 169, 0, 115, 0,
	192, 127, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 176, 163, 204, 0, 164, 174, 141,
	196, 170, 203, 0, 214, 215, 194, 212, 179, 107,
	157, 97, 168, 175, 0, 116, 0, 222, 223, 224,
	225, 226, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 184, 100, 193, 202, 113,
	180, 103, 200, 189, 191, 148, 133, 134, 182, 101,
	102, 0, 173, 122, 167, 126, 121, 160, 190, 151,
	197, 198, 118, 219, 120, 119, 188, 108, 210, 211,
	105, 109, 209, 156, 161, 159, 208, 195, 201, 149,
	145, 0, 104, 199, 147, 144, 136, 0, 124, 128,
	165, 143, 166, 129, 153, 152, 154, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 187, 206, 220, 221,
	0, 0, 0, 216, 0, 0, 0, 155, 110, 131,
	181, 135, 142, 172, 218, 0, 177, 114, 205, 183,
	0, 0, 0, 0, 162, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 137,
	229, 230, 0, 140, 0, 0, 186, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 231,
	232, 0, 98, 106, 139, 362, 217, 495, 171, 125,
	207, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1045, 146, 213, 0,
	0, 0, 1040, 0, 1039, 0, 1041, 1042, 0, 138,
	0, 0, 1043, 1046, 0, 0, 0, 117, 0, 176,
	163, 204, 0, 164, 174, 141, 196, 170, 203, 0,
	214, 215, 194, 212, 179, 107, 157, 97, 168, 175,
	0, 116, 0, 222, 223, 224, 225, 226, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 184, 100, 193, 202, 113, 180, 103, 200, 189,
	191, 148, 133, 134, 182, 101, 102, 0, 173, 122,
	167, 126, 121, 160, 190, 151, 197, 198, 118, 219,
	120, 119, 188, 108, 210, 211, 105, 109, 209, 156,
	161, 159, 208, 195, 201, 149, 145, 0, 104, 199,
	147, 144, 136, 0, 124, 128, 165, 143, 166, 129,
	153, 152, 154, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 187, 206, 220, 221, 0, 0, 0, 216,
	0, 0, 0, 155, 110, 131, 181, 135, 142, 172,
	218, 0, 177, 114, 205, 183, 0, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 229, 230, 0, 140, 0,
	0, 186, 150, 0, 132, 231, 232, 0, 98, 106,
	139, 0, 217, 0, 171, 125, 207, 50, 0, 0,
	94, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	112, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 222, 223,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 219, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 220,
	221, 0, 0, 0, 216, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 218, 0, 177, 114, 205,
	183, 0, 0, 0, 0, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	137, 229, 230, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	231, 232, 0, 98, 106, 139, 94, 217, 96, 171,
	125, 207, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 222, 223, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	219, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 220, 221, 0, 0, 0,
	216, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 218, 0, 177, 114, 205, 183, 0, 0, 0,
	0, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 229, 230, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 231, 232, 0, 98,
	106, 139, 274, 217, 96, 171, 125, 207, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 2109,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	1506, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	222, 223, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 219, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 220, 221, 0, 0, 0, 216, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 218, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 137, 229, 230, 0, 140, 0, 0, 186, 150,
	0, 132, 231, 232, 0, 98, 106, 139, 0, 217,
	0, 171, 125, 207, 50, 0, 0, 94, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 112, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	213, 0, 0, 0, 169, 0, 115, 0, 192, 127,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 176, 163, 204, 0, 164, 174, 141, 196, 170,
	203, 0, 214, 215, 194, 212, 179, 107, 157, 97,
	168, 175, 0, 116, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 184, 100, 193, 202, 113, 180, 103,
	200, 189, 191, 148, 133, 134, 182, 101, 102, 0,
	173, 122, 167, 126, 121, 160, 190, 151, 197, 198,
	118, 219, 120, 119, 188, 108, 210, 211, 105, 109,
	209, 156, 161, 159, 208, 195, 201, 149, 145, 0,
	104, 199, 147, 144, 136, 0, 124, 128, 165, 143,
	166, 129, 153, 152, 154, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 187, 206, 220, 221, 0, 0,
	0, 216, 0, 0, 0, 155, 110, 131, 181, 135,
	142, 172, 218, 0, 177, 114, 205, 183, 0, 0,
	0, 0, 162, 0, 0, 99, 0, 698, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 137, 229, 230,
	0, 140, 0, 0, 186, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 231, 232, 0,
	98, 106, 139, 94, 217, 700, 171, 125, 207, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 213, 0, 0, 0,
	169, 0, 115, 0, 192, 127, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 176, 163, 204,
	0, 164, 174, 141, 196, 170, 203, 0, 214, 215,
	194, 212, 179, 107, 157, 97, 168, 175, 0, 116,
	0, 222, 223, 224, 225, 226, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 184,
	100, 193, 202, 113, 180, 103, 200, 189, 191, 148,
	133, 134, 182, 101, 102, 0, 173, 122, 167, 126,
	121, 160, 190, 151, 197, 198, 118, 219, 120, 119,
	188, 108, 210, 211, 105, 109, 209, 156, 161, 159,
	208, 195, 201, 149, 145, 0, 104, 199, 147, 144,
	136, 0, 124, 128, 165, 143, 166, 129, 153, 152,
	154, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	187, 206, 220, 221, 0, 0, 0, 216, 0, 0,
	0, 155, 110, 131, 181, 135, 142, 172, 218, 0,
	177, 114, 205, 183, 0, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 137, 229, 230, 0, 140, 0, 0, 186,
	150, 0, 132, 231, 232, 0, 98, 106, 139, 0,
	217, 0, 171, 125, 207, 50, 0, 0, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 222, 223, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 219, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 220, 221, 0,
	0, 0, 216, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 218, 0, 177, 114, 205, 183, 0,
	0, 0, 0, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 137, 229,
	230, 0, 140, 0, 0, 186, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 231, 232,
	0, 98, 106, 139, 94, 217, 96, 171, 125, 207,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 222, 223, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 219, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 220, 221, 0, 0, 0, 216, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 218,
	815, 177, 114, 205, 183, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	137, 229, 230, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 792, 0, 132, 231, 232, 362, 98, 106, 139,
	0, 217, 0, 171, 125, 207, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 222, 223, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	793, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	219, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 220, 221, 0, 0, 0,
	216, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 218, 0, 177, 114, 205, 183, 0, 0, 0,
	0, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 719, 0, 0, 0, 137, 229, 230, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 231, 232, 0, 98,
	106, 139, 362, 217, 718, 171, 125, 207, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	222, 223, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 219, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 220, 221, 0, 0, 0, 216, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 218, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 162, 0, 0,
	99, 0, 698, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 137, 229, 230, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 231, 232, 0, 98, 106, 139, 94, 217,
	700, 171, 125, 207, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 696, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 222, 223, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 219, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 220, 221, 0,
	0, 0, 216, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 218, 0, 177, 114, 205, 183, 0,
	0, 0, 0, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 676, 123, 0, 0, 0, 0, 137, 229,
	230, 0, 140, 0, 0, 186, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 231, 232,
	0, 98, 106, 139, 94, 217, 96, 171, 125, 207,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 222, 223, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 219, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 220, 221, 0, 0, 0, 216, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 218,
	0, 177, 114, 205, 183, 0, 0, 0, 345, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	137, 229, 230, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 0, 132, 231, 232, 0, 98, 106, 139,
	0, 217, 0, 171, 125, 207, 94, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 222, 223, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	219, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 220, 221, 0, 0, 0,
	216, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 218, 0, 177, 114, 205, 183, 0, 0, 0,
	0, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 229, 230, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 231, 232, 0, 98,
	106, 139, 94, 217, 96, 171, 125, 207, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	222, 223, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 219, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 220, 221, 0, 0, 0, 216, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 218, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 137, 229, 230, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 231, 232, 0, 98, 106, 139, 94, 217,
	96, 171, 125, 207, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 222, 223, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 219, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 220, 221, 0,
	0, 0, 216, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 218, 0, 177, 114, 205, 183, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 229, 230, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 231, 232,
	362, 98, 106, 139, 0, 217, 0, 171, 125, 207,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 1506, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 222, 223,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 219, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 220,
	221, 0, 0, 0, 216, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 218, 0, 177, 114, 205,
	183, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 229, 230, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	231, 232, 362, 98, 106, 139, 0, 217, 0, 171,
	125, 207, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	1583, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	222, 223, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 219, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 220, 221, 0, 0, 0, 216, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 218, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 162, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 137, 229, 230, 0, 140, 0, 0, 186,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 231, 232, 0, 98, 106, 139, 274, 217,
	96, 171, 125, 207, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 213, 0, 0, 0, 169, 0, 115, 0, 192,
	127, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 176, 163, 204, 0, 164, 174, 141, 196,
	170, 203, 0, 214, 215, 194, 212, 179, 107, 157,
	97, 168, 175, 0, 116, 0, 222, 223, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 184, 100, 193, 202, 113, 180,
	103, 200, 189, 191, 148, 133, 134, 182, 101, 102,
	0, 173, 122, 167, 126, 121, 160, 190, 151, 197,
	198, 118, 219, 120, 119, 188, 108, 210, 211, 105,
	109, 209, 156, 161, 159, 208, 195, 201, 149, 145,
	0, 104, 199, 147, 144, 136, 0, 124, 128, 165,
	143, 166, 129, 153, 152, 154, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 187, 206, 220, 221, 0,
	0, 0, 216, 0, 0, 0, 155, 110, 131, 181,
	135, 142, 172, 218, 0, 177, 114, 205, 183, 0,
	0, 0, 0, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 137, 229,
	230, 0, 140, 0, 0, 186, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 231, 232,
	0, 98, 106, 139, 94, 217, 700, 171, 125, 207,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	0, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 222, 223, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 219, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 220, 221, 0, 0, 0, 216, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 218,
	0, 177, 114, 205, 183, 162, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	137, 229, 230, 0, 140, 0, 0, 186, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 231, 232, 362, 98, 106, 139,
	0, 217, 0, 171, 125, 207, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 213,
	0, 0, 0, 169, 0, 115, 0, 192, 127, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	176, 163, 204, 0, 164, 174, 141, 196, 170, 203,
	0, 214, 215, 194, 212, 179, 107, 157, 97, 168,
	175, 0, 116, 0, 222, 223, 224, 225, 226, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 184, 100, 193, 202, 113, 180, 103, 200,
	189, 191, 148, 133, 134, 182, 101, 102, 0, 173,
	122, 167, 126, 121, 160, 190, 151, 197, 198, 118,
	219, 120, 119, 188, 108, 210, 211, 105, 109, 209,
	156, 161, 159, 208, 195, 201, 149, 145, 0, 104,
	199, 147, 144, 136, 0, 124, 128, 165, 143, 166,
	129, 153, 152, 154, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 187, 206, 220, 221, 0, 0, 0,
	216, 0, 0, 0, 155, 110, 131, 181, 135, 142,
	172, 218, 0, 177, 114, 205, 183, 0, 0, 0,
	0, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 229, 230, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 231, 232, 0, 98,
	106, 139, 362, 217, 570, 171, 125, 207, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	222, 223, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 219, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 220, 221, 0, 0, 0, 216, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 218, 0, 177,
	114, 205, 183, 162, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 137, 229,
	230, 0, 140, 0, 0, 186, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 231, 232, 362, 98, 106, 139, 0, 217,
	0, 171, 125, 207, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 213, 0, 0,
	503, 169, 0, 115, 0, 192, 127, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 176, 163,
	204, 0, 164, 174, 141, 196, 170, 203, 0, 214,
	215, 194, 212, 179, 107, 157, 97, 168, 175, 0,
	116, 0, 222, 223, 224, 225, 226, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	184, 100, 193, 202, 113, 180, 103, 200, 189, 191,
	148, 133, 134, 182, 101, 102, 0, 173, 122, 167,
	126, 121, 160, 190, 151, 197, 198, 118, 219, 120,
	119, 188, 108, 210, 211, 105, 109, 209, 156, 161,
	159, 208, 195, 201, 149, 145, 0, 104, 199, 147,
	144, 136, 0, 124, 128, 165, 143, 166, 129, 153,
	152, 154, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 187, 206, 220, 221, 0, 0, 0, 216, 0,
	0, 0, 155, 110, 131, 181, 135, 142, 172, 218,
	0, 177, 114, 205, 183, 0, 0, 0, 0, 162,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 137, 229, 230, 0, 140, 0,
	0, 186, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 231, 232, 0, 98, 106, 139,
	362, 217, 495, 171, 125, 207, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 213, 0, 0, 0, 169, 0, 115,
	0, 192, 127, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 176, 163, 204, 0, 164, 174,
	141, 196, 170, 203, 0, 214, 215, 194, 212, 179,
	107, 157, 97, 168, 175, 0, 116, 0, 222, 223,
	224, 225, 226, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 184, 100, 193, 202,
	113, 180, 103, 200, 189, 191, 148, 133, 134, 182,
	101, 102, 0, 173, 122, 167, 126, 121, 160, 190,
	151, 197, 198, 118, 219, 120, 119, 188, 108, 210,
	211, 105, 109, 209, 156, 161, 159, 208, 195, 201,
	149, 145, 0, 104, 199, 147, 144, 136, 0, 124,
	128, 165, 143, 166, 129, 153, 152, 154, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 187, 206, 220,
	221, 0, 0, 0, 216, 0, 0, 0, 155, 110,
	131, 181, 135, 142, 172, 218, 0, 177, 114, 205,
	183, 162, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 137, 229, 230, 0,
	140, 0, 0, 186, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	231, 232, 362, 98, 106, 139, 0, 217, 0, 171,
	125, 207, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 213, 0, 0, 0, 169,
	0, 115, 0, 192, 127, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 176, 163, 204, 0,
	164, 174, 141, 196, 170, 203, 0, 214, 215, 194,
	212, 179, 107, 157, 97, 168, 175, 0, 116, 0,
	222, 223, 224, 225, 226, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 184, 100,
	193, 202, 113, 180, 103, 200, 189, 191, 148, 133,
	134, 182, 101, 102, 0, 173, 122, 167, 126, 121,
	160, 190, 151, 197, 198, 118, 219, 120, 119, 188,
	108, 210, 211, 105, 109, 209, 156, 161, 159, 208,
	195, 201, 149, 145, 0, 104, 199, 147, 144, 136,
	0, 124, 128, 165, 143, 166, 129, 153, 152, 154,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 187,
	206, 220, 221, 0, 0, 0, 216, 0, 0, 0,
	155, 110, 131, 181, 135, 142, 172, 218, 0, 177,
	114, 205, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 231, 232, 0, 98, 106, 139, 0, 217,
	0, 171, 125, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111,
}

var yyPact = [...]int16{
	3018, -1000, -253, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1498, 1564, -1000, -1000, -1000, -1000, -1000, 1312, 2497,
	356, 389, 169, 18233, 379, 2213, 18519, -1000, 131, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1236, -1000, -1000,
	-1000, -1000, -1000, 1436, 1507, 1236, 1447, 9178, -1000, 352,
	15648, 17947, 7451, -1000, 20791, 376, 373, 237, 364, 21073,
	344, 344, 21073, 20505, 18519, 378, 344, -1000, -199, -162,
	-1000, -60, 371, 18519, -1000, 18519, 350, 1063, 350, 350,
	350, 18519, -1000, 489, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 18519, 1048, 1398, 252, 5959, 5959, 5959,
	5959, 249, 5959, -1, 1337, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1363, 922, 1406, 10189,
	10189, 1498, -1000, 1236, -1000, -1000, 1550, -1000, 13624, 488,
	-1000, 10189, 117, 1231, -1000, -1000, -225, 1231, -1000, -1000,
	449, -1000, -1000, -1000, 11188, 11188, 11188, 11188, 11188, 11188,
	11188, -1000, -1000, -1000, -1000, 54, -1000, 899, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 474, -1000, 9856,
	1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 10189, 1231,
	1379, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 2869,
	1231, 1231, 1231, 1231, -1000, 707, 17655, 1210, 1414, -1000,
	-1000, -1000, 1443, 14781, 17369, 18519, 1149, -1000, 1223, 7078,
	14, -1000, -1000, -1000, 632, 473, 17083, -1000, -1000, -1000,
	1397, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1091, -1000, 13906, 13906, 16797, 21073, 344, 156,
	344, 1315, 1041, 704, 1010, 1336, 370, 21073, 1434, 344,
	18519, -1000, -1000, -1000, -1000, 16515, 5959, 362, 18519, 1420,
	1335, 18519, 993, 980, -1000, 6705, -1000, 5959, 5959, 5959,
	5959, 5959, 5959, 5959, 5959, -1000, -1000, -1000, -1000, -1000,
	-1000, 5959, 5959, -1000, 18, -1000, 18519, 1449, -1000, -1000,
	-1000, -1000, -1000, 1559, 523, 945, 457, 1225, -1000, 684,
	1436, 922, 18519, -1000, 10189, 10189, 848, -1000, 20223, -1000,
	-1000, 4467, 528, 11188, 783, 636, 11188, 11188, 11188, 11188,
	11188, 11188, 11188, 11188, 11188, 11188, 11188, 11188, 11188, 11188,
	11188, 895, 2581, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 975, -1000, 13056, -1000, 1236,
	12480, 12480, 33, 33, 33, 33, 33, 33, 19937, -1000,
	-258, 8512, -1000, 7824, 922, 1070, 621, 9856, 9178, 9178,
	9511, 10189, 11188, 19369, 9178, 1449, 685, 621, 19369, 1478,
	-1000, 922, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 90, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	9178, 9178, 9178, 9178, -1000, 269, 18519, -1000, 19369, 15648,
	15648, 15648, 15648, 15648, -1000, 1360, 1357, -1000, 1353, 1349,
	1370, 18519, -1000, 1072, 14781, 428, 1231, -1000, 19655, -1000,
	-1000, 269, 1180, 15648, 18519, -1000, -1000, 6332, 1223, 14,
	1216, -1000, -11, -16, 8179, 7824, 497, -1000, -1000, -1000,
	-1000, 206, 14486, 106, -145, 44, -1000, -1000, -1000, -1000,
	-1000, 1269, -1000, -1000, -1000, 1269, 275, 1311, 1269, 1311,
	-1000, 1269, 1311, 85, 85, 85, 85, 85, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1300, 1298, -1000, 1269, 1269,
	1269, 1269, 1269, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1285, 280, 1285, 1270, 1270, -1000, -1000,
	106, 1310, 18519, 21073, 1333, 18519, -211, 18519, -89, 973,
	5959, 1418, 5959, 18519, 1539, 18519, -1000, -1000, -1000, 178,
	441, 13906, 18519, -1000, 2616, 18519, -1000, 18519, -1000, -1000,
	18519, 5959, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 638, -1000, -1000,
	-1000, 1321, -1000, -1000, 1371, 10189, 10189, 5213, 10189, -1000,
	-1000, -1000, 1406, -1000, -1000, 528, 571, -1000, -1000, 859,
	-1000, -1000, -1000, -1000, 452, 1231, -1000, 2456, -1000, -1000,
	-1000, -1000, 783, 11188, 11188, 11188, 2375, 2456, 2414, 244,
	881, 33, 47, 47, 31, 31, 31, 31, 31, 81,
	81, -1000, -1000, -1000, -1000, -82, -1000, 1269, 1285, 280,
	1285, 1270, 1270, -1000, -1000, 922, 274, 203, -1000, -1000,
	85, -1000, -1000, -145, -1000, -225, 906, -1000, -1000, 889,
	922, 9178, 1068, 1070, -1000, 13624, -1000, -1000, 10189, -1000,
	922, 1068, 1068, 780, 1221, 11521, 1269, -1000, 1269, 1270,
	-1000, -1000, 1269, 124, 1269, 123, -1000, -1000, -1000, -1000,
	1270, -1000, -1000, -1000, -1000, -1000, 1269, 1269, -1000, -1000,
	1269, -1000, 1269, 1269, 847, 644, 2441, 1199, -1000, 445,
	1068, 9178, 705, -1000, 10189, 922, 18519, -1000, -1000, 1068,
	922, 1218, 1068, 1068, 1164, 1231, -1000, 1222, -1000, 631,
	1414, 1307, 1330, 1096, -1000, -1000, -1000, -1000, 1351, -1000,
	1350, -1000, -1000, -1000, -1000, -83, 372, 368, 367, 21073,
	-1000, 1515, 15648, 1209, -1000, -1000, 1216, 14, -19, -1000,
	-1000, -1000, -1000, 621, 614, -1000, -1000, 971, 7824, 1213,
	1390, -1000, -1000, -1000, -1000, -1000, -1000, 1294, 763, 21073,
	317, 298, 556, 514, 955, -1000, -1000, -1000, 868, -1000,
	21073, -1000, 1558, -1000, -1000, 316, -1000, 311, 698, 905,
	18519, 1290, 158, 1289, 12187, 886, -1000, -270, -1000, 15,
	-1000, -1000, 865, 85, 85, 1269, 85, 874, 85, 85,
	-1000, -1000, 497, 1395, 497, 497, 497, 497, 898, 898,
	-91, -91, -1000, -1000, -1000, -1000, 875, 1285, -1000, -1000,
	-1000, 871, -1000, 18519, 21073, 1283, 1329, 18519, 1431, 355,
	-1000, -1000, 1429, -1000, 7824, -1000, -1000, -1000, -1000, -1000,
	1428, 1176, -1000, -1000, 175, -1000, 441, -1000, 1539, -1000,
	1318, -1000, 1493, 805, 494, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 265, 396, -1000, 5959,
	-1000, 625, 18519, 18519, 9178, -1000, 1374, 621, 621, 439,
	-1000, -1000, -1000, -1000, -1000, 5586, 9178, -1000, 2375, 2456,
	2359, -1000, 11188, 11188, 108, -1000, 1269, -1000, 104, 103,
	-1000, 55, -1000, -225, -1000, 1068, 9178, -237, -1000, 621,
	-1000, -1000, -1000, 3500, 895, 10189, -1000, 865, 264, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3500, 11188, 11188, 11188, 11188, 11188, 5213, -76, 1212,
	672, -1000, 10189, 816, -1000, -1000, -1000, -1000, -1000, -1000,
	1328, 19369, 1231, -1000, 16229, 21073, 1498, 19369, 10189, 10189,
	-1000, -1000, 10189, 1282, -1000, 10189, -1000, -1000, -1000, -1000,
	1280, 1231, 1231, 1231, 1035, -1000, 1498, 1209, -1000, -1000,
	-1000, -17, 5, -1000, 10189, -1000, 4840, -1000, 206, -1000,
	18801, -1000, 1556, 1475, 323, -2, -1000, 953, 935, -1000,
	917, -1000, -1000, 19, -1000, -193, 98, 3, -1000, -1000,
	1231, -1000, 1277, 10189, 1427, -1000, 1403, 862, -1000, 11854,
	-1000, -231, -1000, -1000, -1000, -225, -1000, -1000, -1000, 1231,
	-1000, 1276, 1272, -1000, 1268, 1231, 437, -1000, -1000, -1000,
	-1000, -1000, 1147, 497, 497, 85, 497, 1145, 1128, 497,
	497, -1000, 559, -1000, -1000, -1000, -1000, 1061, -1000, 1058,
	-1000, -1000, 1211, -1000, 1053, 1208, 1327, 15353, 18519, 1271,
	1236, 344, 1236, 1205, -1000, 605, 1472, 232, 18519, 1539,
	19083, 1539, 1165, 21073, -1000, 295, 21073, -1000, -1000, 21073,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 21073,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 18519, -1000, -1000, -1000, -1000, -1000, 21073, 329, -1000,
	-1000, 892, 10189, -1000, -1000, 1171, -1000, 7824, -1000, -1000,
	922, -1000, 11188, 2456, 2456, 36, 30, 29, -1000, 889,
	-1000, -1000, -1000, -1000, 1231, 922, 1269, 1269, -1000, 1269,
	1270, -1000, 1269, 124, 1269, 123, -1000, -1000, -1000, -1000,
	1270, -1000, -1000, -1000, -1000, -1000, 1269, 1269, -1000, -1000,
	1269, -1000, 1269, 1269, 922, 697, -1000, -1000, 922, 426,
	1430, 2304, 1885, 939, -1000, 1231, -67, -1000, 621, 10189,
	-1000, 1407, 1155, 1192, -1000, -1000, 8845, 922, 1045, 434,
	1035, 1436, -1000, 621, 621, 621, 19083, 621, -190, 19083,
	19083, 19083, 15934, 21073, 1436, -1000, -1000, -1000, -1000, 621,
	4094, -1000, 7824, 1033, -1000, 279, 1269, 484, 484, -196,
	309, 308, 1231, -1000, -1000, -1000, -1000, -165, -1000, -1000,
	-1000, -1000, 698, -1000, 1268, 10189, 19083, 820, 184, -1000,
	1203, 1119, 844, 1114, -1000, 13056, -1000, 922, -1000, 821,
	-1000, 747, 1106, 7824, -1000, -1000, -1000, 497, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 85, 883, 85, 835, -1000,
	832, 15353, 21073, 18519, 1081, 1201, -1000, 268, 1258, 19083,
	-1000, 18519, -1000, 7824, 4094, 361, 1497, -1000, -1000, 1471,
	-1000, 1194, -1000, -1000, 1174, 18519, 1254, 21073, -1000, -1000,
	281, -1000, 1253, -1000, -1000, -1000, -1000, 1416, 21073, -1000,
	-1000, 621, 1515, 15648, -1000, 2456, -1000, -1000, -1000, -1000,
	404, -1000, -1000, -1000, -1000, -1000, 11188, 11188, -1000, 11188,
	11188, 11188, 922, 811, 621, 283, -1000, 1231, -1000, -1000,
	1152, 21073, 21073, -1000, -1000, 1029, 1024, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1022, 1022, 1022, 428, -1000, -1000,
	-1000, -1000, -1000, -1000, 1303, 18801, 1415, -1000, -1000, -1000,
	755, -1000, -1000, 720, 239, 741, -1000, 21073, -165, 10189,
	-1000, 1231, 697, 1020, -105, 10189, 1252, 791, -1000, 1076,
	-231, 1231, -1000, -1000, -1000, -1000, -1000, -1000, 1231, -1000,
	497, -1000, 497, 1062, 1054, 1036, 1251, 1250, -215, 15353,
	1016, 1424, -1000, -1000, 21073, -1000, -1000, -1000, -1000, -1000,
	205, 676, 21073, 2901, 1457, -1000, 14200, 1248, 1246, 19083,
	1231, 332, 1512, 1193, -1000, 959, 922, 1501, 426, 426,
	426, 426, 291, -1000, -1000, 1554, -1000, 1231, -1000, 1236,
	424, -1000, -1000, -1000, -190, -1000, -1000, -1000, -83, 1325,
	2531, 195, -1000, 909, 602, 807, 601, 584, 582, 572,
	564, 554, 537, -1000, -1000, -1000, 1541, -1000, -1000, -1000,
	1549, 1245, -1000, 1243, 697, 10189, 238, 1326, -1000, -1000,
	708, -1000, 1030, 1017, -1000, -1000, -1000, -1000, -215, 15353,
	18801, 1515, 1242, 1002, 1515, 1236, 1108, -1000, 201, 152,
	10189, -1000, 2901, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1498, 21073, 3075, 21073, 21073, 21073, 416,
	10855, 10189, -1000, 676, 204, 952, 12774, 14200, 14200, 12774,
	14200, 14200, 18801, 18801, 1009, 261, 282, 1495, 1496, -1000,
	922, -1000, 10189, -1000, -1000, -1000, -1000, 922, 214, -115,
	19369, 1192, 922, 21073, -1000, -1000, -1000, 21073, -1000, -108,
	2531, 21073, -1000, 782, -1000, -1000, 809, 781, 809, 809,
	809, 809, 809, 484, 484, 21073, 18801, 238, 697, -1000,
	-70, 1548, -114, 113, -1000, -1000, 1515, 948, 1006, 1303,
	19083, -215, 1303, -1000, -87, 21073, 10189, 3228, 2901, 621,
	-1000, 1436, 1191, 13338, -1000, 828, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 21073, 1544, 1543, 1540, 1519, 3169, 117, 583, 151,
	137, 192, -1000, -1000, 12774, -1000, -1000, -1000, -1000, -1000,
	1001, 998, 1315, 966, -1000, 21073, 1234, -1000, 10189, 10189,
	-1000, 1188, -1000, 621, -1000, 1369, -80, -164, 1187, -1000,
	-1000, 1231, 962, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 698, 698, 951, 947, -1000,
	238, -1000, 484, 484, -1000, -1000, -1000, 180, 894, 775,
	773, 760, 80, -1000, 1494, 1303, 1515, 1303, 1325, 943,
	1515, 1325, -1000, -233, -1000, 621, -1000, -1000, 2901, 2257,
	-1000, 1406, 21073, 188, -1000, -1000, -1000, 3075, 1412, -1000,
	-1000, -1000, -1000, -1000, 2901, 2901, 2901, 2901, -1000, -1000,
	292, -89, -1000, 261, 1387, 18801, 621, 1172, 10189, -1000,
	1368, -1000, 21073, -1000, 2531, -1000, -1000, 327, 1303, -1000,
	-1000, -1000, 759, -1000, 745, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 15067, 1325, 1303, -1000, -1000, -1000, 1303, -1000,
	10189, -254, -1000, 3150, -1000, -1000, 13906, 1455, -1000, 21073,
	880, 1931, 354, 122, 165, -1000, 173, -1000, -1000, 258,
	941, -1000, -97, 922, -1000, 18519, 1325, -1000, -1000, -1000,
	405, -1000, -1000, 1325, 621, 671, -1000, -1000, 1236, -1000,
	-1000, 2901, 560, 585, 3098, -1000, 166, -1000, 251, -1000,
	-117, -1000, 1233, -1000, 7824, -1000, -1000, -1000, 334, 136,
	-1000, -1000, -1000, 1231, -173, 21073, -1000, -1000, 2901, 10522,
	-1000, 921, 286, 426, 922, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1805, 18, 68, 1804, 1803, 1802, 1583, 1579, 1577,
	1575, 1800, 1796, 1795, 1794, 1793, 1792, 1791, 1789, 1788,
	1787, 1786, 1785, 1774, 1773, 1771, 1770, 1768, 1766, 1765,
	1475, 1764, 1763, 1762, 118, 1761, 1760, 1759, 1756, 78,
	230, 87, 89, 249, 1755, 49, 117, 150, 1754, 90,
	1753, 1752, 250, 1751, 108, 1750, 1748, 2239, 1746, 1745,
	46, 71, 36, 52, 1744, 1743, 109, 161, 1742, 1741,
	40, 1739, 1737, 98, 21, 31, 39, 43, 1736, 88,
	23, 1735, 95, 1734, 1733, 1732, 1731, 54, 1730, 99,
	45, 33, 16, 1729, 29, 26, 105, 77, 56, 20,
	210, 102, 1727, 74, 103, 91, 1725, 973, 1724, 1721,
	1720, 1718, 1717, 1716, 690, 96, 1715, 1713, 1712, 25,
	32, 79, 0, 788, 70, 120, 1710, 1709, 1708, 2307,
	121, 104, 53, 1707, 94, 194, 76, 1705, 1704, 83,
	119, 8, 114, 113, 1701, 115, 1698, 1697, 1695, 2256,
	100, 65, 82, 106, 1693, 1690, 97, 107, 81, 67,
	85, 101, 24, 1689, 1688, 1687, 57, 1686, 15, 38,
	1, 93, 1685, 1684, 1683, 1682, 48, 73, 1680, 47,
	1675, 28, 22, 3, 5, 6, 1673, 1672, 1669, 10,
	1668, 51, 1666, 4, 1664, 17, 1662, 1661, 1658, 41,
	1651, 1647, 1646, 13, 1643, 1642, 42, 30, 64, 55,
	63, 1641, 1637, 44, 80, 60, 1632, 72, 11, 2,
	9, 1628, 12, 1627, 1624, 1619, 35, 27, 1616, 1615,
	1613, 1612, 1609, 1608, 59, 1607, 1606, 1605, 1603, 7,
	1601, 1598, 14, 1597, 1596, 1595, 1900, 200, 1594, 1593,
	50, 1592, 1587, 1581, 1570, 275,
}

var yyR1 = [...]uint8{
	0, 244, 245, 245, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 6, 3, 4, 4, 5, 5,
	7, 7, 33, 33, 8, 9, 9, 9, 248, 248,
	52, 52, 96, 96, 10, 10, 10, 10, 11, 11,
	223, 223, 222, 224, 224, 12, 12, 12, 12, 12,
	216, 216, 216, 216, 216, 13, 13, 219, 219, 219,
	14, 14, 14, 101, 101, 105, 105, 105, 106, 106,
	106, 106, 235, 235, 137, 137, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 249, 249, 250, 250,
	250, 250, 250, 250, 250, 214, 214, 214, 214, 215,
	215, 215, 215, 217, 217, 218, 218, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 221, 221, 120,
	120, 197, 197, 197, 198, 198, 198, 198, 198, 198,
	200, 200, 201, 201, 127, 127, 195, 195, 194, 193,
	193, 192, 192, 191, 202, 202, 22, 173, 174, 174,
	174, 174, 174, 174, 174, 161, 161, 141, 141, 141,
	141, 141, 141, 141, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 208, 208, 208, 208, 208, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 210, 211, 212,
	204, 204, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 151, 151, 151, 151,
	151, 151, 203, 203, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 145, 145, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 144, 144, 144, 144, 144,
	144, 144, 144, 146, 146, 146, 146, 146, 146, 146,
	146, 142, 142, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 148, 148, 148, 148,
	148, 148, 148, 148, 160, 160, 149, 149, 158, 158,
	159, 159, 159, 150, 150, 150, 157, 157, 157, 154,
	154, 155, 155, 156, 156, 156, 152, 152, 152, 153,
	153, 153, 163, 184, 184, 184, 186, 186, 187, 187,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 172, 172, 213, 213, 183, 183, 183, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 171, 171, 181,
	181, 182, 182, 179, 179, 179, 180, 166, 166, 166,
	166, 166, 167, 168, 168, 168, 168, 164, 165, 206,
	206, 206, 240, 240, 240, 240, 240, 240, 241, 241,
	207, 207, 169, 169, 170, 170, 177, 177, 177, 177,
	251, 251, 175, 175, 176, 176, 176, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 252, 252, 253, 253, 253, 253, 253, 253,
	253, 190, 188, 188, 189, 189, 17, 18, 18, 18,
	18, 18, 19, 19, 23, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 112, 112, 109, 109, 110, 110,
	111, 111, 111, 113, 113, 113, 138, 138, 138, 25,
	25, 27, 27, 28, 29, 26, 26, 26, 26, 26,
	254, 30, 31, 31, 32, 32, 32, 36, 36, 36,
	34, 34, 35, 35, 41, 41, 40, 40, 42, 42,
	42, 42, 126, 126, 126, 125, 125, 236, 236, 236,
	236, 236, 44, 44, 45, 45, 46, 46, 47, 47,
	47, 226, 226, 225, 225, 227, 227, 227, 227, 227,
	227, 59, 59, 94, 94, 94, 97, 97, 48, 48,
	48, 48, 49, 49, 50, 50, 51, 51, 133, 133,
	132, 132, 132, 131, 131, 53, 53, 53, 55, 54,
	54, 54, 54, 56, 56, 58, 58, 57, 57, 60,
	60, 60, 60, 61, 61, 95, 95, 43, 43, 43,
	43, 43, 43, 43, 108, 108, 63, 63, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 72, 72,
	72, 72, 72, 72, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 39, 39, 73, 73, 73,
	79, 74, 74, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	70, 70, 70, 70, 70, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 255, 255, 71, 71, 71, 71, 37, 37, 37,
	37, 37, 136, 136, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 140, 140, 140,
	140, 140, 140, 140, 140, 83, 83, 38, 38, 81,
	81, 82, 119, 119, 84, 84, 80, 80, 80, 228,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 85, 85, 86, 86, 237, 237, 238, 238, 239,
	87, 87, 88, 88, 89, 90, 90, 90, 91, 91,
	91, 91, 92, 92, 92, 65, 65, 65, 65, 65,
	65, 93, 93, 93, 93, 98, 98, 75, 75, 77,
	77, 76, 78, 99, 99, 103, 100, 100, 104, 104,
	104, 104, 104, 20, 21, 102, 102, 102, 128, 128,
	128, 114, 114, 115, 115, 107, 107, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 117, 117, 117,
	118, 118, 123, 123, 124, 124, 129, 129, 129, 130,
	130, 229, 229, 229, 230, 230, 230, 231, 231, 232,
	233, 233, 234, 243, 243, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	246, 247, 134, 135, 135, 135,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 5, 10, 1, 3, 1, 3,
	7, 8, 1, 1, 8, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 2, 6,
	1, 3, 2, 0, 1, 2, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 3, 5, 1, 2, 3,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 7, 10, 7, 5, 5, 5, 11,
	11, 9, 13, 14, 5, 8, 0, 3, 0, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 1,
	1, 1, 3, 1, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 1, 4, 0,
	3, 0, 2, 2, 0, 2, 2, 2, 2, 2,
	0, 2, 0, 3, 0, 1, 0, 2, 1, 0,
	2, 1, 3, 3, 0, 2, 4, 4, 0, 1,
	3, 3, 3, 3, 3, 2, 2, 3, 1, 1,
	1, 1, 1, 0, 2, 2, 3, 2, 4, 2,
	4, 2, 2, 3, 2, 3, 2, 7, 9, 3,
	3, 6, 9, 9, 6, 6, 8, 8, 5, 8,
	7, 4, 2, 4, 6, 2, 4, 2, 1, 1,
	1, 2, 1, 1, 1, 3, 3, 1, 2, 1,
	1, 2, 0, 4, 3, 4, 3, 3, 3, 3,
	3, 3, 3, 2, 4, 6, 2, 3, 2, 3,
	1, 3, 0, 2, 0, 3, 3, 2, 2, 2,
	2, 2, 3, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 2, 2,
	2, 1, 1, 1, 3, 3, 2, 2, 2, 1,
	1, 1, 1, 4, 4, 4, 4, 4, 1, 5,
	2, 2, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 3, 3, 0, 3, 3, 0,
	1, 0, 1, 0, 2, 1, 0, 3, 3, 0,
	1, 2, 6, 0, 1, 4, 1, 2, 1, 3,
	2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 1, 1, 0, 2, 5, 2, 3,
	3, 2, 3, 2, 2, 3, 4, 1, 1, 1,
	1, 1, 3, 3, 2, 2, 1, 2, 5, 5,
	8, 8, 13, 1, 1, 2, 2, 10, 7, 0,
	1, 1, 0, 1, 1, 1, 2, 2, 1, 2,
	0, 3, 0, 1, 1, 3, 0, 4, 1, 3,
	2, 1, 1, 2, 1, 1, 1, 6, 11, 13,
	13, 6, 7, 7, 7, 12, 7, 7, 7, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 3, 3, 3, 3, 4, 3, 6,
	4, 2, 4, 2, 1, 1, 0, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 3, 4,
	4, 5, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 0, 4, 1, 3, 1, 1, 1, 1, 1,
	1, 4, 8, 1, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 0, 4, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 6, 2, 2, 2, 2,
	2, 2, 2, 3, 3, 1, 1, 1, 1, 2,
	4, 5, 5, 6, 4, 4, 4, 6, 6, 6,
	6, 6, 8, 8, 6, 8, 8, 9, 7, 5,
	4, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 1, 2, 1, 2, 2, 1, 2, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 2,
	1, 1, 2, 2, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 0, 2, 1, 3, 5, 3,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 3, 0, 2, 0, 3, 1, 3, 1,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 5, 3, 1, 3, 1, 2, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 2, 0, 2, 2, 0, 1, 4,
	1, 3, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -244, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -23, -24, -25, -27, -28, -29,
	-26, -3, -4, 7, -33, 9, 10, 31, -22, 122,
	123, 125, 124, 155, 126, 148, 52, 206, 207, 209,
	210, 26, 149, 150, 153, 154, 6, -246, 8, 331,
	56, -245, 379, -87, 15, -32, 5, -30, -254, -30,
	-30, -30, -30, -173, 56, -240, -241, -202, 131, 164,
	323, 128, 144, 162, 163, 351, 129, 363, 364, 146,
	366, 76, -107, 132, 134, 129, 129, 130, 132, 323,
	128, 129, -57, -129, 59, -122, 61, 171, 342, 21,
	206, 219, 220, 211, 252, 240, 343, 169, 237, 241,
	288, 377, 69, 209, 297, 138, 175, 151, 232, 235,
	234, 226, 223, 28, 258, 349, 225, 141, 259, 263,
	270, 289, 338, 216, 217, 291, 256, 33, 143, 344,
	37, 159, 292, 261, 255, 250, 131, 254, 215, 249,
	41, 229, 265, 264, 266, 287, 243, 170, 269, 245,
	227, 244, 18, 154, 157, 260, 262, 224, 172, 136,
	161, 348, 293, 222, 158, 173, 153, 296, 365, 168,
	210, 290, 218, 299, 205, 204, 40, 276, 236, 213,
	228, 214, 140, 207, 166, 247, 160, 230, 231, 253,
	212, 248, 208, 162, 155, 298, 277, 350, 246, 242,
	238, 239, 167, 132, 164, 165, 283, 346, 294, 233,
	278, 279, 177, 178, 179, 180, 181, 182, 183, 34,
	35, 339, 340, 129, 116, 241, 122, 281, 130, 33,
	161, -138, 129, -109, 165, 283, 290, 289, 284, -129,
	208, -134, -134, -134, -134, -134, -30, -2, -91, 17,
	16, -5, -3, -246, 21, 22, -42, 107, -43, -129,
	-62, 78, -67, 29, 59, -122, 61, 24, -66, -63,
	-80, -228, -78, -79, 116, 117, 105, 106, 113, 79,
	118, -70, -68, -69, -71, -231, 62, -123, 60, 70,
	63, 64, 65, 66, 71, 72, 73, 300, -76, -246,
	46, 47, 332, 333, 334, 335, 341, 336, 81, 36,
	38, 322, 330, 329, 328, 326, 327, 324, 325, 376,
	135, 323, 111, 331, 267, -31, -107, -45, -46, -47,
	-48, -59, -79, -246, -57, 11, -52, -57, -100, -137,
	208, -104, 290, 289, -124, 300, -102, -123, -121, 288,
	241, 287, 59, -122, 127, 185, 354, 77, 23, 25,
	274, 280, 184, 80, 116, 16, 81, 191, 363, 364,
	115, 332, 122, 50, 324, 325, 322, 189, 334, 335,
	323, 281, 196, 20, 29, 374, 10, 26, 149, 22,
	109, 124, 186, 84, 85, 152, 24, 150, 73, 192,
	194, 19, 53, 142, 11, 353, 13, 14, 368, 355,
	135, 134, 96, 367, 130, 48, 8, 118, 27, 375,
	93, 44, 147, 195, 46, 94, 17, 326, 327, 32,
	341, 156, 111, 51, 38, 369, 78, 370, 71, 54,
	295, 190, 76, 15, 49, 157, 371, 144, 193, 95,
	125, 331, 47, 187, 372, 128, 188, 6, 337, 31,
	148, 45, 129, 282, 83, 133, 72, 163, 5, 146,
	9, 52, 55, 328, 329, 330, 36, 82, 12, 145,
	345, 74, -174, -161, -123, 61, 130, 130, 132, 204,
	132, -123, -115, 135, -115, -123, -123, -115, -57, 129,
	-115, 366, 363, 364, 331, 129, -57, -57, -114, 135,
	59, -114, -114, -114, -57, 119, -57, 59, 31, 323,
	59, 161, 129, 162, 132, -135, -246, -124, -135, -135,
	-135, 166, 167, -135, -110, 285, 54, -36, 42, 43,
	-247, 58, -92, 19, 32, -43, -129, -88, -89, -43,
	-87, -2, 11, -126, 77, 76, 93, -125, 23, -123,
	61, 119, -43, -64, 96, 78, 94, 95, 80, 102,
	101, 112, 105, 106, 107, 108, 109, 110, 111, 103,
	104, 115, 376, 86, 87, 88, 89, 90, 91, 92,
	97, 98, 99, 100, -108, -246, -199, 376, -79, -246,
	120, 121, -67, -67, -67, -67, -67, -67, -67, -232,
	268, -246, 61, 119, -2, -74, -43, -246, -246, -246,
	-246, -246, -246, -246, -246, -246, -83, -43, -246, 39,
	-255, -246, -255, -255, -255, -255, -255, -255, -255, -140,
	116, 241, 151, 232, -143, -142, 247, 246, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 240, 343,
	-246, -246, -246, -246, 68, -58, 27, -57, 31, 57,
	-53, -55, -54, -56, 44, 48, 50, 45, 46, 47,
	51, -133, 23, -45, -246, -132, 157, -131, 23, -129,
	61, -57, -52, -248, 57, 11, 55, 57, -100, 208,
	-101, -105, 291, 293, 86, 119, -128, -123, 61, 29,
	31, 58, 57, -162, -141, -145, -142, -147, -146, -148,
	-123, -143, -144, 240, 343, 237, 241, 238, 243, 244,
	245, 116, 242, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 246, 258, 31, 151, 230, 231,
	232, 235, 234, 236, 233, 259, 260, 261, 262, 263,
	264, 265, 266, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 222, 223, 225, 226, 227, 229, 228,
	-162, -123, 54, 203, -123, -115, 205, -115, -195, 55,
	59, 78, 59, 54, -214, 54, 19, 184, 185, 197,
	-123, 23, -115, -57, -57, 295, -135, 133, -57, 24,
	54, -57, 59, 59, -130, -129, -121, -135, -135, -135,
	-135, -135, -135, -135, -135, -135, -135, -112, 282, 286,
	-57, -34, 22, 9, 96, 57, 18, 119, 57, -90,
	25, 26, -91, -247, -57, -43, -43, -72, 71, 78,
	72, 73, -125, 107, -130, -124, -121, -67, -73, -76,
	-79, 67, 96, 94, 95, 80, -67, -67, -67, -67,
	-67, -67, -67, -67, -67, -67, -67, -67, -67, -67,
	-67, -136, 59, 61, -145, 231, -140, -143, 222, 223,
	225, 226, 227, 229, 228, 59, 241, 231, 271, 118,
	247, 256, 257, -141, -66, 61, -123, -66, -123, 380,
	-41, 22, -40, -74, -42, -43, -124, -247, 57, -247,
	-2, -40, -40, -43, -139, 116, 237, 151, 232, 226,
	256, 257, 243, 276, 230, 277, 219, 211, 216, 229,
	227, 213, 228, 212, 225, 222, 235, 234, 236, 247,
	238, 245, 244, 242, -43, -80, -67, -80, -123, -129,
	-40, -34, -81, -82, 82, -80, 19, -247, 239, -40,
	-41, -40, -40, -40, -96, 157, -57, -99, -103, -80,
	-46, -47, -47, -46, -47, 44, 44, 44, 49, 44,
	49, 44, -54, -129, -247, -60, 52, 134, 53, -246,
	-131, -96, 55, -45, -57, -104, -101, 57, 292, 294,
	295, 54, 74, -43, -124, -153, 116, 115, -177, -251,
	346, 35, -161, -163, -166, -164, -165, -178, -167, 138,
	136, 140, 141, 146, -171, 130, 147, 71, 78, -208,
	138, -211, 54, 274, 280, 136, 147, 146, 377, 69,
	139, 23, 353, 355, 29, 30, -156, 380, 268, -154,
	277, -149, 56, -149, -149, 239, -150, 56, -149, -150,
	-149, -150, -152, 241, -152, -152, -152, -152, 56, 56,
	-149, -149, -149, -149, -149, -158, 56, 224, -158, -158,
	-159, 56, -159, 54, 55, -57, -123, 54, -57, -235,
	374, 375, -57, -193, 345, -194, 59, -135, 24, -135,
	-57, -217, -215, 8, 9, 10, -57, 198, -214, -141,
	-57, -116, 127, 124, 125, -190, 123, 274, 241, 69,
	29, 15, 332, 157, 350, 59, 158, -57, -57, -57,
	-135, -111, 11, 96, -35, 45, 40, -43, -43, -130,
	-89, -92, 71, 72, 73, 119, -246, -73, -67, -67,
	-67, -39, 152, 77, 345, -247, 239, -157, 345, 346,
	-156, -233, -234, 61, -247, -40, 57, -247, -247, -43,
	-247, -247, -247, 57, 55, 57, -149, 56, -149, -149,
	-159, -149, 217, -149, 217, -159, -149, -149, -149, -149,
	-149, 23, 57, 11, 57, 57, 11, 119, -247, -40,
	-84, -82, 84, -43, -247, -129, -247, -247, -247, -247,
	-65, 31, 36, -2, -246, -246, -61, 57, 12, 86,
	-50, -49, 54, 55, -51, 54, -49, 44, 44, -226,
	345, 130, 130, 130, -97, -123, -61, -45, -61, -105,
	-106, 296, 293, 299, 86, 59, -175, -124, 57, 34,
	56, -207, 54, 78, -169, -123, 147, -171, -171, 59,
	-171, 59, 130, 59, 71, 19, -123, 9, 147, 147,
	-207, 61, -57, 56, -204, 354, 16, 56, -209, 56,
	-210, 61, 62, 63, 64, 71, -151, 70, -63, 269,
	-70, 322, 325, 324, 270, -123, -129, -212, 63, 381,
	-155, 278, 63, -152, -152, -149, -152, 63, 59, -152,
	-152, -153, 31, -153, -153, -153, -153, -160, 61, -160,
	-157, -157, 63, -158, 63, -57, -123, 56, 54, -57,
	23, 132, 23, -192, -191, -124, -197, 23, 54, 57,
	198, -214, -217, 55, -134, -127, 138, -166, -253, 164,
	146, 137, 142, 141, 59, 136, 140, 157, -196, 164,
	137, 138, 142, 141, 59, 130, 147, 136, 140, 157,
	146, -117, -118, 133, 23, 130, 147, 157, 127, -135,
	-113, 94, 12, -129, -129, -40, 41, 119, 107, -124,
	-41, -39, 77, -67, -67, 230, 230, 230, 381, 57,
	-199, -247, -42, -236, 378, -139, 116, 237, 151, 232,
	226, 256, 243, 276, 230, 277, 219, 211, 216, 229,
	227, 213, 228, 212, 225, 222, 235, 234, 236, 247,
	238, 245, 244, 242, -136, -43, -152, 59, -139, -67,
	-67, -67, -67, -67, -124, 342, -87, 85, -43, 83,
	-98, 54, -99, -75, -77, -76, -246, -2, -93, -123,
	-97, -87, -103, -43, -43, -43, 56, -43, 56, -246,
	-246, -246, -247, 57, -87, -61, 293, 297, 298, -43,
	86, -124, -177, -182, -179, -123, 147, 10, 9, 19,
	142, 136, 377, 59, 59, 59, -206, 146, 363, 364,
	365, -208, 377, -151, 270, -246, 56, -43, 23, 29,
	63, -209, 56, -210, -199, 376, -199, -246, -149, 56,
	-149, 56, 56, 119, 58, -153, -153, -152, -153, 58,
	58, -153, -153, 59, 116, 58, 57, 58, 57, 58,
	57, 56, 55, 54, -181, -182, -70, -123, -57, 56,
	-2, -115, -2, 57, 86, -198, 19, 172, 173, -57,
	-215, -94, -123, 147, -217, 54, -123, -252, 130, 147,
	-123, -134, -123, -134, -123, -57, -134, -123, 138, -166,
	61, -43, -44, 11, -247, -67, 279, 279, 279, -234,
	-246, -247, -247, -247, -247, -247, 19, 57, -247, 57,
	19, -246, -38, 337, -43, 28, -98, 57, -247, -247,
	-247, 57, 119, -247, -91, -94, -225, -227, 368, 369,
	370, 371, 372, 373, -94, -94, -94, -132, -123, -91,
	-176, -124, 61, 63, 58, 57, -149, -180, 272, -149,
	-168, 168, 169, 31, 170, -168, 365, 147, 147, -246,
	-206, -207, -43, -94, 58, 56, 355, 57, 58, -209,
	61, 269, 58, -123, -247, 58, 58, 58, -124, -153,
	-152, 61, -152, 63, 63, -181, -123, -57, 58, 56,
	-94, -57, -191, -176, 133, 21, 6, 8, 9, 10,
	19, -120, 57, 23, -57, -249, 56, -123, 146, 56,
	27, -123, -61, -45, -247, -237, -87, 157, -67, -67,
	-67, -67, -67, -247, 61, 147, -77, 36, -2, -246,
	-123, -123, 58, 58, 57, -247, -247, -247, -60, -184,
	-186, 345, -185, 55, 143, 69, 177, 178, 179, 180,
	181, 182, 183, -179, -90, -207, 54, 71, 171, -207,
	54, -169, -123, -206, -43, -246, -247, 58, 351, 352,
	-43, 56, 63, 58, -153, -153, 58, 58, 58, 56,
	56, -95, 367, -181, 58, 23, -170, -123, 186, -119,
	82, -123, -218, -220, -7, -9, -8, -11, -10, -12,
	-13, -14, -20, -3, 20, 31, 190, 191, 196, 192,
	145, 135, -21, -120, 19, -250, -123, 105, 86, 61,
	-161, 57, 56, 56, -94, -246, 136, -85, 13, -247,
	-87, -247, 16, -247, -247, -247, -247, -37, 96, 345,
	9, -75, -2, 119, -227, -226, -183, 54, -185, 345,
	56, 347, 59, -172, 86, 61, 86, 86, 86, 86,
	86, 86, 86, 9, 10, 56, 56, -247, -43, -203,
	170, 54, 58, -205, 58, 58, -95, -181, -182, -61,
	56, 58, -61, -2, -200, 57, 55, 187, 206, -43,
	-220, -87, -223, -123, -222, -243, -242, 301, 302, 303,
	304, 305, 306, 307, 308, 309, 310, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, -123, -123,
	-123, -216, 38, 193, 194, 195, -62, -67, -43, -62,
	-119, 186, 58, -250, -123, -250, -250, -250, -250, -250,
	-182, -182, 58, -188, -189, 157, 147, -86, 14, 16,
	-247, -238, -239, -43, -247, 343, 51, 348, -99, -247,
	-123, -123, -187, -185, -123, 63, -213, 54, 74, 63,
	-213, -213, -213, -213, -213, -168, -168, -170, -182, -203,
	-247, 338, 10, 9, 351, 352, 58, 207, 357, 358,
	156, 359, 170, 360, 361, -61, 58, 58, -184, -94,
	-95, -184, -201, 345, -123, -43, -221, -220, 206, -219,
	-220, -91, 57, -224, -141, 188, -213, 57, -123, 11,
	11, 11, 11, -220, 206, 83, 206, 206, 187, 58,
	58, -195, -247, 57, -123, 56, -43, -74, 57, 41,
	344, 349, -246, 58, 57, -207, -207, 58, 58, -203,
	-168, -168, 345, 63, 16, 63, 63, 63, 63, 358,
	156, 360, 16, -184, -61, -184, -183, 58, -61, -183,
	377, -220, -220, 379, -92, -222, -123, 189, -242, 27,
	-219, -218, -219, -219, -229, 199, 78, -193, -189, 36,
	-182, -239, 41, -123, -185, 139, -184, 63, 63, 362,
	-129, -183, -184, -184, -43, 379, -220, 85, 19, -123,
	85, 379, 379, 85, 379, -230, 200, 199, 159, 58,
	345, -247, -57, -183, 119, -183, 85, -2, 85, 84,
	85, 202, 201, 160, 348, 56, -124, 135, 206, -246,
	349, -170, -219, -67, 156, 58, 85, -247, -247,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 830, 0, 530, 530, 530, 530, 530, 0, -2,
	885, 0, 0, 0, 0, -2, 520, 521, 0, 523,
	524, 1212, 1212, 1212, 1212, 1212, 530, 0, 32, 33,
	1210, 1, 3, 838, 0, 0, 534, 917, 532, 885,
	0, 0, 0, 86, 168, 0, 0, 0, 0, 0,
	883, 883, 0, 0, 0, 0, 883, 413, 414, 415,
	418, 0, 0, 0, 886, 0, 881, 0, 881, 881,
	881, 0, 483, 617, 906, 907, 908, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
	1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
	1207, 1208, 1209, 0, 0, 0, 0, 1213, 1213, 1213,
	1213, 0, 1213, 508, 501, 503, 517, 518, 507, 519,
	522, 525, 526, 527, 528, 529, 537, 26, 842, 917,
	917, 830, 28, 0, 535, 536, 0, 548, 552, 0,
	627, 917, 632, 634, -2, -2, -2, 0, 673, 674,
	675, 676, 677, 678, 917, 917, 917, 917, 917, 917,
	917, 705, 706, 707, 708, 0, 812, 806, 814, 815,
	816, 817, 818, 819, 820, 636, 637, 0, 862, 917,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 0,
	0, 741, 741, 741, 741, 741, 741, 741, 741, 0,
	0, 0, 0, 0, 918, 531, 0, 0, 564, 566,
	567, 568, 598, 0, 600, 0, 0, 40, 44, 0,
	1179, 866, -2, -2, 0, 0, 0, 904, 905, -2,
	1086, -2, 902, 903, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 0, 169, 183, 183, 0, 0, 883, 0,
	883, 156, 0, 0, 0, 0, 0, 0, 0, 883,
	0, 419, 416, 417, 165, 0, 1213, 0, 0, 0,
	0, 0, 0, 0, 482, 0, 484, 1213, 1213, 1213,
	1213, 1213, 1213, 1213, 1213, 493, 1214, 1215, 494, 495,
	496, 1213, 1213, 498, 0, 509, 0, 540, 538, 539,
	27, 1211, 22, 0, 0, 839, 0, 831, 832, 835,
	838, 26, 0, 549, 917, 917, 0, 553, 0, 555,
	556, 0, 630, 917, 0, 0, 917, 917, 917, 917,
	917, 917, 917, 917, 917, 917, 917, 917, 917, 917,
	917, 0, 0, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 633, 0, 811, 183, 647, 0,
	0, 0, 696, 697, 698, 699, 700, 701, 702, 709,
	0, -2, 813, 0, 26, 0, 671, 917, 917, 917,
	917, 917, 917, 0, 917, 540, 0, 796, 0, 0,
	732, 0, 733, 734, 735, 736, 737, 738, 739, 740,
	787, 0, 789, 790, 791, 792, 793, 794, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 291, 292,
	917, -2, 917, 917, 533, 42, 0, 616, 0, 0,
	0, 0, 0, 0, 605, 0, 0, 608, 0, 0,
	0, 0, 599, 0, 0, 619, 1141, 601, 0, 603,
	604, -2, 0, 0, 0, 38, 39, 0, 45, 1179,
	47, 73, 0, 0, 917, 0, 349, 878, 879, 880,
	876, 426, 0, 175, 343, 339, 178, 179, 180, 181,
	182, 326, 264, -2, -2, -2, -2, -2, -2, -2,
	-2, 326, -2, -2, -2, -2, -2, 346, -2, -2,
	-2, -2, -2, 312, -2, 1101, 0, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	176, 0, 0, 0, 0, 0, 0, 0, 159, 0,
	1213, 0, 1213, 0, 0, 0, 115, 116, 117, 0,
	0, 183, 0, 166, 0, 0, 449, 0, 477, 882,
	0, 1213, 480, 481, 618, 909, 910, 485, 486, 487,
	488, 489, 490, 491, 492, 497, 500, 510, 504, 505,
	502, 542, 541, 843, 0, 917, 917, 0, 917, 834,
	836, 837, 842, 29, 24, 628, 629, 631, 648, 0,
	650, 652, 554, 550, 0, 807, -2, 638, 639, 667,
	668, 669, 0, 917, 917, 917, 665, 643, 0, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 693, 752, 753, 694, 0, 704, 326, 328, 328,
	328, 330, 330, 281, 282, 0, 326, 326, 257, 258,
	-2, -2, -2, 343, 691, 254, 0, 692, 703, 0,
	0, 917, 0, 0, 546, 552, 809, 670, 917, 861,
	26, 0, 0, 0, 0, -2, -2, -2, -2, -2,
	-2, 761, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 0, 675, 0, 0, 806, 0,
	0, 917, 804, 799, 917, 0, 0, 742, 788, 0,
	0, 545, 0, 0, 0, 0, 615, 623, 863, 0,
	565, 594, 596, 0, 591, 606, 607, 609, 0, 611,
	0, 613, 614, 569, 570, 571, 0, 0, 0, 0,
	602, 623, 0, 623, 41, 867, 46, 0, 0, 76,
	77, 868, 869, 870, 0, 872, 350, 0, 167, 428,
	0, 431, 170, 171, 172, 173, 174, 0, 420, -2,
	1146, 1169, 1104, 0, 0, 387, 388, 185, 0, 187,
	0, 189, 0, 191, 192, 0, 194, 196, 420, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 345, 341,
	340, 263, 0, 346, 346, 326, 346, 0, 346, 346,
	300, 301, 349, 0, 349, 349, 349, 349, 0, 0,
	336, 336, 286, 287, 288, 275, 0, 328, 277, 278,
	279, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	82, 83, 0, 96, 0, 157, 158, 97, 884, 98,
	141, 0, 123, 119, 120, 121, 0, 118, 0, 104,
	0, 1212, 154, 0, 897, 450, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 0, 0, 476, 1213,
	479, 513, 0, 0, 917, 543, 0, 840, 841, 0,
	833, 23, 649, 651, 653, 0, -2, 640, 665, 644,
	0, 641, 917, 917, 0, 635, -2, 256, 0, 0,
	262, 0, 920, 254, 710, 0, 917, 557, 714, 672,
	-2, 715, 716, 0, 0, 917, 754, 1210, 346, 758,
	759, 762, 764, 765, 767, 772, 778, 779, 782, 785,
	786, 0, 917, 917, 917, 917, 917, 0, 0, 830,
	0, 800, 917, 0, 730, 731, 743, 744, 745, 746,
	855, 0, 0, -2, 0, 0, 830, 0, 917, 917,
	588, 595, 917, 0, 589, 917, 590, 610, 612, 581,
	0, 0, 0, 0, 0, 586, 830, 623, 37, 74,
	75, 0, 0, 81, 917, 351, 0, 432, 426, 430,
	0, 397, 0, 0, 0, 423, 378, 0, 0, 381,
	0, 383, -2, 409, 186, 0, 0, 0, 193, 195,
	0, 199, 200, 917, 0, 230, 0, 0, 212, 0,
	215, -2, 218, 219, 220, 254, 222, 223, 224, 1135,
	227, 326, 326, 250, 1107, 0, 0, 228, 229, 344,
	177, 342, 0, 349, 349, 346, 349, 0, 0, 349,
	349, 302, 0, 303, 304, 305, 306, 0, 324, 0,
	284, 285, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 160, 161, 0, 144, 0, 0, 0,
	0, 0, 0, 0, 437, 0, 422, 441, 1212, 0,
	155, 464, 465, 466, 467, 468, 469, 470, 1212, 0,
	451, 452, 453, 454, 455, 456, 457, 458, 459, 460,
	461, 0, 1212, 898, 899, 900, 901, 0, 0, 478,
	499, 0, 917, 511, 512, 562, 844, 0, 551, 808,
	0, 642, 917, 666, 645, 0, 0, 0, 919, 0,
	922, 711, 547, 712, 0, 0, 326, 326, 757, 326,
	330, 760, 326, 763, 326, 766, 768, 769, 770, 771,
	330, 773, 774, 775, 776, 777, 326, 326, 780, 781,
	326, 784, 326, 326, 0, 0, 755, 756, 0, 0,
	0, 0, 0, 0, 807, 0, 797, 729, 805, 917,
	30, 0, 855, 845, 857, 859, 917, 26, 0, 851,
	0, 838, 864, 624, 865, 592, 0, 597, 0, 0,
	0, 0, 600, 0, 838, 36, 78, 79, 80, 871,
	0, 433, 429, 0, 391, 326, 326, 0, 0, 0,
	0, 0, 0, 379, 380, 382, 385, 409, 410, 411,
	211, 188, 420, 190, 0, 917, 0, 0, 0, 231,
	0, 0, 0, 0, 217, 183, 221, 0, 246, 0,
	248, 0, 0, 0, 327, 293, 294, 349, 295, 334,
	335, 296, 297, 347, 348, 346, 0, 346, 0, 331,
	0, 0, 0, 0, 0, 389, 390, 326, 0, 0,
	-2, 0, -2, 0, 0, 0, 0, 142, 143, 139,
	124, 122, 583, 584, 0, 0, 106, 0, 462, 463,
	423, 443, 0, 444, 446, 447, 448, 0, 422, 442,
	514, 515, 623, 0, 713, 646, 695, 337, 338, 921,
	0, 717, 720, 718, 719, 721, 917, 917, 724, 917,
	917, 917, 0, 0, 801, 0, 31, 0, 860, -2,
	0, 0, 0, 43, 34, 0, 0, 573, 575, 576,
	577, 578, 579, 580, 0, 0, 0, 619, 587, 35,
	427, 434, 435, 436, 353, 0, 835, 395, 396, 394,
	420, 403, 404, 0, 0, 420, 421, 422, 409, 917,
	386, 0, 0, 0, 0, 917, 208, 0, 213, 0,
	254, 0, 216, 182, 225, 247, 249, 251, 0, 299,
	349, 325, 349, 0, 0, 0, 0, 0, 625, 0,
	0, 0, 162, 163, 0, 145, 146, 147, 148, 149,
	0, 802, 0, 0, 139, 105, 108, 0, 0, 0,
	0, 423, 821, 563, 558, 0, 0, 0, 0, 0,
	0, 0, 747, 728, 798, 0, 858, 0, -2, 0,
	853, 852, 593, 572, 0, 620, 621, 622, 571, 375,
	354, 0, 356, 0, 371, 0, 0, 0, 0, 0,
	0, 0, 0, 392, 393, 398, 0, 405, 406, 399,
	0, 0, 423, 0, 0, 917, 252, 201, 204, 205,
	0, 232, 0, 0, 314, 315, 329, 332, 625, 0,
	0, 623, 0, 0, 623, 0, 150, 424, 0, 0,
	917, 585, 101, 125, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 830, 0, 530, 0, 0, 0, 60,
	917, 917, 873, 802, 0, 0, -2, 108, 108, -2,
	108, 108, 0, 0, 0, 0, 0, 823, 0, 559,
	0, 560, 917, 723, 722, 725, 726, 0, 0, 0,
	0, 848, 26, 0, 574, 582, 352, 0, 357, 0,
	0, 0, 360, 0, 372, 362, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 252, 0, 197,
	0, 0, 0, 0, 210, 214, 623, 0, 0, 353,
	0, 625, 353, -2, 152, 0, 917, 140, 0, 803,
	126, 838, 48, -2, 50, 0, 923, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 55, 56,
	57, 0, 0, 0, 0, 0, 0, 0, 0, 627,
	0, 0, 107, 109, -2, 110, 111, 112, 113, 114,
	0, 0, 156, 0, 472, 0, 0, 25, 917, 917,
	561, 826, 827, 829, 727, 0, 0, 0, 856, -2,
	854, 376, 0, 358, 363, 361, 364, 373, 374, 365,
	366, 367, 368, 369, 370, 420, 420, 0, 0, 408,
	252, 253, 0, 0, 206, 207, 209, 0, 0, 0,
	0, 0, 0, 243, 0, 353, 623, 353, 375, 0,
	623, 375, 99, 0, 425, 151, 100, 137, 0, 0,
	67, 842, 0, 0, 52, 54, 874, 0, 58, 61,
	62, 63, 64, 65, 0, 0, 0, 0, 140, 438,
	911, 159, 471, 0, 0, 0, 824, 822, 917, 748,
	0, 751, 0, 355, 0, 400, 401, 0, 353, 198,
	202, 203, 0, 234, 0, 236, 237, 238, 239, 240,
	241, 242, 0, 375, 353, 90, 88, 626, 353, 92,
	917, 0, 68, 0, 136, 51, 183, 0, 924, 0,
	0, 0, 0, 0, 914, 912, 0, 445, 473, 0,
	0, 828, 749, 0, 359, 0, 375, 233, 235, 244,
	0, 87, 91, 375, 153, 0, 69, 102, 0, 59,
	66, 0, 0, 71, 0, 440, 0, 913, 0, 439,
	0, 377, 0, 407, 0, 89, 138, -2, 0, 0,
	103, 915, 916, 0, 0, 0, 245, 70, 0, 917,
	750, 0, 0, 0, 0, 402, 72, 474, 475,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 379,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 380, 3, 381, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:421
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:426
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:427
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:431
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:454
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:462
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:468
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 25:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:475
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:481
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:485
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:491
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:495
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:502
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:514
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:526
		{
			yyVAL.str = InsertStr
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:530
		{
			yyVAL.str = ReplaceStr
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:536
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:542
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:546
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:550
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:555
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:556
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:560
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:564
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:569
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:573
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:579
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:583
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:587
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:591
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:597
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:601
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:614
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:618
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:624
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:629
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:633
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:639
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:646
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:653
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:660
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:668
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:678
		{
			yyVAL.str = ""
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:682
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:686
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:690
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:694
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:700
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:707
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:717
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:721
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:725
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:732
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:741
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:749
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:760
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:764
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:770
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:774
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:778
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:784
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:788
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:792
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:796
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:802
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:806
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:812
		{
			yyVAL.str = SessionStr
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:816
		{
			yyVAL.str = GlobalStr
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:822
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 87:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:827
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 88:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:847
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 89:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:867
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:888
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 91:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:904
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 92:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:921
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 93:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:940
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 94:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:951
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:963
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:974
		{
			yyVAL.statement = &DDL{
				Action: CreateVindex,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[3].colIdent,
					Type:   yyDollar[4].colIdent,
					Params: yyDollar[5].vindexParams,
				},
			}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:985
		{
			yyVAL.statement = &DBDDL{Action: Create, DBName: string(yyDollar[4].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:989
		{
			yyVAL.statement = &DBDDL{Action: Create, DBName: string(yyDollar[4].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:993
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 100:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1009
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      []Statement{yyDollar[11].statement},
				},
			}
		}
	case 101:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1023
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 102:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1037
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 103:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1050
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[4].colIdent,
					TableName: yyDollar[8].tableName,
					Time:      yyDollar[5].str,
					Event:     yyDollar[6].strs,
					Body:      yyDollar[12].blockStatement,
				},
			}
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1064
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 105:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1075
		{
			yyVAL.statement = &DDL{Action: Create, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1080
		{
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1081
		{
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1085
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1086
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1087
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1088
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1089
		{
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1090
		{
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1091
		{
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1095
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1099
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1103
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1107
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1113
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1117
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1121
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1126
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1132
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1136
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1142
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1146
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1152
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1164
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1176
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1183
		{
			yyVAL.empty = struct{}{}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1185
		{
			yyVAL.empty = struct{}{}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1188
		{
			yyVAL.bytes = nil
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1192
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1196
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1201
		{
			yyVAL.bytes = nil
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1205
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1209
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1213
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1217
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1221
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1226
		{
			yyVAL.expr = nil
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1230
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1235
		{
			yyVAL.expr = nil
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1239
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1244
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1248
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1253
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1257
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1263
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1268
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1273
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1279
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1284
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1290
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1295
		{
			yyVAL.bytes = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1299
		{
			yyVAL.bytes = nil
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1305
		{
			yyVAL.ddl = &DDL{Action: Create, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1318
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1322
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1327
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1331
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1335
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1339
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1343
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1349
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1354
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1360
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1371
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1376
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1382
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1395
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1400
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1405
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1410
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1416
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1421
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1426
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1431
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1436
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1441
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1446
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1451
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1456
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1465
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1475
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1480
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1485
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1492
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1499
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1507
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1512
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1517
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 207:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1522
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1528
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 209:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1534
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 210:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1540
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1546
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1553
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1557
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 214:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1561
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1565
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1569
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1575
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1579
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1583
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1587
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1591
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1595
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1599
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1603
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1607
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1611
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1617
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1623
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1629
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1635
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1639
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1644
		{
			yyVAL.sequence = &Sequence{}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1648
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1653
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1658
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1663
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1668
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1673
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1678
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1683
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1688
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1693
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1698
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1703
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1708
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1715
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1719
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1723
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1727
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1731
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1735
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1740
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1744
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1749
		{
			yyVAL.bytes = nil
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1763
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1768
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1922
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1926
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1930
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1962
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 315:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2001
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2005
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2009
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2013
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2017
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2029
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2035
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2040
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2045
		{
			yyVAL.optVal = nil
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2049
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2054
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 329:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2058
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2066
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2070
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2076
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2084
		{
			yyVAL.optVal = nil
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2088
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2092
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2101
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2105
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2109
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2114
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2118
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2123
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2127
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2132
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2136
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2140
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2145
		{
			yyVAL.str = ""
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2149
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2153
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2158
		{
			yyVAL.str = ""
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2162
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2166
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2172
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2177
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2181
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2185
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2191
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2195
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2201
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2205
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2211
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2215
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2220
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2224
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2228
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2232
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2236
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2240
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2244
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2248
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2252
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2258
		{
			yyVAL.str = ""
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2262
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2268
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2272
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2278
		{
			yyVAL.indexPartition = nil
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2282
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2286
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2292
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2296
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2300
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2304
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2308
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2312
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2316
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2320
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2324
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2330
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2334
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2340
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2345
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2351
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2355
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2361
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2366
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2370
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2380
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2385
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2392
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 400:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2399
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 401:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2406
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 402:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2415
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2427
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2431
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2435
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2439
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 407:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2445
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 408:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2456
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2466
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2470
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2474
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2480
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2484
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2488
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2492
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2496
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2500
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2506
		{
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2507
		{
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2511
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2515
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2520
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2527
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2531
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2538
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2542
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2548
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2552
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2557
		{
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2558
		{
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2562
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2566
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2572
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2576
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2580
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2586
		{
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 438:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2590
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 439:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2604
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 440:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2618
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 441:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2637
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 442:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2646
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2655
		{
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 444:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2659
		{
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 445:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:2663
		{
			yyVAL.statement = &DDL{
				Action: AddColVindex,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2676
		{
			yyVAL.statement = &DDL{
				Action: DropColVindex,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 447:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2686
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameTable, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 448:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2691
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2696
		{
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[3].tableName.toViewName(), NewName: yyDollar[3].tableName.toViewName()}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2700
		{
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 471:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2732
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2738
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2742
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 474:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2748
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 475:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2752
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2758
		{
			yyVAL.statement = &DDL{Action: RenameTable, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2764
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: Drop, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2772
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 479:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2777
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: Drop, Table: yyDollar[4].tableName.toViewName(), IfExists: exists}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2785
		{
			yyVAL.statement = &DBDDL{Action: Drop, DBName: string(yyDollar[4].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2789
		{
			yyVAL.statement = &DBDDL{Action: Drop, DBName: string(yyDollar[4].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2795
		{
			yyVAL.statement = &DDL{Action: TruncateTable, Table: yyDollar[3].tableName}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2799
		{
			yyVAL.statement = &DDL{Action: TruncateTable, Table: yyDollar[2].tableName}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2804
		{
			yyVAL.statement = &DDL{Action: Alter, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2810
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2814
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2818
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2823
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2827
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2831
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2835
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2839
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2843
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2847
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2851
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2855
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2859
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2863
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 499:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2867
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2877
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2881
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2885
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2889
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2895
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2899
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2905
		{
			yyVAL.str = ""
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2909
		{
			yyVAL.str = "extended "
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2915
		{
			yyVAL.str = ""
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2919
		{
			yyVAL.str = "full "
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2925
		{
			yyVAL.str = ""
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2929
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2933
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2939
		{
			yyVAL.showFilter = nil
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2943
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2947
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2953
		{
			yyVAL.str = ""
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2957
		{
			yyVAL.str = SessionStr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2961
		{
			yyVAL.str = GlobalStr
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2967
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2971
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2977
		{
			yyVAL.statement = &Begin{}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2981
		{
			yyVAL.statement = &Begin{}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2987
		{
			yyVAL.statement = &Commit{}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2993
		{
			yyVAL.statement = &Rollback{}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2999
		{
			yyVAL.statement = &OtherRead{}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3003
		{
			yyVAL.statement = &OtherRead{}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3007
		{
			yyVAL.statement = &OtherRead{}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3011
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3015
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3020
		{
			setAllowComments(yylex, true)
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3024
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3030
		{
			yyVAL.bytes2 = nil
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3034
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3040
		{
			yyVAL.str = UnionStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3044
		{
			yyVAL.str = UnionAllStr
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3048
		{
			yyVAL.str = UnionDistinctStr
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3053
		{
			yyVAL.str = ""
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3057
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3061
		{
			yyVAL.str = SQLCacheStr
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3066
		{
			yyVAL.str = ""
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3070
		{
			yyVAL.str = DistinctStr
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3075
		{
			yyVAL.str = ""
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3079
		{
			yyVAL.str = StraightJoinHint
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3084
		{
			yyVAL.selectExprs = nil
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3088
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3094
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3098
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3104
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3108
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3112
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3116
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3121
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3125
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3129
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3136
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3141
		{
			yyVAL.overExpr = nil
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3145
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3149
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy}
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3153
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 561:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3157
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy, OrderBy: yyDollar[4].orderBy}
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3162
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3166
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3172
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3176
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3186
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3190
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3194
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3199
		{
			yyVAL.strs = []string{}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3203
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3209
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3213
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3219
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3223
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3227
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3231
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3235
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3239
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3245
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 582:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3249
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3255
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3260
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3264
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3270
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3274
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3287
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3291
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3295
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3299
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3305
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3307
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3311
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3313
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3317
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3319
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3322
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3324
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3327
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3331
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3335
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3342
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3348
		{
			yyVAL.str = JoinStr
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3352
		{
			yyVAL.str = JoinStr
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3356
		{
			yyVAL.str = JoinStr
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3362
		{
			yyVAL.str = StraightJoinStr
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3368
		{
			yyVAL.str = LeftJoinStr
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3372
		{
			yyVAL.str = LeftJoinStr
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3376
		{
			yyVAL.str = RightJoinStr
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3380
		{
			yyVAL.str = RightJoinStr
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3386
		{
			yyVAL.str = NaturalJoinStr
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3390
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3400
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3404
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3410
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3414
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3419
		{
			yyVAL.indexHints = nil
		}
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3423
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 621:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3427
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3431
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3436
		{
			yyVAL.expr = nil
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3440
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3445
		{
			yyVAL.columns = nil
		}
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3449
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3455
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3459
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3463
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3467
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3471
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3475
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3479
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3485
		{
			yyVAL.str = ""
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3489
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3495
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3499
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3505
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3509
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3513
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3517
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3521
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3525
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3529
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 645:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3533
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 646:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3537
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3541
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3547
		{
			yyVAL.str = IsNullStr
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3551
		{
			yyVAL.str = IsNotNullStr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3555
		{
			yyVAL.str = IsTrueStr
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3559
		{
			yyVAL.str = IsNotTrueStr
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3563
		{
			yyVAL.str = IsFalseStr
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3567
		{
			yyVAL.str = IsNotFalseStr
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3573
		{
			yyVAL.str = EqualStr
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3577
		{
			yyVAL.str = LessThanStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3581
		{
			yyVAL.str = GreaterThanStr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3585
		{
			yyVAL.str = LessEqualStr
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3589
		{
			yyVAL.str = GreaterEqualStr
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3593
		{
			yyVAL.str = NotEqualStr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3597
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3601
		{
			yyVAL.str = PosixRegexStr
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3605
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3609
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3613
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3618
		{
			yyVAL.expr = nil
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3622
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3628
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3632
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3636
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3642
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3648
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3652
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3658
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3662
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3666
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3670
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3674
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3678
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3682
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3686
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3690
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3694
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3698
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3702
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3706
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3710
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3714
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3718
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3722
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3726
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3730
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3734
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3738
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3742
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 695:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3746
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3750
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3754
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3758
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3766
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3780
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3784
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3788
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3796
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3804
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3812
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3822
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 711:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3826
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 712:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3830
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 713:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3834
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3838
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3848
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3852
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 717:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3856
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 718:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3860
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 719:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3864
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 720:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3868
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 721:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3872
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 722:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3876
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 723:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3880
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 724:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3884
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 725:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3888
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 726:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3892
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 727:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3896
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 728:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3900
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 729:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3904
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3908
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3913
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3923
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3927
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3931
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3935
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3940
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3945
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3950
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3955
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3959
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3973
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3977
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3981
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 746:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3985
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3991
		{
			yyVAL.str = ""
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3995
		{
			yyVAL.str = BooleanModeStr
		}
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3999
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 750:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4003
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4007
		{
			yyVAL.str = QueryExpansionStr
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4013
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4017
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4023
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4027
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4031
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4035
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4039
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4043
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4049
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4053
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4057
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4061
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4065
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4069
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4073
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4077
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4081
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4085
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4089
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4093
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4097
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4101
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4105
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4109
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4113
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4117
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4121
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4125
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4129
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4133
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4137
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4141
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4145
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4149
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4153
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4159
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4163
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4167
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4171
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4175
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4179
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4183
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4187
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4192
		{
			yyVAL.expr = nil
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4196
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4201
		{
			yyVAL.str = string("")
		}
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4205
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4211
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4215
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 801:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4221
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4226
		{
			yyVAL.empty = struct{}{}
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4228
		{
			yyVAL.empty = struct{}{}
		}
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4231
		{
			yyVAL.expr = nil
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4235
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4241
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4245
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 808:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4249
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4255
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4261
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4265
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4269
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4274
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4279
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4283
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4287
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4291
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4295
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4299
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4303
		{
			yyVAL.expr = &NullVal{}
		}
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4308
		{
			yyVAL.exprs = nil
		}
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4312
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4317
		{
			yyVAL.expr = nil
		}
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4321
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4326
		{
			yyVAL.partitionBy = nil
		}
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4330
		{
			yyVAL.partitionBy = yyDollar[3].partitionBy
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4336
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4340
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4346
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4351
		{
			yyVAL.orderBy = nil
		}
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4355
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4361
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4365
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4371
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 835:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4376
		{
			yyVAL.str = AscScr
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4380
		{
			yyVAL.str = AscScr
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4384
		{
			yyVAL.str = DescScr
		}
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4389
		{
			yyVAL.limit = nil
		}
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4393
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 840:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4397
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 841:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4401
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4406
		{
			yyVAL.str = ""
		}
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4410
		{
			yyVAL.str = ForUpdateStr
		}
	case 844:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4414
		{
			yyVAL.str = ShareModeStr
		}
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4427
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4431
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4435
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 848:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4440
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 849:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4444
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 850:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4448
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4455
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4459
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4463
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 854:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4467
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4472
		{
			yyVAL.updateExprs = nil
		}
	case 856:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4476
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4482
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4486
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4492
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4496
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4502
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4508
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4518
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4522
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4528
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4534
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4538
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4544
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 869:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4548
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4552
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 871:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4557
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 872:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4561
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4567
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 874:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4573
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4580
		{
			yyVAL.bytes = []byte("charset")
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4587
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4591
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4595
		{
			yyVAL.expr = &Default{}
		}
	case 881:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4600
		{
			yyVAL.byt = 0
		}
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4602
		{
			yyVAL.byt = 1
		}
	case 883:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4605
		{
			yyVAL.empty = struct{}{}
		}
	case 884:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4607
		{
			yyVAL.empty = struct{}{}
		}
	case 885:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4610
		{
			yyVAL.str = ""
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4612
		{
			yyVAL.str = IgnoreStr
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4616
		{
			yyVAL.empty = struct{}{}
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4618
		{
			yyVAL.empty = struct{}{}
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4620
		{
			yyVAL.empty = struct{}{}
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4622
		{
			yyVAL.empty = struct{}{}
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4624
		{
			yyVAL.empty = struct{}{}
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4626
		{
			yyVAL.empty = struct{}{}
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4628
		{
			yyVAL.empty = struct{}{}
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4630
		{
			yyVAL.empty = struct{}{}
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4632
		{
			yyVAL.empty = struct{}{}
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4634
		{
			yyVAL.empty = struct{}{}
		}
	case 897:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4637
		{
			yyVAL.empty = struct{}{}
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4639
		{
			yyVAL.empty = struct{}{}
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4641
		{
			yyVAL.empty = struct{}{}
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4645
		{
			yyVAL.empty = struct{}{}
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4647
		{
			yyVAL.empty = struct{}{}
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4651
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4655
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4662
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4668
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4672
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4677
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4684
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 911:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4690
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4694
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4698
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 914:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4704
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4708
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4712
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 917:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4718
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4722
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 919:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4729
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4736
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4740
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4747
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4753
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4757
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5070
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5079
		{
			decNesting(yylex)
		}
	case 1212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5084
		{
			forceEOF(yylex)
		}
	case 1213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5089
		{
			forceEOF(yylex)
		}
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5093
		{
			forceEOF(yylex)
		}
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5097
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
