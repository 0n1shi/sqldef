// Code generated by goyacc -o sqlparser/parser.go sqlparser/parser.y. DO NOT EDIT.

//line sqlparser/parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sqlparser/parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sqlparser/parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OFF = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const PRIMARY = 57450
const COLUMN = 57451
const CONSTRAINT = 57452
const REFERENCES = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const KEY_BLOCK_SIZE = 57457
const POLICY = 57458
const UNIQUE = 57459
const KEY = 57460
const SHOW = 57461
const DESCRIBE = 57462
const EXPLAIN = 57463
const DATE = 57464
const ESCAPE = 57465
const REPAIR = 57466
const OPTIMIZE = 57467
const TRUNCATE = 57468
const MAXVALUE = 57469
const PARTITION = 57470
const REORGANIZE = 57471
const LESS = 57472
const THAN = 57473
const PROCEDURE = 57474
const TRIGGER = 57475
const VINDEX = 57476
const VINDEXES = 57477
const STATUS = 57478
const VARIABLES = 57479
const RESTRICT = 57480
const CASCADE = 57481
const NO = 57482
const ACTION = 57483
const PERMISSIVE = 57484
const RESTRICTIVE = 57485
const PUBLIC = 57486
const CURRENT_USER = 57487
const SESSION_USER = 57488
const PAD_INDEX = 57489
const FILLFACTOR = 57490
const IGNORE_DUP_KEY = 57491
const STATISTICS_NORECOMPUTE = 57492
const STATISTICS_INCREMENTAL = 57493
const ALLOW_ROW_LOCKS = 57494
const ALLOW_PAGE_LOCKS = 57495
const BEGIN = 57496
const START = 57497
const TRANSACTION = 57498
const COMMIT = 57499
const ROLLBACK = 57500
const BIT = 57501
const TINYINT = 57502
const SMALLINT = 57503
const SMALLSERIAL = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const SERIAL = 57508
const BIGINT = 57509
const BIGSERIAL = 57510
const INTNUM = 57511
const REAL = 57512
const DOUBLE = 57513
const PRECISION = 57514
const FLOAT_TYPE = 57515
const DECIMAL = 57516
const NUMERIC = 57517
const SMALLMONEY = 57518
const MONEY = 57519
const TIME = 57520
const TIMESTAMP = 57521
const DATETIME = 57522
const YEAR = 57523
const DATETIMEOFFSET = 57524
const DATETIME2 = 57525
const SMALLDATETIME = 57526
const CHAR = 57527
const VARCHAR = 57528
const VARYING = 57529
const BOOL = 57530
const CHARACTER = 57531
const VARBINARY = 57532
const NCHAR = 57533
const NVARCHAR = 57534
const NTEXT = 57535
const UUID = 57536
const TEXT = 57537
const TINYTEXT = 57538
const MEDIUMTEXT = 57539
const LONGTEXT = 57540
const CITEXT = 57541
const BLOB = 57542
const TINYBLOB = 57543
const MEDIUMBLOB = 57544
const LONGBLOB = 57545
const JSON = 57546
const JSONB = 57547
const ENUM = 57548
const GEOMETRY = 57549
const POINT = 57550
const LINESTRING = 57551
const POLYGON = 57552
const GEOMETRYCOLLECTION = 57553
const MULTIPOINT = 57554
const MULTILINESTRING = 57555
const MULTIPOLYGON = 57556
const ARRAY = 57557
const NOW = 57558
const BPCHAR = 57559
const NULLX = 57560
const AUTO_INCREMENT = 57561
const APPROXNUM = 57562
const SIGNED = 57563
const UNSIGNED = 57564
const ZEROFILL = 57565
const ZONE = 57566
const AUTOINCREMENT = 57567
const DATABASES = 57568
const TABLES = 57569
const VITESS_KEYSPACES = 57570
const VITESS_SHARDS = 57571
const VITESS_TABLETS = 57572
const VSCHEMA_TABLES = 57573
const EXTENDED = 57574
const FULL = 57575
const PROCESSLIST = 57576
const NAMES = 57577
const CHARSET = 57578
const GLOBAL = 57579
const SESSION = 57580
const ISOLATION = 57581
const LEVEL = 57582
const READ = 57583
const WRITE = 57584
const ONLY = 57585
const REPEATABLE = 57586
const COMMITTED = 57587
const UNCOMMITTED = 57588
const SERIALIZABLE = 57589
const CURRENT_TIMESTAMP = 57590
const DATABASE = 57591
const CURRENT_DATE = 57592
const CURRENT_TIME = 57593
const LOCALTIME = 57594
const LOCALTIMESTAMP = 57595
const UTC_DATE = 57596
const UTC_TIME = 57597
const UTC_TIMESTAMP = 57598
const REPLACE = 57599
const CONVERT = 57600
const CAST = 57601
const SUBSTR = 57602
const SUBSTRING = 57603
const GROUP_CONCAT = 57604
const SEPARATOR = 57605
const INHERIT = 57606
const MATCH = 57607
const AGAINST = 57608
const BOOLEAN = 57609
const LANGUAGE = 57610
const WITH = 57611
const WITHOUT = 57612
const PARSER = 57613
const QUERY = 57614
const EXPANSION = 57615
const UNUSED = 57616
const GENERATED = 57617
const ALWAYS = 57618
const IDENTITY = 57619
const SEQUENCE = 57620
const INCREMENT = 57621
const MINVALUE = 57622
const CACHE = 57623
const CYCLE = 57624
const OWNED = 57625
const NONE = 57626
const CLUSTERED = 57627
const NONCLUSTERED = 57628
const INCLUDE = 57629
const TYPECAST = 57630
const CHECK = 57631

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"INCLUDE",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	121, 92,
	-2, 82,
	-1, 36,
	153, 395,
	154, 395,
	-2, 385,
	-1, 269,
	109, 728,
	-2, 724,
	-1, 270,
	109, 729,
	-2, 725,
	-1, 340,
	80, 916,
	-2, 58,
	-1, 341,
	80, 868,
	-2, 59,
	-1, 346,
	80, 848,
	-2, 695,
	-1, 348,
	80, 891,
	-2, 697,
	-1, 644,
	51, 41,
	53, 41,
	-2, 43,
	-1, 785,
	109, 731,
	-2, 727,
	-1, 1022,
	5, 28,
	-2, 530,
	-1, 1047,
	5, 27,
	-2, 669,
	-1, 1142,
	5, 27,
	-2, 64,
	-1, 1350,
	5, 28,
	-2, 670,
	-1, 1427,
	5, 27,
	-2, 672,
	-1, 1538,
	5, 28,
	-2, 673,
}

const yyPrivate = 57344

const yyLast = 14066

var yyAct = [...]int{
	270, 1528, 1475, 1440, 1540, 1050, 1437, 721, 571, 962,
	1133, 1254, 849, 1227, 1356, 1082, 761, 274, 867, 299,
	1255, 1144, 1228, 1369, 638, 457, 248, 1224, 1107, 957,
	276, 1544, 636, 570, 3, 88, 911, 890, 88, 53,
	850, 891, 1200, 1066, 897, 810, 821, 818, 345, 1014,
	66, 1130, 1055, 273, 654, 837, 787, 906, 503, 509,
	455, 952, 88, 88, 350, 820, 653, 490, 846, 350,
	300, 47, 350, 625, 640, 326, 515, 88, 339, 88,
	594, 247, 599, 523, 996, 88, 257, 327, 272, 242,
	600, 336, 330, 334, 325, 585, 540, 541, 542, 543,
	544, 537, 1114, 52, 547, 1602, 261, 535, 545, 546,
	538, 539, 540, 541, 542, 543, 544, 537, 47, 927,
	547, 924, 1276, 547, 537, 1567, 253, 547, 458, 459,
	1595, 342, 331, 243, 244, 245, 246, 1381, 1101, 1489,
	536, 535, 545, 546, 538, 539, 540, 541, 542, 543,
	544, 537, 1634, 1582, 547, 1629, 1536, 531, 886, 534,
	1266, 1498, 1499, 1134, 1135, 549, 550, 551, 552, 553,
	554, 555, 502, 532, 533, 530, 536, 535, 545, 546,
	538, 539, 540, 541, 542, 543, 544, 537, 1588, 1622,
	547, 1610, 963, 1571, 1581, 926, 1219, 1516, 1535, 1344,
	1340, 502, 501, 1557, 488, 467, 1250, 1251, 1249, 536,
	535, 545, 546, 538, 539, 540, 541, 542, 543, 544,
	537, 88, 655, 547, 656, 350, 350, 350, 350, 1111,
	350, 1113, 1112, 881, 882, 880, 1395, 350, 536, 535,
	545, 546, 538, 539, 540, 541, 542, 543, 544, 537,
	498, 1394, 547, 545, 546, 538, 539, 540, 541, 542,
	543, 544, 537, 1116, 350, 547, 1103, 1104, 1105, 929,
	1337, 502, 941, 752, 1108, 1106, 296, 297, 1466, 841,
	753, 931, 74, 1594, 298, 1596, 1074, 512, 1416, 1073,
	1295, 511, 1075, 1561, 1294, 489, 489, 489, 489, 953,
	489, 1333, 558, 1331, 548, 241, 1563, 489, 536, 535,
	545, 546, 538, 539, 540, 541, 542, 543, 544, 537,
	548, 1558, 547, 548, 47, 88, 1455, 548, 458, 459,
	70, 72, 88, 88, 88, 1490, 1305, 1306, 350, 557,
	1462, 1628, 559, 1620, 350, 71, 73, 1529, 344, 83,
	79, 80, 81, 461, 548, 1178, 465, 494, 495, 847,
	483, 1530, 330, 68, 1372, 1308, 1609, 1260, 1317, 569,
	1424, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	1309, 584, 586, 586, 586, 586, 586, 586, 586, 586,
	548, 614, 615, 616, 617, 1376, 1375, 1499, 1095, 1268,
	1094, 1084, 637, 907, 1175, 342, 1480, 1261, 587, 588,
	589, 590, 591, 592, 593, 1100, 1587, 472, 908, 868,
	870, 463, 77, 548, 485, 1403, 487, 645, 1384, 651,
	491, 492, 493, 934, 496, 1534, 954, 731, 1383, 941,
	1089, 500, 1110, 460, 1386, 1559, 1560, 1562, 1564, 1565,
	1065, 1064, 548, 1087, 484, 486, 468, 76, 1063, 77,
	719, 88, 220, 78, 1179, 548, 1385, 88, 1625, 88,
	350, 1494, 88, 1353, 1111, 88, 1113, 1112, 69, 88,
	991, 350, 350, 350, 350, 350, 350, 350, 350, 1187,
	1370, 1371, 1373, 1030, 869, 350, 350, 82, 560, 561,
	88, 1008, 1176, 57, 1174, 907, 759, 332, 456, 344,
	344, 344, 344, 527, 344, 350, 478, 1177, 907, 88,
	908, 344, 548, 888, 887, 350, 1289, 740, 59, 60,
	61, 62, 63, 908, 756, 522, 1510, 1509, 764, 672,
	489, 1508, 85, 521, 520, 1027, 520, 668, 525, 471,
	788, 489, 489, 489, 489, 489, 489, 489, 489, 992,
	522, 789, 522, 738, 1507, 489, 489, 1183, 1506, 350,
	335, 482, 1505, 907, 1504, 794, 785, 1290, 902, 1026,
	901, 1025, 903, 904, 469, 1502, 470, 905, 908, 792,
	793, 791, 477, 521, 520, 784, 830, 833, 521, 520,
	766, 502, 839, 838, 1302, 1053, 657, 825, 781, 1221,
	522, 940, 783, 762, 763, 522, 724, 521, 520, 838,
	88, 1037, 344, 88, 88, 88, 88, 88, 659, 813,
	47, 474, 475, 476, 522, 88, 1454, 1091, 88, 851,
	826, 827, 88, 1182, 573, 517, 834, 88, 88, 815,
	816, 350, 1612, 330, 330, 330, 330, 330, 835, 521,
	520, 75, 1545, 843, 350, 1005, 1006, 1007, 330, 1611,
	1503, 825, 1593, 267, 730, 1592, 522, 330, 462, 875,
	842, 1546, 844, 845, 1591, 741, 742, 743, 744, 745,
	746, 747, 748, 331, 331, 331, 331, 331, 852, 749,
	750, 855, 1389, 777, 779, 780, 1117, 864, 637, 778,
	871, 853, 854, 873, 856, 765, 872, 331, 342, 878,
	350, 1589, 324, 50, 350, 895, 350, 88, 479, 877,
	88, 892, 88, 790, 1547, 88, 350, 538, 539, 540,
	541, 542, 543, 544, 537, 1543, 959, 547, 758, 464,
	1465, 466, 1388, 1397, 344, 1201, 1117, 1396, 513, 1274,
	1139, 1137, 811, 1590, 812, 344, 344, 344, 344, 344,
	344, 344, 344, 822, 824, 955, 956, 1117, 1423, 344,
	344, 1392, 1319, 757, 1131, 521, 520, 21, 1203, 840,
	1097, 1500, 1223, 1264, 489, 1263, 489, 1523, 1639, 768,
	521, 520, 522, 1584, 1636, 502, 489, 1262, 785, 525,
	1090, 788, 344, 1431, 1626, 1366, 1621, 522, 1366, 1601,
	997, 1076, 789, 998, 1165, 1366, 1600, 784, 1366, 1586,
	1523, 1585, 620, 1584, 1583, 1577, 502, 1004, 965, 866,
	1205, 644, 814, 252, 1210, 737, 1204, 736, 1010, 1366,
	1574, 1202, 725, 817, 723, 1009, 480, 1208, 1431, 1526,
	1366, 1519, 1518, 831, 831, 1431, 1463, 1431, 502, 831,
	1206, 1207, 350, 1431, 1432, 88, 1366, 1365, 1471, 1068,
	1047, 1070, 1246, 502, 1470, 1019, 473, 1209, 1211, 1166,
	456, 350, 1036, 1282, 1168, 1161, 1162, 1051, 1169, 1164,
	1163, 1034, 350, 1171, 1167, 330, 831, 1069, 1060, 1352,
	502, 1298, 1297, 350, 1170, 1292, 1293, 1048, 1049, 1524,
	1160, 1523, 88, 1292, 1291, 1020, 502, 648, 966, 823,
	968, 1190, 1078, 54, 1071, 344, 622, 502, 823, 502,
	989, 664, 663, 1225, 1032, 331, 1051, 548, 344, 1348,
	622, 562, 563, 564, 565, 566, 567, 568, 892, 23,
	1136, 1085, 1086, 1088, 350, 23, 1382, 649, 720, 647,
	1441, 1020, 1052, 1020, 727, 1301, 728, 930, 1109, 732,
	1296, 1029, 735, 1443, 1052, 1426, 1031, 23, 1045, 350,
	1096, 1046, 88, 88, 874, 1142, 647, 1399, 1398, 1132,
	88, 1077, 879, 621, 960, 50, 50, 754, 344, 350,
	344, 50, 772, 622, 1020, 650, 1138, 1017, 760, 1630,
	344, 1018, 1149, 1028, 722, 1051, 773, 622, 1022, 1023,
	1024, 1145, 47, 50, 1624, 1155, 1599, 1033, 1579, 1521,
	1520, 1514, 1039, 1513, 344, 1040, 1041, 1042, 1043, 350,
	350, 1442, 1441, 1062, 254, 1477, 1464, 1193, 1226, 489,
	1148, 1194, 1410, 851, 931, 1443, 1229, 1199, 958, 851,
	1213, 1281, 1212, 1279, 1220, 1248, 1192, 1271, 350, 785,
	350, 350, 1231, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
	1235, 1240, 1236, 1234, 1140, 1141, 263, 953, 1216, 1124,
	50, 1126, 1127, 1128, 1129, 1156, 1152, 1102, 1247, 1157,
	1154, 1153, 1080, 947, 73, 1252, 1265, 1230, 946, 47,
	65, 1253, 1269, 1056, 1057, 1158, 1456, 848, 1453, 1267,
	1400, 1151, 1225, 1442, 1242, 1243, 1244, 1081, 1059, 734,
	726, 88, 350, 499, 861, 892, 859, 892, 1061, 862,
	858, 860, 350, 857, 993, 876, 1067, 863, 1607, 631,
	632, 350, 258, 259, 1580, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1186, 88, 516, 344, 1605, 1003, 1002, 350,
	1125, 1277, 1273, 504, 662, 481, 1083, 514, 350, 1346,
	967, 88, 1411, 1180, 505, 1321, 733, 1092, 762, 763,
	1272, 1147, 961, 786, 635, 1497, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 330, 1198, 1322, 1318, 627, 630, 631, 632, 628,
	516, 629, 633, 1304, 969, 1329, 249, 986, 1597, 987,
	1310, 350, 988, 350, 350, 350, 88, 350, 344, 1312,
	507, 255, 256, 350, 1347, 1192, 1001, 1359, 1360, 1361,
	1483, 331, 1355, 1315, 1000, 250, 54, 1482, 1414, 1245,
	1362, 1052, 350, 344, 1364, 1259, 1258, 1283, 1284, 518,
	1286, 1287, 1288, 1374, 1512, 86, 1380, 1439, 240, 1511,
	1342, 1491, 1377, 344, 1078, 942, 943, 944, 945, 1093,
	755, 56, 350, 350, 58, 1150, 1307, 646, 350, 51,
	264, 1, 86, 86, 1517, 344, 1099, 1461, 350, 67,
	892, 1570, 1522, 1401, 1275, 1303, 1146, 86, 1159, 86,
	831, 964, 1143, 1233, 1067, 86, 831, 974, 1405, 1378,
	1406, 1407, 1408, 1527, 1402, 1438, 506, 510, 899, 889,
	454, 64, 1404, 350, 350, 1501, 900, 898, 896, 665,
	925, 1115, 344, 528, 344, 1256, 928, 350, 1229, 1145,
	892, 1425, 671, 669, 670, 1341, 350, 667, 673, 666,
	228, 1436, 337, 634, 1452, 1427, 658, 1451, 519, 1173,
	1172, 1457, 970, 1181, 751, 1467, 1323, 572, 990, 350,
	350, 88, 1459, 1325, 350, 497, 583, 230, 556, 999,
	1472, 350, 1072, 343, 1566, 1334, 1335, 1336, 1232, 1230,
	1339, 508, 1428, 1481, 1413, 1478, 1300, 1035, 582, 836,
	275, 776, 350, 1349, 1350, 1351, 1311, 1354, 287, 284,
	1492, 286, 1496, 285, 1390, 1313, 1229, 536, 535, 545,
	546, 538, 539, 540, 541, 542, 543, 544, 537, 767,
	1044, 547, 1493, 1316, 529, 265, 1011, 1012, 1013, 329,
	618, 86, 344, 1379, 626, 624, 623, 1058, 350, 1054,
	1387, 328, 1479, 1189, 1343, 1488, 771, 25, 55, 1525,
	260, 19, 1532, 18, 17, 350, 20, 1230, 16, 47,
	350, 15, 1541, 14, 1537, 29, 13, 1188, 12, 851,
	11, 10, 9, 8, 350, 350, 1555, 7, 6, 5,
	4, 350, 350, 251, 350, 1357, 1556, 1357, 1357, 1357,
	350, 1363, 1568, 1569, 1575, 1553, 1554, 344, 1548, 1549,
	1550, 1551, 1552, 22, 1118, 1119, 1422, 1121, 1122, 1123,
	1468, 2, 1469, 0, 0, 0, 1357, 0, 0, 0,
	0, 0, 1433, 1434, 1435, 0, 0, 627, 630, 631,
	632, 628, 1598, 629, 633, 86, 0, 1056, 1057, 1604,
	350, 0, 86, 642, 86, 1603, 344, 344, 1608, 0,
	0, 1606, 1409, 0, 0, 0, 0, 0, 88, 0,
	350, 0, 1412, 0, 0, 1615, 1617, 0, 1618, 0,
	88, 0, 0, 0, 1616, 0, 0, 774, 775, 0,
	1484, 1485, 1486, 1487, 1627, 0, 350, 0, 1541, 1631,
	0, 350, 0, 1635, 0, 0, 0, 1429, 1430, 0,
	289, 288, 291, 292, 293, 294, 0, 0, 1299, 290,
	295, 1256, 932, 933, 935, 936, 937, 0, 938, 939,
	1458, 548, 0, 1515, 0, 0, 0, 0, 0, 0,
	572, 0, 0, 828, 829, 948, 949, 950, 0, 951,
	1314, 0, 0, 1256, 1473, 0, 0, 0, 1476, 1196,
	1197, 1533, 0, 1632, 0, 1357, 1538, 0, 0, 1633,
	0, 0, 1214, 1215, 0, 1217, 1218, 0, 0, 0,
	0, 86, 0, 0, 1338, 0, 1495, 86, 0, 86,
	0, 0, 86, 0, 0, 86, 0, 0, 0, 739,
	1576, 0, 1285, 0, 0, 0, 0, 0, 0, 924,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 885, 0, 0, 0, 0, 0,
	0, 913, 1256, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 920, 831, 909, 739, 1539,
	0, 0, 0, 910, 1542, 0, 536, 535, 545, 546,
	538, 539, 540, 541, 542, 543, 544, 537, 1476, 1256,
	547, 0, 0, 0, 0, 1256, 1256, 0, 1572, 0,
	0, 0, 0, 0, 1578, 0, 0, 0, 0, 0,
	264, 0, 0, 0, 0, 264, 264, 0, 0, 832,
	832, 264, 0, 0, 0, 832, 916, 0, 912, 921,
	1640, 1641, 0, 0, 0, 918, 917, 0, 0, 0,
	0, 0, 0, 0, 994, 995, 0, 510, 0, 0,
	0, 0, 0, 0, 1256, 264, 264, 264, 264, 1324,
	86, 0, 832, 86, 86, 86, 86, 86, 0, 0,
	0, 0, 0, 0, 1357, 865, 0, 0, 86, 0,
	0, 0, 642, 0, 0, 0, 0, 86, 86, 0,
	0, 0, 1195, 1391, 0, 1393, 0, 0, 1474, 0,
	344, 0, 1120, 0, 0, 1476, 0, 0, 0, 0,
	1021, 0, 536, 535, 545, 546, 538, 539, 540, 541,
	542, 543, 544, 537, 0, 1038, 547, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 914, 0, 0,
	0, 0, 0, 915, 0, 536, 535, 545, 546, 538,
	539, 540, 541, 542, 543, 544, 537, 1016, 0, 547,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	86, 0, 86, 0, 0, 86, 0, 536, 535, 545,
	546, 538, 539, 540, 541, 542, 543, 544, 537, 0,
	548, 547, 0, 922, 1015, 923, 0, 980, 0, 0,
	739, 1417, 1418, 0, 1419, 1420, 1421, 919, 0, 0,
	979, 595, 264, 536, 535, 545, 546, 538, 539, 540,
	541, 542, 543, 544, 537, 0, 0, 547, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 984, 0, 0,
	0, 0, 0, 0, 597, 0, 978, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 0, 1278,
	1280, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 0, 0, 0, 0, 975, 972, 973, 0, 971,
	0, 0, 598, 0, 0, 0, 0, 1623, 0, 0,
	612, 596, 0, 0, 0, 86, 0, 601, 0, 0,
	0, 0, 0, 0, 1222, 0, 548, 982, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1237,
	1238, 0, 0, 1239, 0, 0, 1241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 1326,
	1327, 695, 1328, 0, 0, 0, 1330, 0, 1332, 0,
	0, 0, 0, 1270, 0, 0, 0, 0, 977, 613,
	0, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 976, 0,
	0, 0, 0, 0, 1367, 1368, 0, 548, 0, 0,
	0, 0, 1184, 1185, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 680, 0,
	264, 0, 0, 0, 0, 0, 0, 981, 0, 0,
	0, 264, 0, 0, 0, 0, 0, 0, 0, 0,
	1320, 739, 0, 983, 0, 0, 0, 0, 0, 0,
	0, 696, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 1637, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 0, 0, 0, 0, 0, 0, 572, 602, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 0, 712,
	713, 0, 714, 715, 716, 718, 717, 697, 698, 699,
	703, 701, 700, 702, 674, 676, 0, 612, 675, 681,
	677, 678, 679, 693, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 694, 704, 705, 706, 707,
	708, 709, 710, 711, 23, 24, 48, 26, 27, 226,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 42, 0, 0, 0, 28, 0, 0,
	0, 0, 0, 236, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 37, 0, 0, 0,
	50, 0, 0, 0, 0, 0, 613, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 0, 0, 0,
	223, 0, 0, 0, 0, 1460, 0, 229, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	30, 31, 33, 32, 35, 0, 642, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	231, 0, 0, 0, 36, 43, 44, 0, 0, 45,
	46, 34, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 38,
	39, 0, 40, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1531,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 232, 233, 234, 235, 239, 0, 0,
	0, 0, 238, 237, 0, 0, 0, 0, 0, 0,
	0, 1573, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1619,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 0, 0, 442,
	432, 0, 402, 444, 376, 391, 452, 393, 394, 424,
	360, 410, 152, 388, 91, 379, 354, 385, 355, 377,
	404, 115, 375, 434, 413, 128, 450, 131, 418, 0,
	173, 140, 0, 0, 406, 436, 408, 430, 401, 425,
	367, 417, 445, 389, 421, 446, 0, 0, 0, 349,
	0, 893, 894, 0, 0, 0, 0, 0, 104, 0,
	420, 441, 387, 453, 423, 353, 419, 0, 358, 361,
	451, 439, 382, 383, 1079, 0, 0, 0, 0, 0,
	0, 405, 409, 427, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 380, 0, 416, 0, 0, 1614, 364,
	359, 0, 403, 0, 0, 0, 366, 0, 381, 428,
	86, 351, 431, 437, 400, 200, 440, 397, 396, 159,
	0, 107, 0, 179, 119, 390, 129, 426, 443, 407,
	435, 378, 386, 109, 384, 166, 153, 191, 415, 154,
	164, 132, 183, 160, 190, 201, 202, 181, 199, 168,
	99, 147, 89, 158, 165, 0, 108, 0, 213, 214,
	215, 216, 217, 218, 219, 92, 180, 189, 105, 169,
	95, 187, 176, 178, 138, 124, 125, 171, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 177, 141, 184,
	185, 110, 210, 112, 111, 175, 100, 197, 198, 97,
	101, 196, 146, 151, 149, 195, 182, 188, 139, 136,
	0, 96, 186, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	356, 0, 174, 193, 211, 212, 357, 374, 438, 203,
	204, 205, 206, 0, 0, 0, 145, 102, 122, 170,
	126, 133, 162, 209, 422, 167, 106, 192, 172, 370,
	373, 368, 369, 411, 412, 447, 448, 449, 429, 365,
	0, 371, 372, 0, 433, 123, 414, 90, 98, 130,
	207, 208, 0, 161, 117, 194, 392, 352, 395, 0,
	0, 0, 0, 0, 0, 0, 362, 363, 399, 0,
	103, 442, 432, 0, 402, 444, 376, 391, 452, 393,
	394, 424, 360, 410, 152, 388, 91, 379, 354, 385,
	355, 377, 404, 115, 375, 434, 413, 128, 450, 131,
	418, 0, 173, 140, 0, 0, 406, 436, 408, 430,
	401, 425, 367, 417, 445, 389, 421, 446, 0, 0,
	0, 349, 0, 893, 894, 0, 0, 0, 0, 0,
	104, 0, 420, 441, 387, 453, 423, 353, 419, 0,
	358, 361, 451, 439, 382, 383, 0, 0, 0, 0,
	0, 0, 0, 405, 409, 427, 398, 0, 0, 0,
	0, 0, 0, 0, 0, 380, 0, 416, 0, 0,
	0, 364, 359, 0, 403, 0, 0, 0, 366, 0,
	381, 428, 0, 351, 431, 437, 400, 200, 440, 397,
	396, 159, 0, 107, 0, 179, 119, 390, 129, 426,
	443, 407, 435, 378, 386, 109, 384, 166, 153, 191,
	415, 154, 164, 132, 183, 160, 190, 201, 202, 181,
	199, 168, 99, 147, 89, 158, 165, 0, 108, 0,
	213, 214, 215, 216, 217, 218, 219, 92, 180, 189,
	105, 169, 95, 187, 176, 178, 138, 124, 125, 171,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 177,
	141, 184, 185, 110, 210, 112, 111, 175, 100, 197,
	198, 97, 101, 196, 146, 151, 149, 195, 182, 188,
	139, 136, 0, 96, 186, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 356, 0, 174, 193, 211, 212, 357, 374,
	438, 203, 204, 205, 206, 0, 0, 0, 145, 102,
	122, 170, 126, 133, 162, 209, 422, 167, 106, 192,
	172, 370, 373, 368, 369, 411, 412, 447, 448, 449,
	429, 365, 0, 371, 372, 0, 433, 123, 414, 90,
	98, 130, 207, 208, 0, 161, 117, 194, 392, 352,
	395, 0, 0, 0, 0, 0, 0, 0, 362, 363,
	399, 0, 103, 442, 432, 0, 402, 444, 376, 391,
	452, 393, 394, 424, 360, 410, 152, 388, 91, 379,
	354, 385, 355, 377, 404, 115, 375, 434, 413, 128,
	450, 131, 418, 0, 173, 140, 0, 0, 406, 436,
	408, 430, 401, 425, 367, 417, 445, 389, 421, 446,
	0, 0, 0, 349, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 420, 441, 387, 453, 423, 353,
	419, 0, 358, 361, 451, 439, 382, 383, 0, 0,
	0, 0, 0, 0, 0, 405, 409, 427, 398, 0,
	0, 0, 0, 0, 0, 1191, 0, 380, 0, 416,
	0, 0, 0, 364, 359, 0, 403, 0, 0, 0,
	366, 0, 381, 428, 0, 351, 431, 437, 400, 200,
	440, 397, 396, 159, 0, 107, 0, 179, 119, 390,
	129, 426, 443, 407, 435, 378, 386, 109, 384, 166,
	153, 191, 415, 154, 164, 132, 183, 160, 190, 201,
	202, 181, 199, 168, 99, 147, 89, 158, 165, 0,
	108, 0, 213, 214, 215, 216, 217, 218, 219, 92,
	180, 189, 105, 169, 95, 187, 176, 178, 138, 124,
	125, 171, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 177, 141, 184, 185, 110, 210, 112, 111, 175,
	100, 197, 198, 97, 101, 196, 146, 151, 149, 195,
	182, 188, 139, 136, 0, 96, 186, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 356, 0, 174, 193, 211, 212,
	357, 374, 438, 203, 204, 205, 206, 0, 0, 0,
	145, 102, 122, 170, 126, 133, 162, 209, 422, 167,
	106, 192, 172, 370, 373, 368, 369, 411, 412, 447,
	448, 449, 429, 365, 0, 371, 372, 0, 433, 123,
	414, 90, 98, 130, 207, 208, 0, 161, 117, 194,
	392, 352, 395, 0, 0, 0, 0, 0, 0, 0,
	362, 363, 399, 0, 103, 442, 432, 0, 402, 444,
	376, 391, 452, 393, 394, 424, 360, 410, 152, 388,
	91, 379, 354, 385, 355, 377, 404, 115, 375, 434,
	413, 128, 450, 131, 418, 0, 173, 140, 0, 0,
	406, 436, 408, 430, 401, 425, 367, 417, 445, 389,
	421, 446, 50, 0, 0, 349, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 420, 441, 387, 453,
	423, 353, 419, 0, 358, 361, 451, 439, 382, 383,
	0, 0, 0, 0, 0, 0, 0, 405, 409, 427,
	398, 0, 0, 0, 0, 0, 0, 0, 0, 380,
	0, 416, 0, 0, 0, 364, 359, 0, 403, 0,
	0, 0, 366, 0, 381, 428, 0, 351, 431, 437,
	400, 200, 440, 397, 396, 159, 0, 107, 0, 179,
	119, 390, 129, 426, 443, 407, 435, 378, 386, 109,
	384, 166, 153, 191, 415, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 356, 0, 174, 193,
	211, 212, 357, 374, 438, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	422, 167, 106, 192, 172, 370, 373, 368, 369, 411,
	412, 447, 448, 449, 429, 365, 0, 371, 372, 0,
	433, 123, 414, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 392, 352, 395, 0, 0, 0, 0, 0,
	0, 0, 362, 363, 399, 0, 103, 442, 432, 0,
	402, 444, 376, 391, 452, 393, 394, 424, 360, 410,
	152, 388, 91, 379, 354, 385, 355, 377, 404, 115,
	375, 434, 413, 128, 450, 131, 418, 0, 173, 140,
	0, 0, 406, 436, 408, 430, 401, 425, 367, 417,
	445, 389, 421, 446, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 420, 441,
	387, 453, 423, 353, 419, 0, 358, 361, 451, 439,
	382, 383, 0, 0, 0, 0, 0, 0, 0, 405,
	409, 427, 398, 0, 0, 0, 0, 0, 0, 782,
	0, 380, 0, 416, 0, 0, 0, 364, 359, 0,
	403, 0, 0, 0, 366, 0, 381, 428, 0, 351,
	431, 437, 400, 200, 440, 397, 396, 159, 0, 107,
	0, 179, 119, 390, 129, 426, 443, 407, 435, 378,
	386, 109, 384, 166, 153, 191, 415, 154, 164, 132,
	183, 160, 190, 201, 202, 181, 199, 168, 99, 147,
	89, 158, 165, 0, 108, 0, 213, 214, 215, 216,
	217, 218, 219, 92, 180, 189, 105, 169, 95, 187,
	176, 178, 138, 124, 125, 171, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 177, 141, 184, 185, 110,
	210, 112, 111, 175, 100, 197, 198, 97, 101, 196,
	146, 151, 149, 195, 182, 188, 139, 136, 0, 96,
	186, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 356, 0,
	174, 193, 211, 212, 357, 374, 438, 203, 204, 205,
	206, 0, 0, 0, 145, 102, 122, 170, 126, 133,
	162, 209, 422, 167, 106, 192, 172, 370, 373, 368,
	369, 411, 412, 447, 448, 449, 429, 365, 0, 371,
	372, 0, 433, 123, 414, 90, 98, 130, 207, 208,
	0, 161, 117, 194, 392, 352, 395, 0, 0, 0,
	0, 0, 0, 0, 362, 363, 399, 0, 103, 442,
	432, 0, 402, 444, 376, 391, 452, 393, 394, 424,
	360, 410, 152, 388, 91, 379, 354, 385, 355, 377,
	404, 115, 375, 434, 413, 128, 450, 131, 418, 0,
	173, 140, 0, 0, 406, 436, 408, 430, 401, 425,
	367, 417, 445, 389, 421, 446, 0, 0, 0, 349,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	420, 441, 387, 453, 423, 353, 419, 0, 358, 361,
	451, 439, 382, 383, 0, 0, 0, 0, 0, 0,
	0, 405, 409, 427, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 380, 0, 416, 0, 0, 0, 364,
	359, 0, 403, 0, 0, 0, 366, 0, 381, 428,
	0, 351, 431, 437, 400, 200, 440, 397, 396, 159,
	0, 107, 0, 179, 119, 390, 129, 426, 443, 407,
	435, 378, 386, 109, 384, 166, 153, 191, 415, 154,
	164, 132, 183, 160, 190, 201, 202, 181, 199, 168,
	99, 147, 89, 158, 165, 0, 108, 0, 213, 214,
	215, 216, 217, 218, 219, 92, 180, 189, 105, 169,
	95, 187, 176, 178, 138, 124, 125, 171, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 177, 141, 184,
	185, 110, 210, 112, 111, 175, 100, 197, 198, 97,
	101, 196, 146, 151, 149, 195, 182, 188, 139, 136,
	0, 96, 186, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	356, 0, 174, 193, 211, 212, 357, 374, 438, 203,
	204, 205, 206, 0, 0, 0, 145, 102, 122, 170,
	126, 133, 162, 209, 422, 167, 106, 192, 172, 370,
	373, 368, 369, 411, 412, 447, 448, 449, 429, 365,
	0, 371, 372, 0, 433, 123, 414, 90, 98, 130,
	207, 208, 0, 161, 117, 194, 392, 352, 395, 0,
	0, 0, 0, 0, 0, 0, 362, 363, 399, 0,
	103, 442, 432, 0, 402, 444, 376, 391, 452, 393,
	394, 424, 360, 410, 152, 388, 91, 379, 354, 385,
	355, 377, 404, 115, 375, 434, 413, 128, 450, 131,
	418, 0, 173, 140, 0, 0, 406, 436, 408, 430,
	401, 425, 367, 417, 445, 389, 421, 446, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 420, 441, 387, 453, 423, 353, 419, 0,
	358, 361, 451, 439, 382, 383, 0, 0, 0, 0,
	0, 0, 0, 405, 409, 427, 398, 0, 0, 0,
	0, 0, 0, 0, 0, 380, 0, 416, 0, 0,
	0, 364, 359, 0, 403, 0, 0, 0, 366, 0,
	381, 428, 0, 351, 431, 437, 400, 200, 440, 397,
	396, 159, 0, 107, 0, 179, 119, 390, 129, 426,
	443, 407, 435, 378, 386, 109, 384, 166, 153, 191,
	415, 154, 164, 132, 183, 160, 190, 201, 202, 181,
	199, 168, 99, 147, 89, 158, 165, 0, 108, 0,
	213, 214, 215, 216, 217, 218, 219, 92, 180, 189,
	105, 169, 95, 187, 176, 178, 138, 124, 125, 171,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 177,
	141, 184, 185, 110, 210, 112, 111, 175, 100, 197,
	198, 97, 101, 196, 146, 151, 149, 195, 182, 188,
	139, 136, 0, 96, 186, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 356, 0, 174, 193, 211, 212, 357, 374,
	438, 203, 204, 205, 206, 0, 0, 0, 145, 102,
	122, 170, 126, 133, 162, 209, 422, 167, 106, 192,
	172, 370, 373, 368, 369, 411, 412, 447, 448, 449,
	429, 365, 0, 371, 372, 0, 433, 123, 414, 90,
	98, 130, 207, 208, 0, 161, 117, 194, 392, 352,
	395, 0, 0, 0, 0, 0, 0, 0, 362, 363,
	399, 0, 103, 442, 432, 0, 402, 444, 376, 391,
	452, 393, 394, 424, 360, 410, 152, 388, 91, 379,
	354, 385, 355, 377, 404, 115, 375, 434, 413, 128,
	450, 131, 418, 0, 173, 140, 0, 0, 406, 436,
	408, 430, 401, 425, 367, 417, 445, 389, 421, 446,
	0, 0, 0, 349, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 420, 441, 387, 453, 423, 353,
	419, 0, 358, 361, 451, 439, 382, 383, 0, 0,
	0, 0, 0, 0, 0, 405, 409, 427, 398, 0,
	0, 0, 0, 0, 0, 0, 0, 380, 0, 416,
	0, 0, 0, 364, 359, 0, 403, 0, 0, 0,
	366, 0, 381, 428, 0, 351, 431, 437, 400, 200,
	440, 397, 396, 159, 0, 107, 0, 179, 119, 390,
	129, 426, 443, 407, 435, 378, 386, 109, 384, 166,
	153, 191, 415, 154, 164, 132, 183, 160, 190, 201,
	202, 181, 199, 168, 99, 147, 89, 158, 165, 0,
	108, 0, 213, 214, 215, 216, 217, 218, 219, 92,
	180, 189, 105, 169, 95, 187, 176, 178, 138, 124,
	125, 171, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 177, 141, 184, 185, 110, 210, 112, 111, 175,
	100, 197, 198, 97, 347, 196, 146, 151, 149, 195,
	182, 188, 139, 136, 0, 96, 186, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 356, 0, 174, 193, 211, 212,
	357, 374, 438, 203, 204, 205, 206, 0, 0, 0,
	348, 346, 122, 170, 126, 133, 162, 209, 422, 167,
	106, 192, 172, 370, 373, 368, 369, 411, 412, 447,
	448, 449, 429, 365, 0, 371, 372, 0, 433, 123,
	414, 90, 98, 130, 207, 208, 0, 161, 117, 194,
	392, 352, 395, 0, 0, 0, 0, 0, 0, 0,
	362, 363, 399, 0, 103, 442, 432, 0, 402, 444,
	376, 391, 452, 393, 394, 424, 360, 410, 152, 388,
	91, 379, 354, 385, 355, 377, 404, 115, 375, 434,
	413, 128, 450, 131, 418, 0, 173, 140, 0, 0,
	406, 436, 408, 430, 401, 425, 367, 417, 445, 389,
	421, 446, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 420, 441, 387, 453,
	423, 353, 419, 0, 358, 361, 451, 439, 382, 383,
	0, 0, 0, 0, 0, 0, 0, 405, 409, 427,
	398, 0, 0, 0, 0, 0, 0, 0, 0, 380,
	0, 416, 0, 0, 0, 364, 359, 0, 403, 0,
	0, 0, 366, 0, 381, 428, 0, 351, 431, 437,
	400, 200, 440, 397, 396, 159, 0, 107, 0, 179,
	119, 390, 129, 426, 443, 407, 435, 378, 386, 109,
	384, 166, 153, 191, 415, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 356, 0, 174, 193,
	211, 212, 357, 374, 438, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	422, 167, 106, 192, 172, 370, 373, 368, 369, 411,
	412, 447, 448, 449, 429, 365, 0, 371, 372, 0,
	433, 123, 414, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 392, 352, 395, 0, 0, 0, 0, 0,
	0, 0, 362, 363, 399, 0, 103, 442, 432, 0,
	402, 444, 376, 391, 452, 393, 394, 424, 360, 410,
	152, 388, 91, 379, 354, 385, 355, 377, 404, 115,
	375, 434, 413, 128, 450, 131, 418, 0, 173, 140,
	0, 0, 406, 436, 408, 430, 401, 425, 367, 417,
	445, 389, 421, 446, 0, 0, 0, 349, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 420, 441,
	387, 453, 423, 353, 419, 0, 358, 361, 451, 439,
	382, 383, 0, 0, 0, 0, 0, 0, 0, 405,
	409, 427, 398, 0, 0, 0, 0, 0, 0, 0,
	0, 380, 0, 416, 0, 0, 0, 364, 359, 0,
	403, 0, 0, 0, 366, 0, 381, 428, 0, 351,
	431, 437, 400, 200, 440, 397, 396, 159, 0, 107,
	0, 179, 119, 390, 129, 426, 443, 407, 435, 378,
	386, 109, 384, 166, 153, 191, 415, 154, 164, 132,
	183, 160, 190, 201, 202, 181, 199, 168, 99, 147,
	89, 158, 165, 0, 108, 0, 213, 214, 215, 216,
	217, 218, 219, 92, 180, 652, 105, 169, 95, 187,
	176, 178, 138, 124, 125, 171, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 177, 141, 184, 185, 110,
	210, 112, 111, 175, 100, 197, 198, 97, 347, 196,
	146, 151, 149, 195, 182, 188, 139, 136, 0, 96,
	186, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 356, 0,
	174, 193, 211, 212, 357, 374, 438, 203, 204, 205,
	206, 0, 0, 0, 348, 346, 122, 170, 126, 133,
	162, 209, 422, 167, 106, 192, 172, 370, 373, 368,
	369, 411, 412, 447, 448, 449, 429, 365, 0, 371,
	372, 0, 433, 123, 414, 90, 98, 130, 207, 208,
	0, 161, 117, 194, 392, 352, 395, 0, 0, 0,
	0, 0, 0, 0, 362, 363, 399, 0, 103, 442,
	432, 0, 402, 444, 376, 391, 452, 393, 394, 424,
	360, 410, 152, 388, 91, 379, 354, 385, 355, 377,
	404, 115, 375, 434, 413, 128, 450, 131, 418, 0,
	173, 140, 0, 0, 406, 436, 408, 430, 401, 425,
	367, 417, 445, 389, 421, 446, 0, 0, 0, 349,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	420, 441, 387, 453, 423, 353, 419, 0, 358, 361,
	451, 439, 382, 383, 0, 0, 0, 0, 0, 0,
	0, 405, 409, 427, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 380, 0, 416, 0, 0, 0, 364,
	359, 0, 403, 0, 0, 0, 366, 0, 381, 428,
	0, 351, 431, 437, 400, 200, 440, 397, 396, 159,
	0, 107, 0, 179, 119, 390, 129, 426, 443, 407,
	435, 378, 386, 109, 384, 166, 153, 191, 415, 154,
	164, 132, 183, 160, 190, 201, 202, 181, 199, 168,
	99, 147, 89, 158, 165, 0, 108, 0, 213, 214,
	215, 216, 217, 218, 219, 92, 180, 338, 105, 169,
	95, 187, 176, 178, 138, 124, 125, 171, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 177, 141, 184,
	185, 110, 210, 112, 111, 175, 100, 197, 198, 97,
	347, 196, 146, 151, 149, 195, 182, 188, 139, 136,
	0, 96, 186, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	356, 0, 174, 193, 211, 212, 357, 374, 438, 203,
	204, 205, 206, 0, 0, 0, 348, 346, 341, 340,
	126, 133, 162, 209, 422, 167, 106, 192, 172, 370,
	373, 368, 369, 411, 412, 447, 448, 449, 429, 365,
	0, 371, 372, 0, 433, 123, 414, 90, 98, 130,
	207, 208, 0, 161, 117, 194, 392, 352, 395, 0,
	0, 0, 0, 0, 0, 0, 362, 363, 399, 152,
	103, 91, 0, 0, 271, 0, 0, 0, 115, 268,
	0, 0, 128, 310, 131, 0, 0, 173, 140, 0,
	0, 0, 0, 301, 302, 0, 0, 0, 0, 0,
	0, 883, 0, 50, 0, 0, 269, 289, 288, 291,
	292, 293, 294, 0, 0, 104, 290, 295, 296, 297,
	884, 0, 0, 266, 282, 0, 309, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 280, 0, 0,
	0, 0, 322, 0, 281, 0, 0, 277, 278, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 200, 0, 0, 320, 159, 0, 107, 0,
	179, 119, 0, 129, 0, 0, 0, 0, 0, 0,
	109, 0, 166, 153, 191, 0, 154, 164, 132, 183,
	160, 190, 201, 202, 181, 199, 168, 99, 147, 89,
	158, 165, 0, 108, 0, 213, 214, 215, 216, 217,
	218, 219, 92, 180, 189, 105, 169, 95, 187, 176,
	178, 138, 124, 125, 171, 93, 94, 0, 163, 114,
	157, 118, 113, 150, 177, 141, 184, 185, 110, 210,
	112, 111, 175, 100, 197, 198, 97, 101, 196, 146,
	151, 149, 195, 182, 188, 139, 136, 0, 96, 186,
	137, 135, 127, 0, 116, 120, 155, 134, 156, 121,
	143, 142, 144, 0, 148, 0, 0, 0, 0, 174,
	193, 211, 212, 0, 0, 0, 203, 204, 205, 206,
	0, 0, 0, 145, 102, 122, 170, 126, 133, 162,
	209, 0, 167, 106, 192, 172, 311, 321, 317, 318,
	315, 316, 314, 313, 312, 323, 303, 304, 305, 306,
	308, 0, 123, 307, 90, 98, 130, 207, 208, 0,
	161, 117, 194, 0, 0, 152, 0, 91, 819, 0,
	271, 0, 0, 0, 115, 268, 319, 103, 128, 310,
	131, 0, 0, 173, 140, 0, 0, 0, 0, 301,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 269, 289, 288, 291, 292, 293, 294, 0,
	0, 104, 290, 295, 296, 297, 0, 0, 0, 266,
	282, 0, 309, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 280, 262, 0, 0, 0, 322, 0,
	281, 0, 0, 277, 278, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 200, 0,
	0, 320, 159, 0, 107, 0, 179, 119, 0, 129,
	0, 0, 0, 0, 0, 0, 109, 0, 166, 153,
	191, 0, 154, 164, 132, 183, 160, 190, 201, 202,
	181, 199, 168, 99, 147, 89, 158, 165, 0, 108,
	0, 213, 214, 215, 216, 217, 218, 219, 92, 180,
	189, 105, 169, 95, 187, 176, 178, 138, 124, 125,
	171, 93, 94, 0, 163, 114, 157, 118, 113, 150,
	177, 141, 184, 185, 110, 210, 112, 111, 175, 100,
	197, 198, 97, 101, 196, 146, 151, 149, 195, 182,
	188, 139, 136, 0, 96, 186, 137, 135, 127, 0,
	116, 120, 155, 134, 156, 121, 143, 142, 144, 0,
	148, 0, 0, 0, 0, 174, 193, 211, 212, 0,
	0, 0, 203, 204, 205, 206, 0, 0, 0, 145,
	102, 122, 170, 126, 133, 162, 209, 0, 167, 106,
	192, 172, 311, 321, 317, 318, 315, 316, 314, 313,
	312, 323, 303, 304, 305, 306, 308, 0, 123, 307,
	90, 98, 130, 207, 208, 0, 161, 117, 194, 0,
	0, 152, 0, 91, 0, 0, 271, 0, 0, 0,
	115, 268, 319, 103, 128, 310, 131, 0, 0, 173,
	140, 0, 0, 0, 0, 301, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 502, 269, 289,
	288, 291, 292, 293, 294, 0, 0, 104, 290, 295,
	296, 297, 0, 0, 0, 266, 282, 0, 309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	0, 0, 0, 0, 322, 0, 281, 0, 0, 277,
	278, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 200, 0, 0, 320, 159, 0,
	107, 0, 179, 119, 0, 129, 0, 0, 0, 0,
	0, 0, 109, 0, 166, 153, 191, 0, 154, 164,
	132, 183, 160, 190, 201, 202, 181, 199, 168, 99,
	147, 89, 158, 165, 0, 108, 0, 213, 214, 215,
	216, 217, 218, 219, 92, 180, 189, 105, 169, 95,
	187, 176, 178, 138, 124, 125, 171, 93, 94, 0,
	163, 114, 157, 118, 113, 150, 177, 141, 184, 185,
	110, 210, 112, 111, 175, 100, 197, 198, 97, 101,
	196, 146, 151, 149, 195, 182, 188, 139, 136, 0,
	96, 186, 137, 135, 127, 0, 116, 120, 155, 134,
	156, 121, 143, 142, 144, 0, 148, 0, 0, 0,
	0, 174, 193, 211, 212, 0, 0, 0, 203, 204,
	205, 206, 0, 0, 0, 145, 102, 122, 170, 126,
	133, 162, 209, 0, 167, 106, 192, 172, 311, 321,
	317, 318, 315, 316, 314, 313, 312, 323, 303, 304,
	305, 306, 308, 0, 123, 307, 90, 98, 130, 207,
	208, 0, 161, 117, 194, 0, 0, 152, 0, 91,
	0, 0, 271, 0, 0, 0, 115, 268, 319, 103,
	128, 310, 131, 0, 0, 173, 140, 0, 0, 0,
	0, 301, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 269, 289, 288, 291, 292, 293,
	294, 0, 0, 104, 290, 295, 296, 297, 0, 0,
	0, 266, 282, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 280, 262, 0, 0, 0,
	322, 0, 281, 0, 0, 277, 278, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	200, 0, 0, 320, 159, 0, 107, 0, 179, 119,
	0, 129, 0, 0, 0, 0, 0, 0, 109, 0,
	166, 153, 191, 0, 154, 164, 132, 183, 160, 190,
	201, 202, 181, 199, 168, 99, 147, 89, 158, 165,
	0, 108, 0, 213, 214, 215, 216, 217, 218, 219,
	92, 180, 189, 105, 169, 95, 187, 176, 178, 138,
	124, 125, 171, 93, 94, 0, 163, 114, 157, 118,
	113, 150, 177, 141, 184, 185, 110, 210, 112, 111,
	175, 100, 197, 198, 97, 101, 196, 146, 151, 149,
	195, 182, 188, 139, 136, 0, 96, 186, 137, 135,
	127, 0, 116, 120, 155, 134, 156, 121, 143, 142,
	144, 0, 148, 0, 0, 0, 0, 174, 193, 211,
	212, 0, 0, 0, 203, 204, 205, 206, 0, 0,
	0, 145, 102, 122, 170, 126, 133, 162, 209, 0,
	167, 106, 192, 172, 311, 321, 317, 318, 315, 316,
	314, 313, 312, 323, 303, 304, 305, 306, 308, 0,
	123, 307, 90, 98, 130, 207, 208, 0, 161, 117,
	194, 0, 0, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 319, 103, 152, 0, 91, 0,
	0, 271, 0, 0, 0, 115, 268, 0, 0, 128,
	310, 131, 0, 0, 173, 140, 0, 0, 0, 0,
	301, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 269, 289, 288, 291, 292, 293, 294,
	0, 0, 104, 290, 295, 296, 297, 0, 0, 0,
	266, 282, 0, 309, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 0, 0, 0, 0, 322,
	0, 281, 0, 0, 277, 278, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 320, 159, 0, 107, 0, 179, 119, 0,
	129, 0, 0, 0, 0, 0, 0, 109, 0, 166,
	153, 191, 0, 154, 164, 132, 183, 160, 190, 201,
	202, 181, 199, 168, 99, 147, 89, 158, 165, 0,
	108, 0, 213, 214, 215, 216, 217, 218, 219, 92,
	180, 189, 105, 169, 95, 187, 176, 178, 138, 124,
	125, 171, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 177, 141, 184, 185, 110, 210, 112, 111, 175,
	100, 197, 198, 97, 101, 196, 146, 151, 149, 195,
	182, 188, 139, 136, 0, 96, 186, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 0, 0, 174, 193, 211, 212,
	0, 0, 0, 203, 204, 205, 206, 0, 0, 0,
	145, 102, 122, 170, 126, 133, 162, 209, 0, 167,
	106, 192, 172, 311, 321, 317, 318, 315, 316, 314,
	313, 312, 323, 303, 304, 305, 306, 308, 0, 123,
	307, 90, 98, 130, 207, 208, 0, 161, 117, 194,
	0, 0, 152, 0, 91, 0, 0, 271, 0, 0,
	0, 115, 268, 319, 103, 128, 310, 131, 0, 0,
	173, 140, 0, 0, 0, 0, 301, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 269,
	289, 288, 291, 292, 293, 294, 0, 0, 104, 290,
	295, 296, 297, 0, 0, 0, 266, 282, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 0, 0, 0, 0, 322, 0, 281, 0, 0,
	277, 278, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 320, 159,
	0, 107, 0, 179, 119, 0, 129, 0, 0, 0,
	0, 0, 0, 109, 0, 166, 153, 191, 0, 154,
	164, 132, 183, 160, 190, 201, 202, 181, 199, 168,
	99, 147, 89, 158, 165, 0, 108, 0, 213, 214,
	215, 216, 217, 218, 219, 92, 180, 189, 105, 169,
	95, 187, 176, 178, 138, 124, 125, 171, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 177, 141, 184,
	185, 110, 210, 112, 111, 175, 100, 197, 198, 97,
	101, 196, 146, 151, 149, 195, 182, 188, 139, 136,
	0, 96, 186, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	0, 0, 174, 193, 211, 212, 0, 0, 0, 203,
	204, 205, 206, 0, 0, 0, 145, 102, 122, 170,
	126, 133, 162, 209, 0, 167, 106, 192, 172, 311,
	321, 317, 318, 315, 316, 314, 313, 312, 323, 303,
	304, 305, 306, 308, 0, 123, 307, 90, 98, 130,
	207, 208, 0, 161, 117, 194, 0, 0, 152, 0,
	91, 0, 0, 0, 0, 0, 0, 115, 0, 319,
	103, 128, 310, 131, 0, 0, 173, 140, 0, 0,
	0, 0, 301, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 269, 289, 288, 291, 292,
	293, 294, 0, 0, 104, 290, 295, 296, 297, 0,
	0, 0, 0, 282, 0, 309, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 0, 0, 0,
	0, 322, 0, 281, 0, 0, 277, 278, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 320, 159, 0, 107, 0, 179,
	119, 0, 129, 0, 0, 0, 0, 0, 0, 109,
	0, 166, 153, 191, 1638, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 174, 193,
	211, 212, 0, 0, 0, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	0, 167, 106, 192, 172, 311, 321, 317, 318, 315,
	316, 314, 313, 312, 323, 303, 304, 305, 306, 308,
	0, 123, 307, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 0, 0, 152, 0, 91, 0, 0, 0,
	0, 0, 0, 115, 0, 319, 103, 128, 310, 131,
	0, 0, 173, 140, 0, 0, 0, 0, 301, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 269, 289, 288, 291, 292, 293, 294, 0, 0,
	104, 290, 295, 296, 297, 0, 0, 0, 0, 282,
	0, 309, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 0, 0, 0, 0, 322, 0, 281,
	0, 0, 277, 278, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 200, 0, 0,
	320, 159, 0, 107, 0, 179, 119, 0, 129, 0,
	0, 0, 0, 0, 0, 109, 0, 166, 153, 191,
	0, 154, 164, 132, 183, 160, 190, 201, 202, 181,
	199, 168, 99, 147, 89, 158, 165, 0, 108, 0,
	213, 214, 215, 216, 217, 218, 219, 92, 180, 189,
	105, 169, 95, 187, 176, 178, 138, 124, 125, 171,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 177,
	141, 184, 185, 110, 210, 112, 111, 175, 100, 197,
	198, 97, 101, 196, 146, 151, 149, 195, 182, 188,
	139, 136, 0, 96, 186, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 0, 0, 174, 193, 211, 212, 0, 0,
	0, 203, 204, 205, 206, 0, 0, 0, 145, 102,
	122, 170, 126, 133, 162, 209, 0, 167, 106, 192,
	172, 311, 321, 317, 318, 315, 316, 314, 313, 312,
	323, 303, 304, 305, 306, 308, 0, 123, 307, 90,
	98, 130, 207, 208, 0, 161, 117, 194, 0, 0,
	152, 0, 91, 0, 0, 0, 0, 0, 0, 115,
	0, 319, 103, 128, 0, 131, 0, 0, 173, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 536, 535, 545, 546, 538, 539, 540,
	541, 542, 543, 544, 537, 0, 0, 547, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 159, 0, 107,
	0, 179, 119, 0, 129, 0, 0, 0, 0, 0,
	0, 109, 0, 166, 153, 191, 0, 154, 164, 132,
	183, 160, 190, 201, 202, 181, 199, 168, 99, 147,
	89, 158, 165, 0, 108, 0, 213, 214, 215, 216,
	217, 218, 219, 92, 180, 189, 105, 169, 95, 187,
	176, 178, 138, 124, 125, 171, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 177, 141, 184, 185, 110,
	210, 112, 111, 175, 100, 197, 198, 97, 101, 196,
	146, 151, 149, 195, 182, 188, 139, 136, 0, 96,
	186, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 0, 0,
	174, 193, 211, 212, 0, 0, 0, 203, 204, 205,
	206, 0, 0, 0, 145, 102, 122, 170, 126, 133,
	162, 209, 0, 167, 106, 192, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 90, 98, 130, 207, 208,
	0, 161, 117, 194, 0, 0, 152, 0, 91, 0,
	524, 0, 0, 0, 0, 115, 0, 548, 103, 128,
	0, 131, 0, 0, 173, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 349, 0, 526, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 521, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 522, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 159, 0, 107, 0, 179, 119, 0,
	129, 0, 0, 0, 0, 0, 0, 109, 0, 166,
	153, 191, 0, 154, 164, 132, 183, 160, 190, 201,
	202, 181, 199, 168, 99, 147, 89, 158, 165, 0,
	108, 0, 213, 214, 215, 216, 217, 218, 219, 92,
	180, 189, 105, 169, 95, 187, 176, 178, 138, 124,
	125, 171, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 177, 141, 184, 185, 110, 210, 112, 111, 175,
	100, 197, 198, 97, 101, 196, 146, 151, 149, 195,
	182, 188, 139, 136, 0, 96, 186, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 0, 0, 174, 193, 211, 212,
	0, 0, 0, 203, 204, 205, 206, 0, 0, 0,
	145, 102, 122, 170, 126, 133, 162, 209, 0, 167,
	106, 192, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 90, 98, 130, 207, 208, 0, 161, 117, 194,
	152, 0, 91, 0, 641, 0, 0, 0, 0, 115,
	0, 0, 0, 128, 103, 131, 0, 0, 173, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 643,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 159, 0, 107,
	0, 179, 119, 0, 129, 0, 0, 0, 0, 0,
	0, 109, 0, 166, 153, 191, 0, 154, 164, 132,
	183, 160, 190, 201, 202, 181, 199, 168, 99, 147,
	89, 158, 165, 0, 108, 0, 213, 214, 215, 216,
	217, 218, 219, 92, 180, 189, 105, 169, 95, 187,
	176, 178, 138, 124, 125, 171, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 177, 141, 184, 185, 110,
	210, 112, 111, 175, 100, 197, 198, 97, 101, 196,
	146, 151, 149, 195, 182, 188, 139, 136, 0, 96,
	186, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 0, 0,
	174, 193, 211, 212, 0, 0, 0, 203, 204, 205,
	206, 0, 0, 0, 145, 102, 122, 170, 126, 133,
	162, 209, 0, 167, 106, 192, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 23, 123, 0, 90, 98, 130, 207, 208,
	0, 161, 117, 194, 152, 0, 91, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 128, 103, 131,
	0, 0, 173, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 349, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 200, 0, 0,
	0, 159, 0, 107, 0, 179, 119, 0, 129, 0,
	0, 0, 0, 0, 0, 109, 0, 166, 153, 191,
	0, 154, 164, 132, 183, 160, 190, 201, 202, 181,
	199, 168, 99, 147, 89, 158, 165, 0, 108, 0,
	213, 214, 215, 216, 217, 218, 219, 92, 180, 189,
	105, 169, 95, 187, 176, 178, 138, 124, 125, 171,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 177,
	141, 184, 185, 110, 210, 112, 111, 175, 100, 197,
	198, 97, 101, 196, 146, 151, 149, 195, 182, 188,
	139, 136, 0, 96, 186, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 0, 0, 174, 193, 211, 212, 0, 0,
	0, 203, 204, 205, 206, 0, 0, 0, 145, 102,
	122, 170, 126, 133, 162, 209, 0, 167, 106, 192,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 23, 123, 0, 90,
	98, 130, 207, 208, 0, 161, 117, 194, 152, 0,
	91, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 128, 103, 131, 0, 0, 173, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 159, 0, 107, 0, 179,
	119, 0, 129, 0, 0, 0, 0, 0, 0, 109,
	0, 166, 153, 191, 0, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 174, 193,
	211, 212, 0, 0, 0, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	0, 167, 106, 192, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 152, 0, 91, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 128, 103, 131, 0, 0,
	173, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 349,
	0, 0, 769, 0, 0, 770, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 0, 159,
	0, 107, 0, 179, 119, 0, 129, 0, 0, 0,
	0, 0, 0, 109, 0, 166, 153, 191, 0, 154,
	164, 132, 183, 160, 190, 201, 202, 181, 199, 168,
	99, 147, 89, 158, 165, 0, 108, 0, 213, 214,
	215, 216, 217, 218, 219, 92, 180, 189, 105, 169,
	95, 187, 176, 178, 138, 124, 125, 171, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 177, 141, 184,
	185, 110, 210, 112, 111, 175, 100, 197, 198, 97,
	101, 196, 146, 151, 149, 195, 182, 188, 139, 136,
	0, 96, 186, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	0, 0, 174, 193, 211, 212, 0, 0, 0, 203,
	204, 205, 206, 0, 0, 0, 145, 102, 122, 170,
	126, 133, 162, 209, 0, 167, 106, 192, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 90, 98, 130,
	207, 208, 0, 161, 117, 194, 152, 0, 91, 0,
	0, 0, 0, 0, 0, 115, 661, 0, 0, 128,
	103, 131, 0, 0, 173, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 349, 0, 660, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 159, 0, 107, 0, 179, 119, 0,
	129, 0, 0, 0, 0, 0, 0, 109, 0, 166,
	153, 191, 0, 154, 164, 132, 183, 160, 190, 201,
	202, 181, 199, 168, 99, 147, 89, 158, 165, 0,
	108, 0, 213, 214, 215, 216, 217, 218, 219, 92,
	180, 189, 105, 169, 95, 187, 176, 178, 138, 124,
	125, 171, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 177, 141, 184, 185, 110, 210, 112, 111, 175,
	100, 197, 198, 97, 101, 196, 146, 151, 149, 195,
	182, 188, 139, 136, 0, 96, 186, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 0, 0, 174, 193, 211, 212,
	0, 0, 0, 203, 204, 205, 206, 0, 0, 0,
	145, 102, 122, 170, 126, 133, 162, 209, 0, 167,
	106, 192, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 90, 98, 130, 207, 208, 0, 161, 117, 194,
	152, 0, 91, 0, 641, 0, 0, 0, 0, 115,
	0, 0, 0, 128, 103, 131, 0, 0, 173, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 643,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 159, 0, 107,
	0, 179, 119, 0, 129, 0, 0, 0, 0, 0,
	0, 109, 0, 166, 153, 191, 0, 639, 164, 132,
	183, 160, 190, 201, 202, 181, 199, 168, 99, 147,
	89, 158, 165, 0, 108, 0, 213, 214, 215, 216,
	217, 218, 219, 92, 180, 189, 105, 169, 95, 187,
	176, 178, 138, 124, 125, 171, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 177, 141, 184, 185, 110,
	210, 112, 111, 175, 100, 197, 198, 97, 101, 196,
	146, 151, 149, 195, 182, 188, 139, 136, 0, 96,
	186, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 0, 0,
	174, 193, 211, 212, 0, 0, 0, 203, 204, 205,
	206, 0, 0, 0, 145, 102, 122, 170, 126, 133,
	162, 209, 0, 167, 106, 192, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 90, 98, 130, 207, 208,
	0, 161, 117, 194, 152, 0, 91, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 128, 103, 131,
	0, 0, 173, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 200, 0, 0,
	0, 159, 0, 107, 0, 179, 119, 0, 129, 0,
	0, 1358, 0, 0, 0, 109, 0, 166, 153, 191,
	0, 154, 164, 132, 183, 160, 190, 201, 202, 181,
	199, 168, 99, 147, 89, 158, 165, 0, 108, 0,
	213, 214, 215, 216, 217, 218, 219, 92, 180, 189,
	105, 169, 95, 187, 176, 178, 138, 124, 125, 171,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 177,
	141, 184, 185, 110, 210, 112, 111, 175, 100, 197,
	198, 97, 101, 196, 146, 151, 149, 195, 182, 188,
	139, 136, 0, 96, 186, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 0, 0, 174, 193, 211, 212, 0, 0,
	0, 203, 204, 205, 206, 0, 0, 0, 145, 102,
	122, 170, 126, 133, 162, 209, 0, 167, 106, 192,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 90,
	98, 130, 207, 208, 0, 161, 117, 194, 152, 0,
	91, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 128, 103, 131, 0, 0, 173, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 159, 0, 107, 0, 179,
	119, 0, 129, 0, 0, 0, 0, 0, 0, 109,
	0, 166, 153, 191, 0, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 174, 193,
	211, 212, 0, 0, 0, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	0, 167, 106, 192, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 0, 0, 152, 0, 91, 0, 0, 0,
	0, 1613, 0, 115, 0, 0, 103, 128, 0, 131,
	0, 0, 173, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 200, 0, 0,
	0, 159, 0, 107, 0, 179, 119, 0, 129, 0,
	0, 1257, 0, 0, 0, 109, 0, 166, 153, 191,
	0, 154, 164, 132, 183, 160, 190, 201, 202, 181,
	199, 168, 99, 147, 89, 158, 165, 0, 108, 0,
	213, 214, 215, 216, 217, 218, 219, 92, 180, 189,
	105, 169, 95, 187, 176, 178, 138, 124, 125, 171,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 177,
	141, 184, 185, 110, 210, 112, 111, 175, 100, 197,
	198, 97, 101, 196, 146, 151, 149, 195, 182, 188,
	139, 136, 0, 96, 186, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 0, 0, 174, 193, 211, 212, 0, 0,
	0, 203, 204, 205, 206, 0, 0, 0, 145, 102,
	122, 170, 126, 133, 162, 209, 0, 167, 106, 192,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 90,
	98, 130, 207, 208, 0, 161, 117, 194, 152, 0,
	91, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 128, 103, 131, 0, 0, 173, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 159, 0, 107, 0, 179,
	119, 0, 129, 0, 0, 0, 0, 0, 0, 109,
	0, 166, 153, 191, 0, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 174, 193,
	211, 212, 0, 0, 0, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	0, 167, 106, 192, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 152, 0, 91, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 128, 103, 131, 0, 0,
	173, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 643, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 0, 159,
	0, 107, 0, 179, 119, 0, 129, 0, 0, 0,
	0, 0, 0, 109, 0, 166, 153, 191, 0, 154,
	164, 132, 183, 160, 190, 201, 202, 181, 199, 168,
	99, 147, 89, 158, 165, 0, 108, 0, 213, 214,
	215, 216, 217, 218, 219, 92, 180, 189, 105, 169,
	95, 187, 176, 178, 138, 124, 125, 171, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 177, 141, 184,
	185, 110, 210, 112, 111, 175, 100, 197, 198, 97,
	101, 196, 146, 151, 149, 195, 182, 188, 139, 136,
	0, 96, 186, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	0, 0, 174, 193, 211, 212, 0, 0, 0, 203,
	204, 205, 206, 0, 0, 0, 145, 102, 122, 170,
	126, 133, 162, 209, 0, 167, 106, 192, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 90, 98, 130,
	207, 208, 0, 161, 117, 194, 152, 0, 91, 0,
	0, 0, 0, 0, 0, 115, 0, 0, 0, 128,
	103, 131, 0, 0, 173, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 349, 0, 526, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 159, 0, 107, 0, 179, 119, 0,
	129, 0, 0, 0, 0, 0, 0, 109, 0, 166,
	153, 191, 0, 154, 164, 132, 183, 160, 190, 201,
	202, 181, 199, 168, 99, 147, 89, 158, 165, 0,
	108, 0, 213, 214, 215, 216, 217, 218, 219, 92,
	180, 189, 105, 169, 95, 187, 176, 178, 138, 124,
	125, 171, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 177, 141, 184, 185, 110, 210, 112, 111, 175,
	100, 197, 198, 97, 101, 196, 146, 151, 149, 195,
	182, 188, 139, 136, 0, 96, 186, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 0, 0, 174, 193, 211, 212,
	0, 0, 0, 203, 204, 205, 206, 0, 0, 0,
	145, 102, 122, 170, 126, 133, 162, 209, 0, 167,
	106, 192, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 90, 98, 130, 207, 208, 0, 161, 117, 194,
	152, 0, 91, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 128, 103, 131, 0, 0, 173, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 159, 0, 107,
	0, 179, 119, 0, 129, 0, 0, 0, 0, 0,
	0, 109, 0, 166, 153, 191, 0, 154, 164, 132,
	183, 160, 190, 201, 202, 181, 199, 168, 99, 147,
	89, 158, 165, 0, 108, 0, 213, 214, 215, 216,
	217, 218, 219, 92, 180, 189, 105, 169, 95, 187,
	176, 178, 138, 124, 125, 171, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 177, 141, 184, 185, 110,
	210, 112, 111, 175, 100, 197, 198, 97, 101, 196,
	146, 151, 149, 195, 182, 188, 139, 136, 0, 96,
	186, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 0, 0,
	174, 193, 211, 212, 0, 0, 0, 203, 204, 205,
	206, 0, 0, 0, 145, 102, 122, 170, 126, 133,
	162, 209, 729, 167, 106, 192, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 90, 98, 130, 207, 208,
	0, 161, 117, 194, 152, 0, 91, 0, 0, 0,
	0, 0, 619, 115, 0, 0, 0, 128, 103, 131,
	0, 0, 173, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 200, 0, 0,
	0, 159, 0, 107, 0, 179, 119, 0, 129, 0,
	0, 0, 0, 0, 0, 109, 0, 166, 153, 191,
	0, 154, 164, 132, 183, 160, 190, 201, 202, 181,
	199, 168, 99, 147, 89, 158, 165, 0, 108, 0,
	213, 214, 215, 216, 217, 218, 219, 92, 180, 189,
	105, 169, 95, 187, 176, 178, 138, 124, 125, 171,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 177,
	141, 184, 185, 110, 210, 112, 111, 175, 100, 197,
	198, 97, 101, 196, 146, 151, 149, 195, 182, 188,
	139, 136, 0, 96, 186, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 0, 0, 174, 193, 211, 212, 0, 0,
	0, 203, 204, 205, 206, 0, 0, 0, 145, 102,
	122, 170, 126, 133, 162, 209, 0, 167, 106, 192,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 90,
	98, 130, 207, 208, 333, 161, 117, 194, 0, 0,
	0, 152, 0, 91, 0, 0, 0, 0, 0, 0,
	115, 0, 103, 0, 128, 0, 131, 0, 0, 173,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 200, 0, 0, 0, 159, 0,
	107, 0, 179, 119, 0, 129, 0, 0, 0, 0,
	0, 0, 109, 0, 166, 153, 191, 0, 154, 164,
	132, 183, 160, 190, 201, 202, 181, 199, 168, 99,
	147, 89, 158, 165, 0, 108, 0, 213, 214, 215,
	216, 217, 218, 219, 92, 180, 189, 105, 169, 95,
	187, 176, 178, 138, 124, 125, 171, 93, 94, 0,
	163, 114, 157, 118, 113, 150, 177, 141, 184, 185,
	110, 210, 112, 111, 175, 100, 197, 198, 97, 101,
	196, 146, 151, 149, 195, 182, 188, 139, 136, 0,
	96, 186, 137, 135, 127, 0, 116, 120, 155, 134,
	156, 121, 143, 142, 144, 0, 148, 0, 0, 0,
	0, 174, 193, 211, 212, 0, 0, 0, 203, 204,
	205, 206, 0, 0, 0, 145, 102, 122, 170, 126,
	133, 162, 209, 0, 167, 106, 192, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 90, 98, 130, 207,
	208, 0, 161, 117, 194, 152, 0, 91, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 128, 103,
	131, 0, 0, 173, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 200, 0,
	0, 0, 159, 0, 107, 0, 179, 119, 0, 129,
	0, 0, 0, 0, 0, 0, 109, 0, 166, 153,
	191, 0, 154, 164, 132, 183, 160, 190, 201, 202,
	181, 199, 168, 99, 147, 89, 158, 165, 0, 108,
	0, 213, 214, 215, 216, 217, 218, 219, 92, 180,
	189, 105, 169, 95, 187, 176, 178, 138, 124, 125,
	171, 93, 94, 0, 163, 114, 157, 118, 113, 150,
	177, 141, 184, 185, 110, 210, 112, 111, 175, 100,
	197, 198, 97, 101, 196, 146, 151, 149, 195, 182,
	188, 139, 136, 0, 96, 186, 137, 135, 127, 0,
	116, 120, 155, 134, 156, 121, 143, 142, 144, 0,
	148, 0, 0, 0, 0, 174, 193, 211, 212, 0,
	0, 0, 203, 204, 205, 206, 0, 0, 0, 145,
	102, 122, 170, 126, 133, 162, 209, 0, 167, 106,
	192, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	90, 98, 130, 207, 208, 0, 161, 117, 194, 152,
	0, 91, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 128, 103, 131, 0, 0, 173, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 200, 0, 0, 0, 159, 0, 107, 0,
	179, 119, 0, 129, 0, 0, 0, 0, 0, 0,
	109, 0, 166, 153, 191, 0, 154, 164, 132, 183,
	160, 190, 201, 202, 181, 199, 168, 99, 147, 89,
	158, 165, 0, 108, 0, 213, 214, 215, 216, 217,
	218, 219, 92, 180, 189, 105, 169, 95, 187, 176,
	178, 138, 124, 125, 171, 93, 94, 0, 163, 114,
	157, 118, 113, 150, 177, 141, 184, 185, 110, 210,
	112, 111, 175, 100, 197, 198, 97, 101, 196, 146,
	151, 149, 195, 182, 188, 139, 136, 0, 96, 186,
	137, 135, 127, 0, 116, 120, 155, 134, 156, 121,
	143, 142, 144, 0, 148, 0, 0, 0, 0, 174,
	193, 211, 212, 0, 0, 0, 203, 204, 205, 206,
	0, 0, 0, 145, 102, 122, 170, 126, 133, 162,
	209, 0, 167, 106, 192, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 90, 98, 130, 207, 208, 0,
	161, 117, 194, 152, 0, 91, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 128, 103, 131, 0,
	0, 173, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
	159, 0, 107, 0, 179, 119, 0, 129, 0, 0,
	0, 0, 0, 0, 109, 0, 166, 153, 191, 0,
	154, 164, 132, 183, 160, 190, 201, 202, 181, 199,
	168, 99, 147, 89, 158, 165, 0, 108, 0, 213,
	214, 215, 216, 217, 218, 219, 92, 180, 189, 105,
	169, 95, 187, 176, 178, 138, 124, 125, 171, 93,
	94, 0, 163, 114, 157, 118, 113, 150, 177, 141,
	184, 185, 110, 210, 112, 111, 175, 100, 197, 198,
	97, 101, 196, 146, 151, 149, 195, 182, 188, 139,
	136, 0, 96, 186, 137, 135, 127, 0, 116, 120,
	155, 134, 156, 121, 143, 142, 144, 0, 148, 0,
	0, 0, 0, 174, 193, 211, 212, 0, 0, 0,
	203, 204, 205, 206, 0, 0, 0, 145, 102, 122,
	170, 126, 133, 162, 209, 0, 167, 106, 192, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 90, 98,
	130, 207, 208, 0, 161, 117, 194, 152, 0, 91,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	128, 103, 131, 0, 0, 173, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	200, 0, 0, 0, 159, 0, 107, 0, 179, 119,
	0, 129, 0, 0, 0, 0, 0, 0, 109, 0,
	166, 153, 191, 0, 154, 164, 132, 183, 160, 190,
	201, 202, 181, 199, 168, 99, 147, 89, 158, 165,
	0, 108, 0, 213, 214, 215, 216, 217, 218, 219,
	92, 180, 189, 105, 169, 95, 187, 176, 178, 138,
	124, 125, 171, 93, 94, 0, 163, 114, 157, 118,
	113, 150, 177, 141, 184, 185, 110, 210, 112, 111,
	175, 100, 197, 198, 97, 101, 196, 146, 151, 149,
	195, 182, 188, 139, 136, 0, 96, 186, 137, 135,
	127, 0, 116, 120, 155, 134, 156, 121, 143, 142,
	144, 0, 148, 0, 0, 0, 0, 174, 193, 211,
	212, 0, 0, 0, 203, 204, 205, 206, 0, 0,
	0, 145, 102, 122, 170, 126, 133, 162, 209, 0,
	167, 106, 192, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 90, 98, 130, 207, 208, 0, 161, 117,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103,
}

var yyPact = [...]int{
	2378, -1000, -204, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1251, 1296, -1000, -1000, -1000, -1000, -1000, -1000, 1068,
	212, 336, 344, 231, 12937, 343, 2358, 13485, -1000, 132,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 981, -1000, -1000,
	-1000, -1000, -1000, 1219, 1249, 1048, 1231, 1124, -1000, 6879,
	299, 11290, 12663, 5764, -1000, 835, -174, 322, 13211, 297,
	297, 13211, 297, -1000, -69, 337, 13485, -1000, 13485, 293,
	831, 293, 293, 293, 13485, -1000, 407, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13485, 801, 1156, 305, 3650, 3650, 3650, 3650, 204, 3650,
	0, 1093, -1000, -1000, -1000, -1000, 3650, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 751, 1164, 7444,
	7444, 1251, -1000, 981, -1000, -1000, -1000, 1153, -1000, -1000,
	582, 1268, -1000, 8548, 404, -1000, 7444, 85, 954, -1000,
	-1000, 954, -1000, -1000, 388, -1000, -1000, 7996, 7996, 7996,
	7996, 7996, 7996, 7996, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 954, -1000,
	7168, 954, 954, 954, 954, 954, 954, 954, 954, 7444,
	954, 954, 954, 954, 954, 954, 954, 954, 954, 1915,
	954, 954, 954, 954, 12386, 974, 1185, -1000, -1000, -1000,
	1182, 9370, 10192, 13485, 916, -1000, 962, 5462, -34, -1000,
	-1000, -1000, 526, 9918, -1000, -1000, -1000, 1155, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 888, -1000, 2152, 340, -1000, -1000,
	13485, 973, 799, 544, 797, 1090, 13485, -1000, 12112, 3650,
	315, 13485, 1173, 1089, 13485, 792, 790, -1000, 5160, -1000,
	3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650, -1000, -1000,
	-1000, -1000, -1000, -1000, 3650, 3650, -1000, 29, -1000, 13485,
	-1000, -1000, -1000, -1000, 1291, 444, 730, 397, 965, -1000,
	589, 1219, 751, 1124, 9644, 971, -1000, -1000, 13485, -1000,
	7444, 7444, 637, -1000, 11838, -1000, -1000, 3952, 448, 7996,
	671, 501, 7996, 7996, 7996, 7996, 7996, 7996, 7996, 7996,
	7996, 7996, 7996, 7996, 7996, 7996, 7996, 707, 1915, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 787, -1000, 981,
	1584, 1584, 18, 18, 18, 18, 18, 18, 8272, 6327,
	751, 885, 473, 7168, 6879, 6879, 7444, 7444, 13759, 13759,
	6879, 1209, 527, 473, 13759, -1000, 751, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 75, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6879, 6879, 6879, 6879, 214, 13485,
	-1000, 13759, 11290, 11290, 11290, 11290, 11290, -1000, 1113, 1110,
	-1000, 1106, 1104, 1117, 13485, -1000, 883, 9370, 371, 954,
	-1000, 11564, -1000, -1000, 214, 943, 11290, 13485, -1000, -1000,
	4858, 962, -34, 949, -1000, -22, -26, 6051, 418, -1000,
	-1000, -1000, -1000, 3046, 453, 1711, -113, 30, -1000, -1000,
	-1000, -1000, 1012, -1000, 1012, 229, 1012, 1012, 1012, -1000,
	1012, 1012, 66, 66, 66, 66, 66, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1066, 1061, -1000, 1012, 1012, 1012,
	-1000, 1012, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1045, 247, 1045, 1016, 1016, -1000, -1000, 13211,
	1180, -94, 783, 3650, 1167, 3650, 13485, -1000, 1992, 13485,
	-1000, 13485, -1000, -1000, 13485, 3650, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 469, -1000, -1000, -1000, -1000, 1118, 7444, 7444, 4556,
	7444, -1000, -1000, -1000, 1164, -1000, 1209, 1245, -1000, 1146,
	1145, 6879, -1000, -1000, 448, 475, -1000, -1000, 599, -1000,
	-1000, -1000, -1000, 392, 954, -1000, 1932, -1000, -1000, -1000,
	-1000, 671, 7996, 7996, 7996, 1864, 1932, 1896, 160, 15,
	18, -1, -1, 22, 22, 22, 22, 22, 642, 642,
	-1000, -1000, -1000, -1000, 751, -1000, -1000, -1000, 751, 6879,
	961, -1000, -1000, 7444, -1000, 751, 872, 872, 528, 523,
	970, -1000, 384, 933, 872, 6879, 543, -1000, 7444, 751,
	-1000, -1000, 872, 751, 872, 872, 959, 954, -1000, 972,
	-1000, 525, 1185, 1073, 1088, 1527, -1000, -1000, -1000, -1000,
	1108, -1000, 1013, -1000, -1000, -1000, -1000, -1000, 338, 331,
	330, 13211, -1000, 1259, 11290, 960, -1000, -1000, 949, -34,
	28, -1000, -1000, -1000, -1000, 473, -1000, -1000, 766, 948,
	2744, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1060,
	1087, 13211, 266, 283, 398, 385, 755, -1000, -1000, -1000,
	571, -1000, 13211, 1290, -1000, -1000, 265, -1000, 263, 954,
	733, 13485, 122, 1055, 209, -1000, -207, -1000, 23, -1000,
	-1000, 719, 66, 66, 1012, 66, 66, 66, -1000, -1000,
	418, 1151, 418, 418, 418, 418, 727, 727, -123, -123,
	-1000, -1000, -1000, 703, 1045, -1000, -1000, -1000, 702, -1000,
	1044, 981, -1000, 4254, -1000, -1000, -1000, -1000, -1000, 1179,
	-1000, 980, 769, 382, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 210, 347, -1000, 3650, -1000,
	555, 13485, 13485, 1135, 473, 473, 380, -1000, -1000, 13485,
	-1000, -1000, -1000, -1000, 920, -1000, -1000, -1000, 3348, 6879,
	-1000, 1864, 1932, 1831, -1000, 7996, 7996, -1000, -1000, 872,
	6879, 473, -1000, -1000, -1000, 649, 707, 649, 7996, 7996,
	4556, 7996, 7996, -87, 918, 530, -1000, 7444, 715, -1000,
	-1000, -1000, -1000, -1000, 1082, 13759, 954, -1000, 9096, 13211,
	1251, 13759, 7444, 7444, -1000, -1000, 7444, 1039, -1000, 7444,
	-1000, -1000, -1000, 954, 954, 954, 829, -1000, 1251, 960,
	-1000, -1000, -1000, -50, -56, -1000, -1000, 3046, -1000, 3046,
	11016, 1266, 236, 282, -1000, 752, 740, -1000, 738, -1000,
	26, -1000, 93, -36, -1000, -1000, 7444, -1000, 1025, 1178,
	-1000, 1154, 701, -183, -1000, -1000, -1000, -1000, -1000, -1000,
	954, 1021, 1019, -1000, -1000, -1000, -1000, 839, 418, 418,
	66, 418, 418, 418, -1000, 471, -1000, -1000, -1000, -1000,
	870, -1000, 862, -1000, 99, 95, -1000, 927, -1000, 858,
	13485, 13211, -1000, 922, -1000, 524, 1214, 177, -1000, 245,
	-1000, 13211, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13211, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 13485, -1000, -1000, -1000, -1000, -1000, 13211, 241,
	-1000, -1000, 725, 7444, -1000, -1000, -1000, 4254, -1000, 1259,
	11290, -1000, -1000, 751, -1000, 7996, 1932, 1932, -1000, -1000,
	751, 1012, 1012, -1000, 1012, 1016, -1000, -1000, 1012, 121,
	1012, 119, 751, 751, 217, 1695, -1000, 147, 1356, 954,
	-81, -1000, 473, 7444, -1000, 1162, 893, 896, -1000, -1000,
	6603, 751, 856, 364, 829, 1219, -1000, 473, 473, 473,
	10466, 473, 10466, 10466, 10466, 8822, 13211, 1219, -1000, -1000,
	-1000, -1000, 2744, -1000, 823, -1000, 1012, 1012, 335, 335,
	261, 260, -1000, -1000, -1000, -1000, -174, -1000, 954, -1000,
	547, 10466, -157, -1000, 913, -1000, 232, 751, -1000, 698,
	-1000, 648, -1000, -1000, -1000, 418, -1000, -1000, -1000, -1000,
	-1000, 66, 724, 66, 10, -5, 699, -1000, 695, 946,
	1080, 4254, 3046, 303, 1332, -1000, -1000, 13211, -1000, -1000,
	-1000, 1010, -1000, -1000, -1000, -1000, 1166, 13211, -1000, -1000,
	473, 1255, 897, -1000, 1932, -1000, -1000, 233, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 7996, 7996, -1000,
	7996, 7996, 7996, 751, 721, 473, 235, -1000, 954, -1000,
	-1000, 953, 13211, 13211, -1000, -1000, 820, -1000, -1000, 814,
	814, 814, 371, -1000, -1000, 1001, 11016, 1174, -1000, 1078,
	-1000, -1000, 570, 168, 1076, 13211, -174, -1000, 7444, 183,
	812, 1004, 692, 74, -123, -1000, -1000, -1000, -1000, -1000,
	-1000, 418, -1000, 418, -1000, -1000, 830, 824, 11016, 13211,
	13485, -1000, -1000, 13211, -1000, -1000, -1000, -1000, -1000, 1003,
	10466, 954, 281, 1253, 1244, -1000, -1000, 118, 118, 118,
	118, 49, -1000, -1000, 1282, -1000, 954, -1000, 981, 362,
	-1000, 13211, -1000, -1000, -1000, -1000, -1000, -1000, 919, 109,
	-1000, 736, 505, 613, 494, 492, 488, 484, 461, 457,
	456, -1000, -1000, 1280, -1000, -1000, 1274, 991, -1000, 989,
	547, -1000, -84, -1000, -1000, 808, -1000, -1000, -1000, -1000,
	-1000, -1000, 807, 988, 987, 868, -1000, 11016, 805, 202,
	226, -1000, 7444, 7444, -1000, -1000, -1000, -1000, 751, 151,
	-133, 13759, 896, 751, 13211, -1000, -1000, -126, 919, 13211,
	-1000, 687, -1000, -1000, 612, 676, 612, 612, 612, 612,
	612, 335, 335, 13211, 11016, -1000, -1000, 149, -1000, -179,
	11016, 11016, -93, 13211, 7444, 796, 973, 782, -1000, 13211,
	986, 473, 876, -1000, 1127, -91, -137, 844, -1000, -1000,
	780, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 777, 775, -1000, 130, 705,
	626, 617, 614, -14, -1000, 1222, 1259, 984, 772, 765,
	-1000, -201, -1000, 473, -1000, -94, -1000, 202, 1144, 11016,
	-1000, 1121, -1000, -1000, 919, 238, -95, 611, -1000, 594,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10740, 1001, 10466,
	1259, 1001, 7444, -1000, -1000, 196, 762, -97, -1000, 13485,
	982, -1000, -1000, -1000, 359, -1000, 760, 1001, -1000, 473,
	193, -1000, -134, 967, 919, 4254, -1000, -1000, 954, -138,
	13211, 750, -1000, 7720, -1000, 744, -1000, 118, 751, -1000,
	-1000, -1000,
}

var yyPgo = [...]int{
	0, 1551, 33, 787, 1543, 1523, 1520, 1519, 1518, 1517,
	1513, 1512, 1511, 1510, 1508, 1506, 1505, 1503, 1501, 1498,
	1496, 1494, 1493, 1491, 503, 1490, 1488, 1487, 76, 1486,
	86, 1485, 1484, 49, 65, 47, 46, 1096, 1483, 32,
	75, 87, 1481, 52, 1479, 1477, 93, 1476, 73, 1475,
	1474, 507, 1470, 1469, 18, 5, 1465, 53, 1464, 1460,
	88, 673, 1459, 1443, 1441, 1439, 1438, 1431, 56, 8,
	13, 19, 22, 1430, 30, 17, 1429, 55, 1428, 1427,
	1424, 1423, 39, 1421, 59, 16, 26, 58, 1418, 14,
	1414, 68, 43, 27, 12, 91, 66, 1413, 40, 78,
	54, 1412, 1409, 661, 1408, 1407, 1405, 1398, 1394, 1393,
	549, 678, 1392, 1390, 1389, 48, 0, 284, 67, 83,
	1388, 50, 1386, 1250, 84, 74, 24, 1383, 89, 204,
	45, 1382, 1380, 42, 80, 1379, 90, 82, 1378, 1377,
	1374, 1373, 1372, 977, 28, 611, 158, 1366, 1361, 1360,
	10, 61, 29, 51, 60, 1359, 1358, 1357, 44, 1356,
	23, 15, 2, 57, 1355, 1351, 1350, 1349, 37, 41,
	1348, 20, 11, 6, 3, 1345, 4, 1343, 1, 1337,
	21, 1332, 9, 1331, 7, 1328, 1326, 1325, 1324, 1322,
	1321, 1319, 1317, 1316, 1314, 25, 36, 31, 1311, 1309,
	70, 202, 1307, 1306, 1305, 1304, 95,
}

var yyR1 = [...]int{
	0, 198, 199, 199, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 202,
	202, 46, 46, 91, 91, 10, 10, 10, 10, 96,
	96, 100, 100, 100, 101, 101, 101, 101, 131, 131,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 186,
	186, 186, 187, 187, 187, 187, 187, 187, 189, 189,
	190, 190, 121, 121, 184, 184, 183, 182, 182, 181,
	181, 180, 191, 191, 16, 165, 166, 166, 166, 166,
	166, 154, 135, 135, 135, 135, 135, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 196, 196, 196,
	196, 196, 196, 196, 196, 193, 193, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 144, 144, 144, 144, 144, 192, 192, 188, 188,
	188, 188, 188, 139, 139, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 138, 138, 138, 138, 138,
	138, 138, 138, 140, 140, 140, 140, 140, 140, 140,
	140, 136, 136, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 142, 142, 142, 142,
	142, 142, 142, 142, 153, 153, 143, 143, 151, 151,
	152, 152, 152, 150, 150, 150, 147, 147, 148, 148,
	149, 149, 149, 145, 145, 145, 146, 146, 146, 156,
	173, 173, 173, 175, 175, 176, 176, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 164, 164,
	197, 197, 170, 170, 170, 170, 170, 170, 170, 170,
	163, 163, 172, 172, 171, 171, 158, 158, 158, 158,
	158, 159, 160, 160, 160, 160, 157, 157, 195, 195,
	195, 161, 161, 162, 162, 167, 167, 167, 168, 168,
	168, 169, 169, 169, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 203, 203, 204,
	204, 204, 204, 204, 204, 204, 179, 177, 177, 178,
	178, 13, 14, 14, 14, 14, 14, 15, 15, 17,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 108, 108, 105, 105, 106, 106, 107,
	107, 107, 109, 109, 109, 132, 132, 132, 19, 19,
	21, 21, 22, 23, 20, 20, 20, 20, 20, 205,
	24, 25, 25, 26, 26, 26, 30, 30, 30, 28,
	28, 29, 29, 35, 35, 34, 34, 36, 36, 36,
	36, 120, 120, 120, 119, 119, 38, 38, 39, 39,
	40, 40, 41, 41, 41, 53, 53, 89, 89, 89,
	92, 92, 42, 42, 42, 42, 43, 43, 44, 44,
	45, 45, 127, 127, 126, 126, 126, 125, 125, 47,
	47, 47, 49, 48, 48, 48, 48, 50, 50, 52,
	52, 51, 51, 54, 54, 54, 54, 55, 55, 90,
	90, 37, 37, 37, 37, 37, 37, 37, 104, 104,
	57, 57, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 67, 67, 67, 67, 67, 67, 58, 58,
	58, 58, 58, 58, 58, 33, 33, 68, 68, 68,
	74, 69, 69, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 65, 65, 65, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 206, 206, 66, 66, 66, 66, 31, 31,
	31, 31, 31, 130, 130, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 134,
	134, 134, 134, 134, 134, 134, 78, 78, 32, 32,
	76, 76, 77, 79, 79, 75, 75, 75, 60, 60,
	60, 60, 60, 60, 60, 60, 62, 62, 62, 80,
	80, 81, 81, 82, 82, 83, 83, 84, 85, 85,
	85, 86, 86, 86, 86, 87, 87, 87, 59, 59,
	59, 59, 59, 59, 88, 88, 88, 88, 93, 93,
	70, 70, 72, 72, 71, 73, 94, 94, 98, 95,
	95, 99, 99, 99, 99, 97, 97, 97, 122, 122,
	122, 102, 102, 110, 110, 111, 111, 103, 103, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 113,
	113, 113, 114, 114, 117, 117, 118, 118, 123, 123,
	124, 124, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 200, 201, 128, 129,
	129, 129,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 13, 13, 14, 6, 5, 5, 5, 11, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 1, 3, 3, 3,
	3, 2, 3, 1, 1, 1, 1, 2, 2, 3,
	2, 4, 4, 2, 2, 3, 2, 3, 2, 6,
	7, 3, 3, 6, 5, 8, 7, 3, 2, 2,
	2, 2, 2, 2, 4, 1, 2, 0, 4, 3,
	4, 3, 3, 3, 3, 3, 3, 3, 2, 4,
	6, 2, 3, 2, 3, 1, 0, 2, 0, 3,
	3, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 2, 2,
	2, 1, 1, 1, 3, 3, 2, 1, 2, 1,
	1, 1, 1, 4, 4, 4, 4, 4, 1, 5,
	2, 2, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 3, 3, 0, 1, 0, 1,
	0, 2, 1, 0, 3, 3, 0, 1, 2, 5,
	0, 1, 4, 1, 2, 1, 3, 2, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	1, 1, 2, 3, 3, 2, 3, 2, 3, 4,
	1, 1, 1, 3, 3, 2, 1, 4, 4, 7,
	7, 13, 1, 1, 2, 2, 8, 12, 0, 1,
	1, 0, 1, 1, 3, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 11, 13, 7, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 3, 8,
	8, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 4, 3, 3,
	3, 3, 4, 3, 6, 4, 2, 4, 2, 2,
	2, 2, 3, 1, 1, 0, 1, 0, 1, 0,
	2, 2, 0, 2, 2, 0, 1, 1, 2, 1,
	1, 2, 1, 1, 2, 2, 2, 2, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 7, 1, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 0,
	4, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 3,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 6, 8, 8, 6, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 1, 2, 1, 2, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}

var yyChk = [...]int{
	-1000, -198, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	112, 113, 115, 114, 143, 116, 136, 48, 171, 172,
	174, 175, 25, 137, 138, 141, 142, -200, 8, 274,
	52, -199, 307, -82, 15, -26, 5, -24, -205, -24,
	-24, -24, -24, -24, -165, 52, -121, -191, 151, 266,
	118, 133, 119, 134, 70, -103, 121, 123, 119, 119,
	120, 121, 266, 118, 119, -51, -123, 55, -116, 158,
	283, 20, 171, 184, 185, 176, 217, 205, 284, 156,
	202, 206, 253, 306, 64, 174, 262, 127, 162, 139,
	197, 200, 199, 191, 188, 27, 223, 290, 190, 130,
	224, 228, 254, 281, 181, 182, 256, 221, 31, 132,
	285, 33, 147, 257, 226, 220, 215, 219, 180, 214,
	37, 194, 230, 229, 231, 252, 208, 157, 233, 210,
	192, 209, 18, 142, 145, 225, 227, 189, 159, 125,
	149, 289, 258, 187, 146, 160, 141, 261, 155, 175,
	255, 183, 264, 36, 238, 201, 178, 193, 179, 129,
	172, 153, 212, 148, 195, 196, 218, 177, 213, 173,
	150, 143, 263, 239, 291, 211, 207, 203, 204, 154,
	121, 151, 152, 245, 246, 247, 248, 286, 287, 259,
	198, 240, 241, 164, 165, 166, 167, 168, 169, 170,
	119, 106, 206, 112, 243, 120, 31, 149, -132, 119,
	-105, 152, 245, 246, 247, 248, 55, 255, 254, 249,
	-123, 173, -128, -128, -128, -128, -128, -2, -86, 17,
	16, -5, -3, -200, 6, 20, 21, -30, 38, 39,
	-25, -36, 97, -37, -123, -56, 72, -61, 28, 55,
	-116, 23, -60, -57, -75, -73, -74, 106, 107, 95,
	96, 103, 73, 108, -65, -63, -64, -66, 57, 56,
	65, 58, 59, 60, 61, 66, 67, 68, -117, -71,
	-200, 42, 43, 275, 276, 277, 278, 282, 279, 75,
	32, 265, 273, 272, 271, 269, 270, 267, 268, 305,
	124, 266, 101, 274, -103, -39, -40, -41, -42, -53,
	-74, -200, -51, 11, -46, -51, -95, -131, 173, -99,
	255, 254, -118, -97, -117, -115, 253, 206, 252, 55,
	-116, 117, 293, 71, 22, 24, 236, 242, 74, 106,
	16, 75, 302, 303, 105, 275, 112, 46, 267, 268,
	265, 277, 278, 266, 243, 28, 10, 25, 137, 21,
	99, 114, 78, 79, 140, 23, 138, 68, 19, 49,
	131, 11, 292, 13, 14, 294, 124, 123, 90, 304,
	120, 44, 8, 108, 26, 87, 40, 135, 42, 88,
	17, 269, 270, 30, 282, 144, 101, 47, 34, 72,
	66, 50, 260, 70, 15, 45, 133, 89, 115, 274,
	43, 118, 6, 280, 29, 136, 41, 119, 244, 77,
	122, 67, 5, 134, 9, 48, 51, 271, 272, 273,
	32, 76, 12, 69, -166, -154, 55, -195, 302, 303,
	121, -117, -111, 124, -111, -117, -111, 274, 119, -51,
	-51, -110, 124, 55, -110, -110, -110, -51, 109, -51,
	55, 29, 266, 55, 149, 119, 150, 121, -129, -200,
	-118, -129, -129, -129, 153, 154, -129, -106, 250, 50,
	-129, -201, 54, -87, 19, 30, -37, -123, -83, -84,
	-37, -82, -2, -24, 34, -28, 21, 63, 11, -120,
	71, 70, 87, -119, 22, -117, 57, 109, -37, -58,
	90, 72, 88, 89, 74, 92, 91, 102, 95, 96,
	97, 98, 99, 100, 101, 93, 94, 105, 305, 80,
	81, 82, 83, 84, 85, 86, -104, -200, -74, -200,
	110, 111, -61, -61, -61, -61, -61, -61, -61, -200,
	-2, -69, -37, -200, -200, -200, -200, -200, -200, -200,
	-200, -200, -78, -37, -200, -206, -200, -206, -206, -206,
	-206, -206, -206, -206, -134, 106, 206, 139, 197, -137,
	-136, 212, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 205, 284, -200, -200, -200, -200, -52, 26,
	-51, 29, 53, -47, -49, -48, -50, 40, 44, 46,
	41, 42, 43, 47, -127, 22, -39, -200, -126, 145,
	-125, 22, -123, 57, -51, -46, -202, 53, 11, 51,
	53, -95, 173, -96, -100, 256, 258, 80, -122, -117,
	57, 28, 29, 54, 53, -155, -135, -139, -136, -141,
	-140, -142, -137, -138, 202, 206, 203, 208, 209, 210,
	106, 207, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 221, 222, 211, 223, 29, 139, 195, 196, 197,
	200, 199, 201, 198, 224, 225, 226, 227, 228, 229,
	230, 231, 187, 188, 190, 191, 192, 194, 193, 120,
	-51, -184, 51, 55, 72, 55, 50, -51, -51, 260,
	-129, 122, -51, 23, 50, -51, 55, 55, -124, -123,
	-115, -129, -129, -129, -129, -129, -129, -129, -129, -129,
	-129, -108, 244, 251, -51, 9, 90, 53, 18, 109,
	53, -85, 24, 25, -86, -201, -30, -62, -117, 58,
	61, -29, 41, -51, -37, -37, -67, 66, 72, 67,
	68, -119, 97, -124, -118, -115, -61, -68, -71, -74,
	62, 90, 88, 89, 74, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-130, 55, 57, -134, 55, -60, -60, -117, -35, 21,
	-34, -36, -201, 53, -201, -2, -34, -34, -37, -37,
	-75, -117, -123, -75, -34, -28, -76, -77, 76, -75,
	-201, 204, -34, -35, -34, -34, -91, 145, -51, -94,
	-98, -75, -40, -41, -41, -40, -41, 40, 40, 40,
	45, 40, 45, 40, -48, -123, -201, -54, 48, 123,
	49, -200, -125, -91, 51, -39, -51, -99, -96, 53,
	257, 259, 260, 50, 69, -37, -146, 106, 105, -167,
	-168, -169, -118, 57, 58, -154, -156, -158, -157, -170,
	-159, 127, 125, 129, 130, 134, -163, 120, 135, 66,
	72, -196, 127, 50, 236, 242, 125, 135, 134, 306,
	64, 128, 292, 294, 28, -149, 308, 232, -147, 239,
	-143, 52, -143, -143, 204, -143, -143, -143, -143, -143,
	-145, 206, -145, -145, -145, -145, 52, 52, -143, -143,
	-143, -143, -151, 52, 189, -151, -151, -152, 52, -152,
	-117, 22, -182, 286, -183, 55, -129, 23, -129, -51,
	-112, 117, 114, 115, -179, 113, 236, 206, 64, 28,
	15, 275, 145, 291, 55, 146, -51, -51, -51, -129,
	-107, 11, 90, 36, -37, -37, -124, -84, -87, -102,
	19, 11, 32, 32, -34, 66, 67, 68, 109, -200,
	-68, -61, -61, -61, -33, 140, 71, -201, -201, -34,
	53, -37, -201, -201, -201, 53, 51, 22, 53, 11,
	109, 53, 11, -201, -34, -79, -77, 78, -37, -201,
	-201, -201, -201, -201, -59, 29, 32, -2, -200, -200,
	-55, 53, 12, 80, -44, -43, 50, 51, -45, 50,
	-43, 40, 40, 120, 120, 120, -92, -117, -55, -39,
	-55, -100, -101, 261, 258, 264, 55, 53, -169, 80,
	52, 50, -161, -117, 135, -163, -163, 55, -163, 55,
	55, 66, -117, 9, 135, 135, -200, 57, -123, -193,
	293, 16, 52, 57, 58, 59, 66, -144, 65, -57,
	233, 265, 268, 267, 309, -148, 240, 58, -145, -145,
	-143, -145, -145, -145, -146, 29, -146, -146, -146, -146,
	-153, 57, -153, -150, 286, 287, -150, 58, -151, 58,
	50, 51, -2, -181, -180, -118, -186, 22, -128, -121,
	-204, 151, 126, 131, 130, 55, 125, 129, 145, -185,
	151, 126, 127, 131, 130, 55, 120, 135, 125, 129,
	145, 134, -113, -114, 122, 22, 120, 135, 145, 117,
	-129, -109, 88, 12, -123, -123, 37, 109, -51, -38,
	11, 97, -118, -35, -33, 71, -61, -61, -201, -36,
	-133, 106, 202, 139, 197, 191, 221, 222, 208, 238,
	195, 239, -130, -133, -61, -61, -118, -61, -61, 283,
	-82, 79, -37, 77, -93, 50, -94, -70, -72, -71,
	-200, -2, -88, -117, -92, -82, -98, -37, -37, -37,
	52, -37, -200, -200, -200, -201, 53, -82, -55, 258,
	262, 263, -168, -169, -172, -171, -117, 135, 10, 9,
	131, 125, 55, 55, 55, -195, 134, -196, 306, -144,
	-37, 52, 22, 28, 58, -188, 305, -200, -143, 52,
	-143, 52, 54, -146, -146, -145, -146, -146, -146, 55,
	106, 54, 53, 54, 195, 195, 53, 54, 53, -51,
	-117, 53, 80, -187, 19, 159, 160, -203, 120, 135,
	-128, -117, -128, -117, -51, -128, -117, 127, -158, 57,
	-37, -55, -39, -201, -61, -201, -143, -143, -143, -152,
	-143, 182, -143, 182, -201, -201, -201, 53, 19, -201,
	53, 19, -200, -32, 280, -37, 27, -93, 53, -201,
	-201, -201, 53, 109, -201, -86, -89, -117, 135, -89,
	-89, -89, -126, -117, -86, 54, 53, -143, -143, -160,
	155, 156, 29, 157, -160, 135, 135, -195, -200, -201,
	-89, 294, 53, 206, 196, 234, 212, -201, 54, 54,
	-146, -145, 57, -145, 241, 241, 58, 58, 52, 51,
	50, -180, -169, 122, 20, 6, 8, 9, 10, -117,
	52, 26, -117, -80, 13, -145, 55, -61, -61, -61,
	-61, -61, -201, 57, 135, -72, 32, -2, -200, -117,
	-117, 53, 54, -201, -201, -201, -54, -173, -175, 286,
	-174, 51, 132, 64, 164, 165, 166, 167, 168, 169,
	170, -171, -85, 50, 66, 158, 50, -161, -117, -195,
	-37, -192, 157, 54, 52, 58, 204, -150, -146, -146,
	54, 54, -172, -117, -51, -162, -117, 52, -89, -200,
	125, -81, 14, 16, -201, -201, -201, -201, -31, 90,
	286, 9, -70, -2, 109, -117, -174, 286, 52, 288,
	55, -164, 80, 57, 80, 80, 80, 80, 80, 80,
	80, 9, 10, 52, 52, -201, 281, -194, 54, 54,
	52, 52, -189, 53, 51, -172, 54, -177, -178, 145,
	135, -37, -69, -201, 284, 47, 289, -94, -201, -117,
	-176, -174, -117, 58, -197, 50, 69, 58, -197, -197,
	-197, -197, -197, -160, -160, -162, -172, 54, 172, 296,
	297, 144, 298, 157, 299, 300, -90, 304, -172, -172,
	-190, 286, -117, -37, 54, -184, -201, 53, -117, 52,
	37, 285, 290, 54, 53, 54, 54, 286, 58, 16,
	58, 58, 58, 58, 297, 144, 299, 16, -55, 52,
	54, 54, 306, -182, -178, 32, -172, 37, -174, 128,
	286, 58, 58, 301, -123, -173, -89, -55, -173, -37,
	147, 54, 286, -51, 52, 109, 54, -173, 148, 289,
	52, -176, -118, -200, 290, -162, 54, -61, 144, 54,
	-201, -201,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 653, 0, 409, 409, 409, 409, 409, 409, 0,
	-2, 707, 0, 0, 0, 0, -2, 399, 400, 0,
	402, 403, 968, 968, 968, 968, 968, 0, 33, 34,
	966, 1, 3, 661, 0, 0, 413, 416, 411, 0,
	707, 0, 0, 0, 60, 0, 298, 0, 0, 705,
	705, 0, 705, 83, 0, 0, 0, 708, 0, 703,
	0, 703, 703, 703, 0, 358, 481, 728, 729, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	0, 0, 0, 0, 969, 969, 969, 969, 0, 969,
	387, 376, 378, 379, 380, 381, 969, 396, 397, 386,
	398, 401, 404, 405, 406, 407, 408, 27, 665, 0,
	0, 653, 29, 0, 409, 414, 415, 419, 417, 418,
	410, 0, 427, 431, 0, 491, 0, 496, 498, -2,
	-2, 0, 533, 534, 535, 536, 537, 0, 0, 0,
	0, 0, 0, 0, 561, 562, 563, 564, 638, 639,
	640, 641, 642, 643, 644, 645, 500, 501, 635, 685,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 626,
	0, 592, 592, 592, 592, 592, 592, 592, 592, 0,
	0, 0, 0, 0, 0, 0, 438, 440, 441, 442,
	462, 0, 464, 0, 0, 41, 45, 0, 935, 689,
	-2, -2, 0, 0, 726, 727, -2, 847, -2, 724,
	725, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 0, 96, 0, 0, 299, 300,
	0, 84, 0, 0, 0, 0, 0, 93, 0, 969,
	0, 0, 0, 0, 0, 0, 0, 357, 0, 359,
	969, 969, 969, 969, 969, 969, 969, 969, 368, 970,
	971, 369, 370, 371, 969, 969, 373, 0, 388, 0,
	382, 28, 967, 22, 0, 0, 662, 0, 654, 655,
	658, 661, 27, 416, 0, 421, 420, 412, 0, 428,
	0, 0, 0, 432, 0, 434, 435, 0, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 518,
	519, 520, 521, 522, 523, 524, 497, 0, 511, 0,
	0, 0, 553, 554, 555, 556, 557, 558, 0, 423,
	27, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 419, 0, 627, 0, 583, 0, 584, 585, 586,
	587, 588, 589, 590, 591, 619, 0, 621, 622, 623,
	624, 625, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 191, 192, 0, 423, 0, 0, 43, 0,
	480, 0, 0, 0, 0, 0, 0, 469, 0, 0,
	472, 0, 0, 0, 0, 463, 0, 0, 483, 900,
	465, 0, 467, 468, -2, 0, 0, 0, 39, 40,
	0, 46, 935, 48, 49, 0, 0, 0, 246, 698,
	699, 700, 696, 305, 0, 101, 240, 236, 103, 104,
	105, 106, 226, 164, 226, 226, 226, 226, 226, 198,
	226, 226, 243, 243, 243, 243, 243, 207, 208, 209,
	210, 211, 212, 213, 0, 0, 183, 226, 226, 226,
	187, 226, 189, 190, 216, 217, 218, 219, 220, 221,
	222, 223, 228, 228, 228, 230, 230, 181, 182, 0,
	0, 87, 0, 969, 0, 969, 0, 94, 0, 0,
	324, 0, 352, 704, 0, 969, 355, 356, 482, 730,
	731, 360, 361, 362, 363, 364, 365, 366, 367, 372,
	375, 389, 383, 384, 377, 666, 0, 0, 0, 0,
	0, 657, 659, 660, 665, 30, 419, 0, 646, 0,
	0, 0, 422, 25, 492, 493, 495, 512, 0, 514,
	516, 433, 429, 0, 636, -2, 502, 503, 527, 528,
	529, 0, 0, 0, 0, 525, 507, 0, 538, 539,
	540, 541, 542, 543, 544, 545, 546, 547, 548, 549,
	552, 603, 604, 560, 0, 550, 551, 559, 0, 0,
	424, 425, 530, 0, 684, 27, 0, 0, 0, 0,
	0, 635, 0, 0, 0, 0, 633, 630, 0, 0,
	593, 620, 0, 0, 0, 0, 0, 0, 479, 487,
	686, 0, 439, 458, 460, 0, 455, 470, 471, 473,
	0, 475, 0, 477, 478, 443, 444, 445, 0, 0,
	0, 0, 466, 487, 0, 487, 42, 690, 47, 0,
	0, 52, 53, 691, 692, 693, 694, 247, 0, 95,
	306, 308, 311, 312, 313, 97, 98, 99, 100, 0,
	286, 301, 0, 0, 0, 0, 0, 280, 281, 108,
	0, 110, 0, 0, 113, 114, 0, 116, 118, 0,
	0, 0, 0, 0, 0, 107, 0, 242, 238, 237,
	163, 0, 243, 243, 226, 243, 243, 243, 200, 201,
	246, 0, 246, 246, 246, 246, 0, 0, 233, 233,
	186, 188, 175, 0, 228, 177, 178, 179, 0, 180,
	0, 0, 65, 0, 85, 86, 66, 706, 67, 69,
	968, 82, 0, 719, 325, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 0, 0, 351, 969, 354,
	392, 0, 0, 0, 663, 664, 0, 656, 23, 0,
	701, 702, 647, 648, 436, 513, 515, 517, 0, 423,
	504, 525, 508, 0, 505, 0, 0, 499, 565, 0,
	0, 532, -2, 568, 569, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 653, 0, 631, 0, 0, 582,
	594, 595, 596, 597, 678, 0, 0, -2, 0, 0,
	653, 0, 0, 0, 452, 459, 0, 0, 453, 0,
	454, 474, 476, 0, 0, 0, 0, 450, 653, 487,
	38, 50, 51, 0, 0, 57, 248, 0, 309, 0,
	0, 0, 0, 302, 272, 0, 0, 275, 0, 277,
	298, 109, 0, 0, 115, 117, 0, 121, 122, 0,
	135, 0, 0, 158, 128, 129, 130, 131, 132, 133,
	0, 226, 226, 155, 241, 102, 239, 0, 246, 246,
	243, 246, 246, 246, 202, 0, 203, 204, 205, 206,
	0, 224, 0, 184, 0, 0, 185, 0, 176, 0,
	0, 0, -2, 88, 89, 0, 72, 0, 314, 0,
	968, 0, 339, 340, 341, 342, 343, 344, 345, 968,
	0, 326, 327, 328, 329, 330, 331, 332, 333, 334,
	335, 336, 0, 968, 720, 721, 722, 723, 0, 0,
	353, 374, 0, 0, 390, 391, 667, 0, 24, 487,
	0, 430, 637, 0, 506, 0, 526, 509, 566, 426,
	0, 226, 226, 608, 226, 230, 611, 612, 226, 614,
	226, 617, 0, 0, 0, 0, 636, 0, 0, 0,
	628, 581, 634, 0, 31, 0, 678, 668, 680, 682,
	0, 27, 0, 674, 0, 661, 687, 488, 688, 456,
	0, 461, 0, 0, 0, 464, 0, 661, 37, 54,
	55, 56, 307, 310, 0, 282, 226, 226, 0, 0,
	0, 0, 273, 274, 276, 278, 298, 111, 0, 112,
	0, 0, 0, 136, 0, 127, 0, 0, 151, 0,
	153, 0, 227, 193, 194, 246, 195, 196, 197, 244,
	245, 243, 0, 243, 0, 0, 0, 231, 0, 0,
	0, 0, 0, 0, 0, 70, 71, 0, 337, 338,
	318, 0, 319, 321, 322, 323, 0, 301, 317, 393,
	394, 649, 437, 567, 510, 570, 605, 243, 609, 610,
	613, 615, 616, 618, 572, 571, 573, 0, 0, 576,
	0, 0, 0, 0, 0, 632, 0, 32, 0, 683,
	-2, 0, 0, 0, 44, 35, 0, 447, 448, 0,
	0, 0, 483, 451, 36, 250, 0, 658, 285, 287,
	292, 293, 0, 0, 288, 301, 298, 279, 0, 156,
	0, 124, 0, 0, 233, 161, 162, 134, 152, 154,
	199, 246, 225, 246, 234, 235, 0, 0, 0, 0,
	0, 90, 91, 0, 73, 74, 75, 76, 77, 0,
	0, 0, 302, 651, 0, 606, 607, 0, 0, 0,
	0, 598, 580, 629, 0, 681, 0, -2, 0, 676,
	675, 0, 457, 484, 485, 486, 446, 249, 251, 0,
	253, 0, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 0, 294, 295, 0, 0, 302, 0,
	0, 119, 0, 123, 137, 0, 159, 160, 214, 215,
	229, 232, 0, 0, 0, 78, 303, 0, 0, 0,
	0, 26, 0, 0, 574, 575, 577, 578, 0, 0,
	0, 0, 671, 27, 0, 449, 254, 0, 0, 0,
	257, 0, 269, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 157, 0, 126, 489,
	0, 0, 80, 0, 0, 0, 84, 0, 347, 0,
	0, 652, 650, 579, 0, 0, 0, 679, -2, 677,
	0, 255, 260, 258, 261, 270, 271, 262, 263, 264,
	265, 266, 267, 289, 290, 0, 0, 125, 0, 0,
	0, 0, 0, 0, 148, 0, 487, 0, 0, 0,
	68, 0, 304, 79, 315, 87, 346, 0, 0, 0,
	599, 0, 602, 252, 0, 0, 296, 0, 139, 0,
	141, 142, 143, 144, 145, 146, 147, 0, 250, 0,
	487, 250, 0, 320, 348, 0, 0, 600, 256, 0,
	0, 138, 140, 149, 0, 61, 0, 250, 62, 81,
	0, 316, 0, 0, 0, 0, 490, 63, 0, 0,
	0, 0, 150, 0, 601, 0, 297, 0, 0, 291,
	349, 350,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	52, 54, 97, 95, 53, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 307,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 308, 3, 309, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:340
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:345
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:346
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:350
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:373
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:381
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:385
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:391
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:398
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:404
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:408
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:414
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:418
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:425
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:437
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:449
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:453
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:459
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:465
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:469
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:473
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:478
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:479
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:483
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:487
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:492
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:496
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:502
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:506
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:510
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:514
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:520
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:524
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:530
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:534
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:538
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:544
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:548
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:552
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:556
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:562
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:566
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:572
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:577
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:596
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:612
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:627
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:635
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:643
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:647
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:651
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:663
		{
			yyVAL.bytes = nil
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:667
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:671
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:676
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:680
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:684
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:688
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:692
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:696
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:701
		{
			yyVAL.expr = nil
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:705
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:710
		{
			yyVAL.expr = nil
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:714
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:719
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:723
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:728
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:732
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:738
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:743
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:748
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:754
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:759
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:765
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:770
		{
			yyVAL.bytes = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:774
		{
			yyVAL.bytes = nil
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:780
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:787
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:794
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:799
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:803
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:807
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:811
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:817
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:822
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:833
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:845
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:850
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:855
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:860
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:865
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:870
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:875
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:880
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:885
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:890
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:895
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:900
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[4].expr)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[6].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:906
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[6].expr), ConstraintName: yyDollar[3].colIdent}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:911
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:916
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:921
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:927
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:933
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:939
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:946
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:950
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:954
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:958
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:962
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:966
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:970
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[2].boolVal))
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:974
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:980
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:984
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:989
		{
			yyVAL.sequence = &Sequence{}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:993
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:998
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1003
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1008
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1013
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1018
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1023
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1028
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1033
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1038
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1043
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1048
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1053
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1060
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1064
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1068
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1072
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1076
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1081
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1085
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1090
		{
			yyVAL.bytes = nil
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1100
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1105
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1111
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1115
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1119
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1123
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1131
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1135
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1139
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1143
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1147
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1153
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1159
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1165
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1171
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1177
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1183
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1189
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1193
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1199
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1203
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1207
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1211
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1215
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1219
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1223
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1227
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1233
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1237
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1243
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1247
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1251
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1255
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1259
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1263
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1267
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1271
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1275
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1283
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1287
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1291
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1295
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1299
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1303
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1307
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1311
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1315
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1319
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1323
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1327
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1332
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1338
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1342
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1346
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1350
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1354
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1358
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1362
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1366
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1372
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1377
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1382
		{
			yyVAL.optVal = nil
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1386
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1391
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1395
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1403
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1407
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1413
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1421
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1425
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1429
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1434
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1438
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1443
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1447
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1452
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1456
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1460
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1465
		{
			yyVAL.str = ""
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1469
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1473
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1478
		{
			yyVAL.str = ""
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1482
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1486
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1492
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1497
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1501
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1505
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1511
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1515
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1521
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1525
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1531
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1535
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1540
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1544
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1548
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1552
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1556
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1560
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1564
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1568
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1572
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1578
		{
			yyVAL.str = ""
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1582
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1588
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1592
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1598
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1602
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1606
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1610
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1614
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1618
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1622
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1626
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1632
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1636
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1642
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1646
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1652
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1657
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1664
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1670
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1676
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 290:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1682
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 291:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1690
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1702
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1706
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1710
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1714
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 296:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1720
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:    &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns: yyDollar[7].indexColumns,
			}
		}
	case 297:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:1727
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:    &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns: yyDollar[7].indexColumns, Options: yyDollar[11].indexOptions,
			}
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1736
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1740
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1744
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1749
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1756
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1760
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1765
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1769
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1773
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1781
		{
			yyVAL.str = yyDollar[1].str
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1785
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1789
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1795
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1799
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1803
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1809
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 315:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:1813
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 316:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1827
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1841
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 318:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1850
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1854
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 320:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:1858
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 321:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1871
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1881
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1886
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1891
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 325:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1895
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 346:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1927
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1933
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1937
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 349:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1943
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 350:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1947
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1953
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1959
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 353:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1967
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 354:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1972
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1980
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1984
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1990
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1994
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1999
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2005
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2009
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2013
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2018
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2022
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2026
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2030
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2034
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2038
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2042
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2046
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2050
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2054
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2058
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2062
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2072
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2076
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2080
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2084
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2088
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2092
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2096
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2106
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2112
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2116
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2122
		{
			yyVAL.str = ""
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2126
		{
			yyVAL.str = "extended "
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2132
		{
			yyVAL.str = ""
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2136
		{
			yyVAL.str = "full "
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2142
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2146
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2150
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2156
		{
			yyVAL.showFilter = nil
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2160
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2164
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2170
		{
			yyVAL.str = ""
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2174
		{
			yyVAL.str = SessionStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2178
		{
			yyVAL.str = GlobalStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2184
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2188
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2194
		{
			yyVAL.statement = &Begin{}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2198
		{
			yyVAL.statement = &Begin{}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2204
		{
			yyVAL.statement = &Commit{}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2210
		{
			yyVAL.statement = &Rollback{}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2216
		{
			yyVAL.statement = &OtherRead{}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2220
		{
			yyVAL.statement = &OtherRead{}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2224
		{
			yyVAL.statement = &OtherRead{}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2228
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2232
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2237
		{
			setAllowComments(yylex, true)
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2241
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2247
		{
			yyVAL.bytes2 = nil
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2251
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2257
		{
			yyVAL.str = UnionStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2261
		{
			yyVAL.str = UnionAllStr
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2265
		{
			yyVAL.str = UnionDistinctStr
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2270
		{
			yyVAL.str = ""
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2274
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2278
		{
			yyVAL.str = SQLCacheStr
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2283
		{
			yyVAL.str = ""
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2287
		{
			yyVAL.str = DistinctStr
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2292
		{
			yyVAL.str = ""
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2296
		{
			yyVAL.str = StraightJoinHint
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2301
		{
			yyVAL.selectExprs = nil
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2305
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2311
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2315
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2321
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2325
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2329
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 430:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2333
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2338
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2342
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2346
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2353
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2358
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2362
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2368
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2372
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2382
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2386
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2390
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2396
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2400
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2406
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2411
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2415
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2421
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2425
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2438
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2442
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2446
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2450
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2456
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2458
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2462
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2464
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2468
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2470
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2473
		{
			yyVAL.empty = struct{}{}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2475
		{
			yyVAL.empty = struct{}{}
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2478
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2482
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2486
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2493
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2499
		{
			yyVAL.str = JoinStr
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2503
		{
			yyVAL.str = JoinStr
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2507
		{
			yyVAL.str = JoinStr
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2513
		{
			yyVAL.str = StraightJoinStr
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2519
		{
			yyVAL.str = LeftJoinStr
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2523
		{
			yyVAL.str = LeftJoinStr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2527
		{
			yyVAL.str = RightJoinStr
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2531
		{
			yyVAL.str = RightJoinStr
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2537
		{
			yyVAL.str = NaturalJoinStr
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2541
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2551
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2555
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2561
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2565
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2570
		{
			yyVAL.indexHints = nil
		}
	case 484:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2574
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2578
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2582
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2587
		{
			yyVAL.expr = nil
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2591
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2596
		{
			yyVAL.columns = nil
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2600
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2606
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2610
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2614
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2618
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2622
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2626
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2630
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2636
		{
			yyVAL.str = ""
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2640
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2646
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2650
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2656
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2660
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2664
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2668
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2672
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2676
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2680
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 509:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2684
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 510:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2688
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2692
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2698
		{
			yyVAL.str = IsNullStr
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2702
		{
			yyVAL.str = IsNotNullStr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2706
		{
			yyVAL.str = IsTrueStr
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2710
		{
			yyVAL.str = IsNotTrueStr
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2714
		{
			yyVAL.str = IsFalseStr
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2718
		{
			yyVAL.str = IsNotFalseStr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2724
		{
			yyVAL.str = EqualStr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2728
		{
			yyVAL.str = LessThanStr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2732
		{
			yyVAL.str = GreaterThanStr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2736
		{
			yyVAL.str = LessEqualStr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2740
		{
			yyVAL.str = GreaterEqualStr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2744
		{
			yyVAL.str = NotEqualStr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2748
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2753
		{
			yyVAL.expr = nil
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2757
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2763
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2767
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2771
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2777
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2783
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2787
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2793
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2797
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2801
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2805
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2809
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2813
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2817
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2821
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2825
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2829
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2833
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2837
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2841
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2845
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2849
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2853
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2857
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2861
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2865
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2869
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2873
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2877
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2881
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2889
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2903
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2907
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2911
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2919
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2933
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 566:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2937
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 567:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2941
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2951
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2955
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 570:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2959
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 571:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2963
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 572:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2967
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 573:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2971
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 574:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2975
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 575:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2979
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 576:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2983
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 577:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2987
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 578:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2991
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 579:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:2995
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 580:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2999
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3003
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3007
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3017
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3021
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3025
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3029
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3034
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3039
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3044
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3049
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3053
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3067
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3071
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3075
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3079
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3085
		{
			yyVAL.str = ""
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3089
		{
			yyVAL.str = BooleanModeStr
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3093
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 601:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3097
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3101
		{
			yyVAL.str = QueryExpansionStr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3107
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3111
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3117
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3121
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3125
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3129
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3133
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3137
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3143
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3147
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3151
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3155
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3159
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3163
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3167
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3171
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3177
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3181
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3185
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3189
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3193
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3197
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3201
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3206
		{
			yyVAL.expr = nil
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3210
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3215
		{
			yyVAL.str = string("")
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3219
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3225
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3229
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3235
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3240
		{
			yyVAL.expr = nil
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3244
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3250
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3254
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 637:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3258
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3264
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3268
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3272
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3276
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3280
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3284
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3288
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3292
		{
			yyVAL.expr = &NullVal{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3298
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3307
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3311
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3316
		{
			yyVAL.exprs = nil
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3320
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3325
		{
			yyVAL.expr = nil
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3329
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3334
		{
			yyVAL.orderBy = nil
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3338
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3344
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3348
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3354
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3359
		{
			yyVAL.str = AscScr
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3363
		{
			yyVAL.str = AscScr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3367
		{
			yyVAL.str = DescScr
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3372
		{
			yyVAL.limit = nil
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3376
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3380
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3384
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3389
		{
			yyVAL.str = ""
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3393
		{
			yyVAL.str = ForUpdateStr
		}
	case 667:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3397
		{
			yyVAL.str = ShareModeStr
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3410
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3414
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3418
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3423
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3427
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 673:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3431
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3438
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3442
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3446
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 677:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3450
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3455
		{
			yyVAL.updateExprs = nil
		}
	case 679:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3459
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3465
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3469
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3475
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3479
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3485
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3491
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3501
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3505
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3511
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3517
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3521
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3527
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3531
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3535
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3539
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3546
		{
			yyVAL.bytes = []byte("charset")
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3553
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3557
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3561
		{
			yyVAL.expr = &Default{}
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3570
		{
			yyVAL.byt = 0
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3572
		{
			yyVAL.byt = 1
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3575
		{
			yyVAL.empty = struct{}{}
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3577
		{
			yyVAL.empty = struct{}{}
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3580
		{
			yyVAL.str = ""
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3582
		{
			yyVAL.str = IgnoreStr
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3586
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3588
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3590
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3592
		{
			yyVAL.empty = struct{}{}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3594
		{
			yyVAL.empty = struct{}{}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3596
		{
			yyVAL.empty = struct{}{}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3598
		{
			yyVAL.empty = struct{}{}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3600
		{
			yyVAL.empty = struct{}{}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3602
		{
			yyVAL.empty = struct{}{}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3604
		{
			yyVAL.empty = struct{}{}
		}
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3607
		{
			yyVAL.empty = struct{}{}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3609
		{
			yyVAL.empty = struct{}{}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3611
		{
			yyVAL.empty = struct{}{}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3615
		{
			yyVAL.empty = struct{}{}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3617
		{
			yyVAL.empty = struct{}{}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3621
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3625
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3632
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3638
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3642
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3649
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3909
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3918
		{
			decNesting(yylex)
		}
	case 968:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3923
		{
			forceEOF(yylex)
		}
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3928
		{
			forceEOF(yylex)
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3932
		{
			forceEOF(yylex)
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3936
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
