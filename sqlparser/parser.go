// Code generated by goyacc -o sqlparser/parser.go sqlparser/parser.y. DO NOT EDIT.

//line sqlparser/parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sqlparser/parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sqlparser/parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
	blockStatement       []Statement
	localVariable        *LocalVariable
	localVariables       []*LocalVariable
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const REFERENCES = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const POLICY = 57459
const WHILE = 57460
const UNIQUE = 57461
const KEY = 57462
const SHOW = 57463
const DESCRIBE = 57464
const EXPLAIN = 57465
const DATE = 57466
const ESCAPE = 57467
const REPAIR = 57468
const OPTIMIZE = 57469
const TRUNCATE = 57470
const MAXVALUE = 57471
const PARTITION = 57472
const REORGANIZE = 57473
const LESS = 57474
const THAN = 57475
const PROCEDURE = 57476
const TRIGGER = 57477
const VINDEX = 57478
const VINDEXES = 57479
const STATUS = 57480
const VARIABLES = 57481
const RESTRICT = 57482
const CASCADE = 57483
const NO = 57484
const ACTION = 57485
const PERMISSIVE = 57486
const RESTRICTIVE = 57487
const PUBLIC = 57488
const CURRENT_USER = 57489
const SESSION_USER = 57490
const PAD_INDEX = 57491
const FILLFACTOR = 57492
const IGNORE_DUP_KEY = 57493
const STATISTICS_NORECOMPUTE = 57494
const STATISTICS_INCREMENTAL = 57495
const ALLOW_ROW_LOCKS = 57496
const ALLOW_PAGE_LOCKS = 57497
const BEFORE = 57498
const AFTER = 57499
const EACH = 57500
const ROW = 57501
const SCROLL = 57502
const CURSOR = 57503
const OPEN = 57504
const CLOSE = 57505
const FETCH = 57506
const PRIOR = 57507
const FIRST = 57508
const LAST = 57509
const DEALLOCATE = 57510
const BEGIN = 57511
const START = 57512
const TRANSACTION = 57513
const COMMIT = 57514
const ROLLBACK = 57515
const BIT = 57516
const TINYINT = 57517
const SMALLINT = 57518
const SMALLSERIAL = 57519
const MEDIUMINT = 57520
const INT = 57521
const INTEGER = 57522
const SERIAL = 57523
const BIGINT = 57524
const BIGSERIAL = 57525
const INTNUM = 57526
const REAL = 57527
const DOUBLE = 57528
const PRECISION = 57529
const FLOAT_TYPE = 57530
const DECIMAL = 57531
const NUMERIC = 57532
const SMALLMONEY = 57533
const MONEY = 57534
const TIME = 57535
const TIMESTAMP = 57536
const DATETIME = 57537
const YEAR = 57538
const DATETIMEOFFSET = 57539
const DATETIME2 = 57540
const SMALLDATETIME = 57541
const CHAR = 57542
const VARCHAR = 57543
const VARYING = 57544
const BOOL = 57545
const CHARACTER = 57546
const VARBINARY = 57547
const NCHAR = 57548
const NVARCHAR = 57549
const NTEXT = 57550
const UUID = 57551
const TEXT = 57552
const TINYTEXT = 57553
const MEDIUMTEXT = 57554
const LONGTEXT = 57555
const CITEXT = 57556
const BLOB = 57557
const TINYBLOB = 57558
const MEDIUMBLOB = 57559
const LONGBLOB = 57560
const JSON = 57561
const JSONB = 57562
const ENUM = 57563
const GEOMETRY = 57564
const POINT = 57565
const LINESTRING = 57566
const POLYGON = 57567
const GEOMETRYCOLLECTION = 57568
const MULTIPOINT = 57569
const MULTILINESTRING = 57570
const MULTIPOLYGON = 57571
const ARRAY = 57572
const NOW = 57573
const GETDATE = 57574
const BPCHAR = 57575
const NULLX = 57576
const AUTO_INCREMENT = 57577
const APPROXNUM = 57578
const SIGNED = 57579
const UNSIGNED = 57580
const ZEROFILL = 57581
const ZONE = 57582
const AUTOINCREMENT = 57583
const DATABASES = 57584
const TABLES = 57585
const VITESS_KEYSPACES = 57586
const VITESS_SHARDS = 57587
const VITESS_TABLETS = 57588
const VSCHEMA_TABLES = 57589
const EXTENDED = 57590
const FULL = 57591
const PROCESSLIST = 57592
const NAMES = 57593
const CHARSET = 57594
const GLOBAL = 57595
const SESSION = 57596
const ISOLATION = 57597
const LEVEL = 57598
const READ = 57599
const WRITE = 57600
const ONLY = 57601
const REPEATABLE = 57602
const COMMITTED = 57603
const UNCOMMITTED = 57604
const SERIALIZABLE = 57605
const CURRENT_TIMESTAMP = 57606
const DATABASE = 57607
const CURRENT_DATE = 57608
const CURRENT_TIME = 57609
const LOCALTIME = 57610
const LOCALTIMESTAMP = 57611
const UTC_DATE = 57612
const UTC_TIME = 57613
const UTC_TIMESTAMP = 57614
const REPLACE = 57615
const CONVERT = 57616
const CAST = 57617
const SUBSTR = 57618
const SUBSTRING = 57619
const GROUP_CONCAT = 57620
const SEPARATOR = 57621
const INHERIT = 57622
const MATCH = 57623
const AGAINST = 57624
const BOOLEAN = 57625
const LANGUAGE = 57626
const WITH = 57627
const WITHOUT = 57628
const PARSER = 57629
const QUERY = 57630
const EXPANSION = 57631
const UNUSED = 57632
const GENERATED = 57633
const ALWAYS = 57634
const IDENTITY = 57635
const SEQUENCE = 57636
const INCREMENT = 57637
const MINVALUE = 57638
const CACHE = 57639
const CYCLE = 57640
const OWNED = 57641
const NONE = 57642
const CLUSTERED = 57643
const NONCLUSTERED = 57644
const REPLICATION = 57645
const INCLUDE = 57646
const TYPECAST = 57647
const CHECK = 57648

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	122, 129,
	-2, 119,
	-1, 36,
	155, 441,
	156, 441,
	-2, 431,
	-1, 272,
	110, 774,
	-2, 770,
	-1, 273,
	110, 775,
	-2, 771,
	-1, 343,
	81, 979,
	-2, 79,
	-1, 344,
	81, 930,
	-2, 80,
	-1, 349,
	81, 909,
	-2, 741,
	-1, 351,
	81, 953,
	-2, 743,
	-1, 663,
	52, 41,
	54, 41,
	-2, 43,
	-1, 808,
	110, 777,
	-2, 773,
	-1, 1050,
	5, 28,
	-2, 576,
	-1, 1075,
	5, 27,
	-2, 715,
	-1, 1176,
	5, 27,
	-2, 85,
	-1, 1393,
	5, 28,
	-2, 716,
	-1, 1476,
	5, 27,
	-2, 718,
	-1, 1624,
	5, 28,
	-2, 719,
	-1, 1745,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 15763

var yyAct = [...]int{
	273, 1563, 1526, 1486, 1530, 1078, 1290, 1614, 1600, 277,
	740, 589, 3, 985, 1489, 1412, 872, 268, 1399, 590,
	509, 1112, 1263, 475, 302, 1167, 784, 890, 1291, 914,
	1631, 1178, 1264, 276, 1134, 89, 980, 270, 89, 335,
	920, 657, 251, 655, 993, 1260, 1140, 913, 934, 873,
	1109, 1236, 53, 245, 1094, 833, 844, 746, 348, 250,
	1042, 66, 89, 89, 353, 975, 841, 1164, 673, 353,
	1083, 860, 353, 353, 86, 929, 810, 522, 89, 528,
	89, 909, 473, 659, 345, 672, 89, 869, 644, 1024,
	279, 342, 843, 534, 330, 275, 691, 246, 247, 248,
	249, 687, 338, 613, 542, 328, 1666, 329, 260, 339,
	1384, 337, 1148, 947, 52, 556, 264, 488, 566, 489,
	550, 950, 553, 1706, 566, 496, 1316, 1656, 568, 569,
	570, 571, 572, 573, 574, 1418, 551, 552, 549, 555,
	554, 564, 565, 557, 558, 559, 560, 561, 562, 563,
	556, 1304, 333, 566, 1425, 1556, 555, 554, 564, 565,
	557, 558, 559, 560, 561, 562, 563, 556, 476, 477,
	566, 1751, 1683, 1747, 947, 1699, 1622, 1132, 1692, 963,
	1568, 1303, 1737, 555, 554, 564, 565, 557, 558, 559,
	560, 561, 562, 563, 556, 986, 936, 566, 1660, 949,
	1567, 1168, 1169, 1383, 521, 1682, 1255, 1645, 1387, 486,
	943, 1102, 932, 502, 1101, 1621, 301, 1103, 933, 84,
	80, 81, 82, 1285, 89, 1286, 1287, 903, 353, 353,
	353, 353, 775, 353, 904, 905, 674, 517, 675, 776,
	353, 555, 554, 564, 565, 557, 558, 559, 560, 561,
	562, 563, 556, 1380, 521, 566, 559, 560, 561, 562,
	563, 556, 1442, 498, 566, 1441, 1150, 353, 531, 952,
	964, 939, 1517, 935, 944, 864, 1465, 504, 1336, 506,
	347, 941, 940, 1335, 1376, 479, 954, 1374, 483, 484,
	244, 555, 554, 564, 565, 557, 558, 559, 560, 561,
	562, 563, 556, 976, 1709, 566, 1596, 530, 503, 505,
	1528, 521, 1505, 604, 748, 749, 1346, 1347, 581, 582,
	583, 584, 585, 586, 587, 1605, 1746, 1586, 89, 75,
	513, 514, 1735, 1615, 567, 89, 89, 89, 1147, 1214,
	567, 353, 1698, 870, 1700, 1616, 1473, 353, 555, 554,
	564, 565, 557, 558, 559, 560, 561, 562, 563, 556,
	1420, 345, 566, 476, 477, 577, 1557, 639, 1351, 567,
	1144, 1419, 1146, 1145, 747, 930, 663, 70, 73, 1126,
	1125, 1415, 83, 1430, 1352, 1114, 567, 1297, 1720, 57,
	1360, 931, 71, 1429, 74, 1547, 1298, 937, 491, 1432,
	481, 891, 893, 938, 78, 1450, 1231, 1306, 754, 478,
	72, 68, 1119, 567, 59, 60, 61, 62, 63, 618,
	1093, 1691, 1431, 1092, 619, 333, 555, 554, 564, 565,
	557, 558, 559, 560, 561, 562, 563, 556, 1646, 501,
	566, 964, 1091, 738, 347, 347, 347, 347, 664, 347,
	670, 1568, 957, 945, 977, 946, 347, 564, 565, 557,
	558, 559, 560, 561, 562, 563, 556, 1620, 942, 566,
	1131, 567, 1606, 1607, 1608, 487, 892, 930, 1117, 89,
	567, 223, 77, 544, 78, 79, 89, 1215, 89, 353,
	1741, 89, 1561, 931, 89, 1396, 748, 749, 89, 1223,
	353, 353, 353, 353, 353, 353, 353, 353, 1413, 1414,
	1416, 1058, 1211, 1036, 353, 353, 579, 580, 739, 89,
	782, 567, 546, 497, 1330, 750, 1019, 751, 779, 1650,
	755, 911, 910, 758, 353, 541, 540, 539, 89, 1579,
	69, 1381, 1652, 930, 353, 557, 558, 559, 560, 561,
	562, 563, 556, 541, 1578, 566, 763, 347, 777, 931,
	1219, 1577, 1576, 678, 539, 1575, 1574, 807, 817, 1573,
	1647, 1571, 1343, 787, 811, 1331, 1081, 796, 567, 676,
	541, 685, 815, 816, 814, 1257, 809, 761, 353, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 848, 808, 1020, 853, 856, 861,
	1212, 1065, 1210, 862, 555, 554, 564, 565, 557, 558,
	559, 560, 561, 562, 563, 556, 1213, 861, 566, 606,
	607, 608, 609, 610, 611, 612, 806, 1218, 1507, 89,
	812, 789, 89, 89, 89, 89, 89, 532, 804, 1111,
	874, 743, 1122, 1054, 89, 1053, 567, 89, 1503, 1110,
	1111, 89, 1504, 1632, 618, 1693, 89, 89, 848, 619,
	353, 836, 540, 539, 1008, 838, 839, 536, 871, 1723,
	1111, 1111, 1633, 353, 1722, 567, 849, 850, 1007, 541,
	345, 480, 857, 76, 858, 1648, 1649, 1651, 1653, 1654,
	1121, 866, 1697, 915, 50, 347, 899, 1696, 1694, 898,
	266, 1033, 1034, 1035, 813, 1012, 347, 347, 347, 347,
	347, 347, 347, 347, 1006, 490, 865, 1695, 867, 868,
	347, 347, 333, 333, 333, 333, 333, 876, 877, 353,
	879, 887, 781, 353, 895, 353, 89, 333, 89, 875,
	791, 896, 878, 89, 327, 89, 333, 901, 89, 353,
	544, 900, 482, 347, 1634, 485, 918, 1630, 474, 540,
	539, 567, 982, 1003, 1000, 1001, 1259, 999, 780, 1515,
	520, 1444, 800, 802, 803, 992, 541, 997, 801, 1435,
	1443, 1312, 1014, 1151, 1015, 540, 539, 1016, 978, 979,
	834, 521, 835, 807, 840, 1572, 1010, 1013, 493, 494,
	495, 1173, 541, 1171, 854, 854, 1151, 540, 539, 1472,
	854, 555, 554, 564, 565, 557, 558, 559, 560, 561,
	562, 563, 556, 930, 541, 566, 1439, 1362, 925, 811,
	924, 808, 926, 927, 567, 1314, 1165, 1201, 928, 931,
	1136, 1137, 1138, 1039, 1040, 1041, 1128, 854, 1141, 1139,
	299, 300, 1434, 1025, 1569, 1026, 1151, 1594, 1755, 1480,
	1743, 1043, 1409, 1736, 1409, 1705, 1409, 1704, 521, 1237,
	1005, 1075, 965, 966, 967, 968, 347, 1032, 1409, 1690,
	1589, 1038, 1301, 785, 786, 353, 1594, 1689, 89, 347,
	1686, 1685, 1096, 1300, 1098, 812, 1678, 521, 1588, 1055,
	1299, 1004, 1202, 1239, 353, 1120, 1490, 1204, 1197, 1198,
	1522, 1205, 1200, 1199, 1521, 353, 1104, 1207, 1203, 1492,
	988, 1064, 1409, 1675, 915, 1047, 353, 837, 1206, 540,
	539, 1097, 1516, 1106, 1196, 89, 1480, 1612, 1436, 1088,
	1009, 1062, 1409, 1590, 1427, 983, 541, 540, 539, 347,
	760, 347, 759, 525, 529, 744, 1011, 1480, 1513, 1480,
	521, 1099, 1480, 1481, 541, 347, 1409, 1408, 1241, 742,
	547, 1142, 1246, 499, 1240, 1282, 521, 353, 333, 1238,
	1395, 521, 23, 1127, 1191, 1244, 1176, 1491, 1170, 347,
	1339, 1338, 1115, 1116, 1118, 1333, 1334, 1179, 1242, 1243,
	1333, 1332, 1048, 521, 591, 492, 1073, 353, 474, 1074,
	89, 89, 1323, 602, 641, 521, 1245, 1247, 89, 1226,
	1493, 1494, 1495, 1496, 1497, 1498, 1499, 353, 1166, 50,
	1143, 1147, 1595, 1172, 1594, 1158, 21, 1160, 1161, 1162,
	1163, 567, 1184, 846, 521, 1183, 1079, 1228, 683, 682,
	1261, 1185, 846, 1079, 1192, 1188, 1664, 1224, 1193, 1190,
	1189, 667, 1048, 1144, 74, 1146, 1145, 353, 353, 1252,
	54, 1232, 1233, 874, 1060, 1194, 23, 1391, 1267, 874,
	1262, 1187, 641, 1426, 1250, 1251, 640, 1253, 1254, 1265,
	1230, 1080, 255, 1284, 1229, 1235, 353, 1249, 353, 353,
	1248, 1095, 668, 1475, 666, 1256, 897, 808, 666, 1048,
	641, 1342, 953, 1446, 1445, 1080, 915, 1059, 915, 1272,
	347, 1271, 1270, 50, 1044, 1152, 1153, 1289, 1155, 1156,
	1157, 1113, 1057, 641, 1302, 1337, 1105, 23, 902, 1283,
	1048, 669, 1123, 1288, 555, 554, 564, 565, 557, 558,
	559, 560, 561, 562, 563, 556, 1488, 1079, 566, 1142,
	1313, 1307, 1305, 783, 257, 89, 353, 292, 291, 294,
	295, 296, 297, 89, 741, 1056, 293, 298, 353, 646,
	649, 650, 651, 647, 50, 648, 652, 353, 50, 1084,
	1085, 1564, 1748, 347, 646, 649, 650, 651, 647, 89,
	648, 652, 1703, 1680, 1340, 353, 795, 1592, 1591, 1583,
	1582, 50, 1348, 1544, 353, 1514, 1459, 89, 1349, 954,
	981, 1364, 1322, 347, 1324, 1325, 1321, 1327, 1328, 1329,
	1353, 1319, 1309, 1276, 1228, 1174, 1175, 1447, 1357, 1355,
	797, 798, 976, 347, 1133, 1108, 1361, 1084, 1085, 1261,
	970, 1490, 1717, 1358, 969, 65, 1182, 1087, 757, 1367,
	1365, 745, 518, 1090, 1492, 347, 1089, 353, 1372, 353,
	353, 353, 89, 353, 881, 880, 884, 882, 1681, 353,
	854, 885, 883, 1269, 1095, 1222, 854, 1402, 1403, 1404,
	1021, 1715, 886, 591, 650, 651, 851, 852, 1390, 915,
	353, 1417, 788, 1031, 1398, 261, 262, 333, 1106, 535,
	1030, 523, 347, 1405, 347, 1292, 1407, 1421, 1424, 1159,
	681, 500, 533, 524, 1326, 1311, 1389, 1710, 785, 786,
	990, 1460, 1491, 353, 353, 756, 1457, 1310, 1142, 1428,
	1452, 353, 1453, 1454, 1455, 1181, 984, 1422, 654, 258,
	259, 353, 535, 1179, 915, 1451, 1731, 1456, 1345, 1296,
	845, 847, 252, 1449, 1448, 1493, 1494, 1495, 1496, 1497,
	1498, 1499, 1029, 1701, 567, 1550, 863, 908, 253, 54,
	1028, 1549, 1341, 1463, 1080, 1672, 353, 353, 994, 995,
	996, 58, 1671, 1670, 1354, 1669, 1476, 537, 1437, 1581,
	353, 507, 1580, 1356, 1295, 1294, 1265, 1558, 1466, 1467,
	353, 1468, 1469, 1470, 1474, 1124, 778, 56, 1535, 8,
	1186, 1359, 1350, 1485, 1532, 7, 889, 1501, 1500, 665,
	347, 1508, 1533, 6, 1510, 51, 353, 353, 89, 1531,
	5, 353, 1523, 1, 1665, 1598, 1518, 1711, 1529, 1604,
	353, 1587, 1130, 1502, 1585, 67, 1659, 1593, 1506, 1315,
	1344, 1180, 1195, 987, 1177, 1002, 1613, 1627, 1545, 1487,
	922, 353, 912, 472, 64, 1570, 923, 1525, 921, 1560,
	919, 1022, 1023, 1400, 529, 1400, 1400, 1400, 1559, 1406,
	1265, 684, 1565, 1135, 948, 347, 1149, 951, 1136, 1137,
	1138, 1566, 1438, 690, 1440, 688, 1141, 1139, 299, 300,
	1519, 689, 1520, 686, 692, 231, 1400, 1136, 1137, 1138,
	340, 653, 677, 538, 1597, 1141, 1139, 299, 300, 353,
	353, 353, 353, 1209, 1208, 353, 998, 1217, 774, 1018,
	1464, 1611, 516, 233, 575, 1027, 1100, 1049, 346, 347,
	347, 1609, 353, 1655, 1268, 353, 527, 1458, 874, 353,
	1618, 1548, 1066, 1462, 1063, 1623, 601, 1461, 859, 278,
	799, 1610, 1628, 353, 353, 1642, 290, 287, 289, 288,
	1643, 790, 353, 353, 1072, 353, 1640, 1641, 1657, 1658,
	548, 1663, 332, 637, 645, 353, 1635, 1636, 1637, 1638,
	1639, 643, 1478, 1479, 1673, 642, 353, 1086, 1045, 1082,
	331, 1225, 1046, 1676, 1386, 1555, 1292, 303, 47, 1050,
	1051, 1052, 794, 25, 55, 263, 1509, 19, 1061, 18,
	510, 511, 512, 1067, 515, 17, 1068, 1069, 1070, 1071,
	20, 519, 16, 15, 14, 29, 13, 12, 11, 10,
	9, 1702, 1292, 1524, 1537, 353, 1536, 1527, 1534, 4,
	254, 22, 2, 1707, 0, 47, 1400, 0, 0, 1712,
	0, 353, 0, 256, 0, 353, 1714, 1716, 0, 334,
	1713, 1687, 1688, 0, 1721, 0, 0, 1562, 1143, 1147,
	0, 1719, 89, 0, 353, 0, 1726, 0, 0, 1729,
	1728, 353, 0, 0, 0, 0, 1734, 1143, 1147, 0,
	0, 89, 1727, 1740, 0, 0, 0, 0, 1742, 0,
	0, 1144, 1744, 1146, 1145, 0, 0, 0, 0, 0,
	0, 0, 353, 1745, 0, 0, 0, 0, 0, 353,
	1144, 1752, 1146, 1145, 0, 1599, 1601, 1602, 1603, 0,
	1739, 1292, 1749, 555, 554, 564, 565, 557, 558, 559,
	560, 561, 562, 563, 556, 854, 1258, 566, 1625, 0,
	0, 1626, 0, 0, 0, 1629, 0, 0, 1753, 0,
	0, 1273, 1274, 0, 0, 1275, 0, 0, 1277, 1527,
	1292, 0, 0, 0, 0, 0, 0, 0, 1292, 1292,
	0, 1661, 0, 0, 0, 0, 955, 956, 958, 959,
	960, 1668, 961, 962, 0, 0, 0, 0, 1234, 0,
	0, 0, 1679, 0, 0, 0, 0, 0, 0, 971,
	972, 973, 0, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 508, 508, 508, 508, 0,
	508, 0, 0, 0, 0, 0, 0, 508, 0, 0,
	0, 0, 0, 0, 0, 1281, 0, 0, 0, 0,
	0, 1708, 0, 0, 47, 554, 564, 565, 557, 558,
	559, 560, 561, 562, 563, 556, 0, 1292, 566, 576,
	753, 1718, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 764, 765, 766, 767, 768, 769, 770, 771, 0,
	1400, 0, 0, 0, 0, 772, 773, 1732, 0, 588,
	1363, 592, 593, 594, 595, 596, 597, 598, 599, 600,
	0, 603, 605, 605, 605, 605, 605, 605, 605, 605,
	0, 633, 634, 635, 636, 0, 0, 0, 347, 0,
	0, 0, 656, 0, 0, 1527, 0, 0, 0, 0,
	1388, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	614, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 567, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1366, 0, 0, 0, 616, 0, 0, 1368, 0, 1423,
	0, 526, 0, 48, 26, 27, 0, 0, 0, 1377,
	1378, 1379, 0, 0, 1382, 1538, 0, 0, 48, 26,
	27, 48, 26, 27, 0, 28, 0, 1392, 1393, 1394,
	1538, 1397, 0, 1538, 0, 0, 87, 0, 0, 243,
	28, 0, 0, 28, 621, 622, 623, 624, 625, 626,
	627, 628, 629, 630, 0, 0, 0, 0, 0, 0,
	1154, 267, 0, 87, 87, 617, 0, 0, 0, 0,
	0, 0, 0, 631, 615, 1733, 0, 0, 1433, 87,
	620, 87, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 567, 0, 508, 0, 0, 23,
	24, 48, 26, 27, 0, 0, 0, 508, 508, 508,
	508, 508, 508, 508, 508, 0, 0, 0, 0, 42,
	0, 508, 508, 28, 0, 0, 0, 0, 0, 0,
	1543, 0, 0, 0, 989, 0, 991, 0, 0, 0,
	0, 0, 37, 0, 0, 1543, 50, 1471, 1543, 0,
	1017, 0, 0, 632, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 1483, 1484, 0, 0, 0, 0,
	0, 0, 0, 0, 1539, 1540, 1542, 0, 0, 0,
	1541, 0, 0, 0, 1512, 0, 47, 0, 0, 1539,
	1540, 1542, 1539, 1540, 1542, 1541, 1674, 0, 1541, 0,
	592, 0, 1584, 0, 0, 0, 30, 31, 33, 32,
	35, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 1551, 1552, 1553,
	1554, 36, 43, 44, 0, 0, 45, 46, 34, 0,
	1617, 591, 0, 0, 0, 0, 0, 1318, 1320, 334,
	334, 334, 334, 334, 0, 0, 714, 0, 0, 0,
	0, 0, 0, 0, 656, 0, 894, 0, 0, 0,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 38,
	39, 0, 40, 41, 0, 49, 1662, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1619, 0, 0, 0,
	0, 1624, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 699, 0, 0, 87, 661, 87, 0,
	1369, 1370, 0, 1371, 0, 1644, 0, 1373, 0, 1375,
	508, 0, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 508, 715, 0, 0,
	0, 0, 0, 0, 1677, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1410, 1411, 1730, 0, 0,
	0, 0, 0, 1667, 0, 0, 0, 0, 1216, 0,
	0, 0, 0, 0, 0, 1037, 0, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 0, 731, 732,
	0, 733, 734, 735, 737, 736, 716, 717, 718, 722,
	720, 719, 721, 693, 695, 0, 631, 694, 700, 696,
	697, 698, 712, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 713, 723, 724, 725, 726, 727,
	728, 729, 730, 0, 0, 0, 0, 1076, 1077, 1738,
	87, 0, 0, 0, 229, 0, 0, 87, 0, 87,
	0, 0, 87, 0, 0, 87, 0, 0, 0, 762,
	0, 0, 0, 0, 0, 334, 0, 0, 239, 0,
	0, 0, 0, 0, 1756, 1757, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 632, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 762, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 0, 0, 0, 0, 226, 0, 0, 0, 0,
	0, 0, 232, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 0, 47, 0, 0, 267, 267, 0, 0, 855,
	855, 267, 0, 230, 0, 855, 234, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 267, 267, 267, 0,
	87, 0, 855, 87, 87, 87, 87, 87, 0, 0,
	0, 0, 0, 0, 0, 888, 0, 0, 87, 0,
	0, 0, 661, 0, 0, 0, 0, 87, 87, 0,
	0, 0, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 1266, 0, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1278,
	1279, 1280, 0, 0, 0, 0, 0, 0, 0, 0,
	714, 227, 0, 235, 236, 237, 238, 242, 0, 0,
	0, 0, 241, 240, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 87,
	0, 1317, 0, 0, 87, 0, 87, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 762, 0, 0, 699, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 715, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 0, 0, 1385, 0, 0, 0, 0, 0, 0,
	0, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 0, 731, 732, 0, 733, 734, 735, 737, 736,
	716, 717, 718, 722, 720, 719, 721, 693, 695, 87,
	631, 694, 700, 696, 697, 698, 712, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 713, 723,
	724, 725, 726, 727, 728, 729, 730, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	632, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1266,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1220, 1221, 0, 0, 0, 0, 0, 0, 87,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	762, 0, 0, 0, 0, 0, 0, 0, 1546, 0,
	0, 0, 0, 0, 0, 855, 0, 0, 0, 0,
	0, 855, 0, 1266, 0, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 1684, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 661, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1750, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 459, 449, 0, 414, 461, 385, 403, 469, 405,
	406, 438, 365, 423, 154, 400, 383, 92, 388, 358,
	395, 359, 386, 416, 116, 384, 451, 426, 130, 467,
	133, 431, 0, 176, 142, 0, 0, 418, 453, 421,
	445, 413, 439, 373, 430, 462, 401, 434, 463, 0,
	0, 0, 352, 0, 916, 917, 0, 0, 0, 0,
	0, 105, 0, 433, 458, 397, 471, 437, 357, 432,
	0, 363, 366, 468, 456, 392, 393, 1107, 0, 0,
	0, 0, 0, 0, 417, 422, 442, 410, 0, 0,
	0, 0, 0, 0, 0, 0, 389, 0, 429, 0,
	855, 0, 370, 364, 0, 415, 0, 0, 0, 372,
	0, 390, 443, 0, 354, 447, 454, 412, 203, 457,
	409, 408, 161, 0, 108, 0, 182, 120, 402, 131,
	440, 470, 460, 419, 452, 387, 396, 110, 394, 168,
	155, 194, 428, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 362,
	355, 391, 446, 448, 377, 436, 367, 398, 441, 399,
	420, 382, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 1725, 150, 123, 0, 0, 360, 0,
	177, 196, 214, 215, 361, 381, 455, 206, 207, 208,
	209, 0, 87, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 435, 169, 107, 195, 175, 376, 380, 374,
	375, 424, 425, 464, 465, 466, 444, 371, 0, 378,
	379, 0, 450, 125, 427, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 404, 356, 407, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 170, 411, 0, 104,
	459, 449, 0, 414, 461, 385, 403, 469, 405, 406,
	438, 365, 423, 154, 400, 383, 92, 388, 358, 395,
	359, 386, 416, 116, 384, 451, 426, 130, 467, 133,
	431, 0, 176, 142, 0, 0, 418, 453, 421, 445,
	413, 439, 373, 430, 462, 401, 434, 463, 0, 0,
	0, 352, 0, 916, 917, 0, 0, 0, 0, 0,
	105, 0, 433, 458, 397, 471, 437, 357, 432, 0,
	363, 366, 468, 456, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 417, 422, 442, 410, 0, 0, 0,
	0, 0, 0, 0, 0, 389, 0, 429, 0, 0,
	0, 370, 364, 0, 415, 0, 0, 0, 372, 0,
	390, 443, 0, 354, 447, 454, 412, 203, 457, 409,
	408, 161, 0, 108, 0, 182, 120, 402, 131, 440,
	470, 460, 419, 452, 387, 396, 110, 394, 168, 155,
	194, 428, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	391, 446, 448, 377, 436, 367, 398, 441, 399, 420,
	382, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 381, 455, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 435, 169, 107, 195, 175, 376, 380, 374, 375,
	424, 425, 464, 465, 466, 444, 371, 0, 378, 379,
	0, 450, 125, 427, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 404, 356, 407, 0, 0, 0, 0,
	0, 0, 0, 368, 369, 170, 411, 0, 104, 459,
	449, 0, 414, 461, 385, 403, 469, 405, 406, 438,
	365, 423, 154, 400, 383, 92, 388, 358, 395, 359,
	386, 416, 116, 384, 451, 426, 130, 467, 133, 431,
	0, 176, 142, 0, 0, 418, 453, 421, 445, 413,
	439, 373, 430, 462, 401, 434, 463, 0, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 433, 458, 397, 471, 437, 357, 432, 0, 363,
	366, 468, 456, 392, 393, 0, 0, 0, 0, 0,
	0, 0, 417, 422, 442, 410, 0, 0, 0, 0,
	0, 0, 1227, 0, 389, 0, 429, 0, 0, 0,
	370, 364, 0, 415, 0, 0, 0, 372, 0, 390,
	443, 0, 354, 447, 454, 412, 203, 457, 409, 408,
	161, 0, 108, 0, 182, 120, 402, 131, 440, 470,
	460, 419, 452, 387, 396, 110, 394, 168, 155, 194,
	428, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 362, 355, 391,
	446, 448, 377, 436, 367, 398, 441, 399, 420, 382,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 360, 0, 177, 196,
	214, 215, 361, 381, 455, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	435, 169, 107, 195, 175, 376, 380, 374, 375, 424,
	425, 464, 465, 466, 444, 371, 0, 378, 379, 0,
	450, 125, 427, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 404, 356, 407, 0, 0, 0, 0, 0,
	0, 0, 368, 369, 170, 411, 0, 104, 459, 449,
	0, 414, 461, 385, 403, 469, 405, 406, 438, 365,
	423, 154, 400, 383, 92, 388, 358, 395, 359, 386,
	416, 116, 384, 451, 426, 130, 467, 133, 431, 0,
	176, 142, 0, 0, 418, 453, 421, 445, 413, 439,
	373, 430, 462, 401, 434, 463, 50, 0, 0, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	433, 458, 397, 471, 437, 357, 432, 0, 363, 366,
	468, 456, 392, 393, 0, 0, 0, 0, 0, 0,
	0, 417, 422, 442, 410, 0, 0, 0, 0, 0,
	0, 0, 0, 389, 0, 429, 0, 0, 0, 370,
	364, 0, 415, 0, 0, 0, 372, 0, 390, 443,
	0, 354, 447, 454, 412, 203, 457, 409, 408, 161,
	0, 108, 0, 182, 120, 402, 131, 440, 470, 460,
	419, 452, 387, 396, 110, 394, 168, 155, 194, 428,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 362, 355, 391, 446,
	448, 377, 436, 367, 398, 441, 399, 420, 382, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 360, 0, 177, 196, 214,
	215, 361, 381, 455, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 435,
	169, 107, 195, 175, 376, 380, 374, 375, 424, 425,
	464, 465, 466, 444, 371, 0, 378, 379, 0, 450,
	125, 427, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 404, 356, 407, 0, 0, 0, 0, 0, 0,
	0, 368, 369, 170, 411, 0, 104, 459, 449, 0,
	414, 461, 385, 403, 469, 405, 406, 438, 365, 423,
	154, 400, 383, 92, 388, 358, 395, 359, 386, 416,
	116, 384, 451, 426, 130, 467, 133, 431, 0, 176,
	142, 0, 0, 418, 453, 421, 445, 413, 439, 373,
	430, 462, 401, 434, 463, 0, 0, 0, 272, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 433,
	458, 397, 471, 437, 357, 432, 0, 363, 366, 468,
	456, 392, 393, 0, 0, 0, 0, 0, 0, 0,
	417, 422, 442, 410, 0, 0, 0, 0, 0, 0,
	805, 0, 389, 0, 429, 0, 0, 0, 370, 364,
	0, 415, 0, 0, 0, 372, 0, 390, 443, 0,
	354, 447, 454, 412, 203, 457, 409, 408, 161, 0,
	108, 0, 182, 120, 402, 131, 440, 470, 460, 419,
	452, 387, 396, 110, 394, 168, 155, 194, 428, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 362, 355, 391, 446, 448,
	377, 436, 367, 398, 441, 399, 420, 382, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 360, 0, 177, 196, 214, 215,
	361, 381, 455, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 435, 169,
	107, 195, 175, 376, 380, 374, 375, 424, 425, 464,
	465, 466, 444, 371, 0, 378, 379, 0, 450, 125,
	427, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	404, 356, 407, 0, 0, 0, 0, 0, 0, 0,
	368, 369, 170, 411, 0, 104, 459, 449, 0, 414,
	461, 385, 403, 469, 405, 406, 438, 365, 423, 154,
	400, 383, 92, 388, 358, 395, 359, 386, 416, 116,
	384, 451, 426, 130, 467, 133, 431, 0, 176, 142,
	0, 0, 418, 453, 421, 445, 413, 439, 373, 430,
	462, 401, 434, 463, 0, 0, 0, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 433, 458,
	397, 471, 437, 357, 432, 0, 363, 366, 468, 456,
	392, 393, 0, 0, 0, 0, 0, 0, 0, 417,
	422, 442, 410, 0, 0, 0, 0, 0, 0, 0,
	0, 389, 0, 429, 0, 0, 0, 370, 364, 0,
	415, 0, 0, 0, 372, 0, 390, 443, 0, 354,
	447, 454, 412, 203, 457, 409, 408, 161, 0, 108,
	0, 182, 120, 402, 131, 440, 470, 460, 419, 452,
	387, 396, 110, 394, 168, 155, 194, 428, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 362, 355, 391, 446, 448, 377,
	436, 367, 398, 441, 399, 420, 382, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 360, 0, 177, 196, 214, 215, 361,
	381, 455, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 435, 169, 107,
	195, 175, 376, 380, 374, 375, 424, 425, 464, 465,
	466, 444, 371, 0, 378, 379, 0, 450, 125, 427,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 404,
	356, 407, 0, 0, 0, 0, 0, 0, 0, 368,
	369, 170, 411, 0, 104, 459, 449, 0, 414, 461,
	385, 403, 469, 405, 406, 438, 365, 423, 154, 400,
	383, 92, 388, 358, 395, 359, 386, 416, 116, 384,
	451, 426, 130, 467, 133, 431, 0, 176, 142, 0,
	0, 418, 453, 421, 445, 413, 439, 373, 430, 462,
	401, 434, 463, 0, 0, 0, 272, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 433, 458, 397,
	471, 437, 357, 432, 0, 363, 366, 468, 456, 392,
	393, 0, 0, 0, 0, 0, 0, 0, 417, 422,
	442, 410, 0, 0, 0, 0, 0, 0, 0, 0,
	389, 0, 429, 0, 0, 0, 370, 364, 0, 415,
	0, 0, 0, 372, 0, 390, 443, 0, 354, 447,
	454, 412, 203, 457, 409, 408, 161, 0, 108, 0,
	182, 120, 402, 131, 440, 470, 460, 419, 452, 387,
	396, 110, 394, 168, 155, 194, 428, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 362, 355, 391, 446, 448, 377, 436,
	367, 398, 441, 399, 420, 382, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 360, 0, 177, 196, 214, 215, 361, 381,
	455, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 435, 169, 107, 195,
	175, 376, 380, 374, 375, 424, 425, 464, 465, 466,
	444, 371, 0, 378, 379, 0, 450, 125, 427, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 404, 356,
	407, 0, 0, 0, 0, 0, 0, 0, 368, 369,
	170, 411, 0, 104, 459, 449, 0, 414, 461, 385,
	403, 469, 405, 406, 438, 365, 423, 154, 400, 383,
	92, 388, 358, 395, 359, 386, 416, 116, 384, 451,
	426, 130, 467, 133, 431, 0, 176, 142, 0, 0,
	418, 453, 421, 445, 413, 439, 373, 430, 462, 401,
	434, 463, 0, 0, 0, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 433, 458, 397, 471,
	437, 357, 432, 0, 363, 366, 468, 456, 392, 393,
	0, 0, 0, 0, 0, 0, 0, 417, 422, 442,
	410, 0, 0, 0, 0, 0, 0, 0, 0, 389,
	0, 429, 0, 0, 0, 370, 364, 0, 415, 0,
	0, 0, 372, 0, 390, 443, 0, 354, 447, 454,
	412, 203, 457, 409, 408, 161, 0, 108, 0, 182,
	120, 402, 131, 440, 470, 460, 419, 452, 387, 396,
	110, 394, 168, 155, 194, 428, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 362, 355, 391, 446, 448, 377, 436, 367,
	398, 441, 399, 420, 382, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	350, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 360, 0, 177, 196, 214, 215, 361, 381, 455,
	206, 207, 208, 209, 0, 0, 0, 351, 349, 124,
	173, 128, 135, 164, 212, 435, 169, 107, 195, 175,
	376, 380, 374, 375, 424, 425, 464, 465, 466, 444,
	371, 0, 378, 379, 0, 450, 125, 427, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 404, 356, 407,
	0, 0, 0, 0, 0, 0, 0, 368, 369, 170,
	411, 0, 104, 459, 449, 0, 414, 461, 385, 403,
	469, 405, 406, 438, 365, 423, 154, 400, 383, 92,
	388, 358, 395, 359, 386, 416, 116, 384, 451, 426,
	130, 467, 133, 431, 0, 176, 142, 0, 0, 418,
	453, 421, 445, 413, 439, 373, 430, 462, 401, 434,
	463, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 433, 458, 397, 471, 437,
	357, 432, 0, 363, 366, 468, 456, 392, 393, 0,
	0, 0, 0, 0, 0, 0, 417, 422, 442, 410,
	0, 0, 0, 0, 0, 0, 0, 0, 389, 0,
	429, 0, 0, 0, 370, 364, 0, 415, 0, 0,
	0, 372, 0, 390, 443, 0, 354, 447, 454, 412,
	203, 457, 409, 408, 161, 0, 108, 0, 182, 120,
	402, 131, 440, 470, 460, 419, 452, 387, 396, 110,
	394, 168, 155, 194, 428, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 362, 355, 391, 446, 448, 377, 436, 367, 398,
	441, 399, 420, 382, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	360, 0, 177, 196, 214, 215, 361, 381, 455, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 435, 169, 107, 195, 175, 376,
	380, 374, 375, 424, 425, 464, 465, 466, 444, 371,
	0, 378, 379, 0, 450, 125, 427, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 404, 356, 407, 0,
	0, 0, 0, 0, 0, 0, 368, 369, 170, 411,
	0, 104, 459, 449, 0, 414, 461, 385, 403, 469,
	405, 406, 438, 365, 423, 154, 400, 383, 92, 388,
	358, 395, 359, 386, 416, 116, 384, 451, 426, 130,
	467, 133, 431, 0, 176, 142, 0, 0, 418, 453,
	421, 445, 413, 439, 373, 430, 462, 401, 434, 463,
	0, 0, 0, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 433, 458, 397, 471, 437, 357,
	432, 0, 363, 366, 468, 456, 392, 393, 0, 0,
	0, 0, 0, 0, 0, 417, 422, 442, 410, 0,
	0, 0, 0, 0, 0, 0, 0, 389, 0, 429,
	0, 0, 0, 370, 364, 0, 415, 0, 0, 0,
	372, 0, 390, 443, 0, 354, 447, 454, 412, 203,
	457, 409, 408, 161, 0, 108, 0, 182, 120, 402,
	131, 440, 470, 460, 419, 452, 387, 396, 110, 394,
	168, 155, 194, 428, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	362, 355, 391, 446, 448, 377, 436, 367, 398, 441,
	399, 420, 382, 93, 183, 671, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 350, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 360,
	0, 177, 196, 214, 215, 361, 381, 455, 206, 207,
	208, 209, 0, 0, 0, 351, 349, 124, 173, 128,
	135, 164, 212, 435, 169, 107, 195, 175, 376, 380,
	374, 375, 424, 425, 464, 465, 466, 444, 371, 0,
	378, 379, 0, 450, 125, 427, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 404, 356, 407, 0, 0,
	0, 0, 0, 0, 0, 368, 369, 170, 411, 0,
	104, 459, 449, 0, 414, 461, 385, 403, 469, 405,
	406, 438, 365, 423, 154, 400, 383, 92, 388, 358,
	395, 359, 386, 416, 116, 384, 451, 426, 130, 467,
	133, 431, 0, 176, 142, 0, 0, 418, 453, 421,
	445, 413, 439, 373, 430, 462, 401, 434, 463, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 433, 458, 397, 471, 437, 357, 432,
	0, 363, 366, 468, 456, 392, 393, 0, 0, 0,
	0, 0, 0, 0, 417, 422, 442, 410, 0, 0,
	0, 0, 0, 0, 0, 0, 389, 0, 429, 0,
	0, 0, 370, 364, 0, 415, 0, 0, 0, 372,
	0, 390, 443, 0, 354, 447, 454, 412, 203, 457,
	409, 408, 161, 0, 108, 0, 182, 120, 402, 131,
	440, 470, 460, 419, 452, 387, 396, 110, 394, 168,
	155, 194, 428, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 362,
	355, 391, 446, 448, 377, 436, 367, 398, 441, 399,
	420, 382, 93, 183, 341, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 350, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 360, 0,
	177, 196, 214, 215, 361, 381, 455, 206, 207, 208,
	209, 0, 0, 0, 351, 349, 344, 343, 128, 135,
	164, 212, 435, 169, 107, 195, 175, 376, 380, 374,
	375, 424, 425, 464, 465, 466, 444, 371, 0, 378,
	379, 0, 450, 125, 427, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 404, 356, 407, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 170, 411, 154, 104,
	0, 92, 0, 0, 274, 0, 0, 0, 116, 271,
	0, 0, 130, 313, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 304, 305, 0, 0, 0, 0, 0,
	0, 906, 0, 50, 0, 0, 272, 292, 291, 294,
	295, 296, 297, 0, 0, 105, 293, 298, 299, 300,
	907, 0, 0, 269, 285, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 0, 0,
	0, 0, 325, 0, 284, 0, 0, 280, 281, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 323, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 314, 324, 320, 321, 318, 319, 317, 316, 315,
	326, 306, 307, 308, 309, 311, 0, 125, 310, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 92, 842,
	170, 274, 322, 104, 0, 116, 271, 0, 0, 130,
	313, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	304, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 272, 292, 291, 294, 295, 296, 297,
	0, 0, 105, 293, 298, 299, 300, 0, 0, 0,
	269, 285, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 265, 0, 0, 0, 325,
	0, 284, 0, 0, 280, 281, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 323, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 314, 324,
	320, 321, 318, 319, 317, 316, 315, 326, 306, 307,
	308, 309, 311, 0, 125, 310, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 92, 0, 170, 274, 322,
	104, 0, 116, 271, 0, 0, 130, 313, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 521,
	272, 292, 291, 294, 295, 296, 297, 0, 0, 105,
	293, 298, 299, 300, 0, 0, 0, 269, 285, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 0, 0, 0, 0, 325, 0, 284, 0,
	0, 280, 281, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 323,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 314, 324, 320, 321, 318,
	319, 317, 316, 315, 326, 306, 307, 308, 309, 311,
	0, 125, 310, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 92, 0, 170, 274, 322, 104, 0, 116,
	271, 0, 0, 130, 313, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 304, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 272, 292, 291,
	294, 295, 296, 297, 0, 0, 105, 293, 298, 299,
	300, 0, 0, 0, 269, 285, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 265,
	0, 0, 0, 325, 0, 284, 0, 0, 280, 281,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 323, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 314, 324, 320, 321, 318, 319, 317, 316,
	315, 326, 306, 307, 308, 309, 311, 0, 125, 310,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	23, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 154, 322, 104, 92, 0, 0, 274, 0,
	0, 0, 116, 271, 0, 0, 130, 313, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 292, 291, 294, 295, 296, 297, 0, 0, 105,
	293, 298, 299, 300, 0, 0, 0, 269, 285, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 0, 0, 0, 0, 325, 0, 284, 0,
	0, 280, 281, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 323,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 314, 324, 320, 321, 318,
	319, 317, 316, 315, 326, 306, 307, 308, 309, 311,
	0, 125, 310, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 92, 0, 170, 274, 322, 104, 0, 116,
	271, 0, 0, 130, 313, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 304, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 272, 292, 291,
	294, 295, 296, 297, 0, 0, 105, 293, 298, 299,
	300, 0, 0, 0, 269, 285, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 0,
	0, 0, 0, 325, 0, 284, 0, 0, 280, 281,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 323, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 314, 324, 320, 321, 318, 319, 317, 316,
	315, 326, 306, 307, 308, 309, 311, 0, 125, 310,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	0, 0, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 170, 116, 322, 104, 0, 130, 313, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 292, 291, 294, 295, 296, 297, 0, 0, 105,
	293, 298, 299, 300, 0, 0, 0, 0, 285, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 0, 0, 0, 0, 325, 0, 284, 0,
	0, 280, 281, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 323,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	1754, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 314, 324, 320, 321, 318,
	319, 317, 316, 315, 326, 306, 307, 308, 309, 311,
	0, 125, 310, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 0, 0, 154, 0, 0, 92, 0,
	0, 274, 0, 0, 170, 116, 322, 104, 0, 130,
	313, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	304, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 272, 292, 291, 294, 295, 296, 297,
	0, 0, 105, 293, 298, 299, 300, 0, 0, 0,
	0, 285, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 0, 0, 0, 0, 325,
	0, 284, 0, 0, 280, 281, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 323, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 314, 324,
	320, 321, 318, 319, 317, 316, 315, 326, 306, 307,
	308, 309, 311, 0, 125, 310, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 0, 0, 0, 154, 0,
	0, 92, 0, 0, 0, 0, 0, 170, 116, 322,
	104, 0, 130, 313, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 304, 305, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 272, 292, 291, 294,
	295, 296, 297, 0, 0, 105, 293, 298, 299, 300,
	0, 0, 0, 0, 285, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 0, 0,
	0, 0, 325, 0, 284, 0, 0, 280, 281, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 323, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 314, 324, 320, 321, 318, 319, 317, 316, 315,
	326, 306, 307, 308, 309, 311, 0, 125, 310, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 0,
	0, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	170, 116, 322, 104, 0, 130, 0, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 554, 564, 565, 557,
	558, 559, 560, 561, 562, 563, 556, 0, 0, 566,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 0, 0, 0, 154, 0, 0, 92, 0, 543,
	0, 0, 0, 170, 116, 567, 104, 0, 130, 0,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 0, 545, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 540, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 660,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 662, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 23, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 23, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 0, 0, 792, 0, 0, 793, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 680, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 0, 679, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 660,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 662, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 658, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 1401, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 1724, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 1293, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 662, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 0, 545, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 752, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 638, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	336, 163, 118, 197, 0, 0, 0, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 170, 116, 0, 104,
	0, 130, 0, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 0, 169, 107, 195, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 116, 0, 170,
	0, 130, 104, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 203, 0, 0, 0, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 0, 169, 107, 195, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 116, 0, 170,
	0, 130, 104, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 0, 169, 107, 195, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 116, 0, 170,
	0, 130, 104, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 0, 169, 107, 195, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 116, 0, 170,
	0, 130, 104, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 0, 169, 107, 195, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 104,
}

var yyPact = [...]int{
	2113, -1000, -210, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1374, 1422, -1000, -1000, -1000, -1000, -1000, -1000, 1212,
	258, 360, 365, 100, 14569, 361, 2472, 15149, -1000, 102,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1141, -1000, -1000,
	-1000, -1000, -1000, 1355, 1372, 1168, 1338, 1276, -1000, 7861,
	280, 12826, 14279, 6666, -1000, 962, -150, 287, 14859, 275,
	275, 14859, 14859, 275, -1000, -81, 355, 15149, -1000, 15149,
	273, 959, 273, 273, 273, 15149, -1000, 413, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 15149, 927, 1301, 157, 4433, 4433, 4433,
	4433, 175, 4433, -29, 1221, -1000, -1000, -1000, -1000, 4433,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	823, 1302, 8461, 8461, 1374, -1000, 1141, -1000, -1000, -1000,
	1297, -1000, -1000, 613, 1396, -1000, 9926, 412, -1000, 8461,
	47, 1145, -1000, -1000, 1145, -1000, -1000, 405, -1000, -1000,
	9340, 9340, 9340, 9340, 9340, 9340, 9340, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1145, -1000, 8164, 1145, 1145, 1145, 1145, 1145, 1145,
	1145, 1145, 8461, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
	1145, 1145, 1873, 1145, 1145, 1145, 1145, 13986, 1066, 1163,
	-1000, -1000, -1000, 1335, 10796, 11666, 15149, 1060, -1000, 1097,
	6347, -36, -1000, -1000, -1000, 498, 11376, -1000, -1000, -1000,
	1300, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1004, -1000, 2700, 322, -1000, -1000, 15149, 1132,
	923, 578, 909, 1220, 323, 15149, -1000, 13696, 4433, 285,
	15149, 1321, 1217, 15149, 906, 904, -1000, 6028, -1000, 4433,
	4433, 4433, 4433, 4433, 4433, 4433, 4433, -1000, -1000, -1000,
	-1000, -1000, -1000, 4433, 4433, -1000, -28, -1000, 15149, -1000,
	-1000, -1000, -1000, 1417, 437, 724, 410, 1119, -1000, 868,
	1355, 823, 1276, 11086, 1174, -1000, -1000, 15149, -1000, 8461,
	8461, 715, -1000, 13406, -1000, -1000, 4752, 447, 9340, 651,
	493, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340, 9340,
	9340, 9340, 9340, 9340, 9340, 9340, 744, 1873, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 881, -1000, 1141, 1120,
	1120, 18, 18, 18, 18, 18, 18, 9633, 7267, 823,
	999, 465, 8164, 7861, 7861, 8461, 8461, 15439, 15439, 7861,
	1340, 550, 465, 15439, -1000, 823, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 56, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7861, 7861, 7861, 7861, 196, 15149, -1000,
	15439, 12826, 12826, 12826, 12826, 12826, -1000, 1244, 1243, -1000,
	1246, 1245, 1261, 15149, -1000, 970, 10796, 352, 1145, -1000,
	13116, -1000, -1000, 196, 1064, 12826, 15149, -1000, -1000, 5709,
	1097, -36, 1094, -1000, -46, -41, 6970, 425, -1000, -1000,
	-1000, -1000, 3795, 712, 145, -126, 14, -1000, -1000, -1000,
	-1000, 1176, -1000, 1176, 233, 1176, 1176, 1176, -1000, 1176,
	1176, 49, 49, 49, 49, 49, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1211, 1207, -1000, 1176, 1176, 1176, -1000,
	1176, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1199, 250, 1199, 1177, 1177, -1000, -1000, 14859, 1333,
	-107, 874, 4433, 1316, 4433, 15149, 1390, 15149, -1000, -1000,
	-1000, 659, 15149, -1000, 15149, -1000, -1000, 15149, 4433, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 515, -1000, -1000, -1000, -1000, 1263,
	8461, 8461, 5390, 8461, -1000, -1000, -1000, 1302, -1000, 1340,
	1371, -1000, 1287, 1280, 7861, -1000, -1000, 447, 492, -1000,
	-1000, 644, -1000, -1000, -1000, -1000, 403, 1145, -1000, 1671,
	-1000, -1000, -1000, -1000, 651, 9340, 9340, 9340, 729, 1671,
	1062, 363, 1792, 18, 158, 158, 12, 12, 12, 12,
	12, 449, 449, -1000, -1000, -1000, -1000, 823, -1000, -1000,
	-1000, 823, 7861, 1096, -1000, -1000, 8461, -1000, 823, 958,
	958, 601, 886, 1131, -1000, 401, 1073, 958, 7861, 532,
	-1000, 8461, 823, -1000, -1000, 958, 823, 958, 958, 986,
	1145, -1000, 1113, -1000, 495, 1163, 1206, 1216, 1148, -1000,
	-1000, -1000, -1000, 1235, -1000, 1232, -1000, -1000, -1000, -1000,
	-1000, 321, 302, 299, 14859, -1000, 1382, 12826, 1089, -1000,
	-1000, 1094, -36, -63, -1000, -1000, -1000, -1000, 465, -1000,
	-1000, 870, 1092, 3476, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1202, 608, 14859, 248, 254, 422, 356, 859,
	-1000, -1000, -1000, 633, -1000, 14859, 1416, -1000, -1000, 243,
	-1000, 242, 576, 798, 15149, 161, 1201, 1450, -1000, -214,
	-1000, 10, -1000, -1000, 757, 49, 49, 1176, 49, 49,
	49, -1000, -1000, 425, 1299, 425, 425, 425, 425, 788,
	788, -101, -101, -1000, -1000, -1000, 754, 1199, -1000, -1000,
	-1000, 752, -1000, 1194, 1141, -1000, 5071, -1000, -1000, -1000,
	-1000, -1000, 1332, 1215, -1000, -1000, -1000, 141, -1000, 938,
	791, 489, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 192, 369, -1000, 4433, -1000, 548, 15149,
	15149, 1257, 465, 465, 389, -1000, -1000, 15149, -1000, -1000,
	-1000, -1000, 1018, -1000, -1000, -1000, 4114, 7861, -1000, 729,
	1671, 334, -1000, 9340, 9340, -1000, -1000, 958, 7861, 465,
	-1000, -1000, -1000, 772, 744, 772, 9340, 9340, 5390, 9340,
	9340, -93, 1065, 505, -1000, 8461, 698, -1000, -1000, -1000,
	-1000, -1000, 1208, 15439, 1145, -1000, 10506, 14859, 1374, 15439,
	8461, 8461, -1000, -1000, 8461, 1190, -1000, 8461, -1000, -1000,
	-1000, 1145, 1145, 1145, 931, -1000, 1374, 1089, -1000, -1000,
	-1000, -51, -53, -1000, -1000, 3795, -1000, 3795, 12536, -1000,
	1405, 1350, 255, 270, -1000, 854, 847, -1000, 836, -1000,
	45, -1000, -169, 84, 89, -1000, -1000, 1145, -1000, 1189,
	1324, -1000, 1306, 732, -1000, 792, -196, -1000, -1000, -1000,
	-1000, -1000, -1000, 1145, 1188, 1183, -1000, 1179, -1000, -1000,
	-1000, 967, 425, 425, 49, 425, 425, 425, -1000, 468,
	-1000, -1000, -1000, -1000, 956, -1000, 951, -1000, 73, 68,
	-1000, 1091, -1000, 946, 15149, 14859, -1000, 1067, -1000, 491,
	1349, 155, 15149, 1390, -1000, 247, -1000, 14859, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 14859, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15149, -1000,
	-1000, -1000, -1000, -1000, 14859, 262, -1000, -1000, 779, 8461,
	-1000, -1000, -1000, 5071, -1000, 1382, 12826, -1000, -1000, 823,
	-1000, 9340, 1671, 1671, -1000, -1000, 823, 1176, 1176, -1000,
	1176, 1177, -1000, -1000, 1176, 90, 1176, 87, 823, 823,
	199, 522, -1000, 149, 91, 1145, -88, -1000, 465, 8461,
	-1000, 1308, 1009, 1033, -1000, -1000, 7564, 823, 936, 385,
	931, 1355, -1000, 465, 465, 465, 11956, 465, 11956, 11956,
	11956, 10216, 14859, 1355, -1000, -1000, -1000, -1000, 3476, -1000,
	922, -1000, 1176, 1176, 351, 351, -185, 234, 223, -1000,
	-1000, -1000, -1000, -150, -1000, -1000, 576, -1000, 8461, 11956,
	-156, -1000, 1039, 899, 1469, -1000, 172, 823, -1000, 807,
	-1000, 734, 893, -1000, -1000, -1000, 425, -1000, -1000, -1000,
	-1000, -1000, 49, 778, 49, 8, 5, 731, -1000, 722,
	1071, 1196, 5071, 3795, 282, 1344, -1000, -1000, 1348, 1323,
	14859, -1000, -1000, -1000, 1173, -1000, -1000, -1000, -1000, 1314,
	14859, -1000, -1000, 465, 1380, 1038, -1000, 1671, -1000, -1000,
	220, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	9340, 9340, -1000, 9340, 9340, 9340, 823, 761, 465, 209,
	-1000, 1145, -1000, -1000, 1080, 14859, 14859, -1000, -1000, 918,
	-1000, -1000, 915, 915, 915, 352, -1000, -1000, 864, 12536,
	1313, -1000, 607, -1000, -1000, 595, 152, 587, -1000, 14859,
	-150, -1000, 1145, 746, 913, 1172, 720, -1000, 887, 53,
	-101, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 425, -1000,
	425, -1000, -1000, 869, 865, 12536, 14859, 15149, -1000, -1000,
	14859, -1000, -1000, -1000, -1000, -1000, 135, 2033, 1170, 11956,
	1145, 269, 1377, 1369, -1000, -1000, 256, 256, 256, 256,
	64, -1000, -1000, 1408, -1000, 1145, -1000, 1141, 382, -1000,
	14859, -1000, -1000, -1000, -1000, -1000, 1150, 1209, 147, -1000,
	808, 490, 747, 488, 485, 484, 481, 480, 473, 458,
	-1000, -1000, -1000, 1403, -1000, -1000, -1000, 1399, 1167, -1000,
	1166, 8461, 168, -1000, -1000, 853, 835, -1000, -1000, -1000,
	-1000, -1000, -1000, 898, 1165, 1164, 990, -1000, 130, 2033,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14859, 14859,
	14859, 14859, 290, 9047, 12536, 892, 186, 208, -1000, 8461,
	8461, -1000, -1000, -1000, -1000, 823, 167, -129, 15439, 1033,
	823, 14859, -1000, -1000, 14859, -1000, -124, 1209, 14859, -1000,
	708, -1000, -1000, 612, 705, 612, 612, 612, 612, 612,
	351, 351, 14859, 12536, 746, -1000, -90, 383, -1000, -1000,
	-194, 12536, 12536, -104, 14859, 8461, 2033, -1000, 1012, 2246,
	-1000, -1000, -1000, -1000, 14859, 1394, 1392, 1391, 1384, 2030,
	47, 878, 1132, 852, -1000, 14859, 1160, 465, 1008, -1000,
	1250, -96, -134, 1002, -1000, -1000, 1145, 846, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	576, 576, 842, 834, -1000, -1000, -1000, 119, 649, 668,
	648, 643, 29, -1000, 1367, 1382, 1159, 822, 820, -1000,
	-200, -1000, 465, -1000, 14859, 126, -1000, -1000, 1310, -1000,
	-1000, -1000, -1000, -1000, 2033, -1000, -107, -1000, 186, 1268,
	12536, -1000, 1224, -1000, 14859, -1000, 1209, -1000, -1000, 259,
	864, 625, -1000, 620, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 12246, 864, 11956, 1382, 864, 8461, -1000, 2700, 1347,
	14859, 2015, -1000, -1000, -1000, 183, 818, -120, 823, -1000,
	15149, 1150, -1000, -1000, -1000, 380, 1150, 815, 864, -1000,
	465, 1141, -1000, -1000, -1000, 176, -1000, -132, -1000, 1149,
	-1000, 5071, -1000, -1000, -1000, -1000, 1145, -135, 14859, -1000,
	8754, -1000, 813, 256, 823, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1672, 11, 1046, 1671, 1670, 1669, 1449, 1442, 1434,
	1428, 1668, 1666, 1664, 1660, 1659, 1658, 1657, 1656, 1655,
	1654, 1653, 1652, 1650, 1645, 1639, 1637, 389, 1635, 1634,
	1633, 93, 1632, 108, 1625, 1624, 60, 92, 66, 56,
	710, 1621, 43, 107, 94, 1620, 70, 1619, 1617, 111,
	1615, 88, 1611, 1604, 39, 1603, 1602, 27, 5, 17,
	33, 1600, 1594, 95, 37, 1591, 1589, 1588, 1587, 1586,
	1580, 76, 19, 22, 24, 32, 1579, 90, 9, 1578,
	71, 1576, 1574, 1573, 1571, 52, 1566, 79, 26, 42,
	77, 1564, 18, 1563, 87, 54, 45, 16, 109, 85,
	1558, 49, 91, 68, 1556, 1555, 693, 1554, 1553, 1552,
	1549, 1548, 1547, 725, 691, 1546, 1544, 1543, 58, 0,
	216, 20, 104, 1533, 61, 1532, 2021, 89, 83, 41,
	1531, 53, 1411, 55, 1530, 1525, 51, 103, 106, 101,
	96, 1524, 1523, 1521, 1515, 1513, 1122, 46, 179, 81,
	1507, 1506, 1504, 25, 65, 36, 67, 82, 1501, 1490,
	1488, 40, 1486, 15, 21, 2, 75, 1485, 1484, 1483,
	1482, 47, 29, 1480, 28, 6, 1, 3, 14, 1479,
	1477, 1476, 7, 1475, 31, 1474, 13, 1473, 10, 1472,
	1471, 1470, 1469, 1467, 1466, 1465, 1464, 1462, 1461, 23,
	50, 48, 34, 30, 57, 44, 1459, 1458, 1457, 4,
	8, 1455, 1454, 1453, 1445, 1627, 780, 1439, 1432, 1430,
	1401, 313,
}

var yyR1 = [...]int{
	0, 213, 214, 214, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 30, 30, 8, 9, 9, 9, 217,
	217, 49, 49, 94, 94, 10, 10, 10, 10, 11,
	11, 211, 211, 210, 212, 212, 12, 12, 12, 12,
	12, 206, 206, 206, 206, 206, 13, 13, 208, 208,
	99, 99, 103, 103, 103, 104, 104, 104, 104, 134,
	134, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 204, 204, 205, 205, 205, 207, 207, 209,
	209, 209, 209, 209, 209, 209, 190, 190, 190, 191,
	191, 191, 191, 191, 191, 193, 193, 194, 194, 124,
	124, 188, 188, 187, 186, 186, 185, 185, 184, 195,
	195, 19, 168, 169, 169, 169, 169, 169, 157, 138,
	138, 138, 138, 138, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 201, 201, 201, 202, 202,
	202, 202, 202, 202, 202, 202, 197, 197, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 147, 147, 147, 147, 147, 147, 196, 196,
	192, 192, 192, 192, 192, 142, 142, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 141, 141, 141,
	141, 141, 141, 141, 141, 143, 143, 143, 143, 143,
	143, 143, 143, 139, 139, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 145, 145,
	145, 145, 145, 145, 145, 145, 156, 156, 146, 146,
	154, 154, 155, 155, 155, 153, 153, 153, 150, 150,
	151, 151, 152, 152, 152, 148, 148, 148, 149, 149,
	149, 159, 177, 177, 177, 179, 179, 180, 180, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	167, 167, 203, 203, 176, 176, 176, 173, 173, 173,
	173, 173, 173, 173, 173, 166, 166, 175, 175, 174,
	174, 161, 161, 161, 161, 161, 162, 163, 163, 163,
	163, 160, 199, 199, 199, 200, 200, 164, 164, 165,
	165, 170, 170, 170, 171, 171, 171, 172, 172, 172,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 218, 218, 219, 219, 219, 219, 219,
	219, 219, 183, 181, 181, 182, 182, 16, 17, 17,
	17, 17, 17, 18, 18, 20, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 111,
	111, 108, 108, 109, 109, 110, 110, 110, 112, 112,
	112, 135, 135, 135, 22, 22, 24, 24, 25, 26,
	23, 23, 23, 23, 23, 220, 27, 28, 28, 29,
	29, 29, 33, 33, 33, 31, 31, 32, 32, 38,
	38, 37, 37, 39, 39, 39, 39, 123, 123, 123,
	122, 122, 41, 41, 42, 42, 43, 43, 44, 44,
	44, 56, 56, 92, 92, 92, 95, 95, 45, 45,
	45, 45, 46, 46, 47, 47, 48, 48, 130, 130,
	129, 129, 129, 128, 128, 50, 50, 50, 52, 51,
	51, 51, 51, 53, 53, 55, 55, 54, 54, 57,
	57, 57, 57, 58, 58, 93, 93, 40, 40, 40,
	40, 40, 40, 40, 107, 107, 60, 60, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 70, 70,
	70, 70, 70, 70, 61, 61, 61, 61, 61, 61,
	61, 36, 36, 71, 71, 71, 77, 72, 72, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 68, 68, 68, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 221, 221,
	69, 69, 69, 69, 34, 34, 34, 34, 34, 133,
	133, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 137, 137, 137, 137, 137,
	137, 137, 81, 81, 35, 35, 79, 79, 80, 82,
	82, 78, 78, 78, 63, 63, 63, 63, 63, 63,
	63, 63, 65, 65, 65, 83, 83, 84, 84, 85,
	85, 86, 86, 87, 88, 88, 88, 89, 89, 89,
	89, 90, 90, 90, 62, 62, 62, 62, 62, 62,
	91, 91, 91, 91, 96, 96, 73, 73, 75, 75,
	74, 76, 97, 97, 101, 98, 98, 102, 102, 102,
	102, 100, 100, 100, 125, 125, 125, 105, 105, 113,
	113, 114, 114, 106, 106, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 116, 116, 116, 117, 117,
	120, 120, 121, 121, 126, 126, 127, 127, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 215,
	216, 131, 132, 132, 132,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 14, 13, 14, 6, 5, 5, 5, 11,
	11, 9, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 2, 0,
	2, 2, 2, 2, 2, 0, 2, 0, 3, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 0,
	2, 4, 4, 1, 3, 3, 3, 3, 2, 3,
	1, 1, 1, 1, 2, 2, 3, 2, 4, 4,
	2, 2, 3, 2, 3, 2, 7, 8, 3, 3,
	6, 5, 8, 7, 4, 2, 4, 6, 2, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 0, 4,
	3, 4, 3, 3, 3, 3, 3, 3, 3, 2,
	4, 6, 2, 3, 2, 3, 1, 3, 0, 2,
	0, 3, 3, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 3, 2,
	2, 2, 2, 1, 1, 1, 3, 3, 2, 1,
	2, 1, 1, 1, 1, 4, 4, 4, 4, 4,
	1, 5, 2, 2, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 3, 3, 0, 1,
	0, 1, 0, 2, 1, 0, 3, 3, 0, 1,
	2, 6, 0, 1, 4, 1, 2, 1, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 1, 1, 0, 2, 5, 2, 3, 3,
	2, 3, 2, 3, 4, 1, 1, 1, 3, 3,
	2, 2, 5, 5, 8, 8, 13, 1, 1, 2,
	2, 10, 0, 1, 1, 0, 3, 0, 1, 1,
	3, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	6, 11, 13, 7, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 3,
	6, 4, 2, 4, 2, 2, 2, 2, 3, 1,
	1, 0, 1, 0, 1, 0, 2, 2, 0, 2,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 7, 1, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 0, 4, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 3, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 6,
	8, 8, 6, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 1, 2,
	1, 2, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -213, -1, -2, -6, -7, -8, -9, -10, -14,
	-15, -16, -17, -18, -20, -21, -22, -24, -25, -26,
	-23, -3, -4, 6, 7, -30, 9, 10, 30, -19,
	113, 114, 116, 115, 145, 117, 138, 49, 186, 187,
	189, 190, 26, 139, 140, 143, 144, -215, 8, 290,
	53, -214, 324, -85, 15, -29, 5, -27, -220, -27,
	-27, -27, -27, -27, -168, 53, -124, -195, 153, 282,
	119, 134, 152, 120, 136, 71, -106, 122, 124, 120,
	120, 121, 122, 282, 119, 120, -54, -126, 56, -119,
	160, 299, 21, 186, 199, 200, 191, 232, 220, 300,
	158, 217, 221, 269, 323, 65, 189, 278, 128, 164,
	141, 212, 215, 214, 206, 203, 28, 238, 306, 205,
	131, 239, 243, 249, 270, 297, 196, 197, 272, 236,
	32, 133, 301, 34, 149, 273, 241, 235, 230, 234,
	195, 229, 38, 209, 245, 244, 246, 268, 223, 159,
	248, 225, 207, 224, 18, 144, 147, 240, 242, 204,
	161, 126, 151, 305, 274, 202, 148, 162, 143, 277,
	320, 157, 190, 271, 198, 280, 37, 254, 216, 193,
	208, 194, 130, 187, 155, 227, 150, 210, 211, 233,
	192, 228, 188, 152, 145, 279, 255, 307, 226, 222,
	218, 219, 156, 122, 153, 154, 261, 262, 263, 264,
	302, 303, 275, 213, 256, 257, 166, 167, 168, 169,
	170, 171, 172, 120, 107, 221, 113, 259, 121, 32,
	151, -135, 120, -108, 154, 261, 262, 263, 264, 56,
	271, 270, 265, -126, 188, -131, -131, -131, -131, -131,
	-2, -89, 17, 16, -5, -3, -215, 6, 21, 22,
	-33, 39, 40, -28, -39, 98, -40, -126, -59, 73,
	-64, 29, 56, -119, 24, -63, -60, -78, -76, -77,
	107, 108, 96, 97, 104, 74, 109, -68, -66, -67,
	-69, 58, 57, 66, 59, 60, 61, 62, 67, 68,
	69, -120, -74, -215, 43, 44, 291, 292, 293, 294,
	298, 295, 76, 33, 281, 289, 288, 287, 285, 286,
	283, 284, 322, 125, 282, 102, 290, -106, -42, -43,
	-44, -45, -56, -77, -215, -54, 11, -49, -54, -98,
	-134, 188, -102, 271, 270, -121, -100, -120, -118, 269,
	221, 268, 56, -119, 118, 174, 309, 72, 23, 25,
	252, 258, 173, 75, 107, 16, 76, 180, 318, 319,
	106, 291, 113, 47, 283, 284, 281, 178, 293, 294,
	282, 259, 185, 20, 29, 10, 26, 139, 22, 100,
	115, 175, 79, 80, 142, 24, 140, 69, 181, 183,
	19, 50, 132, 11, 308, 13, 14, 310, 125, 124,
	91, 321, 121, 45, 8, 109, 27, 88, 41, 137,
	184, 43, 89, 17, 285, 286, 31, 298, 146, 102,
	48, 35, 73, 67, 51, 276, 179, 71, 15, 46,
	134, 182, 90, 116, 290, 44, 176, 119, 177, 6,
	296, 30, 138, 42, 120, 260, 78, 123, 68, 5,
	136, 9, 49, 52, 287, 288, 289, 33, 77, 12,
	135, 70, -169, -157, 56, -199, 318, 319, 122, -120,
	-114, 125, -114, -120, -120, -114, 290, 120, -54, -54,
	-113, 125, 56, -113, -113, -113, -54, 110, -54, 56,
	30, 282, 56, 151, 120, 152, 122, -132, -215, -121,
	-132, -132, -132, 155, 156, -132, -109, 266, 51, -132,
	-216, 55, -90, 19, 31, -40, -126, -86, -87, -40,
	-85, -2, -27, 35, -31, 22, 64, 11, -123, 72,
	71, 88, -122, 23, -120, 58, 110, -40, -61, 91,
	73, 89, 90, 75, 93, 92, 103, 96, 97, 98,
	99, 100, 101, 102, 94, 95, 106, 322, 81, 82,
	83, 84, 85, 86, 87, -107, -215, -77, -215, 111,
	112, -64, -64, -64, -64, -64, -64, -64, -215, -2,
	-72, -40, -215, -215, -215, -215, -215, -215, -215, -215,
	-215, -81, -40, -215, -221, -215, -221, -221, -221, -221,
	-221, -221, -221, -137, 107, 221, 141, 212, -140, -139,
	227, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 220, 300, -215, -215, -215, -215, -55, 27, -54,
	30, 54, -50, -52, -51, -53, 41, 45, 47, 42,
	43, 44, 48, -130, 23, -42, -215, -129, 147, -128,
	23, -126, 58, -54, -49, -217, 54, 11, 52, 54,
	-98, 188, -99, -103, 272, 274, 81, -125, -120, 58,
	29, 30, 55, 54, -158, -138, -142, -139, -144, -143,
	-145, -140, -141, 217, 221, 218, 223, 224, 225, 107,
	222, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	236, 237, 226, 238, 30, 141, 210, 211, 212, 215,
	214, 216, 213, 239, 240, 241, 242, 243, 244, 245,
	246, 202, 203, 205, 206, 207, 209, 208, 121, -54,
	-188, 52, 56, 73, 56, 51, -204, 51, 173, 174,
	-54, -54, 276, -132, 123, -54, 24, 51, -54, 56,
	56, -127, -126, -118, -132, -132, -132, -132, -132, -132,
	-132, -132, -132, -132, -111, 260, 267, -54, 9, 91,
	54, 18, 110, 54, -88, 25, 26, -89, -216, -33,
	-65, -120, 59, 62, -32, 42, -54, -40, -40, -70,
	67, 73, 68, 69, -122, 98, -127, -121, -118, -64,
	-71, -74, -77, 63, 91, 89, 90, 75, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -133, 56, 58, -137, 56, -63, -63,
	-120, -38, 22, -37, -39, -216, 54, -216, -2, -37,
	-37, -40, -40, -78, -120, -126, -78, -37, -31, -79,
	-80, 77, -78, -216, 219, -37, -38, -37, -37, -94,
	147, -54, -97, -101, -78, -43, -44, -44, -43, -44,
	41, 41, 41, 46, 41, 46, 41, -51, -126, -216,
	-57, 49, 124, 50, -215, -128, -94, 52, -42, -54,
	-102, -99, 54, 273, 275, 276, 51, 70, -40, -149,
	107, 106, -170, -171, -172, -121, 58, 59, -157, -159,
	-161, -160, -173, -162, 128, 126, 130, 131, 136, -166,
	121, 137, 67, 73, -201, 128, 51, 252, 258, 126,
	137, 136, 323, 65, 129, 308, 310, 29, -152, 325,
	247, -150, 255, -146, 53, -146, -146, 219, -146, -146,
	-146, -146, -146, -148, 221, -148, -148, -148, -148, 53,
	53, -146, -146, -146, -146, -154, 53, 204, -154, -154,
	-155, 53, -155, -120, 23, -186, 302, -187, 56, -132,
	24, -132, -54, -205, 8, 9, 10, -54, -115, 118,
	115, 116, -183, 114, 252, 221, 65, 29, 15, 291,
	147, 307, 56, 148, -54, -54, -54, -132, -110, 11,
	91, 37, -40, -40, -127, -87, -90, -105, 19, 11,
	33, 33, -37, 67, 68, 69, 110, -215, -71, -64,
	-64, -64, -36, 142, 72, -216, -216, -37, 54, -40,
	-216, -216, -216, 54, 52, 23, 54, 11, 110, 54,
	11, -216, -37, -82, -80, 79, -40, -216, -216, -216,
	-216, -216, -62, 30, 33, -2, -215, -215, -58, 54,
	12, 81, -47, -46, 51, 52, -48, 51, -46, 41,
	41, 121, 121, 121, -95, -120, -58, -42, -58, -103,
	-104, 277, 274, 280, 56, 54, -172, 81, 53, -200,
	51, 73, -164, -120, 137, -166, -166, 56, -166, 56,
	56, 67, 19, -120, 9, 137, 137, -200, 58, -126,
	-197, 309, 16, 53, -202, 53, 58, 59, 60, 67,
	-147, 66, -60, 248, 281, 284, 283, 249, 326, -151,
	256, 59, -148, -148, -146, -148, -148, -148, -149, 30,
	-149, -149, -149, -149, -156, 58, -156, -153, 302, 303,
	-153, 59, -154, 59, 51, 52, -2, -185, -184, -121,
	-190, 23, 51, -204, -131, -124, -219, 153, 127, 132,
	131, 56, 126, 130, 147, -189, 153, 127, 128, 132,
	131, 56, 121, 137, 126, 130, 147, 136, -116, -117,
	123, 23, 121, 137, 147, 118, -132, -112, 89, 12,
	-126, -126, 38, 110, -54, -41, 11, 98, -121, -38,
	-36, 72, -64, -64, -216, -39, -136, 107, 217, 141,
	212, 206, 236, 237, 223, 254, 210, 255, -133, -136,
	-64, -64, -121, -64, -64, 299, -85, 80, -40, 78,
	-96, 51, -97, -73, -75, -74, -215, -2, -91, -120,
	-95, -85, -101, -40, -40, -40, 53, -40, -215, -215,
	-215, -216, 54, -85, -58, 274, 278, 279, -171, -172,
	-175, -174, -120, 137, 10, 9, 19, 132, 126, 56,
	56, 56, -199, 136, 320, -201, 323, -147, -215, 53,
	23, 29, 59, -202, 53, -192, 322, -215, -146, 53,
	-146, 53, 53, 55, -149, -149, -148, -149, -149, -149,
	56, 107, 55, 54, 55, 210, 210, 54, 55, 54,
	-54, -120, 54, 81, -191, 19, 161, 162, -54, -205,
	-218, 121, 137, -131, -120, -131, -120, -54, -131, -120,
	128, -161, 58, -40, -58, -42, -216, -64, -216, -146,
	-146, -146, -155, -146, 197, -146, 197, -216, -216, -216,
	54, 19, -216, 54, 19, -215, -35, 296, -40, 28,
	-96, 54, -216, -216, -216, 54, 110, -216, -89, -92,
	-120, 137, -92, -92, -92, -129, -120, -89, 55, 54,
	-146, -146, -163, 157, 158, 30, 159, -163, 320, 137,
	137, -199, -200, -40, -92, 310, 54, 55, -202, 221,
	211, 250, 227, -216, 55, 55, 55, -149, -148, 58,
	-148, 257, 257, 59, 59, 53, 52, 51, -184, -172,
	123, 21, 6, 8, 9, 10, 19, 23, -120, 53,
	27, -120, -83, 13, -148, 56, -64, -64, -64, -64,
	-64, -216, 58, 137, -75, 33, -2, -215, -120, -120,
	54, 55, -216, -216, -216, -57, -177, -179, 302, -178,
	52, 133, 65, 166, 167, 168, 169, 170, 171, 172,
	-174, -88, -200, 51, 67, 160, -200, 51, -164, -120,
	-199, -215, -216, 55, 53, 59, 55, 219, -153, -149,
	-149, 55, 55, -175, -120, -54, -165, -120, 175, -207,
	-209, -7, -9, -8, -11, -10, -12, -13, 20, 179,
	180, 185, 181, 135, 53, -92, -215, 126, -84, 14,
	16, -216, -216, -216, -216, -34, 91, 302, 9, -73,
	-2, 110, -120, -176, 51, -178, 302, 53, 304, 56,
	-167, 81, 58, 81, 81, 81, 81, 81, 81, 81,
	9, 10, 53, 53, -40, -196, 159, -198, 55, 55,
	55, 53, 53, -193, 54, 52, 176, -209, -211, -120,
	-210, -120, -120, -120, -206, 35, 182, 183, 184, -59,
	-64, -175, 55, -181, -182, 147, 137, -40, -72, -216,
	300, 48, 305, -97, -216, -120, -120, -180, -178, -120,
	59, -203, 51, 70, 59, -203, -203, -203, -203, -203,
	-163, -163, -165, -175, -216, 297, 55, 187, 312, 313,
	146, 314, 159, 315, 316, -93, 321, -175, -175, -194,
	302, -120, -40, -209, 54, -212, -138, 177, -120, 11,
	11, 11, 11, -209, 186, 55, -188, -216, 54, -120,
	53, 38, 301, 306, -215, 55, 54, -200, -200, 55,
	55, 302, 59, 16, 59, 59, 59, 59, 313, 146,
	315, 16, -58, 53, 55, 55, 323, -210, -120, 178,
	27, -208, -209, -186, -182, 33, -175, 38, -120, -178,
	129, -177, 59, 59, 317, -126, -177, -92, -58, -177,
	-40, 19, -120, 80, -209, 149, 55, 302, -216, -54,
	-176, 110, -176, 55, -177, -2, 150, 305, 53, -121,
	-215, 306, -165, -64, 146, 55, -216, -216,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 699, 0, 455, 455, 455, 455, 455, 455, 0,
	-2, 753, 0, 0, 0, 0, -2, 445, 446, 0,
	448, 449, 1031, 1031, 1031, 1031, 1031, 0, 33, 34,
	1029, 1, 3, 707, 0, 0, 459, 462, 457, 0,
	753, 0, 0, 0, 81, 0, 342, 0, 0, 751,
	751, 0, 0, 751, 120, 0, 0, 0, 754, 0,
	749, 0, 749, 749, 749, 0, 404, 527, 774, 775,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 0, 0, 0, 0, 1032, 1032, 1032,
	1032, 0, 1032, 433, 422, 424, 425, 426, 427, 1032,
	442, 443, 432, 444, 447, 450, 451, 452, 453, 454,
	27, 711, 0, 0, 699, 29, 0, 455, 460, 461,
	465, 463, 464, 456, 0, 473, 477, 0, 537, 0,
	542, 544, -2, -2, 0, 579, 580, 581, 582, 583,
	0, 0, 0, 0, 0, 0, 0, 607, 608, 609,
	610, 684, 685, 686, 687, 688, 689, 690, 691, 546,
	547, 681, 731, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 672, 0, 638, 638, 638, 638, 638, 638,
	638, 638, 0, 0, 0, 0, 0, 0, 0, 484,
	486, 487, 488, 508, 0, 510, 0, 0, 41, 45,
	0, 998, 735, -2, -2, 0, 0, 772, 773, -2,
	908, -2, 770, 771, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 0, 133, 0, 0, 343, 344, 0, 121,
	0, 0, 0, 0, 0, 0, 130, 0, 1032, 0,
	0, 0, 0, 0, 0, 0, 403, 0, 405, 1032,
	1032, 1032, 1032, 1032, 1032, 1032, 1032, 414, 1033, 1034,
	415, 416, 417, 1032, 1032, 419, 0, 434, 0, 428,
	28, 1030, 22, 0, 0, 708, 0, 700, 701, 704,
	707, 27, 462, 0, 467, 466, 458, 0, 474, 0,
	0, 0, 478, 0, 480, 481, 0, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 565,
	566, 567, 568, 569, 570, 543, 0, 557, 0, 0,
	0, 599, 600, 601, 602, 603, 604, 0, 469, 27,
	0, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	465, 0, 673, 0, 629, 0, 630, 631, 632, 633,
	634, 635, 636, 637, 665, 0, 667, 668, 669, 670,
	671, 207, 208, 209, 210, 211, 212, 213, 214, 215,
	216, 233, 234, 0, 469, 0, 0, 43, 0, 526,
	0, 0, 0, 0, 0, 0, 515, 0, 0, 518,
	0, 0, 0, 0, 509, 0, 0, 529, 962, 511,
	0, 513, 514, -2, 0, 0, 0, 39, 40, 0,
	46, 998, 48, 70, 0, 0, 0, 288, 744, 745,
	746, 742, 351, 0, 138, 282, 278, 140, 141, 142,
	143, 268, 206, 268, 268, 268, 268, 268, 240, 268,
	268, 285, 285, 285, 285, 285, 249, 250, 251, 252,
	253, 254, 255, 0, 0, 225, 268, 268, 268, 229,
	268, 231, 232, 258, 259, 260, 261, 262, 263, 264,
	265, 270, 270, 270, 272, 272, 223, 224, 0, 0,
	124, 0, 1032, 0, 1032, 0, 0, 0, 92, 93,
	131, 0, 0, 370, 0, 398, 750, 0, 1032, 401,
	402, 528, 776, 777, 406, 407, 408, 409, 410, 411,
	412, 413, 418, 421, 435, 429, 430, 423, 712, 0,
	0, 0, 0, 0, 703, 705, 706, 711, 30, 465,
	0, 692, 0, 0, 0, 468, 25, 538, 539, 541,
	558, 0, 560, 562, 479, 475, 0, 682, -2, 548,
	549, 573, 574, 575, 0, 0, 0, 0, 571, 553,
	0, 584, 585, 586, 587, 588, 589, 590, 591, 592,
	593, 594, 595, 598, 649, 650, 606, 0, 596, 597,
	605, 0, 0, 470, 471, 576, 0, 730, 27, 0,
	0, 0, 0, 0, 681, 0, 0, 0, 0, 679,
	676, 0, 0, 639, 666, 0, 0, 0, 0, 0,
	0, 525, 533, 732, 0, 485, 504, 506, 0, 501,
	516, 517, 519, 0, 521, 0, 523, 524, 489, 490,
	491, 0, 0, 0, 0, 512, 533, 0, 533, 42,
	736, 47, 0, 0, 73, 74, 737, 738, 739, 740,
	289, 0, 132, 352, 354, 357, 358, 359, 134, 135,
	136, 137, 0, 345, 347, 0, 0, 0, 0, 0,
	325, 326, 145, 0, 147, 0, 0, 150, 151, 0,
	153, 155, 345, 0, 0, 0, 0, 0, 144, 0,
	284, 280, 279, 205, 0, 285, 285, 268, 285, 285,
	285, 242, 243, 288, 0, 288, 288, 288, 288, 0,
	0, 275, 275, 228, 230, 217, 0, 270, 219, 220,
	221, 0, 222, 0, 0, 86, 0, 122, 123, 87,
	752, 88, 106, 0, 94, 95, 96, 0, 1031, 119,
	0, 765, 371, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 0, 0, 397, 1032, 400, 438, 0,
	0, 0, 709, 710, 0, 702, 23, 0, 747, 748,
	693, 694, 482, 559, 561, 563, 0, 469, 550, 571,
	554, 0, 551, 0, 0, 545, 611, 0, 0, 578,
	-2, 614, 615, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 699, 0, 677, 0, 0, 628, 640, 641,
	642, 643, 724, 0, 0, -2, 0, 0, 699, 0,
	0, 0, 498, 505, 0, 0, 499, 0, 500, 520,
	522, 0, 0, 0, 0, 496, 699, 533, 38, 71,
	72, 0, 0, 78, 290, 0, 355, 0, 0, 331,
	0, 0, 0, 348, 317, 0, 0, 320, 0, 322,
	342, 146, 0, 0, 0, 152, 154, 0, 158, 159,
	0, 176, 0, 0, 165, 0, 200, 169, 170, 171,
	172, 173, 174, 0, 268, 268, 196, 0, 283, 139,
	281, 0, 288, 288, 285, 288, 288, 288, 244, 0,
	245, 246, 247, 248, 0, 266, 0, 226, 0, 0,
	227, 0, 218, 0, 0, 0, -2, 125, 126, 0,
	109, 0, 0, 0, 360, 0, 1031, 0, 385, 386,
	387, 388, 389, 390, 391, 1031, 0, 372, 373, 374,
	375, 376, 377, 378, 379, 380, 381, 382, 0, 1031,
	766, 767, 768, 769, 0, 0, 399, 420, 0, 0,
	436, 437, 713, 0, 24, 533, 0, 476, 683, 0,
	552, 0, 572, 555, 612, 472, 0, 268, 268, 654,
	268, 272, 657, 658, 268, 660, 268, 663, 0, 0,
	0, 0, 682, 0, 0, 0, 674, 627, 680, 0,
	31, 0, 724, 714, 726, 728, 0, 27, 0, 720,
	0, 707, 733, 534, 734, 502, 0, 507, 0, 0,
	0, 510, 0, 707, 37, 75, 76, 77, 353, 356,
	0, 327, 268, 268, 0, 0, 0, 0, 0, 318,
	319, 321, 323, 342, 164, 148, 345, 149, 0, 0,
	0, 177, 0, 0, 0, 168, 0, 0, 192, 0,
	194, 0, 0, 269, 235, 236, 288, 237, 238, 239,
	286, 287, 285, 0, 285, 0, 0, 0, 273, 0,
	0, 0, 0, 0, 0, 0, 107, 108, 0, 0,
	0, 383, 384, 364, 0, 365, 367, 368, 369, 0,
	347, 363, 439, 440, 695, 483, 613, 556, 616, 651,
	285, 655, 656, 659, 661, 662, 664, 618, 617, 619,
	0, 0, 622, 0, 0, 0, 0, 0, 678, 0,
	32, 0, 729, -2, 0, 0, 0, 44, 35, 0,
	493, 494, 0, 0, 0, 529, 497, 36, 292, 0,
	704, 330, 345, 337, 338, 0, 0, 345, 346, 347,
	342, 324, 0, 0, 0, 161, 0, 166, 0, 0,
	275, 203, 204, 175, 193, 195, 197, 241, 288, 267,
	288, 276, 277, 0, 0, 0, 0, 0, 127, 128,
	0, 110, 111, 112, 113, 114, 0, 0, 0, 0,
	0, 348, 697, 0, 652, 653, 0, 0, 0, 0,
	644, 626, 675, 0, 727, 0, -2, 0, 722, 721,
	0, 503, 530, 531, 532, 492, 314, 293, 0, 295,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 0,
	328, 329, 332, 0, 339, 340, 333, 0, 0, 348,
	0, 0, 198, 160, 178, 0, 0, 201, 202, 256,
	257, 271, 274, 0, 0, 0, 115, 349, 0, 91,
	97, 99, 100, 101, 102, 103, 104, 105, 0, 0,
	0, 0, 61, 0, 0, 0, 0, 0, 26, 0,
	0, 620, 621, 623, 624, 0, 0, 0, 0, 717,
	27, 0, 495, 291, 0, 296, 0, 0, 0, 299,
	0, 311, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 156, 0, 0, 163, 167,
	535, 0, 0, 117, 0, 0, 0, 98, 49, 54,
	51, 56, 57, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 393, 0, 0, 698, 696, 625,
	0, 0, 0, 725, -2, 723, 315, 0, 297, 302,
	300, 303, 312, 313, 304, 305, 306, 307, 308, 309,
	345, 345, 0, 0, 157, 199, 162, 0, 0, 0,
	0, 0, 0, 189, 0, 533, 0, 0, 0, 89,
	0, 350, 116, 90, 0, 0, 53, 55, 59, 62,
	63, 64, 65, 66, 0, 361, 124, 392, 0, 0,
	0, 645, 0, 648, 0, 294, 0, 334, 335, 0,
	292, 0, 180, 0, 182, 183, 184, 185, 186, 187,
	188, 0, 292, 0, 533, 292, 0, 52, 0, 0,
	0, 0, 68, 366, 394, 0, 0, 646, 0, 298,
	0, 314, 179, 181, 190, 0, 314, 0, 292, 83,
	118, 0, 60, 67, 69, 0, 362, 0, 316, 0,
	341, 0, 82, 536, 84, -2, 0, 0, 0, 191,
	0, 647, 0, 0, 0, 336, 395, 396,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 324,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 325, 3, 326, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:354
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:359
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:360
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:364
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:387
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:395
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:399
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:405
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:412
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:418
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:422
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:428
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:432
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:439
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:451
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:463
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:467
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:473
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:479
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:483
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:487
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:492
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:493
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:497
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:501
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:506
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:510
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:516
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:520
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:524
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:528
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:534
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:538
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:551
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:555
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:561
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:566
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:570
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:576
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:583
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:590
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:597
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:605
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:615
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:619
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:623
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:627
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:631
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:637
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:644
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:654
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:658
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:665
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:669
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:675
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:679
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:683
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:689
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:693
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:697
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:701
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:707
		{
			yyVAL.str = SessionStr
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:711
		{
			yyVAL.str = GlobalStr
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:717
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 82:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:722
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 83:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:742
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 84:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:758
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 85:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:773
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:781
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:789
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:793
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:797
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 90:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:808
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].str,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 91:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:818
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].str,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:830
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:834
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:840
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:844
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:848
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:854
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:858
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:864
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:875
		{
			yyVAL.bytes = nil
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:879
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:883
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:888
		{
			yyVAL.bytes = nil
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:892
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:896
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:900
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:904
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:908
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:913
		{
			yyVAL.expr = nil
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:917
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:922
		{
			yyVAL.expr = nil
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:926
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:931
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:935
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:940
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:944
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:950
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:955
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:960
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:966
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:971
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:977
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:982
		{
			yyVAL.bytes = nil
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:986
		{
			yyVAL.bytes = nil
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:992
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:999
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1006
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1011
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1015
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1019
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1023
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1029
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1034
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1045
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1057
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1062
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1067
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1072
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1077
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1082
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1087
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1092
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1097
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1102
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1107
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 156:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1112
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[5].expr), NotForReplication: bool(yyDollar[3].boolVal)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[7].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 157:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1118
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[7].expr), ConstraintName: yyDollar[3].colIdent, NotForReplication: bool(yyDollar[5].boolVal)}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1123
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1128
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1133
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1139
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1145
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1151
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1157
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1164
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1168
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1172
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1178
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1182
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1186
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1190
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1194
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1198
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1202
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1206
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1212
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1216
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1221
		{
			yyVAL.sequence = &Sequence{}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1225
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1230
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1235
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1240
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1245
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1250
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1255
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1260
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1265
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1270
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1275
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1280
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1285
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1292
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1296
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1300
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1304
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1308
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1312
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1317
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1321
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1326
		{
			yyVAL.bytes = nil
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1336
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1341
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1347
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1351
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1355
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1359
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1363
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1367
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1371
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1375
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1379
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1383
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1389
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1395
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1401
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1407
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1413
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1419
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1425
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1429
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1435
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1439
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1443
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1447
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1451
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1455
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1459
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1463
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1469
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1473
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1479
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1483
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1487
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1491
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1495
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1499
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1503
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1507
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1511
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1515
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1535
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1547
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1551
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1555
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1559
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1563
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1568
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1578
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1590
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1594
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1598
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1602
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1608
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1613
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1618
		{
			yyVAL.optVal = nil
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1622
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1627
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 271:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1631
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1639
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1643
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1649
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1657
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1661
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1665
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1670
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1674
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1679
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1683
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1688
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1692
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1696
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1701
		{
			yyVAL.str = ""
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1705
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1709
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1714
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1718
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1722
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1728
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1733
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1737
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1741
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1747
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1751
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1757
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1761
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1767
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1771
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1776
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1780
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1784
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1788
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1792
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1796
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1800
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1804
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1808
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1814
		{
			yyVAL.str = ""
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1818
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1824
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1828
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1834
		{
			yyVAL.indexPartition = nil
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1838
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 316:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1842
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1848
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1852
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1856
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1860
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1864
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1868
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1872
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1876
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1882
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1886
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1892
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1896
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1902
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1907
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1913
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1918
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 333:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1925
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 334:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1932
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 335:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1939
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 336:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1948
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1960
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1964
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1968
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1972
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 341:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:1978
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1989
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1993
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1997
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2003
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2007
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2012
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2019
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2023
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2028
		{
			yyVAL.str = ""
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2032
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2036
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2044
		{
			yyVAL.str = yyDollar[1].str
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2048
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2052
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2058
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2062
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2066
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 360:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2072
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 361:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:2076
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 362:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:2090
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 363:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2104
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 364:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2113
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 365:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2117
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 366:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:2121
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 367:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2134
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 368:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2144
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 369:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2149
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2154
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 371:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2158
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 392:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2190
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2196
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2200
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 395:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2206
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 396:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2210
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 397:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2216
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2222
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 399:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2230
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2235
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2243
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2247
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2253
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2257
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2262
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2268
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2272
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2276
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2281
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2285
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2289
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2293
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2297
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2301
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2305
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2309
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2313
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2317
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2321
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2325
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2335
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2339
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2343
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2347
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2351
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2355
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2359
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2369
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2375
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2379
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2385
		{
			yyVAL.str = ""
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2389
		{
			yyVAL.str = "extended "
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2395
		{
			yyVAL.str = ""
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2399
		{
			yyVAL.str = "full "
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2405
		{
			yyVAL.str = ""
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2409
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2413
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2419
		{
			yyVAL.showFilter = nil
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2423
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2427
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2433
		{
			yyVAL.str = ""
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2437
		{
			yyVAL.str = SessionStr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2441
		{
			yyVAL.str = GlobalStr
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2447
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2451
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2457
		{
			yyVAL.statement = &Begin{}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2461
		{
			yyVAL.statement = &Begin{}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2467
		{
			yyVAL.statement = &Commit{}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2473
		{
			yyVAL.statement = &Rollback{}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2479
		{
			yyVAL.statement = &OtherRead{}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2483
		{
			yyVAL.statement = &OtherRead{}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2487
		{
			yyVAL.statement = &OtherRead{}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2491
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2495
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2500
		{
			setAllowComments(yylex, true)
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2504
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2510
		{
			yyVAL.bytes2 = nil
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2514
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2520
		{
			yyVAL.str = UnionStr
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2524
		{
			yyVAL.str = UnionAllStr
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2528
		{
			yyVAL.str = UnionDistinctStr
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2533
		{
			yyVAL.str = ""
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2537
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2541
		{
			yyVAL.str = SQLCacheStr
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2546
		{
			yyVAL.str = ""
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2550
		{
			yyVAL.str = DistinctStr
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2555
		{
			yyVAL.str = ""
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2559
		{
			yyVAL.str = StraightJoinHint
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2564
		{
			yyVAL.selectExprs = nil
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2568
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2574
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2578
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2584
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2588
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2592
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2596
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2601
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2605
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2609
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2616
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2621
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2625
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2631
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2635
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2645
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2649
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2653
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2659
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 492:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2663
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2669
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2674
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2678
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2684
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2688
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2701
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2705
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2709
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2713
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2719
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2721
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2725
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2727
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2731
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2733
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2736
		{
			yyVAL.empty = struct{}{}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2738
		{
			yyVAL.empty = struct{}{}
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2741
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2745
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2749
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2756
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2762
		{
			yyVAL.str = JoinStr
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2766
		{
			yyVAL.str = JoinStr
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2770
		{
			yyVAL.str = JoinStr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2776
		{
			yyVAL.str = StraightJoinStr
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2782
		{
			yyVAL.str = LeftJoinStr
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2786
		{
			yyVAL.str = LeftJoinStr
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2790
		{
			yyVAL.str = RightJoinStr
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2794
		{
			yyVAL.str = RightJoinStr
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2800
		{
			yyVAL.str = NaturalJoinStr
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2804
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2814
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2818
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2824
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2828
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2833
		{
			yyVAL.indexHints = nil
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2837
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 531:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2841
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 532:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2845
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2850
		{
			yyVAL.expr = nil
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2854
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2859
		{
			yyVAL.columns = nil
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2863
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2869
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2873
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2877
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2881
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2885
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2889
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2893
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2899
		{
			yyVAL.str = ""
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2903
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2909
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2913
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2919
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2923
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2927
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2931
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2935
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2939
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2943
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2947
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 556:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2951
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2955
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2961
		{
			yyVAL.str = IsNullStr
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2965
		{
			yyVAL.str = IsNotNullStr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2969
		{
			yyVAL.str = IsTrueStr
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2973
		{
			yyVAL.str = IsNotTrueStr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2977
		{
			yyVAL.str = IsFalseStr
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2981
		{
			yyVAL.str = IsNotFalseStr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2987
		{
			yyVAL.str = EqualStr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2991
		{
			yyVAL.str = LessThanStr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2995
		{
			yyVAL.str = GreaterThanStr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2999
		{
			yyVAL.str = LessEqualStr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3003
		{
			yyVAL.str = GreaterEqualStr
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3007
		{
			yyVAL.str = NotEqualStr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3011
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3016
		{
			yyVAL.expr = nil
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3020
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3026
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3030
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3034
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3040
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3046
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3050
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3056
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3060
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3064
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3068
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3072
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3076
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3080
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3084
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3088
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3092
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3096
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3100
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3104
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3108
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3112
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3116
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3120
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3124
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3128
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3132
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3136
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3140
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3144
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3152
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3166
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3170
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3174
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3182
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3196
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3200
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 613:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3204
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3214
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3218
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 616:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3222
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 617:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3226
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 618:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3230
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 619:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3234
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 620:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3238
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 621:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3242
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 622:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3246
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 623:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3250
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 624:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3254
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 625:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:3258
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 626:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3262
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 627:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3266
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3270
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3280
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3284
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3288
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3292
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3297
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3302
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3307
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3312
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3316
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3330
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3334
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3338
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3342
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3348
		{
			yyVAL.str = ""
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3352
		{
			yyVAL.str = BooleanModeStr
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3356
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 647:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3360
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3364
		{
			yyVAL.str = QueryExpansionStr
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3370
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3374
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3380
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3384
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3388
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3392
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3396
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3400
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3406
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3410
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3414
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3418
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3422
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3426
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3430
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3434
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3440
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3444
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3448
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3452
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3456
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3460
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3464
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3469
		{
			yyVAL.expr = nil
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3473
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3478
		{
			yyVAL.str = string("")
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3482
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3488
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3492
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3498
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3503
		{
			yyVAL.expr = nil
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3507
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3513
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3517
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 683:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3521
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3527
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3531
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3535
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3539
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3543
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3547
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3551
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3555
		{
			yyVAL.expr = &NullVal{}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3561
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3570
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3574
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3579
		{
			yyVAL.exprs = nil
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3583
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3588
		{
			yyVAL.expr = nil
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3592
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3597
		{
			yyVAL.orderBy = nil
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3601
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3607
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3611
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3617
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3622
		{
			yyVAL.str = AscScr
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3626
		{
			yyVAL.str = AscScr
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3630
		{
			yyVAL.str = DescScr
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3635
		{
			yyVAL.limit = nil
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3639
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3643
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3647
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3652
		{
			yyVAL.str = ""
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3656
		{
			yyVAL.str = ForUpdateStr
		}
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3660
		{
			yyVAL.str = ShareModeStr
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3673
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3677
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3681
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 717:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3686
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3690
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 719:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3694
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3701
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3705
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3709
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 723:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3713
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3718
		{
			yyVAL.updateExprs = nil
		}
	case 725:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3722
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3728
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3732
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3738
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3742
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3748
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3754
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3764
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3768
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3774
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3780
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3784
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3790
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3794
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3798
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3802
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3809
		{
			yyVAL.bytes = []byte("charset")
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3816
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3820
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3824
		{
			yyVAL.expr = &Default{}
		}
	case 749:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3833
		{
			yyVAL.byt = 0
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3835
		{
			yyVAL.byt = 1
		}
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3838
		{
			yyVAL.empty = struct{}{}
		}
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3840
		{
			yyVAL.empty = struct{}{}
		}
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3843
		{
			yyVAL.str = ""
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3845
		{
			yyVAL.str = IgnoreStr
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3849
		{
			yyVAL.empty = struct{}{}
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3851
		{
			yyVAL.empty = struct{}{}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3853
		{
			yyVAL.empty = struct{}{}
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3855
		{
			yyVAL.empty = struct{}{}
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3857
		{
			yyVAL.empty = struct{}{}
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3859
		{
			yyVAL.empty = struct{}{}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3861
		{
			yyVAL.empty = struct{}{}
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3863
		{
			yyVAL.empty = struct{}{}
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3865
		{
			yyVAL.empty = struct{}{}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3867
		{
			yyVAL.empty = struct{}{}
		}
	case 765:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3870
		{
			yyVAL.empty = struct{}{}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3872
		{
			yyVAL.empty = struct{}{}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3874
		{
			yyVAL.empty = struct{}{}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3878
		{
			yyVAL.empty = struct{}{}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3880
		{
			yyVAL.empty = struct{}{}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3884
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3888
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3895
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3901
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3905
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3912
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4189
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4198
		{
			decNesting(yylex)
		}
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:4203
		{
			forceEOF(yylex)
		}
	case 1032:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:4208
		{
			forceEOF(yylex)
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4212
		{
			forceEOF(yylex)
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4216
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
