// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	newQualifierColName  *NewQualifierColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
	blockStatement       []Statement
	localVariable        *LocalVariable
	localVariables       []*LocalVariable
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const REFERENCES = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const POLICY = 57459
const WHILE = 57460
const UNIQUE = 57461
const KEY = 57462
const SHOW = 57463
const DESCRIBE = 57464
const EXPLAIN = 57465
const DATE = 57466
const ESCAPE = 57467
const REPAIR = 57468
const OPTIMIZE = 57469
const TRUNCATE = 57470
const MAXVALUE = 57471
const PARTITION = 57472
const REORGANIZE = 57473
const LESS = 57474
const THAN = 57475
const PROCEDURE = 57476
const TRIGGER = 57477
const TYPE = 57478
const VINDEX = 57479
const VINDEXES = 57480
const STATUS = 57481
const VARIABLES = 57482
const RESTRICT = 57483
const CASCADE = 57484
const NO = 57485
const ACTION = 57486
const PERMISSIVE = 57487
const RESTRICTIVE = 57488
const PUBLIC = 57489
const CURRENT_USER = 57490
const SESSION_USER = 57491
const PAD_INDEX = 57492
const FILLFACTOR = 57493
const IGNORE_DUP_KEY = 57494
const STATISTICS_NORECOMPUTE = 57495
const STATISTICS_INCREMENTAL = 57496
const ALLOW_ROW_LOCKS = 57497
const ALLOW_PAGE_LOCKS = 57498
const BEFORE = 57499
const AFTER = 57500
const EACH = 57501
const ROW = 57502
const SCROLL = 57503
const CURSOR = 57504
const OPEN = 57505
const CLOSE = 57506
const FETCH = 57507
const PRIOR = 57508
const FIRST = 57509
const LAST = 57510
const DEALLOCATE = 57511
const BEGIN = 57512
const START = 57513
const TRANSACTION = 57514
const COMMIT = 57515
const ROLLBACK = 57516
const BIT = 57517
const TINYINT = 57518
const SMALLINT = 57519
const SMALLSERIAL = 57520
const MEDIUMINT = 57521
const INT = 57522
const INTEGER = 57523
const SERIAL = 57524
const BIGINT = 57525
const BIGSERIAL = 57526
const INTNUM = 57527
const REAL = 57528
const DOUBLE = 57529
const PRECISION = 57530
const FLOAT_TYPE = 57531
const DECIMAL = 57532
const NUMERIC = 57533
const SMALLMONEY = 57534
const MONEY = 57535
const TIME = 57536
const TIMESTAMP = 57537
const DATETIME = 57538
const YEAR = 57539
const DATETIMEOFFSET = 57540
const DATETIME2 = 57541
const SMALLDATETIME = 57542
const CHAR = 57543
const VARCHAR = 57544
const VARYING = 57545
const BOOL = 57546
const CHARACTER = 57547
const VARBINARY = 57548
const NCHAR = 57549
const NVARCHAR = 57550
const NTEXT = 57551
const UUID = 57552
const TEXT = 57553
const TINYTEXT = 57554
const MEDIUMTEXT = 57555
const LONGTEXT = 57556
const CITEXT = 57557
const BLOB = 57558
const TINYBLOB = 57559
const MEDIUMBLOB = 57560
const LONGBLOB = 57561
const JSON = 57562
const JSONB = 57563
const ENUM = 57564
const GEOMETRY = 57565
const POINT = 57566
const LINESTRING = 57567
const POLYGON = 57568
const GEOMETRYCOLLECTION = 57569
const MULTIPOINT = 57570
const MULTILINESTRING = 57571
const MULTIPOLYGON = 57572
const ARRAY = 57573
const NOW = 57574
const GETDATE = 57575
const BPCHAR = 57576
const NULLX = 57577
const AUTO_INCREMENT = 57578
const APPROXNUM = 57579
const SIGNED = 57580
const UNSIGNED = 57581
const ZEROFILL = 57582
const ZONE = 57583
const AUTOINCREMENT = 57584
const DATABASES = 57585
const TABLES = 57586
const VITESS_KEYSPACES = 57587
const VITESS_SHARDS = 57588
const VITESS_TABLETS = 57589
const VSCHEMA_TABLES = 57590
const EXTENDED = 57591
const FULL = 57592
const PROCESSLIST = 57593
const NAMES = 57594
const CHARSET = 57595
const GLOBAL = 57596
const SESSION = 57597
const ISOLATION = 57598
const LEVEL = 57599
const READ = 57600
const WRITE = 57601
const ONLY = 57602
const REPEATABLE = 57603
const COMMITTED = 57604
const UNCOMMITTED = 57605
const SERIALIZABLE = 57606
const NEW = 57607
const CURRENT_TIMESTAMP = 57608
const DATABASE = 57609
const CURRENT_DATE = 57610
const CURRENT_TIME = 57611
const LOCALTIME = 57612
const LOCALTIMESTAMP = 57613
const UTC_DATE = 57614
const UTC_TIME = 57615
const UTC_TIMESTAMP = 57616
const REPLACE = 57617
const CONVERT = 57618
const CAST = 57619
const SUBSTR = 57620
const SUBSTRING = 57621
const GROUP_CONCAT = 57622
const SEPARATOR = 57623
const INHERIT = 57624
const MATCH = 57625
const AGAINST = 57626
const BOOLEAN = 57627
const LANGUAGE = 57628
const WITH = 57629
const WITHOUT = 57630
const PARSER = 57631
const QUERY = 57632
const EXPANSION = 57633
const UNUSED = 57634
const VIRTUAL = 57635
const GENERATED = 57636
const ALWAYS = 57637
const IDENTITY = 57638
const SEQUENCE = 57639
const INCREMENT = 57640
const MINVALUE = 57641
const CACHE = 57642
const CYCLE = 57643
const OWNED = 57644
const NONE = 57645
const CLUSTERED = 57646
const NONCLUSTERED = 57647
const REPLICATION = 57648
const INCLUDE = 57649
const HOLDLOCK = 57650
const NOLOCK = 57651
const NOWAIT = 57652
const PAGLOCK = 57653
const ROWLOCK = 57654
const TABLELOCK = 57655
const TYPECAST = 57656
const CHECK = 57657

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	122, 139,
	-2, 129,
	-1, 36,
	156, 454,
	157, 454,
	-2, 444,
	-1, 272,
	110, 800,
	-2, 796,
	-1, 273,
	110, 801,
	-2, 797,
	-1, 345,
	81, 1011,
	-2, 81,
	-1, 346,
	81, 962,
	-2, 82,
	-1, 352,
	81, 941,
	-2, 767,
	-1, 354,
	81, 985,
	-2, 769,
	-1, 674,
	52, 41,
	54, 41,
	-2, 43,
	-1, 835,
	110, 803,
	-2, 799,
	-1, 1081,
	5, 28,
	-2, 599,
	-1, 1106,
	5, 27,
	-2, 740,
	-1, 1210,
	5, 27,
	-2, 87,
	-1, 1431,
	5, 28,
	-2, 741,
	-1, 1524,
	5, 27,
	-2, 743,
	-1, 1683,
	5, 28,
	-2, 744,
	-1, 1815,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 16205

var yyAct = [...]int{
	356, 1778, 1777, 1619, 1109, 1536, 1014, 765, 1673, 1577,
	1539, 1327, 1658, 900, 1437, 532, 1143, 601, 268, 251,
	1458, 600, 3, 1122, 1441, 304, 53, 1298, 1201, 277,
	484, 811, 1146, 1328, 918, 90, 1212, 276, 90, 21,
	1299, 1168, 1295, 938, 668, 1009, 666, 245, 943, 949,
	1023, 942, 871, 1022, 1174, 1271, 963, 280, 860, 1073,
	273, 1004, 90, 90, 1690, 1127, 901, 66, 771, 250,
	1198, 684, 1114, 888, 90, 538, 868, 1729, 837, 90,
	683, 90, 482, 351, 344, 897, 519, 90, 552, 670,
	655, 246, 247, 248, 249, 255, 544, 958, 704, 1422,
	275, 332, 699, 341, 624, 339, 331, 1182, 330, 1798,
	1055, 976, 264, 52, 560, 260, 563, 1770, 1353, 335,
	1716, 1464, 578, 579, 580, 581, 582, 583, 584, 530,
	561, 562, 559, 565, 564, 574, 575, 567, 568, 569,
	570, 571, 572, 573, 566, 576, 1341, 576, 1340, 1471,
	347, 1610, 565, 564, 574, 575, 567, 568, 569, 570,
	571, 572, 573, 566, 1421, 531, 576, 485, 486, 1166,
	1705, 1823, 565, 564, 574, 575, 567, 568, 569, 570,
	571, 572, 573, 566, 1747, 979, 576, 870, 1763, 1818,
	1681, 1418, 531, 992, 1442, 1443, 1444, 1445, 1446, 1447,
	1623, 1624, 565, 564, 574, 575, 567, 568, 569, 570,
	571, 572, 573, 566, 1202, 1203, 576, 569, 570, 571,
	572, 573, 566, 566, 90, 576, 576, 517, 1756, 565,
	564, 574, 575, 567, 568, 569, 570, 571, 572, 573,
	566, 1680, 1806, 576, 1015, 1720, 1123, 1746, 1290, 1704,
	1425, 496, 1321, 273, 273, 976, 564, 574, 575, 567,
	568, 569, 570, 571, 572, 573, 566, 1322, 1323, 576,
	273, 978, 685, 1135, 686, 931, 1134, 965, 541, 1136,
	531, 540, 273, 273, 273, 273, 273, 273, 273, 932,
	933, 972, 527, 961, 1490, 1351, 802, 1513, 1489, 962,
	1170, 1171, 1172, 803, 1184, 981, 273, 993, 1175, 1173,
	300, 301, 1568, 615, 983, 273, 1373, 565, 564, 574,
	575, 567, 568, 569, 570, 571, 572, 573, 566, 892,
	90, 576, 587, 485, 486, 1372, 1643, 90, 90, 90,
	1414, 574, 575, 567, 568, 569, 570, 571, 572, 573,
	566, 244, 968, 576, 964, 973, 1412, 1181, 1762, 1821,
	1764, 1738, 970, 969, 1611, 1775, 512, 1653, 337, 1005,
	577, 1579, 577, 565, 564, 574, 575, 567, 568, 569,
	570, 571, 572, 573, 566, 1663, 773, 576, 773, 76,
	1178, 577, 1180, 1179, 335, 567, 568, 569, 570, 571,
	572, 573, 566, 87, 1555, 576, 1383, 1384, 1642, 1472,
	1817, 577, 523, 524, 1343, 85, 81, 82, 83, 1804,
	772, 1674, 1249, 629, 1461, 898, 1246, 630, 1675, 347,
	514, 340, 516, 302, 1521, 1466, 1419, 70, 74, 1465,
	1160, 577, 494, 1389, 675, 1159, 681, 498, 1148, 499,
	577, 577, 71, 1624, 75, 506, 520, 521, 522, 1390,
	525, 513, 515, 993, 1477, 1165, 1153, 529, 577, 1334,
	72, 73, 68, 1755, 1476, 1787, 1398, 959, 1601, 966,
	1479, 986, 79, 1335, 501, 967, 490, 1498, 90, 1480,
	487, 1177, 1181, 960, 577, 1679, 90, 350, 90, 781,
	1126, 90, 488, 1478, 90, 492, 493, 1125, 90, 565,
	564, 574, 575, 567, 568, 569, 570, 571, 572, 573,
	566, 1006, 1151, 576, 1247, 1178, 1245, 1180, 1179, 90,
	78, 959, 79, 1664, 1665, 1666, 1124, 974, 497, 975,
	1248, 774, 775, 774, 775, 763, 223, 960, 90, 80,
	273, 273, 1459, 1460, 1462, 1250, 577, 273, 971, 273,
	814, 697, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 1810, 577, 1615,
	84, 589, 590, 1434, 1258, 838, 1089, 959, 1706, 1067,
	809, 790, 508, 688, 511, 57, 270, 599, 556, 273,
	919, 921, 69, 960, 273, 273, 273, 273, 273, 273,
	273, 273, 577, 507, 1050, 273, 806, 839, 788, 1367,
	59, 60, 61, 62, 63, 876, 940, 939, 1254, 551,
	577, 617, 618, 619, 620, 621, 622, 623, 881, 884,
	835, 1635, 831, 834, 890, 273, 273, 273, 273, 1634,
	90, 1633, 273, 90, 90, 90, 90, 90, 816, 1632,
	1631, 350, 350, 350, 350, 90, 350, 833, 90, 844,
	1368, 815, 90, 350, 1630, 920, 629, 90, 90, 1710,
	630, 902, 863, 842, 843, 841, 872, 1629, 273, 876,
	865, 866, 1627, 1712, 1051, 1380, 1137, 1085, 650, 1084,
	554, 1112, 531, 812, 813, 1253, 687, 674, 886, 1814,
	335, 335, 335, 335, 335, 1292, 550, 549, 550, 549,
	549, 1707, 894, 926, 1145, 335, 780, 889, 550, 549,
	873, 875, 1816, 551, 335, 551, 551, 791, 792, 793,
	794, 795, 796, 797, 798, 551, 891, 1557, 577, 550,
	549, 799, 800, 1086, 915, 904, 905, 1553, 907, 903,
	924, 923, 906, 929, 1144, 928, 551, 347, 889, 1145,
	1096, 90, 768, 90, 1554, 937, 350, 500, 947, 1145,
	90, 944, 90, 690, 489, 90, 1145, 808, 550, 549,
	50, 1156, 877, 878, 1691, 1294, 917, 546, 885, 1757,
	840, 550, 549, 1790, 1272, 551, 1011, 77, 273, 273,
	273, 273, 1789, 1692, 1761, 827, 829, 830, 551, 1007,
	1008, 828, 273, 807, 1064, 1065, 1066, 1760, 1628, 1483,
	1057, 1520, 893, 1185, 895, 896, 1759, 1693, 1274, 1155,
	550, 549, 1758, 273, 273, 273, 1689, 1540, 1708, 1709,
	1711, 1713, 1714, 542, 1028, 491, 764, 551, 1566, 495,
	1542, 503, 504, 505, 777, 1492, 778, 838, 329, 782,
	273, 1491, 785, 1482, 1349, 273, 1207, 1185, 591, 592,
	593, 594, 595, 596, 597, 1205, 1056, 273, 1185, 861,
	273, 862, 1487, 835, 1400, 1199, 834, 804, 1162, 839,
	1651, 1828, 1528, 1812, 1276, 1455, 1805, 531, 1281, 1625,
	1275, 994, 995, 996, 997, 1273, 823, 703, 1338, 1106,
	1069, 1279, 1455, 1769, 1455, 1768, 90, 1337, 1541, 1129,
	1336, 1131, 350, 1154, 1277, 1278, 1455, 1754, 1651, 1753,
	1750, 1749, 1646, 350, 350, 350, 350, 350, 350, 350,
	350, 1138, 1280, 1282, 1742, 531, 1645, 350, 350, 1455,
	1739, 1095, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1528,
	1671, 1573, 1130, 1017, 90, 1455, 1647, 818, 864, 1119,
	1528, 1563, 1572, 335, 1528, 531, 1567, 554, 1161, 787,
	350, 1140, 1531, 1530, 1076, 1018, 786, 1020, 1077, 1528,
	1529, 1484, 1132, 1455, 1454, 1474, 1081, 1082, 1083, 1063,
	1318, 531, 1360, 1048, 1176, 1092, 769, 266, 899, 767,
	1098, 1433, 531, 1099, 1100, 1101, 1102, 1376, 1375, 944,
	1204, 867, 509, 350, 502, 1210, 1192, 483, 1194, 1195,
	1196, 1197, 882, 882, 1370, 1371, 927, 54, 882, 1370,
	1369, 90, 90, 1149, 1150, 1152, 1652, 1078, 1651, 90,
	1079, 531, 293, 292, 295, 296, 297, 298, 1206, 273,
	1200, 294, 299, 1505, 1093, 273, 273, 1219, 652, 531,
	273, 874, 531, 695, 694, 882, 1079, 1110, 273, 273,
	273, 273, 273, 925, 874, 677, 1218, 273, 1220, 1538,
	1296, 1111, 1213, 1110, 1217, 273, 678, 1727, 1261, 1091,
	23, 273, 273, 273, 350, 1429, 273, 652, 1297, 273,
	1291, 1473, 350, 1379, 1236, 1374, 982, 1139, 350, 1302,
	1265, 1300, 1270, 1111, 902, 1320, 1306, 1523, 273, 1021,
	902, 1027, 1284, 652, 1283, 1264, 23, 679, 1045, 677,
	1046, 1079, 1090, 1047, 1263, 836, 1319, 50, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 835, 1305, 1110, 1287, 1307, 1186, 1187,
	1088, 1189, 1190, 1191, 1216, 1339, 930, 1217, 1079, 1237,
	1326, 1325, 651, 50, 1239, 1232, 1233, 1012, 1240, 1235,
	1234, 350, 680, 350, 1242, 1238, 1226, 1176, 1269, 90,
	703, 1350, 23, 1344, 1342, 1241, 652, 90, 810, 350,
	1494, 1493, 1231, 1087, 50, 1819, 944, 257, 944, 1767,
	1361, 1362, 1744, 1364, 1365, 1366, 1104, 1620, 1649, 1105,
	483, 1648, 1639, 350, 90, 657, 660, 661, 662, 658,
	1638, 659, 663, 1598, 1565, 273, 1507, 1317, 983, 50,
	1010, 1359, 90, 1358, 1356, 1402, 1346, 273, 1386, 1391,
	535, 539, 1387, 1313, 50, 1251, 1227, 1223, 1393, 1311,
	1228, 1225, 1224, 1208, 1209, 766, 75, 557, 1005, 1167,
	1142, 999, 1396, 1115, 1116, 273, 998, 1229, 65, 1495,
	1399, 1296, 273, 1118, 1222, 959, 784, 770, 1403, 528,
	954, 912, 953, 822, 955, 956, 913, 1121, 90, 335,
	957, 960, 1410, 602, 1120, 909, 1436, 908, 910, 1448,
	1449, 1450, 613, 911, 914, 1784, 661, 662, 1745, 1453,
	1428, 261, 262, 1257, 1540, 1263, 273, 1052, 657, 660,
	661, 662, 658, 1463, 659, 663, 1128, 1542, 1115, 1116,
	1468, 1470, 1451, 1782, 545, 1062, 1061, 533, 1193, 693,
	510, 1467, 1348, 1427, 1140, 1347, 350, 543, 1776, 534,
	812, 813, 1363, 1508, 1019, 783, 1215, 1147, 1500, 1176,
	1501, 1502, 1503, 1475, 1404, 1013, 776, 665, 1157, 258,
	259, 1406, 545, 1499, 1799, 1504, 1382, 1485, 1333, 1060,
	252, 1765, 944, 1415, 1416, 1417, 1496, 1059, 1420, 273,
	273, 1604, 273, 273, 273, 1541, 253, 1259, 1039, 1497,
	54, 1430, 1431, 1432, 1603, 1435, 1511, 1111, 1735, 1070,
	1071, 1072, 1038, 1024, 1025, 1026, 56, 1734, 1733, 350,
	1732, 1332, 1331, 1637, 1524, 1300, 547, 1636, 1612, 1543,
	1544, 1545, 1546, 1547, 1548, 1549, 1213, 944, 1158, 1043,
	1522, 805, 273, 1586, 8, 1552, 1583, 7, 1037, 58,
	1556, 350, 1584, 6, 1481, 1221, 1535, 1388, 1551, 1550,
	1582, 5, 676, 51, 1, 278, 90, 1560, 1558, 1440,
	1728, 350, 1656, 1723, 1580, 1574, 1569, 1581, 1662, 1644,
	1164, 1641, 67, 1719, 1650, 1352, 1381, 1214, 1230, 1016,
	1211, 1033, 1599, 350, 1672, 1686, 1537, 1034, 1031, 1032,
	1570, 1030, 1571, 951, 941, 481, 64, 1626, 882, 952,
	950, 1304, 1128, 948, 882, 1590, 696, 1614, 1621, 1300,
	977, 1613, 1183, 980, 1519, 702, 1617, 700, 701, 1618,
	1041, 1044, 273, 1486, 698, 1488, 705, 824, 825, 231,
	342, 664, 689, 350, 548, 350, 1329, 1377, 1532, 1533,
	1534, 1244, 1654, 1243, 1029, 1385, 1252, 801, 1049, 526,
	233, 585, 1058, 1133, 349, 1715, 1622, 273, 273, 1562,
	1303, 537, 1512, 1602, 273, 273, 1510, 1094, 612, 887,
	1670, 279, 1395, 273, 826, 1667, 1669, 1655, 291, 288,
	1590, 602, 1677, 290, 879, 880, 1682, 289, 817, 1103,
	558, 334, 648, 656, 1687, 1036, 654, 653, 1117, 1113,
	333, 1260, 902, 1378, 1605, 1606, 1607, 1608, 1701, 1424,
	1609, 1702, 821, 273, 25, 1724, 1392, 1699, 1700, 55,
	1717, 1718, 263, 19, 18, 1394, 1035, 17, 20, 1736,
	16, 1267, 1268, 305, 47, 1726, 15, 14, 29, 1740,
	13, 12, 11, 1397, 1285, 1286, 10, 1288, 1289, 9,
	1589, 1588, 350, 1590, 1587, 1585, 1694, 1695, 1696, 1697,
	1698, 4, 254, 22, 2, 936, 1040, 1590, 0, 0,
	0, 0, 0, 0, 0, 0, 1751, 1752, 0, 0,
	1766, 47, 1042, 0, 0, 0, 0, 1771, 0, 256,
	0, 0, 0, 0, 0, 336, 0, 0, 0, 1678,
	1773, 1779, 1772, 0, 1683, 1438, 0, 1780, 1438, 1438,
	1438, 1781, 1452, 0, 0, 0, 1783, 0, 0, 350,
	1788, 1786, 0, 0, 0, 1590, 90, 0, 0, 0,
	1703, 273, 1793, 1795, 0, 1796, 0, 1590, 1590, 1802,
	1438, 1802, 1794, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 1809, 0, 0, 0, 0, 1811, 0, 0,
	0, 1813, 1741, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 350, 350, 0, 0, 1590, 0, 1590,
	0, 1815, 1506, 273, 1825, 1053, 1054, 1802, 539, 1824,
	0, 0, 1509, 0, 0, 984, 985, 987, 988, 989,
	0, 990, 991, 0, 0, 0, 0, 0, 0, 0,
	1266, 0, 0, 0, 0, 0, 0, 0, 1000, 1001,
	1002, 1590, 1003, 1405, 1576, 1590, 0, 1526, 1527, 0,
	565, 564, 574, 575, 567, 568, 569, 570, 571, 572,
	573, 566, 0, 0, 576, 0, 0, 536, 0, 1329,
	0, 0, 1080, 0, 0, 0, 0, 1820, 0, 1559,
	0, 518, 518, 518, 518, 0, 518, 1097, 0, 0,
	0, 0, 0, 518, 0, 1807, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 243, 0, 1329, 1575, 0,
	47, 0, 1578, 0, 0, 0, 0, 0, 0, 0,
	0, 1438, 0, 0, 0, 586, 0, 267, 588, 88,
	88, 0, 0, 0, 0, 0, 1830, 1831, 0, 0,
	0, 88, 1616, 0, 0, 0, 88, 0, 88, 0,
	0, 0, 0, 0, 88, 0, 598, 0, 0, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 0, 614,
	616, 616, 616, 616, 616, 616, 616, 616, 0, 644,
	645, 646, 647, 0, 0, 0, 0, 0, 0, 0,
	667, 0, 0, 0, 0, 1514, 1515, 0, 1516, 1517,
	1518, 0, 0, 0, 0, 1657, 1659, 1660, 1661, 0,
	0, 0, 1329, 0, 565, 564, 574, 575, 567, 568,
	569, 570, 571, 572, 573, 566, 882, 0, 576, 1684,
	0, 0, 0, 0, 1685, 0, 0, 0, 1688, 0,
	0, 0, 257, 0, 48, 26, 27, 0, 1564, 0,
	0, 0, 1578, 1329, 0, 0, 1591, 0, 0, 0,
	0, 0, 1329, 1329, 1074, 1721, 28, 0, 0, 0,
	0, 703, 0, 0, 0, 0, 1731, 1075, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1743, 577,
	0, 88, 0, 1188, 1293, 0, 0, 565, 564, 574,
	575, 567, 568, 569, 570, 571, 572, 573, 566, 1308,
	1309, 576, 0, 1310, 0, 0, 1312, 565, 564, 574,
	575, 567, 568, 569, 570, 571, 572, 573, 566, 0,
	0, 576, 0, 0, 0, 1324, 1808, 0, 0, 0,
	0, 1774, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 0, 1329, 0,
	0, 1597, 1785, 518, 518, 518, 518, 518, 518, 518,
	518, 1596, 0, 1668, 1668, 625, 0, 518, 518, 0,
	0, 1438, 0, 0, 0, 0, 0, 1169, 703, 0,
	1800, 0, 1170, 1171, 1172, 0, 0, 88, 0, 0,
	1175, 1173, 300, 301, 88, 672, 88, 0, 0, 627,
	0, 0, 0, 0, 0, 0, 1592, 1593, 1595, 1170,
	1171, 1172, 1594, 1737, 350, 0, 0, 1175, 1173, 300,
	301, 0, 257, 1578, 48, 26, 27, 0, 0, 0,
	0, 0, 47, 0, 0, 0, 1591, 0, 0, 0,
	0, 0, 1401, 577, 0, 0, 28, 603, 0, 0,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	0, 0, 0, 0, 257, 0, 48, 26, 27, 0,
	0, 628, 0, 0, 0, 1355, 1357, 0, 1591, 642,
	626, 0, 1426, 0, 0, 0, 631, 0, 28, 602,
	0, 0, 0, 0, 0, 0, 336, 336, 336, 336,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 667, 0, 922, 0, 0, 0, 0, 49, 0,
	336, 0, 0, 0, 0, 0, 577, 0, 0, 0,
	0, 0, 0, 1469, 0, 0, 0, 0, 1829, 0,
	0, 1597, 0, 0, 0, 88, 577, 0, 0, 0,
	0, 1596, 0, 88, 0, 88, 0, 0, 88, 0,
	643, 88, 0, 0, 0, 789, 0, 0, 0, 1407,
	1408, 0, 1409, 1177, 1181, 0, 1411, 0, 1413, 0,
	0, 0, 0, 1597, 0, 0, 88, 0, 0, 1826,
	0, 0, 0, 1596, 0, 0, 1592, 1593, 1595, 0,
	1177, 1181, 1594, 1725, 0, 88, 0, 1178, 0, 1180,
	1179, 518, 0, 518, 789, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1456, 1457, 0, 518,
	0, 0, 0, 0, 1178, 0, 1180, 1179, 1592, 1593,
	1595, 0, 0, 0, 1594, 257, 0, 48, 26, 27,
	23, 24, 48, 26, 27, 0, 267, 0, 0, 1591,
	0, 0, 267, 267, 0, 0, 883, 883, 267, 28,
	42, 0, 883, 0, 28, 0, 0, 0, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 37, 0, 0, 0, 50, 0, 0,
	0, 0, 267, 267, 267, 267, 0, 88, 49, 883,
	88, 88, 88, 88, 88, 0, 0, 0, 0, 1803,
	0, 0, 916, 0, 257, 88, 48, 26, 27, 672,
	0, 0, 0, 0, 88, 88, 0, 0, 1591, 0,
	0, 1107, 1108, 0, 0, 0, 0, 0, 28, 1640,
	49, 0, 0, 0, 0, 0, 0, 30, 31, 33,
	32, 35, 0, 0, 1597, 0, 0, 0, 0, 336,
	0, 0, 0, 0, 1596, 0, 0, 0, 0, 0,
	0, 0, 36, 43, 44, 0, 0, 45, 46, 34,
	0, 1676, 602, 0, 229, 0, 0, 0, 1801, 257,
	0, 48, 26, 27, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1591, 0, 0, 0, 0, 239, 1592,
	1593, 1595, 0, 28, 0, 1594, 0, 0, 88, 0,
	88, 38, 39, 0, 40, 41, 0, 88, 0, 88,
	1722, 0, 88, 1597, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1596, 0, 0, 0, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 789, 0, 224,
	0, 0, 0, 0, 0, 226, 0, 0, 0, 267,
	0, 0, 232, 228, 0, 0, 0, 0, 0, 0,
	0, 518, 0, 0, 0, 0, 0, 0, 1592, 1593,
	1595, 0, 0, 0, 1594, 0, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 0, 0, 234, 1597, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 1596, 0,
	0, 49, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 0, 0, 0, 1301,
	0, 47, 0, 0, 0, 0, 0, 0, 1797, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1314, 1315,
	1316, 0, 0, 1592, 1593, 1595, 0, 0, 0, 1594,
	0, 0, 0, 88, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 0, 0, 0, 0,
	49, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1354, 227, 0, 235, 236, 237, 238, 242, 0,
	0, 1163, 0, 241, 240, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 1255, 1256,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 0, 0, 0,
	0, 0, 0, 0, 1423, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 789, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 883, 0, 0, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 0, 131, 88, 134, 0, 0,
	177, 143, 0, 1301, 88, 0, 1525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1561, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 565, 564, 574, 575, 567,
	568, 569, 570, 571, 572, 573, 566, 0, 0, 576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1600, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 1301, 0, 47,
	0, 0, 0, 0, 111, 672, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1748,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 171, 0, 0, 0,
	0, 0, 0, 0, 577, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1822, 0, 0, 0, 0, 0, 0, 0, 0,
	883, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 467, 457, 0, 418, 469, 388, 406,
	477, 408, 409, 444, 368, 427, 155, 403, 386, 93,
	391, 361, 398, 362, 389, 420, 117, 387, 459, 430,
	131, 475, 134, 435, 0, 177, 143, 0, 0, 422,
	461, 425, 452, 417, 445, 376, 434, 470, 404, 440,
	471, 0, 0, 0, 355, 0, 945, 946, 0, 0,
	0, 0, 0, 106, 0, 439, 466, 400, 480, 443,
	360, 437, 0, 366, 369, 476, 464, 395, 396, 1141,
	0, 0, 0, 0, 0, 0, 421, 426, 449, 414,
	0, 0, 0, 0, 0, 0, 0, 0, 392, 0,
	433, 0, 0, 1792, 373, 367, 0, 419, 0, 0,
	0, 375, 0, 393, 450, 0, 357, 455, 462, 416,
	204, 465, 413, 412, 162, 88, 109, 0, 183, 121,
	405, 132, 447, 478, 468, 423, 460, 390, 399, 111,
	397, 169, 156, 195, 432, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 365, 358, 394, 453, 456, 380, 442, 370,
	401, 448, 402, 424, 385, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 363, 0, 178, 197, 214, 215, 364, 384, 463,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 441, 170, 108, 196, 176,
	0, 379, 383, 377, 378, 428, 429, 472, 473, 474,
	451, 374, 0, 381, 382, 0, 458, 126, 431, 92,
	100, 133, 479, 211, 0, 164, 119, 198, 0, 407,
	359, 411, 0, 0, 0, 0, 0, 0, 0, 371,
	372, 171, 415, 410, 436, 438, 446, 454, 467, 457,
	105, 418, 469, 388, 406, 477, 408, 409, 444, 368,
	427, 155, 403, 386, 93, 391, 361, 398, 362, 389,
	420, 117, 387, 459, 430, 131, 475, 134, 435, 0,
	177, 143, 0, 0, 422, 461, 425, 452, 417, 445,
	376, 434, 470, 404, 440, 471, 0, 0, 0, 355,
	0, 945, 946, 0, 0, 0, 0, 0, 106, 0,
	439, 466, 400, 480, 443, 360, 437, 0, 366, 369,
	476, 464, 395, 396, 0, 0, 0, 0, 0, 0,
	0, 421, 426, 449, 414, 0, 0, 0, 0, 0,
	0, 0, 0, 392, 0, 433, 0, 0, 0, 373,
	367, 0, 419, 0, 0, 0, 375, 0, 393, 450,
	0, 357, 455, 462, 416, 204, 465, 413, 412, 162,
	0, 109, 0, 183, 121, 405, 132, 447, 478, 468,
	423, 460, 390, 399, 111, 397, 169, 156, 195, 432,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 365, 358, 394,
	453, 456, 380, 442, 370, 401, 448, 402, 424, 385,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 363, 0, 178, 197,
	214, 215, 364, 384, 463, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	441, 170, 108, 196, 176, 0, 379, 383, 377, 378,
	428, 429, 472, 473, 474, 451, 374, 0, 381, 382,
	0, 458, 126, 431, 92, 100, 133, 479, 211, 0,
	164, 119, 198, 0, 407, 359, 411, 0, 0, 0,
	0, 0, 0, 0, 371, 372, 171, 415, 410, 436,
	438, 446, 454, 467, 457, 105, 418, 469, 388, 406,
	477, 408, 409, 444, 368, 427, 155, 403, 386, 93,
	391, 361, 398, 362, 389, 420, 117, 387, 459, 430,
	131, 475, 134, 435, 0, 177, 143, 0, 0, 422,
	461, 425, 452, 417, 445, 376, 434, 470, 404, 440,
	471, 0, 0, 0, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 439, 466, 400, 480, 443,
	360, 437, 0, 366, 369, 476, 464, 395, 396, 0,
	0, 0, 0, 0, 0, 0, 421, 426, 449, 414,
	0, 0, 0, 0, 0, 0, 1262, 0, 392, 0,
	433, 0, 0, 0, 373, 367, 0, 419, 0, 0,
	0, 375, 0, 393, 450, 0, 357, 455, 462, 416,
	204, 465, 413, 412, 162, 0, 109, 0, 183, 121,
	405, 132, 447, 478, 468, 423, 460, 390, 399, 111,
	397, 169, 156, 195, 432, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 365, 358, 394, 453, 456, 380, 442, 370,
	401, 448, 402, 424, 385, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 363, 0, 178, 197, 214, 215, 364, 384, 463,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 441, 170, 108, 196, 176,
	0, 379, 383, 377, 378, 428, 429, 472, 473, 474,
	451, 374, 0, 381, 382, 0, 458, 126, 431, 92,
	100, 133, 479, 211, 0, 164, 119, 198, 0, 407,
	359, 411, 0, 0, 0, 0, 0, 0, 0, 371,
	372, 171, 415, 410, 436, 438, 446, 454, 467, 457,
	105, 418, 469, 388, 406, 477, 408, 409, 444, 368,
	427, 155, 403, 386, 93, 391, 361, 398, 362, 389,
	420, 117, 387, 459, 430, 131, 475, 134, 435, 0,
	177, 143, 0, 0, 422, 461, 425, 452, 417, 445,
	376, 434, 470, 404, 440, 471, 50, 0, 0, 355,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	439, 466, 400, 480, 443, 360, 437, 0, 366, 369,
	476, 464, 395, 396, 0, 0, 0, 0, 0, 0,
	0, 421, 426, 449, 414, 0, 0, 0, 0, 0,
	0, 0, 0, 392, 0, 433, 0, 0, 0, 373,
	367, 0, 419, 0, 0, 0, 375, 0, 393, 450,
	0, 357, 455, 462, 416, 204, 465, 413, 412, 162,
	0, 109, 0, 183, 121, 405, 132, 447, 478, 468,
	423, 460, 390, 399, 111, 397, 169, 156, 195, 432,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 365, 358, 394,
	453, 456, 380, 442, 370, 401, 448, 402, 424, 385,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 363, 0, 178, 197,
	214, 215, 364, 384, 463, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	441, 170, 108, 196, 176, 0, 379, 383, 377, 378,
	428, 429, 472, 473, 474, 451, 374, 0, 381, 382,
	0, 458, 126, 431, 92, 100, 133, 479, 211, 0,
	164, 119, 198, 0, 407, 359, 411, 0, 0, 0,
	0, 0, 0, 0, 371, 372, 171, 415, 410, 436,
	438, 446, 454, 467, 457, 105, 418, 469, 388, 406,
	477, 408, 409, 444, 368, 427, 155, 403, 386, 93,
	391, 361, 398, 362, 389, 420, 117, 387, 459, 430,
	131, 475, 134, 435, 0, 177, 143, 0, 0, 422,
	461, 425, 452, 417, 445, 376, 434, 470, 404, 440,
	471, 0, 0, 0, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 439, 466, 400, 480, 443,
	360, 437, 0, 366, 369, 476, 464, 395, 396, 0,
	0, 0, 0, 0, 0, 0, 421, 426, 449, 414,
	0, 0, 0, 0, 0, 0, 0, 0, 392, 0,
	433, 0, 0, 0, 373, 367, 0, 419, 0, 0,
	0, 375, 0, 393, 450, 0, 357, 455, 462, 416,
	204, 465, 413, 412, 162, 0, 109, 0, 183, 121,
	405, 132, 447, 478, 468, 423, 460, 390, 399, 111,
	397, 169, 156, 195, 432, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 365, 358, 394, 453, 456, 380, 442, 370,
	401, 448, 402, 424, 385, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	353, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 363, 0, 178, 197, 214, 215, 364, 384, 463,
	207, 208, 209, 210, 0, 0, 0, 354, 352, 125,
	174, 129, 136, 165, 212, 441, 170, 108, 196, 176,
	348, 379, 383, 377, 378, 428, 429, 472, 473, 474,
	451, 374, 0, 381, 382, 0, 458, 126, 431, 92,
	100, 133, 479, 211, 0, 164, 119, 198, 0, 407,
	359, 411, 0, 0, 0, 0, 0, 0, 0, 371,
	372, 171, 415, 410, 436, 438, 446, 454, 467, 457,
	105, 418, 469, 388, 406, 477, 408, 409, 444, 368,
	427, 155, 403, 386, 93, 391, 361, 398, 362, 389,
	420, 117, 387, 459, 430, 131, 475, 134, 435, 0,
	177, 143, 0, 0, 422, 461, 425, 452, 417, 445,
	376, 434, 470, 404, 440, 471, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	439, 466, 400, 480, 443, 360, 437, 0, 366, 369,
	476, 464, 395, 396, 0, 0, 0, 0, 0, 0,
	0, 421, 426, 449, 414, 0, 0, 0, 0, 0,
	0, 832, 0, 392, 0, 433, 0, 0, 0, 373,
	367, 0, 419, 0, 0, 0, 375, 0, 393, 450,
	0, 357, 455, 462, 416, 204, 465, 413, 412, 162,
	0, 109, 0, 183, 121, 405, 132, 447, 478, 468,
	423, 460, 390, 399, 111, 397, 169, 156, 195, 432,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 365, 358, 394,
	453, 456, 380, 442, 370, 401, 448, 402, 424, 385,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 363, 0, 178, 197,
	214, 215, 364, 384, 463, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	441, 170, 108, 196, 176, 0, 379, 383, 377, 378,
	428, 429, 472, 473, 474, 451, 374, 0, 381, 382,
	0, 458, 126, 431, 92, 100, 133, 479, 211, 0,
	164, 119, 198, 0, 407, 359, 411, 0, 0, 0,
	0, 0, 0, 0, 371, 372, 171, 415, 410, 436,
	438, 446, 454, 467, 457, 105, 418, 469, 388, 406,
	477, 408, 409, 444, 368, 427, 155, 403, 386, 93,
	391, 361, 398, 362, 389, 420, 117, 387, 459, 430,
	131, 475, 134, 435, 0, 177, 143, 0, 0, 422,
	461, 425, 452, 417, 445, 376, 434, 470, 404, 440,
	471, 0, 0, 0, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 439, 466, 400, 480, 443,
	360, 437, 0, 366, 369, 476, 464, 395, 396, 0,
	0, 0, 0, 0, 0, 0, 421, 426, 449, 414,
	0, 0, 0, 0, 0, 0, 0, 0, 392, 0,
	433, 0, 0, 0, 373, 367, 0, 419, 0, 0,
	0, 375, 0, 393, 450, 0, 357, 455, 462, 416,
	204, 465, 413, 412, 162, 0, 109, 0, 183, 121,
	405, 132, 447, 478, 468, 423, 460, 390, 399, 111,
	397, 169, 156, 195, 432, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 365, 358, 394, 453, 456, 380, 442, 370,
	401, 448, 402, 424, 385, 94, 184, 682, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	353, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 363, 0, 178, 197, 214, 215, 364, 384, 463,
	207, 208, 209, 210, 0, 0, 0, 354, 352, 125,
	174, 129, 136, 165, 212, 441, 170, 108, 196, 176,
	348, 379, 383, 377, 378, 428, 429, 472, 473, 474,
	451, 374, 0, 381, 382, 0, 458, 126, 431, 92,
	100, 133, 479, 211, 0, 164, 119, 198, 0, 407,
	359, 411, 0, 0, 0, 0, 0, 0, 0, 371,
	372, 171, 415, 410, 436, 438, 446, 454, 467, 457,
	105, 418, 469, 388, 406, 477, 408, 409, 444, 368,
	427, 155, 403, 386, 93, 391, 361, 398, 362, 389,
	420, 117, 387, 459, 430, 131, 475, 134, 435, 0,
	177, 143, 0, 0, 422, 461, 425, 452, 417, 445,
	376, 434, 470, 404, 440, 471, 0, 0, 0, 355,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	439, 466, 400, 480, 443, 360, 437, 0, 366, 369,
	476, 464, 395, 396, 0, 0, 0, 0, 0, 0,
	0, 421, 426, 449, 414, 0, 0, 0, 0, 0,
	0, 0, 0, 392, 0, 433, 0, 0, 0, 373,
	367, 0, 419, 0, 0, 0, 375, 0, 393, 450,
	0, 357, 455, 462, 416, 204, 465, 413, 412, 162,
	0, 109, 0, 183, 121, 405, 132, 447, 478, 468,
	423, 460, 390, 399, 111, 397, 169, 156, 195, 432,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 365, 358, 394,
	453, 456, 380, 442, 370, 401, 448, 402, 424, 385,
	94, 184, 343, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 353, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 363, 0, 178, 197,
	214, 215, 364, 384, 463, 207, 208, 209, 210, 0,
	0, 0, 354, 352, 346, 345, 129, 136, 165, 212,
	441, 170, 108, 196, 176, 348, 379, 383, 377, 378,
	428, 429, 472, 473, 474, 451, 374, 0, 381, 382,
	0, 458, 126, 431, 92, 100, 133, 479, 211, 0,
	164, 119, 198, 0, 407, 359, 411, 0, 0, 0,
	0, 0, 0, 0, 371, 372, 171, 415, 410, 436,
	438, 446, 454, 467, 457, 105, 418, 469, 388, 406,
	477, 408, 409, 444, 368, 427, 155, 403, 386, 93,
	391, 361, 398, 362, 389, 420, 117, 387, 459, 430,
	131, 475, 134, 435, 0, 177, 143, 0, 0, 422,
	461, 425, 452, 417, 445, 376, 434, 470, 404, 440,
	471, 0, 0, 0, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 439, 466, 400, 480, 443,
	360, 437, 0, 366, 369, 476, 464, 395, 396, 0,
	0, 0, 0, 0, 0, 0, 421, 426, 449, 414,
	0, 0, 0, 0, 0, 0, 0, 0, 392, 0,
	433, 0, 0, 0, 373, 367, 0, 419, 0, 0,
	0, 375, 0, 393, 450, 0, 357, 455, 462, 416,
	204, 465, 413, 412, 162, 0, 109, 0, 183, 121,
	405, 132, 447, 478, 468, 423, 460, 390, 399, 111,
	397, 169, 156, 195, 432, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 365, 358, 394, 453, 456, 380, 442, 370,
	401, 448, 402, 424, 385, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 363, 0, 178, 197, 214, 215, 364, 384, 463,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 441, 170, 108, 196, 176,
	0, 379, 383, 377, 378, 428, 429, 472, 473, 474,
	451, 374, 0, 381, 382, 0, 458, 126, 431, 92,
	100, 133, 479, 211, 0, 164, 119, 198, 0, 407,
	359, 411, 0, 0, 0, 0, 0, 0, 0, 371,
	372, 171, 415, 410, 436, 438, 446, 454, 467, 457,
	105, 418, 469, 388, 406, 477, 408, 409, 444, 368,
	427, 155, 403, 386, 93, 391, 361, 398, 362, 389,
	420, 117, 387, 459, 430, 131, 475, 134, 435, 0,
	177, 143, 0, 0, 422, 461, 425, 452, 417, 445,
	376, 434, 470, 404, 440, 471, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	439, 466, 400, 480, 443, 360, 437, 0, 366, 369,
	476, 464, 395, 396, 0, 0, 0, 0, 0, 0,
	0, 421, 426, 449, 414, 0, 0, 0, 0, 0,
	0, 0, 0, 392, 0, 433, 0, 0, 0, 373,
	367, 0, 419, 0, 0, 0, 375, 0, 393, 450,
	0, 357, 455, 462, 416, 204, 465, 413, 412, 162,
	0, 109, 0, 183, 121, 405, 132, 447, 478, 468,
	423, 460, 390, 399, 111, 397, 169, 156, 195, 432,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 365, 358, 394,
	453, 456, 380, 442, 370, 401, 448, 402, 424, 385,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 363, 0, 178, 197,
	214, 215, 364, 384, 463, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	441, 170, 108, 196, 176, 0, 379, 383, 377, 378,
	428, 429, 472, 473, 474, 451, 374, 0, 381, 382,
	0, 458, 126, 431, 92, 100, 133, 479, 211, 0,
	164, 119, 198, 0, 407, 359, 411, 0, 0, 0,
	0, 0, 0, 0, 371, 372, 171, 415, 410, 436,
	438, 446, 454, 467, 457, 105, 418, 469, 388, 406,
	477, 408, 409, 444, 368, 427, 155, 403, 386, 93,
	391, 361, 398, 362, 389, 420, 117, 387, 459, 430,
	131, 475, 134, 435, 0, 177, 143, 0, 0, 422,
	461, 425, 452, 417, 445, 376, 434, 470, 404, 440,
	471, 0, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 439, 466, 400, 480, 443,
	360, 437, 0, 366, 369, 476, 464, 395, 396, 0,
	0, 0, 0, 0, 0, 0, 421, 426, 449, 414,
	0, 0, 0, 0, 0, 0, 0, 0, 392, 0,
	433, 0, 0, 0, 373, 367, 0, 419, 0, 0,
	0, 375, 0, 393, 450, 0, 357, 455, 462, 416,
	204, 465, 413, 412, 162, 0, 109, 0, 183, 121,
	405, 132, 447, 478, 468, 423, 460, 390, 399, 111,
	397, 169, 156, 195, 432, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 365, 358, 394, 453, 456, 380, 442, 370,
	401, 448, 402, 424, 385, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 363, 0, 178, 197, 214, 215, 364, 384, 463,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 441, 170, 108, 196, 176,
	0, 379, 383, 377, 378, 428, 429, 472, 473, 474,
	451, 374, 0, 381, 382, 0, 458, 126, 431, 92,
	100, 133, 479, 211, 0, 164, 119, 198, 0, 407,
	359, 411, 0, 0, 0, 0, 0, 0, 0, 371,
	372, 171, 415, 410, 436, 438, 446, 454, 155, 0,
	105, 93, 0, 0, 274, 0, 0, 0, 117, 271,
	0, 0, 131, 315, 134, 0, 0, 177, 143, 0,
	0, 0, 0, 306, 307, 0, 0, 0, 0, 0,
	0, 934, 0, 50, 0, 0, 272, 293, 292, 295,
	296, 297, 298, 0, 0, 106, 294, 299, 300, 301,
	935, 0, 0, 269, 286, 0, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 0, 0,
	0, 0, 327, 0, 285, 0, 0, 281, 282, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 325, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 303, 316, 326, 322, 323, 320, 321, 319,
	318, 317, 328, 308, 309, 310, 311, 313, 0, 126,
	312, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 869, 0, 274, 0, 0, 0,
	117, 271, 0, 171, 131, 315, 134, 0, 0, 177,
	143, 324, 105, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 293,
	292, 295, 296, 297, 298, 0, 0, 106, 294, 299,
	300, 301, 0, 0, 0, 269, 286, 0, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	265, 0, 0, 0, 327, 0, 285, 0, 0, 281,
	282, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 325, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 151, 124, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 303, 316, 326, 322, 323, 320,
	321, 319, 318, 317, 328, 308, 309, 310, 311, 313,
	0, 126, 312, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 155, 0, 0, 93, 0, 0, 274, 0,
	0, 0, 117, 271, 0, 171, 131, 315, 134, 0,
	0, 177, 143, 324, 105, 0, 0, 306, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 531,
	272, 293, 292, 295, 296, 297, 298, 0, 0, 106,
	294, 299, 300, 301, 0, 0, 0, 269, 286, 0,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 0, 0, 0, 0, 327, 0, 285, 0,
	0, 281, 282, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 325,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 303, 316, 326, 322,
	323, 320, 321, 319, 318, 317, 328, 308, 309, 310,
	311, 313, 0, 126, 312, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 155, 0, 0, 93, 0, 0,
	274, 0, 0, 0, 117, 271, 0, 171, 131, 315,
	134, 0, 0, 177, 143, 324, 105, 0, 0, 306,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 272, 293, 292, 295, 296, 297, 298, 0,
	0, 106, 294, 299, 300, 301, 0, 0, 0, 269,
	286, 0, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 265, 0, 0, 0, 327, 0,
	285, 0, 0, 281, 282, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 325, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 303, 316,
	326, 322, 323, 320, 321, 319, 318, 317, 328, 308,
	309, 310, 311, 313, 23, 126, 312, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 155, 0, 0, 93,
	0, 0, 274, 0, 0, 0, 117, 271, 0, 171,
	131, 315, 134, 0, 0, 177, 143, 324, 105, 0,
	0, 306, 307, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 272, 293, 292, 295, 296, 297,
	298, 0, 0, 106, 294, 299, 300, 301, 0, 0,
	0, 269, 286, 0, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 0, 0, 0, 0,
	327, 0, 285, 0, 0, 281, 282, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 325, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	303, 316, 326, 322, 323, 320, 321, 319, 318, 317,
	328, 308, 309, 310, 311, 313, 0, 126, 312, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 155, 0,
	0, 93, 0, 0, 274, 0, 0, 0, 117, 271,
	0, 171, 131, 315, 134, 0, 0, 177, 143, 324,
	105, 0, 0, 306, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 272, 293, 292, 295,
	296, 297, 298, 0, 0, 106, 294, 299, 300, 301,
	0, 0, 0, 269, 286, 0, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 0, 0,
	0, 0, 327, 0, 285, 0, 0, 281, 282, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 325, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 303, 316, 326, 322, 323, 320, 321, 319,
	318, 317, 328, 308, 309, 310, 311, 313, 0, 126,
	312, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 171, 131, 315, 134, 0, 0, 177,
	143, 324, 105, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 293,
	292, 295, 296, 297, 298, 0, 0, 106, 294, 299,
	300, 301, 0, 0, 0, 0, 286, 0, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	0, 0, 0, 0, 327, 0, 285, 0, 0, 281,
	282, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 325, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 1827, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 151, 124, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 303, 316, 326, 322, 323, 320,
	321, 319, 318, 317, 328, 308, 309, 310, 311, 313,
	0, 126, 312, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 155, 0, 0, 93, 0, 0, 274, 0,
	0, 0, 117, 0, 0, 171, 131, 315, 134, 0,
	0, 177, 143, 324, 105, 0, 0, 306, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 293, 292, 295, 296, 297, 298, 0, 0, 106,
	294, 299, 300, 301, 0, 0, 0, 0, 286, 0,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 0, 0, 0, 0, 327, 0, 285, 0,
	0, 281, 282, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 325,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 303, 316, 326, 322,
	323, 320, 321, 319, 318, 317, 328, 308, 309, 310,
	311, 313, 0, 126, 312, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 315,
	134, 0, 0, 177, 143, 324, 105, 0, 0, 306,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 272, 293, 292, 295, 296, 297, 298, 0,
	0, 106, 294, 299, 300, 301, 0, 0, 0, 0,
	286, 0, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 0, 0, 0, 0, 327, 0,
	285, 0, 0, 281, 282, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 325, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 303, 316,
	326, 322, 323, 320, 321, 319, 318, 317, 328, 308,
	309, 310, 311, 313, 0, 126, 312, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 729, 171,
	131, 0, 134, 0, 0, 177, 143, 324, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 714, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 730,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 1730, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	0, 756, 757, 160, 758, 759, 760, 762, 761, 731,
	732, 733, 737, 735, 734, 736, 708, 710, 202, 706,
	709, 715, 711, 712, 713, 727, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 728, 738, 739,
	740, 741, 742, 743, 744, 745, 0, 151, 124, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	707, 133, 0, 211, 0, 164, 119, 198, 155, 0,
	0, 93, 0, 553, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 555, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 550, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 0, 729, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 730, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 0, 756, 757, 160, 758, 759,
	760, 762, 761, 731, 732, 733, 737, 735, 734, 736,
	708, 710, 202, 706, 709, 715, 711, 712, 713, 727,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 728, 738, 739, 740, 741, 742, 743, 744, 745,
	0, 151, 124, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 707, 133, 0, 211, 0, 164,
	119, 198, 155, 0, 0, 93, 0, 671, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 673, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 23, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 23, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 819,
	0, 0, 820, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 692, 0, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	691, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 151, 124, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 155, 0, 0, 93, 0, 671, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 673, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 669, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 1439, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 0, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 1791, 117,
	0, 171, 0, 131, 0, 134, 0, 0, 177, 143,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 1330, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 171, 131, 0, 134,
	0, 0, 177, 143, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 673, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 355, 0, 555, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 151, 124, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 0, 134, 0, 0, 177, 143, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 151, 124,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 779, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 649, 117,
	0, 0, 171, 131, 0, 134, 0, 0, 177, 143,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 338, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 171, 0, 131, 0, 134, 0,
	0, 177, 143, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 272, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 151, 124, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 105,
}

var yyPact = [...]int{
	2474, -1000, -220, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1415, 1441, -1000, -1000, -1000, -1000, -1000, -1000, 1245,
	318, 408, 429, 296, 14996, 426, 2592, 15580, -1000, 162,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1140, -1000, -1000,
	-1000, -1000, -1000, 1393, 1410, 1221, 1378, 1302, -1000, 7986,
	358, 13243, 14704, 5823, -1000, 981, -154, 368, 15288, 361,
	361, 15288, 15288, 15580, 361, -1000, -41, 418, 15580, -1000,
	15580, 359, 978, 359, 359, 359, 15580, -1000, 503, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 15580, 976, 1340, 310, 4523, 4523, 4523,
	4523, 256, 4523, 25, 1258, -1000, -1000, -1000, -1000, 4523,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	852, 1348, 8570, 8570, 1415, -1000, 1140, -1000, -1000, -1000,
	1342, -1000, -1000, 733, 1445, -1000, 10030, 488, -1000, 8570,
	41, 1171, -1000, -1000, 1171, -1000, -1000, 470, -1000, -1000,
	-1000, 9446, 9446, 9446, 9446, 9446, 9446, 9446, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1171, 487, -1000, 8278, 1171, 1171, 1171, 1171,
	1171, 1171, 1171, 1171, 8570, 1171, 1171, 1171, 1171, 1171,
	1171, 1171, 1171, 1171, 2088, 1171, 1171, 1171, 1171, 14411,
	1162, 1204, -1000, -1000, -1000, 1374, 11198, 12074, 15580, 1095,
	-1000, 1148, 5498, -1, -1000, -1000, -1000, 625, 483, 11782,
	-1000, -1000, -1000, 1339, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1029, -1000, 10322, 424, -1000, -1000, 15580, 1233, 963,
	699, 960, 1256, 369, 1373, 15580, -1000, 14119, 4523, 376,
	15580, 1361, 1255, 15580, 940, 933, -1000, 6798, -1000, 4523,
	4523, 4523, 4523, 4523, 4523, 4523, 4523, -1000, -1000, -1000,
	-1000, -1000, -1000, 4523, 4523, -1000, 35, -1000, 15580, -1000,
	-1000, -1000, -1000, 1462, 525, 769, 480, 1164, -1000, 678,
	1393, 852, 1302, 11490, 1271, -1000, -1000, 15580, -1000, 8570,
	8570, 748, -1000, 13827, -1000, -1000, 5173, 541, 9446, 737,
	594, 9446, 9446, 9446, 9446, 9446, 9446, 9446, 9446, 9446,
	9446, 9446, 9446, 9446, 9446, 9446, 833, 2088, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 922, -1000, 1140, 1005,
	1005, 39, 39, 39, 39, 39, 39, 3063, 7402, 6148,
	852, 1027, 657, 8278, 7986, 7986, 8570, 8570, 15872, 15872,
	7986, 1380, 650, 657, 15872, -1000, 852, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 109, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 7986, 7986, 7986, 7986, 278, 15580,
	-1000, 15872, 13243, 13243, 13243, 13243, 13243, -1000, 1286, 1284,
	-1000, 1287, 1270, 1293, 15580, -1000, 1024, 11198, 551, 1171,
	-1000, 13535, -1000, -1000, 278, 1041, 13243, 15580, -1000, -1000,
	4848, 1148, -1, 1132, -1000, 1, 13, 7110, 6148, 520,
	-1000, -1000, -1000, -1000, 3873, 1184, 226, -63, 49, -1000,
	-1000, -1000, -1000, -1000, 1205, -1000, -1000, -1000, 1205, 261,
	1205, 1205, 1205, -1000, 1205, 1205, 85, 85, 85, 85,
	85, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1243, 1238,
	-1000, 1205, 1205, 1205, -1000, 1205, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1235, 316, 1235, 1207,
	1207, -1000, -1000, 15288, 1372, -60, 917, 4523, 1360, 4523,
	15580, 1435, 15580, -1000, -1000, -1000, 10322, -1000, 1413, 15580,
	-1000, 15580, -1000, -1000, 15580, 4523, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 603, -1000, -1000, -1000, -1000, 1310, 8570, 8570, 6473,
	8570, -1000, -1000, -1000, 1348, -1000, 1380, 1398, -1000, 1333,
	1332, 7986, -1000, -1000, 541, 648, -1000, -1000, 757, -1000,
	-1000, -1000, -1000, 479, 1171, -1000, 2045, -1000, -1000, -1000,
	-1000, 737, 9446, 9446, 9446, 1942, 2045, 2025, 247, 163,
	39, 119, 119, 120, 120, 120, 120, 120, 299, 299,
	-1000, -1000, -1000, -1000, 852, -1000, -1000, -1000, 852, 7986,
	1134, -1000, -1000, -1000, 8570, -1000, 852, 1006, 1006, 645,
	730, 1169, -1000, 476, 1098, 1006, 7986, 691, -1000, 8570,
	852, -1000, -1000, 1006, 852, 1006, 1006, 1206, 1171, -1000,
	1121, -1000, 620, 1204, 1242, 1252, 1307, -1000, -1000, -1000,
	-1000, 1283, -1000, 1276, -1000, -1000, -1000, -1000, -58, 415,
	386, 379, 15288, -1000, 1425, 13243, 1089, -1000, -1000, 1132,
	-1, -2, -1000, -1000, -1000, -1000, 657, 615, -1000, -1000,
	895, 1073, 3548, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1237, 713, 15288, 311, 356, 466, 410, 877, -1000,
	-1000, -1000, 772, -1000, 15288, 1459, -1000, -1000, 308, -1000,
	303, 651, 840, 15580, 153, 1236, 2154, -1000, -228, -1000,
	47, -1000, -1000, 829, 85, 85, 1205, 85, 85, 85,
	-1000, -1000, 520, 1338, 520, 520, 520, 520, 837, 837,
	-90, -90, -1000, -1000, -1000, 826, 1235, -1000, -1000, -1000,
	817, -1000, 1232, 1140, -1000, 6148, -1000, -1000, -1000, -1000,
	-1000, 1363, 1133, -1000, -1000, -1000, -1000, 367, -1000, -1000,
	1150, 1068, 403, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 275, 437, -1000, 4523, -1000, 616,
	15580, 15580, 1305, 657, 657, 474, -1000, -1000, 15580, -1000,
	-1000, -1000, -1000, 1097, -1000, -1000, -1000, 4198, 7986, -1000,
	1942, 2045, 1778, -1000, 9446, 9446, -1000, -1000, 1006, 7986,
	657, -1000, -1000, -1000, 697, 833, 697, 9446, 9446, 6473,
	9446, 9446, -53, 1032, 635, -1000, 8570, 717, -1000, -1000,
	-1000, -1000, -1000, 1250, 15872, 1171, -1000, 10906, 15288, 1415,
	15872, 8570, 8570, -1000, -1000, 8570, 1226, -1000, 8570, -1000,
	-1000, -1000, -1000, 1220, 1171, 1171, 1171, 956, -1000, 1415,
	1089, -1000, -1000, -1000, -23, -12, -1000, 8570, -1000, 3873,
	-1000, 3873, 12951, -1000, 1442, 1389, 337, 357, -1000, 874,
	871, -1000, 862, -1000, 12, -1000, -177, 82, 107, -1000,
	-1000, 1171, -1000, 1213, 1352, -1000, 1343, 815, -1000, 242,
	-213, -1000, -1000, -1000, -1000, -1000, -1000, 1171, 1211, 1210,
	-1000, 1208, -1000, -1000, -1000, 957, 520, 520, 85, 520,
	520, 520, -1000, 563, -1000, -1000, -1000, -1000, 995, -1000,
	990, -1000, 124, 105, -1000, 1071, -1000, 973, 15580, 15288,
	-1000, 1069, -1000, 614, 1387, 244, 15580, 1435, 1435, -1000,
	322, -1000, 15288, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15288, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 15580, -1000, -1000, -1000, -1000, -1000, 15288,
	348, -1000, -1000, 836, 8570, -1000, -1000, -1000, 6148, -1000,
	1425, 13243, -1000, -1000, 852, -1000, 9446, 2045, 2045, -1000,
	-1000, 852, 1205, 1205, -1000, 1205, 1207, -1000, -1000, 1205,
	158, 1205, 142, 852, 852, 137, 417, -1000, 110, 80,
	1171, -48, -1000, 657, 8570, -1000, 1345, 1049, 1061, -1000,
	-1000, 7694, 852, 967, 473, 956, 1393, -1000, 657, 657,
	657, 12366, 657, -131, 12366, 12366, 12366, 10614, 15288, 1393,
	-1000, -1000, -1000, -1000, 657, 3548, -1000, 949, -1000, 1205,
	1205, 394, 394, -202, 302, 298, -1000, -1000, -1000, -1000,
	-154, -1000, -1000, 651, -1000, 8570, 12366, 96, -1000, 1067,
	950, 2181, -1000, 252, 852, -1000, 818, -1000, 774, 946,
	-1000, -1000, -1000, 520, -1000, -1000, -1000, -1000, -1000, 85,
	834, 85, 40, 36, 812, -1000, 806, 1168, 1248, 6148,
	3873, 364, 1382, -1000, -1000, 1386, -1000, 1050, 15288, -1000,
	-1000, -1000, 1203, -1000, -1000, -1000, -1000, 1356, 15288, -1000,
	-1000, 657, 1423, 1063, -1000, 2045, -1000, -1000, 241, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9446, 9446,
	-1000, 9446, 9446, 9446, 852, 773, 657, 297, -1000, 1171,
	-1000, -1000, 1104, 15288, 15288, -1000, -1000, 945, -1000, -1000,
	938, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 930, 930,
	930, 551, -1000, -1000, 795, 12951, 1355, -1000, 706, -1000,
	-1000, 707, 243, 696, -1000, 15288, -154, -1000, 1171, 647,
	926, 9446, 1201, 799, -1000, 931, 92, -90, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 520, -1000, 520, -1000,
	-1000, 927, 916, 12951, 15288, 15580, -1000, -1000, 15288, -1000,
	-1000, -1000, -1000, -1000, 195, 2623, 1200, 12366, 1171, 352,
	1420, 1405, -1000, -1000, 225, 225, 225, 225, 60, -1000,
	-1000, 1449, -1000, 1171, -1000, 1140, 469, -1000, 15288, -1000,
	-1000, -131, -1000, -1000, -1000, -58, 1186, 1292, 147, -1000,
	853, 611, 770, 606, 593, 579, 578, 570, 568, 560,
	-1000, -1000, -1000, 1448, -1000, -1000, -1000, 1443, 1197, -1000,
	1189, 8570, 248, -1000, 281, -1000, 901, 887, -1000, -1000,
	-1000, -1000, -1000, -1000, 921, 1188, 1185, 1004, -1000, 190,
	2623, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1415, 15288, 15288, 15288, 15288, 350, 9154, 9154, 12951, 915,
	274, 291, -1000, 8570, 8570, -1000, -1000, -1000, -1000, 852,
	193, -117, 15872, 1061, 852, 15288, -1000, -1000, -1000, -1000,
	15288, -1000, -105, 1292, 15288, -1000, 787, -1000, -1000, 743,
	778, 743, 743, 743, 743, 743, 394, 394, 15288, 12951,
	647, -1000, -50, -140, 533, -1000, -1000, -204, 12951, 12951,
	-59, 15288, 8570, 2246, -1000, 1393, 1053, 9738, -1000, -1000,
	-1000, -1000, 15288, 1439, 1437, 1436, 1427, 2056, 41, 174,
	905, 1233, 900, -1000, 15288, 1179, 657, 1040, -1000, 1300,
	-56, -124, 1033, -1000, -1000, 1171, 886, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 651,
	651, 884, 882, -1000, -1000, -1000, -1000, 169, 783, 777,
	768, 755, 42, -1000, 1395, 1425, 1176, 870, 868, -1000,
	-215, -1000, 657, -1000, -1000, 2623, 1348, 15288, 186, -1000,
	-1000, 1351, -1000, -1000, -1000, -1000, -1000, 2623, 2623, -1000,
	-60, -1000, 274, 1330, 12951, -1000, 1297, -1000, 15288, -1000,
	1292, -1000, -1000, 346, 795, 753, -1000, 744, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 12658, 795, 12366, 1425, 795,
	8570, -224, -1000, -1000, 10322, 1385, 15288, 2548, -1000, 2469,
	-1000, -1000, 270, 851, -62, 852, -1000, 15580, 1186, -1000,
	-1000, -1000, 467, 1186, 848, 795, -1000, 657, 629, 1140,
	-1000, -1000, -1000, 653, 260, -1000, -118, -1000, 1172, -1000,
	6148, -1000, -1000, -1000, -1000, -1000, 172, 1171, -137, 15288,
	-1000, 2623, 8862, -1000, 846, 2288, 225, 852, -1000, -1000,
	-1000, -1000,
}

var yyPgo = [...]int{
	0, 1704, 21, 39, 1703, 1702, 1701, 1490, 1482, 1476,
	1473, 1695, 1694, 1691, 1690, 1689, 1686, 1682, 1681, 1680,
	1678, 1677, 1676, 1670, 1668, 1667, 1664, 1663, 595, 1662,
	1659, 1654, 96, 1652, 115, 1650, 1649, 59, 187, 76,
	52, 1017, 1641, 46, 106, 101, 1640, 72, 1639, 1638,
	105, 1637, 90, 1636, 1633, 368, 1632, 1631, 34, 4,
	18, 37, 1630, 1629, 100, 596, 1628, 1627, 1623, 1619,
	1618, 1614, 78, 17, 27, 25, 40, 1611, 57, 29,
	1609, 73, 1608, 1607, 1606, 1603, 26, 1601, 75, 31,
	19, 15, 1600, 14, 1595, 85, 65, 42, 13, 103,
	80, 1594, 66, 84, 71, 1593, 1592, 807, 1591, 1590,
	1589, 1588, 1587, 1586, 777, 784, 1584, 1583, 1581, 83,
	0, 433, 86, 88, 1574, 67, 1572, 1887, 110, 89,
	44, 1571, 47, 227, 58, 1570, 1569, 55, 104, 77,
	102, 98, 1566, 1564, 1558, 1557, 1555, 1126, 54, 193,
	43, 1553, 1552, 1550, 28, 61, 45, 70, 82, 1546,
	1543, 1540, 49, 1539, 20, 32, 9, 97, 1537, 1536,
	1535, 1534, 51, 48, 1533, 33, 11, 3, 5, 10,
	1526, 1525, 1524, 8, 1521, 36, 1520, 6, 1519, 7,
	1518, 1517, 1516, 1515, 1514, 1513, 1512, 1511, 1510, 1509,
	30, 16, 56, 41, 64, 68, 50, 1508, 53, 1504,
	2, 1, 1503, 12, 1502, 1500, 1499, 23, 24, 1495,
	1494, 1493, 1673, 129, 1492, 1487, 1485, 1479, 313,
}

var yyR1 = [...]int{
	0, 220, 221, 221, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 224,
	224, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 214, 214, 213, 215, 215, 12, 12, 12, 12,
	12, 207, 207, 207, 207, 207, 13, 13, 210, 210,
	14, 14, 100, 100, 104, 104, 104, 105, 105, 105,
	105, 135, 135, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 205, 205, 205, 206, 206,
	206, 208, 208, 209, 209, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 212, 212, 191, 191, 191, 192,
	192, 192, 192, 192, 192, 194, 194, 195, 195, 125,
	125, 189, 189, 188, 187, 187, 186, 186, 185, 196,
	196, 20, 169, 170, 170, 170, 170, 170, 158, 139,
	139, 139, 139, 139, 139, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 202, 202, 202,
	203, 203, 203, 203, 203, 203, 203, 203, 198, 198,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 148, 148, 148, 148, 148, 148,
	197, 197, 193, 193, 193, 193, 193, 193, 143, 143,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	142, 142, 142, 142, 142, 142, 142, 142, 144, 144,
	144, 144, 144, 144, 144, 144, 140, 140, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 146, 146, 146, 146, 146, 146, 146, 146, 157,
	157, 147, 147, 155, 155, 156, 156, 156, 154, 154,
	154, 151, 151, 152, 152, 153, 153, 153, 149, 149,
	149, 150, 150, 150, 160, 178, 178, 178, 180, 180,
	181, 181, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 168, 168, 204, 204, 177, 177, 177,
	174, 174, 174, 174, 174, 174, 174, 174, 167, 167,
	176, 176, 175, 175, 162, 162, 162, 162, 162, 163,
	164, 164, 164, 164, 161, 200, 200, 200, 201, 201,
	165, 165, 166, 166, 171, 171, 171, 172, 172, 172,
	173, 173, 173, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 225, 225, 226, 226,
	226, 226, 226, 226, 226, 184, 182, 182, 183, 183,
	17, 18, 18, 18, 18, 18, 19, 19, 21, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 112, 112, 109, 109, 110, 110, 111, 111,
	111, 113, 113, 113, 136, 136, 136, 23, 23, 25,
	25, 26, 27, 24, 24, 24, 24, 24, 227, 28,
	29, 29, 30, 30, 30, 34, 34, 34, 32, 32,
	33, 33, 39, 39, 38, 38, 40, 40, 40, 40,
	124, 124, 124, 123, 123, 42, 42, 43, 43, 44,
	44, 45, 45, 45, 217, 217, 216, 216, 218, 218,
	218, 218, 218, 218, 57, 57, 93, 93, 93, 96,
	96, 46, 46, 46, 46, 47, 47, 48, 48, 49,
	49, 131, 131, 130, 130, 130, 129, 129, 51, 51,
	51, 53, 52, 52, 52, 52, 54, 54, 56, 56,
	55, 55, 58, 58, 58, 58, 59, 59, 94, 94,
	41, 41, 41, 41, 41, 41, 41, 108, 108, 61,
	61, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 71, 71, 71, 71, 71, 71, 62, 62, 62,
	62, 62, 62, 62, 37, 37, 72, 72, 72, 78,
	73, 73, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 69, 69, 69, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 228, 228, 70, 70, 70, 70, 35, 35,
	35, 35, 35, 134, 134, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 138,
	138, 138, 138, 138, 138, 138, 82, 82, 36, 36,
	80, 80, 81, 83, 83, 79, 79, 79, 219, 64,
	64, 64, 64, 64, 64, 64, 64, 66, 66, 66,
	84, 84, 85, 85, 86, 86, 87, 87, 88, 89,
	89, 89, 90, 90, 90, 90, 91, 91, 91, 63,
	63, 63, 63, 63, 63, 92, 92, 92, 92, 97,
	97, 74, 74, 76, 76, 75, 77, 98, 98, 102,
	99, 99, 103, 103, 103, 103, 103, 101, 101, 101,
	126, 126, 126, 106, 106, 114, 114, 115, 115, 107,
	107, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 117, 117, 117, 118, 118, 121, 121, 122, 122,
	127, 127, 128, 128, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	222, 223, 132, 133, 133, 133,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	5, 9, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 14, 13, 14, 6, 5, 5,
	5, 11, 11, 9, 5, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 4, 0, 2, 2, 0,
	2, 2, 2, 2, 2, 0, 2, 0, 3, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 0,
	2, 4, 4, 1, 3, 3, 3, 3, 2, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 2, 4,
	4, 2, 2, 3, 2, 3, 2, 7, 8, 3,
	3, 6, 8, 5, 8, 7, 4, 2, 4, 6,
	2, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	0, 4, 3, 4, 3, 3, 3, 3, 3, 3,
	3, 2, 4, 6, 2, 3, 2, 3, 1, 3,
	0, 2, 0, 3, 3, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 3, 2, 2, 2, 2, 1, 1, 1, 3,
	3, 2, 1, 2, 1, 1, 1, 1, 4, 4,
	4, 4, 4, 1, 5, 2, 2, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 3,
	3, 0, 1, 0, 1, 0, 2, 1, 0, 3,
	3, 0, 1, 2, 6, 0, 1, 4, 1, 2,
	1, 3, 2, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 1, 1, 0, 2, 5,
	2, 3, 3, 2, 3, 2, 3, 4, 1, 1,
	1, 3, 3, 2, 2, 5, 5, 8, 8, 13,
	1, 1, 2, 2, 10, 0, 1, 1, 0, 3,
	0, 1, 1, 3, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 11, 13, 7, 7, 7, 12,
	7, 7, 7, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 6, 4, 2, 4, 2, 2, 2,
	2, 3, 1, 1, 0, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 0, 4, 1, 3, 1, 1,
	1, 1, 1, 1, 4, 8, 1, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 0, 4,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 3,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 6, 8, 8, 6, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 1, 2, 1, 2, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 5, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -220, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	113, 114, 116, 115, 145, 117, 138, 49, 187, 188,
	190, 191, 26, 139, 140, 143, 144, -222, 8, 292,
	53, -221, 333, -86, 15, -30, 5, -28, -227, -28,
	-28, -28, -28, -28, -169, 53, -125, -196, 154, 284,
	119, 134, 152, 153, 120, 136, 71, -107, 122, 124,
	120, 120, 121, 122, 284, 119, 120, -55, -127, 56,
	-120, 161, 301, 21, 187, 200, 201, 192, 233, 221,
	302, 159, 218, 222, 270, 332, 65, 190, 279, 128,
	165, 141, 213, 216, 215, 207, 204, 28, 239, 308,
	206, 131, 240, 244, 250, 271, 299, 197, 198, 273,
	237, 32, 133, 303, 34, 149, 274, 242, 236, 231,
	235, 196, 230, 38, 210, 246, 245, 247, 269, 224,
	160, 249, 226, 208, 225, 18, 144, 147, 241, 243,
	205, 162, 126, 151, 307, 275, 203, 148, 163, 143,
	278, 323, 158, 191, 272, 199, 281, 37, 255, 217,
	194, 209, 195, 130, 188, 156, 228, 150, 211, 212,
	234, 193, 229, 189, 152, 145, 280, 256, 309, 227,
	223, 219, 220, 157, 122, 154, 155, 262, 263, 264,
	265, 305, 276, 214, 257, 258, 167, 168, 169, 170,
	171, 172, 173, 120, 107, 222, 113, 260, 121, 32,
	151, -136, 120, -109, 155, 262, 263, 264, 265, 56,
	272, 271, 266, -127, 189, -132, -132, -132, -132, -132,
	-2, -90, 17, 16, -5, -3, -222, 6, 21, 22,
	-34, 39, 40, -29, -40, 98, -41, -127, -60, 73,
	-65, 29, 56, -120, 24, -64, -61, -79, -219, -77,
	-78, 107, 108, 96, 97, 104, 74, 109, -69, -67,
	-68, -70, 58, 57, 66, 59, 60, 61, 62, 67,
	68, 69, -121, 282, -75, -222, 43, 44, 293, 294,
	295, 296, 300, 297, 76, 33, 283, 291, 290, 289,
	287, 288, 285, 286, 331, 125, 284, 102, 292, -107,
	-43, -44, -45, -46, -57, -78, -222, -55, 11, -50,
	-55, -99, -135, 189, -103, 272, 271, -122, 282, -101,
	-121, -119, 270, 222, 269, 56, -120, 118, 175, 312,
	72, 23, 25, 253, 259, 174, 75, 107, 16, 76,
	181, 321, 322, 106, 293, 113, 47, 285, 286, 283,
	179, 295, 296, 284, 260, 186, 20, 29, 10, 26,
	139, 22, 100, 115, 176, 79, 80, 142, 24, 140,
	69, 182, 184, 19, 50, 132, 11, 311, 13, 14,
	325, 313, 125, 124, 91, 324, 121, 45, 8, 109,
	27, 88, 41, 137, 185, 43, 89, 17, 287, 288,
	31, 300, 146, 102, 48, 35, 326, 73, 327, 67,
	51, 277, 180, 71, 15, 46, 328, 134, 183, 90,
	116, 292, 44, 177, 329, 119, 178, 6, 298, 30,
	138, 42, 120, 261, 78, 123, 68, 5, 136, 9,
	49, 52, 289, 290, 291, 33, 77, 12, 135, 304,
	70, -170, -158, 56, -200, 321, 322, 122, -121, -115,
	125, -115, -121, -121, -55, -115, 292, 120, -55, -55,
	-114, 125, 56, -114, -114, -114, -55, 110, -55, 56,
	30, 284, 56, 151, 120, 152, 122, -133, -222, -122,
	-133, -133, -133, 156, 157, -133, -110, 267, 51, -133,
	-223, 55, -91, 19, 31, -41, -127, -87, -88, -41,
	-86, -2, -28, 35, -32, 22, 64, 11, -124, 72,
	71, 88, -123, 23, -121, 58, 110, -41, -62, 91,
	73, 89, 90, 75, 93, 92, 103, 96, 97, 98,
	99, 100, 101, 102, 94, 95, 106, 331, 81, 82,
	83, 84, 85, 86, 87, -108, -222, -78, -222, 111,
	112, -65, -65, -65, -65, -65, -65, -65, -222, 110,
	-2, -73, -41, -222, -222, -222, -222, -222, -222, -222,
	-222, -222, -82, -41, -222, -228, -222, -228, -228, -228,
	-228, -228, -228, -228, -138, 107, 222, 141, 213, -141,
	-140, 228, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 221, 302, -222, -222, -222, -222, -56, 27,
	-55, 30, 54, -51, -53, -52, -54, 41, 45, 47,
	42, 43, 44, 48, -131, 23, -43, -222, -130, 147,
	-129, 23, -127, 58, -55, -50, -224, 54, 11, 52,
	54, -99, 189, -100, -104, 273, 275, 81, 110, -126,
	-121, 58, 29, 30, 55, 54, -159, -139, -143, -140,
	-145, -144, -146, -121, -141, -142, 221, 302, 218, 222,
	219, 224, 225, 226, 107, 223, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 227, 239, 30,
	141, 211, 212, 213, 216, 215, 217, 214, 240, 241,
	242, 243, 244, 245, 246, 247, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 203, 204, 206, 207,
	208, 210, 209, 121, -55, -189, 52, 56, 73, 56,
	51, -205, 51, 19, 174, 175, 23, -55, -55, 277,
	-133, 123, -55, 24, 51, -55, 56, 56, -128, -127,
	-119, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, -112, 261, 268, -55, 9, 91, 54, 18, 110,
	54, -89, 25, 26, -90, -223, -34, -66, -121, 59,
	62, -33, 42, -55, -41, -41, -71, 67, 73, 68,
	69, -123, 98, -128, -122, -119, -65, -72, -75, -78,
	63, 91, 89, 90, 75, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-134, 56, 58, -138, 56, -64, -64, -121, -39, 22,
	-38, -40, -122, -223, 54, -223, -2, -38, -38, -41,
	-41, -79, -121, -127, -79, -38, -32, -80, -81, 77,
	-79, -223, 220, -38, -39, -38, -38, -95, 147, -55,
	-98, -102, -79, -44, -45, -45, -44, -45, 41, 41,
	41, 46, 41, 46, 41, -52, -127, -223, -58, 49,
	124, 50, -222, -129, -95, 52, -43, -55, -103, -100,
	54, 274, 276, 277, 51, 70, -41, -122, -150, 107,
	106, -171, -172, -173, -122, 58, 59, -158, -160, -162,
	-161, -174, -163, 128, 126, 130, 131, 136, -167, 121,
	137, 67, 73, -202, 128, 51, 253, 259, 126, 137,
	136, 332, 65, 129, 311, 313, 29, -153, 334, 248,
	-151, 256, -147, 53, -147, -147, 220, -147, -147, -147,
	-147, -147, -149, 222, -149, -149, -149, -149, 53, 53,
	-147, -147, -147, -147, -155, 53, 205, -155, -155, -156,
	53, -156, -121, 23, -187, 304, -188, 56, -133, 24,
	-133, -55, -208, -206, 8, 9, 10, -55, -139, -116,
	118, 115, 116, -184, 114, 253, 222, 65, 29, 15,
	293, 147, 309, 56, 148, -55, -55, -55, -133, -111,
	11, 91, 37, -41, -41, -128, -88, -91, -106, 19,
	11, 33, 33, -38, 67, 68, 69, 110, -222, -72,
	-65, -65, -65, -37, 142, 72, -223, -223, -38, 54,
	-41, -223, -223, -223, 54, 52, 23, 54, 11, 110,
	54, 11, -223, -38, -83, -81, 79, -41, -223, -223,
	-223, -223, -223, -63, 30, 33, -2, -222, -222, -59,
	54, 12, 81, -48, -47, 51, 52, -49, 51, -47,
	41, 41, -217, 304, 121, 121, 121, -96, -121, -59,
	-43, -59, -104, -105, 278, 275, 281, 81, 56, 54,
	-173, 81, 53, -201, 51, 73, -165, -121, 137, -167,
	-167, 56, -167, 56, 56, 67, 19, -121, 9, 137,
	137, -201, 58, -127, -198, 312, 16, 53, -203, 53,
	58, 59, 60, 67, -148, 66, -61, 249, 283, 286,
	285, 250, 335, -152, 257, 59, -149, -149, -147, -149,
	-149, -149, -150, 30, -150, -150, -150, -150, -157, 58,
	-157, -154, 304, 305, -154, 59, -155, 59, 51, 52,
	-2, -186, -185, -122, -191, 23, 51, 54, -205, -132,
	-125, -226, 154, 127, 132, 131, 56, 126, 130, 147,
	-190, 154, 127, 128, 132, 131, 56, 121, 137, 126,
	130, 147, 136, -117, -118, 123, 23, 121, 137, 147,
	118, -133, -113, 89, 12, -127, -127, 38, 110, -55,
	-42, 11, 98, -122, -39, -37, 72, -65, -65, -223,
	-40, -137, 107, 218, 141, 213, 207, 237, 238, 224,
	255, 211, 256, -134, -137, -65, -65, -122, -65, -65,
	301, -86, 80, -41, 78, -97, 51, -98, -74, -76,
	-75, -222, -2, -92, -121, -96, -86, -102, -41, -41,
	-41, 53, -41, 53, -222, -222, -222, -223, 54, -86,
	-59, 275, 279, 280, -41, -172, -173, -176, -175, -121,
	137, 10, 9, 19, 132, 126, 56, 56, 56, -200,
	136, 323, -202, 332, -148, -222, 53, 23, 29, 59,
	-203, 53, -193, 331, -222, -147, 53, -147, 53, 53,
	55, -150, -150, -149, -150, -150, -150, 56, 107, 55,
	54, 55, 211, 211, 54, 55, 54, -55, -121, 54,
	81, -192, 19, 162, 163, -55, -206, -208, -225, 121,
	137, -132, -121, -132, -121, -55, -132, -121, 128, -162,
	58, -41, -59, -43, -223, -65, -223, -147, -147, -147,
	-156, -147, 198, -147, 198, -223, -223, -223, 54, 19,
	-223, 54, 19, -222, -36, 298, -41, 28, -97, 54,
	-223, -223, -223, 54, 110, -223, -90, -93, -121, 137,
	-216, -218, 325, 326, 327, 328, 329, 330, -93, -93,
	-93, -130, -121, -90, 55, 54, -147, -147, -164, 158,
	159, 30, 160, -164, 323, 137, 137, -200, -201, -41,
	-93, 53, 313, 54, 55, -203, 222, 212, 251, 228,
	237, -223, 55, 55, 55, -150, -149, 58, -149, 258,
	258, 59, 59, 53, 52, 51, -185, -173, 123, 21,
	6, 8, 9, 10, 19, 23, -121, 53, 27, -121,
	-84, 13, -149, 56, -65, -65, -65, -65, -65, -223,
	58, 137, -76, 33, -2, -222, -121, -121, 54, 55,
	55, 54, -223, -223, -223, -58, -178, -180, 304, -179,
	52, 133, 65, 167, 168, 169, 170, 171, 172, 173,
	-175, -89, -201, 51, 67, 161, -201, 51, -165, -121,
	-200, -222, -223, 55, -65, 53, 59, 55, 220, -154,
	-150, -150, 55, 55, -176, -121, -55, -166, -121, 176,
	-209, -211, -7, -9, -8, -11, -10, -12, -13, -14,
	-3, 20, 180, 181, 186, 182, 135, 125, 53, -93,
	-222, 126, -85, 14, 16, -223, -223, -223, -223, -35,
	91, 304, 9, -74, -2, 110, -121, -218, -217, -177,
	51, -179, 304, 53, 306, 56, -168, 81, 58, 81,
	81, 81, 81, 81, 81, 81, 9, 10, 53, 53,
	-41, -197, 160, 55, -199, 55, 55, 55, 53, 53,
	-194, 54, 52, 177, -211, -86, -214, -121, -213, -121,
	-121, -121, -207, 35, 183, 184, 185, -60, -65, -60,
	-176, 55, -182, -183, 147, 137, -41, -73, -223, 302,
	48, 307, -98, -223, -121, -121, -181, -179, -121, 59,
	-204, 51, 70, 59, -204, -204, -204, -204, -204, -164,
	-164, -166, -176, -223, 299, 310, 55, 188, 315, 316,
	146, 317, 160, 318, 319, -94, 324, -176, -176, -195,
	304, -121, -41, -212, -211, 187, -90, 54, -215, -139,
	178, -121, 11, 11, 11, 11, -211, 187, 187, 55,
	-189, -223, 54, -121, 53, 38, 303, 308, -222, 55,
	54, -201, -201, 55, 55, 304, 59, 16, 59, 59,
	59, 59, 316, 146, 318, 16, -59, 53, 55, 55,
	332, -211, -91, -213, -121, 179, 27, -210, -211, -210,
	-187, -183, 33, -176, 38, -121, -179, 129, -178, 59,
	59, 320, -127, -178, -93, -59, -178, -41, 333, 19,
	-121, 80, -211, 80, 149, 55, 304, -223, -55, -177,
	110, -177, 55, -178, 80, -2, 79, 150, 307, 53,
	-122, 187, -222, 308, -166, -210, -65, 146, 55, 80,
	-223, -223,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 724, 0, 468, 468, 468, 468, 468, 468, 0,
	-2, 779, 0, 0, 0, 0, -2, 458, 459, 0,
	461, 462, 1062, 1062, 1062, 1062, 1062, 0, 33, 34,
	1060, 1, 3, 732, 0, 0, 472, 475, 470, 0,
	779, 0, 0, 0, 83, 0, 355, 0, 0, 777,
	777, 0, 0, 0, 777, 130, 0, 0, 0, 780,
	0, 775, 0, 775, 775, 775, 0, 417, 550, 800,
	801, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 0, 0, 0, 0, 1063, 1063, 1063,
	1063, 0, 1063, 446, 435, 437, 438, 439, 440, 1063,
	455, 456, 445, 457, 460, 463, 464, 465, 466, 467,
	27, 736, 0, 0, 724, 29, 0, 468, 473, 474,
	478, 476, 477, 469, 0, 486, 490, 0, 560, 0,
	565, 567, -2, -2, 0, 602, 603, 604, 605, 606,
	607, 0, 0, 0, 0, 0, 0, 0, 631, 632,
	633, 634, 709, 710, 711, 712, 713, 714, 715, 716,
	569, 570, 705, 0, 756, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 696, 0, 662, 662, 662, 662,
	662, 662, 662, 662, 0, 0, 0, 0, 0, 0,
	0, 497, 499, 500, 501, 531, 0, 533, 0, 0,
	41, 45, 0, 1030, 760, -2, -2, 0, 0, 0,
	798, 799, -2, 940, -2, 796, 797, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 0, 143, 0, 0, 356, 357, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 140, 0, 1063, 0,
	0, 0, 0, 0, 0, 0, 416, 0, 418, 1063,
	1063, 1063, 1063, 1063, 1063, 1063, 1063, 427, 1064, 1065,
	428, 429, 430, 1063, 1063, 432, 0, 447, 0, 441,
	28, 1061, 22, 0, 0, 733, 0, 725, 726, 729,
	732, 27, 475, 0, 480, 479, 471, 0, 487, 0,
	0, 0, 491, 0, 493, 494, 0, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 588,
	589, 590, 591, 592, 593, 566, 0, 580, 0, 0,
	0, 623, 624, 625, 626, 627, 628, 0, 482, 0,
	27, 0, 600, 0, 0, 0, 0, 0, 0, 0,
	0, 478, 0, 697, 0, 653, 0, 654, 655, 656,
	657, 658, 659, 660, 661, 689, 0, 691, 692, 693,
	694, 695, 220, 221, 222, 223, 224, 225, 226, 227,
	228, 229, 246, 247, 0, 482, 0, 0, 43, 0,
	549, 0, 0, 0, 0, 0, 0, 538, 0, 0,
	541, 0, 0, 0, 0, 532, 0, 0, 552, 994,
	534, 0, 536, 537, -2, 0, 0, 0, 39, 40,
	0, 46, 1030, 48, 72, 0, 0, 0, 0, 301,
	770, 771, 772, 768, 364, 0, 148, 295, 291, 150,
	151, 152, 153, 154, 281, 219, 246, 247, 281, 281,
	281, 281, 281, 253, 281, 281, 298, 298, 298, 298,
	298, 262, 263, 264, 265, 266, 267, 268, 955, 0,
	238, 281, 281, 281, 242, 281, 244, 245, 271, 272,
	273, 274, 275, 276, 277, 278, 220, 221, 222, 223,
	224, 225, 226, 227, 228, 229, 283, 283, 283, 285,
	285, 236, 237, 0, 0, 134, 0, 1063, 0, 1063,
	0, 0, 0, 95, 96, 97, 0, 141, 0, 0,
	383, 0, 411, 776, 0, 1063, 414, 415, 551, 802,
	803, 419, 420, 421, 422, 423, 424, 425, 426, 431,
	434, 448, 442, 443, 436, 737, 0, 0, 0, 0,
	0, 728, 730, 731, 736, 30, 478, 0, 717, 0,
	0, 0, 481, 25, 561, 562, 564, 581, 0, 583,
	585, 492, 488, 0, 706, -2, 571, 572, 596, 597,
	598, 0, 0, 0, 0, 594, 576, 0, 608, 609,
	610, 611, 612, 613, 614, 615, 616, 617, 618, 619,
	622, 673, 674, 630, 0, 620, 621, 629, 0, 0,
	483, 484, 708, 599, 0, 755, 27, 0, 0, 0,
	0, 0, 705, 0, 0, 0, 0, 703, 700, 0,
	0, 663, 690, 0, 0, 0, 0, 0, 0, 548,
	556, 757, 0, 498, 527, 529, 0, 524, 539, 540,
	542, 0, 544, 0, 546, 547, 502, 503, 504, 0,
	0, 0, 0, 535, 556, 0, 556, 42, 761, 47,
	0, 0, 75, 76, 762, 763, 764, 0, 766, 302,
	0, 142, 365, 367, 370, 371, 372, 144, 145, 146,
	147, 0, 358, 360, 0, 0, 0, 0, 0, 338,
	339, 156, 0, 158, 0, 0, 161, 162, 0, 164,
	166, 358, 0, 0, 0, 0, 0, 155, 0, 297,
	293, 292, 218, 0, 298, 298, 281, 298, 298, 298,
	255, 256, 301, 0, 301, 301, 301, 301, 0, 0,
	288, 288, 241, 243, 230, 0, 283, 232, 233, 234,
	0, 235, 0, 0, 88, 0, 132, 133, 89, 778,
	90, 116, 0, 101, 98, 99, 100, 0, 94, 1062,
	129, 0, 791, 384, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 0, 0, 410, 1063, 413, 451,
	0, 0, 0, 734, 735, 0, 727, 23, 0, 773,
	774, 718, 719, 495, 582, 584, 586, 0, 482, 573,
	594, 577, 0, 574, 0, 0, 568, 635, 0, 0,
	601, -2, 638, 639, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 724, 0, 701, 0, 0, 652, 664,
	665, 666, 667, 749, 0, 0, -2, 0, 0, 724,
	0, 0, 0, 521, 528, 0, 0, 522, 0, 523,
	543, 545, 514, 0, 0, 0, 0, 0, 519, 724,
	556, 38, 73, 74, 0, 0, 80, 0, 303, 0,
	368, 0, 0, 344, 0, 0, 0, 361, 330, 0,
	0, 333, 0, 335, 355, 157, 0, 0, 0, 163,
	165, 0, 169, 170, 0, 188, 0, 0, 177, 0,
	212, 181, 182, 183, 184, 185, 186, 0, 281, 281,
	208, 0, 296, 149, 294, 0, 301, 301, 298, 301,
	301, 301, 257, 0, 258, 259, 260, 261, 0, 279,
	0, 239, 0, 0, 240, 0, 231, 0, 0, 0,
	-2, 135, 136, 0, 119, 0, 0, 0, 0, 373,
	0, 1062, 0, 398, 399, 400, 401, 402, 403, 404,
	1062, 0, 385, 386, 387, 388, 389, 390, 391, 392,
	393, 394, 395, 0, 1062, 792, 793, 794, 795, 0,
	0, 412, 433, 0, 0, 449, 450, 738, 0, 24,
	556, 0, 489, 707, 0, 575, 0, 595, 578, 636,
	485, 0, 281, 281, 678, 281, 285, 681, 682, 281,
	684, 281, 687, 0, 0, 0, 0, 706, 0, 0,
	0, 698, 651, 704, 0, 31, 0, 749, 739, 751,
	753, 0, 27, 0, 745, 0, 732, 758, 557, 759,
	525, 0, 530, 0, 0, 0, 0, 533, 0, 732,
	37, 77, 78, 79, 765, 366, 369, 0, 340, 281,
	281, 0, 0, 0, 0, 0, 331, 332, 334, 336,
	355, 176, 159, 358, 160, 0, 0, 0, 189, 0,
	0, 0, 180, 0, 0, 204, 0, 206, 0, 0,
	282, 248, 249, 301, 250, 251, 252, 299, 300, 298,
	0, 298, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 117, 118, 0, 102, 0, 0, 396,
	397, 377, 0, 378, 380, 381, 382, 0, 360, 376,
	452, 453, 720, 496, 637, 579, 640, 675, 298, 679,
	680, 683, 685, 686, 688, 642, 641, 643, 0, 0,
	646, 0, 0, 0, 0, 0, 702, 0, 32, 0,
	754, -2, 0, 0, 0, 44, 35, 0, 516, 517,
	0, 506, 508, 509, 510, 511, 512, 513, 0, 0,
	0, 552, 520, 36, 305, 0, 729, 343, 358, 350,
	351, 0, 0, 358, 359, 360, 355, 337, 0, 0,
	0, 0, 173, 0, 178, 0, 0, 288, 215, 216,
	217, 187, 205, 207, 209, 254, 301, 280, 301, 289,
	290, 0, 0, 0, 0, 0, 137, 138, 0, 120,
	121, 122, 123, 124, 0, 0, 0, 0, 0, 361,
	722, 0, 676, 677, 0, 0, 0, 0, 668, 650,
	699, 0, 752, 0, -2, 0, 747, 746, 0, 526,
	505, 0, 553, 554, 555, 504, 327, 306, 0, 308,
	0, 323, 0, 0, 0, 0, 0, 0, 0, 0,
	341, 342, 345, 0, 352, 353, 346, 0, 0, 361,
	0, 0, 210, 171, 0, 190, 0, 0, 213, 214,
	269, 270, 284, 287, 0, 0, 0, 125, 362, 0,
	93, 103, 105, 106, 107, 108, 109, 110, 111, 112,
	724, 0, 0, 0, 0, 61, 0, 0, 0, 0,
	0, 0, 26, 0, 0, 644, 645, 647, 648, 0,
	0, 0, 0, 742, 27, 0, 518, 507, 515, 304,
	0, 309, 0, 0, 0, 312, 0, 324, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 167, 0, 0, 0, 175, 179, 558, 0, 0,
	127, 0, 0, 0, 104, 732, 49, 54, 51, 56,
	57, 58, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 406, 0, 0, 723, 721, 649, 0,
	0, 0, 750, -2, 748, 328, 0, 310, 315, 313,
	316, 325, 326, 317, 318, 319, 320, 321, 322, 358,
	358, 0, 0, 168, 211, 172, 174, 0, 0, 0,
	0, 0, 0, 201, 0, 556, 0, 0, 0, 91,
	0, 363, 126, 92, 114, 0, 736, 0, 0, 53,
	55, 59, 62, 63, 64, 65, 66, 0, 0, 374,
	134, 405, 0, 0, 0, 669, 0, 672, 0, 307,
	0, 347, 348, 0, 305, 0, 192, 0, 194, 195,
	196, 197, 198, 199, 200, 0, 305, 0, 556, 305,
	0, 0, 113, 52, 0, 0, 0, 0, 68, 0,
	379, 407, 0, 0, 670, 0, 311, 0, 327, 191,
	193, 202, 0, 327, 0, 305, 85, 128, 0, 0,
	60, 67, 69, 70, 0, 375, 0, 329, 0, 354,
	0, 84, 559, 86, 115, -2, 0, 0, 0, 0,
	203, 0, 0, 671, 0, 0, 0, 0, 349, 71,
	408, 409,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 333,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 334, 3, 335, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:364
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:369
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:370
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:374
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:397
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:405
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:409
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:415
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:422
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:428
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:432
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:438
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:442
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:449
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:461
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:473
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:477
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:483
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:489
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:493
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:497
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:502
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:503
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:507
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:511
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:516
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:520
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:526
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:530
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:534
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:538
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:544
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:548
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:561
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:565
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:571
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:576
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:580
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:586
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:593
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:600
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:607
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:615
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:625
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:629
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:633
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:637
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:641
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:647
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:654
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:664
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:668
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:674
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:682
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:693
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:697
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:703
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:707
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:711
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:717
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:721
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:725
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:729
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:735
		{
			yyVAL.str = SessionStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:739
		{
			yyVAL.str = GlobalStr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:745
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 84:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:750
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 85:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:770
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 86:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:786
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:801
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:809
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:817
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:821
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:825
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 92:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:837
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:848
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:859
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:871
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:875
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:879
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:885
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:889
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:893
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:899
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:903
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:909
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:913
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:919
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:930
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:942
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:949
		{
			yyVAL.bytes = nil
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:953
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:957
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:962
		{
			yyVAL.bytes = nil
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:966
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:970
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:974
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:978
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:982
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:987
		{
			yyVAL.expr = nil
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:991
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:996
		{
			yyVAL.expr = nil
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1000
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1005
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1009
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1014
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1018
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1024
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1029
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1034
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1040
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1045
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1051
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1056
		{
			yyVAL.bytes = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1060
		{
			yyVAL.bytes = nil
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1066
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1073
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1080
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1085
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1089
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1093
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1097
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1103
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1109
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1120
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1126
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1138
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1143
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1148
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1153
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1158
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1163
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1168
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1173
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1178
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1183
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1188
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1193
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[5].expr), NotForReplication: bool(yyDollar[3].boolVal)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[7].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1199
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[7].expr), ConstraintName: yyDollar[3].colIdent, NotForReplication: bool(yyDollar[5].boolVal)}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1204
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1209
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1214
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1221
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1227
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1233
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1239
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1245
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1252
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1256
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 179:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1260
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1266
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1270
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1274
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1278
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1282
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1286
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1290
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1294
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1300
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1304
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1309
		{
			yyVAL.sequence = &Sequence{}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1313
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1318
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1323
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1328
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1333
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1338
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1343
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1348
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1353
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1358
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1363
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1368
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 203:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1373
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1380
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1384
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1388
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1392
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1396
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1400
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1405
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1409
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1414
		{
			yyVAL.bytes = nil
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1425
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1430
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1436
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1440
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1444
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1448
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1452
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1456
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1460
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1464
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1468
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1472
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1478
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1484
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1496
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1502
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1508
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1514
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1518
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1524
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1528
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1532
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1536
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1540
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1544
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1548
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1552
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1568
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1572
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1576
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1580
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1584
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1588
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1592
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1596
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1600
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1604
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1608
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1612
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1620
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1624
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1628
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1632
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1636
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1644
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1648
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1652
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 270:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1697
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1702
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1707
		{
			yyVAL.optVal = nil
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1711
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1716
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1720
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1728
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1732
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1738
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1746
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1750
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1754
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1759
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1763
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1768
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1772
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1777
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1781
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1785
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1790
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1794
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1798
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1803
		{
			yyVAL.str = ""
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1807
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1811
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1817
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1822
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1826
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1830
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1836
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1840
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1846
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1850
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1856
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1860
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1865
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1869
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1873
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1877
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1881
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1885
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1889
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1893
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1897
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1903
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1907
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1913
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1917
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1923
		{
			yyVAL.indexPartition = nil
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1927
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 329:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1931
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1937
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1941
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1945
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1949
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1953
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1957
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1961
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1965
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1971
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1975
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1981
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1985
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1991
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1996
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2002
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 345:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2007
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2014
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 347:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2021
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 348:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2028
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 349:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2037
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2049
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2053
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2057
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2061
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 354:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2067
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2078
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2082
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2086
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2092
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2096
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2101
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2108
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2112
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2117
		{
			yyVAL.str = ""
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2121
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2125
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2133
		{
			yyVAL.str = yyDollar[1].str
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2137
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2141
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2147
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2151
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2155
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2161
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 374:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2165
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 375:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2179
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 376:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2193
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2202
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 378:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2206
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 379:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2210
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 380:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2223
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 381:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2233
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 382:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2238
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2243
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2247
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 405:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2279
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2285
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2289
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 408:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2295
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 409:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2299
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2305
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2311
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 412:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2319
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2324
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2332
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2336
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2342
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2346
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2351
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2357
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2361
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2365
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2370
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2374
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2378
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2382
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2386
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2390
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2394
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2398
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2402
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2406
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2414
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2424
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2428
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2432
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2436
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2440
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2444
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2448
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2458
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2464
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2468
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2474
		{
			yyVAL.str = ""
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2478
		{
			yyVAL.str = "extended "
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2484
		{
			yyVAL.str = ""
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2488
		{
			yyVAL.str = "full "
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2494
		{
			yyVAL.str = ""
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2498
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2502
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2508
		{
			yyVAL.showFilter = nil
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2512
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2516
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2522
		{
			yyVAL.str = ""
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2526
		{
			yyVAL.str = SessionStr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2530
		{
			yyVAL.str = GlobalStr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2536
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2540
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2546
		{
			yyVAL.statement = &Begin{}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2550
		{
			yyVAL.statement = &Begin{}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2556
		{
			yyVAL.statement = &Commit{}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2562
		{
			yyVAL.statement = &Rollback{}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2568
		{
			yyVAL.statement = &OtherRead{}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2572
		{
			yyVAL.statement = &OtherRead{}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2576
		{
			yyVAL.statement = &OtherRead{}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2580
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2584
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2589
		{
			setAllowComments(yylex, true)
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2593
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2599
		{
			yyVAL.bytes2 = nil
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2603
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2609
		{
			yyVAL.str = UnionStr
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2613
		{
			yyVAL.str = UnionAllStr
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2617
		{
			yyVAL.str = UnionDistinctStr
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2622
		{
			yyVAL.str = ""
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2626
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2630
		{
			yyVAL.str = SQLCacheStr
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2635
		{
			yyVAL.str = ""
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2639
		{
			yyVAL.str = DistinctStr
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2644
		{
			yyVAL.str = ""
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2648
		{
			yyVAL.str = StraightJoinHint
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2653
		{
			yyVAL.selectExprs = nil
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2657
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2663
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2667
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2673
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2677
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2681
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 489:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2685
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2690
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2694
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2698
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2705
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2710
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2714
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2720
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2724
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2734
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2738
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2742
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2747
		{
			yyVAL.strs = []string{}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2751
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2757
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2761
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2767
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2771
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2775
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2779
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2783
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2787
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2793
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 515:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2797
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2803
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2808
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2812
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2818
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2822
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2835
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2839
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2843
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2847
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2853
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2855
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2859
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2861
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2865
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2867
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2870
		{
			yyVAL.empty = struct{}{}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2872
		{
			yyVAL.empty = struct{}{}
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2875
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2879
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2883
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2890
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2896
		{
			yyVAL.str = JoinStr
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2900
		{
			yyVAL.str = JoinStr
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2904
		{
			yyVAL.str = JoinStr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2910
		{
			yyVAL.str = StraightJoinStr
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2916
		{
			yyVAL.str = LeftJoinStr
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2920
		{
			yyVAL.str = LeftJoinStr
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2924
		{
			yyVAL.str = RightJoinStr
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2928
		{
			yyVAL.str = RightJoinStr
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2934
		{
			yyVAL.str = NaturalJoinStr
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2938
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2948
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2952
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2958
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2962
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2967
		{
			yyVAL.indexHints = nil
		}
	case 553:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2971
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 554:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2975
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2979
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2984
		{
			yyVAL.expr = nil
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2988
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2993
		{
			yyVAL.columns = nil
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2997
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3003
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3007
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3011
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3015
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3019
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3023
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3027
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3033
		{
			yyVAL.str = ""
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3037
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3043
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3047
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3053
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3057
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3061
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3065
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 575:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3069
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3073
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3077
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3081
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 579:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3085
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3089
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3095
		{
			yyVAL.str = IsNullStr
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3099
		{
			yyVAL.str = IsNotNullStr
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3103
		{
			yyVAL.str = IsTrueStr
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3107
		{
			yyVAL.str = IsNotTrueStr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3111
		{
			yyVAL.str = IsFalseStr
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3115
		{
			yyVAL.str = IsNotFalseStr
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3121
		{
			yyVAL.str = EqualStr
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3125
		{
			yyVAL.str = LessThanStr
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3129
		{
			yyVAL.str = GreaterThanStr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3133
		{
			yyVAL.str = LessEqualStr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3137
		{
			yyVAL.str = GreaterEqualStr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3141
		{
			yyVAL.str = NotEqualStr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3145
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3150
		{
			yyVAL.expr = nil
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3154
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3160
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3164
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3168
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3174
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3180
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3184
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3190
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3194
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3198
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3202
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3206
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3210
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3214
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3218
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3222
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3226
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3230
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3234
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3238
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3242
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3246
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3250
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3254
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3258
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3262
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3266
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3270
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3274
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3278
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3282
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3290
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3304
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3308
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3312
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3320
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3334
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 636:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3338
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 637:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3342
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3352
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3356
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 640:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3360
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 641:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3364
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 642:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3368
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 643:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3372
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 644:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3376
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 645:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3380
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 646:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3384
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 647:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3388
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 648:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3392
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 649:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3396
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 650:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3400
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3404
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3408
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3418
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3422
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3426
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3430
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3435
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3440
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3445
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3450
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3454
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3468
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 665:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3472
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3476
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 667:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3480
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3486
		{
			yyVAL.str = ""
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3490
		{
			yyVAL.str = BooleanModeStr
		}
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3494
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 671:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3498
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3502
		{
			yyVAL.str = QueryExpansionStr
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3508
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3512
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3518
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3522
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3526
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3530
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3534
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3538
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3544
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3548
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3552
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3556
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3560
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3564
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3568
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3572
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3578
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3582
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3586
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3590
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3594
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3598
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3602
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3607
		{
			yyVAL.expr = nil
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3611
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3616
		{
			yyVAL.str = string("")
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3620
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3626
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3630
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3636
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3641
		{
			yyVAL.expr = nil
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3645
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3651
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3655
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 707:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3659
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3665
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3671
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3675
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3679
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3683
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3687
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3691
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3695
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3699
		{
			yyVAL.expr = &NullVal{}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3705
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3714
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3718
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3723
		{
			yyVAL.exprs = nil
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3727
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3732
		{
			yyVAL.expr = nil
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3736
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3741
		{
			yyVAL.orderBy = nil
		}
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3745
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3751
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3755
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3761
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3766
		{
			yyVAL.str = AscScr
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3770
		{
			yyVAL.str = AscScr
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3774
		{
			yyVAL.str = DescScr
		}
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3779
		{
			yyVAL.limit = nil
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3783
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 734:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3787
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3791
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3796
		{
			yyVAL.str = ""
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3800
		{
			yyVAL.str = ForUpdateStr
		}
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3804
		{
			yyVAL.str = ShareModeStr
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3817
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3821
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3825
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 742:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3830
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3834
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 744:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3838
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3845
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3849
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3853
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 748:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3857
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 749:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3862
		{
			yyVAL.updateExprs = nil
		}
	case 750:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3866
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3872
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3876
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3882
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3886
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3892
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3898
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3908
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3912
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3918
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3924
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3928
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3934
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3938
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3942
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 765:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3947
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3951
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3958
		{
			yyVAL.bytes = []byte("charset")
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3965
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3969
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3973
		{
			yyVAL.expr = &Default{}
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3982
		{
			yyVAL.byt = 0
		}
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3984
		{
			yyVAL.byt = 1
		}
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3987
		{
			yyVAL.empty = struct{}{}
		}
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3989
		{
			yyVAL.empty = struct{}{}
		}
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3992
		{
			yyVAL.str = ""
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3994
		{
			yyVAL.str = IgnoreStr
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3998
		{
			yyVAL.empty = struct{}{}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4000
		{
			yyVAL.empty = struct{}{}
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4002
		{
			yyVAL.empty = struct{}{}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4004
		{
			yyVAL.empty = struct{}{}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4006
		{
			yyVAL.empty = struct{}{}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4008
		{
			yyVAL.empty = struct{}{}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4010
		{
			yyVAL.empty = struct{}{}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4012
		{
			yyVAL.empty = struct{}{}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4014
		{
			yyVAL.empty = struct{}{}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4016
		{
			yyVAL.empty = struct{}{}
		}
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4019
		{
			yyVAL.empty = struct{}{}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4021
		{
			yyVAL.empty = struct{}{}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4023
		{
			yyVAL.empty = struct{}{}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4027
		{
			yyVAL.empty = struct{}{}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4029
		{
			yyVAL.empty = struct{}{}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4033
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4037
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4044
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4050
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4054
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4061
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4343
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4352
		{
			decNesting(yylex)
		}
	case 1062:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4357
		{
			forceEOF(yylex)
		}
	case 1063:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4362
		{
			forceEOF(yylex)
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4366
		{
			forceEOF(yylex)
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4370
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
