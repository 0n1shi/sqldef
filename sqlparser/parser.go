// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	newQualifierColName  *NewQualifierColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	checkDefinition      *CheckDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
	blockStatement       []Statement
	localVariable        *LocalVariable
	localVariables       []*LocalVariable
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const REFERENCES = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const POLICY = 57459
const WHILE = 57460
const UNIQUE = 57461
const KEY = 57462
const SHOW = 57463
const DESCRIBE = 57464
const EXPLAIN = 57465
const DATE = 57466
const ESCAPE = 57467
const REPAIR = 57468
const OPTIMIZE = 57469
const TRUNCATE = 57470
const MAXVALUE = 57471
const PARTITION = 57472
const REORGANIZE = 57473
const LESS = 57474
const THAN = 57475
const PROCEDURE = 57476
const TRIGGER = 57477
const TYPE = 57478
const VINDEX = 57479
const VINDEXES = 57480
const STATUS = 57481
const VARIABLES = 57482
const RESTRICT = 57483
const CASCADE = 57484
const NO = 57485
const ACTION = 57486
const PERMISSIVE = 57487
const RESTRICTIVE = 57488
const PUBLIC = 57489
const CURRENT_USER = 57490
const SESSION_USER = 57491
const PAD_INDEX = 57492
const FILLFACTOR = 57493
const IGNORE_DUP_KEY = 57494
const STATISTICS_NORECOMPUTE = 57495
const STATISTICS_INCREMENTAL = 57496
const ALLOW_ROW_LOCKS = 57497
const ALLOW_PAGE_LOCKS = 57498
const BEFORE = 57499
const AFTER = 57500
const EACH = 57501
const ROW = 57502
const SCROLL = 57503
const CURSOR = 57504
const OPEN = 57505
const CLOSE = 57506
const FETCH = 57507
const PRIOR = 57508
const FIRST = 57509
const LAST = 57510
const DEALLOCATE = 57511
const DEFERRABLE = 57512
const INITIALLY = 57513
const IMMEDIATE = 57514
const DEFERRED = 57515
const BEGIN = 57516
const START = 57517
const TRANSACTION = 57518
const COMMIT = 57519
const ROLLBACK = 57520
const BIT = 57521
const TINYINT = 57522
const SMALLINT = 57523
const SMALLSERIAL = 57524
const MEDIUMINT = 57525
const INT = 57526
const INTEGER = 57527
const SERIAL = 57528
const BIGINT = 57529
const BIGSERIAL = 57530
const INTNUM = 57531
const REAL = 57532
const DOUBLE = 57533
const PRECISION = 57534
const FLOAT_TYPE = 57535
const DECIMAL = 57536
const NUMERIC = 57537
const SMALLMONEY = 57538
const MONEY = 57539
const TIME = 57540
const TIMESTAMP = 57541
const DATETIME = 57542
const YEAR = 57543
const DATETIMEOFFSET = 57544
const DATETIME2 = 57545
const SMALLDATETIME = 57546
const CHAR = 57547
const VARCHAR = 57548
const VARYING = 57549
const BOOL = 57550
const CHARACTER = 57551
const VARBINARY = 57552
const NCHAR = 57553
const NVARCHAR = 57554
const NTEXT = 57555
const UUID = 57556
const TEXT = 57557
const TINYTEXT = 57558
const MEDIUMTEXT = 57559
const LONGTEXT = 57560
const CITEXT = 57561
const BLOB = 57562
const TINYBLOB = 57563
const MEDIUMBLOB = 57564
const LONGBLOB = 57565
const JSON = 57566
const JSONB = 57567
const ENUM = 57568
const GEOMETRY = 57569
const POINT = 57570
const LINESTRING = 57571
const POLYGON = 57572
const GEOMETRYCOLLECTION = 57573
const MULTIPOINT = 57574
const MULTILINESTRING = 57575
const MULTIPOLYGON = 57576
const ARRAY = 57577
const NOW = 57578
const GETDATE = 57579
const BPCHAR = 57580
const NULLX = 57581
const AUTO_INCREMENT = 57582
const APPROXNUM = 57583
const SIGNED = 57584
const UNSIGNED = 57585
const ZEROFILL = 57586
const ZONE = 57587
const AUTOINCREMENT = 57588
const DATABASES = 57589
const TABLES = 57590
const VITESS_KEYSPACES = 57591
const VITESS_SHARDS = 57592
const VITESS_TABLETS = 57593
const VSCHEMA_TABLES = 57594
const EXTENDED = 57595
const FULL = 57596
const PROCESSLIST = 57597
const NAMES = 57598
const CHARSET = 57599
const GLOBAL = 57600
const SESSION = 57601
const ISOLATION = 57602
const LEVEL = 57603
const READ = 57604
const WRITE = 57605
const ONLY = 57606
const REPEATABLE = 57607
const COMMITTED = 57608
const UNCOMMITTED = 57609
const SERIALIZABLE = 57610
const NEW = 57611
const CURRENT_TIMESTAMP = 57612
const DATABASE = 57613
const CURRENT_DATE = 57614
const CURRENT_TIME = 57615
const LOCALTIME = 57616
const LOCALTIMESTAMP = 57617
const UTC_DATE = 57618
const UTC_TIME = 57619
const UTC_TIMESTAMP = 57620
const REPLACE = 57621
const CONVERT = 57622
const CAST = 57623
const SUBSTR = 57624
const SUBSTRING = 57625
const GROUP_CONCAT = 57626
const SEPARATOR = 57627
const INHERIT = 57628
const MATCH = 57629
const AGAINST = 57630
const BOOLEAN = 57631
const LANGUAGE = 57632
const WITH = 57633
const WITHOUT = 57634
const PARSER = 57635
const QUERY = 57636
const EXPANSION = 57637
const UNUSED = 57638
const VIRTUAL = 57639
const GENERATED = 57640
const ALWAYS = 57641
const IDENTITY = 57642
const SEQUENCE = 57643
const INCREMENT = 57644
const MINVALUE = 57645
const CACHE = 57646
const CYCLE = 57647
const OWNED = 57648
const NONE = 57649
const CLUSTERED = 57650
const NONCLUSTERED = 57651
const REPLICATION = 57652
const INCLUDE = 57653
const HOLDLOCK = 57654
const NOLOCK = 57655
const NOWAIT = 57656
const PAGLOCK = 57657
const ROWLOCK = 57658
const TABLELOCK = 57659
const TYPECAST = 57660
const CHECK = 57661

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	122, 139,
	-2, 129,
	-1, 36,
	156, 461,
	157, 461,
	-2, 451,
	-1, 272,
	110, 807,
	-2, 803,
	-1, 273,
	110, 808,
	-2, 804,
	-1, 345,
	81, 1024,
	-2, 81,
	-1, 346,
	81, 975,
	-2, 82,
	-1, 352,
	81, 954,
	-2, 774,
	-1, 354,
	81, 998,
	-2, 776,
	-1, 674,
	52, 41,
	54, 41,
	-2, 43,
	-1, 835,
	110, 810,
	-2, 806,
	-1, 1082,
	5, 28,
	-2, 606,
	-1, 1107,
	5, 27,
	-2, 747,
	-1, 1211,
	5, 27,
	-2, 87,
	-1, 1435,
	5, 28,
	-2, 748,
	-1, 1531,
	5, 27,
	-2, 750,
	-1, 1695,
	5, 28,
	-2, 751,
	-1, 1840,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 16461

var yyAct = [...]int{
	356, 1585, 1796, 1546, 1628, 1685, 1015, 1669, 1797, 1441,
	532, 765, 1462, 1543, 601, 251, 1123, 1144, 600, 3,
	21, 1651, 1445, 900, 1110, 1702, 53, 304, 1202, 1300,
	1329, 1147, 811, 918, 268, 90, 484, 1330, 90, 1301,
	668, 1297, 1213, 666, 276, 949, 1169, 245, 1024, 1175,
	943, 1010, 1023, 964, 901, 942, 860, 1128, 1074, 871,
	273, 1199, 90, 90, 277, 1273, 250, 66, 868, 959,
	888, 771, 1005, 1115, 90, 280, 255, 684, 837, 90,
	538, 90, 351, 482, 344, 897, 670, 90, 331, 870,
	655, 246, 247, 248, 249, 1744, 332, 544, 624, 275,
	260, 683, 1183, 704, 552, 330, 1056, 339, 341, 530,
	980, 1820, 52, 305, 47, 1789, 1356, 1337, 699, 264,
	566, 1731, 560, 576, 563, 519, 485, 486, 1782, 1468,
	578, 579, 580, 581, 582, 583, 584, 335, 561, 562,
	559, 565, 564, 574, 575, 567, 568, 569, 570, 571,
	572, 573, 566, 576, 1344, 576, 1720, 1850, 1343, 1763,
	1845, 47, 977, 1693, 1425, 531, 1633, 1203, 1204, 256,
	1831, 1167, 1016, 1735, 1124, 336, 574, 575, 567, 568,
	569, 570, 571, 572, 573, 566, 1762, 1632, 576, 347,
	1446, 1447, 1448, 1449, 1450, 1451, 979, 1692, 1292, 1775,
	1717, 938, 565, 564, 574, 575, 567, 568, 569, 570,
	571, 572, 573, 566, 1429, 496, 576, 1324, 1325, 1422,
	531, 932, 933, 1476, 90, 85, 81, 82, 83, 270,
	1619, 565, 564, 574, 575, 567, 568, 569, 570, 571,
	572, 573, 566, 1182, 1136, 576, 685, 1135, 686, 1323,
	1137, 931, 527, 273, 273, 1496, 1495, 565, 564, 574,
	575, 567, 568, 569, 570, 571, 572, 573, 566, 982,
	273, 576, 1185, 802, 994, 541, 1179, 1576, 1181, 1180,
	803, 540, 273, 273, 273, 273, 273, 273, 273, 569,
	570, 571, 572, 573, 566, 892, 977, 576, 1376, 1375,
	1418, 984, 1781, 1520, 1783, 1416, 273, 244, 1848, 1843,
	1842, 512, 1753, 1827, 1828, 273, 1794, 531, 966, 567,
	568, 569, 570, 571, 572, 573, 566, 1338, 1664, 576,
	90, 1652, 973, 1587, 962, 1006, 1562, 90, 90, 90,
	963, 518, 518, 518, 518, 993, 518, 485, 486, 1844,
	587, 773, 577, 518, 565, 564, 574, 575, 567, 568,
	569, 570, 571, 572, 573, 566, 1386, 1387, 576, 1829,
	47, 1674, 1686, 57, 1251, 514, 1801, 516, 523, 524,
	898, 1392, 577, 1426, 577, 586, 1687, 1528, 588, 960,
	1470, 1469, 1513, 969, 84, 965, 974, 1393, 59, 60,
	61, 62, 63, 971, 970, 961, 513, 515, 1161, 1160,
	1149, 1336, 335, 1809, 1402, 1610, 598, 577, 501, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 629, 614,
	616, 616, 616, 616, 616, 616, 616, 616, 1654, 644,
	645, 646, 647, 630, 1633, 577, 675, 1620, 1774, 490,
	667, 681, 919, 921, 79, 1691, 565, 564, 574, 575,
	567, 568, 569, 570, 571, 572, 573, 566, 347, 1346,
	576, 1166, 987, 994, 577, 565, 564, 574, 575, 567,
	568, 569, 570, 571, 572, 573, 566, 1477, 90, 576,
	1800, 1007, 78, 487, 79, 1504, 90, 781, 90, 1127,
	577, 90, 1248, 1126, 90, 1125, 774, 775, 90, 763,
	497, 591, 592, 593, 594, 595, 596, 597, 615, 1675,
	1676, 1677, 223, 1835, 967, 80, 577, 920, 773, 90,
	968, 565, 564, 574, 575, 567, 568, 569, 570, 571,
	572, 573, 566, 511, 1252, 576, 589, 590, 90, 806,
	273, 273, 1154, 1624, 1438, 1152, 814, 273, 577, 273,
	772, 1260, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 1090, 1068, 697,
	809, 1075, 975, 688, 976, 599, 556, 838, 507, 1370,
	790, 940, 939, 1465, 551, 1051, 1644, 577, 1643, 273,
	1249, 1642, 1247, 972, 273, 273, 273, 273, 273, 273,
	273, 273, 518, 1641, 788, 273, 1250, 960, 1640, 1639,
	960, 1638, 876, 518, 518, 518, 518, 518, 518, 518,
	518, 542, 1636, 961, 302, 839, 961, 518, 518, 835,
	1371, 1383, 1256, 816, 549, 273, 273, 273, 273, 1138,
	90, 815, 273, 90, 90, 90, 90, 90, 831, 1113,
	551, 687, 500, 833, 1841, 90, 1839, 1294, 90, 889,
	550, 549, 90, 881, 884, 1052, 863, 90, 90, 890,
	1146, 629, 834, 774, 775, 768, 876, 551, 273, 865,
	866, 889, 1561, 1097, 877, 878, 630, 546, 350, 577,
	885, 1812, 47, 488, 1811, 1564, 492, 493, 1489, 886,
	873, 875, 1186, 1560, 894, 1157, 902, 603, 577, 1255,
	926, 1463, 1464, 1466, 844, 872, 891, 1146, 335, 335,
	335, 335, 335, 1145, 893, 1146, 895, 896, 842, 843,
	841, 903, 1780, 335, 906, 531, 503, 504, 505, 1637,
	904, 905, 335, 907, 915, 1146, 1703, 489, 923, 1779,
	924, 550, 549, 1156, 1527, 928, 336, 336, 336, 336,
	336, 90, 1778, 90, 577, 1704, 917, 50, 551, 947,
	90, 667, 90, 922, 929, 90, 1776, 840, 836, 1705,
	336, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 347, 1493, 273, 273,
	273, 273, 1012, 1547, 937, 827, 829, 830, 1721, 1701,
	944, 828, 273, 483, 1574, 1058, 1549, 1498, 491, 1777,
	1008, 1009, 495, 812, 813, 1497, 617, 618, 619, 620,
	621, 622, 623, 273, 273, 273, 564, 574, 575, 567,
	568, 569, 570, 571, 572, 573, 566, 77, 1352, 576,
	1208, 1206, 350, 350, 350, 350, 1086, 350, 1085, 838,
	273, 861, 1029, 862, 350, 273, 1065, 1066, 1067, 550,
	549, 518, 1186, 518, 1404, 550, 549, 273, 960, 1200,
	273, 1057, 835, 955, 1548, 954, 551, 956, 957, 518,
	1163, 554, 551, 958, 961, 550, 549, 1634, 1087, 1725,
	1488, 1064, 1296, 1341, 1186, 1340, 1107, 839, 329, 1339,
	1070, 1155, 551, 1727, 1662, 1855, 90, 1139, 1550, 1551,
	1552, 1553, 1554, 1555, 1556, 834, 565, 564, 574, 575,
	567, 568, 569, 570, 571, 572, 573, 566, 1069, 1130,
	576, 1132, 1535, 1837, 531, 1722, 550, 549, 1096, 1079,
	808, 293, 292, 295, 296, 297, 298, 1423, 1018, 1131,
	294, 299, 864, 551, 1077, 90, 1094, 350, 1078, 787,
	1120, 1459, 1830, 1657, 690, 786, 1082, 1083, 1084, 769,
	1162, 1459, 1788, 1141, 767, 1093, 807, 1459, 1787, 1656,
	1099, 335, 509, 1100, 1101, 1102, 1103, 502, 1133, 1459,
	1770, 1108, 1109, 550, 549, 1662, 1769, 1766, 1765, 1758,
	531, 1581, 1177, 1459, 1755, 1580, 1150, 1151, 1153, 483,
	551, 1205, 1575, 1211, 1459, 1754, 1535, 1683, 1490, 336,
	565, 564, 574, 575, 567, 568, 569, 570, 571, 572,
	573, 566, 90, 90, 576, 1459, 1658, 1535, 1571, 1663,
	90, 1662, 1201, 995, 996, 997, 998, 1479, 944, 1545,
	273, 1363, 1071, 1072, 1073, 1111, 273, 273, 1220, 874,
	1207, 273, 1723, 1724, 1726, 1728, 1729, 1742, 577, 273,
	273, 273, 273, 273, 1535, 531, 1538, 1537, 273, 1221,
	1219, 1535, 1536, 1459, 1458, 23, 273, 1320, 531, 1547,
	1437, 531, 273, 273, 273, 1379, 1378, 273, 703, 1433,
	273, 1293, 1549, 1373, 1374, 1373, 1372, 1304, 47, 1299,
	1267, 1080, 531, 350, 1302, 652, 23, 1308, 1266, 273,
	1272, 1511, 1214, 1285, 350, 350, 350, 350, 350, 350,
	350, 350, 50, 1286, 652, 531, 1322, 1321, 350, 350,
	1105, 678, 518, 1106, 874, 531, 1309, 1307, 695, 694,
	902, 1478, 1218, 835, 23, 54, 902, 1298, 818, 577,
	1111, 1112, 1217, 50, 925, 1218, 677, 1382, 554, 1271,
	1548, 350, 1342, 1328, 1265, 1193, 1327, 1195, 1196, 1197,
	1198, 1530, 679, 1377, 677, 1263, 1500, 1499, 257, 1347,
	90, 1112, 1345, 983, 1080, 1177, 1289, 1353, 90, 1092,
	1303, 50, 47, 652, 1550, 1551, 1552, 1553, 1554, 1555,
	1556, 1089, 867, 1140, 350, 930, 1080, 680, 1319, 1316,
	1317, 1318, 810, 882, 882, 1354, 90, 766, 1080, 882,
	1171, 1172, 1173, 1111, 651, 50, 50, 273, 1176, 1174,
	300, 301, 1091, 1846, 90, 1786, 944, 1389, 944, 273,
	1760, 1395, 1390, 1351, 1088, 1660, 1348, 1806, 652, 1659,
	1397, 1648, 1647, 577, 1607, 1606, 882, 1406, 1573, 1514,
	984, 1011, 1357, 1362, 1400, 1361, 1359, 273, 1403, 1349,
	1315, 1313, 1209, 1210, 273, 1269, 1270, 1407, 1006, 1168,
	1143, 1000, 266, 1116, 1117, 350, 999, 65, 1287, 1288,
	90, 1290, 1291, 350, 1440, 1629, 1452, 1453, 1454, 350,
	1414, 1187, 1188, 1653, 1190, 1191, 1192, 1457, 1501, 335,
	1298, 1432, 1119, 784, 1171, 1172, 1173, 1467, 770, 273,
	528, 912, 1176, 1174, 300, 301, 913, 910, 1122, 1475,
	1455, 822, 911, 1121, 1473, 1631, 657, 660, 661, 662,
	658, 909, 659, 663, 908, 1761, 1408, 336, 1141, 914,
	1472, 661, 662, 1410, 337, 1259, 1265, 261, 262, 1364,
	1365, 1053, 1367, 1368, 1369, 1419, 1420, 1421, 1013, 1177,
	1424, 1480, 350, 545, 350, 1804, 1427, 1063, 1062, 533,
	1194, 703, 693, 1434, 1435, 1436, 543, 1439, 1795, 87,
	350, 534, 510, 273, 273, 1502, 273, 273, 273, 657,
	660, 661, 662, 658, 1503, 659, 663, 1431, 1515, 1116,
	1117, 812, 813, 1228, 350, 1178, 1182, 340, 1020, 783,
	1350, 1216, 1471, 944, 1014, 1531, 776, 665, 494, 258,
	259, 1302, 545, 498, 1821, 499, 1061, 1487, 1510, 1385,
	1335, 506, 273, 1529, 1060, 252, 1784, 273, 1613, 1179,
	1559, 1181, 1180, 253, 1506, 1563, 1507, 1508, 1509, 1542,
	54, 1612, 1518, 1558, 1112, 1750, 1749, 1557, 1409, 1505,
	1748, 1565, 90, 1025, 1026, 1027, 1646, 1567, 1214, 944,
	1747, 547, 1577, 1229, 1225, 1222, 1645, 1230, 1227, 1226,
	1589, 1719, 1718, 75, 1608, 1334, 1333, 1621, 1159, 805,
	1582, 56, 1598, 58, 1231, 1366, 1594, 8, 1526, 1178,
	1182, 1224, 1591, 7, 1592, 6, 1223, 1303, 1630, 1391,
	1532, 1623, 1590, 5, 676, 51, 1, 1129, 1302, 1627,
	1622, 1626, 1539, 1540, 1541, 535, 539, 1826, 1491, 1799,
	273, 278, 1444, 1179, 1743, 1181, 1180, 350, 1667, 1738,
	1588, 1673, 557, 1655, 1570, 1165, 67, 1569, 1170, 1148,
	1734, 1661, 1355, 1171, 1172, 1173, 1384, 1665, 1215, 1232,
	1158, 1176, 1174, 300, 301, 273, 273, 1017, 508, 1598,
	1212, 1034, 1684, 273, 273, 1698, 1544, 952, 602, 941,
	481, 64, 273, 1635, 953, 1666, 951, 613, 1689, 1609,
	950, 1614, 1615, 1616, 1617, 948, 1699, 1681, 1682, 1678,
	1680, 696, 978, 1184, 1303, 1694, 47, 981, 702, 1713,
	700, 350, 1521, 1522, 701, 1523, 1524, 1525, 1711, 1712,
	698, 705, 231, 342, 273, 664, 1706, 1707, 1708, 1709,
	1710, 1715, 689, 1739, 548, 1246, 1245, 1030, 1649, 1714,
	1254, 801, 1741, 350, 1050, 1598, 902, 1751, 526, 233,
	1732, 1733, 585, 1059, 1578, 1756, 1579, 1134, 349, 1598,
	1730, 1305, 537, 350, 1611, 1517, 1572, 1095, 612, 887,
	279, 826, 291, 288, 650, 290, 289, 817, 1492, 536,
	1494, 1104, 558, 674, 334, 350, 648, 656, 1690, 1767,
	1768, 1772, 1773, 1695, 654, 653, 1118, 1114, 1771, 333,
	882, 1262, 1428, 1306, 1129, 1618, 882, 821, 25, 1790,
	1792, 55, 1791, 263, 88, 1785, 1798, 243, 1519, 19,
	1716, 1598, 18, 1802, 1803, 17, 20, 16, 15, 14,
	1808, 29, 13, 1598, 1598, 350, 12, 350, 1331, 267,
	11, 88, 88, 10, 1810, 90, 9, 1597, 1178, 1182,
	273, 1805, 1596, 88, 1757, 1595, 1816, 1593, 88, 1815,
	88, 4, 1818, 254, 22, 1824, 88, 1824, 2, 0,
	90, 1764, 1817, 0, 0, 1834, 0, 1598, 0, 1598,
	1836, 0, 1179, 0, 1181, 1180, 0, 0, 0, 0,
	0, 1838, 0, 0, 1679, 1679, 0, 0, 0, 0,
	1840, 0, 0, 0, 0, 1381, 0, 0, 1851, 0,
	273, 1852, 0, 0, 0, 0, 0, 1394, 0, 1396,
	0, 1824, 824, 825, 0, 0, 0, 0, 1398, 1598,
	0, 0, 764, 1598, 0, 0, 0, 1268, 0, 0,
	777, 0, 778, 0, 0, 782, 1401, 0, 785, 0,
	0, 0, 0, 0, 0, 350, 0, 565, 564, 574,
	575, 567, 568, 569, 570, 571, 572, 573, 566, 0,
	0, 576, 0, 804, 0, 0, 602, 1832, 0, 879,
	880, 0, 985, 986, 988, 989, 990, 0, 991, 992,
	0, 0, 823, 0, 0, 47, 0, 0, 0, 0,
	0, 0, 517, 88, 0, 1001, 1002, 1003, 1442, 1004,
	0, 1442, 1442, 1442, 0, 1456, 1274, 0, 1849, 0,
	0, 1847, 350, 1857, 1858, 0, 0, 0, 257, 0,
	48, 26, 27, 0, 0, 0, 0, 0, 0, 0,
	0, 1076, 1599, 1040, 1442, 0, 0, 76, 0, 0,
	1276, 1481, 28, 0, 0, 0, 0, 1039, 0, 0,
	936, 565, 564, 574, 575, 567, 568, 569, 570, 571,
	572, 573, 566, 0, 0, 576, 0, 350, 350, 0,
	0, 0, 0, 0, 1044, 0, 1512, 0, 0, 0,
	0, 1238, 0, 1038, 899, 70, 74, 1516, 0, 0,
	0, 0, 1856, 0, 0, 0, 0, 0, 0, 88,
	71, 0, 75, 0, 0, 0, 88, 672, 88, 0,
	1278, 0, 927, 0, 1283, 0, 1277, 0, 72, 73,
	68, 1275, 1533, 1534, 0, 0, 0, 1281, 0, 1853,
	0, 0, 1035, 1032, 1033, 0, 1031, 1605, 0, 0,
	1279, 1280, 0, 0, 1331, 0, 1239, 1604, 0, 0,
	0, 1241, 1234, 1235, 1566, 1242, 1237, 1236, 1282, 1284,
	0, 1244, 1240, 0, 0, 1042, 1045, 0, 0, 0,
	1054, 1055, 1243, 539, 0, 0, 0, 0, 0, 1233,
	0, 0, 0, 0, 1331, 1583, 0, 0, 0, 1586,
	577, 0, 1600, 1601, 1603, 0, 0, 0, 1602, 1442,
	0, 0, 0, 0, 0, 1022, 0, 1028, 0, 0,
	0, 0, 0, 0, 1046, 0, 1047, 0, 0, 1048,
	1625, 520, 521, 522, 0, 525, 0, 0, 0, 0,
	0, 257, 529, 48, 26, 27, 0, 1081, 0, 0,
	0, 0, 0, 0, 1037, 1599, 0, 0, 0, 0,
	0, 1189, 1098, 0, 69, 28, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 88, 0, 0,
	88, 0, 0, 88, 0, 1036, 0, 789, 0, 257,
	0, 48, 26, 27, 1668, 1670, 1671, 1672, 0, 0,
	0, 1331, 1331, 1599, 577, 0, 0, 0, 88, 0,
	0, 0, 0, 28, 0, 1825, 882, 0, 49, 1696,
	0, 0, 0, 0, 1697, 1041, 0, 88, 1700, 0,
	0, 0, 0, 0, 0, 0, 789, 0, 0, 0,
	0, 1043, 1586, 1331, 0, 0, 0, 0, 257, 0,
	48, 26, 27, 0, 1331, 1331, 0, 1736, 0, 0,
	1605, 0, 1599, 703, 0, 0, 0, 0, 1746, 0,
	1604, 0, 28, 0, 0, 0, 0, 0, 267, 0,
	0, 1759, 0, 0, 267, 267, 0, 0, 883, 883,
	267, 0, 0, 0, 883, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1605, 0,
	0, 0, 0, 0, 0, 1600, 1601, 1603, 1604, 0,
	0, 1602, 1823, 0, 267, 267, 267, 267, 0, 88,
	0, 883, 88, 88, 88, 88, 88, 1793, 0, 0,
	0, 0, 0, 0, 916, 0, 0, 88, 0, 0,
	0, 672, 0, 1358, 1360, 1331, 88, 88, 0, 1807,
	0, 0, 0, 1600, 1601, 1603, 0, 1605, 0, 1602,
	1295, 0, 0, 0, 1752, 0, 0, 1604, 0, 0,
	0, 1442, 0, 0, 0, 1310, 1311, 0, 703, 1312,
	1822, 0, 1314, 0, 0, 0, 0, 0, 0, 0,
	0, 780, 625, 0, 1261, 0, 0, 0, 0, 0,
	0, 1326, 791, 792, 793, 794, 795, 796, 797, 798,
	0, 0, 1600, 1601, 1603, 0, 799, 800, 1602, 0,
	350, 49, 0, 0, 0, 0, 627, 0, 0, 0,
	0, 1586, 0, 0, 0, 0, 0, 0, 1411, 1412,
	88, 1413, 88, 0, 0, 1415, 0, 1417, 0, 88,
	0, 88, 0, 257, 88, 48, 26, 27, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1599, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 28, 0, 789,
	0, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 267, 0, 0, 0, 1460, 1461, 0, 0, 0,
	0, 257, 628, 48, 26, 27, 0, 0, 0, 0,
	642, 626, 0, 0, 0, 1599, 0, 631, 0, 1405,
	0, 0, 0, 0, 0, 28, 0, 0, 49, 229,
	0, 23, 24, 48, 26, 27, 0, 0, 0, 267,
	0, 0, 0, 0, 1380, 0, 0, 0, 0, 0,
	0, 42, 1388, 239, 0, 28, 267, 0, 0, 1430,
	0, 0, 0, 0, 0, 0, 602, 0, 0, 0,
	0, 0, 1605, 0, 37, 0, 0, 0, 50, 0,
	1399, 0, 1604, 0, 0, 0, 0, 0, 0, 0,
	0, 643, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 0, 0, 0, 0, 0,
	226, 1474, 0, 0, 0, 0, 0, 232, 228, 0,
	1605, 0, 0, 0, 0, 0, 0, 1600, 1601, 1603,
	1604, 0, 0, 1602, 0, 0, 0, 0, 30, 31,
	33, 32, 35, 0, 1164, 0, 0, 0, 230, 0,
	0, 0, 234, 0, 0, 0, 0, 0, 0, 0,
	1019, 0, 1021, 36, 43, 44, 0, 0, 45, 46,
	34, 0, 0, 0, 0, 1600, 1601, 1603, 1049, 0,
	0, 1602, 0, 0, 0, 0, 1740, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 39, 0, 40,
	41, 1257, 1258, 225, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 1568, 0, 0, 0, 0, 267,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	789, 227, 0, 235, 236, 237, 238, 242, 0, 0,
	0, 0, 241, 240, 0, 883, 0, 0, 0, 0,
	0, 883, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1650, 0, 0, 0, 1584, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1688, 602, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 0, 131, 0, 134, 0, 0, 177,
	143, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1737, 0, 355, 0,
	0, 0, 0, 88, 0, 0, 0, 106, 0, 0,
	0, 1253, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 564, 574, 575, 567, 568,
	569, 570, 571, 572, 573, 566, 0, 0, 576, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 672,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 1819, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 1833, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 577, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 0, 467, 457, 0, 418, 469,
	388, 406, 477, 408, 409, 444, 368, 427, 155, 403,
	386, 93, 391, 361, 398, 362, 389, 420, 117, 387,
	459, 430, 131, 475, 134, 435, 0, 177, 143, 0,
	0, 422, 461, 425, 452, 417, 445, 376, 434, 470,
	404, 440, 471, 0, 0, 0, 355, 0, 945, 946,
	0, 0, 0, 0, 0, 106, 0, 439, 466, 400,
	480, 443, 360, 437, 0, 366, 369, 476, 464, 395,
	396, 1142, 0, 0, 0, 0, 0, 0, 421, 426,
	449, 414, 0, 0, 0, 0, 0, 0, 0, 0,
	392, 0, 433, 0, 0, 0, 373, 367, 0, 419,
	0, 0, 0, 375, 0, 393, 450, 0, 357, 455,
	462, 416, 204, 465, 413, 412, 162, 0, 109, 0,
	183, 121, 405, 132, 447, 478, 468, 423, 460, 390,
	399, 111, 397, 169, 156, 195, 432, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 1814, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 365, 358, 394, 453, 456, 380,
	442, 370, 401, 448, 402, 424, 385, 0, 0, 88,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 363, 0, 178,
	197, 214, 215, 364, 384, 463, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 441, 170, 108, 196, 176, 0, 379, 383, 377,
	378, 428, 429, 472, 473, 474, 451, 374, 0, 381,
	382, 0, 458, 126, 431, 92, 100, 133, 479, 211,
	0, 164, 119, 198, 0, 407, 359, 411, 0, 0,
	0, 0, 0, 0, 0, 371, 372, 171, 415, 410,
	436, 438, 446, 454, 467, 457, 105, 418, 469, 388,
	406, 477, 408, 409, 444, 368, 427, 155, 403, 386,
	93, 391, 361, 398, 362, 389, 420, 117, 387, 459,
	430, 131, 475, 134, 435, 0, 177, 143, 0, 0,
	422, 461, 425, 452, 417, 445, 376, 434, 470, 404,
	440, 471, 0, 0, 0, 355, 0, 945, 946, 0,
	0, 0, 0, 0, 106, 0, 439, 466, 400, 480,
	443, 360, 437, 0, 366, 369, 476, 464, 395, 396,
	0, 0, 0, 0, 0, 0, 0, 421, 426, 449,
	414, 0, 0, 0, 0, 0, 0, 0, 0, 392,
	0, 433, 0, 0, 0, 373, 367, 0, 419, 0,
	0, 0, 375, 0, 393, 450, 0, 357, 455, 462,
	416, 204, 465, 413, 412, 162, 0, 109, 0, 183,
	121, 405, 132, 447, 478, 468, 423, 460, 390, 399,
	111, 397, 169, 156, 195, 432, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 365, 358, 394, 453, 456, 380, 442,
	370, 401, 448, 402, 424, 385, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 363, 0, 178, 197,
	214, 215, 364, 384, 463, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	441, 170, 108, 196, 176, 0, 379, 383, 377, 378,
	428, 429, 472, 473, 474, 451, 374, 0, 381, 382,
	0, 458, 126, 431, 92, 100, 133, 479, 211, 0,
	164, 119, 198, 0, 407, 359, 411, 0, 0, 0,
	0, 0, 0, 0, 371, 372, 171, 415, 410, 436,
	438, 446, 454, 467, 457, 105, 418, 469, 388, 406,
	477, 408, 409, 444, 368, 427, 155, 403, 386, 93,
	391, 361, 398, 362, 389, 420, 117, 387, 459, 430,
	131, 475, 134, 435, 0, 177, 143, 0, 0, 422,
	461, 425, 452, 417, 445, 376, 434, 470, 404, 440,
	471, 0, 0, 0, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 439, 466, 400, 480, 443,
	360, 437, 0, 366, 369, 476, 464, 395, 396, 0,
	0, 0, 0, 0, 0, 0, 421, 426, 449, 414,
	0, 0, 0, 0, 0, 0, 1264, 0, 392, 0,
	433, 0, 0, 0, 373, 367, 0, 419, 0, 0,
	0, 375, 0, 393, 450, 0, 357, 455, 462, 416,
	204, 465, 413, 412, 162, 0, 109, 0, 183, 121,
	405, 132, 447, 478, 468, 423, 460, 390, 399, 111,
	397, 169, 156, 195, 432, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 365, 358, 394, 453, 456, 380, 442, 370,
	401, 448, 402, 424, 385, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 151, 124, 0, 0, 363, 0, 178, 197, 214,
	215, 364, 384, 463, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 441,
	170, 108, 196, 176, 0, 379, 383, 377, 378, 428,
	429, 472, 473, 474, 451, 374, 0, 381, 382, 0,
	458, 126, 431, 92, 100, 133, 479, 211, 0, 164,
	119, 198, 0, 407, 359, 411, 0, 0, 0, 0,
	0, 0, 0, 371, 372, 171, 415, 410, 436, 438,
	446, 454, 467, 457, 105, 418, 469, 388, 406, 477,
	408, 409, 444, 368, 427, 155, 403, 386, 93, 391,
	361, 398, 362, 389, 420, 117, 387, 459, 430, 131,
	475, 134, 435, 0, 177, 143, 0, 0, 422, 461,
	425, 452, 417, 445, 376, 434, 470, 404, 440, 471,
	50, 0, 0, 355, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 439, 466, 400, 480, 443, 360,
	437, 0, 366, 369, 476, 464, 395, 396, 0, 0,
	0, 0, 0, 0, 0, 421, 426, 449, 414, 0,
	0, 0, 0, 0, 0, 0, 0, 392, 0, 433,
	0, 0, 0, 373, 367, 0, 419, 0, 0, 0,
	375, 0, 393, 450, 0, 357, 455, 462, 416, 204,
	465, 413, 412, 162, 0, 109, 0, 183, 121, 405,
	132, 447, 478, 468, 423, 460, 390, 399, 111, 397,
	169, 156, 195, 432, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 365, 358, 394, 453, 456, 380, 442, 370, 401,
	448, 402, 424, 385, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 363, 0, 178, 197, 214, 215,
	364, 384, 463, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 441, 170,
	108, 196, 176, 0, 379, 383, 377, 378, 428, 429,
	472, 473, 474, 451, 374, 0, 381, 382, 0, 458,
	126, 431, 92, 100, 133, 479, 211, 0, 164, 119,
	198, 0, 407, 359, 411, 0, 0, 0, 0, 0,
	0, 0, 371, 372, 171, 415, 410, 436, 438, 446,
	454, 467, 457, 105, 418, 469, 388, 406, 477, 408,
	409, 444, 368, 427, 155, 403, 386, 93, 391, 361,
	398, 362, 389, 420, 117, 387, 459, 430, 131, 475,
	134, 435, 0, 177, 143, 0, 0, 422, 461, 425,
	452, 417, 445, 376, 434, 470, 404, 440, 471, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 439, 466, 400, 480, 443, 360, 437,
	0, 366, 369, 476, 464, 395, 396, 0, 0, 0,
	0, 0, 0, 0, 421, 426, 449, 414, 0, 0,
	0, 0, 0, 0, 0, 0, 392, 0, 433, 0,
	0, 0, 373, 367, 0, 419, 0, 0, 0, 375,
	0, 393, 450, 0, 357, 455, 462, 416, 204, 465,
	413, 412, 162, 0, 109, 0, 183, 121, 405, 132,
	447, 478, 468, 423, 460, 390, 399, 111, 397, 169,
	156, 195, 432, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	365, 358, 394, 453, 456, 380, 442, 370, 401, 448,
	402, 424, 385, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 353, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 363, 0, 178, 197, 214, 215, 364,
	384, 463, 207, 208, 209, 210, 0, 0, 0, 354,
	352, 125, 174, 129, 136, 165, 212, 441, 170, 108,
	196, 176, 348, 379, 383, 377, 378, 428, 429, 472,
	473, 474, 451, 374, 0, 381, 382, 0, 458, 126,
	431, 92, 100, 133, 479, 211, 0, 164, 119, 198,
	0, 407, 359, 411, 0, 0, 0, 0, 0, 0,
	0, 371, 372, 171, 415, 410, 436, 438, 446, 454,
	467, 457, 105, 418, 469, 388, 406, 477, 408, 409,
	444, 368, 427, 155, 403, 386, 93, 391, 361, 398,
	362, 389, 420, 117, 387, 459, 430, 131, 475, 134,
	435, 0, 177, 143, 0, 0, 422, 461, 425, 452,
	417, 445, 376, 434, 470, 404, 440, 471, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 439, 466, 400, 480, 443, 360, 437, 0,
	366, 369, 476, 464, 395, 396, 0, 0, 0, 0,
	0, 0, 0, 421, 426, 449, 414, 0, 0, 0,
	0, 0, 0, 832, 0, 392, 0, 433, 0, 0,
	0, 373, 367, 0, 419, 0, 0, 0, 375, 0,
	393, 450, 0, 357, 455, 462, 416, 204, 465, 413,
	412, 162, 0, 109, 0, 183, 121, 405, 132, 447,
	478, 468, 423, 460, 390, 399, 111, 397, 169, 156,
	195, 432, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 365,
	358, 394, 453, 456, 380, 442, 370, 401, 448, 402,
	424, 385, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 151, 124,
	0, 0, 363, 0, 178, 197, 214, 215, 364, 384,
	463, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 441, 170, 108, 196,
	176, 0, 379, 383, 377, 378, 428, 429, 472, 473,
	474, 451, 374, 0, 381, 382, 0, 458, 126, 431,
	92, 100, 133, 479, 211, 0, 164, 119, 198, 0,
	407, 359, 411, 0, 0, 0, 0, 0, 0, 0,
	371, 372, 171, 415, 410, 436, 438, 446, 454, 467,
	457, 105, 418, 469, 388, 406, 477, 408, 409, 444,
	368, 427, 155, 403, 386, 93, 391, 361, 398, 362,
	389, 420, 117, 387, 459, 430, 131, 475, 134, 435,
	0, 177, 143, 0, 0, 422, 461, 425, 452, 417,
	445, 376, 434, 470, 404, 440, 471, 0, 0, 0,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 439, 466, 400, 480, 443, 360, 437, 0, 366,
	369, 476, 464, 395, 396, 0, 0, 0, 0, 0,
	0, 0, 421, 426, 449, 414, 0, 0, 0, 0,
	0, 0, 0, 0, 392, 0, 433, 0, 0, 0,
	373, 367, 0, 419, 0, 0, 0, 375, 0, 393,
	450, 0, 357, 455, 462, 416, 204, 465, 413, 412,
	162, 0, 109, 0, 183, 121, 405, 132, 447, 478,
	468, 423, 460, 390, 399, 111, 397, 169, 156, 195,
	432, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 365, 358,
	394, 453, 456, 380, 442, 370, 401, 448, 402, 424,
	385, 0, 0, 0, 0, 94, 184, 682, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	353, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 363, 0, 178, 197, 214, 215, 364, 384, 463,
	207, 208, 209, 210, 0, 0, 0, 354, 352, 125,
	174, 129, 136, 165, 212, 441, 170, 108, 196, 176,
	348, 379, 383, 377, 378, 428, 429, 472, 473, 474,
	451, 374, 0, 381, 382, 0, 458, 126, 431, 92,
	100, 133, 479, 211, 0, 164, 119, 198, 0, 407,
	359, 411, 0, 0, 0, 0, 0, 0, 0, 371,
	372, 171, 415, 410, 436, 438, 446, 454, 467, 457,
	105, 418, 469, 388, 406, 477, 408, 409, 444, 368,
	427, 155, 403, 386, 93, 391, 361, 398, 362, 389,
	420, 117, 387, 459, 430, 131, 475, 134, 435, 0,
	177, 143, 0, 0, 422, 461, 425, 452, 417, 445,
	376, 434, 470, 404, 440, 471, 0, 0, 0, 355,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	439, 466, 400, 480, 443, 360, 437, 0, 366, 369,
	476, 464, 395, 396, 0, 0, 0, 0, 0, 0,
	0, 421, 426, 449, 414, 0, 0, 0, 0, 0,
	0, 0, 0, 392, 0, 433, 0, 0, 0, 373,
	367, 0, 419, 0, 0, 0, 375, 0, 393, 450,
	0, 357, 455, 462, 416, 204, 465, 413, 412, 162,
	0, 109, 0, 183, 121, 405, 132, 447, 478, 468,
	423, 460, 390, 399, 111, 397, 169, 156, 195, 432,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 365, 358, 394,
	453, 456, 380, 442, 370, 401, 448, 402, 424, 385,
	0, 0, 0, 0, 94, 184, 343, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 353,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 151, 124, 0, 0,
	363, 0, 178, 197, 214, 215, 364, 384, 463, 207,
	208, 209, 210, 0, 0, 0, 354, 352, 346, 345,
	129, 136, 165, 212, 441, 170, 108, 196, 176, 348,
	379, 383, 377, 378, 428, 429, 472, 473, 474, 451,
	374, 0, 381, 382, 0, 458, 126, 431, 92, 100,
	133, 479, 211, 0, 164, 119, 198, 0, 407, 359,
	411, 0, 0, 0, 0, 0, 0, 0, 371, 372,
	171, 415, 410, 436, 438, 446, 454, 467, 457, 105,
	418, 469, 388, 406, 477, 408, 409, 444, 368, 427,
	155, 403, 386, 93, 391, 361, 398, 362, 389, 420,
	117, 387, 459, 430, 131, 475, 134, 435, 0, 177,
	143, 0, 0, 422, 461, 425, 452, 417, 445, 376,
	434, 470, 404, 440, 471, 0, 0, 0, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 439,
	466, 400, 480, 443, 360, 437, 0, 366, 369, 476,
	464, 395, 396, 0, 0, 0, 0, 0, 0, 0,
	421, 426, 449, 414, 0, 0, 0, 0, 0, 0,
	0, 0, 392, 0, 433, 0, 0, 0, 373, 367,
	0, 419, 0, 0, 0, 375, 0, 393, 450, 0,
	357, 455, 462, 416, 204, 465, 413, 412, 162, 0,
	109, 0, 183, 121, 405, 132, 447, 478, 468, 423,
	460, 390, 399, 111, 397, 169, 156, 195, 432, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 365, 358, 394, 453,
	456, 380, 442, 370, 401, 448, 402, 424, 385, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 0, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 467, 457, 105, 418,
	469, 388, 406, 477, 408, 409, 444, 368, 427, 155,
	403, 386, 93, 391, 361, 398, 362, 389, 420, 117,
	387, 459, 430, 131, 475, 134, 435, 0, 177, 143,
	0, 0, 422, 461, 425, 452, 417, 445, 376, 434,
	470, 404, 440, 471, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 439, 466,
	400, 480, 443, 360, 437, 0, 366, 369, 476, 464,
	395, 396, 0, 0, 0, 0, 0, 0, 0, 421,
	426, 449, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 392, 0, 433, 0, 0, 0, 373, 367, 0,
	419, 0, 0, 0, 375, 0, 393, 450, 0, 357,
	455, 462, 416, 204, 465, 413, 412, 162, 0, 109,
	0, 183, 121, 405, 132, 447, 478, 468, 423, 460,
	390, 399, 111, 397, 169, 156, 195, 432, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 365, 358, 394, 453, 456,
	380, 442, 370, 401, 448, 402, 424, 385, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 363, 0,
	178, 197, 214, 215, 364, 384, 463, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 441, 170, 108, 196, 176, 0, 379, 383,
	377, 378, 428, 429, 472, 473, 474, 451, 374, 0,
	381, 382, 0, 458, 126, 431, 92, 100, 133, 479,
	211, 0, 164, 119, 198, 0, 407, 359, 411, 0,
	0, 0, 0, 0, 0, 0, 371, 372, 171, 415,
	410, 436, 438, 446, 454, 467, 457, 105, 418, 469,
	388, 406, 477, 408, 409, 444, 368, 427, 155, 403,
	386, 93, 391, 361, 398, 362, 389, 420, 117, 387,
	459, 430, 131, 475, 134, 435, 0, 177, 143, 0,
	0, 422, 461, 425, 452, 417, 445, 376, 434, 470,
	404, 440, 471, 0, 0, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 439, 466, 400,
	480, 443, 360, 437, 0, 366, 369, 476, 464, 395,
	396, 0, 0, 0, 0, 0, 0, 0, 421, 426,
	449, 414, 0, 0, 0, 0, 0, 0, 0, 0,
	392, 0, 433, 0, 0, 0, 373, 367, 0, 419,
	0, 0, 0, 375, 0, 393, 450, 0, 357, 455,
	462, 416, 204, 465, 413, 412, 162, 0, 109, 0,
	183, 121, 405, 132, 447, 478, 468, 423, 460, 390,
	399, 111, 397, 169, 156, 195, 432, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 365, 358, 394, 453, 456, 380,
	442, 370, 401, 448, 402, 424, 385, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 363, 0, 178,
	197, 214, 215, 364, 384, 463, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 441, 170, 108, 196, 176, 0, 379, 383, 377,
	378, 428, 429, 472, 473, 474, 451, 374, 0, 381,
	382, 0, 458, 126, 431, 92, 100, 133, 479, 211,
	0, 164, 119, 198, 0, 407, 359, 411, 0, 0,
	0, 0, 0, 0, 0, 371, 372, 171, 415, 410,
	436, 438, 446, 454, 155, 0, 105, 93, 0, 0,
	274, 0, 0, 0, 117, 271, 0, 0, 131, 315,
	134, 0, 0, 177, 143, 0, 0, 0, 0, 306,
	307, 0, 0, 0, 0, 0, 0, 934, 0, 50,
	0, 0, 272, 293, 292, 295, 296, 297, 298, 0,
	0, 106, 294, 299, 300, 301, 935, 0, 0, 269,
	286, 0, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 0, 0, 0, 0, 327, 0,
	285, 0, 0, 281, 282, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 325, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 303, 316, 326, 322, 323, 320, 321, 319,
	318, 317, 328, 308, 309, 310, 311, 313, 0, 126,
	312, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 869, 0, 274, 0, 0, 0,
	117, 271, 0, 171, 131, 315, 134, 0, 0, 177,
	143, 324, 105, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 293,
	292, 295, 296, 297, 298, 0, 0, 106, 294, 299,
	300, 301, 0, 0, 0, 269, 286, 0, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	265, 0, 0, 0, 327, 0, 285, 0, 0, 281,
	282, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 325, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 303, 316,
	326, 322, 323, 320, 321, 319, 318, 317, 328, 308,
	309, 310, 311, 313, 0, 126, 312, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 155, 0, 0, 93,
	0, 0, 274, 0, 0, 0, 117, 271, 0, 171,
	131, 315, 134, 0, 0, 177, 143, 324, 105, 0,
	0, 306, 307, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 531, 272, 293, 292, 295, 296, 297,
	298, 0, 0, 106, 294, 299, 300, 301, 0, 0,
	0, 269, 286, 0, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 0, 0, 0, 0,
	327, 0, 285, 0, 0, 281, 282, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 325, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 151, 124, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 303, 316, 326, 322, 323, 320,
	321, 319, 318, 317, 328, 308, 309, 310, 311, 313,
	0, 126, 312, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 155, 0, 0, 93, 0, 0, 274, 0,
	0, 0, 117, 271, 0, 171, 131, 315, 134, 0,
	0, 177, 143, 324, 105, 0, 0, 306, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 293, 292, 295, 296, 297, 298, 0, 0, 106,
	294, 299, 300, 301, 0, 0, 0, 269, 286, 0,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 265, 0, 0, 0, 327, 0, 285, 0,
	0, 281, 282, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 325,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	303, 316, 326, 322, 323, 320, 321, 319, 318, 317,
	328, 308, 309, 310, 311, 313, 23, 126, 312, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 155, 0,
	0, 93, 0, 0, 274, 0, 0, 0, 117, 271,
	0, 171, 131, 315, 134, 0, 0, 177, 143, 324,
	105, 0, 0, 306, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 272, 293, 292, 295,
	296, 297, 298, 0, 0, 106, 294, 299, 300, 301,
	0, 0, 0, 269, 286, 0, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 0, 0,
	0, 0, 327, 0, 285, 0, 0, 281, 282, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 325, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 303, 316, 326, 322,
	323, 320, 321, 319, 318, 317, 328, 308, 309, 310,
	311, 313, 0, 126, 312, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 155, 0, 0, 93, 0, 0,
	274, 0, 0, 0, 117, 271, 0, 171, 131, 315,
	134, 0, 0, 177, 143, 324, 105, 0, 0, 306,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 272, 293, 292, 295, 296, 297, 298, 0,
	0, 106, 294, 299, 300, 301, 0, 0, 0, 269,
	286, 0, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 0, 0, 0, 0, 327, 0,
	285, 0, 0, 281, 282, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 325, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 303, 316, 326, 322, 323, 320, 321, 319,
	318, 317, 328, 308, 309, 310, 311, 313, 0, 126,
	312, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 171, 131, 315, 134, 0, 0, 177,
	143, 324, 105, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 293,
	292, 295, 296, 297, 298, 0, 0, 106, 294, 299,
	300, 301, 0, 0, 0, 0, 286, 0, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	0, 0, 0, 0, 327, 0, 285, 0, 0, 281,
	282, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 325, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 1854, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 303, 316,
	326, 322, 323, 320, 321, 319, 318, 317, 328, 308,
	309, 310, 311, 313, 0, 126, 312, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 155, 0, 0, 93,
	0, 0, 274, 0, 0, 0, 117, 0, 0, 171,
	131, 315, 134, 0, 0, 177, 143, 324, 105, 0,
	0, 306, 307, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 272, 293, 292, 295, 296, 297,
	298, 0, 0, 106, 294, 299, 300, 301, 0, 0,
	0, 0, 286, 0, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 0, 0, 0, 0,
	327, 0, 285, 0, 0, 281, 282, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 325, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 151, 124, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 303, 316, 326, 322, 323, 320,
	321, 319, 318, 317, 328, 308, 309, 310, 311, 313,
	0, 126, 312, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 315, 134, 0,
	0, 177, 143, 324, 105, 0, 0, 306, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 293, 292, 295, 296, 297, 298, 0, 0, 106,
	294, 299, 300, 301, 0, 0, 0, 0, 286, 0,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 0, 0, 0, 0, 327, 0, 285, 0,
	0, 281, 282, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 325,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	303, 316, 326, 322, 323, 320, 321, 319, 318, 317,
	328, 308, 309, 310, 311, 313, 0, 126, 312, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	729, 171, 131, 0, 134, 0, 0, 177, 143, 324,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 714, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 730, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 1745, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 0, 756, 757, 160,
	758, 759, 760, 762, 761, 731, 732, 733, 737, 735,
	734, 736, 708, 710, 202, 706, 709, 715, 711, 712,
	713, 727, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 728, 738, 739, 740, 741, 742, 743,
	744, 745, 0, 151, 124, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 707, 133, 0, 211,
	0, 164, 119, 198, 155, 0, 0, 93, 0, 553,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 555, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 550, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 0, 729, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 730, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 0, 756,
	757, 160, 758, 759, 760, 762, 761, 731, 732, 733,
	737, 735, 734, 736, 708, 710, 202, 706, 709, 715,
	711, 712, 713, 727, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 728, 738, 739, 740, 741,
	742, 743, 744, 745, 0, 151, 124, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 707, 133,
	0, 211, 0, 164, 119, 198, 155, 0, 0, 93,
	0, 671, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 673, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 151, 124, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	23, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 23, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 819, 0, 0, 820, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 692, 0, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	691, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 155, 0, 0, 93,
	0, 671, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 673, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 669, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 151, 124, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 1443, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 1813, 117, 0, 171, 0, 131,
	0, 134, 0, 0, 177, 143, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 1332, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 1483,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 1482,
	200, 149, 154, 152, 199, 1485, 192, 142, 139, 0,
	98, 190, 140, 138, 1486, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 151, 124, 1484, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 0, 134, 0, 0, 177, 143, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 171, 131, 0, 134,
	0, 0, 177, 143, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 673, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 151, 124,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 171, 131, 0, 134, 0, 0, 177, 143,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 555,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 779, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	649, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 151, 124, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 92, 100,
	133, 338, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	171, 0, 131, 0, 134, 0, 0, 177, 143, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 151, 124, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	272, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	105,
}

var yyPact = [...]int{
	2575, -1000, -225, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1475, 1526, -1000, -1000, -1000, -1000, -1000, -1000, 1264,
	1916, 370, 405, 106, 15236, 402, 2547, 15828, -1000, 114,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1099, -1000, -1000,
	-1000, -1000, -1000, 1458, 1467, 1202, 1438, 1348, -1000, 7834,
	330, 13459, 14940, 5643, -1000, 973, -199, 371, 15532, 324,
	324, 15532, 15532, 15828, 324, -1000, -81, 390, 15828, -1000,
	15828, 293, 951, 293, 293, 293, 15828, -1000, 478, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 15828, 946, 1392, 255, 4327, 4327, 4327,
	4327, 222, 4327, -19, 1299, -1000, -1000, -1000, -1000, 4327,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	899, 1390, 8426, 8426, 1475, -1000, 1099, -1000, -1000, -1000,
	1381, -1000, -1000, 633, 1500, -1000, 9906, 476, -1000, 8426,
	49, 1203, -1000, -1000, 1203, -1000, -1000, 435, -1000, -1000,
	-1000, 9314, 9314, 9314, 9314, 9314, 9314, 9314, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1203, 475, -1000, 8130, 1203, 1203, 1203, 1203,
	1203, 1203, 1203, 1203, 8426, 1203, 1203, 1203, 1203, 1203,
	1203, 1203, 1203, 1203, 2335, 1203, 1203, 1203, 1203, 14643,
	1224, 1325, -1000, -1000, -1000, 1434, 11090, 11978, 15828, 1150,
	-1000, 1183, 5314, -31, -1000, -1000, -1000, 580, 473, 11682,
	-1000, -1000, -1000, 1382, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1114, -1000, 10202, 388, -1000, -1000, 15828, 1195, 938,
	612, 933, 1297, 509, 1433, 15828, -1000, 14347, 4327, 374,
	15828, 1425, 1292, 15828, 929, 923, -1000, 6630, -1000, 4327,
	4327, 4327, 4327, 4327, 4327, 4327, 4327, -1000, -1000, -1000,
	-1000, -1000, -1000, 4327, 4327, -1000, 8, -1000, 15828, -1000,
	-1000, -1000, -1000, 1520, 458, 942, 470, 1188, -1000, 808,
	1458, 899, 1348, 11386, 1319, -1000, -1000, 15828, -1000, 8426,
	8426, 748, -1000, 14051, -1000, -1000, 4985, 506, 9314, 724,
	649, 9314, 9314, 9314, 9314, 9314, 9314, 9314, 9314, 9314,
	9314, 9314, 9314, 9314, 9314, 9314, 815, 2335, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 916, -1000, 1099, 904,
	904, 47, 47, 47, 47, 47, 47, 2922, 7242, 5972,
	899, 1110, 599, 8130, 7834, 7834, 8426, 8426, 16124, 16124,
	7834, 1440, 592, 599, 16124, -1000, 899, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 71, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 7834, 7834, 7834, 7834, 233, 15828,
	-1000, 16124, 13459, 13459, 13459, 13459, 13459, -1000, 1333, 1330,
	-1000, 1316, 1310, 1338, 15828, -1000, 1100, 11090, 403, 1203,
	-1000, 13755, -1000, -1000, 233, 1132, 13459, 15828, -1000, -1000,
	4656, 1183, -31, 1181, -1000, -27, -59, 6946, 5972, 485,
	-1000, -1000, -1000, -1000, 3669, 767, 267, -142, 9, -1000,
	-1000, -1000, -1000, -1000, 1237, -1000, -1000, -1000, 1237, 248,
	1237, 1237, 1237, -1000, 1237, 1237, 48, 48, 48, 48,
	48, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1263, 1258,
	-1000, 1237, 1237, 1237, -1000, 1237, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1255, 282, 1255, 1238,
	1238, -1000, -1000, 15532, 1431, -136, 912, 4327, 1424, 4327,
	15828, 1495, 15828, -1000, -1000, -1000, 10202, -1000, 1968, 15828,
	-1000, 15828, -1000, -1000, 15828, 4327, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 584, -1000, -1000, -1000, -1000, 1354, 8426, 8426, 6301,
	8426, -1000, -1000, -1000, 1390, -1000, 1440, 1455, -1000, 1375,
	1374, 7834, -1000, -1000, 506, 572, -1000, -1000, 809, -1000,
	-1000, -1000, -1000, 468, 1203, -1000, 844, -1000, -1000, -1000,
	-1000, 724, 9314, 9314, 9314, 439, 844, 1909, 82, 753,
	47, 191, 191, 17, 17, 17, 17, 17, 223, 223,
	-1000, -1000, -1000, -1000, 899, -1000, -1000, -1000, 899, 7834,
	1182, -1000, -1000, -1000, 8426, -1000, 899, 1077, 1077, 814,
	885, 1220, -1000, 467, 1208, 1077, 7834, 614, -1000, 8426,
	899, -1000, -1000, 1077, 899, 1077, 1077, 1130, 1203, -1000,
	1199, -1000, 578, 1325, 1262, 1291, 1388, -1000, -1000, -1000,
	-1000, 1322, -1000, 1317, -1000, -1000, -1000, -1000, -134, 384,
	382, 378, 15532, -1000, 1482, 13459, 1169, -1000, -1000, 1181,
	-31, -35, -1000, -1000, -1000, -1000, 599, 568, -1000, -1000,
	871, 1179, 3340, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1257, 682, 15532, 273, 268, 499, 496, 865,
	-1000, -1000, -1000, 696, -1000, 15532, 1519, -1000, -1000, 272,
	-1000, 271, 607, 842, 15828, 155, 1256, 1535, -1000, -237,
	-1000, 11, -1000, -1000, 823, 48, 48, 1237, 48, 48,
	48, -1000, -1000, 485, 1380, 485, 485, 485, 485, 831,
	831, -141, -141, -1000, -1000, -1000, 802, 1255, -1000, -1000,
	-1000, 801, -1000, 1251, 1099, -1000, 5972, -1000, -1000, -1000,
	-1000, -1000, 1428, 1131, -1000, -1000, -1000, -1000, 332, -1000,
	-1000, 1387, 1975, 479, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 227, 426, -1000, 4327, -1000,
	630, 15828, 15828, 1347, 599, 599, 451, -1000, -1000, 15828,
	-1000, -1000, -1000, -1000, 1194, -1000, -1000, -1000, 3998, 7834,
	-1000, 439, 844, 1805, -1000, 9314, 9314, -1000, -1000, 1077,
	7834, 599, -1000, -1000, -1000, 1849, 815, 1849, 9314, 9314,
	6301, 9314, 9314, -107, 1160, 587, -1000, 8426, 834, -1000,
	-1000, -1000, -1000, -1000, 1289, 16124, 1203, -1000, 10794, 15532,
	1475, 16124, 8426, 8426, -1000, -1000, 8426, 1248, -1000, 8426,
	-1000, -1000, -1000, -1000, 1247, 1203, 1203, 1203, 1053, -1000,
	1475, 1169, -1000, -1000, -1000, -30, -66, -1000, 8426, -1000,
	3669, -1000, 3669, 12867, -1000, 1516, 1451, 279, -9, -1000,
	863, 859, -1000, 857, -1000, 22, -1000, -173, 133, -11,
	-1000, -1000, 1203, -1000, 1246, 1427, -1000, 1244, 799, -1000,
	1192, -219, -1000, -1000, -1000, -1000, -1000, -1000, 1203, 1243,
	1242, -1000, 1240, -1000, -1000, -1000, 1016, 485, 485, 48,
	485, 485, 485, -1000, 533, -1000, -1000, -1000, -1000, 1071,
	-1000, 1069, -1000, 84, 83, -1000, 1149, -1000, 1061, 15828,
	15532, -1000, 1133, -1000, 560, 1450, 204, 15828, 1495, 1495,
	-1000, 260, 15532, -1000, 15532, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 15532, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15828, -1000, -1000, -1000, -1000,
	-1000, 15532, 286, -1000, -1000, 826, 8426, -1000, -1000, -1000,
	5972, -1000, 1482, 13459, -1000, -1000, 899, -1000, 9314, 844,
	844, -1000, -1000, 899, 1237, 1237, -1000, 1237, 1238, -1000,
	-1000, 1237, 103, 1237, 98, 899, 899, 165, 948, -1000,
	110, 364, 1203, -88, -1000, 599, 8426, -1000, 1409, 1126,
	1065, -1000, -1000, 7538, 899, 1056, 444, 1053, 1458, -1000,
	599, 599, 599, 12274, 599, -139, 12274, 12274, 12274, 10498,
	15532, 1458, -1000, -1000, -1000, -1000, 599, 3340, -1000, 1049,
	-1000, 1237, 1237, 563, 563, -198, 254, 253, 1203, -1000,
	-1000, -1000, -1000, -199, -1000, -1000, 607, -1000, 8426, 12274,
	170, -1000, 1117, 1012, 1286, -1000, 13163, 899, -1000, 855,
	-1000, 653, 983, -1000, -1000, -1000, 485, -1000, -1000, -1000,
	-1000, -1000, 48, 749, 48, -6, -7, 776, -1000, 768,
	1154, 1287, 5972, 3669, 372, 1478, -1000, -1000, 1449, -1000,
	1118, 15532, -1000, -1000, 256, -1000, 1236, -1000, -1000, -1000,
	-1000, 1411, 15532, -1000, -1000, 599, 1479, 1081, -1000, 844,
	-1000, -1000, 247, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 9314, 9314, -1000, 9314, 9314, 9314, 899, 706,
	599, 250, -1000, 1203, -1000, -1000, 1168, 15532, 15532, -1000,
	-1000, 1047, -1000, -1000, 1042, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1040, 1040, 1040, 403, -1000, -1000, 761, 12867,
	1416, -1000, 662, -1000, -1000, 625, 175, 654, -1000, 15532,
	-199, 8426, -1000, 1203, 690, 1003, 9314, 1235, 765, -1000,
	977, -1000, 53, -141, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 485, -1000, 485, -1000, -1000, 970, 966, 12867,
	15532, 15828, -1000, -1000, 15532, -1000, -1000, -1000, -1000, -1000,
	157, 2497, 1232, 1231, 12274, 1203, 289, 1477, 1462, -1000,
	-1000, 262, 262, 262, 262, 139, -1000, -1000, 1518, -1000,
	1203, -1000, 1099, 443, -1000, 15532, -1000, -1000, -139, -1000,
	-1000, -1000, -134, 1274, 1057, 134, -1000, 851, 551, 691,
	540, 538, 537, 532, 520, 517, 515, -1000, -1000, -1000,
	1507, -1000, -1000, -1000, 1496, 1229, -1000, 1228, 690, 8426,
	171, 1282, 383, -1000, 944, 928, -1000, -1000, -1000, -1000,
	-1000, -1000, 1001, 1226, 1222, 1007, -1000, 151, 2497, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1475, 15532,
	15532, 15532, 15532, 336, 9018, 9018, 12867, 12867, 982, 225,
	249, -1000, 8426, 8426, -1000, -1000, -1000, -1000, 899, 149,
	-148, 16124, 1065, 899, 15532, -1000, -1000, -1000, -1000, 15532,
	-1000, -144, 1057, 15532, -1000, 760, -1000, -1000, 705, 730,
	705, 705, 705, 705, 705, 563, 563, 15532, 12867, 171,
	690, -1000, -103, 1512, -158, 763, -1000, -1000, -207, 12867,
	12867, -135, 15532, 8426, 2545, -1000, 1458, 1033, 9610, -1000,
	-1000, -1000, -1000, 15532, 1499, 1489, 1485, 1484, 2223, 49,
	121, 980, 969, 1195, 965, -1000, 15532, 1217, 599, 1025,
	-1000, 1337, -121, -153, 1021, -1000, -1000, 1203, 963, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 607, 607, 961, 955, -1000, 171, -1000, 563, 563,
	-1000, -1000, 140, 770, 713, 700, 683, -18, -1000, 1460,
	1482, 1212, 943, 937, -1000, -221, -1000, 599, -1000, -1000,
	2497, 1390, 15532, 137, -1000, -1000, 1391, -1000, -1000, -1000,
	-1000, -1000, 2497, 2497, -1000, 303, -136, -1000, 225, 1372,
	12867, -1000, 1239, -1000, 15532, -1000, 1057, -1000, -1000, 284,
	761, -1000, -1000, -1000, 645, -1000, 642, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 12570, 761, 12274, 1482, 761, 8426,
	-226, -1000, -1000, 10202, 1445, 15532, 2282, -1000, 2175, 125,
	-1000, 127, -1000, -1000, 220, 927, -138, 899, -1000, 15828,
	1274, -1000, -1000, -1000, 413, 1274, 898, 761, -1000, 599,
	586, 1099, -1000, -1000, -1000, 585, -1000, 120, -1000, 199,
	-1000, -151, -1000, 1210, -1000, 5972, -1000, -1000, -1000, -1000,
	-1000, 117, -1000, -1000, 1203, -155, 15532, -1000, 2497, 8722,
	-1000, 870, 1962, 262, 899, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1808, 18, 20, 1804, 1803, 1801, 1552, 1544, 1542,
	1536, 1797, 1795, 1792, 1787, 1786, 1783, 1780, 1776, 1772,
	1771, 1769, 1768, 1767, 1766, 1765, 1762, 1759, 373, 1753,
	1751, 1748, 97, 1747, 100, 1745, 1742, 58, 89, 68,
	59, 1312, 1741, 43, 88, 96, 1739, 73, 1737, 1736,
	107, 1735, 90, 1734, 1727, 1384, 1726, 1724, 33, 24,
	34, 44, 1722, 1721, 99, 229, 1717, 1716, 1715, 1713,
	1712, 1711, 78, 14, 29, 27, 39, 1710, 75, 64,
	1709, 70, 1708, 1707, 1705, 1704, 26, 1702, 80, 32,
	15, 10, 1701, 9, 1700, 85, 57, 41, 23, 108,
	101, 1698, 54, 84, 77, 1697, 1693, 857, 1692, 1689,
	1688, 1684, 1681, 1680, 662, 757, 1677, 1676, 1675, 82,
	0, 634, 125, 104, 1674, 67, 1672, 1719, 106, 86,
	40, 1665, 47, 1942, 56, 1663, 1662, 65, 98, 95,
	118, 103, 1661, 1660, 1654, 1650, 1648, 1213, 49, 345,
	201, 1647, 1643, 1642, 28, 72, 51, 61, 83, 1641,
	1635, 1630, 1626, 45, 1624, 12, 31, 1, 69, 1623,
	1621, 1620, 1619, 55, 50, 1617, 37, 30, 4, 13,
	3, 1616, 1615, 1612, 5, 1611, 42, 1610, 6, 1607,
	11, 1599, 1598, 1596, 1592, 1591, 1590, 1586, 21, 1585,
	1583, 36, 17, 53, 46, 25, 71, 48, 1581, 52,
	1580, 2, 8, 1579, 7, 1578, 1574, 1572, 16, 22,
	1571, 1569, 1567, 1556, 1555, 113, 109, 1554, 1549, 1546,
	1533, 518,
}

var yyR1 = [...]int{
	0, 223, 224, 224, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 227,
	227, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 215, 215, 214, 216, 216, 12, 12, 12, 12,
	12, 208, 208, 208, 208, 208, 13, 13, 211, 211,
	14, 14, 100, 100, 104, 104, 104, 105, 105, 105,
	105, 135, 135, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 206, 206, 206, 207, 207,
	207, 209, 209, 210, 210, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 213, 213, 192, 192, 192, 193,
	193, 193, 193, 193, 193, 195, 195, 196, 196, 125,
	125, 190, 190, 189, 188, 188, 187, 187, 186, 197,
	197, 20, 170, 171, 171, 171, 171, 171, 171, 171,
	158, 139, 139, 139, 139, 139, 139, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 203, 203, 203, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 199, 199, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 148,
	148, 148, 148, 148, 148, 198, 198, 194, 194, 194,
	194, 194, 194, 143, 143, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 142, 142, 142, 142, 142,
	142, 142, 142, 144, 144, 144, 144, 144, 144, 144,
	144, 140, 140, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 146, 146, 146, 146,
	146, 146, 146, 146, 157, 157, 147, 147, 155, 155,
	156, 156, 156, 154, 154, 154, 151, 151, 152, 152,
	153, 153, 153, 149, 149, 149, 150, 150, 150, 160,
	179, 179, 179, 181, 181, 182, 182, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 169, 169,
	205, 205, 178, 178, 178, 175, 175, 175, 175, 175,
	175, 175, 175, 168, 168, 177, 177, 176, 176, 163,
	163, 163, 163, 163, 164, 165, 165, 165, 165, 161,
	162, 201, 201, 201, 202, 202, 166, 166, 167, 167,
	172, 172, 172, 173, 173, 173, 174, 174, 174, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 228, 228, 229, 229, 229, 229, 229,
	229, 229, 185, 183, 183, 184, 184, 17, 18, 18,
	18, 18, 18, 19, 19, 21, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 112,
	112, 109, 109, 110, 110, 111, 111, 111, 113, 113,
	113, 136, 136, 136, 23, 23, 25, 25, 26, 27,
	24, 24, 24, 24, 24, 230, 28, 29, 29, 30,
	30, 30, 34, 34, 34, 32, 32, 33, 33, 39,
	39, 38, 38, 40, 40, 40, 40, 124, 124, 124,
	123, 123, 42, 42, 43, 43, 44, 44, 45, 45,
	45, 218, 218, 217, 217, 219, 219, 219, 219, 219,
	219, 57, 57, 93, 93, 93, 96, 96, 46, 46,
	46, 46, 47, 47, 48, 48, 49, 49, 131, 131,
	130, 130, 130, 129, 129, 51, 51, 51, 53, 52,
	52, 52, 52, 54, 54, 56, 56, 55, 55, 58,
	58, 58, 58, 59, 59, 94, 94, 41, 41, 41,
	41, 41, 41, 41, 108, 108, 61, 61, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 71, 71,
	71, 71, 71, 71, 62, 62, 62, 62, 62, 62,
	62, 37, 37, 72, 72, 72, 78, 73, 73, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 69, 69, 69, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 231,
	231, 70, 70, 70, 70, 35, 35, 35, 35, 35,
	134, 134, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 138, 138, 138, 138,
	138, 138, 138, 82, 82, 36, 36, 80, 80, 81,
	83, 83, 79, 79, 79, 220, 64, 64, 64, 64,
	64, 64, 64, 64, 66, 66, 66, 84, 84, 85,
	85, 86, 86, 87, 87, 88, 89, 89, 89, 90,
	90, 90, 90, 91, 91, 91, 63, 63, 63, 63,
	63, 63, 92, 92, 92, 92, 97, 97, 74, 74,
	76, 76, 75, 77, 98, 98, 102, 99, 99, 103,
	103, 103, 103, 103, 101, 101, 101, 126, 126, 126,
	106, 106, 114, 114, 115, 115, 107, 107, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 117, 117,
	117, 118, 118, 121, 121, 122, 122, 127, 127, 128,
	128, 221, 221, 221, 222, 222, 222, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 225, 226, 132, 133, 133, 133,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	5, 9, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 14, 13, 14, 6, 5, 5,
	5, 11, 11, 9, 5, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 4, 0, 2, 2, 0,
	2, 2, 2, 2, 2, 0, 2, 0, 3, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 0,
	2, 4, 4, 0, 1, 3, 3, 3, 3, 3,
	2, 3, 1, 1, 1, 1, 1, 2, 2, 3,
	2, 4, 4, 2, 2, 3, 2, 3, 2, 7,
	9, 3, 3, 6, 9, 9, 8, 5, 8, 7,
	4, 2, 4, 6, 2, 1, 1, 1, 1, 1,
	1, 3, 3, 1, 2, 0, 4, 3, 4, 3,
	3, 3, 3, 3, 3, 3, 2, 4, 6, 2,
	3, 2, 3, 1, 3, 0, 2, 0, 3, 3,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 2, 2,
	2, 1, 1, 1, 3, 3, 2, 1, 2, 1,
	1, 1, 1, 4, 4, 4, 4, 4, 1, 5,
	2, 2, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 3, 3, 0, 1, 0, 1,
	0, 2, 1, 0, 3, 3, 0, 1, 2, 6,
	0, 1, 4, 1, 2, 1, 3, 2, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	1, 1, 0, 2, 5, 2, 3, 3, 2, 3,
	2, 3, 4, 1, 1, 1, 3, 3, 2, 2,
	5, 5, 8, 8, 13, 1, 1, 2, 2, 10,
	7, 0, 1, 1, 0, 3, 0, 1, 1, 3,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	11, 13, 13, 7, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 3,
	6, 4, 2, 4, 2, 2, 2, 2, 3, 1,
	1, 0, 1, 0, 1, 0, 2, 2, 0, 2,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 0, 4, 1, 3, 1, 1, 1, 1, 1,
	1, 4, 8, 1, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 0, 4, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	6, 8, 8, 6, 8, 8, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 1,
	2, 1, 2, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 5, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 2, 0, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -223, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	113, 114, 116, 115, 145, 117, 138, 49, 191, 192,
	194, 195, 26, 139, 140, 143, 144, -225, 8, 296,
	53, -224, 337, -86, 15, -30, 5, -28, -230, -28,
	-28, -28, -28, -28, -170, 53, -125, -197, 154, 288,
	119, 134, 152, 153, 120, 136, 71, -107, 122, 124,
	120, 120, 121, 122, 288, 119, 120, -55, -127, 56,
	-120, 161, 305, 21, 191, 204, 205, 196, 237, 225,
	306, 159, 222, 226, 274, 336, 65, 194, 283, 128,
	165, 141, 217, 220, 219, 211, 208, 28, 243, 312,
	210, 131, 244, 248, 254, 275, 303, 201, 202, 277,
	241, 32, 133, 307, 34, 149, 278, 246, 240, 235,
	239, 200, 234, 38, 214, 250, 249, 251, 273, 228,
	160, 253, 230, 212, 229, 18, 144, 147, 245, 247,
	209, 162, 126, 151, 311, 279, 207, 148, 163, 143,
	282, 327, 158, 195, 276, 203, 285, 37, 259, 221,
	198, 213, 199, 130, 192, 156, 232, 150, 215, 216,
	238, 197, 233, 193, 152, 145, 284, 260, 313, 231,
	227, 223, 224, 157, 122, 154, 155, 266, 267, 268,
	269, 309, 280, 218, 261, 262, 167, 168, 169, 170,
	171, 172, 173, 120, 107, 226, 113, 264, 121, 32,
	151, -136, 120, -109, 155, 266, 267, 268, 269, 56,
	276, 275, 270, -127, 193, -132, -132, -132, -132, -132,
	-2, -90, 17, 16, -5, -3, -225, 6, 21, 22,
	-34, 39, 40, -29, -40, 98, -41, -127, -60, 73,
	-65, 29, 56, -120, 24, -64, -61, -79, -220, -77,
	-78, 107, 108, 96, 97, 104, 74, 109, -69, -67,
	-68, -70, 58, 57, 66, 59, 60, 61, 62, 67,
	68, 69, -121, 286, -75, -225, 43, 44, 297, 298,
	299, 300, 304, 301, 76, 33, 287, 295, 294, 293,
	291, 292, 289, 290, 335, 125, 288, 102, 296, -107,
	-43, -44, -45, -46, -57, -78, -225, -55, 11, -50,
	-55, -99, -135, 193, -103, 276, 275, -122, 286, -101,
	-121, -119, 274, 226, 273, 56, -120, 118, 175, 316,
	72, 23, 25, 257, 263, 174, 75, 107, 16, 76,
	181, 325, 326, 106, 297, 113, 47, 289, 290, 287,
	179, 299, 300, 288, 264, 186, 20, 29, 10, 26,
	139, 22, 100, 115, 176, 79, 80, 142, 24, 140,
	69, 182, 184, 19, 50, 132, 11, 315, 13, 14,
	329, 317, 125, 124, 91, 328, 121, 45, 8, 109,
	27, 88, 41, 137, 185, 43, 89, 17, 291, 292,
	31, 304, 146, 102, 48, 35, 330, 73, 331, 67,
	51, 281, 180, 71, 15, 46, 332, 134, 183, 90,
	116, 296, 44, 177, 333, 119, 178, 6, 302, 30,
	138, 42, 120, 265, 78, 123, 68, 5, 136, 9,
	49, 52, 293, 294, 295, 33, 77, 12, 135, 308,
	70, -171, -158, 56, -201, 325, 326, 122, -121, -115,
	125, -115, -121, -121, -55, -115, 296, 120, -55, -55,
	-114, 125, 56, -114, -114, -114, -55, 110, -55, 56,
	30, 288, 56, 151, 120, 152, 122, -133, -225, -122,
	-133, -133, -133, 156, 157, -133, -110, 271, 51, -133,
	-226, 55, -91, 19, 31, -41, -127, -87, -88, -41,
	-86, -2, -28, 35, -32, 22, 64, 11, -124, 72,
	71, 88, -123, 23, -121, 58, 110, -41, -62, 91,
	73, 89, 90, 75, 93, 92, 103, 96, 97, 98,
	99, 100, 101, 102, 94, 95, 106, 335, 81, 82,
	83, 84, 85, 86, 87, -108, -225, -78, -225, 111,
	112, -65, -65, -65, -65, -65, -65, -65, -225, 110,
	-2, -73, -41, -225, -225, -225, -225, -225, -225, -225,
	-225, -225, -82, -41, -225, -231, -225, -231, -231, -231,
	-231, -231, -231, -231, -138, 107, 226, 141, 217, -141,
	-140, 232, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 225, 306, -225, -225, -225, -225, -56, 27,
	-55, 30, 54, -51, -53, -52, -54, 41, 45, 47,
	42, 43, 44, 48, -131, 23, -43, -225, -130, 147,
	-129, 23, -127, 58, -55, -50, -227, 54, 11, 52,
	54, -99, 193, -100, -104, 277, 279, 81, 110, -126,
	-121, 58, 29, 30, 55, 54, -159, -139, -143, -140,
	-145, -144, -146, -121, -141, -142, 225, 306, 222, 226,
	223, 228, 229, 230, 107, 227, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 231, 243, 30,
	141, 215, 216, 217, 220, 219, 221, 218, 244, 245,
	246, 247, 248, 249, 250, 251, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 208, 210, 211,
	212, 214, 213, 121, -55, -190, 52, 56, 73, 56,
	51, -206, 51, 19, 174, 175, 23, -55, -55, 281,
	-133, 123, -55, 24, 51, -55, 56, 56, -128, -127,
	-119, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, -112, 265, 272, -55, 9, 91, 54, 18, 110,
	54, -89, 25, 26, -90, -226, -34, -66, -121, 59,
	62, -33, 42, -55, -41, -41, -71, 67, 73, 68,
	69, -123, 98, -128, -122, -119, -65, -72, -75, -78,
	63, 91, 89, 90, 75, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-134, 56, 58, -138, 56, -64, -64, -121, -39, 22,
	-38, -40, -122, -226, 54, -226, -2, -38, -38, -41,
	-41, -79, -121, -127, -79, -38, -32, -80, -81, 77,
	-79, -226, 224, -38, -39, -38, -38, -95, 147, -55,
	-98, -102, -79, -44, -45, -45, -44, -45, 41, 41,
	41, 46, 41, 46, 41, -52, -127, -226, -58, 49,
	124, 50, -225, -129, -95, 52, -43, -55, -103, -100,
	54, 278, 280, 281, 51, 70, -41, -122, -150, 107,
	106, -172, -173, -174, -122, 58, 59, -158, -160, -163,
	-161, -162, -175, -164, 128, 126, 130, 131, 136, -168,
	121, 137, 67, 73, -203, 128, 51, 257, 263, 126,
	137, 136, 336, 65, 129, 315, 317, 29, -153, 338,
	252, -151, 260, -147, 53, -147, -147, 224, -147, -147,
	-147, -147, -147, -149, 226, -149, -149, -149, -149, 53,
	53, -147, -147, -147, -147, -155, 53, 209, -155, -155,
	-156, 53, -156, -121, 23, -188, 308, -189, 56, -133,
	24, -133, -55, -209, -207, 8, 9, 10, -55, -139,
	-116, 118, 115, 116, -185, 114, 257, 226, 65, 29,
	15, 297, 147, 313, 56, 148, -55, -55, -55, -133,
	-111, 11, 91, 37, -41, -41, -128, -88, -91, -106,
	19, 11, 33, 33, -38, 67, 68, 69, 110, -225,
	-72, -65, -65, -65, -37, 142, 72, -226, -226, -38,
	54, -41, -226, -226, -226, 54, 52, 23, 54, 11,
	110, 54, 11, -226, -38, -83, -81, 79, -41, -226,
	-226, -226, -226, -226, -63, 30, 33, -2, -225, -225,
	-59, 54, 12, 81, -48, -47, 51, 52, -49, 51,
	-47, 41, 41, -218, 308, 121, 121, 121, -96, -121,
	-59, -43, -59, -104, -105, 282, 279, 285, 81, 56,
	54, -174, 81, 53, -202, 51, 73, -166, -121, 137,
	-168, -168, 56, -168, 56, 56, 67, 19, -121, 9,
	137, 137, -202, 58, -127, -199, 316, 16, 53, -204,
	53, 58, 59, 60, 67, -148, 66, -61, 253, 287,
	290, 289, 254, 339, -152, 261, 59, -149, -149, -147,
	-149, -149, -149, -150, 30, -150, -150, -150, -150, -157,
	58, -157, -154, 308, 309, -154, 59, -155, 59, 51,
	52, -2, -187, -186, -122, -192, 23, 51, 54, -206,
	-132, -125, 128, -229, 154, 127, 132, 131, 56, 126,
	130, 147, -191, 154, 127, 128, 132, 131, 56, 121,
	137, 126, 130, 147, 136, -117, -118, 123, 23, 121,
	137, 147, 118, -133, -113, 89, 12, -127, -127, 38,
	110, -55, -42, 11, 98, -122, -39, -37, 72, -65,
	-65, -226, -40, -137, 107, 222, 141, 217, 211, 241,
	242, 228, 259, 215, 260, -134, -137, -65, -65, -122,
	-65, -65, 305, -86, 80, -41, 78, -97, 51, -98,
	-74, -76, -75, -225, -2, -92, -121, -96, -86, -102,
	-41, -41, -41, 53, -41, 53, -225, -225, -225, -226,
	54, -86, -59, 279, 283, 284, -41, -173, -174, -177,
	-176, -121, 137, 10, 9, 19, 132, 126, 336, 56,
	56, 56, -201, 136, 327, -203, 336, -148, -225, 53,
	23, 29, 59, -204, 53, -194, 335, -225, -147, 53,
	-147, 53, 53, 55, -150, -150, -149, -150, -150, -150,
	56, 107, 55, 54, 55, 215, 215, 54, 55, 54,
	-55, -121, 54, 81, -193, 19, 162, 163, -55, -207,
	-209, -228, 121, 137, -121, -132, -121, -132, -121, -55,
	-132, -121, 128, -163, 58, -41, -59, -43, -226, -65,
	-226, -147, -147, -147, -156, -147, 202, -147, 202, -226,
	-226, -226, 54, 19, -226, 54, 19, -225, -36, 302,
	-41, 28, -97, 54, -226, -226, -226, 54, 110, -226,
	-90, -93, -121, 137, -217, -219, 329, 330, 331, 332,
	333, 334, -93, -93, -93, -130, -121, -90, 55, 54,
	-147, -147, -165, 158, 159, 30, 160, -165, 327, 137,
	137, -225, -201, -202, -41, -93, 53, 317, 54, 55,
	-204, -121, 226, 216, 255, 232, 241, -226, 55, 55,
	55, -150, -149, 58, -149, 262, 262, 59, 59, 53,
	52, 51, -186, -174, 123, 21, 6, 8, 9, 10,
	19, 23, -121, 136, 53, 27, -121, -84, 13, -149,
	56, -65, -65, -65, -65, -65, -226, 58, 137, -76,
	33, -2, -225, -121, -121, 54, 55, 55, 54, -226,
	-226, -226, -58, -179, -181, 308, -180, 52, 133, 65,
	167, 168, 169, 170, 171, 172, 173, -176, -89, -202,
	51, 67, 161, -202, 51, -166, -121, -201, -41, -225,
	-226, 55, -65, 53, 59, 55, 224, -154, -150, -150,
	55, 55, -177, -121, -55, -167, -121, 176, -210, -212,
	-7, -9, -8, -11, -10, -12, -13, -14, -3, 20,
	180, 181, 186, 182, 135, 125, 53, 53, -93, -225,
	126, -85, 14, 16, -226, -226, -226, -226, -35, 91,
	308, 9, -74, -2, 110, -121, -219, -218, -178, 51,
	-180, 308, 53, 310, 56, -169, 81, 58, 81, 81,
	81, 81, 81, 81, 81, 9, 10, 53, 53, -226,
	-41, -198, 160, 51, 55, -200, 55, 55, 55, 53,
	53, -195, 54, 52, 177, -212, -86, -215, -121, -214,
	-121, -121, -121, -208, 35, 183, 184, 185, -60, -65,
	-60, -177, -177, 55, -183, -184, 147, 137, -41, -73,
	-226, 306, 48, 311, -98, -226, -121, -121, -182, -180,
	-121, 59, -205, 51, 70, 59, -205, -205, -205, -205,
	-205, -165, -165, -167, -177, -198, -226, 303, 10, 9,
	314, 55, 192, 319, 320, 146, 321, 160, 322, 323,
	-94, 328, -177, -177, -196, 308, -121, -41, -213, -212,
	191, -90, 54, -216, -139, 178, -121, 11, 11, 11,
	11, -212, 191, 191, 55, 55, -190, -226, 54, -121,
	53, 38, 307, 312, -225, 55, 54, -202, -202, 55,
	55, -198, -165, -165, 308, 59, 16, 59, 59, 59,
	59, 320, 146, 322, 16, -59, 53, 55, 55, 336,
	-212, -91, -214, -121, 179, 27, -211, -212, -211, -221,
	187, 73, -188, -184, 33, -177, 38, -121, -180, 129,
	-179, 59, 59, 324, -127, -179, -93, -59, -179, -41,
	337, 19, -121, 80, -212, 80, -222, 188, 187, 149,
	55, 308, -226, -55, -178, 110, -178, 55, -179, 80,
	-2, 79, 190, 189, 150, 311, 53, -122, 191, -225,
	312, -167, -211, -65, 146, 55, 80, -226, -226,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 731, 0, 475, 475, 475, 475, 475, 475, 0,
	-2, 786, 0, 0, 0, 0, -2, 465, 466, 0,
	468, 469, 1075, 1075, 1075, 1075, 1075, 0, 33, 34,
	1073, 1, 3, 739, 0, 0, 479, 482, 477, 0,
	786, 0, 0, 0, 83, 143, 361, 0, 0, 784,
	784, 0, 0, 0, 784, 130, 0, 0, 0, 787,
	0, 782, 0, 782, 782, 782, 0, 424, 557, 807,
	808, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
	1070, 1071, 1072, 0, 0, 0, 0, 1076, 1076, 1076,
	1076, 0, 1076, 453, 442, 444, 445, 446, 447, 1076,
	462, 463, 452, 464, 467, 470, 471, 472, 473, 474,
	27, 743, 0, 0, 731, 29, 0, 475, 480, 481,
	485, 483, 484, 476, 0, 493, 497, 0, 567, 0,
	572, 574, -2, -2, 0, 609, 610, 611, 612, 613,
	614, 0, 0, 0, 0, 0, 0, 0, 638, 639,
	640, 641, 716, 717, 718, 719, 720, 721, 722, 723,
	576, 577, 712, 0, 763, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 703, 0, 669, 669, 669, 669,
	669, 669, 669, 669, 0, 0, 0, 0, 0, 0,
	0, 504, 506, 507, 508, 538, 0, 540, 0, 0,
	41, 45, 0, 1043, 767, -2, -2, 0, 0, 0,
	805, 806, -2, 953, -2, 803, 804, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 0, 144, 0, 0, 362, 363, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 140, 0, 1076, 0,
	0, 0, 0, 0, 0, 0, 423, 0, 425, 1076,
	1076, 1076, 1076, 1076, 1076, 1076, 1076, 434, 1077, 1078,
	435, 436, 437, 1076, 1076, 439, 0, 454, 0, 448,
	28, 1074, 22, 0, 0, 740, 0, 732, 733, 736,
	739, 27, 482, 0, 487, 486, 478, 0, 494, 0,
	0, 0, 498, 0, 500, 501, 0, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 594, 595,
	596, 597, 598, 599, 600, 573, 0, 587, 0, 0,
	0, 630, 631, 632, 633, 634, 635, 0, 489, 0,
	27, 0, 607, 0, 0, 0, 0, 0, 0, 0,
	0, 485, 0, 704, 0, 660, 0, 661, 662, 663,
	664, 665, 666, 667, 668, 696, 0, 698, 699, 700,
	701, 702, 225, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 251, 252, 0, 489, 0, 0, 43, 0,
	556, 0, 0, 0, 0, 0, 0, 545, 0, 0,
	548, 0, 0, 0, 0, 539, 0, 0, 559, 1007,
	541, 0, 543, 544, -2, 0, 0, 0, 39, 40,
	0, 46, 1043, 48, 72, 0, 0, 0, 0, 306,
	777, 778, 779, 775, 370, 0, 150, 300, 296, 152,
	153, 154, 155, 156, 286, 224, 251, 252, 286, 286,
	286, 286, 286, 258, 286, 286, 303, 303, 303, 303,
	303, 267, 268, 269, 270, 271, 272, 273, 968, 0,
	243, 286, 286, 286, 247, 286, 249, 250, 276, 277,
	278, 279, 280, 281, 282, 283, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 288, 288, 288, 290,
	290, 241, 242, 0, 0, 134, 0, 1076, 0, 1076,
	0, 0, 0, 95, 96, 97, 0, 141, 0, 0,
	390, 0, 418, 783, 0, 1076, 421, 422, 558, 809,
	810, 426, 427, 428, 429, 430, 431, 432, 433, 438,
	441, 455, 449, 450, 443, 744, 0, 0, 0, 0,
	0, 735, 737, 738, 743, 30, 485, 0, 724, 0,
	0, 0, 488, 25, 568, 569, 571, 588, 0, 590,
	592, 499, 495, 0, 713, -2, 578, 579, 603, 604,
	605, 0, 0, 0, 0, 601, 583, 0, 615, 616,
	617, 618, 619, 620, 621, 622, 623, 624, 625, 626,
	629, 680, 681, 637, 0, 627, 628, 636, 0, 0,
	490, 491, 715, 606, 0, 762, 27, 0, 0, 0,
	0, 0, 712, 0, 0, 0, 0, 710, 707, 0,
	0, 670, 697, 0, 0, 0, 0, 0, 0, 555,
	563, 764, 0, 505, 534, 536, 0, 531, 546, 547,
	549, 0, 551, 0, 553, 554, 509, 510, 511, 0,
	0, 0, 0, 542, 563, 0, 563, 42, 768, 47,
	0, 0, 75, 76, 769, 770, 771, 0, 773, 307,
	0, 142, 371, 373, 376, 377, 378, 145, 146, 147,
	148, 149, 0, 364, 366, 0, 0, 0, 0, 0,
	343, 344, 158, 0, 160, 0, 0, 163, 164, 0,
	166, 168, 364, 0, 0, 0, 0, 0, 157, 0,
	302, 298, 297, 223, 0, 303, 303, 286, 303, 303,
	303, 260, 261, 306, 0, 306, 306, 306, 306, 0,
	0, 293, 293, 246, 248, 235, 0, 288, 237, 238,
	239, 0, 240, 0, 0, 88, 0, 132, 133, 89,
	785, 90, 116, 0, 101, 98, 99, 100, 0, 94,
	1075, 129, 0, 798, 391, 788, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 0, 0, 417, 1076, 420,
	458, 0, 0, 0, 741, 742, 0, 734, 23, 0,
	780, 781, 725, 726, 502, 589, 591, 593, 0, 489,
	580, 601, 584, 0, 581, 0, 0, 575, 642, 0,
	0, 608, -2, 645, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 708, 0, 0, 659,
	671, 672, 673, 674, 756, 0, 0, -2, 0, 0,
	731, 0, 0, 0, 528, 535, 0, 0, 529, 0,
	530, 550, 552, 521, 0, 0, 0, 0, 0, 526,
	731, 563, 38, 73, 74, 0, 0, 80, 0, 308,
	0, 374, 0, 0, 349, 0, 0, 0, 367, 335,
	0, 0, 338, 0, 340, 361, 159, 0, 0, 0,
	165, 167, 0, 171, 172, 0, 193, 0, 0, 181,
	0, 217, 185, 186, 187, 188, 189, 190, 0, 286,
	286, 213, 0, 301, 151, 299, 0, 306, 306, 303,
	306, 306, 306, 262, 0, 263, 264, 265, 266, 0,
	284, 0, 244, 0, 0, 245, 0, 236, 0, 0,
	0, -2, 135, 136, 0, 119, 0, 0, 0, 0,
	379, 0, 0, 1075, 0, 405, 406, 407, 408, 409,
	410, 411, 1075, 0, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 0, 1075, 799, 800, 801,
	802, 0, 0, 419, 440, 0, 0, 456, 457, 745,
	0, 24, 563, 0, 496, 714, 0, 582, 0, 602,
	585, 643, 492, 0, 286, 286, 685, 286, 290, 688,
	689, 286, 691, 286, 694, 0, 0, 0, 0, 713,
	0, 0, 0, 705, 658, 711, 0, 31, 0, 756,
	746, 758, 760, 0, 27, 0, 752, 0, 739, 765,
	564, 766, 532, 0, 537, 0, 0, 0, 0, 540,
	0, 739, 37, 77, 78, 79, 772, 372, 375, 0,
	345, 286, 286, 0, 0, 0, 0, 0, 0, 336,
	337, 339, 341, 361, 180, 161, 364, 162, 0, 0,
	0, 194, 0, 0, 0, 184, 0, 0, 209, 0,
	211, 0, 0, 287, 253, 254, 306, 255, 256, 257,
	304, 305, 303, 0, 303, 0, 0, 0, 291, 0,
	0, 0, 0, 0, 0, 0, 117, 118, 0, 102,
	0, 0, 403, 404, 0, 384, 0, 385, 387, 388,
	389, 0, 366, 383, 459, 460, 727, 503, 644, 586,
	647, 682, 303, 686, 687, 690, 692, 693, 695, 649,
	648, 650, 0, 0, 653, 0, 0, 0, 0, 0,
	709, 0, 32, 0, 761, -2, 0, 0, 0, 44,
	35, 0, 523, 524, 0, 513, 515, 516, 517, 518,
	519, 520, 0, 0, 0, 559, 527, 36, 310, 0,
	736, 348, 364, 355, 356, 0, 0, 364, 365, 366,
	361, 0, 342, 0, 0, 0, 0, 177, 0, 182,
	0, 192, 953, 293, 220, 221, 222, 191, 210, 212,
	214, 259, 306, 285, 306, 294, 295, 0, 0, 0,
	0, 0, 137, 138, 0, 120, 121, 122, 123, 124,
	0, 0, 0, 0, 0, 0, 367, 729, 0, 683,
	684, 0, 0, 0, 0, 675, 657, 706, 0, 759,
	0, -2, 0, 754, 753, 0, 533, 512, 0, 560,
	561, 562, 511, 332, 311, 0, 313, 0, 328, 0,
	0, 0, 0, 0, 0, 0, 0, 346, 347, 350,
	0, 357, 358, 351, 0, 0, 367, 0, 0, 0,
	215, 173, 0, 195, 0, 0, 218, 219, 274, 275,
	289, 292, 0, 0, 0, 125, 368, 0, 93, 103,
	105, 106, 107, 108, 109, 110, 111, 112, 731, 0,
	0, 0, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 26, 0, 0, 651, 652, 654, 655, 0, 0,
	0, 0, 749, 27, 0, 525, 514, 522, 309, 0,
	314, 0, 0, 0, 317, 0, 329, 319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 169, 0, 0, 0, 0, 179, 183, 565, 0,
	0, 127, 0, 0, 0, 104, 739, 49, 54, 51,
	56, 57, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 413, 0, 0, 730, 728,
	656, 0, 0, 0, 757, -2, 755, 333, 0, 315,
	320, 318, 321, 330, 331, 322, 323, 324, 325, 326,
	327, 364, 364, 0, 0, 360, 215, 216, 0, 0,
	176, 178, 0, 0, 0, 0, 0, 0, 206, 0,
	563, 0, 0, 0, 91, 0, 369, 126, 92, 114,
	0, 743, 0, 0, 53, 55, 59, 62, 63, 64,
	65, 66, 0, 0, 380, 811, 134, 412, 0, 0,
	0, 676, 0, 679, 0, 312, 0, 352, 353, 0,
	310, 170, 174, 175, 0, 197, 0, 199, 200, 201,
	202, 203, 204, 205, 0, 310, 0, 563, 310, 0,
	0, 113, 52, 0, 0, 0, 0, 68, 0, 814,
	812, 0, 386, 414, 0, 0, 677, 0, 316, 0,
	332, 196, 198, 207, 0, 332, 0, 310, 85, 128,
	0, 0, 60, 67, 69, 70, 382, 0, 813, 0,
	381, 0, 334, 0, 359, 0, 84, 566, 86, 115,
	-2, 0, 815, 816, 0, 0, 0, 208, 0, 0,
	678, 0, 0, 0, 0, 354, 71, 415, 416,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 337,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 338, 3, 339, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:368
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:373
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:374
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:378
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:401
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:409
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:413
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:419
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:426
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:432
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:436
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:442
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:446
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:453
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:465
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:477
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:481
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:487
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:493
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:497
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:501
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:506
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:507
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:511
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:515
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:520
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:524
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:530
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:534
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:538
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:542
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:548
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:552
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:565
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:569
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:575
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:580
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:584
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:590
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:597
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:604
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:611
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:619
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:629
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:633
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:637
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:641
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:645
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:651
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:658
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:668
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:672
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:678
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:686
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:697
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:701
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:707
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:711
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:715
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:721
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:725
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:729
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:733
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:739
		{
			yyVAL.str = SessionStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:743
		{
			yyVAL.str = GlobalStr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:749
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 84:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:754
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 85:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:774
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 86:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:790
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:805
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:813
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:821
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:825
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:829
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 92:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:841
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:852
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:863
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:875
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:879
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:883
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:889
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:893
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:897
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:903
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:907
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:913
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:917
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:923
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:934
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:946
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:953
		{
			yyVAL.bytes = nil
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:957
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:961
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:966
		{
			yyVAL.bytes = nil
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:970
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:974
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:978
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:982
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:986
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:991
		{
			yyVAL.expr = nil
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:995
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1000
		{
			yyVAL.expr = nil
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1004
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1009
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1013
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1018
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1022
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1028
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1033
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1038
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1044
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1049
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1055
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1060
		{
			yyVAL.bytes = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1064
		{
			yyVAL.bytes = nil
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1070
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1077
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1083
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1087
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1092
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1096
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1100
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1104
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1108
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1114
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1120
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1131
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1137
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1149
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1154
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1159
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1164
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1169
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1174
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1179
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1184
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1189
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1194
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1199
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1204
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1213
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1223
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1228
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1233
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1239
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1246
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1254
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1260
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1266
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1272
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1278
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1285
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1289
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1293
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1299
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1303
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1307
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1311
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1315
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1319
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1323
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1327
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1331
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1337
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1341
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1346
		{
			yyVAL.sequence = &Sequence{}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1350
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1355
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1360
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1365
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1370
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1375
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1380
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1385
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1390
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1395
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1400
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1405
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1410
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1417
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1421
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1425
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1429
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1433
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1437
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1442
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1446
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1451
		{
			yyVAL.bytes = nil
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1462
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1467
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1473
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1477
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1481
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1485
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1489
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1493
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1497
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1501
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1505
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1509
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1515
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1521
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1551
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1555
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1569
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1573
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1577
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1581
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1585
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1589
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1605
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1609
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1661
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1665
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1669
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1673
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1677
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1681
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1685
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1689
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1734
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1739
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1744
		{
			yyVAL.optVal = nil
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1748
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1753
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1757
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1765
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1769
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 292:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1775
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1783
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1787
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1791
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1796
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1800
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1805
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1809
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1814
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1818
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1822
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1827
		{
			yyVAL.str = ""
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1831
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1835
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1840
		{
			yyVAL.str = ""
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1844
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1848
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1854
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1859
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1863
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1867
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1873
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1877
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1883
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1887
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1893
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1897
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1902
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1906
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1910
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1914
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1918
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1922
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1926
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1930
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1934
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1940
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1944
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1950
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1954
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1960
		{
			yyVAL.indexPartition = nil
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1964
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 334:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1968
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1974
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1978
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1982
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1986
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1990
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1994
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1998
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2002
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2008
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2012
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2018
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2022
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2028
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2033
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2039
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 350:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2044
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2051
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 352:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2058
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 353:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2065
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 354:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2074
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2086
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2090
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2094
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2098
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 359:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2104
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 360:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2115
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2125
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2129
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2133
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2139
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2143
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2148
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2155
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2159
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2164
		{
			yyVAL.str = ""
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2168
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2172
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2180
		{
			yyVAL.str = yyDollar[1].str
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2184
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2188
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2194
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2198
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2202
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2208
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 380:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2212
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 381:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2226
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 382:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2240
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 383:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2259
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 384:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2268
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 385:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2272
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 386:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2276
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 387:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2289
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 388:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2299
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 389:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2304
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2309
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2313
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 412:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2345
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2351
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2355
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 415:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2361
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 416:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2365
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2371
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2377
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 419:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2385
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 420:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2390
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2398
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2402
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2408
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2412
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2417
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2423
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2427
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2431
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2436
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2440
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2444
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2448
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2452
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2456
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2460
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2464
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2468
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2472
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2476
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2480
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2490
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2494
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2498
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2502
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2506
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2510
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2514
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2524
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2530
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2534
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2540
		{
			yyVAL.str = ""
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2544
		{
			yyVAL.str = "extended "
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2550
		{
			yyVAL.str = ""
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2554
		{
			yyVAL.str = "full "
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2560
		{
			yyVAL.str = ""
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2564
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2568
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2574
		{
			yyVAL.showFilter = nil
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2578
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2582
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2588
		{
			yyVAL.str = ""
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2592
		{
			yyVAL.str = SessionStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2596
		{
			yyVAL.str = GlobalStr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2602
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2606
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2612
		{
			yyVAL.statement = &Begin{}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2616
		{
			yyVAL.statement = &Begin{}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2622
		{
			yyVAL.statement = &Commit{}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2628
		{
			yyVAL.statement = &Rollback{}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2634
		{
			yyVAL.statement = &OtherRead{}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2638
		{
			yyVAL.statement = &OtherRead{}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2642
		{
			yyVAL.statement = &OtherRead{}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2646
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2650
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2655
		{
			setAllowComments(yylex, true)
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2659
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2665
		{
			yyVAL.bytes2 = nil
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2669
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2675
		{
			yyVAL.str = UnionStr
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2679
		{
			yyVAL.str = UnionAllStr
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2683
		{
			yyVAL.str = UnionDistinctStr
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2688
		{
			yyVAL.str = ""
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2692
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2696
		{
			yyVAL.str = SQLCacheStr
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2701
		{
			yyVAL.str = ""
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2705
		{
			yyVAL.str = DistinctStr
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2710
		{
			yyVAL.str = ""
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2714
		{
			yyVAL.str = StraightJoinHint
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2719
		{
			yyVAL.selectExprs = nil
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2723
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2729
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2733
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2739
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2743
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2747
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 496:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2751
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2756
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2760
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2764
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2771
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2776
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2780
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2786
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2790
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2800
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2804
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2808
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2813
		{
			yyVAL.strs = []string{}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2817
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2823
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2827
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2833
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2837
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2841
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2845
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2849
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2853
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2859
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 522:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2863
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2869
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2874
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2878
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2884
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2888
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2901
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2905
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2909
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2913
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2919
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2921
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2925
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2927
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2931
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2933
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2936
		{
			yyVAL.empty = struct{}{}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2938
		{
			yyVAL.empty = struct{}{}
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2941
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2945
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2949
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2956
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2962
		{
			yyVAL.str = JoinStr
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2966
		{
			yyVAL.str = JoinStr
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2970
		{
			yyVAL.str = JoinStr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2976
		{
			yyVAL.str = StraightJoinStr
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2982
		{
			yyVAL.str = LeftJoinStr
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2986
		{
			yyVAL.str = LeftJoinStr
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2990
		{
			yyVAL.str = RightJoinStr
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2994
		{
			yyVAL.str = RightJoinStr
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3000
		{
			yyVAL.str = NaturalJoinStr
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3004
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3014
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3018
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3024
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3028
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3033
		{
			yyVAL.indexHints = nil
		}
	case 560:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3037
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 561:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3041
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 562:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3045
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3050
		{
			yyVAL.expr = nil
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3054
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3059
		{
			yyVAL.columns = nil
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3063
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3069
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3073
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3077
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3081
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3085
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3089
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3093
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3099
		{
			yyVAL.str = ""
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3103
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3109
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3113
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3119
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3123
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3127
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3131
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 582:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3135
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3139
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3143
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3147
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 586:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3151
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3155
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3161
		{
			yyVAL.str = IsNullStr
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3165
		{
			yyVAL.str = IsNotNullStr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3169
		{
			yyVAL.str = IsTrueStr
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3173
		{
			yyVAL.str = IsNotTrueStr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3177
		{
			yyVAL.str = IsFalseStr
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3181
		{
			yyVAL.str = IsNotFalseStr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3187
		{
			yyVAL.str = EqualStr
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3191
		{
			yyVAL.str = LessThanStr
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3195
		{
			yyVAL.str = GreaterThanStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3199
		{
			yyVAL.str = LessEqualStr
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3203
		{
			yyVAL.str = GreaterEqualStr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3207
		{
			yyVAL.str = NotEqualStr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3211
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3216
		{
			yyVAL.expr = nil
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3220
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3226
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3230
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3234
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3240
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3246
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3250
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3256
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3260
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3264
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3268
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3272
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3276
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3280
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3284
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3288
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3292
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3296
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3300
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3304
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3308
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3312
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3316
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3320
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3324
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3328
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3332
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3336
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3340
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3344
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3348
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3356
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3370
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3374
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3378
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3386
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3400
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3404
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 644:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3408
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3418
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3422
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 647:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3426
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 648:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3430
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 649:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3434
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 650:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3438
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 651:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3442
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 652:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3446
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 653:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3450
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 654:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3454
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 655:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3458
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 656:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3462
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 657:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3466
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 658:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3470
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3474
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3484
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3488
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3492
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3496
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3501
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3506
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3511
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3516
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3520
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3534
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3538
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3542
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3546
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3552
		{
			yyVAL.str = ""
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3556
		{
			yyVAL.str = BooleanModeStr
		}
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3560
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 678:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3564
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3568
		{
			yyVAL.str = QueryExpansionStr
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3574
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3578
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3584
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3588
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3592
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3596
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3600
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3604
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3610
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3614
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3618
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3622
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3626
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3630
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3634
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3638
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3644
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3648
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3652
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3656
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3660
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3664
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3668
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3673
		{
			yyVAL.expr = nil
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3677
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3682
		{
			yyVAL.str = string("")
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3686
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3692
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3696
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3702
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3707
		{
			yyVAL.expr = nil
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3711
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3717
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3721
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 714:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3725
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3731
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3737
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3741
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3745
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3749
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3753
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3757
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3761
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3765
		{
			yyVAL.expr = &NullVal{}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3771
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3780
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3784
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3789
		{
			yyVAL.exprs = nil
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3793
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3798
		{
			yyVAL.expr = nil
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3802
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3807
		{
			yyVAL.orderBy = nil
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3811
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3817
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3821
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3827
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3832
		{
			yyVAL.str = AscScr
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3836
		{
			yyVAL.str = AscScr
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3840
		{
			yyVAL.str = DescScr
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3845
		{
			yyVAL.limit = nil
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3849
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3853
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 742:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3857
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3862
		{
			yyVAL.str = ""
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3866
		{
			yyVAL.str = ForUpdateStr
		}
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3870
		{
			yyVAL.str = ShareModeStr
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3883
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3887
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3891
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 749:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3896
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3900
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 751:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3904
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3911
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3915
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3919
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 755:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3923
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3928
		{
			yyVAL.updateExprs = nil
		}
	case 757:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3932
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3938
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3942
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3948
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3952
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3958
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3964
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3974
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3978
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3984
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3990
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3994
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4000
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4004
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4008
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 772:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4013
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4017
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4024
		{
			yyVAL.bytes = []byte("charset")
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4031
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4035
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4039
		{
			yyVAL.expr = &Default{}
		}
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4048
		{
			yyVAL.byt = 0
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4050
		{
			yyVAL.byt = 1
		}
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4053
		{
			yyVAL.empty = struct{}{}
		}
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4055
		{
			yyVAL.empty = struct{}{}
		}
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4058
		{
			yyVAL.str = ""
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4060
		{
			yyVAL.str = IgnoreStr
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4064
		{
			yyVAL.empty = struct{}{}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4066
		{
			yyVAL.empty = struct{}{}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4068
		{
			yyVAL.empty = struct{}{}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4070
		{
			yyVAL.empty = struct{}{}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4072
		{
			yyVAL.empty = struct{}{}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4074
		{
			yyVAL.empty = struct{}{}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4076
		{
			yyVAL.empty = struct{}{}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4078
		{
			yyVAL.empty = struct{}{}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4080
		{
			yyVAL.empty = struct{}{}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4082
		{
			yyVAL.empty = struct{}{}
		}
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4085
		{
			yyVAL.empty = struct{}{}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4087
		{
			yyVAL.empty = struct{}{}
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4089
		{
			yyVAL.empty = struct{}{}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4093
		{
			yyVAL.empty = struct{}{}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4095
		{
			yyVAL.empty = struct{}{}
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4099
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4103
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4110
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4116
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4120
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4127
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4133
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4137
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4141
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4147
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4151
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4155
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4437
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4446
		{
			decNesting(yylex)
		}
	case 1075:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4451
		{
			forceEOF(yylex)
		}
	case 1076:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4456
		{
			forceEOF(yylex)
		}
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4460
		{
			forceEOF(yylex)
		}
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4464
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
