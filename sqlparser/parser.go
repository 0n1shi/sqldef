// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const UNIQUE = 57457
const KEY = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const RESTRICT = 57478
const CASCADE = 57479
const NO = 57480
const ACTION = 57481
const BEGIN = 57482
const START = 57483
const TRANSACTION = 57484
const COMMIT = 57485
const ROLLBACK = 57486
const BIT = 57487
const TINYINT = 57488
const SMALLINT = 57489
const MEDIUMINT = 57490
const INT = 57491
const INTEGER = 57492
const SERIAL = 57493
const BIGINT = 57494
const BIGSERIAL = 57495
const INTNUM = 57496
const REAL = 57497
const DOUBLE = 57498
const FLOAT_TYPE = 57499
const DECIMAL = 57500
const NUMERIC = 57501
const TIME = 57502
const TIMESTAMP = 57503
const DATETIME = 57504
const YEAR = 57505
const CHAR = 57506
const VARCHAR = 57507
const VARYING = 57508
const BOOL = 57509
const CHARACTER = 57510
const VARBINARY = 57511
const NCHAR = 57512
const UUID = 57513
const TEXT = 57514
const TINYTEXT = 57515
const MEDIUMTEXT = 57516
const LONGTEXT = 57517
const BLOB = 57518
const TINYBLOB = 57519
const MEDIUMBLOB = 57520
const LONGBLOB = 57521
const JSON = 57522
const ENUM = 57523
const GEOMETRY = 57524
const POINT = 57525
const LINESTRING = 57526
const POLYGON = 57527
const GEOMETRYCOLLECTION = 57528
const MULTIPOINT = 57529
const MULTILINESTRING = 57530
const MULTIPOLYGON = 57531
const NULLX = 57532
const AUTO_INCREMENT = 57533
const APPROXNUM = 57534
const SIGNED = 57535
const UNSIGNED = 57536
const ZEROFILL = 57537
const DATABASES = 57538
const TABLES = 57539
const VITESS_KEYSPACES = 57540
const VITESS_SHARDS = 57541
const VITESS_TABLETS = 57542
const VSCHEMA_TABLES = 57543
const EXTENDED = 57544
const FULL = 57545
const PROCESSLIST = 57546
const NAMES = 57547
const CHARSET = 57548
const GLOBAL = 57549
const SESSION = 57550
const ISOLATION = 57551
const LEVEL = 57552
const READ = 57553
const WRITE = 57554
const ONLY = 57555
const REPEATABLE = 57556
const COMMITTED = 57557
const UNCOMMITTED = 57558
const SERIALIZABLE = 57559
const CURRENT_TIMESTAMP = 57560
const DATABASE = 57561
const CURRENT_DATE = 57562
const CURRENT_TIME = 57563
const LOCALTIME = 57564
const LOCALTIMESTAMP = 57565
const UTC_DATE = 57566
const UTC_TIME = 57567
const UTC_TIMESTAMP = 57568
const REPLACE = 57569
const CONVERT = 57570
const CAST = 57571
const SUBSTR = 57572
const SUBSTRING = 57573
const GROUP_CONCAT = 57574
const SEPARATOR = 57575
const MATCH = 57576
const AGAINST = 57577
const BOOLEAN = 57578
const LANGUAGE = 57579
const WITH = 57580
const PARSER = 57581
const QUERY = 57582
const EXPANSION = 57583
const UNUSED = 57584

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	151, 300,
	152, 300,
	-2, 290,
	-1, 243,
	108, 619,
	-2, 615,
	-1, 244,
	108, 620,
	-2, 616,
	-1, 313,
	79, 785,
	-2, 58,
	-1, 314,
	79, 745,
	-2, 59,
	-1, 319,
	79, 729,
	-2, 586,
	-1, 321,
	79, 766,
	-2, 588,
	-1, 584,
	51, 41,
	53, 41,
	-2, 43,
	-1, 726,
	108, 622,
	-2, 618,
	-1, 943,
	5, 28,
	-2, 432,
	-1, 968,
	5, 27,
	-2, 561,
	-1, 1222,
	5, 28,
	-2, 562,
	-1, 1275,
	5, 27,
	-2, 564,
	-1, 1347,
	5, 28,
	-2, 565,
}

const yyPrivate = 57344

const yyLast = 11348

var yyAct = [...]int{

	244, 1337, 884, 1353, 663, 1239, 1228, 788, 531, 1124,
	806, 248, 1286, 1152, 1010, 273, 1125, 864, 828, 222,
	1044, 1121, 578, 878, 530, 3, 824, 971, 834, 827,
	305, 53, 789, 250, 576, 87, 216, 987, 87, 241,
	751, 66, 1098, 451, 761, 1035, 935, 594, 777, 758,
	976, 728, 464, 470, 419, 593, 580, 841, 874, 318,
	785, 312, 87, 87, 323, 84, 300, 476, 87, 565,
	323, 246, 221, 299, 231, 484, 87, 309, 87, 917,
	217, 218, 219, 220, 87, 307, 545, 52, 237, 901,
	1383, 1365, 1380, 308, 1345, 303, 298, 1287, 422, 1328,
	1377, 885, 900, 1364, 235, 1116, 430, 315, 431, 1344,
	1289, 1216, 423, 1160, 438, 1316, 497, 496, 506, 507,
	499, 500, 501, 502, 503, 504, 505, 498, 444, 905,
	508, 1147, 1148, 68, 82, 78, 79, 80, 899, 57,
	1013, 1014, 1015, 595, 995, 596, 1146, 994, 1018, 1016,
	996, 820, 821, 819, 459, 760, 693, 1099, 1024, 855,
	1264, 856, 865, 694, 59, 60, 61, 62, 63, 1205,
	1203, 857, 847, 1063, 215, 1294, 1379, 1288, 455, 456,
	1375, 71, 72, 1338, 67, 1076, 896, 893, 894, 1101,
	892, 446, 786, 448, 848, 87, 73, 1242, 1180, 323,
	323, 323, 323, 1339, 323, 1008, 1159, 1006, 853, 843,
	845, 323, 1181, 69, 1272, 846, 1307, 903, 906, 1245,
	445, 447, 1021, 844, 1020, 440, 1003, 1103, 1373, 1107,
	1189, 1102, 433, 1100, 426, 1073, 76, 1064, 323, 1105,
	807, 809, 1066, 1059, 1060, 672, 1067, 1062, 1061, 1104,
	1069, 1065, 473, 81, 75, 662, 76, 472, 986, 898,
	985, 1068, 1106, 1108, 984, 421, 429, 1058, 850, 843,
	1053, 843, 194, 77, 1077, 1321, 852, 851, 1225, 518,
	1085, 1317, 897, 844, 951, 844, 520, 521, 929, 700,
	865, 522, 523, 524, 525, 526, 527, 528, 87, 488,
	70, 1290, 860, 439, 825, 87, 87, 87, 508, 443,
	1166, 323, 467, 471, 808, 1343, 697, 323, 1017, 902,
	483, 1240, 1241, 1243, 498, 703, 704, 508, 560, 489,
	912, 1326, 1074, 904, 1072, 735, 1081, 584, 303, 1054,
	1050, 420, 1178, 1055, 1052, 1051, 1075, 73, 974, 733,
	734, 732, 849, 481, 315, 597, 1118, 778, 1056, 958,
	1167, 666, 778, 532, 1049, 926, 927, 928, 474, 483,
	482, 481, 543, 547, 548, 549, 550, 551, 552, 553,
	1293, 501, 502, 503, 504, 505, 498, 483, 591, 508,
	478, 948, 585, 497, 496, 506, 507, 499, 500, 501,
	502, 503, 504, 505, 498, 843, 1012, 508, 913, 1327,
	837, 1080, 842, 272, 838, 839, 50, 1349, 840, 844,
	482, 481, 323, 323, 425, 1251, 731, 1120, 1250, 87,
	87, 323, 947, 87, 946, 432, 87, 483, 482, 481,
	87, 936, 323, 323, 323, 323, 323, 323, 323, 323,
	482, 481, 699, 74, 1039, 483, 323, 323, 1038, 668,
	669, 87, 1025, 673, 482, 481, 676, 483, 499, 500,
	501, 502, 503, 504, 505, 498, 323, 317, 508, 1324,
	87, 483, 752, 424, 753, 1271, 323, 698, 718, 720,
	721, 695, 705, 719, 1248, 1191, 427, 428, 1036, 681,
	1022, 21, 1158, 482, 481, 1367, 1387, 729, 1279, 1376,
	714, 1367, 1366, 463, 297, 1157, 435, 436, 437, 679,
	483, 1360, 463, 1279, 1357, 730, 1279, 1356, 1300, 323,
	727, 1156, 725, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 726, 707,
	770, 773, 1279, 1355, 1279, 1335, 779, 226, 765, 1009,
	87, 722, 997, 87, 87, 87, 87, 87, 724, 887,
	715, 716, 754, 790, 678, 87, 1279, 1301, 87, 1279,
	463, 1299, 87, 1279, 1280, 1237, 1236, 87, 87, 677,
	787, 323, 755, 756, 1143, 463, 303, 303, 303, 303,
	303, 667, 765, 665, 323, 782, 1224, 463, 1161, 775,
	441, 303, 317, 317, 317, 317, 434, 317, 815, 420,
	303, 814, 532, 972, 317, 768, 769, 1173, 1172, 1122,
	792, 793, 972, 795, 315, 813, 791, 587, 811, 794,
	866, 867, 868, 803, 763, 812, 23, 829, 817, 1169,
	1170, 486, 816, 1220, 567, 570, 571, 572, 568, 832,
	569, 573, 23, 87, 977, 978, 323, 54, 323, 1169,
	1168, 87, 1274, 87, 941, 463, 87, 323, 562, 463,
	763, 463, 973, 880, 973, 966, 823, 1088, 967, 562,
	766, 767, 50, 883, 1212, 463, 774, 604, 603, 1177,
	1171, 907, 998, 908, 953, 941, 909, 588, 50, 950,
	781, 23, 783, 784, 50, 876, 877, 263, 262, 265,
	266, 267, 268, 562, 317, 972, 264, 269, 561, 941,
	599, 497, 496, 506, 507, 499, 500, 501, 502, 503,
	504, 505, 498, 818, 725, 508, 952, 589, 729, 587,
	941, 949, 562, 1175, 1174, 918, 590, 50, 919, 701,
	726, 567, 570, 571, 572, 568, 730, 569, 573, 1381,
	1362, 1331, 1304, 932, 933, 934, 1303, 1302, 858, 859,
	861, 862, 863, 228, 931, 1258, 857, 915, 916, 879,
	471, 1137, 1001, 977, 978, 664, 871, 872, 873, 496,
	506, 507, 499, 500, 501, 502, 503, 504, 505, 498,
	968, 323, 508, 875, 87, 506, 507, 499, 500, 501,
	502, 503, 504, 505, 498, 957, 870, 508, 323, 50,
	881, 882, 983, 869, 65, 660, 317, 1295, 1292, 1176,
	989, 1122, 991, 323, 317, 981, 999, 303, 990, 1002,
	980, 675, 942, 460, 713, 317, 317, 317, 317, 317,
	317, 317, 317, 982, 797, 796, 992, 959, 925, 317,
	317, 829, 914, 800, 1372, 798, 1026, 1027, 801, 1029,
	799, 1363, 87, 323, 323, 802, 323, 571, 572, 709,
	1084, 1030, 477, 1032, 1033, 1034, 1004, 1005, 1007, 486,
	232, 233, 317, 1218, 1370, 475, 924, 923, 465, 1031,
	323, 602, 1040, 87, 87, 940, 1037, 442, 1259, 466,
	889, 87, 674, 575, 229, 230, 477, 922, 1046, 1045,
	323, 955, 223, 1310, 1047, 921, 224, 54, 1309, 1262,
	973, 479, 757, 1155, 1154, 1330, 1329, 1318, 56, 1019,
	696, 1086, 771, 771, 58, 1048, 462, 1179, 771, 586,
	51, 1, 1057, 886, 1043, 895, 1336, 1285, 1151, 835,
	323, 323, 826, 1090, 1123, 771, 1094, 1095, 790, 1092,
	1091, 418, 64, 1126, 790, 1325, 1097, 1117, 1109, 1111,
	1112, 1110, 1114, 1115, 1128, 1113, 836, 833, 605, 323,
	1023, 323, 323, 1132, 317, 1133, 854, 611, 1131, 1093,
	609, 726, 610, 607, 613, 612, 608, 317, 1145, 1150,
	606, 1144, 1028, 202, 310, 574, 598, 480, 1149, 497,
	496, 506, 507, 499, 500, 501, 502, 503, 504, 505,
	498, 1071, 829, 508, 829, 1070, 1164, 1119, 891, 1079,
	323, 692, 911, 1162, 1163, 458, 1165, 204, 516, 323,
	920, 993, 1134, 1135, 316, 1129, 1136, 702, 469, 1138,
	1308, 87, 1261, 956, 542, 776, 249, 323, 717, 317,
	261, 317, 258, 260, 259, 1182, 323, 708, 965, 87,
	317, 490, 247, 239, 1184, 302, 558, 566, 564, 563,
	979, 1186, 975, 301, 1087, 1215, 1190, 1315, 1187, 712,
	25, 55, 234, 19, 317, 1193, 18, 17, 20, 16,
	15, 14, 303, 1194, 29, 13, 12, 1201, 11, 1090,
	10, 9, 8, 1196, 7, 6, 5, 4, 323, 225,
	323, 323, 323, 87, 323, 1219, 1230, 1231, 1232, 22,
	323, 2, 1227, 0, 0, 0, 0, 0, 0, 0,
	0, 1244, 0, 0, 1235, 1233, 0, 0, 999, 0,
	1192, 0, 0, 0, 0, 323, 323, 87, 323, 323,
	323, 1252, 0, 0, 0, 0, 1247, 0, 1249, 0,
	323, 1246, 0, 829, 0, 0, 0, 1256, 1255, 0,
	0, 0, 0, 0, 0, 0, 0, 1254, 0, 1217,
	0, 0, 0, 0, 0, 0, 532, 1263, 0, 0,
	0, 1045, 829, 0, 988, 323, 323, 0, 0, 0,
	0, 0, 0, 274, 47, 0, 1126, 1273, 323, 0,
	0, 317, 0, 0, 1284, 0, 323, 0, 1275, 1265,
	1266, 1291, 1267, 1268, 1269, 0, 1011, 0, 0, 323,
	1296, 1198, 1199, 0, 1200, 1305, 0, 1202, 0, 1204,
	0, 0, 0, 0, 1297, 0, 1298, 0, 0, 0,
	323, 47, 0, 0, 1319, 0, 0, 0, 0, 227,
	1126, 0, 0, 0, 0, 304, 1041, 317, 1323, 317,
	0, 1320, 0, 323, 323, 323, 0, 1209, 463, 1332,
	1333, 1334, 0, 0, 0, 1238, 0, 0, 0, 1341,
	0, 0, 323, 317, 0, 0, 1346, 0, 0, 323,
	790, 0, 323, 0, 0, 1351, 1352, 0, 0, 323,
	1358, 0, 0, 317, 497, 496, 506, 507, 499, 500,
	501, 502, 503, 504, 505, 498, 0, 0, 508, 0,
	449, 1368, 1369, 323, 0, 317, 0, 0, 323, 1371,
	0, 0, 0, 0, 87, 0, 0, 1213, 0, 0,
	771, 0, 323, 1130, 988, 1384, 771, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 532,
	0, 0, 0, 0, 1378, 0, 0, 468, 0, 0,
	0, 0, 317, 0, 317, 1153, 0, 0, 0, 0,
	0, 0, 1385, 0, 0, 0, 0, 0, 0, 0,
	706, 0, 450, 450, 450, 450, 0, 450, 0, 0,
	0, 0, 85, 0, 450, 214, 0, 0, 497, 496,
	506, 507, 499, 500, 501, 502, 503, 504, 505, 498,
	200, 47, 508, 1183, 0, 0, 0, 238, 0, 85,
	85, 0, 1185, 0, 0, 85, 517, 0, 0, 519,
	0, 0, 0, 85, 210, 85, 0, 762, 764, 0,
	1188, 85, 0, 0, 0, 0, 0, 0, 0, 317,
	0, 0, 0, 780, 0, 0, 529, 0, 533, 534,
	535, 536, 537, 538, 539, 540, 541, 0, 544, 546,
	546, 546, 546, 546, 546, 546, 546, 554, 555, 556,
	557, 0, 0, 805, 195, 0, 0, 0, 577, 0,
	197, 0, 0, 0, 0, 0, 0, 203, 199, 0,
	0, 1229, 0, 1229, 1229, 1229, 0, 1234, 0, 0,
	452, 453, 454, 317, 457, 0, 0, 0, 0, 0,
	0, 461, 0, 0, 0, 0, 201, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 1229, 1253,
	0, 317, 317, 1257, 0, 0, 0, 0, 0, 492,
	0, 495, 85, 1260, 0, 0, 0, 509, 510, 511,
	512, 513, 514, 515, 196, 493, 494, 491, 497, 496,
	506, 507, 499, 500, 501, 502, 503, 504, 505, 498,
	0, 0, 508, 0, 0, 0, 0, 0, 1277, 1278,
	0, 0, 198, 0, 206, 207, 208, 209, 213, 0,
	0, 1153, 0, 212, 211, 0, 450, 0, 0, 1011,
	0, 0, 0, 0, 450, 0, 0, 0, 0, 0,
	0, 0, 1229, 0, 0, 450, 450, 450, 450, 450,
	450, 450, 450, 0, 0, 0, 0, 0, 0, 450,
	450, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 938, 85, 582, 85, 939, 1229, 1229, 1229, 463,
	0, 0, 943, 944, 945, 0, 0, 0, 0, 0,
	0, 954, 771, 0, 0, 1348, 960, 0, 961, 962,
	963, 964, 1350, 0, 0, 1354, 0, 0, 0, 0,
	1210, 0, 1361, 47, 0, 497, 496, 506, 507, 499,
	500, 501, 502, 503, 504, 505, 498, 533, 0, 508,
	0, 0, 0, 0, 0, 0, 1229, 0, 0, 0,
	0, 1374, 0, 661, 0, 0, 0, 0, 0, 0,
	0, 671, 0, 0, 0, 1354, 304, 304, 304, 304,
	304, 0, 682, 683, 684, 685, 686, 687, 688, 689,
	0, 577, 0, 810, 0, 0, 690, 691, 0, 0,
	304, 497, 496, 506, 507, 499, 500, 501, 502, 503,
	504, 505, 498, 937, 0, 508, 85, 85, 0, 0,
	85, 0, 0, 85, 0, 0, 0, 680, 0, 0,
	0, 0, 0, 497, 496, 506, 507, 499, 500, 501,
	502, 503, 504, 505, 498, 0, 0, 508, 85, 497,
	496, 506, 507, 499, 500, 501, 502, 503, 504, 505,
	498, 0, 0, 508, 0, 0, 0, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 680, 1096, 0, 450,
	0, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 238, 0, 0,
	0, 0, 238, 238, 1142, 0, 772, 772, 238, 0,
	0, 0, 772, 0, 0, 0, 0, 0, 0, 930,
	0, 0, 238, 238, 238, 238, 0, 85, 0, 772,
	85, 85, 85, 85, 85, 0, 0, 0, 0, 0,
	0, 0, 804, 0, 0, 85, 0, 0, 0, 582,
	0, 0, 0, 0, 85, 85, 0, 0, 23, 24,
	48, 26, 27, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 42, 0, 969,
	970, 28, 0, 0, 0, 0, 888, 0, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 910, 0, 0,
	37, 0, 0, 0, 50, 0, 0, 304, 1195, 0,
	0, 0, 0, 0, 0, 1197, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1206, 1207, 1208, 0,
	85, 1211, 0, 0, 0, 0, 0, 0, 85, 0,
	85, 0, 0, 85, 1221, 1222, 1223, 0, 1226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 30, 31, 33, 32, 35, 680, 0,
	0, 0, 0, 0, 0, 0, 0, 450, 0, 0,
	238, 0, 0, 0, 0, 0, 36, 43, 44, 0,
	0, 45, 46, 34, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 450, 0, 0, 0, 0, 0, 38,
	39, 0, 40, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 238, 0, 0,
	0, 0, 1270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 238, 0, 0, 0, 1281, 1282, 1283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1127, 0, 47, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1139, 1140,
	1141, 85, 1311, 1312, 1313, 1314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 1042, 0, 0, 0, 632, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 1342, 0, 0, 0, 0, 1347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 1359, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 1083, 304, 0, 619, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 238, 0,
	0, 0, 1388, 1389, 0, 0, 0, 0, 0, 238,
	1214, 0, 0, 0, 0, 0, 633, 0, 0, 680,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 772, 0, 0, 0, 0, 0,
	772, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	0, 655, 656, 657, 658, 659, 634, 635, 636, 637,
	616, 618, 0, 614, 617, 620, 0, 630, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 631, 638, 639,
	640, 641, 642, 643, 644, 645, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1127, 0, 0, 1276, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 615, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1306, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1127, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1382, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 407,
	397, 0, 368, 409, 345, 360, 417, 361, 362, 390,
	331, 376, 141, 357, 0, 348, 326, 354, 327, 346,
	370, 109, 344, 399, 379, 121, 415, 124, 384, 0,
	159, 133, 0, 0, 372, 401, 374, 395, 367, 391,
	336, 383, 410, 358, 387, 411, 0, 0, 0, 322,
	0, 830, 831, 0, 0, 0, 0, 0, 101, 0,
	386, 406, 356, 389, 325, 385, 772, 329, 332, 416,
	404, 351, 352, 1000, 0, 0, 0, 0, 0, 0,
	371, 375, 392, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 0, 382, 0, 0, 0, 333, 330,
	0, 369, 0, 0, 0, 335, 0, 350, 393, 0,
	324, 396, 402, 366, 183, 405, 364, 363, 146, 0,
	104, 85, 162, 113, 359, 122, 408, 373, 400, 347,
	355, 105, 353, 152, 142, 174, 381, 143, 151, 125,
	166, 147, 173, 184, 185, 164, 182, 154, 97, 139,
	88, 90, 163, 172, 102, 155, 93, 170, 161, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 167, 168, 106, 192, 98, 180, 181, 95, 99,
	179, 138, 178, 165, 171, 132, 129, 94, 169, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 328, 0, 160, 176, 193, 343, 403, 186,
	187, 188, 189, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 191, 388, 153, 103, 175, 158, 339,
	342, 337, 338, 377, 378, 412, 413, 414, 394, 334,
	0, 340, 341, 0, 398, 380, 89, 96, 123, 190,
	0, 148, 111, 177, 407, 397, 0, 368, 409, 345,
	360, 417, 361, 362, 390, 331, 376, 141, 357, 0,
	348, 326, 354, 327, 346, 370, 109, 344, 399, 379,
	121, 415, 124, 384, 0, 159, 133, 0, 0, 372,
	401, 374, 395, 367, 391, 336, 383, 410, 358, 387,
	411, 0, 0, 0, 322, 0, 830, 831, 0, 0,
	0, 0, 0, 101, 0, 386, 406, 356, 389, 325,
	385, 0, 329, 332, 416, 404, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 371, 375, 392, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 0, 382,
	0, 0, 0, 333, 330, 0, 369, 0, 0, 0,
	335, 0, 350, 393, 0, 324, 396, 402, 366, 183,
	405, 364, 363, 146, 0, 104, 0, 162, 113, 359,
	122, 408, 373, 400, 347, 355, 105, 353, 152, 142,
	174, 381, 143, 151, 125, 166, 147, 173, 184, 185,
	164, 182, 154, 97, 139, 88, 90, 163, 172, 102,
	155, 93, 170, 161, 131, 117, 118, 157, 91, 92,
	0, 150, 108, 112, 107, 140, 167, 168, 106, 192,
	98, 180, 181, 95, 99, 179, 138, 178, 165, 171,
	132, 129, 94, 169, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 328, 0, 160,
	176, 193, 343, 403, 186, 187, 188, 189, 0, 0,
	0, 137, 100, 116, 156, 119, 126, 149, 191, 388,
	153, 103, 175, 158, 339, 342, 337, 338, 377, 378,
	412, 413, 414, 394, 334, 0, 340, 341, 0, 398,
	380, 89, 96, 123, 190, 0, 148, 111, 177, 407,
	397, 0, 368, 409, 345, 360, 417, 361, 362, 390,
	331, 376, 141, 357, 0, 348, 326, 354, 327, 346,
	370, 109, 344, 399, 379, 121, 415, 124, 384, 0,
	159, 133, 0, 0, 372, 401, 374, 395, 367, 391,
	336, 383, 410, 358, 387, 411, 0, 0, 0, 322,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	386, 406, 356, 389, 325, 385, 0, 329, 332, 416,
	404, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	371, 375, 392, 365, 0, 0, 0, 0, 0, 0,
	1089, 0, 349, 0, 382, 0, 0, 0, 333, 330,
	0, 369, 0, 0, 0, 335, 0, 350, 393, 0,
	324, 396, 402, 366, 183, 405, 364, 363, 146, 0,
	104, 0, 162, 113, 359, 122, 408, 373, 400, 347,
	355, 105, 353, 152, 142, 174, 381, 143, 151, 125,
	166, 147, 173, 184, 185, 164, 182, 154, 97, 139,
	88, 90, 163, 172, 102, 155, 93, 170, 161, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 167, 168, 106, 192, 98, 180, 181, 95, 99,
	179, 138, 178, 165, 171, 132, 129, 94, 169, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 328, 0, 160, 176, 193, 343, 403, 186,
	187, 188, 189, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 191, 388, 153, 103, 175, 158, 339,
	342, 337, 338, 377, 378, 412, 413, 414, 394, 334,
	0, 340, 341, 0, 398, 380, 89, 96, 123, 190,
	0, 148, 111, 177, 407, 397, 0, 368, 409, 345,
	360, 417, 361, 362, 390, 331, 376, 141, 357, 0,
	348, 326, 354, 327, 346, 370, 109, 344, 399, 379,
	121, 415, 124, 384, 0, 159, 133, 0, 0, 372,
	401, 374, 395, 367, 391, 336, 383, 410, 358, 387,
	411, 50, 0, 0, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 386, 406, 356, 389, 325,
	385, 0, 329, 332, 416, 404, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 371, 375, 392, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 0, 382,
	0, 0, 0, 333, 330, 0, 369, 0, 0, 0,
	335, 0, 350, 393, 0, 324, 396, 402, 366, 183,
	405, 364, 363, 146, 0, 104, 0, 162, 113, 359,
	122, 408, 373, 400, 347, 355, 105, 353, 152, 142,
	174, 381, 143, 151, 125, 166, 147, 173, 184, 185,
	164, 182, 154, 97, 139, 88, 90, 163, 172, 102,
	155, 93, 170, 161, 131, 117, 118, 157, 91, 92,
	0, 150, 108, 112, 107, 140, 167, 168, 106, 192,
	98, 180, 181, 95, 99, 179, 138, 178, 165, 171,
	132, 129, 94, 169, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 328, 0, 160,
	176, 193, 343, 403, 186, 187, 188, 189, 0, 0,
	0, 137, 100, 116, 156, 119, 126, 149, 191, 388,
	153, 103, 175, 158, 339, 342, 337, 338, 377, 378,
	412, 413, 414, 394, 334, 0, 340, 341, 0, 398,
	380, 89, 96, 123, 190, 0, 148, 111, 177, 407,
	397, 0, 368, 409, 345, 360, 417, 361, 362, 390,
	331, 376, 141, 357, 0, 348, 326, 354, 327, 346,
	370, 109, 344, 399, 379, 121, 415, 124, 384, 0,
	159, 133, 0, 0, 372, 401, 374, 395, 367, 391,
	336, 383, 410, 358, 387, 411, 0, 0, 0, 243,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	386, 406, 356, 389, 325, 385, 0, 329, 332, 416,
	404, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	371, 375, 392, 365, 0, 0, 0, 0, 0, 0,
	723, 0, 349, 0, 382, 0, 0, 0, 333, 330,
	0, 369, 0, 0, 0, 335, 0, 350, 393, 0,
	324, 396, 402, 366, 183, 405, 364, 363, 146, 0,
	104, 0, 162, 113, 359, 122, 408, 373, 400, 347,
	355, 105, 353, 152, 142, 174, 381, 143, 151, 125,
	166, 147, 173, 184, 185, 164, 182, 154, 97, 139,
	88, 90, 163, 172, 102, 155, 93, 170, 161, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 167, 168, 106, 192, 98, 180, 181, 95, 99,
	179, 138, 178, 165, 171, 132, 129, 94, 169, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 328, 0, 160, 176, 193, 343, 403, 186,
	187, 188, 189, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 191, 388, 153, 103, 175, 158, 339,
	342, 337, 338, 377, 378, 412, 413, 414, 394, 334,
	0, 340, 341, 0, 398, 380, 89, 96, 123, 190,
	0, 148, 111, 177, 407, 397, 0, 368, 409, 345,
	360, 417, 361, 362, 390, 331, 376, 141, 357, 0,
	348, 326, 354, 327, 346, 370, 109, 344, 399, 379,
	121, 415, 124, 384, 0, 159, 133, 0, 0, 372,
	401, 374, 395, 367, 391, 336, 383, 410, 358, 387,
	411, 0, 0, 0, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 386, 406, 356, 389, 325,
	385, 0, 329, 332, 416, 404, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 371, 375, 392, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 0, 382,
	0, 0, 0, 333, 330, 0, 369, 0, 0, 0,
	335, 0, 350, 393, 0, 324, 396, 402, 366, 183,
	405, 364, 363, 146, 0, 104, 0, 162, 113, 359,
	122, 408, 373, 400, 347, 355, 105, 353, 152, 142,
	174, 381, 143, 151, 125, 166, 147, 173, 184, 185,
	164, 182, 154, 97, 139, 88, 90, 163, 172, 102,
	155, 93, 170, 161, 131, 117, 118, 157, 91, 92,
	0, 150, 108, 112, 107, 140, 167, 168, 106, 192,
	98, 180, 181, 95, 99, 179, 138, 178, 165, 171,
	132, 129, 94, 169, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 328, 0, 160,
	176, 193, 343, 403, 186, 187, 188, 189, 0, 0,
	0, 137, 100, 116, 156, 119, 126, 149, 191, 388,
	153, 103, 175, 158, 339, 342, 337, 338, 377, 378,
	412, 413, 414, 394, 334, 0, 340, 341, 0, 398,
	380, 89, 96, 123, 190, 0, 148, 111, 177, 407,
	397, 0, 368, 409, 345, 360, 417, 361, 362, 390,
	331, 376, 141, 357, 0, 348, 326, 354, 327, 346,
	370, 109, 344, 399, 379, 121, 415, 124, 384, 0,
	159, 133, 0, 0, 372, 401, 374, 395, 367, 391,
	336, 383, 410, 358, 387, 411, 0, 0, 0, 243,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	386, 406, 356, 389, 325, 385, 0, 329, 332, 416,
	404, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	371, 375, 392, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 0, 382, 0, 0, 0, 333, 330,
	0, 369, 0, 0, 0, 335, 0, 350, 393, 0,
	324, 396, 402, 366, 183, 405, 364, 363, 146, 0,
	104, 0, 162, 113, 359, 122, 408, 373, 400, 347,
	355, 105, 353, 152, 142, 174, 381, 143, 151, 125,
	166, 147, 173, 184, 185, 164, 182, 154, 97, 139,
	88, 90, 163, 172, 102, 155, 93, 170, 161, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 167, 168, 106, 192, 98, 180, 181, 95, 99,
	179, 138, 178, 165, 171, 132, 129, 94, 169, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 328, 0, 160, 176, 193, 343, 403, 186,
	187, 188, 189, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 191, 388, 153, 103, 175, 158, 339,
	342, 337, 338, 377, 378, 412, 413, 414, 394, 334,
	0, 340, 341, 0, 398, 380, 89, 96, 123, 190,
	0, 148, 111, 177, 407, 397, 0, 368, 409, 345,
	360, 417, 361, 362, 390, 331, 376, 141, 357, 0,
	348, 326, 354, 327, 346, 370, 109, 344, 399, 379,
	121, 415, 124, 384, 0, 159, 133, 0, 0, 372,
	401, 374, 395, 367, 391, 336, 383, 410, 358, 387,
	411, 0, 0, 0, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 386, 406, 356, 389, 325,
	385, 0, 329, 332, 416, 404, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 371, 375, 392, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 0, 382,
	0, 0, 0, 333, 330, 0, 369, 0, 0, 0,
	335, 0, 350, 393, 0, 324, 396, 402, 366, 183,
	405, 364, 363, 146, 0, 104, 0, 162, 113, 359,
	122, 408, 373, 400, 347, 355, 105, 353, 152, 142,
	174, 381, 143, 151, 125, 166, 147, 173, 184, 185,
	164, 182, 154, 97, 139, 88, 90, 163, 172, 102,
	155, 93, 170, 161, 131, 117, 118, 157, 91, 92,
	0, 150, 108, 112, 107, 140, 167, 168, 106, 192,
	98, 180, 181, 95, 320, 179, 138, 178, 165, 171,
	132, 129, 94, 169, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 328, 0, 160,
	176, 193, 343, 403, 186, 187, 188, 189, 0, 0,
	0, 321, 319, 116, 156, 119, 126, 149, 191, 388,
	153, 103, 175, 158, 339, 342, 337, 338, 377, 378,
	412, 413, 414, 394, 334, 0, 340, 341, 0, 398,
	380, 89, 96, 123, 190, 0, 148, 111, 177, 407,
	397, 0, 368, 409, 345, 360, 417, 361, 362, 390,
	331, 376, 141, 357, 0, 348, 326, 354, 327, 346,
	370, 109, 344, 399, 379, 121, 415, 124, 384, 0,
	159, 133, 0, 0, 372, 401, 374, 395, 367, 391,
	336, 383, 410, 358, 387, 411, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	386, 406, 356, 389, 325, 385, 0, 329, 332, 416,
	404, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	371, 375, 392, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 0, 382, 0, 0, 0, 333, 330,
	0, 369, 0, 0, 0, 335, 0, 350, 393, 0,
	324, 396, 402, 366, 183, 405, 364, 363, 146, 0,
	104, 0, 162, 113, 359, 122, 408, 373, 400, 347,
	355, 105, 353, 152, 142, 174, 381, 143, 151, 125,
	166, 147, 173, 184, 185, 164, 182, 154, 97, 139,
	88, 90, 163, 172, 102, 155, 93, 170, 161, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 167, 168, 106, 192, 98, 180, 181, 95, 99,
	179, 138, 178, 165, 171, 132, 129, 94, 169, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 328, 0, 160, 176, 193, 343, 403, 186,
	187, 188, 189, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 191, 388, 153, 103, 175, 158, 339,
	342, 337, 338, 377, 378, 412, 413, 414, 394, 334,
	0, 340, 341, 0, 398, 380, 89, 96, 123, 190,
	0, 148, 111, 177, 407, 397, 0, 368, 409, 345,
	360, 417, 361, 362, 390, 331, 376, 141, 357, 0,
	348, 326, 354, 327, 346, 370, 109, 344, 399, 379,
	121, 415, 124, 384, 0, 159, 133, 0, 0, 372,
	401, 374, 395, 367, 391, 336, 383, 410, 358, 387,
	411, 0, 0, 0, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 386, 406, 356, 389, 325,
	385, 0, 329, 332, 416, 404, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 371, 375, 392, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 0, 382,
	0, 0, 0, 333, 330, 0, 369, 0, 0, 0,
	335, 0, 350, 393, 0, 324, 396, 402, 366, 183,
	405, 364, 363, 146, 0, 104, 0, 162, 113, 359,
	122, 408, 373, 400, 347, 355, 105, 353, 152, 142,
	174, 381, 143, 151, 125, 166, 147, 173, 184, 185,
	164, 182, 154, 97, 139, 88, 90, 163, 592, 102,
	155, 93, 170, 161, 131, 117, 118, 157, 91, 92,
	0, 150, 108, 112, 107, 140, 167, 168, 106, 192,
	98, 180, 181, 95, 320, 179, 138, 178, 165, 171,
	132, 129, 94, 169, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 328, 0, 160,
	176, 193, 343, 403, 186, 187, 188, 189, 0, 0,
	0, 321, 319, 116, 156, 119, 126, 149, 191, 388,
	153, 103, 175, 158, 339, 342, 337, 338, 377, 378,
	412, 413, 414, 394, 334, 0, 340, 341, 0, 398,
	380, 89, 96, 123, 190, 0, 148, 111, 177, 407,
	397, 0, 368, 409, 345, 360, 417, 361, 362, 390,
	331, 376, 141, 357, 0, 348, 326, 354, 327, 346,
	370, 109, 344, 399, 379, 121, 415, 124, 384, 0,
	159, 133, 0, 0, 372, 401, 374, 395, 367, 391,
	336, 383, 410, 358, 387, 411, 0, 0, 0, 322,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	386, 406, 356, 389, 325, 385, 0, 329, 332, 416,
	404, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	371, 375, 392, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 0, 382, 0, 0, 0, 333, 330,
	0, 369, 0, 0, 0, 335, 0, 350, 393, 0,
	324, 396, 402, 366, 183, 405, 364, 363, 146, 0,
	104, 0, 162, 113, 359, 122, 408, 373, 400, 347,
	355, 105, 353, 152, 142, 174, 381, 143, 151, 125,
	166, 147, 173, 184, 185, 164, 182, 154, 97, 139,
	88, 90, 163, 311, 102, 155, 93, 170, 161, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 167, 168, 106, 192, 98, 180, 181, 95, 320,
	179, 138, 178, 165, 171, 132, 129, 94, 169, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 328, 0, 160, 176, 193, 343, 403, 186,
	187, 188, 189, 0, 0, 0, 321, 319, 314, 313,
	119, 126, 149, 191, 388, 153, 103, 175, 158, 339,
	342, 337, 338, 377, 378, 412, 413, 414, 394, 334,
	0, 340, 341, 0, 398, 380, 89, 96, 123, 190,
	0, 148, 111, 177, 141, 0, 0, 759, 0, 245,
	0, 0, 0, 109, 242, 0, 0, 121, 284, 124,
	0, 0, 159, 133, 0, 0, 0, 0, 275, 276,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 243, 263, 262, 265, 266, 267, 268, 0, 0,
	101, 264, 269, 270, 271, 0, 0, 240, 256, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 236, 0, 0, 0, 295, 0, 255, 0,
	0, 251, 252, 257, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 183, 0, 0, 293,
	146, 0, 104, 0, 162, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 152, 142, 174, 0, 143,
	151, 125, 166, 147, 173, 184, 185, 164, 182, 154,
	97, 139, 88, 90, 163, 172, 102, 155, 93, 170,
	161, 131, 117, 118, 157, 91, 92, 0, 150, 108,
	112, 107, 140, 167, 168, 106, 192, 98, 180, 181,
	95, 99, 179, 138, 178, 165, 171, 132, 129, 94,
	169, 130, 128, 120, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 0, 160, 176, 193, 0,
	0, 186, 187, 188, 189, 0, 0, 0, 137, 100,
	116, 156, 119, 126, 149, 191, 0, 153, 103, 175,
	158, 285, 294, 291, 292, 289, 290, 288, 287, 286,
	296, 277, 278, 279, 280, 282, 0, 281, 89, 96,
	123, 190, 141, 148, 111, 177, 0, 245, 0, 0,
	0, 109, 242, 0, 0, 121, 284, 124, 0, 0,
	159, 133, 0, 0, 0, 0, 275, 276, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 463, 243,
	263, 262, 265, 266, 267, 268, 0, 0, 101, 264,
	269, 270, 271, 0, 0, 240, 256, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	0, 0, 0, 0, 295, 0, 255, 0, 0, 251,
	252, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 0, 0, 293, 146, 0,
	104, 0, 162, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 152, 142, 174, 0, 143, 151, 125,
	166, 147, 173, 184, 185, 164, 182, 154, 97, 139,
	88, 90, 163, 172, 102, 155, 93, 170, 161, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 167, 168, 106, 192, 98, 180, 181, 95, 99,
	179, 138, 178, 165, 171, 132, 129, 94, 169, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 160, 176, 193, 0, 0, 186,
	187, 188, 189, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 191, 0, 153, 103, 175, 158, 285,
	294, 291, 292, 289, 290, 288, 287, 286, 296, 277,
	278, 279, 280, 282, 0, 281, 89, 96, 123, 190,
	141, 148, 111, 177, 0, 245, 0, 0, 0, 109,
	242, 0, 0, 121, 284, 124, 0, 0, 159, 133,
	0, 0, 0, 0, 275, 276, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 243, 263, 262,
	265, 266, 267, 268, 0, 0, 101, 264, 269, 270,
	271, 0, 0, 240, 256, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 236, 0,
	0, 0, 295, 0, 255, 0, 0, 251, 252, 257,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 183, 0, 0, 293, 146, 0, 104, 0,
	162, 113, 0, 122, 0, 0, 0, 0, 0, 105,
	0, 152, 142, 174, 0, 143, 151, 125, 166, 147,
	173, 184, 185, 164, 182, 154, 97, 139, 88, 90,
	163, 172, 102, 155, 93, 170, 161, 131, 117, 118,
	157, 91, 92, 0, 150, 108, 112, 107, 140, 167,
	168, 106, 192, 98, 180, 181, 95, 99, 179, 138,
	178, 165, 171, 132, 129, 94, 169, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 160, 176, 193, 0, 0, 186, 187, 188,
	189, 0, 0, 0, 137, 100, 116, 156, 119, 126,
	149, 191, 0, 153, 103, 175, 158, 285, 294, 291,
	292, 289, 290, 288, 287, 286, 296, 277, 278, 279,
	280, 282, 0, 281, 89, 96, 123, 190, 141, 148,
	111, 177, 0, 245, 0, 0, 0, 109, 242, 0,
	0, 121, 284, 124, 0, 0, 159, 133, 0, 0,
	0, 0, 275, 276, 0, 0, 0, 0, 0, 0,
	822, 0, 50, 0, 0, 243, 263, 262, 265, 266,
	267, 268, 0, 0, 101, 264, 269, 270, 271, 0,
	0, 240, 256, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 0, 0, 0, 0,
	295, 0, 255, 0, 0, 251, 252, 257, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	183, 0, 0, 293, 146, 0, 104, 0, 162, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 152,
	142, 174, 0, 143, 151, 125, 166, 147, 173, 184,
	185, 164, 182, 154, 97, 139, 88, 90, 163, 172,
	102, 155, 93, 170, 161, 131, 117, 118, 157, 91,
	92, 0, 150, 108, 112, 107, 140, 167, 168, 106,
	192, 98, 180, 181, 95, 99, 179, 138, 178, 165,
	171, 132, 129, 94, 169, 130, 128, 120, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	160, 176, 193, 0, 0, 186, 187, 188, 189, 0,
	0, 0, 137, 100, 116, 156, 119, 126, 149, 191,
	0, 153, 103, 175, 158, 285, 294, 291, 292, 289,
	290, 288, 287, 286, 296, 277, 278, 279, 280, 282,
	23, 281, 89, 96, 123, 190, 0, 148, 111, 177,
	0, 0, 141, 0, 0, 0, 0, 245, 0, 0,
	0, 109, 242, 0, 0, 121, 284, 124, 0, 0,
	159, 133, 0, 0, 0, 0, 275, 276, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 243,
	263, 262, 265, 266, 267, 268, 0, 0, 101, 264,
	269, 270, 271, 0, 0, 240, 256, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	0, 0, 0, 0, 295, 0, 255, 0, 0, 251,
	252, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 0, 0, 293, 146, 0,
	104, 0, 162, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 152, 142, 174, 0, 143, 151, 125,
	166, 147, 173, 184, 185, 164, 182, 154, 97, 139,
	88, 90, 163, 172, 102, 155, 93, 170, 161, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 167, 168, 106, 192, 98, 180, 181, 95, 99,
	179, 138, 178, 165, 171, 132, 129, 94, 169, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 160, 176, 193, 0, 0, 186,
	187, 188, 189, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 191, 0, 153, 103, 175, 158, 285,
	294, 291, 292, 289, 290, 288, 287, 286, 296, 277,
	278, 279, 280, 282, 0, 281, 89, 96, 123, 190,
	141, 148, 111, 177, 0, 245, 0, 0, 0, 109,
	242, 0, 0, 121, 284, 124, 0, 0, 159, 133,
	0, 0, 0, 0, 275, 276, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 243, 263, 262,
	265, 266, 267, 268, 0, 0, 101, 264, 269, 270,
	271, 0, 0, 240, 256, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 0, 0,
	0, 0, 295, 0, 255, 0, 0, 251, 252, 257,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 183, 0, 0, 293, 146, 0, 104, 0,
	162, 113, 0, 122, 0, 0, 0, 0, 0, 105,
	0, 152, 142, 174, 0, 143, 151, 125, 166, 147,
	173, 184, 185, 164, 182, 154, 97, 139, 88, 90,
	163, 172, 102, 155, 93, 170, 161, 131, 117, 118,
	157, 91, 92, 0, 150, 108, 112, 107, 140, 167,
	168, 106, 192, 98, 180, 181, 95, 99, 179, 138,
	178, 165, 171, 132, 129, 94, 169, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 160, 176, 193, 0, 0, 186, 187, 188,
	189, 0, 0, 0, 137, 100, 116, 156, 119, 126,
	149, 191, 0, 153, 103, 175, 158, 285, 294, 291,
	292, 289, 290, 288, 287, 286, 296, 277, 278, 279,
	280, 282, 0, 281, 89, 96, 123, 190, 141, 148,
	111, 177, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 121, 284, 124, 0, 0, 159, 133, 0, 0,
	0, 0, 275, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 243, 263, 262, 265, 266,
	267, 268, 0, 0, 101, 264, 269, 270, 271, 0,
	0, 0, 256, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 0, 0, 0, 0,
	295, 0, 255, 0, 0, 251, 252, 257, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	183, 0, 0, 293, 146, 0, 104, 0, 162, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 152,
	142, 174, 1386, 143, 151, 125, 166, 147, 173, 184,
	185, 164, 182, 154, 97, 139, 88, 90, 163, 172,
	102, 155, 93, 170, 161, 131, 117, 118, 157, 91,
	92, 0, 150, 108, 112, 107, 140, 167, 168, 106,
	192, 98, 180, 181, 95, 99, 179, 138, 178, 165,
	171, 132, 129, 94, 169, 130, 128, 120, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	160, 176, 193, 0, 0, 186, 187, 188, 189, 0,
	0, 0, 137, 100, 116, 156, 119, 126, 149, 191,
	0, 153, 103, 175, 158, 285, 294, 291, 292, 289,
	290, 288, 287, 286, 296, 277, 278, 279, 280, 282,
	0, 281, 89, 96, 123, 190, 141, 148, 111, 177,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 121,
	284, 124, 0, 0, 159, 133, 0, 0, 0, 0,
	275, 276, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 243, 263, 262, 265, 266, 267, 268,
	0, 0, 101, 264, 269, 270, 271, 0, 0, 0,
	256, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 0, 0, 0, 0, 295, 0,
	255, 0, 0, 251, 252, 257, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 183, 0,
	0, 293, 146, 0, 104, 0, 162, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 152, 142, 174,
	0, 143, 151, 125, 166, 147, 173, 184, 185, 164,
	182, 154, 97, 139, 88, 90, 163, 172, 102, 155,
	93, 170, 161, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 167, 168, 106, 192, 98,
	180, 181, 95, 99, 179, 138, 178, 165, 171, 132,
	129, 94, 169, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 160, 176,
	193, 0, 0, 186, 187, 188, 189, 0, 0, 0,
	137, 100, 116, 156, 119, 126, 149, 191, 0, 153,
	103, 175, 158, 285, 294, 291, 292, 289, 290, 288,
	287, 286, 296, 277, 278, 279, 280, 282, 0, 281,
	89, 96, 123, 190, 141, 148, 111, 177, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 121, 0, 124,
	0, 0, 159, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 322, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 497, 496, 506, 507,
	499, 500, 501, 502, 503, 504, 505, 498, 0, 0,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 183, 0, 0, 0,
	146, 0, 104, 0, 162, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 152, 142, 174, 0, 143,
	151, 125, 166, 147, 173, 184, 185, 164, 182, 154,
	97, 139, 88, 90, 163, 172, 102, 155, 93, 170,
	161, 131, 117, 118, 157, 91, 92, 0, 150, 108,
	112, 107, 140, 167, 168, 106, 192, 98, 180, 181,
	95, 99, 179, 138, 178, 165, 171, 132, 129, 94,
	169, 130, 128, 120, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 0, 160, 176, 193, 0,
	0, 186, 187, 188, 189, 0, 0, 0, 137, 100,
	116, 156, 119, 126, 149, 191, 0, 153, 103, 175,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 485, 89, 96,
	123, 190, 109, 148, 111, 177, 121, 0, 124, 0,
	0, 159, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 487, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 482, 481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 183, 0, 0, 0, 146,
	0, 104, 0, 162, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 152, 142, 174, 0, 143, 151,
	125, 166, 147, 173, 184, 185, 164, 182, 154, 97,
	139, 88, 90, 163, 172, 102, 155, 93, 170, 161,
	131, 117, 118, 157, 91, 92, 0, 150, 108, 112,
	107, 140, 167, 168, 106, 192, 98, 180, 181, 95,
	99, 179, 138, 178, 165, 171, 132, 129, 94, 169,
	130, 128, 120, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 0, 0, 160, 176, 193, 0, 0,
	186, 187, 188, 189, 0, 0, 0, 137, 100, 116,
	156, 119, 126, 149, 191, 0, 153, 103, 175, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 581, 89, 96, 123,
	190, 109, 148, 111, 177, 121, 0, 124, 0, 0,
	159, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 583, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 0, 0, 0, 146, 0,
	104, 0, 162, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 152, 142, 174, 0, 143, 151, 125,
	166, 147, 173, 184, 185, 164, 182, 154, 97, 139,
	88, 90, 163, 172, 102, 155, 93, 170, 161, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 167, 168, 106, 192, 98, 180, 181, 95, 99,
	179, 138, 178, 165, 171, 132, 129, 94, 169, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 160, 176, 193, 0, 0, 186,
	187, 188, 189, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 191, 0, 153, 103, 175, 158, 23,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 89, 96, 123, 190,
	109, 148, 111, 177, 121, 0, 124, 0, 0, 159,
	133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 183, 0, 0, 0, 146, 0, 104,
	0, 162, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 152, 142, 174, 0, 143, 151, 125, 166,
	147, 173, 184, 185, 164, 182, 154, 97, 139, 88,
	90, 163, 172, 102, 155, 93, 170, 161, 131, 117,
	118, 157, 91, 92, 0, 150, 108, 112, 107, 140,
	167, 168, 106, 192, 98, 180, 181, 95, 99, 179,
	138, 178, 165, 171, 132, 129, 94, 169, 130, 128,
	120, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 0, 0, 160, 176, 193, 0, 0, 186, 187,
	188, 189, 0, 0, 0, 137, 100, 116, 156, 119,
	126, 149, 191, 0, 153, 103, 175, 158, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 89, 96, 123, 190, 109,
	148, 111, 177, 121, 0, 124, 0, 0, 159, 133,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 183, 0, 0, 0, 146, 0, 104, 0,
	162, 113, 0, 122, 0, 0, 0, 0, 0, 105,
	0, 152, 142, 174, 0, 143, 151, 125, 166, 147,
	173, 184, 185, 164, 182, 154, 97, 139, 88, 90,
	163, 172, 102, 155, 93, 170, 161, 131, 117, 118,
	157, 91, 92, 0, 150, 108, 112, 107, 140, 167,
	168, 106, 192, 98, 180, 181, 95, 99, 179, 138,
	178, 165, 171, 132, 129, 94, 169, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 160, 176, 193, 0, 0, 186, 187, 188,
	189, 0, 0, 0, 137, 100, 116, 156, 119, 126,
	149, 191, 141, 153, 103, 175, 158, 0, 0, 0,
	0, 109, 0, 0, 0, 121, 0, 124, 0, 0,
	159, 133, 0, 0, 89, 96, 123, 190, 0, 148,
	111, 177, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 710, 0, 0, 711, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 0, 0, 0, 146, 0,
	104, 0, 162, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 152, 142, 174, 0, 143, 151, 125,
	166, 147, 173, 184, 185, 164, 182, 154, 97, 139,
	88, 90, 163, 172, 102, 155, 93, 170, 161, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 167, 168, 106, 192, 98, 180, 181, 95, 99,
	179, 138, 178, 165, 171, 132, 129, 94, 169, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 160, 176, 193, 0, 0, 186,
	187, 188, 189, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 191, 141, 153, 103, 175, 158, 0,
	0, 0, 0, 109, 601, 0, 0, 121, 0, 124,
	0, 0, 159, 133, 0, 0, 89, 96, 123, 190,
	0, 148, 111, 177, 0, 0, 0, 0, 0, 0,
	0, 322, 0, 600, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 183, 0, 0, 0,
	146, 0, 104, 0, 162, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 152, 142, 174, 0, 143,
	151, 125, 166, 147, 173, 184, 185, 164, 182, 154,
	97, 139, 88, 90, 163, 172, 102, 155, 93, 170,
	161, 131, 117, 118, 157, 91, 92, 0, 150, 108,
	112, 107, 140, 167, 168, 106, 192, 98, 180, 181,
	95, 99, 179, 138, 178, 165, 171, 132, 129, 94,
	169, 130, 128, 120, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 0, 160, 176, 193, 0,
	0, 186, 187, 188, 189, 0, 0, 0, 137, 100,
	116, 156, 119, 126, 149, 191, 0, 153, 103, 175,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 581, 89, 96,
	123, 190, 109, 148, 111, 177, 121, 0, 124, 0,
	0, 159, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 583, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 183, 0, 0, 0, 146,
	0, 104, 0, 162, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 152, 142, 174, 0, 579, 151,
	125, 166, 147, 173, 184, 185, 164, 182, 154, 97,
	139, 88, 90, 163, 172, 102, 155, 93, 170, 161,
	131, 117, 118, 157, 91, 92, 0, 150, 108, 112,
	107, 140, 167, 168, 106, 192, 98, 180, 181, 95,
	99, 179, 138, 178, 165, 171, 132, 129, 94, 169,
	130, 128, 120, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 0, 0, 160, 176, 193, 0, 0,
	186, 187, 188, 189, 0, 0, 0, 137, 100, 116,
	156, 119, 126, 149, 191, 141, 153, 103, 175, 158,
	0, 0, 0, 0, 109, 0, 0, 0, 121, 0,
	124, 0, 0, 159, 133, 0, 0, 89, 96, 123,
	190, 0, 148, 111, 177, 0, 0, 0, 0, 50,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 183, 0, 0,
	0, 146, 0, 104, 0, 162, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 152, 142, 174, 0,
	143, 151, 125, 166, 147, 173, 184, 185, 164, 182,
	154, 97, 139, 88, 90, 163, 172, 102, 155, 93,
	170, 161, 131, 117, 118, 157, 91, 92, 0, 150,
	108, 112, 107, 140, 167, 168, 106, 192, 98, 180,
	181, 95, 99, 179, 138, 178, 165, 171, 132, 129,
	94, 169, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 0, 0, 160, 176, 193,
	0, 0, 186, 187, 188, 189, 0, 0, 0, 137,
	100, 116, 156, 119, 126, 149, 191, 141, 153, 103,
	175, 158, 0, 0, 0, 0, 109, 0, 0, 0,
	121, 0, 124, 0, 0, 159, 133, 0, 0, 89,
	96, 123, 190, 0, 148, 111, 177, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 583, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 183,
	0, 0, 0, 146, 0, 104, 0, 162, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 152, 142,
	174, 0, 143, 151, 125, 166, 147, 173, 184, 185,
	164, 182, 154, 97, 139, 88, 90, 163, 172, 102,
	155, 93, 170, 161, 131, 117, 118, 157, 91, 92,
	0, 150, 108, 112, 107, 140, 167, 168, 106, 192,
	98, 180, 181, 95, 99, 179, 138, 178, 165, 171,
	132, 129, 94, 169, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 0, 160,
	176, 193, 0, 0, 186, 187, 188, 189, 0, 0,
	0, 137, 100, 116, 156, 119, 126, 149, 191, 141,
	153, 103, 175, 158, 0, 0, 0, 0, 109, 0,
	0, 0, 121, 0, 124, 0, 0, 159, 133, 0,
	0, 89, 96, 123, 190, 0, 148, 111, 177, 0,
	0, 0, 0, 0, 0, 0, 322, 0, 487, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 183, 0, 0, 0, 146, 0, 104, 0, 162,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	152, 142, 174, 0, 143, 151, 125, 166, 147, 173,
	184, 185, 164, 182, 154, 97, 139, 88, 90, 163,
	172, 102, 155, 93, 170, 161, 131, 117, 118, 157,
	91, 92, 0, 150, 108, 112, 107, 140, 167, 168,
	106, 192, 98, 180, 181, 95, 99, 179, 138, 178,
	165, 171, 132, 129, 94, 169, 130, 128, 120, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 0,
	0, 160, 176, 193, 0, 0, 186, 187, 188, 189,
	0, 0, 0, 137, 100, 116, 156, 119, 126, 149,
	191, 141, 153, 103, 175, 158, 0, 0, 0, 0,
	109, 0, 0, 0, 121, 0, 124, 0, 0, 159,
	133, 0, 0, 89, 96, 123, 190, 0, 148, 111,
	177, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 183, 0, 0, 0, 146, 0, 104,
	0, 162, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 152, 142, 174, 0, 143, 151, 125, 166,
	147, 173, 184, 185, 164, 182, 154, 97, 139, 88,
	90, 163, 172, 102, 155, 93, 170, 161, 131, 117,
	118, 157, 91, 92, 0, 150, 108, 112, 107, 140,
	167, 168, 106, 192, 98, 180, 181, 95, 99, 179,
	138, 178, 165, 171, 132, 129, 94, 169, 130, 128,
	120, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 0, 0, 160, 176, 193, 0, 0, 186, 187,
	188, 189, 0, 0, 0, 137, 100, 116, 156, 119,
	126, 149, 191, 670, 153, 103, 175, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 96, 123, 190, 141,
	148, 111, 177, 0, 0, 0, 0, 559, 109, 0,
	0, 0, 121, 0, 124, 0, 0, 159, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 183, 0, 0, 0, 146, 0, 104, 0, 162,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	152, 142, 174, 0, 143, 151, 125, 166, 147, 173,
	184, 185, 164, 182, 154, 97, 139, 88, 90, 163,
	172, 102, 155, 93, 170, 161, 131, 117, 118, 157,
	91, 92, 0, 150, 108, 112, 107, 140, 167, 168,
	106, 192, 98, 180, 181, 95, 99, 179, 138, 178,
	165, 171, 132, 129, 94, 169, 130, 128, 120, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 0,
	0, 160, 176, 193, 0, 0, 186, 187, 188, 189,
	0, 0, 0, 137, 100, 116, 156, 119, 126, 149,
	191, 0, 153, 103, 175, 158, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 89, 96, 123, 190, 109, 148, 111,
	177, 121, 0, 124, 0, 0, 159, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	183, 0, 0, 0, 146, 0, 104, 0, 162, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 152,
	142, 174, 0, 143, 151, 125, 166, 147, 173, 184,
	185, 164, 182, 154, 97, 139, 88, 90, 163, 172,
	102, 155, 93, 170, 161, 131, 117, 118, 157, 91,
	92, 0, 150, 108, 112, 107, 140, 167, 168, 106,
	192, 98, 180, 181, 95, 99, 179, 138, 178, 165,
	171, 132, 129, 94, 169, 130, 128, 120, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	160, 176, 193, 0, 0, 186, 187, 188, 189, 0,
	0, 0, 137, 100, 116, 156, 119, 126, 149, 191,
	141, 153, 103, 175, 158, 0, 0, 0, 0, 109,
	0, 0, 0, 121, 0, 124, 0, 0, 159, 133,
	0, 0, 89, 96, 123, 190, 0, 148, 111, 177,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 0, 183, 0, 0, 0, 146, 0, 104, 0,
	162, 113, 0, 122, 0, 0, 0, 0, 0, 105,
	0, 152, 142, 174, 0, 143, 151, 125, 166, 147,
	173, 184, 185, 164, 182, 154, 97, 139, 88, 90,
	163, 172, 102, 155, 93, 170, 161, 131, 117, 118,
	157, 91, 92, 0, 150, 108, 112, 107, 140, 167,
	168, 106, 192, 98, 180, 181, 95, 99, 179, 138,
	178, 165, 171, 132, 129, 94, 169, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 160, 176, 193, 0, 0, 186, 187, 188,
	189, 0, 0, 0, 137, 100, 116, 156, 119, 126,
	149, 191, 141, 153, 103, 175, 158, 0, 0, 0,
	0, 109, 0, 0, 0, 121, 0, 124, 0, 0,
	159, 133, 0, 0, 89, 96, 123, 190, 0, 148,
	111, 177, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 0, 0, 0, 146, 0,
	104, 0, 162, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 152, 142, 174, 0, 143, 151, 125,
	166, 147, 173, 184, 185, 164, 182, 154, 97, 139,
	88, 90, 163, 172, 102, 155, 93, 170, 161, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 167, 168, 106, 192, 98, 180, 181, 95, 99,
	179, 138, 178, 165, 171, 132, 129, 94, 169, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 160, 176, 193, 0, 0, 186,
	187, 188, 189, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 191, 141, 153, 103, 175, 158, 0,
	0, 0, 0, 109, 0, 0, 0, 121, 0, 124,
	0, 0, 159, 133, 0, 0, 89, 96, 123, 190,
	0, 148, 111, 177, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 183, 0, 0, 0,
	146, 0, 104, 0, 162, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 152, 142, 174, 0, 143,
	151, 125, 166, 147, 173, 184, 185, 164, 182, 154,
	97, 139, 88, 90, 163, 172, 102, 155, 93, 170,
	161, 131, 117, 118, 157, 91, 92, 0, 150, 108,
	112, 107, 140, 167, 168, 106, 192, 98, 180, 181,
	95, 99, 179, 138, 178, 165, 171, 132, 129, 94,
	169, 130, 128, 120, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 0, 160, 176, 193, 0,
	0, 186, 187, 188, 189, 0, 0, 0, 137, 100,
	116, 156, 119, 126, 149, 191, 141, 153, 103, 175,
	158, 0, 0, 0, 0, 109, 0, 0, 0, 121,
	0, 124, 0, 0, 159, 133, 0, 0, 89, 96,
	123, 190, 0, 148, 111, 177, 0, 0, 0, 0,
	0, 0, 0, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 183, 0,
	0, 0, 146, 0, 104, 0, 162, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 152, 142, 174,
	0, 143, 151, 125, 166, 147, 173, 184, 185, 164,
	182, 154, 97, 139, 88, 90, 163, 172, 102, 155,
	93, 170, 161, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 167, 168, 106, 192, 98,
	180, 181, 95, 99, 179, 138, 178, 165, 171, 132,
	129, 94, 169, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 160, 176,
	193, 0, 0, 186, 187, 188, 189, 0, 0, 0,
	137, 100, 116, 156, 119, 126, 149, 191, 0, 153,
	103, 175, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 96, 123, 190, 0, 148, 111, 177,
}
var yyPact = [...]int{

	1992, -1000, -173, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 922, 943, -1000, -1000, -1000, -1000, -1000, -1000, 782,
	64, 134, 155, 17, 10452, 154, 1429, 10876, -1000, 15,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 705, -1000, -1000,
	-1000, -1000, -1000, 915, 920, 777, 904, 862, -1000, 5922,
	114, 9137, 10240, 5204, -1000, 564, 146, 10876, -132, 10664,
	111, 111, 111, -1000, 148, 10876, -1000, 10876, 109, 561,
	109, 109, 109, 10876, -1000, 195, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10876, 555, 888, 73, 3419, 3419,
	3419, 3419, 27, 3419, -66, 803, -1000, -1000, -1000, -1000,
	3419, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 459, 889, 6642, 6642, 922, -1000, 705, -1000, -1000,
	-1000, 871, -1000, -1000, 327, 930, -1000, 7585, 191, -1000,
	6642, 1528, 662, -1000, -1000, 662, -1000, -1000, 177, -1000,
	-1000, 7118, 7118, 7118, 7118, 7118, 7118, 7118, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 662, -1000, 6404, 662, 662, 662, 662, 662,
	662, 662, 662, 6642, 662, 662, 662, 662, 662, 662,
	662, 662, 662, 662, 662, 662, 662, 10011, 699, 721,
	-1000, -1000, -1000, 901, 8272, 8925, 10876, 696, -1000, 703,
	4949, -83, -1000, -1000, -1000, 276, 8696, -1000, -1000, -1000,
	882, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 644, -1000,
	2219, 10664, 3419, 135, 744, 548, 290, 546, 10876, 9773,
	3419, 124, 10876, 899, 801, 10876, 534, 519, -1000, 4694,
	-1000, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, -1000,
	-1000, -1000, -1000, -1000, -1000, 3419, 3419, -1000, -58, -1000,
	10876, -1000, -1000, -1000, -1000, 941, 227, 434, 181, 706,
	-1000, 301, 915, 459, 862, 8484, 813, -1000, -1000, 10876,
	-1000, 6642, 6642, 422, -1000, 9561, -1000, -1000, 3674, 234,
	7118, 364, 262, 7118, 7118, 7118, 7118, 7118, 7118, 7118,
	7118, 7118, 7118, 7118, 7118, 7118, 7118, 7118, 427, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 517, -1000, 705,
	661, 661, 204, 204, 204, 204, 204, 204, 7356, 5446,
	459, 627, 395, 6404, 5922, 5922, 6642, 6642, 11088, 11088,
	5922, 905, 287, 395, 11088, -1000, 459, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5922, 5922, 5922, 5922, 49, 10876,
	-1000, 11088, 9137, 9137, 9137, 9137, 9137, -1000, 825, 824,
	-1000, 835, 833, 845, 10876, -1000, 625, 8272, 192, 662,
	-1000, 9349, -1000, -1000, 49, 584, 9137, 10876, -1000, -1000,
	4439, 703, -83, 690, -1000, -74, -78, 6160, 200, -1000,
	-1000, -1000, -1000, 2909, 286, 144, -1000, -52, -1000, -1000,
	-1000, -1000, 734, -1000, -1000, -1000, 734, 119, 734, 734,
	734, -23, -23, -23, -23, -1000, -1000, -1000, -1000, -1000,
	-1000, 781, 774, -1000, 734, 734, 734, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 761, 761, 761, 737, 737,
	780, -1000, 10876, -154, 514, 3419, 897, 3419, -1000, 74,
	10876, -1000, 10876, -1000, -1000, 10876, 3419, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 319, -1000, -1000, -1000, -1000, 836, 6642, 6642,
	4184, 6642, -1000, -1000, -1000, 889, -1000, 905, 916, -1000,
	875, 874, 5922, -1000, -1000, 234, 283, -1000, -1000, 299,
	-1000, -1000, -1000, -1000, 180, 662, -1000, 1779, -1000, -1000,
	-1000, -1000, 364, 7118, 7118, 7118, 303, 1779, 1763, 723,
	708, 204, 285, 285, 223, 223, 223, 223, 223, 374,
	374, -1000, -1000, -1000, 459, -1000, -1000, -1000, 459, 5922,
	697, -1000, -1000, 6642, -1000, 459, 621, 621, 381, 369,
	698, -1000, 176, 693, 621, 5922, 282, -1000, 6642, 459,
	-1000, 621, 459, 621, 621, 656, 662, -1000, 672, -1000,
	269, 721, 743, 800, 614, -1000, -1000, -1000, -1000, 823,
	-1000, 792, -1000, -1000, -1000, -1000, -1000, 145, 141, 139,
	10664, -1000, 928, 9137, 670, -1000, -1000, 690, -83, -84,
	-1000, -1000, -1000, 395, -1000, 507, 649, 2654, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 740, 799, 93, 90, 152,
	150, 504, 10664, -1000, -1000, -1000, 340, 83, 940, -1000,
	91, -1000, 89, 443, -54, -1000, -1000, 404, -23, -23,
	734, -23, -1000, -1000, 200, 880, 200, 200, 200, 441,
	441, -1000, -1000, -1000, -1000, 400, -1000, -1000, -1000, 396,
	-1000, 10876, 10664, 3419, -1000, 3929, -1000, -1000, -1000, -1000,
	-1000, -1000, 215, 118, 213, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 42, 158, -1000, 3419,
	-1000, 324, 10876, 10876, 853, 395, 395, 172, -1000, -1000,
	10876, -1000, -1000, -1000, -1000, 676, -1000, -1000, -1000, 3164,
	5922, -1000, 303, 1779, 939, -1000, 7118, 7118, -1000, -1000,
	621, 5922, 395, -1000, -1000, -1000, 52, 427, 52, 7118,
	7118, 4184, 7118, 7118, -147, 652, 278, -1000, 6642, 351,
	-1000, -1000, -1000, -1000, -1000, 791, 11088, 662, -1000, 8043,
	10664, 922, 11088, 6642, 6642, -1000, -1000, 6642, 739, -1000,
	6642, -1000, -1000, -1000, 662, 662, 662, 541, -1000, 922,
	670, -1000, -1000, -1000, -82, -101, -1000, -1000, 2909, -1000,
	2909, 10664, 934, -1000, 476, 460, -1000, 447, -1000, -1000,
	76, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -122,
	-1000, -1000, -1000, -1000, -1000, 554, 200, 200, -23, 200,
	-1000, 255, -1000, -1000, -1000, 616, -1000, 596, 647, 574,
	702, 789, -1000, 646, -1000, 263, -1000, 79, -1000, 10664,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10664, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10876, -1000, -1000, -1000, -1000, -1000, 10664, 104, -1000, -1000,
	438, 6642, -1000, -1000, -1000, 3929, -1000, 928, 9137, -1000,
	-1000, 459, -1000, 7118, 1779, 1779, -1000, -1000, 459, 734,
	734, -1000, 734, 737, -1000, 734, 3, 734, 2, 459,
	459, 1254, 1731, -1000, 641, 1358, 662, -139, -1000, 395,
	6642, -1000, 876, 579, 600, -1000, -1000, 5684, 459, 553,
	170, 541, 915, -1000, 395, 395, 395, 10664, 395, 10664,
	10664, 10664, 7814, 10664, 915, -1000, -1000, -1000, -1000, 2654,
	-1000, 532, -1000, 734, 168, 168, -1000, -1000, -1000, 86,
	-1000, -1000, -1000, -1000, 200, -1000, -1000, -1000, -23, 437,
	-23, 370, -1000, 367, 10664, 10664, 10876, 3929, 2909, 10664,
	-1000, -1000, -1000, 733, -1000, -1000, -1000, -1000, 892, 10664,
	-1000, -1000, 395, 926, 636, -1000, 1779, -1000, -1000, 105,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7118,
	7118, -1000, 7118, 7118, 7118, 459, 428, 395, 81, -1000,
	662, -1000, -1000, 640, 10664, 10664, -1000, -1000, 530, -1000,
	526, 526, 526, 192, -1000, -1000, 46, 10664, -1000, 788,
	-1000, -1000, 314, 19, 787, 10664, -1000, 200, -1000, 200,
	527, 474, 523, 725, 724, -1000, -1000, 720, 10664, 662,
	92, 924, 917, -1000, -1000, 1665, 1665, 1665, 1665, 26,
	-1000, -1000, 938, -1000, 662, -1000, 705, 167, -1000, 10664,
	-1000, -1000, -1000, -1000, -1000, 46, -1000, 424, 252, 352,
	-157, -1000, 937, -1000, -1000, 935, 719, -1000, -1000, -1000,
	-1000, -1000, 10664, 10664, 10664, 501, 40, 70, -1000, 6642,
	6642, -1000, -1000, -1000, -1000, 459, 62, -163, 11088, 600,
	459, 10664, -1000, -1000, -1000, 359, -1000, -1000, 10664, 168,
	168, 10664, 499, 473, 470, 744, 468, -1000, 10664, 718,
	395, 591, -1000, 844, -151, -167, 570, -1000, -1000, -1000,
	-1000, -1000, -1000, 458, -1000, -1000, -1000, -1000, -154, -1000,
	40, 872, 10664, -1000, 837, -1000, 101, 10664, -1000, -1000,
	35, 455, -155, 10876, -1000, 30, -1000, -165, 717, 662,
	-168, 10664, 6880, -1000, 452, 1665, 459, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1151, 24, 501, 1149, 1139, 1137, 1136, 1135, 1134,
	1132, 1131, 1130, 1128, 1126, 1125, 1124, 1121, 1120, 1119,
	1118, 1117, 1116, 1113, 139, 1112, 1111, 1110, 67, 1109,
	74, 1107, 1105, 46, 155, 49, 44, 88, 1104, 34,
	73, 66, 1103, 50, 1102, 1100, 85, 1099, 69, 1098,
	1097, 30, 1096, 1095, 10, 27, 1093, 1092, 1091, 1088,
	71, 39, 1087, 1084, 1083, 1082, 1080, 1078, 51, 8,
	9, 15, 16, 1076, 33, 11, 1075, 48, 1074, 1073,
	1072, 1070, 31, 1068, 53, 1067, 19, 52, 1065, 6,
	60, 37, 21, 7, 77, 55, 1064, 32, 61, 47,
	1061, 1060, 453, 1058, 1057, 1055, 1052, 1051, 1049, 435,
	424, 1048, 1045, 1041, 59, 0, 413, 43, 75, 1027,
	41, 1026, 1407, 79, 56, 22, 1025, 36, 1360, 40,
	1024, 1023, 42, 1020, 1016, 1015, 1014, 1013, 1012, 1010,
	1007, 161, 17, 26, 1006, 1000, 58, 23, 45, 54,
	998, 997, 28, 996, 5, 14, 3, 57, 985, 982,
	981, 972, 29, 18, 969, 13, 968, 12, 967, 966,
	1, 965, 20, 964, 2, 963, 4, 962, 961, 960,
	1233, 956, 959, 957, 955, 954, 86,
}
var yyR1 = [...]int{

	0, 178, 179, 179, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 182,
	182, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 120,
	120, 176, 176, 175, 174, 174, 173, 173, 172, 16,
	159, 160, 160, 160, 160, 149, 133, 133, 133, 133,
	133, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 137, 137, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 136, 136,
	136, 136, 136, 138, 138, 138, 138, 138, 134, 134,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 140, 140,
	140, 140, 140, 140, 140, 140, 148, 148, 141, 141,
	146, 146, 147, 147, 147, 144, 144, 145, 145, 142,
	142, 142, 143, 143, 151, 151, 168, 168, 167, 167,
	167, 167, 158, 158, 164, 164, 164, 164, 164, 164,
	164, 157, 157, 166, 166, 165, 152, 152, 152, 152,
	152, 153, 154, 154, 154, 154, 155, 155, 156, 156,
	161, 161, 161, 162, 162, 162, 163, 163, 163, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 183, 183, 184, 184, 184, 184, 184, 184,
	184, 171, 169, 169, 170, 170, 13, 14, 14, 14,
	14, 14, 15, 15, 17, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 107, 107,
	104, 104, 105, 105, 106, 106, 106, 108, 108, 108,
	131, 131, 131, 19, 19, 21, 21, 22, 23, 20,
	20, 20, 20, 20, 185, 24, 25, 25, 26, 26,
	26, 30, 30, 30, 28, 28, 29, 29, 35, 35,
	34, 34, 36, 36, 36, 36, 119, 119, 119, 118,
	118, 38, 38, 39, 39, 40, 40, 41, 41, 41,
	53, 53, 89, 89, 91, 91, 42, 42, 42, 42,
	43, 43, 44, 44, 45, 45, 126, 126, 125, 125,
	125, 124, 124, 47, 47, 47, 49, 48, 48, 48,
	48, 50, 50, 52, 52, 51, 51, 54, 54, 54,
	54, 55, 55, 37, 37, 37, 37, 37, 37, 37,
	103, 103, 57, 57, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 67, 67, 67, 67, 67, 67,
	58, 58, 58, 58, 58, 58, 58, 33, 33, 68,
	68, 68, 74, 69, 69, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 65, 65, 65, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 64, 64, 64, 64, 64, 64,
	64, 64, 186, 186, 66, 66, 66, 66, 31, 31,
	31, 31, 31, 129, 129, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 78, 78,
	32, 32, 76, 76, 77, 79, 79, 75, 75, 75,
	60, 60, 60, 60, 60, 60, 60, 60, 62, 62,
	62, 80, 80, 81, 81, 82, 82, 83, 83, 84,
	85, 85, 85, 86, 86, 86, 86, 87, 87, 87,
	59, 59, 59, 59, 59, 59, 88, 88, 88, 88,
	92, 92, 70, 70, 72, 72, 71, 73, 93, 93,
	97, 94, 94, 98, 98, 98, 96, 96, 96, 121,
	121, 121, 101, 101, 109, 109, 110, 110, 102, 102,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	112, 112, 112, 113, 113, 116, 116, 117, 117, 122,
	122, 123, 123, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 180, 181, 127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 9, 11, 11, 4, 6, 5, 5, 5, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 3, 2, 3, 1, 1, 1,
	1, 1, 2, 3, 3, 3, 3, 3, 3, 3,
	4, 2, 3, 2, 3, 2, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 1, 1,
	4, 4, 4, 5, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 0,
	3, 3, 0, 2, 5, 4, 1, 2, 2, 3,
	2, 3, 0, 1, 2, 3, 3, 2, 3, 2,
	2, 1, 1, 1, 3, 2, 1, 4, 4, 7,
	7, 13, 1, 1, 2, 2, 0, 1, 1, 3,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	11, 13, 7, 7, 7, 12, 7, 7, 7, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 3, 3, 3, 3, 4, 3, 6,
	4, 2, 4, 2, 2, 2, 2, 3, 1, 1,
	0, 1, 0, 1, 0, 2, 2, 0, 2, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 6, 8, 8, 6, 8, 8,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -178, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 141, 115, 134, 48, 157, 158,
	160, 161, 25, 135, 136, 139, 140, -180, 8, 244,
	52, -179, 260, -82, 15, -26, 5, -24, -185, -24,
	-24, -24, -24, -24, -159, 52, -120, 120, 69, 149,
	236, 117, 118, 132, -102, 120, 122, 118, 118, 119,
	120, 236, 117, 118, -51, -122, 55, -115, 156, 252,
	157, 169, 170, 162, 193, 184, 253, 154, 181, 185,
	223, 64, 160, 232, 126, 137, 179, 175, 173, 27,
	198, 258, 174, 129, 199, 203, 224, 166, 167, 226,
	197, 31, 131, 254, 33, 145, 227, 201, 196, 192,
	195, 165, 191, 37, 205, 204, 206, 222, 187, 155,
	176, 18, 140, 143, 200, 202, 124, 147, 257, 228,
	172, 144, 139, 231, 153, 161, 225, 168, 234, 36,
	210, 164, 128, 158, 151, 189, 146, 177, 178, 194,
	163, 190, 159, 148, 141, 233, 211, 259, 188, 186,
	182, 183, 152, 120, 149, 150, 215, 216, 217, 218,
	255, 229, 180, 212, 118, 105, 185, 111, 213, 119,
	31, 147, -131, 118, -104, 150, 215, 216, 217, 218,
	55, 225, 224, 219, -122, 159, -127, -127, -127, -127,
	-127, -2, -86, 17, 16, -5, -3, -180, 6, 20,
	21, -30, 38, 39, -25, -36, 96, -37, -122, -56,
	71, -61, 28, 55, -115, 23, -60, -57, -75, -73,
	-74, 105, 106, 94, 95, 102, 72, 107, -65, -63,
	-64, -66, 57, 56, 65, 58, 59, 60, 61, 66,
	67, 68, -116, -71, -180, 42, 43, 245, 246, 247,
	248, 251, 249, 74, 32, 235, 243, 242, 241, 239,
	240, 237, 238, 123, 236, 100, 244, -102, -39, -40,
	-41, -42, -53, -74, -180, -51, 11, -46, -51, -94,
	-130, 159, -98, 225, 224, -117, -96, -116, -114, 223,
	185, 222, 55, -115, 116, 70, 22, 24, 208, 73,
	105, 16, 74, 104, 245, 111, 46, 237, 238, 235,
	247, 248, 236, 213, 28, 10, 25, 135, 21, 98,
	113, 77, 78, 138, 23, 136, 68, 19, 49, 130,
	11, 13, 14, 123, 122, 89, 119, 44, 8, 107,
	26, 86, 40, 133, 42, 87, 17, 239, 240, 30,
	251, 142, 100, 47, 34, 71, 66, 50, 230, 69,
	15, 45, 88, 114, 244, 43, 117, 6, 250, 29,
	134, 41, 118, 214, 76, 121, 67, 5, 132, 9,
	48, 51, 241, 242, 243, 32, 75, 12, -160, -149,
	55, 119, -51, 244, -116, -110, 123, -110, -110, 118,
	-51, -51, -109, 123, 55, -109, -109, -109, -51, 108,
	-51, 55, 29, 236, 55, 147, 118, 148, 120, -128,
	-180, -117, -128, -128, -128, 151, 152, -128, -105, 220,
	50, -128, -181, 54, -87, 19, 30, -37, -122, -83,
	-84, -37, -82, -2, -24, 34, -28, 21, 63, 11,
	-119, 70, 69, 86, -118, 22, -116, 57, 108, -37,
	-58, 89, 71, 87, 88, 73, 91, 90, 101, 94,
	95, 96, 97, 98, 99, 100, 92, 93, 104, 79,
	80, 81, 82, 83, 84, 85, -103, -180, -74, -180,
	109, 110, -61, -61, -61, -61, -61, -61, -61, -180,
	-2, -69, -37, -180, -180, -180, -180, -180, -180, -180,
	-180, -180, -78, -37, -180, -186, -180, -186, -186, -186,
	-186, -186, -186, -186, -180, -180, -180, -180, -52, 26,
	-51, 29, 53, -47, -49, -48, -50, 40, 44, 46,
	41, 42, 43, 47, -126, 22, -39, -180, -125, 143,
	-124, 22, -122, 57, -51, -46, -182, 53, 11, 51,
	53, -94, 159, -95, -99, 226, 228, 79, -121, -116,
	57, 28, 29, 54, 53, -150, -133, -137, -134, -139,
	-138, -140, -135, -136, 184, 253, 181, 185, 182, 105,
	186, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	188, 198, 29, 137, 177, 178, 179, 180, 199, 200,
	201, 202, 203, 204, 205, 206, 162, 163, 164, 165,
	166, 167, 168, 169, 170, 172, 173, 174, 175, 176,
	-116, -128, 120, -176, 51, 55, 71, 55, -51, -51,
	230, -128, 121, -51, 23, 50, -51, 55, 55, -123,
	-122, -114, -128, -128, -128, -128, -128, -128, -128, -128,
	-128, -128, -107, 214, 221, -51, 9, 89, 53, 18,
	108, 53, -85, 24, 25, -86, -181, -30, -62, -116,
	58, 61, -29, 41, -51, -37, -37, -67, 66, 71,
	67, 68, -118, 96, -123, -117, -114, -61, -68, -71,
	-74, 62, 89, 87, 88, 73, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -129, 55, 57, 55, -60, -60, -116, -35, 21,
	-34, -36, -181, 53, -181, -2, -34, -34, -37, -37,
	-75, -116, -122, -75, -34, -28, -76, -77, 75, -75,
	-181, -34, -35, -34, -34, -90, 143, -51, -93, -97,
	-75, -40, -41, -41, -40, -41, 40, 40, 40, 45,
	40, 45, 40, -48, -122, -181, -54, 48, 122, 49,
	-180, -124, -90, 51, -39, -51, -98, -95, 53, 227,
	229, 230, 50, -37, -143, 104, -161, -162, -163, -117,
	57, 58, -149, -151, -152, -164, -153, 124, 128, 129,
	132, -157, 126, 119, 133, 66, 71, 28, 50, 208,
	124, 133, 132, 64, -144, 211, -141, 52, -141, -141,
	183, -141, -141, -141, -142, 185, -142, -142, -142, 52,
	52, -141, -141, -141, -146, 52, -146, -146, -147, 52,
	-147, 50, 51, -51, -174, 255, -175, 55, -128, 23,
	-128, -111, 116, 113, 114, -171, 112, 208, 185, 64,
	28, 15, 245, 143, 259, 55, 144, -51, -51, -51,
	-128, -106, 11, 89, 36, -37, -37, -123, -84, -87,
	-101, 19, 11, 32, 32, -34, 66, 67, 68, 108,
	-180, -68, -61, -61, -61, -33, 138, 70, -181, -181,
	-34, 53, -37, -181, -181, -181, 53, 51, 22, 53,
	11, 108, 53, 11, -181, -34, -79, -77, 77, -37,
	-181, -181, -181, -181, -181, -59, 29, 32, -2, -180,
	-180, -55, 53, 12, 79, -44, -43, 50, 51, -45,
	50, -43, 40, 40, 119, 119, 119, -91, -116, -55,
	-39, -55, -99, -100, 231, 228, 234, 55, 53, -163,
	79, 52, 50, 133, -157, -157, 55, -157, 55, 55,
	-155, -116, 66, 57, 58, 59, 66, 235, 65, 9,
	133, 133, 57, -145, 212, 58, -142, -142, -141, -142,
	-143, 29, -143, -143, -143, -148, 57, -148, 58, 58,
	-51, -116, -128, -173, -172, -117, -127, -120, -184, 149,
	125, 130, 129, 55, 124, 128, 143, -177, 149, 125,
	126, 130, 129, 55, 119, 133, 124, 128, 143, 132,
	-112, -113, 121, 22, 119, 133, 143, 116, -128, -108,
	87, 12, -122, -122, 37, 108, -51, -38, 11, 96,
	-117, -35, -33, 70, -61, -61, -181, -36, -132, 105,
	181, 137, 179, 175, 197, 187, 210, 177, 211, -129,
	-132, -61, -61, -117, -61, -61, 252, -82, 78, -37,
	76, -92, 50, -93, -70, -72, -71, -180, -2, -88,
	-116, -91, -82, -97, -37, -37, -37, 52, -37, -180,
	-180, -180, -181, 53, -82, -55, 228, 232, 233, -162,
	-163, -166, -165, -116, 10, 9, 55, 55, 55, 130,
	235, 54, -143, -143, -142, -143, 55, 105, 54, 53,
	54, 53, 54, 53, 52, 51, 50, 53, 79, -183,
	119, 133, -127, -116, -127, -116, -51, -127, -116, 126,
	-152, 57, -37, -55, -39, -181, -61, -181, -141, -141,
	-141, -147, -141, 167, -141, 167, -181, -181, -181, 53,
	19, -181, 53, 19, -180, -32, 250, -37, 27, -92,
	53, -181, -181, -181, 53, 108, -181, -86, -89, -116,
	-89, -89, -89, -125, -116, -86, 54, 53, -141, -154,
	153, 154, 29, 155, -154, 133, -143, -142, 57, -142,
	58, 58, -89, -116, -51, -172, -163, -116, 52, 26,
	-116, -80, 13, -142, 55, -61, -61, -61, -61, -61,
	-181, 57, 133, -72, 32, -2, -180, -116, -116, 53,
	54, -181, -181, -181, -54, -168, -167, 51, 131, 64,
	255, -165, 50, 66, 156, 50, -155, -143, -143, 54,
	54, 54, 52, 52, 52, -89, -180, 124, -81, 14,
	16, -181, -181, -181, -181, -31, 89, 255, 9, -70,
	-2, 108, -116, -167, 55, -158, 79, 57, 256, 9,
	10, 52, -89, -89, -89, 54, -169, -170, 143, 133,
	-37, -69, -181, 253, 47, 257, -93, -181, -116, 58,
	-116, -154, -154, -156, -116, 54, 54, 54, -176, -181,
	53, -116, 52, 37, 254, 258, 54, 53, -174, -170,
	32, -89, 37, 127, -116, 145, 54, 255, -51, 146,
	257, 52, -180, 258, -156, -61, 142, 54, -181, -181,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 545, 0, 314, 314, 314, 314, 314, 314, 0,
	69, 598, 0, 0, 0, 0, -2, 304, 305, 0,
	307, 308, 825, 825, 825, 825, 825, 0, 33, 34,
	823, 1, 3, 553, 0, 0, 318, 321, 316, 0,
	598, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	596, 596, 596, 70, 0, 0, 599, 0, 594, 0,
	594, 594, 594, 0, 263, 385, 619, 620, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 0, 0, 0, 0, 826, 826,
	826, 826, 0, 826, 292, 281, 283, 284, 285, 286,
	826, 301, 302, 291, 303, 306, 309, 310, 311, 312,
	313, 27, 557, 0, 0, 545, 29, 0, 314, 319,
	320, 324, 322, 323, 315, 0, 332, 336, 0, 393,
	0, 398, 400, -2, -2, 0, 435, 436, 437, 438,
	439, 0, 0, 0, 0, 0, 0, 0, 462, 463,
	464, 465, 530, 531, 532, 533, 534, 535, 536, 537,
	402, 403, 527, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 518, 0, 492, 492, 492, 492, 492,
	492, 492, 492, 0, 0, 0, 0, 0, 0, 343,
	345, 346, 347, 366, 0, 368, 0, 0, 41, 45,
	0, 801, 581, -2, -2, 0, 0, 617, 618, -2,
	728, -2, 615, 616, 623, 624, 625, 626, 627, 628,
	629, 630, 631, 632, 633, 634, 635, 636, 637, 638,
	639, 640, 641, 642, 643, 644, 645, 646, 647, 648,
	649, 650, 651, 652, 653, 654, 655, 656, 657, 658,
	659, 660, 661, 662, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
	689, 690, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 0, 81,
	0, 0, 826, 0, 71, 0, 0, 0, 0, 0,
	826, 0, 0, 0, 0, 0, 0, 0, 262, 0,
	264, 826, 826, 826, 826, 826, 826, 826, 826, 273,
	827, 828, 274, 275, 276, 826, 826, 278, 0, 293,
	0, 287, 28, 824, 22, 0, 0, 554, 0, 546,
	547, 550, 553, 27, 321, 0, 326, 325, 317, 0,
	333, 0, 0, 0, 337, 0, 339, 340, 0, 396,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 420,
	421, 422, 423, 424, 425, 426, 399, 0, 413, 0,
	0, 0, 455, 456, 457, 458, 459, 460, 0, 328,
	27, 0, 433, 0, 0, 0, 0, 0, 0, 0,
	0, 324, 0, 519, 0, 484, 0, 485, 486, 487,
	488, 489, 490, 491, 0, 328, 0, 0, 43, 0,
	384, 0, 0, 0, 0, 0, 0, 373, 0, 0,
	376, 0, 0, 0, 0, 367, 0, 0, 387, 772,
	369, 0, 371, 372, -2, 0, 0, 0, 39, 40,
	0, 46, 801, 48, 49, 0, 0, 0, 172, 589,
	590, 591, 587, 210, 0, 85, 91, 165, 87, 88,
	89, 90, 158, 108, 128, 129, 158, 158, 158, 158,
	158, 169, 169, 169, 169, 140, 141, 142, 143, 144,
	145, 0, 0, 123, 158, 158, 158, 127, 148, 149,
	150, 151, 152, 153, 154, 155, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 160, 160, 160, 162, 162,
	0, 64, 0, 74, 0, 826, 0, 826, 79, 0,
	0, 229, 0, 257, 595, 0, 826, 260, 261, 386,
	621, 622, 265, 266, 267, 268, 269, 270, 271, 272,
	277, 280, 294, 288, 289, 282, 558, 0, 0, 0,
	0, 0, 549, 551, 552, 557, 30, 324, 0, 538,
	0, 0, 0, 327, 25, 394, 395, 397, 414, 0,
	416, 418, 338, 334, 0, 528, -2, 404, 405, 429,
	430, 431, 0, 0, 0, 0, 427, 409, 0, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 449, 450,
	451, 454, 503, 504, 0, 452, 453, 461, 0, 0,
	329, 330, 432, 0, 576, 27, 0, 0, 0, 0,
	0, 527, 0, 0, 0, 0, 525, 522, 0, 0,
	493, 0, 0, 0, 0, 0, 0, 383, 391, 578,
	0, 344, 362, 364, 0, 359, 374, 375, 377, 0,
	379, 0, 381, 382, 348, 349, 350, 0, 0, 0,
	0, 370, 391, 0, 391, 42, 582, 47, 0, 0,
	52, 53, 583, 584, 585, 0, 80, 211, 213, 216,
	217, 218, 82, 83, 84, 0, 196, 0, 0, 0,
	0, 0, 206, 191, 192, 92, 0, 0, 0, 101,
	0, 103, 105, 0, 167, 166, 107, 0, 169, 169,
	158, 169, 134, 135, 172, 0, 172, 172, 172, 0,
	0, 124, 125, 126, 118, 0, 119, 120, 121, 0,
	122, 0, 0, 826, 66, 0, 72, 73, 67, 597,
	68, 825, 69, 0, 610, 230, 600, 601, 602, 603,
	604, 605, 606, 607, 608, 609, 0, 0, 256, 826,
	259, 297, 0, 0, 0, 555, 556, 0, 548, 23,
	0, 592, 593, 539, 540, 341, 415, 417, 419, 0,
	328, 406, 427, 410, 0, 407, 0, 0, 401, 466,
	0, 0, 434, -2, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 545, 0, 523, 0, 0,
	483, 494, 495, 496, 497, 570, 0, 0, -2, 0,
	0, 545, 0, 0, 0, 356, 363, 0, 0, 357,
	0, 358, 378, 380, 0, 0, 0, 0, 354, 545,
	391, 38, 50, 51, 0, 0, 57, 173, 0, 214,
	0, 0, 0, 184, 0, 0, 187, 0, 189, 190,
	0, 207, 93, 94, 95, 96, 97, 98, 99, 0,
	102, 104, 106, 86, 168, 0, 172, 172, 169, 172,
	136, 0, 137, 138, 139, 0, 156, 0, 0, 0,
	0, 0, 65, 75, 76, 0, 219, 0, 825, 0,
	244, 245, 246, 247, 248, 249, 250, 825, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	0, 825, 611, 612, 613, 614, 0, 0, 258, 279,
	0, 0, 295, 296, 559, 0, 24, 391, 0, 335,
	529, 0, 408, 0, 428, 411, 467, 331, 0, 158,
	158, 508, 158, 162, 511, 158, 513, 158, 516, 0,
	0, 0, 0, 528, 0, 0, 0, 520, 482, 526,
	0, 31, 0, 570, 560, 572, 574, 0, 27, 0,
	566, 0, 553, 579, 392, 580, 360, 0, 365, 0,
	0, 0, 368, 0, 553, 37, 54, 55, 56, 212,
	215, 0, 193, 158, 0, 0, 185, 186, 188, 0,
	100, 159, 130, 131, 172, 132, 170, 171, 169, 0,
	169, 0, 163, 0, 0, 0, 0, 0, 0, 0,
	242, 243, 223, 0, 224, 226, 227, 228, 0, 206,
	222, 298, 299, 541, 342, 468, 412, 471, 505, 169,
	509, 510, 512, 514, 515, 517, 473, 472, 474, 0,
	0, 477, 0, 0, 0, 0, 0, 524, 0, 32,
	0, 575, -2, 0, 0, 0, 44, 35, 0, 352,
	0, 0, 0, 387, 355, 36, 175, 0, 195, 197,
	202, 203, 0, 0, 198, 206, 133, 172, 157, 172,
	0, 0, 0, 0, 0, 77, 78, 0, 0, 0,
	207, 543, 0, 506, 507, 0, 0, 0, 0, 498,
	481, 521, 0, 573, 0, -2, 0, 568, 567, 0,
	361, 388, 389, 390, 351, 174, 176, 0, 182, 0,
	0, 194, 0, 204, 205, 0, 0, 146, 147, 161,
	164, 61, 0, 0, 0, 0, 0, 0, 26, 0,
	0, 475, 476, 478, 479, 0, 0, 0, 0, 563,
	27, 0, 353, 177, 178, 0, 183, 180, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 252, 0, 0,
	544, 542, 480, 0, 0, 0, 571, -2, 569, 179,
	181, 199, 200, 0, 208, 63, 62, 220, 74, 251,
	0, 0, 0, 499, 0, 502, 0, 0, 225, 253,
	0, 0, 500, 0, 209, 0, 221, 0, 0, 0,
	0, 0, 0, 501, 0, 0, 0, 201, 254, 255,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 260,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:310
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:315
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:316
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:320
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:343
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:351
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:355
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:361
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:368
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:374
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:378
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:384
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:388
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:395
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:407
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:419
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:423
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:429
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:435
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:439
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:443
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:448
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:449
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:453
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:457
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:462
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:466
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:472
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:476
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:480
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:484
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:490
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:494
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:500
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:504
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:508
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:522
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:532
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:536
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:542
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:547
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:562
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:577
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:591
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:595
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:599
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:607
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:611
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:616
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:620
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:625
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:629
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:635
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:640
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:645
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:651
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:656
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:662
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:668
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:675
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:682
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:687
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:691
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:695
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:701
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:706
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:717
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:727
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:732
		{
			yyDollar[1].columnType.NotNull = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:737
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:742
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:747
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:752
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:757
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:762
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:767
		{
			yyDollar[1].columnType.OnUpdate = NewValArg(yyDollar[4].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:772
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:777
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:782
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:787
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:792
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:797
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:804
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:809
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1008
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1012
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1016
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1020
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1026
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1031
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1036
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1040
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1045
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 161:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1049
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1057
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1061
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1067
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1075
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1079
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1084
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1088
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1093
		{
			yyVAL.str = ""
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1097
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1101
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1106
		{
			yyVAL.str = ""
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1110
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1116
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1120
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1126
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1130
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1136
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1140
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1145
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1149
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1155
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1159
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1165
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1169
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1173
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1177
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1181
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1185
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1189
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1195
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1199
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1205
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1209
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1215
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1222
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1228
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1234
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1240
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 201:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1248
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1260
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1264
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1268
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1272
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1277
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1284
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1288
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1293
		{
			yyVAL.str = ""
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1297
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1301
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1309
		{
			yyVAL.str = yyDollar[1].str
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1313
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1317
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1323
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1327
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1331
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1337
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1341
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 221:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1355
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1369
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1378
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1382
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1386
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1399
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1409
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1414
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1419
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1423
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 251:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1455
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1461
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1465
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 254:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1471
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 255:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1475
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1481
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1487
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 258:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1495
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1500
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1508
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1512
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1518
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1522
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1527
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1533
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1537
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1541
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1546
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1550
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1558
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1562
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1566
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1570
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1574
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1578
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1582
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1586
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1590
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1600
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1604
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1608
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1612
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1616
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1620
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1624
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1634
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1640
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1644
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1650
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1654
		{
			yyVAL.str = "extended "
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1660
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1664
		{
			yyVAL.str = "full "
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1670
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1674
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1678
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1684
		{
			yyVAL.showFilter = nil
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1688
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1692
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1698
		{
			yyVAL.str = ""
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1702
		{
			yyVAL.str = SessionStr
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1706
		{
			yyVAL.str = GlobalStr
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1712
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1716
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1722
		{
			yyVAL.statement = &Begin{}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1726
		{
			yyVAL.statement = &Begin{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1732
		{
			yyVAL.statement = &Commit{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1738
		{
			yyVAL.statement = &Rollback{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1744
		{
			yyVAL.statement = &OtherRead{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1748
		{
			yyVAL.statement = &OtherRead{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1752
		{
			yyVAL.statement = &OtherRead{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1756
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1760
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1765
		{
			setAllowComments(yylex, true)
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1769
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1775
		{
			yyVAL.bytes2 = nil
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1779
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1785
		{
			yyVAL.str = UnionStr
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1789
		{
			yyVAL.str = UnionAllStr
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1793
		{
			yyVAL.str = UnionDistinctStr
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1798
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1802
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1806
		{
			yyVAL.str = SQLCacheStr
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1811
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1815
		{
			yyVAL.str = DistinctStr
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1820
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1824
		{
			yyVAL.str = StraightJoinHint
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1829
		{
			yyVAL.selectExprs = nil
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1833
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1839
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1843
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1849
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1853
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1857
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1861
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1866
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1870
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1874
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1881
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1886
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1890
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1896
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1900
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1910
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1914
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1918
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1924
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 351:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1928
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1934
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1938
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1944
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1948
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1961
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1965
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1969
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1973
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1979
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1981
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1985
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1987
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1991
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1993
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1996
		{
			yyVAL.empty = struct{}{}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1998
		{
			yyVAL.empty = struct{}{}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2001
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2005
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2009
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2016
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2022
		{
			yyVAL.str = JoinStr
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2026
		{
			yyVAL.str = JoinStr
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2030
		{
			yyVAL.str = JoinStr
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2036
		{
			yyVAL.str = StraightJoinStr
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2042
		{
			yyVAL.str = LeftJoinStr
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2046
		{
			yyVAL.str = LeftJoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2050
		{
			yyVAL.str = RightJoinStr
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2054
		{
			yyVAL.str = RightJoinStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2060
		{
			yyVAL.str = NaturalJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2064
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2074
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2078
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2084
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2088
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2093
		{
			yyVAL.indexHints = nil
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2097
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2101
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2105
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2110
		{
			yyVAL.expr = nil
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2114
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2120
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2124
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2128
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2132
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2136
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2140
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2144
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2150
		{
			yyVAL.str = ""
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2154
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2160
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2164
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2170
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2174
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2178
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2182
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2186
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2190
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2194
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2198
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 412:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2202
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2206
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2212
		{
			yyVAL.str = IsNullStr
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2216
		{
			yyVAL.str = IsNotNullStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2220
		{
			yyVAL.str = IsTrueStr
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2224
		{
			yyVAL.str = IsNotTrueStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2228
		{
			yyVAL.str = IsFalseStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2232
		{
			yyVAL.str = IsNotFalseStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2238
		{
			yyVAL.str = EqualStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2242
		{
			yyVAL.str = LessThanStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2246
		{
			yyVAL.str = GreaterThanStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2250
		{
			yyVAL.str = LessEqualStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2254
		{
			yyVAL.str = GreaterEqualStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2258
		{
			yyVAL.str = NotEqualStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2262
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2267
		{
			yyVAL.expr = nil
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2271
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2277
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2281
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2285
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2291
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2297
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2301
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2307
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2311
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2315
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2319
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2323
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2327
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2331
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2335
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2339
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2343
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2347
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2351
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2355
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2359
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2363
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2367
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2371
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2375
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2379
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2383
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2387
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2391
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2395
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2403
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2417
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2421
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2425
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2443
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2447
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2451
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2461
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2465
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2469
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2473
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2477
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2481
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 475:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2485
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2489
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2493
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2497
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 479:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2501
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 480:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2505
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 481:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2509
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2513
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2517
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2527
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2531
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2535
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2539
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2544
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2549
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2554
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2559
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2573
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2577
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2581
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2585
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2591
		{
			yyVAL.str = ""
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2595
		{
			yyVAL.str = BooleanModeStr
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2599
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 501:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2603
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2607
		{
			yyVAL.str = QueryExpansionStr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2613
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2617
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2623
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2627
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2631
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2635
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2639
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2643
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2649
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2653
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2657
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2661
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2665
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2669
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2673
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2678
		{
			yyVAL.expr = nil
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2682
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2687
		{
			yyVAL.str = string("")
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2691
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2697
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2701
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2707
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2712
		{
			yyVAL.expr = nil
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2716
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2722
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2726
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 529:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2730
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2736
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2740
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2744
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2748
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2752
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2756
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2760
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2764
		{
			yyVAL.expr = &NullVal{}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2770
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2779
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2783
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2788
		{
			yyVAL.exprs = nil
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2792
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2797
		{
			yyVAL.expr = nil
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2801
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2806
		{
			yyVAL.orderBy = nil
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2810
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2816
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2820
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2826
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2831
		{
			yyVAL.str = AscScr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2835
		{
			yyVAL.str = AscScr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2839
		{
			yyVAL.str = DescScr
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2844
		{
			yyVAL.limit = nil
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2848
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2852
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2856
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2861
		{
			yyVAL.str = ""
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2865
		{
			yyVAL.str = ForUpdateStr
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2869
		{
			yyVAL.str = ShareModeStr
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2882
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2886
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2890
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2895
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2899
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 565:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2903
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2910
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2914
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2918
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2922
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2927
		{
			yyVAL.updateExprs = nil
		}
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2931
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2937
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2941
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2947
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2951
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2957
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2963
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2973
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2977
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2983
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2989
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2993
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2999
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3003
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3007
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3014
		{
			yyVAL.bytes = []byte("charset")
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3021
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3025
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3029
		{
			yyVAL.expr = &Default{}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3038
		{
			yyVAL.byt = 0
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3040
		{
			yyVAL.byt = 1
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3043
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3045
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3048
		{
			yyVAL.str = ""
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3050
		{
			yyVAL.str = IgnoreStr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3054
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3056
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3058
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3060
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3062
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3064
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3066
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3068
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3070
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3072
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3075
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3077
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3079
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3083
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3085
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3089
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3093
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3100
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3106
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3110
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3117
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3343
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3352
		{
			decNesting(yylex)
		}
	case 825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3357
		{
			forceEOF(yylex)
		}
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3362
		{
			forceEOF(yylex)
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3366
		{
			forceEOF(yylex)
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3370
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
