// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	newQualifierColName  *NewQualifierColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	checkDefinition      *CheckDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
	blockStatement       []Statement
	localVariable        *LocalVariable
	localVariables       []*LocalVariable
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const REFERENCES = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const POLICY = 57459
const WHILE = 57460
const UNIQUE = 57461
const KEY = 57462
const SHOW = 57463
const DESCRIBE = 57464
const EXPLAIN = 57465
const DATE = 57466
const ESCAPE = 57467
const REPAIR = 57468
const OPTIMIZE = 57469
const TRUNCATE = 57470
const MAXVALUE = 57471
const PARTITION = 57472
const REORGANIZE = 57473
const LESS = 57474
const THAN = 57475
const PROCEDURE = 57476
const TRIGGER = 57477
const TYPE = 57478
const VINDEX = 57479
const VINDEXES = 57480
const STATUS = 57481
const VARIABLES = 57482
const RESTRICT = 57483
const CASCADE = 57484
const NO = 57485
const ACTION = 57486
const PERMISSIVE = 57487
const RESTRICTIVE = 57488
const PUBLIC = 57489
const CURRENT_USER = 57490
const SESSION_USER = 57491
const PAD_INDEX = 57492
const FILLFACTOR = 57493
const IGNORE_DUP_KEY = 57494
const STATISTICS_NORECOMPUTE = 57495
const STATISTICS_INCREMENTAL = 57496
const ALLOW_ROW_LOCKS = 57497
const ALLOW_PAGE_LOCKS = 57498
const BEFORE = 57499
const AFTER = 57500
const EACH = 57501
const ROW = 57502
const SCROLL = 57503
const CURSOR = 57504
const OPEN = 57505
const CLOSE = 57506
const FETCH = 57507
const PRIOR = 57508
const FIRST = 57509
const LAST = 57510
const DEALLOCATE = 57511
const DEFERRABLE = 57512
const INITIALLY = 57513
const IMMEDIATE = 57514
const DEFERRED = 57515
const BEGIN = 57516
const START = 57517
const TRANSACTION = 57518
const COMMIT = 57519
const ROLLBACK = 57520
const BIT = 57521
const TINYINT = 57522
const SMALLINT = 57523
const SMALLSERIAL = 57524
const MEDIUMINT = 57525
const INT = 57526
const INTEGER = 57527
const SERIAL = 57528
const BIGINT = 57529
const BIGSERIAL = 57530
const INTNUM = 57531
const REAL = 57532
const DOUBLE = 57533
const PRECISION = 57534
const FLOAT_TYPE = 57535
const DECIMAL = 57536
const NUMERIC = 57537
const SMALLMONEY = 57538
const MONEY = 57539
const TIME = 57540
const TIMESTAMP = 57541
const DATETIME = 57542
const YEAR = 57543
const DATETIMEOFFSET = 57544
const DATETIME2 = 57545
const SMALLDATETIME = 57546
const CHAR = 57547
const VARCHAR = 57548
const VARYING = 57549
const BOOL = 57550
const CHARACTER = 57551
const VARBINARY = 57552
const NCHAR = 57553
const NVARCHAR = 57554
const NTEXT = 57555
const UUID = 57556
const TEXT = 57557
const TINYTEXT = 57558
const MEDIUMTEXT = 57559
const LONGTEXT = 57560
const CITEXT = 57561
const BLOB = 57562
const TINYBLOB = 57563
const MEDIUMBLOB = 57564
const LONGBLOB = 57565
const JSON = 57566
const JSONB = 57567
const ENUM = 57568
const GEOMETRY = 57569
const POINT = 57570
const LINESTRING = 57571
const POLYGON = 57572
const GEOMETRYCOLLECTION = 57573
const MULTIPOINT = 57574
const MULTILINESTRING = 57575
const MULTIPOLYGON = 57576
const ARRAY = 57577
const NOW = 57578
const GETDATE = 57579
const BPCHAR = 57580
const TEXT_PATTERN_OPS = 57581
const NULLX = 57582
const AUTO_INCREMENT = 57583
const APPROXNUM = 57584
const SIGNED = 57585
const UNSIGNED = 57586
const ZEROFILL = 57587
const ZONE = 57588
const AUTOINCREMENT = 57589
const DATABASES = 57590
const TABLES = 57591
const VITESS_KEYSPACES = 57592
const VITESS_SHARDS = 57593
const VITESS_TABLETS = 57594
const VSCHEMA_TABLES = 57595
const EXTENDED = 57596
const FULL = 57597
const PROCESSLIST = 57598
const NAMES = 57599
const CHARSET = 57600
const GLOBAL = 57601
const SESSION = 57602
const ISOLATION = 57603
const LEVEL = 57604
const READ = 57605
const WRITE = 57606
const ONLY = 57607
const REPEATABLE = 57608
const COMMITTED = 57609
const UNCOMMITTED = 57610
const SERIALIZABLE = 57611
const NEW = 57612
const CURRENT_TIMESTAMP = 57613
const DATABASE = 57614
const CURRENT_DATE = 57615
const CURRENT_TIME = 57616
const LOCALTIME = 57617
const LOCALTIMESTAMP = 57618
const UTC_DATE = 57619
const UTC_TIME = 57620
const UTC_TIMESTAMP = 57621
const REPLACE = 57622
const CONVERT = 57623
const CAST = 57624
const SUBSTR = 57625
const SUBSTRING = 57626
const GROUP_CONCAT = 57627
const SEPARATOR = 57628
const INHERIT = 57629
const MATCH = 57630
const AGAINST = 57631
const BOOLEAN = 57632
const LANGUAGE = 57633
const WITH = 57634
const WITHOUT = 57635
const PARSER = 57636
const QUERY = 57637
const EXPANSION = 57638
const UNUSED = 57639
const VIRTUAL = 57640
const GENERATED = 57641
const ALWAYS = 57642
const IDENTITY = 57643
const SEQUENCE = 57644
const INCREMENT = 57645
const MINVALUE = 57646
const CACHE = 57647
const CYCLE = 57648
const OWNED = 57649
const NONE = 57650
const CLUSTERED = 57651
const NONCLUSTERED = 57652
const REPLICATION = 57653
const INCLUDE = 57654
const HOLDLOCK = 57655
const NOLOCK = 57656
const NOWAIT = 57657
const PAGLOCK = 57658
const ROWLOCK = 57659
const TABLELOCK = 57660
const TYPECAST = 57661
const CHECK = 57662

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	122, 139,
	-2, 129,
	-1, 36,
	156, 463,
	157, 463,
	-2, 453,
	-1, 272,
	110, 809,
	-2, 805,
	-1, 273,
	110, 810,
	-2, 806,
	-1, 345,
	81, 1026,
	-2, 81,
	-1, 346,
	81, 977,
	-2, 82,
	-1, 352,
	81, 956,
	-2, 776,
	-1, 354,
	81, 1000,
	-2, 778,
	-1, 674,
	52, 41,
	54, 41,
	-2, 43,
	-1, 835,
	110, 812,
	-2, 808,
	-1, 1082,
	5, 28,
	-2, 608,
	-1, 1107,
	5, 27,
	-2, 749,
	-1, 1211,
	5, 27,
	-2, 87,
	-1, 1435,
	5, 28,
	-2, 750,
	-1, 1533,
	5, 27,
	-2, 752,
	-1, 1697,
	5, 28,
	-2, 753,
	-1, 1842,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 16645

var yyAct = [...]int{
	356, 1630, 1798, 1545, 1687, 21, 1799, 1015, 1110, 1671,
	1653, 532, 1548, 1587, 1441, 765, 1464, 277, 268, 251,
	1123, 900, 601, 1445, 1704, 1300, 53, 811, 1147, 1330,
	918, 1213, 1301, 276, 1329, 90, 304, 1169, 90, 668,
	1202, 484, 1297, 1010, 245, 666, 949, 600, 3, 942,
	1023, 1175, 943, 1024, 964, 901, 1128, 871, 1074, 771,
	273, 255, 90, 90, 1273, 66, 860, 1199, 837, 684,
	280, 351, 1005, 1115, 90, 1144, 888, 538, 482, 90,
	683, 90, 897, 344, 868, 655, 870, 90, 246, 247,
	248, 249, 544, 670, 1746, 250, 275, 959, 704, 260,
	341, 332, 699, 624, 1056, 552, 331, 330, 1446, 1447,
	1448, 1449, 1450, 1451, 1183, 339, 977, 264, 519, 980,
	1822, 1337, 52, 1791, 1356, 560, 566, 563, 576, 576,
	1733, 1470, 335, 578, 579, 580, 581, 582, 583, 584,
	1344, 561, 562, 559, 565, 564, 574, 575, 567, 568,
	569, 570, 571, 572, 573, 566, 1425, 531, 576, 1621,
	565, 564, 574, 575, 567, 568, 569, 570, 571, 572,
	573, 566, 485, 486, 576, 1478, 1722, 1852, 1765, 1634,
	1847, 1343, 347, 1695, 1635, 938, 1167, 1203, 1204, 1777,
	1833, 1016, 1422, 531, 565, 564, 574, 575, 567, 568,
	569, 570, 571, 572, 573, 566, 979, 1784, 576, 564,
	574, 575, 567, 568, 569, 570, 571, 572, 573, 566,
	977, 1737, 576, 1124, 90, 1764, 1292, 1719, 1429, 517,
	565, 564, 574, 575, 567, 568, 569, 570, 571, 572,
	573, 566, 966, 1694, 576, 496, 1324, 1325, 85, 81,
	82, 83, 531, 273, 273, 1323, 973, 1136, 962, 685,
	1135, 686, 615, 1137, 963, 932, 933, 931, 527, 1498,
	273, 1182, 569, 570, 571, 572, 573, 566, 1497, 982,
	576, 540, 273, 273, 273, 273, 273, 273, 273, 565,
	564, 574, 575, 567, 568, 569, 570, 571, 572, 573,
	566, 1185, 984, 576, 541, 1179, 273, 1181, 1180, 1656,
	994, 1376, 1578, 892, 802, 273, 1426, 969, 1375, 965,
	974, 803, 1522, 984, 244, 1418, 1723, 971, 970, 1416,
	90, 1850, 1338, 1755, 1006, 1845, 1844, 90, 90, 90,
	1829, 1830, 1803, 1796, 773, 587, 565, 564, 574, 575,
	567, 568, 569, 570, 571, 572, 573, 566, 577, 577,
	576, 574, 575, 567, 568, 569, 570, 571, 572, 573,
	566, 485, 486, 576, 1564, 1666, 772, 1622, 1589, 1386,
	1387, 1654, 1783, 1467, 1785, 523, 524, 1846, 577, 565,
	564, 574, 575, 567, 568, 569, 570, 571, 572, 573,
	566, 1831, 1423, 576, 577, 1676, 1688, 335, 1251, 567,
	568, 569, 570, 571, 572, 573, 566, 1727, 84, 576,
	898, 1689, 1530, 629, 1346, 1392, 960, 630, 1472, 1471,
	1161, 1729, 773, 1160, 1336, 1149, 1515, 1635, 577, 1776,
	1479, 1393, 961, 681, 1811, 1402, 1612, 501, 490, 967,
	79, 78, 577, 79, 675, 968, 1802, 1506, 520, 521,
	522, 347, 525, 1724, 781, 487, 1154, 1127, 1126, 529,
	1125, 763, 497, 1252, 577, 565, 564, 574, 575, 567,
	568, 569, 570, 571, 572, 573, 566, 1166, 90, 576,
	1007, 223, 994, 80, 987, 1837, 90, 1626, 90, 774,
	775, 90, 1693, 1438, 90, 1462, 1260, 975, 90, 976,
	577, 1465, 1466, 1468, 1090, 1268, 565, 564, 574, 575,
	567, 568, 569, 570, 571, 572, 573, 566, 972, 90,
	576, 960, 1152, 577, 1051, 565, 564, 574, 575, 567,
	568, 569, 570, 571, 572, 573, 566, 961, 90, 576,
	273, 273, 1068, 1677, 1678, 1679, 809, 273, 688, 273,
	814, 599, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 556, 697, 790,
	617, 618, 619, 620, 621, 622, 623, 774, 775, 507,
	577, 1725, 1726, 1728, 1730, 1731, 838, 960, 806, 273,
	589, 590, 1248, 577, 273, 273, 273, 273, 273, 273,
	273, 273, 788, 961, 1052, 273, 940, 939, 919, 921,
	1370, 844, 550, 549, 551, 1087, 881, 884, 835, 1296,
	839, 808, 890, 577, 302, 842, 843, 841, 530, 551,
	1256, 1646, 816, 550, 549, 273, 273, 273, 273, 577,
	90, 876, 273, 90, 90, 90, 90, 90, 1645, 831,
	551, 833, 1644, 549, 1643, 90, 531, 807, 90, 902,
	1642, 1371, 90, 550, 549, 834, 629, 90, 90, 551,
	630, 863, 550, 549, 550, 549, 865, 866, 273, 1641,
	551, 877, 878, 920, 889, 1640, 1638, 885, 350, 551,
	1249, 551, 1247, 488, 886, 1383, 492, 493, 500, 1146,
	1138, 1113, 687, 305, 47, 876, 1250, 1255, 872, 577,
	812, 813, 926, 335, 335, 335, 335, 335, 780, 1841,
	894, 893, 512, 895, 896, 1549, 1294, 1843, 335, 791,
	792, 793, 794, 795, 796, 797, 798, 335, 1551, 915,
	889, 768, 1097, 799, 800, 904, 905, 924, 907, 903,
	577, 47, 906, 929, 928, 923, 550, 549, 1705, 256,
	1086, 90, 1085, 90, 947, 336, 1563, 1157, 1566, 577,
	90, 1562, 90, 551, 546, 90, 1778, 1706, 77, 550,
	549, 1814, 503, 504, 505, 50, 514, 489, 516, 347,
	1146, 1549, 1145, 1146, 1012, 840, 551, 937, 273, 273,
	273, 273, 1813, 944, 1551, 1782, 1550, 827, 829, 830,
	1781, 1780, 273, 828, 1146, 1156, 1058, 513, 515, 1779,
	1008, 1009, 1707, 257, 1703, 48, 26, 27, 1065, 1066,
	1067, 1576, 993, 273, 273, 273, 1500, 1601, 76, 329,
	1552, 1553, 1554, 1555, 1556, 1557, 1558, 28, 1499, 1352,
	1208, 1206, 350, 350, 350, 350, 1186, 350, 491, 1491,
	273, 1029, 495, 1186, 350, 273, 1490, 1639, 838, 1636,
	1186, 835, 1550, 1529, 861, 1341, 862, 273, 1057, 270,
	273, 1495, 1404, 1200, 1163, 1340, 70, 74, 1664, 1857,
	531, 554, 1537, 1839, 1459, 1832, 1659, 1858, 1064, 1339,
	1070, 71, 839, 75, 1459, 1790, 1552, 1553, 1554, 1555,
	1556, 1557, 1558, 1459, 1789, 1658, 90, 1155, 834, 72,
	73, 68, 1139, 1130, 1018, 1132, 1459, 1772, 1664, 1771,
	1583, 518, 518, 518, 518, 1107, 518, 1768, 1767, 1760,
	531, 1582, 1607, 518, 1459, 1757, 1079, 1459, 1756, 1537,
	1685, 1577, 1606, 864, 1096, 511, 1459, 1660, 1537, 1573,
	47, 1131, 787, 1094, 786, 90, 769, 350, 1537, 531,
	1120, 1540, 1539, 1492, 690, 586, 1537, 1538, 588, 1459,
	1458, 1481, 1547, 1320, 531, 1141, 335, 1019, 767, 1021,
	1133, 1437, 531, 1379, 1378, 1373, 1374, 1602, 1603, 1605,
	509, 1177, 502, 1604, 483, 1049, 598, 1373, 1372, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 1513, 614,
	616, 616, 616, 616, 616, 616, 616, 616, 1363, 644,
	645, 646, 647, 1205, 1080, 531, 652, 531, 1162, 1665,
	667, 1664, 90, 90, 1150, 1151, 1153, 1112, 1633, 1218,
	90, 944, 1211, 874, 531, 925, 69, 677, 1201, 1111,
	273, 695, 694, 1112, 874, 1220, 273, 273, 1744, 1263,
	1207, 273, 57, 1298, 1217, 678, 1111, 1218, 1219, 273,
	273, 273, 273, 273, 1171, 1172, 1173, 1221, 273, 652,
	1433, 651, 1176, 1174, 300, 301, 273, 59, 60, 61,
	62, 63, 273, 273, 273, 1111, 54, 273, 703, 652,
	273, 1293, 1080, 902, 49, 652, 679, 1299, 677, 902,
	1267, 1502, 1501, 350, 1480, 1214, 1382, 1308, 1272, 273,
	1322, 1377, 1092, 1302, 350, 350, 350, 350, 350, 350,
	350, 350, 1286, 1285, 1266, 1080, 1304, 1321, 350, 350,
	1089, 1140, 835, 930, 1080, 680, 1307, 1309, 983, 23,
	23, 591, 592, 593, 594, 595, 596, 597, 818, 1193,
	815, 1195, 1196, 1197, 1198, 1091, 810, 1265, 554, 257,
	1327, 350, 50, 1105, 23, 1328, 1106, 1342, 1848, 1788,
	1762, 1662, 766, 1088, 1177, 1661, 1650, 1649, 1353, 1289,
	90, 1347, 518, 1345, 1609, 1608, 50, 50, 90, 1575,
	1516, 1532, 984, 518, 518, 518, 518, 518, 518, 518,
	518, 1011, 867, 1362, 350, 1361, 50, 518, 518, 873,
	875, 50, 1359, 882, 882, 1349, 90, 1315, 1313, 882,
	1209, 1210, 822, 1006, 1168, 891, 1143, 273, 1000, 944,
	999, 944, 1116, 1117, 90, 65, 1631, 1655, 1395, 273,
	1390, 1406, 1389, 483, 1503, 1298, 1119, 1397, 1253, 784,
	770, 657, 660, 661, 662, 658, 882, 659, 663, 1178,
	1182, 1400, 528, 912, 1122, 910, 1121, 273, 913, 1403,
	911, 909, 47, 908, 273, 917, 1808, 1763, 914, 1407,
	661, 662, 261, 262, 1259, 350, 1053, 603, 1806, 1063,
	90, 1062, 1414, 350, 1179, 1194, 1181, 1180, 1440, 350,
	693, 1452, 1453, 1454, 335, 510, 1351, 545, 960, 1431,
	542, 1457, 1432, 955, 533, 954, 1797, 956, 957, 273,
	543, 1469, 1350, 958, 961, 1517, 534, 812, 813, 1455,
	1020, 783, 1216, 1014, 1477, 776, 336, 336, 336, 336,
	336, 665, 545, 1364, 1365, 1823, 1367, 1368, 1369, 1265,
	1141, 667, 1512, 922, 54, 1474, 1385, 1335, 1177, 1061,
	336, 252, 1482, 1786, 258, 259, 1615, 1060, 1013, 253,
	1614, 1520, 350, 1112, 350, 1752, 657, 660, 661, 662,
	658, 703, 659, 663, 1504, 1751, 1116, 1117, 1750, 1749,
	350, 547, 1475, 273, 273, 1648, 273, 273, 273, 293,
	292, 295, 296, 297, 298, 1647, 1505, 1623, 294, 299,
	1025, 1026, 1027, 1159, 350, 805, 944, 56, 836, 1721,
	1720, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 1531, 1334, 1333, 58,
	1302, 1596, 8, 1223, 273, 1593, 7, 1594, 6, 273,
	1391, 518, 676, 518, 1533, 51, 1544, 1, 1560, 1559,
	1508, 1828, 1509, 1510, 1511, 1592, 5, 1801, 278, 518,
	1567, 1214, 944, 1077, 90, 1507, 1444, 1078, 1745, 1669,
	266, 1740, 1590, 1675, 1569, 1082, 1083, 1084, 1657, 1600,
	1591, 1165, 67, 1736, 1093, 1663, 1579, 1355, 1384, 1099,
	1215, 1610, 1100, 1101, 1102, 1103, 1584, 1232, 1017, 1212,
	1561, 1034, 1686, 1700, 1546, 1565, 1461, 952, 1069, 941,
	481, 64, 1493, 1637, 953, 337, 951, 1129, 1624, 1632,
	995, 996, 997, 998, 1628, 1629, 950, 948, 696, 1302,
	978, 1184, 273, 981, 702, 700, 701, 350, 698, 705,
	231, 342, 1625, 664, 689, 548, 1246, 1245, 1030, 1148,
	87, 1254, 801, 1050, 526, 233, 1600, 1667, 585, 1059,
	1158, 1134, 349, 1732, 1305, 537, 1613, 273, 273, 1519,
	1095, 1108, 1109, 612, 887, 273, 273, 279, 340, 826,
	291, 288, 290, 289, 273, 1680, 1682, 1668, 817, 494,
	1104, 558, 334, 648, 498, 656, 499, 654, 1691, 336,
	653, 902, 506, 1683, 1684, 1696, 1118, 1701, 1114, 333,
	1262, 350, 1428, 1620, 821, 25, 55, 263, 19, 18,
	17, 20, 1717, 1715, 1713, 1714, 273, 1708, 1709, 1710,
	1711, 1712, 1600, 1741, 16, 15, 14, 29, 13, 12,
	1580, 11, 1581, 350, 10, 1716, 1600, 1753, 1743, 9,
	1599, 1598, 1597, 1595, 4, 254, 1734, 1735, 22, 2,
	0, 1758, 0, 350, 0, 0, 565, 564, 574, 575,
	567, 568, 569, 570, 571, 572, 573, 566, 1271, 0,
	576, 0, 0, 0, 0, 350, 0, 0, 47, 1773,
	0, 0, 1071, 1072, 1073, 0, 0, 1774, 1775, 0,
	882, 1787, 0, 1306, 1129, 0, 882, 0, 1600, 1792,
	0, 0, 0, 0, 1794, 1793, 1075, 0, 1800, 0,
	1600, 1600, 518, 535, 539, 1805, 1804, 1319, 0, 0,
	0, 0, 0, 0, 0, 350, 1812, 350, 1331, 508,
	557, 1810, 0, 0, 0, 0, 0, 90, 0, 1769,
	1770, 1817, 273, 0, 1820, 0, 0, 1807, 1819, 0,
	0, 0, 0, 1818, 1600, 1826, 1600, 1826, 0, 0,
	0, 0, 90, 0, 1836, 0, 602, 0, 0, 1838,
	1303, 0, 47, 1840, 0, 613, 0, 0, 1187, 1188,
	0, 1190, 1191, 1192, 0, 0, 0, 0, 0, 1316,
	1317, 1318, 0, 0, 0, 1381, 0, 0, 0, 0,
	0, 0, 273, 1854, 0, 0, 1600, 1394, 536, 1396,
	1600, 1826, 1853, 0, 0, 0, 0, 0, 1398, 0,
	0, 1842, 0, 0, 0, 0, 1348, 985, 986, 988,
	989, 990, 0, 991, 992, 650, 1401, 0, 0, 0,
	0, 0, 1357, 88, 674, 350, 243, 0, 0, 0,
	1001, 1002, 1003, 0, 1004, 1408, 0, 0, 0, 0,
	0, 0, 1410, 0, 0, 0, 0, 0, 267, 0,
	88, 88, 0, 1274, 1419, 1420, 1421, 0, 0, 1424,
	0, 0, 88, 0, 0, 0, 0, 88, 0, 88,
	0, 0, 1434, 1435, 1436, 88, 1439, 0, 1442, 0,
	577, 1442, 1442, 1442, 0, 1456, 1849, 1276, 0, 0,
	0, 0, 350, 0, 0, 1269, 1270, 0, 0, 257,
	0, 48, 26, 27, 0, 0, 0, 336, 1287, 1288,
	1040, 1290, 1291, 1601, 1442, 0, 0, 0, 0, 0,
	0, 1483, 0, 28, 1039, 0, 1489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 350, 350, 0,
	0, 1044, 0, 0, 0, 0, 1514, 1278, 0, 0,
	1038, 1283, 1366, 1277, 1354, 0, 0, 1518, 1275, 1171,
	1172, 1173, 0, 764, 1281, 0, 0, 1176, 1174, 300,
	301, 777, 1473, 778, 0, 0, 782, 1279, 1280, 785,
	824, 825, 0, 0, 0, 0, 0, 1528, 0, 0,
	0, 0, 1535, 1536, 0, 0, 1282, 1284, 0, 1035,
	1032, 1033, 88, 1031, 804, 0, 0, 0, 1607, 0,
	0, 1541, 1542, 1543, 1331, 0, 0, 0, 1606, 1076,
	0, 0, 0, 823, 0, 0, 1568, 0, 0, 0,
	1228, 0, 1042, 1045, 602, 1572, 0, 879, 880, 565,
	564, 574, 575, 567, 568, 569, 570, 571, 572, 573,
	566, 0, 0, 576, 0, 0, 1331, 1585, 0, 0,
	0, 1588, 0, 1602, 1603, 1605, 0, 1303, 0, 1604,
	1534, 1442, 0, 0, 1754, 0, 1189, 0, 1409, 0,
	0, 0, 1616, 1617, 1618, 1619, 0, 0, 0, 0,
	0, 0, 1627, 0, 0, 0, 0, 0, 0, 0,
	1229, 1225, 1222, 0, 1230, 1227, 1226, 0, 88, 1571,
	75, 1037, 0, 0, 0, 88, 672, 88, 936, 0,
	0, 1231, 0, 0, 0, 899, 0, 0, 1224, 1651,
	0, 0, 0, 0, 0, 1494, 0, 1496, 0, 0,
	0, 0, 0, 1036, 0, 0, 0, 0, 0, 0,
	0, 1611, 0, 927, 1178, 1182, 1670, 1672, 1673, 1674,
	0, 0, 0, 1331, 1331, 0, 1303, 0, 47, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 882, 1692,
	49, 1698, 0, 1041, 1697, 0, 1699, 0, 0, 1179,
	1702, 1181, 1180, 0, 0, 0, 0, 0, 0, 1043,
	625, 0, 0, 0, 1588, 1331, 0, 0, 0, 0,
	0, 1718, 0, 0, 0, 0, 1331, 1331, 0, 1738,
	0, 0, 0, 0, 0, 703, 0, 0, 0, 0,
	1748, 0, 1523, 1524, 627, 1525, 1526, 1527, 1054, 1055,
	0, 539, 0, 1761, 0, 1759, 1022, 0, 1028, 0,
	0, 0, 0, 0, 0, 1046, 0, 1047, 0, 0,
	1048, 0, 0, 0, 0, 0, 88, 0, 1358, 1360,
	0, 0, 0, 0, 88, 0, 88, 0, 0, 88,
	0, 0, 88, 577, 0, 0, 789, 0, 1574, 632,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 1795,
	0, 0, 0, 0, 0, 1081, 0, 88, 0, 0,
	628, 0, 0, 0, 0, 0, 0, 1331, 642, 626,
	1098, 1809, 0, 0, 0, 631, 88, 0, 0, 0,
	0, 0, 0, 1766, 257, 789, 48, 26, 27, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 1601, 0,
	703, 0, 1824, 0, 0, 0, 0, 0, 28, 0,
	0, 0, 0, 1411, 1412, 0, 1413, 0, 1834, 0,
	1415, 0, 1417, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 267, 267, 0, 0, 883, 883, 267,
	0, 1170, 350, 883, 0, 0, 1171, 1172, 1173, 0,
	643, 0, 0, 1588, 1176, 1174, 300, 301, 1827, 0,
	0, 0, 0, 0, 1859, 1860, 1681, 1681, 0, 0,
	1460, 1463, 0, 267, 267, 267, 267, 0, 88, 0,
	883, 88, 88, 88, 88, 88, 0, 0, 257, 0,
	48, 26, 27, 916, 0, 0, 88, 0, 0, 0,
	672, 0, 1601, 1607, 0, 88, 88, 47, 0, 0,
	0, 0, 28, 1606, 23, 24, 48, 26, 27, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1851, 0, 0, 0, 42, 0, 0, 0, 28, 0,
	0, 0, 257, 0, 48, 26, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1601, 37, 1602, 1603,
	1605, 50, 1825, 0, 1604, 257, 28, 48, 26, 27,
	0, 0, 0, 0, 0, 0, 0, 0, 1295, 1601,
	0, 0, 0, 0, 0, 1261, 0, 0, 0, 28,
	0, 0, 0, 1310, 1311, 0, 0, 1312, 0, 88,
	1314, 88, 229, 0, 0, 0, 0, 1607, 88, 0,
	88, 0, 0, 88, 0, 0, 0, 1606, 0, 1326,
	0, 30, 31, 33, 32, 35, 239, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 789, 0,
	0, 1178, 1182, 0, 0, 0, 36, 43, 44, 0,
	267, 45, 46, 34, 0, 0, 0, 0, 0, 0,
	0, 1607, 1602, 1603, 1605, 0, 0, 0, 1604, 0,
	0, 1606, 0, 0, 0, 49, 1179, 224, 1181, 1180,
	0, 0, 0, 226, 1607, 1238, 0, 0, 0, 0,
	232, 228, 0, 0, 1606, 0, 0, 0, 267, 38,
	39, 0, 40, 41, 0, 0, 0, 0, 0, 0,
	0, 1855, 0, 0, 0, 267, 1602, 1603, 1605, 0,
	0, 230, 1604, 0, 0, 234, 0, 1742, 0, 0,
	0, 0, 0, 0, 0, 1380, 0, 1405, 0, 1602,
	1603, 1605, 0, 1388, 0, 1604, 0, 0, 0, 0,
	1239, 0, 0, 0, 88, 1241, 1234, 1235, 0, 1242,
	1237, 1236, 0, 0, 0, 1244, 1240, 0, 0, 0,
	0, 1399, 0, 0, 0, 0, 1243, 1430, 0, 49,
	0, 0, 0, 1233, 602, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 0, 0, 0,
	0, 0, 0, 1164, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1476,
	0, 0, 0, 49, 0, 227, 0, 235, 236, 237,
	238, 242, 0, 0, 0, 0, 241, 240, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1257, 1258, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 789,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 883, 0, 0, 0, 0, 0,
	883, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1586,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 1652, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 0, 93, 0, 0,
	0, 0, 88, 0, 117, 1690, 602, 0, 131, 315,
	134, 0, 0, 177, 143, 0, 0, 0, 0, 306,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 272, 293, 292, 295, 296, 297, 298, 0,
	0, 106, 294, 299, 300, 301, 0, 0, 0, 0,
	286, 0, 314, 0, 0, 0, 1739, 0, 672, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 0, 0, 0, 0, 327, 0,
	285, 0, 0, 281, 282, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 325, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 1856, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 1821, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 88, 207, 208, 209, 210, 1835, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 303, 316, 326, 322, 323, 320, 321,
	319, 318, 317, 328, 308, 309, 310, 311, 313, 0,
	126, 312, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 324, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 883, 0, 0, 0, 467, 457, 0, 418,
	469, 388, 406, 477, 408, 409, 444, 368, 427, 155,
	403, 386, 93, 391, 361, 398, 362, 389, 420, 117,
	387, 459, 430, 131, 475, 134, 435, 0, 177, 143,
	0, 0, 422, 461, 425, 452, 417, 445, 376, 434,
	470, 404, 440, 471, 0, 0, 0, 355, 0, 945,
	946, 0, 0, 0, 0, 0, 106, 0, 439, 466,
	400, 480, 443, 360, 437, 0, 366, 369, 476, 464,
	395, 396, 1142, 0, 0, 0, 0, 0, 0, 421,
	426, 449, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 392, 0, 433, 0, 0, 0, 373, 367, 0,
	419, 0, 0, 0, 375, 0, 393, 450, 0, 357,
	455, 462, 416, 204, 465, 413, 412, 162, 0, 109,
	0, 183, 121, 405, 132, 447, 478, 468, 423, 460,
	390, 399, 111, 397, 169, 156, 195, 432, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 1816, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 365, 358, 394, 453, 456,
	380, 442, 370, 401, 448, 402, 424, 385, 0, 0,
	88, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 0, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 467, 457, 105, 418,
	469, 388, 406, 477, 408, 409, 444, 368, 427, 155,
	403, 386, 93, 391, 361, 398, 362, 389, 420, 117,
	387, 459, 430, 131, 475, 134, 435, 0, 177, 143,
	0, 0, 422, 461, 425, 452, 417, 445, 376, 434,
	470, 404, 440, 471, 0, 0, 0, 355, 0, 945,
	946, 0, 0, 0, 0, 0, 106, 0, 439, 466,
	400, 480, 443, 360, 437, 0, 366, 369, 476, 464,
	395, 396, 0, 0, 0, 0, 0, 0, 0, 421,
	426, 449, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 392, 0, 433, 0, 0, 0, 373, 367, 0,
	419, 0, 0, 0, 375, 0, 393, 450, 0, 357,
	455, 462, 416, 204, 465, 413, 412, 162, 0, 109,
	0, 183, 121, 405, 132, 447, 478, 468, 423, 460,
	390, 399, 111, 397, 169, 156, 195, 432, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 365, 358, 394, 453, 456,
	380, 442, 370, 401, 448, 402, 424, 385, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 0, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 467, 457, 105, 418,
	469, 388, 406, 477, 408, 409, 444, 368, 427, 155,
	403, 386, 93, 391, 361, 398, 362, 389, 420, 117,
	387, 459, 430, 131, 475, 134, 435, 0, 177, 143,
	0, 0, 422, 461, 425, 452, 417, 445, 376, 434,
	470, 404, 440, 471, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 439, 466,
	400, 480, 443, 360, 437, 0, 366, 369, 476, 464,
	395, 396, 0, 0, 0, 0, 0, 0, 0, 421,
	426, 449, 414, 0, 0, 0, 0, 0, 0, 1264,
	0, 392, 0, 433, 0, 0, 0, 373, 367, 0,
	419, 0, 0, 0, 375, 0, 393, 450, 0, 357,
	455, 462, 416, 204, 465, 413, 412, 162, 0, 109,
	0, 183, 121, 405, 132, 447, 478, 468, 423, 460,
	390, 399, 111, 397, 169, 156, 195, 432, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 365, 358, 394, 453, 456,
	380, 442, 370, 401, 448, 402, 424, 385, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 0, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 467, 457, 105, 418,
	469, 388, 406, 477, 408, 409, 444, 368, 427, 155,
	403, 386, 93, 391, 361, 398, 362, 389, 420, 117,
	387, 459, 430, 131, 475, 134, 435, 0, 177, 143,
	0, 0, 422, 461, 425, 452, 417, 445, 376, 434,
	470, 404, 440, 471, 50, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 439, 466,
	400, 480, 443, 360, 437, 0, 366, 369, 476, 464,
	395, 396, 0, 0, 0, 0, 0, 0, 0, 421,
	426, 449, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 392, 0, 433, 0, 0, 0, 373, 367, 0,
	419, 0, 0, 0, 375, 0, 393, 450, 0, 357,
	455, 462, 416, 204, 465, 413, 412, 162, 0, 109,
	0, 183, 121, 405, 132, 447, 478, 468, 423, 460,
	390, 399, 111, 397, 169, 156, 195, 432, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 365, 358, 394, 453, 456,
	380, 442, 370, 401, 448, 402, 424, 385, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 0, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 467, 457, 105, 418,
	469, 388, 406, 477, 408, 409, 444, 368, 427, 155,
	403, 386, 93, 391, 361, 398, 362, 389, 420, 117,
	387, 459, 430, 131, 475, 134, 435, 0, 177, 143,
	0, 0, 422, 461, 425, 452, 417, 445, 376, 434,
	470, 404, 440, 471, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 439, 466,
	400, 480, 443, 360, 437, 0, 366, 369, 476, 464,
	395, 396, 0, 0, 0, 0, 0, 0, 0, 421,
	426, 449, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 392, 0, 433, 0, 0, 0, 373, 367, 0,
	419, 0, 0, 0, 375, 0, 393, 450, 0, 357,
	455, 462, 416, 204, 465, 413, 412, 162, 0, 109,
	0, 183, 121, 405, 132, 447, 478, 468, 423, 460,
	390, 399, 111, 397, 169, 156, 195, 432, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 365, 358, 394, 453, 456,
	380, 442, 370, 401, 448, 402, 424, 385, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 353, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 354, 352, 125, 174, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 348, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 467, 457, 105, 418,
	469, 388, 406, 477, 408, 409, 444, 368, 427, 155,
	403, 386, 93, 391, 361, 398, 362, 389, 420, 117,
	387, 459, 430, 131, 475, 134, 435, 0, 177, 143,
	0, 0, 422, 461, 425, 452, 417, 445, 376, 434,
	470, 404, 440, 471, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 439, 466,
	400, 480, 443, 360, 437, 0, 366, 369, 476, 464,
	395, 396, 0, 0, 0, 0, 0, 0, 0, 421,
	426, 449, 414, 0, 0, 0, 0, 0, 0, 832,
	0, 392, 0, 433, 0, 0, 0, 373, 367, 0,
	419, 0, 0, 0, 375, 0, 393, 450, 0, 357,
	455, 462, 416, 204, 465, 413, 412, 162, 0, 109,
	0, 183, 121, 405, 132, 447, 478, 468, 423, 460,
	390, 399, 111, 397, 169, 156, 195, 432, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 365, 358, 394, 453, 456,
	380, 442, 370, 401, 448, 402, 424, 385, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 0, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 467, 457, 105, 418,
	469, 388, 406, 477, 408, 409, 444, 368, 427, 155,
	403, 386, 93, 391, 361, 398, 362, 389, 420, 117,
	387, 459, 430, 131, 475, 134, 435, 0, 177, 143,
	0, 0, 422, 461, 425, 452, 417, 445, 376, 434,
	470, 404, 440, 471, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 439, 466,
	400, 480, 443, 360, 437, 0, 366, 369, 476, 464,
	395, 396, 0, 0, 0, 0, 0, 0, 0, 421,
	426, 449, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 392, 0, 433, 0, 0, 0, 373, 367, 0,
	419, 0, 0, 0, 375, 0, 393, 450, 0, 357,
	455, 462, 416, 204, 465, 413, 412, 162, 0, 109,
	0, 183, 121, 405, 132, 447, 478, 468, 423, 460,
	390, 399, 111, 397, 169, 156, 195, 432, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 365, 358, 394, 453, 456,
	380, 442, 370, 401, 448, 402, 424, 385, 0, 0,
	0, 0, 94, 184, 682, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 353, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 354, 352, 125, 174, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 348, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 467, 457, 105, 418,
	469, 388, 406, 477, 408, 409, 444, 368, 427, 155,
	403, 386, 93, 391, 361, 398, 362, 389, 420, 117,
	387, 459, 430, 131, 475, 134, 435, 0, 177, 143,
	0, 0, 422, 461, 425, 452, 417, 445, 376, 434,
	470, 404, 440, 471, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 439, 466,
	400, 480, 443, 360, 437, 0, 366, 369, 476, 464,
	395, 396, 0, 0, 0, 0, 0, 0, 0, 421,
	426, 449, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 392, 0, 433, 0, 0, 0, 373, 367, 0,
	419, 0, 0, 0, 375, 0, 393, 450, 0, 357,
	455, 462, 416, 204, 465, 413, 412, 162, 0, 109,
	0, 183, 121, 405, 132, 447, 478, 468, 423, 460,
	390, 399, 111, 397, 169, 156, 195, 432, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 365, 358, 394, 453, 456,
	380, 442, 370, 401, 448, 402, 424, 385, 0, 0,
	0, 0, 94, 184, 343, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 353, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 354, 352, 346, 345, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 348, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 467, 457, 105, 418,
	469, 388, 406, 477, 408, 409, 444, 368, 427, 155,
	403, 386, 93, 391, 361, 398, 362, 389, 420, 117,
	387, 459, 430, 131, 475, 134, 435, 0, 177, 143,
	0, 0, 422, 461, 425, 452, 417, 445, 376, 434,
	470, 404, 440, 471, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 439, 466,
	400, 480, 443, 360, 437, 0, 366, 369, 476, 464,
	395, 396, 0, 0, 0, 0, 0, 0, 0, 421,
	426, 449, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 392, 0, 433, 0, 0, 0, 373, 367, 0,
	419, 0, 0, 0, 375, 0, 393, 450, 0, 357,
	455, 462, 416, 204, 465, 413, 412, 162, 0, 109,
	0, 183, 121, 405, 132, 447, 478, 468, 423, 460,
	390, 399, 111, 397, 169, 156, 195, 432, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 365, 358, 394, 453, 456,
	380, 442, 370, 401, 448, 402, 424, 385, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 0, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 467, 457, 105, 418,
	469, 388, 406, 477, 408, 409, 444, 368, 427, 155,
	403, 386, 93, 391, 361, 398, 362, 389, 420, 117,
	387, 459, 430, 131, 475, 134, 435, 0, 177, 143,
	0, 0, 422, 461, 425, 452, 417, 445, 376, 434,
	470, 404, 440, 471, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 439, 466,
	400, 480, 443, 360, 437, 0, 366, 369, 476, 464,
	395, 396, 0, 0, 0, 0, 0, 0, 0, 421,
	426, 449, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 392, 0, 433, 0, 0, 0, 373, 367, 0,
	419, 0, 0, 0, 375, 0, 393, 450, 0, 357,
	455, 462, 416, 204, 465, 413, 412, 162, 0, 109,
	0, 183, 121, 405, 132, 447, 478, 468, 423, 460,
	390, 399, 111, 397, 169, 156, 195, 432, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 365, 358, 394, 453, 456,
	380, 442, 370, 401, 448, 402, 424, 385, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 0, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 467, 457, 105, 418,
	469, 388, 406, 477, 408, 409, 444, 368, 427, 155,
	403, 386, 93, 391, 361, 398, 362, 389, 420, 117,
	387, 459, 430, 131, 475, 134, 435, 0, 177, 143,
	0, 0, 422, 461, 425, 452, 417, 445, 376, 434,
	470, 404, 440, 471, 0, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 439, 466,
	400, 480, 443, 360, 437, 0, 366, 369, 476, 464,
	395, 396, 0, 0, 0, 0, 0, 0, 0, 421,
	426, 449, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 392, 0, 433, 0, 0, 0, 373, 367, 0,
	419, 0, 0, 0, 375, 0, 393, 450, 0, 357,
	455, 462, 416, 204, 465, 413, 412, 162, 0, 109,
	0, 183, 121, 405, 132, 447, 478, 468, 423, 460,
	390, 399, 111, 397, 169, 156, 195, 432, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 365, 358, 394, 453, 456,
	380, 442, 370, 401, 448, 402, 424, 385, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 0, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 155, 0, 105, 93,
	0, 0, 274, 0, 0, 0, 117, 271, 0, 0,
	131, 315, 134, 0, 0, 177, 143, 0, 0, 0,
	0, 306, 307, 0, 0, 0, 0, 0, 0, 934,
	0, 50, 0, 0, 272, 293, 292, 295, 296, 297,
	298, 0, 0, 106, 294, 299, 300, 301, 935, 0,
	0, 269, 286, 0, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 0, 0, 0, 0,
	327, 0, 285, 0, 0, 281, 282, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 325, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 151, 124, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 303, 316, 326, 322, 323,
	320, 321, 319, 318, 317, 328, 308, 309, 310, 311,
	313, 0, 126, 312, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 155, 0, 0, 93, 869, 0, 274,
	0, 0, 0, 117, 271, 0, 171, 131, 315, 134,
	0, 0, 177, 143, 324, 105, 0, 0, 306, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 272, 293, 292, 295, 296, 297, 298, 0, 0,
	106, 294, 299, 300, 301, 0, 0, 0, 269, 286,
	0, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 265, 0, 0, 0, 327, 0, 285,
	0, 0, 281, 282, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	325, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 151, 124,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 303, 316, 326, 322, 323, 320, 321, 319,
	318, 317, 328, 308, 309, 310, 311, 313, 0, 126,
	312, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 0, 0, 274, 0, 0, 0,
	117, 271, 0, 171, 131, 315, 134, 0, 0, 177,
	143, 324, 105, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 531, 272, 293,
	292, 295, 296, 297, 298, 0, 0, 106, 294, 299,
	300, 301, 0, 0, 0, 269, 286, 0, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	0, 0, 0, 0, 327, 0, 285, 0, 0, 281,
	282, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 325, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 303,
	316, 326, 322, 323, 320, 321, 319, 318, 317, 328,
	308, 309, 310, 311, 313, 0, 126, 312, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 155, 0, 0,
	93, 0, 0, 274, 0, 0, 0, 117, 271, 0,
	171, 131, 315, 134, 0, 0, 177, 143, 324, 105,
	0, 0, 306, 307, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 272, 293, 292, 295, 296,
	297, 298, 0, 0, 106, 294, 299, 300, 301, 0,
	0, 0, 269, 286, 0, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 265, 0, 0,
	0, 327, 0, 285, 0, 0, 281, 282, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 325, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 303, 316, 326, 322,
	323, 320, 321, 319, 318, 317, 328, 308, 309, 310,
	311, 313, 23, 126, 312, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 155, 0, 0, 93, 0, 0,
	274, 0, 0, 0, 117, 271, 0, 171, 131, 315,
	134, 0, 0, 177, 143, 324, 105, 0, 0, 306,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 272, 293, 292, 295, 296, 297, 298, 0,
	0, 106, 294, 299, 300, 301, 0, 0, 0, 269,
	286, 0, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 0, 0, 0, 0, 327, 0,
	285, 0, 0, 281, 282, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 325, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 303, 316, 326, 322, 323, 320, 321,
	319, 318, 317, 328, 308, 309, 310, 311, 313, 0,
	126, 312, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 155, 0, 0, 93, 0, 0, 274, 0, 0,
	0, 117, 271, 0, 171, 131, 315, 134, 0, 0,
	177, 143, 324, 105, 0, 0, 306, 307, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 272,
	293, 292, 295, 296, 297, 298, 0, 0, 106, 294,
	299, 300, 301, 0, 0, 0, 269, 286, 0, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 0, 0, 0, 0, 327, 0, 285, 0, 0,
	281, 282, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 325, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 151, 124, 0, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	303, 316, 326, 322, 323, 320, 321, 319, 318, 317,
	328, 308, 309, 310, 311, 313, 0, 126, 312, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 155, 0,
	0, 93, 0, 0, 274, 0, 0, 0, 117, 0,
	0, 171, 131, 315, 134, 0, 0, 177, 143, 324,
	105, 0, 0, 306, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 272, 293, 292, 295,
	296, 297, 298, 0, 0, 106, 294, 299, 300, 301,
	0, 0, 0, 0, 286, 0, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 0, 0,
	0, 0, 327, 0, 285, 0, 0, 281, 282, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 325, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 303, 316, 326,
	322, 323, 320, 321, 319, 318, 317, 328, 308, 309,
	310, 311, 313, 0, 126, 312, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	315, 134, 0, 0, 177, 143, 324, 105, 0, 0,
	306, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 272, 293, 292, 295, 296, 297, 298,
	0, 0, 106, 294, 299, 300, 301, 0, 0, 0,
	0, 286, 0, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 0, 0, 0, 0, 327,
	0, 285, 0, 0, 281, 282, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 325, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 303, 316, 326, 322, 323, 320,
	321, 319, 318, 317, 328, 308, 309, 310, 311, 313,
	0, 126, 312, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 324, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 564, 574, 575,
	567, 568, 569, 570, 571, 572, 573, 566, 0, 0,
	576, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 117,
	0, 729, 171, 131, 0, 134, 0, 0, 177, 143,
	577, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 714, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 730, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 1747,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 0, 756, 757,
	160, 758, 759, 760, 762, 761, 731, 732, 733, 737,
	735, 734, 736, 708, 710, 202, 706, 709, 715, 711,
	712, 713, 727, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 728, 738, 739, 740, 741, 742,
	743, 744, 745, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 707, 133,
	0, 211, 0, 164, 119, 198, 155, 0, 0, 93,
	0, 553, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 555, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 550,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 551, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 151, 124, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 117, 0, 729, 171, 131, 0, 134,
	0, 0, 177, 143, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 714, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 730, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 0, 756, 757, 160, 758, 759, 760, 762, 761,
	731, 732, 733, 737, 735, 734, 736, 708, 710, 202,
	706, 709, 715, 711, 712, 713, 727, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 728, 738,
	739, 740, 741, 742, 743, 744, 745, 0, 151, 124,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 707, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 0, 671, 0, 0, 0, 0,
	117, 0, 0, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	673, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 23, 126, 0, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 0, 134, 0, 0, 177, 143, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 355, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 23, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 819, 0, 0, 820, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 151, 124, 0, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 692,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 691, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 155, 0, 0, 93, 0,
	671, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 673, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 669, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 1443, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 171, 131, 0, 134, 0, 0, 177, 143,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 0, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 1815, 117, 0, 171,
	0, 131, 0, 134, 0, 0, 177, 143, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 1332, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 1485, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 1484, 200, 149, 154, 152, 199, 1487, 192,
	142, 139, 0, 98, 190, 140, 138, 1488, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 1486, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 151, 124, 0, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 673, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 355, 0, 555, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 779, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 649, 117,
	0, 0, 171, 131, 0, 134, 0, 0, 177, 143,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	338, 211, 0, 164, 119, 198, 0, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 171,
	0, 131, 0, 134, 0, 0, 177, 143, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 151, 124, 0, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 105,
}

var yyPact = [...]int{
	2538, -1000, -216, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1369, 1442, -1000, -1000, -1000, -1000, -1000, -1000, 1212,
	777, 329, 373, 129, 15416, 371, 2600, 16010, -1000, 131,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1164, -1000, -1000,
	-1000, -1000, -1000, 1374, 1383, 1183, 1373, 1273, -1000, 7989,
	326, 13633, 15119, 5791, -1000, 958, -154, 343, 15713, 323,
	323, 15713, 15713, 16010, 323, -1000, -52, 352, 16010, -1000,
	16010, 322, 956, 322, 322, 322, 16010, -1000, 479, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 16010, 954, 1305, 676, 4471, 4471, 4471,
	4471, 229, 4471, -4, 1241, -1000, -1000, -1000, -1000, 4471,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	845, 1325, 8583, 8583, 1369, -1000, 1164, -1000, -1000, -1000,
	1315, -1000, -1000, 720, 1410, -1000, 10068, 467, -1000, 8583,
	52, 1139, -1000, -1000, 1139, -1000, -1000, 489, -1000, -1000,
	-1000, 9177, 9177, 9177, 9177, 9177, 9177, 9177, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1139, 451, -1000, 8286, 1139, 1139, 1139, 1139,
	1139, 1139, 1139, 1139, 8583, 1139, 1139, 1139, 1139, 1139,
	1139, 1139, 1139, 1139, 2173, 1139, 1139, 1139, 1139, 14821,
	1071, 1240, -1000, -1000, -1000, 1348, 11256, 12147, 16010, 1074,
	-1000, 1111, 5461, -19, -1000, -1000, -1000, 631, 448, 11850,
	-1000, -1000, -1000, 1300, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1017, -1000, 10365, 350, -1000, -1000, 16010, 1150, 942,
	678, 920, 1229, 325, 1342, 16010, -1000, 14524, 4471, 341,
	16010, 1337, 1228, 16010, 918, 916, -1000, 6781, -1000, 4471,
	4471, 4471, 4471, 4471, 4471, 4471, 4471, -1000, -1000, -1000,
	-1000, -1000, -1000, 4471, 4471, -1000, 48, -1000, 16010, -1000,
	-1000, -1000, -1000, 1436, 507, 613, 446, 1132, -1000, 695,
	1374, 845, 1273, 11553, 1210, -1000, -1000, 16010, -1000, 8583,
	8583, 750, -1000, 14227, -1000, -1000, 5131, 536, 9177, 742,
	546, 9177, 9177, 9177, 9177, 9177, 9177, 9177, 9177, 9177,
	9177, 9177, 9177, 9177, 9177, 9177, 828, 2173, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 907, -1000, 1164, 1372,
	1372, 22, 22, 22, 22, 22, 22, 9474, 7395, 6121,
	845, 1009, 572, 8286, 7989, 7989, 8583, 8583, 16307, 16307,
	7989, 1350, 617, 572, 16307, -1000, 845, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 89, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 7989, 7989, 7989, 7989, 273, 16010,
	-1000, 16307, 13633, 13633, 13633, 13633, 13633, -1000, 1262, 1260,
	-1000, 1254, 1252, 1267, 16010, -1000, 992, 11256, 569, 1139,
	-1000, 13930, -1000, -1000, 273, 1013, 13633, 16010, -1000, -1000,
	4801, 1111, -19, 1109, -1000, -12, -16, 7098, 6121, 510,
	-1000, -1000, -1000, -1000, 3811, 1217, 191, -133, 18, -1000,
	-1000, -1000, -1000, -1000, 1169, -1000, -1000, -1000, 1169, 270,
	1169, 1169, 1169, -1000, 1169, 1169, 84, 84, 84, 84,
	84, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1207, 1205,
	-1000, 1169, 1169, 1169, -1000, 1169, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1200, 281, 1200, 1178,
	1178, -1000, -1000, 15713, 1340, -118, 878, 4471, 1336, 4471,
	16010, 1432, 16010, -1000, -1000, -1000, 10365, -1000, 1965, 16010,
	-1000, 16010, -1000, -1000, 16010, 4471, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 523, -1000, -1000, -1000, -1000, 1279, 8583, 8583, 6451,
	8583, -1000, -1000, -1000, 1325, -1000, 1350, 1378, -1000, 1288,
	1286, 7989, -1000, -1000, 536, 591, -1000, -1000, 771, -1000,
	-1000, -1000, -1000, 442, 1139, -1000, 424, -1000, -1000, -1000,
	-1000, 742, 9177, 9177, 9177, 1614, 424, 2027, 267, 116,
	22, 174, 174, 23, 23, 23, 23, 23, 313, 313,
	-1000, -1000, -1000, -1000, 845, -1000, -1000, -1000, 845, 7989,
	1110, -1000, -1000, -1000, 8583, -1000, 845, 990, 990, 718,
	602, 1149, -1000, 404, 1131, 990, 7989, 673, -1000, 8583,
	845, -1000, -1000, 990, 845, 990, 990, 1163, 1139, -1000,
	1061, -1000, 630, 1240, 1211, 1225, 1365, -1000, -1000, -1000,
	-1000, 1255, -1000, 1253, -1000, -1000, -1000, -1000, -86, 349,
	347, 346, 15713, -1000, 1391, 13633, 1045, -1000, -1000, 1109,
	-19, -23, -1000, -1000, -1000, -1000, 572, 629, -1000, -1000,
	876, 1107, 3481, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1203, 751, 15713, 298, 305, 476, 410, 871,
	-1000, -1000, -1000, 758, -1000, 15713, 1434, -1000, -1000, 296,
	-1000, 293, 636, 836, 16010, 170, 1201, 2418, -1000, -226,
	-1000, 39, -1000, -1000, 807, 84, 84, 1169, 84, 84,
	84, -1000, -1000, 510, 1295, 510, 510, 510, 510, 835,
	835, -122, -122, -1000, -1000, -1000, 802, 1200, -1000, -1000,
	-1000, 801, -1000, 1199, 1164, -1000, 6121, -1000, -1000, -1000,
	-1000, -1000, 1339, 1033, -1000, -1000, -1000, -1000, 413, -1000,
	-1000, 2054, 2659, 579, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 261, 355, -1000, 4471, -1000,
	628, 16010, 16010, 1276, 572, 572, 396, -1000, -1000, 16010,
	-1000, -1000, -1000, -1000, 1068, -1000, -1000, -1000, 4141, 7989,
	-1000, 1614, 424, 443, -1000, 9177, 9177, -1000, -1000, 990,
	7989, 572, -1000, -1000, -1000, 1816, 828, 1816, 9177, 9177,
	6451, 9177, 9177, -80, 1101, 656, -1000, 8583, 551, -1000,
	-1000, -1000, -1000, -1000, 1224, 16307, 1139, -1000, 10959, 15713,
	1369, 16307, 8583, 8583, -1000, -1000, 8583, 1195, -1000, 8583,
	-1000, -1000, -1000, -1000, 1194, 1139, 1139, 1139, 939, -1000,
	1369, 1045, -1000, -1000, -1000, -25, -38, -1000, 8583, -1000,
	3811, -1000, 3811, 13039, -1000, 1458, 1368, 302, -5, -1000,
	853, 839, -1000, 829, -1000, 45, -1000, -188, 87, 17,
	-1000, -1000, 1139, -1000, 1192, 1329, -1000, 1307, 800, -1000,
	1981, -212, -1000, -1000, -1000, -1000, -1000, -1000, 1139, 1189,
	1182, -1000, 1180, -1000, -1000, -1000, 983, 510, 510, 84,
	510, 510, 510, -1000, 564, -1000, -1000, -1000, -1000, 963,
	-1000, 951, -1000, 103, 96, -1000, 1087, -1000, 949, 16010,
	15713, -1000, 1082, -1000, 624, 1367, 217, 16010, 1432, 1432,
	-1000, 304, 15713, -1000, 15713, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 15713, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 16010, -1000, -1000, -1000, -1000,
	-1000, 15713, 317, -1000, -1000, 834, 8583, -1000, -1000, -1000,
	6121, -1000, 1391, 13633, -1000, -1000, 845, -1000, 9177, 424,
	424, -1000, -1000, 845, 1169, 1169, -1000, 1169, 1178, -1000,
	-1000, 1169, 127, 1169, 123, 845, 845, 138, 383, -1000,
	102, 297, 1139, -75, -1000, 572, 8583, -1000, 1311, 1032,
	1046, -1000, -1000, 7692, 845, 947, 393, 939, 1374, -1000,
	572, 572, 572, 12444, 572, -222, 12444, 12444, 12444, 10662,
	15713, 1374, -1000, -1000, -1000, -1000, 572, 3481, -1000, 935,
	-1000, 249, 1169, 353, 353, -197, 292, 291, 1139, -1000,
	-1000, -1000, -1000, -154, -1000, -1000, 636, -1000, 8583, 12444,
	122, -1000, 1080, 936, 1036, -1000, 13336, 845, -1000, 821,
	-1000, 814, 928, -1000, -1000, -1000, 510, -1000, -1000, -1000,
	-1000, -1000, 84, 833, 84, 15, 6, 799, -1000, 787,
	1079, 1223, 6121, 3811, 334, 1484, -1000, -1000, 1363, -1000,
	1005, 15713, -1000, -1000, 300, -1000, 1167, -1000, -1000, -1000,
	-1000, 1328, 15713, -1000, -1000, 572, 1388, 1065, -1000, 424,
	-1000, -1000, 266, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 9177, 9177, -1000, 9177, 9177, 9177, 845, 825,
	572, 285, -1000, 1139, -1000, -1000, 1188, 15713, 15713, -1000,
	-1000, 932, -1000, -1000, 927, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 924, 924, 924, 569, -1000, -1000, 683, 13039,
	1332, -1000, -1000, -1000, 730, -1000, -1000, 709, 213, 727,
	-1000, 15713, -154, 8583, -1000, 1139, 611, 914, 9177, 1166,
	782, -1000, 906, -1000, 88, -122, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 510, -1000, 510, -1000, -1000, 896,
	885, 13039, 15713, 16010, -1000, -1000, 15713, -1000, -1000, -1000,
	-1000, -1000, 202, 2589, 1162, 1161, 12444, 1139, 320, 1386,
	1380, -1000, -1000, 197, 197, 197, 197, 68, -1000, -1000,
	1428, -1000, 1139, -1000, 1164, 387, -1000, 15713, -1000, -1000,
	-222, -1000, -1000, -1000, -86, 1215, 749, 126, -1000, 823,
	615, 819, 614, 608, 589, 583, 581, 577, 560, -1000,
	-1000, -1000, 1426, -1000, -1000, -1000, 1415, 1154, -1000, 1153,
	611, 8583, 221, 1216, 254, -1000, 870, 851, -1000, -1000,
	-1000, -1000, -1000, -1000, 912, 1152, 1148, 997, -1000, 198,
	2589, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1369, 15713, 15713, 15713, 15713, 370, 8880, 8880, 13039, 13039,
	905, 259, 284, -1000, 8583, 8583, -1000, -1000, -1000, -1000,
	845, 195, -129, 16307, 1046, 845, 15713, -1000, -1000, -1000,
	-1000, 15713, -1000, -127, 749, 15713, -1000, 775, -1000, -1000,
	717, 773, 717, 717, 717, 717, 717, 353, 353, 15713,
	13039, 221, 611, -1000, -77, 1440, -139, 271, -1000, -1000,
	-199, 13039, 13039, -88, 15713, 8583, 2566, -1000, 1374, 1024,
	9771, -1000, -1000, -1000, -1000, 15713, 1408, 1407, 1404, 1394,
	1963, 52, 142, 903, 900, 1150, 895, -1000, 15713, 1147,
	572, 1020, -1000, 1269, -83, -135, 1015, -1000, -1000, 1139,
	893, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 636, 636, 884, 882, -1000, 221, -1000,
	353, 353, -1000, -1000, 130, 770, 762, 761, 756, 61,
	-1000, 1377, 1391, 1146, 869, 860, -1000, -214, -1000, 572,
	-1000, -1000, 2589, 1325, 15713, 164, -1000, -1000, 1319, -1000,
	-1000, -1000, -1000, -1000, 2589, 2589, -1000, 269, -118, -1000,
	259, 1285, 13039, -1000, 1268, -1000, 15713, -1000, 749, -1000,
	-1000, 315, 683, -1000, -1000, -1000, 753, -1000, 732, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12741, 683, 12444, 1391,
	683, 8583, -218, -1000, -1000, 10365, 1356, 15713, 2512, -1000,
	2408, 152, -1000, 154, -1000, -1000, 252, 850, -119, 845,
	-1000, 16010, 1215, -1000, -1000, -1000, 385, 1215, 848, 683,
	-1000, 572, 649, 1164, -1000, -1000, -1000, 658, -1000, 146,
	-1000, 237, -1000, -132, -1000, 1145, -1000, 6121, -1000, -1000,
	-1000, -1000, -1000, 140, -1000, -1000, 1139, -136, 15713, -1000,
	2589, 3096, -1000, 844, 827, 197, 845, -1000, -1000, -1000,
	-1000,
}

var yyPgo = [...]int{
	0, 1699, 47, 5, 1698, 1695, 1694, 1495, 1477, 1475,
	1471, 1693, 1692, 1691, 1690, 1689, 1684, 1681, 1679, 1678,
	1677, 1676, 1675, 1674, 1661, 1660, 1659, 1658, 1082, 1657,
	1656, 1655, 92, 1654, 99, 1653, 1652, 58, 86, 84,
	57, 1510, 1650, 45, 106, 101, 1649, 73, 1648, 1646,
	115, 1640, 85, 1637, 1635, 1555, 1633, 1632, 30, 8,
	18, 33, 1631, 1630, 96, 889, 1628, 1623, 1622, 1621,
	1620, 1619, 68, 22, 25, 36, 32, 1617, 70, 17,
	1614, 76, 1613, 1610, 1609, 1606, 26, 1605, 77, 27,
	19, 11, 1604, 14, 1603, 82, 56, 42, 21, 100,
	80, 1602, 55, 83, 69, 1601, 1599, 788, 1598, 1595,
	1594, 1593, 1592, 1591, 708, 797, 1588, 1587, 1586, 71,
	0, 634, 118, 105, 1585, 65, 1584, 1858, 104, 93,
	39, 1583, 44, 229, 66, 1581, 1580, 64, 103, 94,
	102, 98, 1579, 1578, 1576, 1575, 1574, 1168, 51, 842,
	185, 1573, 1571, 1570, 40, 72, 43, 67, 78, 1568,
	1567, 1566, 1556, 46, 1554, 16, 28, 13, 97, 1553,
	1551, 1550, 1549, 49, 52, 1547, 29, 1546, 34, 1,
	3, 12, 1544, 1543, 1542, 4, 1541, 31, 1539, 7,
	1538, 15, 1537, 1530, 1528, 1527, 1525, 1523, 1522, 10,
	1521, 1518, 41, 75, 54, 37, 24, 59, 53, 1513,
	50, 1512, 2, 6, 1511, 9, 1509, 1508, 1506, 20,
	23, 1498, 1497, 1491, 1487, 1485, 713, 638, 1482, 1480,
	1473, 1469, 262,
}

var yyR1 = [...]int{
	0, 224, 225, 225, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 228,
	228, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 216, 216, 215, 217, 217, 12, 12, 12, 12,
	12, 209, 209, 209, 209, 209, 13, 13, 212, 212,
	14, 14, 100, 100, 104, 104, 104, 105, 105, 105,
	105, 135, 135, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 207, 207, 207, 208, 208,
	208, 210, 210, 211, 211, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 214, 214, 193, 193, 193, 194,
	194, 194, 194, 194, 194, 196, 196, 197, 197, 125,
	125, 191, 191, 190, 189, 189, 188, 188, 187, 198,
	198, 20, 170, 171, 171, 171, 171, 171, 171, 171,
	158, 139, 139, 139, 139, 139, 139, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 204, 204, 204, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 200, 200, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 148,
	148, 148, 148, 148, 148, 199, 199, 195, 195, 195,
	195, 195, 195, 143, 143, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 142, 142, 142, 142, 142,
	142, 142, 142, 144, 144, 144, 144, 144, 144, 144,
	144, 140, 140, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 146, 146, 146, 146,
	146, 146, 146, 146, 157, 157, 147, 147, 155, 155,
	156, 156, 156, 154, 154, 154, 151, 151, 152, 152,
	153, 153, 153, 149, 149, 149, 150, 150, 150, 160,
	180, 180, 180, 182, 182, 183, 183, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 169, 169,
	206, 206, 179, 179, 179, 175, 175, 175, 175, 175,
	175, 175, 175, 168, 168, 178, 178, 176, 176, 176,
	177, 163, 163, 163, 163, 163, 164, 165, 165, 165,
	165, 161, 162, 202, 202, 202, 203, 203, 166, 166,
	167, 167, 172, 172, 172, 173, 173, 173, 174, 174,
	174, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 229, 229, 230, 230, 230,
	230, 230, 230, 230, 186, 184, 184, 185, 185, 17,
	18, 18, 18, 18, 18, 19, 19, 21, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 112, 112, 109, 109, 110, 110, 111, 111, 111,
	113, 113, 113, 136, 136, 136, 23, 23, 25, 25,
	26, 27, 24, 24, 24, 24, 24, 231, 28, 29,
	29, 30, 30, 30, 34, 34, 34, 32, 32, 33,
	33, 39, 39, 38, 38, 40, 40, 40, 40, 124,
	124, 124, 123, 123, 42, 42, 43, 43, 44, 44,
	45, 45, 45, 219, 219, 218, 218, 220, 220, 220,
	220, 220, 220, 57, 57, 93, 93, 93, 96, 96,
	46, 46, 46, 46, 47, 47, 48, 48, 49, 49,
	131, 131, 130, 130, 130, 129, 129, 51, 51, 51,
	53, 52, 52, 52, 52, 54, 54, 56, 56, 55,
	55, 58, 58, 58, 58, 59, 59, 94, 94, 41,
	41, 41, 41, 41, 41, 41, 108, 108, 61, 61,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	71, 71, 71, 71, 71, 71, 62, 62, 62, 62,
	62, 62, 62, 37, 37, 72, 72, 72, 78, 73,
	73, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 69, 69, 69, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 232, 232, 70, 70, 70, 70, 35, 35, 35,
	35, 35, 134, 134, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 138, 138,
	138, 138, 138, 138, 138, 82, 82, 36, 36, 80,
	80, 81, 83, 83, 79, 79, 79, 221, 64, 64,
	64, 64, 64, 64, 64, 64, 66, 66, 66, 84,
	84, 85, 85, 86, 86, 87, 87, 88, 89, 89,
	89, 90, 90, 90, 90, 91, 91, 91, 63, 63,
	63, 63, 63, 63, 92, 92, 92, 92, 97, 97,
	74, 74, 76, 76, 75, 77, 98, 98, 102, 99,
	99, 103, 103, 103, 103, 103, 101, 101, 101, 126,
	126, 126, 106, 106, 114, 114, 115, 115, 107, 107,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	117, 117, 117, 118, 118, 121, 121, 122, 122, 127,
	127, 128, 128, 222, 222, 222, 223, 223, 223, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 226, 227, 132, 133, 133,
	133,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	5, 9, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 14, 13, 14, 6, 5, 5,
	5, 11, 11, 9, 5, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 4, 0, 2, 2, 0,
	2, 2, 2, 2, 2, 0, 2, 0, 3, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 0,
	2, 4, 4, 0, 1, 3, 3, 3, 3, 3,
	2, 3, 1, 1, 1, 1, 1, 2, 2, 3,
	2, 4, 4, 2, 2, 3, 2, 3, 2, 7,
	9, 3, 3, 6, 9, 9, 8, 5, 8, 7,
	4, 2, 4, 6, 2, 1, 1, 1, 1, 1,
	1, 3, 3, 1, 2, 0, 4, 3, 4, 3,
	3, 3, 3, 3, 3, 3, 2, 4, 6, 2,
	3, 2, 3, 1, 3, 0, 2, 0, 3, 3,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 2, 2,
	2, 1, 1, 1, 3, 3, 2, 1, 2, 1,
	1, 1, 1, 4, 4, 4, 4, 4, 1, 5,
	2, 2, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 3, 3, 0, 1, 0, 1,
	0, 2, 1, 0, 3, 3, 0, 1, 2, 6,
	0, 1, 4, 1, 2, 1, 3, 2, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	1, 1, 0, 2, 5, 2, 3, 3, 2, 3,
	2, 3, 4, 1, 1, 1, 3, 3, 2, 2,
	1, 2, 5, 5, 8, 8, 13, 1, 1, 2,
	2, 10, 7, 0, 1, 1, 0, 3, 0, 1,
	1, 3, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 11, 13, 13, 7, 7, 7, 12, 7,
	7, 7, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 3, 3, 3, 3,
	4, 3, 6, 4, 2, 4, 2, 2, 2, 2,
	3, 1, 1, 0, 1, 0, 1, 0, 2, 2,
	0, 2, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 0, 4, 1, 3, 1, 1, 1,
	1, 1, 1, 4, 8, 1, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 0, 4, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 6, 8, 8, 6, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 1, 2, 1, 2, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 5, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 2, 0, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}

var yyChk = [...]int{
	-1000, -224, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	113, 114, 116, 115, 145, 117, 138, 49, 191, 192,
	194, 195, 26, 139, 140, 143, 144, -226, 8, 297,
	53, -225, 338, -86, 15, -30, 5, -28, -231, -28,
	-28, -28, -28, -28, -170, 53, -125, -198, 154, 289,
	119, 134, 152, 153, 120, 136, 71, -107, 122, 124,
	120, 120, 121, 122, 289, 119, 120, -55, -127, 56,
	-120, 161, 306, 21, 191, 204, 205, 196, 237, 225,
	307, 159, 222, 226, 275, 337, 65, 194, 284, 128,
	165, 141, 217, 220, 219, 211, 208, 28, 243, 313,
	210, 131, 244, 248, 254, 276, 304, 201, 202, 278,
	241, 32, 133, 308, 34, 149, 279, 246, 240, 235,
	239, 200, 234, 38, 214, 250, 249, 251, 274, 228,
	160, 253, 230, 212, 229, 18, 144, 147, 245, 247,
	209, 162, 126, 151, 312, 280, 207, 148, 163, 143,
	283, 328, 158, 195, 277, 203, 286, 37, 260, 221,
	198, 213, 199, 130, 192, 156, 232, 150, 215, 216,
	238, 197, 233, 193, 152, 145, 285, 261, 314, 231,
	227, 223, 224, 157, 122, 154, 155, 267, 268, 269,
	270, 310, 281, 218, 262, 263, 167, 168, 169, 170,
	171, 172, 173, 120, 107, 226, 113, 265, 121, 32,
	151, -136, 120, -109, 155, 267, 268, 269, 270, 56,
	277, 276, 271, -127, 193, -132, -132, -132, -132, -132,
	-2, -90, 17, 16, -5, -3, -226, 6, 21, 22,
	-34, 39, 40, -29, -40, 98, -41, -127, -60, 73,
	-65, 29, 56, -120, 24, -64, -61, -79, -221, -77,
	-78, 107, 108, 96, 97, 104, 74, 109, -69, -67,
	-68, -70, 58, 57, 66, 59, 60, 61, 62, 67,
	68, 69, -121, 287, -75, -226, 43, 44, 298, 299,
	300, 301, 305, 302, 76, 33, 288, 296, 295, 294,
	292, 293, 290, 291, 336, 125, 289, 102, 297, -107,
	-43, -44, -45, -46, -57, -78, -226, -55, 11, -50,
	-55, -99, -135, 193, -103, 277, 276, -122, 287, -101,
	-121, -119, 275, 226, 274, 56, -120, 118, 175, 317,
	72, 23, 25, 258, 264, 174, 75, 107, 16, 76,
	181, 326, 327, 106, 298, 113, 47, 290, 291, 288,
	179, 300, 301, 289, 265, 186, 20, 29, 10, 26,
	139, 22, 100, 115, 176, 79, 80, 142, 24, 140,
	69, 182, 184, 19, 50, 132, 11, 316, 13, 14,
	330, 318, 125, 124, 91, 329, 121, 45, 8, 109,
	27, 88, 41, 137, 185, 43, 89, 17, 292, 293,
	31, 305, 146, 102, 48, 35, 331, 73, 332, 67,
	51, 282, 180, 71, 15, 46, 333, 134, 183, 90,
	116, 297, 44, 177, 334, 119, 178, 6, 303, 30,
	138, 42, 120, 266, 78, 123, 68, 5, 136, 9,
	49, 52, 294, 295, 296, 33, 77, 12, 135, 309,
	70, -171, -158, 56, -202, 326, 327, 122, -121, -115,
	125, -115, -121, -121, -55, -115, 297, 120, -55, -55,
	-114, 125, 56, -114, -114, -114, -55, 110, -55, 56,
	30, 289, 56, 151, 120, 152, 122, -133, -226, -122,
	-133, -133, -133, 156, 157, -133, -110, 272, 51, -133,
	-227, 55, -91, 19, 31, -41, -127, -87, -88, -41,
	-86, -2, -28, 35, -32, 22, 64, 11, -124, 72,
	71, 88, -123, 23, -121, 58, 110, -41, -62, 91,
	73, 89, 90, 75, 93, 92, 103, 96, 97, 98,
	99, 100, 101, 102, 94, 95, 106, 336, 81, 82,
	83, 84, 85, 86, 87, -108, -226, -78, -226, 111,
	112, -65, -65, -65, -65, -65, -65, -65, -226, 110,
	-2, -73, -41, -226, -226, -226, -226, -226, -226, -226,
	-226, -226, -82, -41, -226, -232, -226, -232, -232, -232,
	-232, -232, -232, -232, -138, 107, 226, 141, 217, -141,
	-140, 232, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 225, 307, -226, -226, -226, -226, -56, 27,
	-55, 30, 54, -51, -53, -52, -54, 41, 45, 47,
	42, 43, 44, 48, -131, 23, -43, -226, -130, 147,
	-129, 23, -127, 58, -55, -50, -228, 54, 11, 52,
	54, -99, 193, -100, -104, 278, 280, 81, 110, -126,
	-121, 58, 29, 30, 55, 54, -159, -139, -143, -140,
	-145, -144, -146, -121, -141, -142, 225, 307, 222, 226,
	223, 228, 229, 230, 107, 227, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 231, 243, 30,
	141, 215, 216, 217, 220, 219, 221, 218, 244, 245,
	246, 247, 248, 249, 250, 251, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 208, 210, 211,
	212, 214, 213, 121, -55, -191, 52, 56, 73, 56,
	51, -207, 51, 19, 174, 175, 23, -55, -55, 282,
	-133, 123, -55, 24, 51, -55, 56, 56, -128, -127,
	-119, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, -112, 266, 273, -55, 9, 91, 54, 18, 110,
	54, -89, 25, 26, -90, -227, -34, -66, -121, 59,
	62, -33, 42, -55, -41, -41, -71, 67, 73, 68,
	69, -123, 98, -128, -122, -119, -65, -72, -75, -78,
	63, 91, 89, 90, 75, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-134, 56, 58, -138, 56, -64, -64, -121, -39, 22,
	-38, -40, -122, -227, 54, -227, -2, -38, -38, -41,
	-41, -79, -121, -127, -79, -38, -32, -80, -81, 77,
	-79, -227, 224, -38, -39, -38, -38, -95, 147, -55,
	-98, -102, -79, -44, -45, -45, -44, -45, 41, 41,
	41, 46, 41, 46, 41, -52, -127, -227, -58, 49,
	124, 50, -226, -129, -95, 52, -43, -55, -103, -100,
	54, 279, 281, 282, 51, 70, -41, -122, -150, 107,
	106, -172, -173, -174, -122, 58, 59, -158, -160, -163,
	-161, -162, -175, -164, 128, 126, 130, 131, 136, -168,
	121, 137, 67, 73, -204, 128, 51, 258, 264, 126,
	137, 136, 337, 65, 129, 316, 318, 29, -153, 339,
	252, -151, 261, -147, 53, -147, -147, 224, -147, -147,
	-147, -147, -147, -149, 226, -149, -149, -149, -149, 53,
	53, -147, -147, -147, -147, -155, 53, 209, -155, -155,
	-156, 53, -156, -121, 23, -189, 309, -190, 56, -133,
	24, -133, -55, -210, -208, 8, 9, 10, -55, -139,
	-116, 118, 115, 116, -186, 114, 258, 226, 65, 29,
	15, 298, 147, 314, 56, 148, -55, -55, -55, -133,
	-111, 11, 91, 37, -41, -41, -128, -88, -91, -106,
	19, 11, 33, 33, -38, 67, 68, 69, 110, -226,
	-72, -65, -65, -65, -37, 142, 72, -227, -227, -38,
	54, -41, -227, -227, -227, 54, 52, 23, 54, 11,
	110, 54, 11, -227, -38, -83, -81, 79, -41, -227,
	-227, -227, -227, -227, -63, 30, 33, -2, -226, -226,
	-59, 54, 12, 81, -48, -47, 51, 52, -49, 51,
	-47, 41, 41, -219, 309, 121, 121, 121, -96, -121,
	-59, -43, -59, -104, -105, 283, 280, 286, 81, 56,
	54, -174, 81, 53, -203, 51, 73, -166, -121, 137,
	-168, -168, 56, -168, 56, 56, 67, 19, -121, 9,
	137, 137, -203, 58, -127, -200, 317, 16, 53, -205,
	53, 58, 59, 60, 67, -148, 66, -61, 253, 288,
	291, 290, 254, 340, -152, 262, 59, -149, -149, -147,
	-149, -149, -149, -150, 30, -150, -150, -150, -150, -157,
	58, -157, -154, 309, 310, -154, 59, -155, 59, 51,
	52, -2, -188, -187, -122, -193, 23, 51, 54, -207,
	-132, -125, 128, -230, 154, 127, 132, 131, 56, 126,
	130, 147, -192, 154, 127, 128, 132, 131, 56, 121,
	137, 126, 130, 147, 136, -117, -118, 123, 23, 121,
	137, 147, 118, -133, -113, 89, 12, -127, -127, 38,
	110, -55, -42, 11, 98, -122, -39, -37, 72, -65,
	-65, -227, -40, -137, 107, 222, 141, 217, 211, 241,
	242, 228, 260, 215, 261, -134, -137, -65, -65, -122,
	-65, -65, 306, -86, 80, -41, 78, -97, 51, -98,
	-74, -76, -75, -226, -2, -92, -121, -96, -86, -102,
	-41, -41, -41, 53, -41, 53, -226, -226, -226, -227,
	54, -86, -59, 280, 284, 285, -41, -173, -174, -178,
	-176, -121, 137, 10, 9, 19, 132, 126, 337, 56,
	56, 56, -202, 136, 328, -204, 337, -148, -226, 53,
	23, 29, 59, -205, 53, -195, 336, -226, -147, 53,
	-147, 53, 53, 55, -150, -150, -149, -150, -150, -150,
	56, 107, 55, 54, 55, 215, 215, 54, 55, 54,
	-55, -121, 54, 81, -194, 19, 162, 163, -55, -208,
	-210, -229, 121, 137, -121, -132, -121, -132, -121, -55,
	-132, -121, 128, -163, 58, -41, -59, -43, -227, -65,
	-227, -147, -147, -147, -156, -147, 202, -147, 202, -227,
	-227, -227, 54, 19, -227, 54, 19, -226, -36, 303,
	-41, 28, -97, 54, -227, -227, -227, 54, 110, -227,
	-90, -93, -121, 137, -218, -220, 330, 331, 332, 333,
	334, 335, -93, -93, -93, -130, -121, -90, 55, 54,
	-147, -177, 256, -147, -165, 158, 159, 30, 160, -165,
	328, 137, 137, -226, -202, -203, -41, -93, 53, 318,
	54, 55, -205, -121, 226, 216, 255, 232, 241, -227,
	55, 55, 55, -150, -149, 58, -149, 263, 263, 59,
	59, 53, 52, 51, -187, -174, 123, 21, 6, 8,
	9, 10, 19, 23, -121, 136, 53, 27, -121, -84,
	13, -149, 56, -65, -65, -65, -65, -65, -227, 58,
	137, -76, 33, -2, -226, -121, -121, 54, 55, 55,
	54, -227, -227, -227, -58, -180, -182, 309, -181, 52,
	133, 65, 167, 168, 169, 170, 171, 172, 173, -176,
	-89, -203, 51, 67, 161, -203, 51, -166, -121, -202,
	-41, -226, -227, 55, -65, 53, 59, 55, 224, -154,
	-150, -150, 55, 55, -178, -121, -55, -167, -121, 176,
	-211, -213, -7, -9, -8, -11, -10, -12, -13, -14,
	-3, 20, 180, 181, 186, 182, 135, 125, 53, 53,
	-93, -226, 126, -85, 14, 16, -227, -227, -227, -227,
	-35, 91, 309, 9, -74, -2, 110, -121, -220, -219,
	-179, 51, -181, 309, 53, 311, 56, -169, 81, 58,
	81, 81, 81, 81, 81, 81, 81, 9, 10, 53,
	53, -227, -41, -199, 160, 51, 55, -201, 55, 55,
	55, 53, 53, -196, 54, 52, 177, -213, -86, -216,
	-121, -215, -121, -121, -121, -209, 35, 183, 184, 185,
	-60, -65, -60, -178, -178, 55, -184, -185, 147, 137,
	-41, -73, -227, 307, 48, 312, -98, -227, -121, -121,
	-183, -181, -121, 59, -206, 51, 70, 59, -206, -206,
	-206, -206, -206, -165, -165, -167, -178, -199, -227, 304,
	10, 9, 315, 55, 192, 320, 321, 146, 322, 160,
	323, 324, -94, 329, -178, -178, -197, 309, -121, -41,
	-214, -213, 191, -90, 54, -217, -139, 178, -121, 11,
	11, 11, 11, -213, 191, 191, 55, 55, -191, -227,
	54, -121, 53, 38, 308, 313, -226, 55, 54, -203,
	-203, 55, 55, -199, -165, -165, 309, 59, 16, 59,
	59, 59, 59, 321, 146, 323, 16, -59, 53, 55,
	55, 337, -213, -91, -215, -121, 179, 27, -212, -213,
	-212, -222, 187, 73, -189, -185, 33, -178, 38, -121,
	-181, 129, -180, 59, 59, 325, -127, -180, -93, -59,
	-180, -41, 338, 19, -121, 80, -213, 80, -223, 188,
	187, 149, 55, 309, -227, -55, -179, 110, -179, 55,
	-180, 80, -2, 79, 190, 189, 150, 312, 53, -122,
	191, -226, 313, -167, -212, -65, 146, 55, 80, -227,
	-227,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 733, 0, 477, 477, 477, 477, 477, 477, 0,
	-2, 788, 0, 0, 0, 0, -2, 467, 468, 0,
	470, 471, 1077, 1077, 1077, 1077, 1077, 0, 33, 34,
	1075, 1, 3, 741, 0, 0, 481, 484, 479, 0,
	788, 0, 0, 0, 83, 143, 363, 0, 0, 786,
	786, 0, 0, 0, 786, 130, 0, 0, 0, 789,
	0, 784, 0, 784, 784, 784, 0, 426, 559, 809,
	810, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 0, 0, 0, 0, 1078, 1078, 1078,
	1078, 0, 1078, 455, 444, 446, 447, 448, 449, 1078,
	464, 465, 454, 466, 469, 472, 473, 474, 475, 476,
	27, 745, 0, 0, 733, 29, 0, 477, 482, 483,
	487, 485, 486, 478, 0, 495, 499, 0, 569, 0,
	574, 576, -2, -2, 0, 611, 612, 613, 614, 615,
	616, 0, 0, 0, 0, 0, 0, 0, 640, 641,
	642, 643, 718, 719, 720, 721, 722, 723, 724, 725,
	578, 579, 714, 0, 765, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 705, 0, 671, 671, 671, 671,
	671, 671, 671, 671, 0, 0, 0, 0, 0, 0,
	0, 506, 508, 509, 510, 540, 0, 542, 0, 0,
	41, 45, 0, 1045, 769, -2, -2, 0, 0, 0,
	807, 808, -2, 955, -2, 805, 806, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 0, 144, 0, 0, 364, 365, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 140, 0, 1078, 0,
	0, 0, 0, 0, 0, 0, 425, 0, 427, 1078,
	1078, 1078, 1078, 1078, 1078, 1078, 1078, 436, 1079, 1080,
	437, 438, 439, 1078, 1078, 441, 0, 456, 0, 450,
	28, 1076, 22, 0, 0, 742, 0, 734, 735, 738,
	741, 27, 484, 0, 489, 488, 480, 0, 496, 0,
	0, 0, 500, 0, 502, 503, 0, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 597,
	598, 599, 600, 601, 602, 575, 0, 589, 0, 0,
	0, 632, 633, 634, 635, 636, 637, 0, 491, 0,
	27, 0, 609, 0, 0, 0, 0, 0, 0, 0,
	0, 487, 0, 706, 0, 662, 0, 663, 664, 665,
	666, 667, 668, 669, 670, 698, 0, 700, 701, 702,
	703, 704, 225, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 251, 252, 0, 491, 0, 0, 43, 0,
	558, 0, 0, 0, 0, 0, 0, 547, 0, 0,
	550, 0, 0, 0, 0, 541, 0, 0, 561, 1009,
	543, 0, 545, 546, -2, 0, 0, 0, 39, 40,
	0, 46, 1045, 48, 72, 0, 0, 0, 0, 306,
	779, 780, 781, 777, 372, 0, 150, 300, 296, 152,
	153, 154, 155, 156, 286, 224, 251, 252, 286, 286,
	286, 286, 286, 258, 286, 286, 303, 303, 303, 303,
	303, 267, 268, 269, 270, 271, 272, 273, 970, 0,
	243, 286, 286, 286, 247, 286, 249, 250, 276, 277,
	278, 279, 280, 281, 282, 283, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 288, 288, 288, 290,
	290, 241, 242, 0, 0, 134, 0, 1078, 0, 1078,
	0, 0, 0, 95, 96, 97, 0, 141, 0, 0,
	392, 0, 420, 785, 0, 1078, 423, 424, 560, 811,
	812, 428, 429, 430, 431, 432, 433, 434, 435, 440,
	443, 457, 451, 452, 445, 746, 0, 0, 0, 0,
	0, 737, 739, 740, 745, 30, 487, 0, 726, 0,
	0, 0, 490, 25, 570, 571, 573, 590, 0, 592,
	594, 501, 497, 0, 715, -2, 580, 581, 605, 606,
	607, 0, 0, 0, 0, 603, 585, 0, 617, 618,
	619, 620, 621, 622, 623, 624, 625, 626, 627, 628,
	631, 682, 683, 639, 0, 629, 630, 638, 0, 0,
	492, 493, 717, 608, 0, 764, 27, 0, 0, 0,
	0, 0, 714, 0, 0, 0, 0, 712, 709, 0,
	0, 672, 699, 0, 0, 0, 0, 0, 0, 557,
	565, 766, 0, 507, 536, 538, 0, 533, 548, 549,
	551, 0, 553, 0, 555, 556, 511, 512, 513, 0,
	0, 0, 0, 544, 565, 0, 565, 42, 770, 47,
	0, 0, 75, 76, 771, 772, 773, 0, 775, 307,
	0, 142, 373, 375, 378, 379, 380, 145, 146, 147,
	148, 149, 0, 366, 368, 0, 0, 0, 0, 0,
	343, 344, 158, 0, 160, 0, 0, 163, 164, 0,
	166, 168, 366, 0, 0, 0, 0, 0, 157, 0,
	302, 298, 297, 223, 0, 303, 303, 286, 303, 303,
	303, 260, 261, 306, 0, 306, 306, 306, 306, 0,
	0, 293, 293, 246, 248, 235, 0, 288, 237, 238,
	239, 0, 240, 0, 0, 88, 0, 132, 133, 89,
	787, 90, 116, 0, 101, 98, 99, 100, 0, 94,
	1077, 129, 0, 800, 393, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 0, 0, 419, 1078, 422,
	460, 0, 0, 0, 743, 744, 0, 736, 23, 0,
	782, 783, 727, 728, 504, 591, 593, 595, 0, 491,
	582, 603, 586, 0, 583, 0, 0, 577, 644, 0,
	0, 610, -2, 647, 648, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 733, 0, 710, 0, 0, 661,
	673, 674, 675, 676, 758, 0, 0, -2, 0, 0,
	733, 0, 0, 0, 530, 537, 0, 0, 531, 0,
	532, 552, 554, 523, 0, 0, 0, 0, 0, 528,
	733, 565, 38, 73, 74, 0, 0, 80, 0, 308,
	0, 376, 0, 0, 351, 0, 0, 0, 369, 335,
	0, 0, 338, 0, 340, 363, 159, 0, 0, 0,
	165, 167, 0, 171, 172, 0, 193, 0, 0, 181,
	0, 217, 185, 186, 187, 188, 189, 190, 0, 286,
	286, 213, 0, 301, 151, 299, 0, 306, 306, 303,
	306, 306, 306, 262, 0, 263, 264, 265, 266, 0,
	284, 0, 244, 0, 0, 245, 0, 236, 0, 0,
	0, -2, 135, 136, 0, 119, 0, 0, 0, 0,
	381, 0, 0, 1077, 0, 407, 408, 409, 410, 411,
	412, 413, 1077, 0, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 404, 0, 1077, 801, 802, 803,
	804, 0, 0, 421, 442, 0, 0, 458, 459, 747,
	0, 24, 565, 0, 498, 716, 0, 584, 0, 604,
	587, 645, 494, 0, 286, 286, 687, 286, 290, 690,
	691, 286, 693, 286, 696, 0, 0, 0, 0, 715,
	0, 0, 0, 707, 660, 713, 0, 31, 0, 758,
	748, 760, 762, 0, 27, 0, 754, 0, 741, 767,
	566, 768, 534, 0, 539, 0, 0, 0, 0, 542,
	0, 741, 37, 77, 78, 79, 774, 374, 377, 0,
	345, 286, 286, 0, 0, 0, 0, 0, 0, 336,
	337, 339, 341, 363, 180, 161, 366, 162, 0, 0,
	0, 194, 0, 0, 0, 184, 0, 0, 209, 0,
	211, 0, 0, 287, 253, 254, 306, 255, 256, 257,
	304, 305, 303, 0, 303, 0, 0, 0, 291, 0,
	0, 0, 0, 0, 0, 0, 117, 118, 0, 102,
	0, 0, 405, 406, 0, 386, 0, 387, 389, 390,
	391, 0, 368, 385, 461, 462, 729, 505, 646, 588,
	649, 684, 303, 688, 689, 692, 694, 695, 697, 651,
	650, 652, 0, 0, 655, 0, 0, 0, 0, 0,
	711, 0, 32, 0, 763, -2, 0, 0, 0, 44,
	35, 0, 525, 526, 0, 515, 517, 518, 519, 520,
	521, 522, 0, 0, 0, 561, 529, 36, 310, 0,
	738, 349, 350, 348, 366, 357, 358, 0, 0, 366,
	367, 368, 363, 0, 342, 0, 0, 0, 0, 177,
	0, 182, 0, 192, 955, 293, 220, 221, 222, 191,
	210, 212, 214, 259, 306, 285, 306, 294, 295, 0,
	0, 0, 0, 0, 137, 138, 0, 120, 121, 122,
	123, 124, 0, 0, 0, 0, 0, 0, 369, 731,
	0, 685, 686, 0, 0, 0, 0, 677, 659, 708,
	0, 761, 0, -2, 0, 756, 755, 0, 535, 514,
	0, 562, 563, 564, 513, 332, 311, 0, 313, 0,
	328, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	347, 352, 0, 359, 360, 353, 0, 0, 369, 0,
	0, 0, 215, 173, 0, 195, 0, 0, 218, 219,
	274, 275, 289, 292, 0, 0, 0, 125, 370, 0,
	93, 103, 105, 106, 107, 108, 109, 110, 111, 112,
	733, 0, 0, 0, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 26, 0, 0, 653, 654, 656, 657,
	0, 0, 0, 0, 751, 27, 0, 527, 516, 524,
	309, 0, 314, 0, 0, 0, 317, 0, 329, 319,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 169, 0, 0, 0, 0, 179, 183,
	567, 0, 0, 127, 0, 0, 0, 104, 741, 49,
	54, 51, 56, 57, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 415, 0, 0,
	732, 730, 658, 0, 0, 0, 759, -2, 757, 333,
	0, 315, 320, 318, 321, 330, 331, 322, 323, 324,
	325, 326, 327, 366, 366, 0, 0, 362, 215, 216,
	0, 0, 176, 178, 0, 0, 0, 0, 0, 0,
	206, 0, 565, 0, 0, 0, 91, 0, 371, 126,
	92, 114, 0, 745, 0, 0, 53, 55, 59, 62,
	63, 64, 65, 66, 0, 0, 382, 813, 134, 414,
	0, 0, 0, 678, 0, 681, 0, 312, 0, 354,
	355, 0, 310, 170, 174, 175, 0, 197, 0, 199,
	200, 201, 202, 203, 204, 205, 0, 310, 0, 565,
	310, 0, 0, 113, 52, 0, 0, 0, 0, 68,
	0, 816, 814, 0, 388, 416, 0, 0, 679, 0,
	316, 0, 332, 196, 198, 207, 0, 332, 0, 310,
	85, 128, 0, 0, 60, 67, 69, 70, 384, 0,
	815, 0, 383, 0, 334, 0, 361, 0, 84, 568,
	86, 115, -2, 0, 817, 818, 0, 0, 0, 208,
	0, 0, 680, 0, 0, 0, 0, 356, 71, 417,
	418,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 338,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 339, 3, 340, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:372
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:377
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:378
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:382
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:405
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:413
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:417
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:423
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:430
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:436
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:440
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:446
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:450
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:457
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:469
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:481
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:485
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:491
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:497
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:501
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:505
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:510
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:511
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:515
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:519
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:524
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:528
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:534
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:538
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:542
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:546
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:552
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:556
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:569
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:573
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:579
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:584
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:588
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:594
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:601
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:608
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:615
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:623
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:633
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:637
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:641
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:645
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:649
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:655
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:662
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:672
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:676
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:682
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:690
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:701
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:705
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:711
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:715
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:719
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:725
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:729
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:733
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:737
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:743
		{
			yyVAL.str = SessionStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:747
		{
			yyVAL.str = GlobalStr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:753
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 84:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:758
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 85:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:778
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 86:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:794
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:809
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:817
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:825
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:829
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:833
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 92:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:845
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:856
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:867
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:879
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:883
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:887
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:893
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:897
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:901
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:907
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:911
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:917
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:921
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:927
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:938
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:950
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:957
		{
			yyVAL.bytes = nil
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:961
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:965
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:970
		{
			yyVAL.bytes = nil
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:974
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:978
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:982
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:986
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:990
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:995
		{
			yyVAL.expr = nil
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:999
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1004
		{
			yyVAL.expr = nil
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1008
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1013
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1017
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1022
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1026
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1032
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1037
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1042
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1048
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1053
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1059
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1064
		{
			yyVAL.bytes = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1068
		{
			yyVAL.bytes = nil
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1074
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1081
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1087
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1091
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1096
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1100
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1104
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1108
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1112
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1118
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1124
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1135
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1141
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1153
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1158
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1163
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1168
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1173
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1178
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1183
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1188
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1193
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1198
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1203
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1208
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1217
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1227
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1232
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1237
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1244
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1251
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1259
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1265
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1271
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1277
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1283
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1290
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1294
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1298
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1304
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1308
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1312
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1316
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1320
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1324
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1328
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1332
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1336
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1342
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1346
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1351
		{
			yyVAL.sequence = &Sequence{}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1355
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1360
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1365
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1370
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1375
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1380
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1385
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1390
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1395
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1400
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1405
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1410
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1415
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1422
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1426
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1430
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1434
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1438
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1442
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1447
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1451
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1456
		{
			yyVAL.bytes = nil
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1467
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1472
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1478
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1482
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1486
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1494
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1498
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1502
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1506
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1510
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1514
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1520
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1526
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1532
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1538
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1544
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1550
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1556
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1560
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1570
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1578
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1590
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1594
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1600
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1604
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1638
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1642
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1646
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1650
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1654
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1658
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1662
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1666
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1670
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1674
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1678
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1699
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1705
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1739
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1744
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1749
		{
			yyVAL.optVal = nil
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1753
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1758
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1762
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1770
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1774
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 292:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1780
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1788
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1792
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1796
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1801
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1805
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1810
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1814
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1819
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1823
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1827
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1832
		{
			yyVAL.str = ""
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1836
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1840
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1845
		{
			yyVAL.str = ""
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1849
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1853
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1859
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1864
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1868
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1872
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1878
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1882
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1888
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1892
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1898
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1902
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1907
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1911
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1915
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1919
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1923
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1927
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1931
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1935
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1939
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1945
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1949
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1955
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1959
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1965
		{
			yyVAL.indexPartition = nil
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1969
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 334:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1973
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1979
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1983
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1987
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1991
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1995
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1999
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2003
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2007
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2013
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2017
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2023
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2027
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2033
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2038
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2042
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2052
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 352:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2057
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2064
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 354:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2071
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 355:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2078
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 356:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2087
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2099
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2103
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2107
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2111
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 361:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2117
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 362:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2128
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2138
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2142
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2146
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2152
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2156
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2161
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2168
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2172
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2177
		{
			yyVAL.str = ""
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2181
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2185
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2193
		{
			yyVAL.str = yyDollar[1].str
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2197
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2201
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2207
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2211
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2215
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2221
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 382:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2225
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 383:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2239
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 384:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2253
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 385:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2272
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 386:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2281
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 387:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2285
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 388:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2289
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 389:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2302
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 390:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2312
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2317
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2322
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2326
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 414:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2358
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2364
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2368
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 417:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2374
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 418:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2378
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 419:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2384
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2390
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 421:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2398
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 422:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2403
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2411
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2415
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2421
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2425
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2430
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2436
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2440
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2444
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2449
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2453
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2457
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2461
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2465
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2469
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2473
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2477
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2481
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2485
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2489
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2493
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2503
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2507
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2511
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2515
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2519
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2523
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2527
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2537
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2543
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2547
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2553
		{
			yyVAL.str = ""
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2557
		{
			yyVAL.str = "extended "
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2563
		{
			yyVAL.str = ""
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2567
		{
			yyVAL.str = "full "
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2573
		{
			yyVAL.str = ""
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2577
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2581
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2587
		{
			yyVAL.showFilter = nil
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2591
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2595
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2601
		{
			yyVAL.str = ""
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2605
		{
			yyVAL.str = SessionStr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2609
		{
			yyVAL.str = GlobalStr
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2615
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2619
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2625
		{
			yyVAL.statement = &Begin{}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2629
		{
			yyVAL.statement = &Begin{}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2635
		{
			yyVAL.statement = &Commit{}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2641
		{
			yyVAL.statement = &Rollback{}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2647
		{
			yyVAL.statement = &OtherRead{}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2651
		{
			yyVAL.statement = &OtherRead{}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2655
		{
			yyVAL.statement = &OtherRead{}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2659
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2663
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2668
		{
			setAllowComments(yylex, true)
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2672
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2678
		{
			yyVAL.bytes2 = nil
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2682
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2688
		{
			yyVAL.str = UnionStr
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2692
		{
			yyVAL.str = UnionAllStr
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2696
		{
			yyVAL.str = UnionDistinctStr
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2701
		{
			yyVAL.str = ""
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2705
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2709
		{
			yyVAL.str = SQLCacheStr
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2714
		{
			yyVAL.str = ""
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2718
		{
			yyVAL.str = DistinctStr
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2723
		{
			yyVAL.str = ""
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2727
		{
			yyVAL.str = StraightJoinHint
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2732
		{
			yyVAL.selectExprs = nil
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2736
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2742
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2746
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2752
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2756
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2760
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 498:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2764
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2769
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2773
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2777
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2784
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2789
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2793
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2799
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2803
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2813
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2817
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2821
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2826
		{
			yyVAL.strs = []string{}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2830
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2836
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2840
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2846
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2850
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2854
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2858
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2862
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2866
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2872
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 524:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2876
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2882
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2887
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2891
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2897
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2901
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2914
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2918
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2922
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2926
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2932
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2934
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2938
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2940
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2944
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2946
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2949
		{
			yyVAL.empty = struct{}{}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2951
		{
			yyVAL.empty = struct{}{}
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2954
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2958
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2962
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2969
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2975
		{
			yyVAL.str = JoinStr
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2979
		{
			yyVAL.str = JoinStr
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2983
		{
			yyVAL.str = JoinStr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2989
		{
			yyVAL.str = StraightJoinStr
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2995
		{
			yyVAL.str = LeftJoinStr
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2999
		{
			yyVAL.str = LeftJoinStr
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3003
		{
			yyVAL.str = RightJoinStr
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3007
		{
			yyVAL.str = RightJoinStr
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3013
		{
			yyVAL.str = NaturalJoinStr
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3017
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3027
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3031
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3037
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3041
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3046
		{
			yyVAL.indexHints = nil
		}
	case 562:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3050
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3054
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 564:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3058
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3063
		{
			yyVAL.expr = nil
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3067
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3072
		{
			yyVAL.columns = nil
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3076
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3082
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3086
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3090
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3094
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3098
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3102
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3106
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3112
		{
			yyVAL.str = ""
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3116
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3122
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3126
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3132
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3136
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3140
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3144
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3148
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3152
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3156
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3160
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 588:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3164
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3168
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3174
		{
			yyVAL.str = IsNullStr
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3178
		{
			yyVAL.str = IsNotNullStr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3182
		{
			yyVAL.str = IsTrueStr
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3186
		{
			yyVAL.str = IsNotTrueStr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3190
		{
			yyVAL.str = IsFalseStr
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3194
		{
			yyVAL.str = IsNotFalseStr
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3200
		{
			yyVAL.str = EqualStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3204
		{
			yyVAL.str = LessThanStr
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3208
		{
			yyVAL.str = GreaterThanStr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3212
		{
			yyVAL.str = LessEqualStr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3216
		{
			yyVAL.str = GreaterEqualStr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3220
		{
			yyVAL.str = NotEqualStr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3224
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3229
		{
			yyVAL.expr = nil
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3233
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3239
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3243
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3247
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3253
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3259
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3263
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3269
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3273
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3277
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3281
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3285
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3289
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3293
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3297
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3301
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3305
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3309
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3313
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3317
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3321
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3325
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3329
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3333
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3337
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3341
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3345
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3349
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3353
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3357
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3361
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3369
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3383
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3387
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3391
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3399
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3413
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 645:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3417
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 646:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3421
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3431
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3435
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 649:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3439
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 650:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3443
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 651:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3447
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 652:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3451
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 653:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3455
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 654:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3459
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 655:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3463
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 656:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3467
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 657:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3471
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 658:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3475
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 659:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3479
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 660:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3483
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3487
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3497
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3501
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3505
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3509
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3514
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3519
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3524
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3529
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3533
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3547
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3551
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3555
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3559
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3565
		{
			yyVAL.str = ""
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3569
		{
			yyVAL.str = BooleanModeStr
		}
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3573
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 680:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3577
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3581
		{
			yyVAL.str = QueryExpansionStr
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3587
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3591
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3597
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3601
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3605
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3609
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3613
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3617
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3623
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3627
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3631
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3635
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3639
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3643
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3647
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3651
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3657
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3661
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3665
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3669
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3673
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3677
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3681
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3686
		{
			yyVAL.expr = nil
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3690
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3695
		{
			yyVAL.str = string("")
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3699
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3705
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3709
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3715
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3720
		{
			yyVAL.expr = nil
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3724
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3730
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3734
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 716:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3738
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3744
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3750
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3754
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3758
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3762
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3766
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3770
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3774
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3778
		{
			yyVAL.expr = &NullVal{}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3784
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3793
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3797
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3802
		{
			yyVAL.exprs = nil
		}
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3806
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3811
		{
			yyVAL.expr = nil
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3815
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3820
		{
			yyVAL.orderBy = nil
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3824
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3830
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3834
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3840
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3845
		{
			yyVAL.str = AscScr
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3849
		{
			yyVAL.str = AscScr
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3853
		{
			yyVAL.str = DescScr
		}
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3858
		{
			yyVAL.limit = nil
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3862
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3866
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3870
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3875
		{
			yyVAL.str = ""
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3879
		{
			yyVAL.str = ForUpdateStr
		}
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3883
		{
			yyVAL.str = ShareModeStr
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3896
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3900
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3904
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 751:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3909
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3913
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 753:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3917
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3924
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3928
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3932
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 757:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3936
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3941
		{
			yyVAL.updateExprs = nil
		}
	case 759:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3945
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3951
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3955
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3961
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3965
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3971
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3977
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3987
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3991
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3997
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4003
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4007
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4013
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4017
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4021
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 774:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4026
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4030
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4037
		{
			yyVAL.bytes = []byte("charset")
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4044
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4048
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4052
		{
			yyVAL.expr = &Default{}
		}
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4061
		{
			yyVAL.byt = 0
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4063
		{
			yyVAL.byt = 1
		}
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4066
		{
			yyVAL.empty = struct{}{}
		}
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4068
		{
			yyVAL.empty = struct{}{}
		}
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4071
		{
			yyVAL.str = ""
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4073
		{
			yyVAL.str = IgnoreStr
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4077
		{
			yyVAL.empty = struct{}{}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4079
		{
			yyVAL.empty = struct{}{}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4081
		{
			yyVAL.empty = struct{}{}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4083
		{
			yyVAL.empty = struct{}{}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4085
		{
			yyVAL.empty = struct{}{}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4087
		{
			yyVAL.empty = struct{}{}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4089
		{
			yyVAL.empty = struct{}{}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4091
		{
			yyVAL.empty = struct{}{}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4093
		{
			yyVAL.empty = struct{}{}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4095
		{
			yyVAL.empty = struct{}{}
		}
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4098
		{
			yyVAL.empty = struct{}{}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4100
		{
			yyVAL.empty = struct{}{}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4102
		{
			yyVAL.empty = struct{}{}
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4106
		{
			yyVAL.empty = struct{}{}
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4108
		{
			yyVAL.empty = struct{}{}
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4112
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4116
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4123
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4129
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4133
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4140
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 813:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4146
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4150
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4154
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4160
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4164
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4168
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4450
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4459
		{
			decNesting(yylex)
		}
	case 1077:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4464
		{
			forceEOF(yylex)
		}
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4469
		{
			forceEOF(yylex)
		}
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4473
		{
			forceEOF(yylex)
		}
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4477
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
