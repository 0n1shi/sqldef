// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const POLICY = 57457
const UNIQUE = 57458
const KEY = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const STATUS = 57477
const VARIABLES = 57478
const RESTRICT = 57479
const CASCADE = 57480
const NO = 57481
const ACTION = 57482
const PERMISSIVE = 57483
const RESTRICTIVE = 57484
const PUBLIC = 57485
const CURRENT_USER = 57486
const SESSION_USER = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const SMALLSERIAL = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const SERIAL = 57500
const BIGINT = 57501
const BIGSERIAL = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const PRECISION = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const VARYING = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const UUID = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const JSONB = 57531
const ENUM = 57532
const GEOMETRY = 57533
const POINT = 57534
const LINESTRING = 57535
const POLYGON = 57536
const GEOMETRYCOLLECTION = 57537
const MULTIPOINT = 57538
const MULTILINESTRING = 57539
const MULTIPOLYGON = 57540
const ARRAY = 57541
const NOW = 57542
const NULLX = 57543
const AUTO_INCREMENT = 57544
const APPROXNUM = 57545
const SIGNED = 57546
const UNSIGNED = 57547
const ZEROFILL = 57548
const ZONE = 57549
const AUTOINCREMENT = 57550
const DATABASES = 57551
const TABLES = 57552
const VITESS_KEYSPACES = 57553
const VITESS_SHARDS = 57554
const VITESS_TABLETS = 57555
const VSCHEMA_TABLES = 57556
const EXTENDED = 57557
const FULL = 57558
const PROCESSLIST = 57559
const NAMES = 57560
const CHARSET = 57561
const GLOBAL = 57562
const SESSION = 57563
const ISOLATION = 57564
const LEVEL = 57565
const READ = 57566
const WRITE = 57567
const ONLY = 57568
const REPEATABLE = 57569
const COMMITTED = 57570
const UNCOMMITTED = 57571
const SERIALIZABLE = 57572
const CURRENT_TIMESTAMP = 57573
const DATABASE = 57574
const CURRENT_DATE = 57575
const CURRENT_TIME = 57576
const LOCALTIME = 57577
const LOCALTIMESTAMP = 57578
const UTC_DATE = 57579
const UTC_TIME = 57580
const UTC_TIMESTAMP = 57581
const REPLACE = 57582
const CONVERT = 57583
const CAST = 57584
const SUBSTR = 57585
const SUBSTRING = 57586
const GROUP_CONCAT = 57587
const SEPARATOR = 57588
const INHERIT = 57589
const MATCH = 57590
const AGAINST = 57591
const BOOLEAN = 57592
const LANGUAGE = 57593
const WITH = 57594
const WITHOUT = 57595
const PARSER = 57596
const QUERY = 57597
const EXPANSION = 57598
const UNUSED = 57599
const TYPECAST = 57600
const CHECK = 57601

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	120, 92,
	-2, 82,
	-1, 36,
	152, 338,
	153, 338,
	-2, 328,
	-1, 255,
	108, 667,
	-2, 663,
	-1, 256,
	108, 668,
	-2, 664,
	-1, 326,
	79, 843,
	-2, 58,
	-1, 327,
	79, 798,
	-2, 59,
	-1, 332,
	79, 780,
	-2, 634,
	-1, 334,
	79, 820,
	-2, 636,
	-1, 621,
	51, 41,
	53, 41,
	-2, 43,
	-1, 753,
	108, 670,
	-2, 666,
	-1, 982,
	5, 28,
	-2, 470,
	-1, 1007,
	5, 27,
	-2, 609,
	-1, 1091,
	5, 27,
	-2, 64,
	-1, 1287,
	5, 28,
	-2, 610,
	-1, 1355,
	5, 27,
	-2, 612,
	-1, 1442,
	5, 28,
	-2, 613,
}

const yyPrivate = 57344

const yyLast = 12568

var yyAct = [...]int{

	256, 1391, 922, 1432, 689, 1304, 1010, 1203, 249, 817,
	548, 260, 1366, 1082, 1176, 1293, 1204, 1042, 835, 285,
	1177, 858, 615, 1093, 1173, 916, 864, 467, 613, 1026,
	901, 857, 818, 853, 234, 88, 1149, 53, 88, 789,
	778, 318, 228, 331, 974, 66, 1079, 262, 911, 786,
	631, 259, 1015, 755, 480, 486, 805, 434, 325, 814,
	617, 873, 88, 88, 336, 602, 956, 630, 258, 336,
	253, 322, 336, 313, 893, 492, 85, 88, 788, 88,
	312, 547, 3, 571, 243, 88, 229, 230, 231, 232,
	311, 328, 576, 500, 577, 320, 1066, 562, 890, 247,
	52, 1467, 514, 1214, 321, 524, 1483, 524, 1464, 316,
	1480, 1440, 1417, 1083, 1084, 1477, 923, 1453, 446, 1463,
	447, 1168, 508, 1439, 511, 1422, 454, 1281, 444, 233,
	526, 527, 528, 529, 530, 531, 532, 1217, 509, 510,
	507, 513, 512, 522, 523, 515, 516, 517, 518, 519,
	520, 521, 514, 1034, 1198, 524, 1033, 1277, 479, 1035,
	889, 1405, 513, 512, 522, 523, 515, 516, 517, 518,
	519, 520, 521, 514, 1199, 1200, 524, 522, 523, 515,
	516, 517, 518, 519, 520, 521, 514, 1274, 479, 524,
	849, 850, 1278, 848, 513, 512, 522, 523, 515, 516,
	517, 518, 519, 520, 521, 514, 475, 88, 524, 1323,
	1322, 336, 336, 336, 336, 720, 336, 83, 79, 80,
	81, 892, 721, 336, 513, 512, 522, 523, 515, 516,
	517, 518, 519, 520, 521, 514, 1367, 632, 524, 633,
	1068, 902, 1231, 1379, 483, 487, 479, 809, 456, 1369,
	336, 1230, 515, 516, 517, 518, 519, 520, 521, 514,
	1270, 505, 524, 513, 512, 522, 523, 515, 516, 517,
	518, 519, 520, 521, 514, 488, 525, 524, 525, 1344,
	894, 1268, 513, 512, 522, 523, 515, 516, 517, 518,
	519, 520, 521, 514, 1313, 549, 524, 227, 1242, 1243,
	1374, 1312, 1382, 284, 560, 535, 471, 472, 1479, 1275,
	1475, 88, 1433, 912, 1307, 1127, 1368, 1245, 88, 88,
	88, 489, 815, 1434, 336, 1352, 525, 1311, 1310, 74,
	336, 874, 1246, 1062, 539, 540, 541, 542, 543, 544,
	545, 1406, 460, 1438, 1061, 1044, 875, 525, 1208, 82,
	1473, 328, 597, 1254, 517, 518, 519, 520, 521, 514,
	525, 621, 524, 1396, 1209, 316, 449, 330, 440, 1124,
	77, 76, 438, 77, 1331, 442, 699, 70, 72, 525,
	513, 512, 522, 523, 515, 516, 517, 518, 519, 520,
	521, 514, 71, 73, 524, 628, 564, 565, 566, 567,
	568, 569, 570, 437, 445, 462, 206, 464, 1025, 525,
	68, 1024, 1049, 1023, 436, 622, 1047, 902, 78, 897,
	513, 512, 522, 523, 515, 516, 517, 518, 519, 520,
	521, 514, 1128, 525, 524, 461, 463, 336, 88, 1305,
	1306, 1308, 913, 1410, 88, 1290, 88, 336, 525, 88,
	836, 838, 88, 1136, 1370, 1225, 88, 990, 336, 336,
	336, 336, 336, 336, 336, 336, 1125, 525, 1123, 975,
	968, 727, 336, 336, 537, 538, 874, 88, 504, 688,
	874, 1126, 455, 855, 854, 695, 951, 696, 479, 499,
	700, 875, 336, 703, 724, 875, 88, 1132, 1415, 708,
	1239, 1013, 336, 498, 497, 1226, 742, 743, 634, 69,
	987, 1170, 806, 57, 330, 330, 330, 330, 722, 330,
	499, 692, 706, 732, 837, 439, 330, 756, 649, 762,
	645, 497, 752, 525, 498, 497, 459, 741, 59, 60,
	61, 62, 63, 760, 761, 759, 336, 499, 753, 498,
	497, 499, 806, 502, 997, 757, 1172, 498, 497, 549,
	1373, 1051, 796, 797, 952, 525, 499, 798, 801, 50,
	494, 751, 1131, 807, 499, 734, 75, 754, 1444, 758,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 749, 441, 88, 443, 1325,
	88, 88, 88, 88, 88, 525, 783, 784, 1416, 781,
	819, 1324, 88, 1088, 1086, 88, 965, 966, 967, 88,
	779, 986, 780, 985, 88, 88, 1069, 330, 336, 1351,
	794, 795, 793, 636, 803, 1320, 802, 310, 816, 498,
	497, 336, 811, 852, 1256, 1080, 1064, 316, 316, 316,
	316, 316, 843, 1427, 1487, 328, 499, 21, 1359, 1476,
	730, 731, 316, 1427, 1465, 479, 844, 1413, 859, 1212,
	810, 316, 812, 813, 821, 822, 832, 824, 1211, 840,
	820, 841, 1210, 823, 1459, 479, 845, 1050, 903, 904,
	905, 1387, 336, 1036, 336, 88, 793, 846, 88, 862,
	88, 1359, 1456, 88, 336, 498, 497, 925, 1052, 1053,
	1054, 782, 918, 238, 1359, 1451, 1057, 1055, 282, 283,
	1359, 1450, 499, 705, 704, 435, 895, 896, 898, 899,
	900, 693, 914, 915, 954, 955, 929, 487, 691, 946,
	687, 947, 1302, 1449, 948, 908, 909, 910, 1359, 1430,
	330, 457, 1104, 448, 490, 752, 1359, 1388, 1359, 1383,
	23, 330, 330, 330, 330, 330, 330, 330, 330, 1359,
	479, 753, 1359, 1360, 1386, 330, 330, 726, 450, 756,
	745, 747, 748, 1005, 957, 746, 1006, 958, 435, 874,
	1302, 1301, 1195, 479, 869, 736, 868, 1220, 870, 871,
	981, 1289, 479, 872, 875, 502, 50, 757, 330, 1234,
	1233, 1174, 725, 970, 1011, 998, 1228, 1229, 964, 1228,
	1227, 1105, 1101, 980, 479, 1106, 1103, 1102, 498, 497,
	73, 971, 972, 973, 1012, 451, 452, 453, 599, 479,
	336, 1107, 54, 88, 625, 499, 23, 1100, 1028, 785,
	1030, 791, 479, 641, 640, 1428, 1012, 1427, 336, 799,
	799, 996, 842, 598, 624, 799, 979, 1011, 1059, 336,
	791, 1029, 1354, 1139, 992, 599, 1020, 989, 1285, 1038,
	980, 599, 994, 1144, 626, 859, 624, 599, 88, 1238,
	316, 1232, 50, 50, 23, 1037, 1007, 1011, 1031, 1056,
	1236, 1235, 799, 513, 512, 522, 523, 515, 516, 517,
	518, 519, 520, 521, 514, 980, 991, 524, 847, 988,
	88, 336, 980, 1085, 336, 627, 1070, 1071, 728, 1073,
	1058, 330, 1045, 1046, 1048, 1074, 1481, 1076, 1077, 1078,
	50, 1461, 1420, 240, 330, 1393, 1390, 1389, 1378, 336,
	1338, 1094, 88, 88, 1081, 894, 917, 1219, 1189, 912,
	88, 1089, 1087, 1040, 604, 607, 608, 609, 605, 336,
	606, 610, 1072, 1097, 1016, 1017, 690, 1098, 512, 522,
	523, 515, 516, 517, 518, 519, 520, 521, 514, 50,
	907, 524, 1016, 1017, 1375, 330, 1141, 330, 919, 920,
	740, 1137, 906, 1091, 65, 1372, 1171, 330, 1237, 336,
	336, 1174, 1041, 1019, 702, 1175, 1143, 819, 1165, 1142,
	1148, 1186, 1187, 819, 1162, 1188, 1178, 1161, 1190, 694,
	476, 330, 1169, 1022, 753, 1021, 1197, 829, 336, 1183,
	336, 336, 830, 826, 1185, 827, 1145, 1146, 1184, 825,
	828, 878, 831, 1472, 608, 609, 953, 244, 245, 1163,
	1164, 1202, 1166, 1167, 1462, 859, 1196, 859, 1135, 1201,
	1470, 963, 1218, 879, 275, 274, 277, 278, 279, 280,
	493, 962, 1075, 276, 281, 481, 639, 886, 525, 876,
	1180, 458, 1283, 491, 877, 1339, 482, 927, 701, 1096,
	921, 336, 612, 1223, 1221, 1222, 493, 1224, 241, 242,
	336, 604, 607, 608, 609, 605, 1241, 606, 610, 961,
	235, 1333, 88, 1334, 1335, 1336, 1399, 960, 336, 236,
	1398, 1215, 54, 1342, 1012, 1332, 495, 336, 1207, 1206,
	88, 1257, 1247, 1027, 1419, 1258, 1418, 882, 1407, 1060,
	887, 1249, 723, 56, 58, 1255, 884, 883, 1099, 1244,
	623, 330, 525, 1251, 1141, 1252, 51, 1, 1259, 1381,
	67, 1452, 1043, 1426, 1213, 1240, 1095, 1108, 924, 1092,
	1266, 1282, 934, 1431, 1365, 866, 856, 316, 549, 433,
	336, 64, 336, 336, 336, 88, 336, 1414, 867, 865,
	1284, 863, 336, 642, 888, 1067, 891, 1295, 1296, 1297,
	648, 646, 647, 1309, 644, 1261, 650, 1298, 643, 1292,
	336, 214, 323, 1038, 1090, 1263, 1264, 330, 1265, 859,
	611, 1300, 1267, 635, 1269, 1317, 336, 336, 88, 336,
	336, 496, 880, 1122, 1121, 336, 930, 1130, 881, 719,
	950, 1326, 330, 474, 216, 336, 533, 1318, 1319, 959,
	1321, 1330, 1329, 1032, 329, 1181, 1094, 859, 729, 485,
	1397, 1341, 330, 995, 559, 804, 261, 744, 273, 1328,
	1303, 1150, 270, 272, 271, 735, 1004, 506, 251, 315,
	336, 336, 1315, 595, 330, 1343, 465, 603, 601, 885,
	600, 1018, 1014, 336, 314, 1178, 1353, 1138, 1280, 799,
	1404, 336, 1182, 1027, 1152, 799, 739, 1364, 25, 1371,
	55, 246, 19, 18, 17, 20, 16, 1380, 1376, 478,
	15, 14, 336, 29, 13, 12, 11, 10, 9, 336,
	8, 330, 7, 330, 1205, 1345, 1346, 6, 1347, 1348,
	1349, 5, 4, 1384, 1394, 1385, 237, 22, 2, 1154,
	336, 1159, 0, 1153, 0, 1151, 0, 286, 47, 1408,
	1355, 1157, 0, 0, 1178, 0, 0, 0, 1412, 336,
	0, 1155, 1156, 0, 0, 0, 1421, 940, 0, 0,
	336, 336, 0, 0, 336, 1423, 0, 1158, 1160, 0,
	939, 0, 0, 0, 1248, 1424, 1425, 1435, 549, 1429,
	1436, 336, 0, 1250, 0, 47, 0, 1441, 336, 819,
	0, 336, 1448, 239, 1446, 1447, 0, 944, 336, 317,
	0, 1253, 0, 0, 336, 1457, 938, 1455, 1409, 0,
	330, 513, 512, 522, 523, 515, 516, 517, 518, 519,
	520, 521, 514, 0, 0, 524, 0, 1466, 0, 0,
	1468, 0, 336, 1469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 1474, 1471, 0, 0,
	0, 0, 336, 1484, 935, 932, 933, 0, 931, 484,
	0, 0, 0, 1294, 0, 1294, 1294, 1294, 0, 1299,
	0, 0, 0, 0, 0, 330, 0, 0, 468, 469,
	470, 0, 473, 0, 0, 1478, 942, 945, 0, 477,
	0, 0, 0, 1294, 86, 0, 0, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1294,
	1327, 0, 330, 330, 0, 0, 0, 0, 1337, 250,
	0, 86, 86, 1485, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 937, 86, 0, 86, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 466, 466,
	466, 466, 0, 466, 0, 0, 0, 0, 0, 0,
	466, 936, 0, 1357, 1358, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1205, 47, 0, 0,
	0, 0, 0, 0, 1377, 0, 0, 0, 0, 0,
	0, 0, 534, 0, 0, 536, 525, 0, 0, 0,
	941, 0, 0, 0, 0, 1392, 0, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 943, 0, 0, 0,
	0, 0, 546, 0, 550, 551, 552, 553, 554, 555,
	556, 557, 558, 1411, 561, 563, 563, 563, 563, 563,
	563, 563, 563, 0, 591, 592, 593, 594, 976, 0,
	0, 0, 1205, 0, 0, 614, 0, 0, 0, 0,
	0, 0, 0, 1294, 1294, 0, 86, 1294, 513, 512,
	522, 523, 515, 516, 517, 518, 519, 520, 521, 514,
	0, 799, 524, 0, 1443, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 1392, 0, 0, 0, 0, 0,
	0, 1454, 0, 0, 0, 0, 0, 1460, 0, 0,
	0, 0, 0, 698, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 709, 710, 711, 712, 713, 714,
	715, 716, 0, 0, 0, 1294, 0, 0, 717, 718,
	0, 0, 0, 0, 0, 0, 0, 0, 572, 0,
	0, 0, 0, 0, 0, 1392, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 86, 619, 86,
	0, 574, 212, 0, 466, 0, 0, 0, 0, 733,
	0, 0, 0, 0, 0, 466, 466, 466, 466, 466,
	466, 466, 466, 0, 0, 0, 222, 0, 0, 466,
	466, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	588, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 0, 0, 0, 0, 589, 573, 0, 0, 0,
	578, 0, 0, 0, 0, 0, 0, 790, 792, 0,
	0, 0, 0, 525, 1114, 0, 207, 0, 0, 0,
	0, 0, 209, 808, 0, 0, 0, 0, 0, 215,
	211, 0, 0, 0, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 213,
	0, 0, 217, 86, 0, 86, 0, 0, 86, 0,
	590, 86, 0, 834, 0, 707, 0, 0, 1115, 0,
	0, 0, 0, 1117, 1110, 1111, 0, 1118, 1113, 1112,
	0, 0, 1120, 1116, 0, 0, 86, 317, 317, 317,
	317, 317, 0, 1119, 208, 0, 0, 0, 0, 1109,
	0, 0, 614, 0, 839, 86, 0, 0, 926, 0,
	928, 317, 0, 0, 707, 0, 0, 0, 0, 0,
	949, 0, 0, 0, 0, 0, 0, 210, 0, 218,
	219, 220, 221, 225, 0, 0, 0, 0, 224, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 0, 0, 0,
	0, 250, 250, 0, 0, 800, 800, 250, 0, 0,
	0, 800, 0, 0, 0, 0, 0, 0, 0, 466,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 250, 250, 250, 0, 86, 0, 800, 86,
	86, 86, 86, 86, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 0, 86, 0, 0, 0, 619, 0,
	0, 0, 977, 86, 86, 0, 978, 0, 0, 0,
	969, 0, 0, 982, 983, 984, 0, 23, 24, 48,
	26, 27, 993, 0, 0, 0, 0, 999, 0, 0,
	1000, 1001, 1002, 1003, 0, 0, 42, 0, 0, 0,
	28, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 37,
	0, 0, 0, 50, 0, 0, 0, 0, 0, 0,
	0, 0, 1008, 1009, 86, 0, 0, 86, 0, 86,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	317, 0, 0, 0, 0, 0, 0, 707, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	0, 0, 30, 31, 33, 32, 35, 0, 0, 0,
	0, 0, 0, 0, 0, 1129, 0, 0, 0, 0,
	0, 0, 0, 1063, 0, 0, 36, 43, 44, 0,
	0, 45, 46, 34, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 0, 0,
	0, 0, 0, 0, 38, 39, 0, 40, 41, 47,
	0, 0, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1147,
	0, 0, 0, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1194, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1179, 0, 47, 1065, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1191, 1192, 1193, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	668, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1133, 1134, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	250, 0, 1260, 0, 0, 0, 0, 0, 0, 1262,
	707, 0, 0, 0, 0, 0, 654, 0, 0, 0,
	0, 1271, 1272, 1273, 0, 800, 1276, 0, 0, 0,
	0, 800, 0, 0, 0, 0, 0, 317, 0, 1286,
	1287, 1288, 0, 1291, 0, 0, 0, 0, 0, 669,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1314, 0, 1316, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 588, 0,
	682, 683, 0, 684, 685, 686, 670, 671, 672, 673,
	651, 653, 0, 589, 652, 655, 0, 666, 656, 657,
	658, 659, 660, 661, 662, 663, 664, 665, 667, 674,
	675, 676, 677, 678, 679, 680, 681, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1350, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1361, 1362, 1363, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 0, 0, 1179, 0, 0, 1356, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1400, 1401, 1402, 1403, 0,
	0, 0, 0, 0, 619, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1395, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1179, 0, 47, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 1437, 0, 0, 0, 0, 1442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 1489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 422, 412, 0,
	382, 424, 359, 374, 432, 375, 376, 404, 345, 390,
	147, 371, 91, 362, 339, 368, 340, 360, 384, 113,
	358, 414, 393, 126, 430, 129, 398, 800, 168, 138,
	0, 0, 386, 416, 388, 410, 381, 405, 350, 397,
	425, 372, 401, 426, 0, 0, 0, 335, 0, 860,
	861, 0, 0, 0, 0, 0, 104, 0, 400, 421,
	370, 403, 338, 399, 0, 343, 346, 431, 419, 365,
	366, 1039, 0, 0, 0, 0, 0, 0, 385, 389,
	407, 379, 0, 0, 0, 0, 0, 0, 0, 0,
	363, 0, 396, 86, 0, 0, 347, 344, 0, 383,
	0, 0, 0, 349, 0, 364, 408, 0, 337, 411,
	417, 380, 193, 420, 378, 377, 154, 0, 107, 0,
	172, 117, 373, 127, 406, 423, 387, 415, 361, 369,
	109, 367, 161, 148, 184, 395, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 341, 0, 169, 186, 204, 205, 342, 357, 418,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 402, 162, 106, 185, 167,
	353, 356, 351, 352, 391, 392, 427, 428, 429, 409,
	348, 0, 354, 355, 0, 413, 121, 394, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 0, 103, 422,
	412, 0, 382, 424, 359, 374, 432, 375, 376, 404,
	345, 390, 147, 371, 91, 362, 339, 368, 340, 360,
	384, 113, 358, 414, 393, 126, 430, 129, 398, 0,
	168, 138, 0, 0, 386, 416, 388, 410, 381, 405,
	350, 397, 425, 372, 401, 426, 0, 0, 0, 335,
	0, 860, 861, 0, 0, 0, 0, 0, 104, 0,
	400, 421, 370, 403, 338, 399, 0, 343, 346, 431,
	419, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	385, 389, 407, 379, 0, 0, 0, 0, 0, 0,
	0, 0, 363, 0, 396, 0, 0, 0, 347, 344,
	0, 383, 0, 0, 0, 349, 0, 364, 408, 0,
	337, 411, 417, 380, 193, 420, 378, 377, 154, 0,
	107, 0, 172, 117, 373, 127, 406, 423, 387, 415,
	361, 369, 109, 367, 161, 148, 184, 395, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 341, 0, 169, 186, 204, 205, 342,
	357, 418, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 402, 162, 106,
	185, 167, 353, 356, 351, 352, 391, 392, 427, 428,
	429, 409, 348, 0, 354, 355, 0, 413, 121, 394,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	103, 422, 412, 0, 382, 424, 359, 374, 432, 375,
	376, 404, 345, 390, 147, 371, 91, 362, 339, 368,
	340, 360, 384, 113, 358, 414, 393, 126, 430, 129,
	398, 0, 168, 138, 0, 0, 386, 416, 388, 410,
	381, 405, 350, 397, 425, 372, 401, 426, 0, 0,
	0, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 400, 421, 370, 403, 338, 399, 0, 343,
	346, 431, 419, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 385, 389, 407, 379, 0, 0, 0, 0,
	0, 0, 1140, 0, 363, 0, 396, 0, 0, 0,
	347, 344, 0, 383, 0, 0, 0, 349, 0, 364,
	408, 0, 337, 411, 417, 380, 193, 420, 378, 377,
	154, 0, 107, 0, 172, 117, 373, 127, 406, 423,
	387, 415, 361, 369, 109, 367, 161, 148, 184, 395,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 341, 0, 169, 186, 204,
	205, 342, 357, 418, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 402,
	162, 106, 185, 167, 353, 356, 351, 352, 391, 392,
	427, 428, 429, 409, 348, 0, 354, 355, 0, 413,
	121, 394, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 103, 422, 412, 0, 382, 424, 359, 374,
	432, 375, 376, 404, 345, 390, 147, 371, 91, 362,
	339, 368, 340, 360, 384, 113, 358, 414, 393, 126,
	430, 129, 398, 0, 168, 138, 0, 0, 386, 416,
	388, 410, 381, 405, 350, 397, 425, 372, 401, 426,
	50, 0, 0, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 400, 421, 370, 403, 338, 399,
	0, 343, 346, 431, 419, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 385, 389, 407, 379, 0, 0,
	0, 0, 0, 0, 0, 0, 363, 0, 396, 0,
	0, 0, 347, 344, 0, 383, 0, 0, 0, 349,
	0, 364, 408, 0, 337, 411, 417, 380, 193, 420,
	378, 377, 154, 0, 107, 0, 172, 117, 373, 127,
	406, 423, 387, 415, 361, 369, 109, 367, 161, 148,
	184, 395, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 341, 0, 169,
	186, 204, 205, 342, 357, 418, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 402, 162, 106, 185, 167, 353, 356, 351, 352,
	391, 392, 427, 428, 429, 409, 348, 0, 354, 355,
	0, 413, 121, 394, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 0, 103, 422, 412, 0, 382, 424,
	359, 374, 432, 375, 376, 404, 345, 390, 147, 371,
	91, 362, 339, 368, 340, 360, 384, 113, 358, 414,
	393, 126, 430, 129, 398, 0, 168, 138, 0, 0,
	386, 416, 388, 410, 381, 405, 350, 397, 425, 372,
	401, 426, 0, 0, 0, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 400, 421, 370, 403,
	338, 399, 0, 343, 346, 431, 419, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 385, 389, 407, 379,
	0, 0, 0, 0, 0, 0, 750, 0, 363, 0,
	396, 0, 0, 0, 347, 344, 0, 383, 0, 0,
	0, 349, 0, 364, 408, 0, 337, 411, 417, 380,
	193, 420, 378, 377, 154, 0, 107, 0, 172, 117,
	373, 127, 406, 423, 387, 415, 361, 369, 109, 367,
	161, 148, 184, 395, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 341,
	0, 169, 186, 204, 205, 342, 357, 418, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 402, 162, 106, 185, 167, 353, 356,
	351, 352, 391, 392, 427, 428, 429, 409, 348, 0,
	354, 355, 0, 413, 121, 394, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 0, 103, 422, 412, 0,
	382, 424, 359, 374, 432, 375, 376, 404, 345, 390,
	147, 371, 91, 362, 339, 368, 340, 360, 384, 113,
	358, 414, 393, 126, 430, 129, 398, 0, 168, 138,
	0, 0, 386, 416, 388, 410, 381, 405, 350, 397,
	425, 372, 401, 426, 0, 0, 0, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 400, 421,
	370, 403, 338, 399, 0, 343, 346, 431, 419, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 385, 389,
	407, 379, 0, 0, 0, 0, 0, 0, 0, 0,
	363, 0, 396, 0, 0, 0, 347, 344, 0, 383,
	0, 0, 0, 349, 0, 364, 408, 0, 337, 411,
	417, 380, 193, 420, 378, 377, 154, 0, 107, 0,
	172, 117, 373, 127, 406, 423, 387, 415, 361, 369,
	109, 367, 161, 148, 184, 395, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 341, 0, 169, 186, 204, 205, 342, 357, 418,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 402, 162, 106, 185, 167,
	353, 356, 351, 352, 391, 392, 427, 428, 429, 409,
	348, 0, 354, 355, 0, 413, 121, 394, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 0, 103, 422,
	412, 0, 382, 424, 359, 374, 432, 375, 376, 404,
	345, 390, 147, 371, 91, 362, 339, 368, 340, 360,
	384, 113, 358, 414, 393, 126, 430, 129, 398, 0,
	168, 138, 0, 0, 386, 416, 388, 410, 381, 405,
	350, 397, 425, 372, 401, 426, 0, 0, 0, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	400, 421, 370, 403, 338, 399, 0, 343, 346, 431,
	419, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	385, 389, 407, 379, 0, 0, 0, 0, 0, 0,
	0, 0, 363, 0, 396, 0, 0, 0, 347, 344,
	0, 383, 0, 0, 0, 349, 0, 364, 408, 0,
	337, 411, 417, 380, 193, 420, 378, 377, 154, 0,
	107, 0, 172, 117, 373, 127, 406, 423, 387, 415,
	361, 369, 109, 367, 161, 148, 184, 395, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 341, 0, 169, 186, 204, 205, 342,
	357, 418, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 402, 162, 106,
	185, 167, 353, 356, 351, 352, 391, 392, 427, 428,
	429, 409, 348, 0, 354, 355, 0, 413, 121, 394,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	103, 422, 412, 0, 382, 424, 359, 374, 432, 375,
	376, 404, 345, 390, 147, 371, 91, 362, 339, 368,
	340, 360, 384, 113, 358, 414, 393, 126, 430, 129,
	398, 0, 168, 138, 0, 0, 386, 416, 388, 410,
	381, 405, 350, 397, 425, 372, 401, 426, 0, 0,
	0, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 400, 421, 370, 403, 338, 399, 0, 343,
	346, 431, 419, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 385, 389, 407, 379, 0, 0, 0, 0,
	0, 0, 0, 0, 363, 0, 396, 0, 0, 0,
	347, 344, 0, 383, 0, 0, 0, 349, 0, 364,
	408, 0, 337, 411, 417, 380, 193, 420, 378, 377,
	154, 0, 107, 0, 172, 117, 373, 127, 406, 423,
	387, 415, 361, 369, 109, 367, 161, 148, 184, 395,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 333,
	189, 143, 188, 175, 181, 137, 134, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 341, 0, 169, 186, 204,
	205, 342, 357, 418, 196, 197, 198, 199, 0, 0,
	0, 334, 332, 120, 165, 124, 131, 157, 202, 402,
	162, 106, 185, 167, 353, 356, 351, 352, 391, 392,
	427, 428, 429, 409, 348, 0, 354, 355, 0, 413,
	121, 394, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 103, 422, 412, 0, 382, 424, 359, 374,
	432, 375, 376, 404, 345, 390, 147, 371, 91, 362,
	339, 368, 340, 360, 384, 113, 358, 414, 393, 126,
	430, 129, 398, 0, 168, 138, 0, 0, 386, 416,
	388, 410, 381, 405, 350, 397, 425, 372, 401, 426,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 400, 421, 370, 403, 338, 399,
	0, 343, 346, 431, 419, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 385, 389, 407, 379, 0, 0,
	0, 0, 0, 0, 0, 0, 363, 0, 396, 0,
	0, 0, 347, 344, 0, 383, 0, 0, 0, 349,
	0, 364, 408, 0, 337, 411, 417, 380, 193, 420,
	378, 377, 154, 0, 107, 0, 172, 117, 373, 127,
	406, 423, 387, 415, 361, 369, 109, 367, 161, 148,
	184, 395, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 341, 0, 169,
	186, 204, 205, 342, 357, 418, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 402, 162, 106, 185, 167, 353, 356, 351, 352,
	391, 392, 427, 428, 429, 409, 348, 0, 354, 355,
	0, 413, 121, 394, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 0, 103, 422, 412, 0, 382, 424,
	359, 374, 432, 375, 376, 404, 345, 390, 147, 371,
	91, 362, 339, 368, 340, 360, 384, 113, 358, 414,
	393, 126, 430, 129, 398, 0, 168, 138, 0, 0,
	386, 416, 388, 410, 381, 405, 350, 397, 425, 372,
	401, 426, 0, 0, 0, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 400, 421, 370, 403,
	338, 399, 0, 343, 346, 431, 419, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 385, 389, 407, 379,
	0, 0, 0, 0, 0, 0, 0, 0, 363, 0,
	396, 0, 0, 0, 347, 344, 0, 383, 0, 0,
	0, 349, 0, 364, 408, 0, 337, 411, 417, 380,
	193, 420, 378, 377, 154, 0, 107, 0, 172, 117,
	373, 127, 406, 423, 387, 415, 361, 369, 109, 367,
	161, 148, 184, 395, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 629, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 333, 189, 143, 188, 175, 181, 137,
	134, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 341,
	0, 169, 186, 204, 205, 342, 357, 418, 196, 197,
	198, 199, 0, 0, 0, 334, 332, 120, 165, 124,
	131, 157, 202, 402, 162, 106, 185, 167, 353, 356,
	351, 352, 391, 392, 427, 428, 429, 409, 348, 0,
	354, 355, 0, 413, 121, 394, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 0, 103, 422, 412, 0,
	382, 424, 359, 374, 432, 375, 376, 404, 345, 390,
	147, 371, 91, 362, 339, 368, 340, 360, 384, 113,
	358, 414, 393, 126, 430, 129, 398, 0, 168, 138,
	0, 0, 386, 416, 388, 410, 381, 405, 350, 397,
	425, 372, 401, 426, 0, 0, 0, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 400, 421,
	370, 403, 338, 399, 0, 343, 346, 431, 419, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 385, 389,
	407, 379, 0, 0, 0, 0, 0, 0, 0, 0,
	363, 0, 396, 0, 0, 0, 347, 344, 0, 383,
	0, 0, 0, 349, 0, 364, 408, 0, 337, 411,
	417, 380, 193, 420, 378, 377, 154, 0, 107, 0,
	172, 117, 373, 127, 406, 423, 387, 415, 361, 369,
	109, 367, 161, 148, 184, 395, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 324, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 333, 189, 143, 188, 175,
	181, 137, 134, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 341, 0, 169, 186, 204, 205, 342, 357, 418,
	196, 197, 198, 199, 0, 0, 0, 334, 332, 327,
	326, 124, 131, 157, 202, 402, 162, 106, 185, 167,
	353, 356, 351, 352, 391, 392, 427, 428, 429, 409,
	348, 0, 354, 355, 0, 413, 121, 394, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 147, 103, 91,
	787, 0, 257, 0, 0, 0, 113, 254, 0, 0,
	126, 296, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 255, 275, 274, 277, 278, 279,
	280, 0, 0, 104, 276, 281, 282, 283, 0, 0,
	252, 268, 0, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 248, 0, 0, 0, 308,
	0, 267, 0, 0, 263, 264, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 306, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 297, 307, 303,
	304, 301, 302, 300, 299, 298, 309, 289, 290, 291,
	292, 294, 0, 121, 293, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 305, 103, 147, 0, 91, 0,
	0, 257, 0, 0, 0, 113, 254, 0, 0, 126,
	296, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 479, 255, 275, 274, 277, 278, 279, 280,
	0, 0, 104, 276, 281, 282, 283, 0, 0, 252,
	268, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 266, 0, 0, 0, 0, 308, 0,
	267, 0, 0, 263, 264, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 306, 154, 0, 107, 0, 172, 117, 0, 127,
	0, 0, 0, 0, 0, 0, 109, 0, 161, 148,
	184, 0, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 297, 307, 303, 304,
	301, 302, 300, 299, 298, 309, 289, 290, 291, 292,
	294, 0, 121, 293, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 305, 103, 147, 0, 91, 0, 0,
	257, 0, 0, 0, 113, 254, 0, 0, 126, 296,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 255, 275, 274, 277, 278, 279, 280, 0,
	0, 104, 276, 281, 282, 283, 0, 0, 252, 268,
	0, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 265, 266, 248, 0, 0, 0, 308, 0, 267,
	0, 0, 263, 264, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	306, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 297, 307, 303, 304, 301,
	302, 300, 299, 298, 309, 289, 290, 291, 292, 294,
	0, 121, 293, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 305, 103, 147, 0, 91, 0, 0, 257,
	0, 0, 0, 113, 254, 0, 0, 126, 296, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 287, 288,
	0, 0, 0, 0, 0, 0, 851, 0, 50, 0,
	0, 255, 275, 274, 277, 278, 279, 280, 0, 0,
	104, 276, 281, 282, 283, 0, 0, 252, 268, 0,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 266, 0, 0, 0, 0, 308, 0, 267, 0,
	0, 263, 264, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 306,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 297, 307, 303, 304, 301, 302,
	300, 299, 298, 309, 289, 290, 291, 292, 294, 0,
	121, 293, 90, 98, 128, 200, 201, 23, 156, 115,
	187, 305, 103, 0, 0, 0, 0, 0, 0, 147,
	0, 91, 0, 0, 257, 0, 0, 0, 113, 254,
	0, 0, 126, 296, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 255, 275, 274, 277,
	278, 279, 280, 0, 0, 104, 276, 281, 282, 283,
	0, 0, 252, 268, 0, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 0, 0, 0,
	0, 308, 0, 267, 0, 0, 263, 264, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 306, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 297,
	307, 303, 304, 301, 302, 300, 299, 298, 309, 289,
	290, 291, 292, 294, 0, 121, 293, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 305, 103, 147, 0,
	91, 0, 0, 257, 0, 0, 0, 113, 254, 0,
	0, 126, 296, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 255, 275, 274, 277, 278,
	279, 280, 0, 0, 104, 276, 281, 282, 283, 0,
	0, 252, 268, 0, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 266, 0, 0, 0, 0,
	308, 0, 267, 0, 0, 263, 264, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 306, 154, 0, 107, 0, 172, 117,
	0, 127, 0, 0, 0, 0, 0, 0, 109, 0,
	161, 148, 184, 0, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 0, 162, 106, 185, 167, 297, 307,
	303, 304, 301, 302, 300, 299, 298, 309, 289, 290,
	291, 292, 294, 0, 121, 293, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 305, 103, 147, 0, 91,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	126, 296, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 255, 275, 274, 277, 278, 279,
	280, 0, 0, 104, 276, 281, 282, 283, 0, 0,
	0, 268, 0, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 0, 0, 0, 0, 308,
	0, 267, 0, 0, 263, 264, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 306, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 1486, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 297, 307, 303,
	304, 301, 302, 300, 299, 298, 309, 289, 290, 291,
	292, 294, 0, 121, 293, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 305, 103, 147, 0, 91, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 126,
	296, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 255, 275, 274, 277, 278, 279, 280,
	0, 0, 104, 276, 281, 282, 283, 0, 0, 0,
	268, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 266, 0, 0, 0, 0, 308, 0,
	267, 0, 0, 263, 264, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 306, 154, 0, 107, 0, 172, 117, 0, 127,
	0, 0, 0, 0, 0, 0, 109, 0, 161, 148,
	184, 0, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 297, 307, 303, 304,
	301, 302, 300, 299, 298, 309, 289, 290, 291, 292,
	294, 0, 121, 293, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 305, 103, 147, 0, 91, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 512, 522,
	523, 515, 516, 517, 518, 519, 520, 521, 514, 0,
	0, 524, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 525, 103, 147, 0, 91, 0, 501, 0,
	0, 0, 0, 113, 0, 0, 0, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 0, 503, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 498, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 147, 103, 91, 0, 618, 0, 0, 0, 0,
	113, 0, 0, 0, 126, 0, 129, 0, 0, 168,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	620, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 169, 186, 204, 205, 0, 0,
	0, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 0, 162, 106, 185,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 23, 121, 0, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 147, 103,
	91, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 126, 0, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 154, 0, 107, 0, 172, 117,
	0, 127, 0, 0, 0, 0, 0, 0, 109, 0,
	161, 148, 184, 0, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 0, 162, 106, 185, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 23, 121, 0, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 147, 103, 91, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 147, 103, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	0, 0, 737, 0, 0, 738, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 147,
	103, 91, 0, 0, 0, 0, 0, 0, 113, 638,
	0, 0, 126, 0, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 637, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 147, 103, 91, 0,
	618, 0, 0, 0, 0, 113, 0, 0, 0, 126,
	0, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 620, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 154, 0, 107, 0, 172, 117, 0, 127,
	0, 0, 0, 0, 0, 0, 109, 0, 161, 148,
	184, 0, 616, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 147, 103, 91, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 126, 0, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	147, 103, 91, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 126, 0, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 620,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 147, 103, 91,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	126, 0, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 503, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 147, 103, 91, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 697,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 147, 103, 91, 0, 0, 0, 0, 0, 596,
	113, 0, 0, 0, 126, 0, 129, 0, 0, 168,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 169, 186, 204, 205, 0, 0,
	0, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 0, 162, 106, 185,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 90,
	98, 128, 200, 201, 319, 156, 115, 187, 0, 103,
	0, 147, 0, 91, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 126, 0, 129, 0, 0, 168,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 169, 186, 204, 205, 0, 0,
	0, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 0, 162, 106, 185,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 147, 103,
	91, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 126, 0, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	193, 0, 0, 0, 154, 0, 107, 0, 172, 117,
	0, 127, 0, 0, 0, 0, 0, 0, 109, 0,
	161, 148, 184, 0, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 0, 162, 106, 185, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 147, 103, 91, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 147, 103, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 147,
	103, 91, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 126, 0, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 0, 103,
}
var yyPact = [...]int{

	2121, -1000, -177, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1117, 1148, -1000, -1000, -1000, -1000, -1000, -1000, 952,
	260, 251, 300, 100, 11520, 288, 1781, 12034, -1000, 132,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 888, -1000, -1000,
	-1000, -1000, -1000, 1103, 1113, 937, 1088, 1019, -1000, 6357,
	248, 9975, 11263, 5582, -1000, 733, 295, 283, 11777, 245,
	245, 11777, 245, -1000, -129, 286, 12034, -1000, 12034, 243,
	723, 243, 243, 243, 12034, -1000, 374, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12034, 696, 1062, 287,
	3678, 3678, 3678, 3678, 154, 3678, -27, 980, -1000, -1000,
	-1000, -1000, 3678, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 611, 1066, 7140, 7140, 1117, -1000, 888,
	-1000, -1000, -1000, 1059, -1000, -1000, 507, 1125, -1000, 8176,
	370, -1000, 7140, 51, 841, -1000, -1000, 841, -1000, -1000,
	365, -1000, -1000, 7658, 7658, 7658, 7658, 7658, 7658, 7658,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 841, -1000, 6881, 841, 841, 841,
	841, 841, 841, 841, 841, 7140, 841, 841, 841, 841,
	841, 841, 841, 841, 841, 1673, 841, 841, 841, 841,
	11003, 834, 1071, -1000, -1000, -1000, 1080, 8947, 9718, 12034,
	833, -1000, 872, 5310, -2, -1000, -1000, -1000, 429, 9461,
	-1000, -1000, -1000, 1057, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 800, -1000, 2381, 11777, 12034, 925, 683,
	450, 676, 979, 12034, -1000, 10746, 3678, 255, 12034, 1075,
	964, 12034, 669, 668, -1000, 5038, -1000, 3678, 3678, 3678,
	3678, 3678, 3678, 3678, 3678, -1000, -1000, -1000, -1000, -1000,
	-1000, 3678, 3678, -1000, -12, -1000, 12034, -1000, -1000, -1000,
	-1000, 1143, 405, 759, 363, 875, -1000, 636, 1103, 611,
	1019, 9204, 959, -1000, -1000, 12034, -1000, 7140, 7140, 714,
	-1000, 10489, -1000, -1000, 3950, 403, 7658, 517, 456, 7658,
	7658, 7658, 7658, 7658, 7658, 7658, 7658, 7658, 7658, 7658,
	7658, 7658, 7658, 7658, 565, 1673, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 656, -1000, 888, 1018, 1018, 3,
	3, 3, 3, 3, 3, 7917, 5839, 611, 798, 465,
	6881, 6357, 6357, 7140, 7140, 12291, 12291, 6357, 1085, 437,
	465, 12291, -1000, 611, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 56, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6357, 6357, 6357, 6357, 178, 12034, -1000, 12291, 9975,
	9975, 9975, 9975, 9975, -1000, 1009, 1003, -1000, 1005, 997,
	1012, 12034, -1000, 785, 8947, 402, 841, -1000, 10232, -1000,
	-1000, 178, 811, 9975, 12034, -1000, -1000, 4766, 872, -2,
	865, -1000, -47, -52, 6616, 379, -1000, -1000, -1000, -1000,
	3134, 670, 1023, -118, -1, -1000, -1000, -1000, -1000, 903,
	-1000, 903, 228, 903, 903, 903, 48, 48, 48, 48,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 950, 938, -1000,
	903, 903, 903, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 907, 261, 907, 904, 904, 948, 1078, -153,
	652, 3678, 1074, 3678, 12034, -1000, 1372, 12034, -1000, 12034,
	-1000, -1000, 12034, 3678, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 475,
	-1000, -1000, -1000, -1000, 1020, 7140, 7140, 4494, 7140, -1000,
	-1000, -1000, 1066, -1000, 1085, 1108, -1000, 1049, 1039, 6357,
	-1000, -1000, 403, 461, -1000, -1000, 550, -1000, -1000, -1000,
	-1000, 362, 841, -1000, 1351, -1000, -1000, -1000, -1000, 517,
	7658, 7658, 7658, 330, 1351, 1608, 85, 887, 3, 258,
	258, 1, 1, 1, 1, 1, 158, 158, -1000, -1000,
	-1000, -1000, 611, -1000, -1000, -1000, 611, 6357, 869, -1000,
	-1000, 7140, -1000, 611, 770, 770, 570, 488, 866, -1000,
	349, 863, 770, 6357, 477, -1000, 7140, 611, -1000, -1000,
	770, 611, 770, 770, 754, 841, -1000, 844, -1000, 422,
	1071, 942, 963, 924, -1000, -1000, -1000, -1000, 995, -1000,
	993, -1000, -1000, -1000, -1000, -1000, 294, 292, 289, 11777,
	-1000, 1122, 9975, 822, -1000, -1000, 865, -2, -88, -1000,
	-1000, -1000, 465, -1000, -1000, 638, 842, 2862, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 911, 962, 11777, 211,
	212, 361, 357, 632, -1000, -1000, -1000, 495, 651, 1140,
	-1000, -1000, 210, -1000, 199, 841, 589, 12034, -1000, -183,
	-1000, 17, -1000, -1000, 568, 48, 48, 903, 48, -1000,
	-1000, 379, 1053, 379, 379, 379, 588, 588, -156, -156,
	-1000, -1000, 556, 907, -1000, -1000, -1000, 555, -1000, 12034,
	11777, 888, -1000, 4222, -1000, -1000, -1000, -1000, -1000, 1077,
	-1000, 697, 1829, 347, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 171, 316, -1000, 3678, -1000,
	485, 12034, 12034, 1031, 465, 465, 345, -1000, -1000, 12034,
	-1000, -1000, -1000, -1000, 862, -1000, -1000, -1000, 3406, 6357,
	-1000, 330, 1351, 813, -1000, 7658, 7658, -1000, -1000, 770,
	6357, 465, -1000, -1000, -1000, 1176, 565, 1176, 7658, 7658,
	4494, 7658, 7658, -145, 827, 433, -1000, 7140, 480, -1000,
	-1000, -1000, -1000, -1000, 961, 12291, 841, -1000, 8690, 11777,
	1117, 12291, 7140, 7140, -1000, -1000, 7140, 906, -1000, 7140,
	-1000, -1000, -1000, 841, 841, 841, 739, -1000, 1117, 822,
	-1000, -1000, -1000, -87, -71, -1000, -1000, 3134, -1000, 3134,
	11777, 1129, 218, 240, -1000, 627, 623, -1000, 614, -1000,
	-1000, -1000, -172, -1000, -1000, -1000, 903, -1000, -1000, 841,
	-111, -1000, -1000, 7140, -1000, 905, -1000, -1000, -1000, 743,
	379, 379, 48, 379, -1000, 400, -1000, -1000, -1000, 766,
	-1000, 763, -1000, 66, 57, -1000, 838, -1000, 756, 849,
	958, -1000, 836, -1000, 421, 1097, 140, -1000, 198, -1000,
	11777, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11777,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 12034, -1000, -1000, -1000, -1000, -1000, 11777, 227, -1000,
	-1000, 587, 7140, -1000, -1000, -1000, 4222, -1000, 1122, 9975,
	-1000, -1000, 611, -1000, 7658, 1351, 1351, -1000, -1000, 611,
	903, 903, -1000, 903, 904, -1000, -1000, 903, 107, 903,
	86, 611, 611, 134, 290, -1000, 104, 173, 841, -136,
	-1000, 465, 7140, -1000, 1065, 761, 825, -1000, -1000, 6098,
	611, 748, 337, 739, 1103, -1000, 465, 465, 465, 11777,
	465, 11777, 11777, 11777, 8433, 11777, 1103, -1000, -1000, -1000,
	-1000, 2862, -1000, 737, -1000, 903, 285, 285, 194, 193,
	-1000, -1000, -1000, -1000, 108, -1000, 611, 903, 434, 11777,
	-1000, -1000, -1000, 379, -1000, -1000, -1000, 48, 578, 48,
	-14, -15, 553, -1000, 541, 11777, 11777, 12034, 4222, 3134,
	253, 1115, -1000, -1000, 11777, -1000, -1000, -1000, 898, -1000,
	-1000, -1000, -1000, 1069, 11777, -1000, -1000, 465, 1120, 828,
	-1000, 1351, -1000, -1000, 224, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 7658, 7658, -1000, 7658, 7658, 7658,
	611, 572, 465, 191, -1000, 841, -1000, -1000, 840, 11777,
	11777, -1000, -1000, 719, -1000, 716, 716, 716, 402, -1000,
	-1000, 185, 11777, -1000, 955, -1000, -1000, 494, 143, 944,
	11777, 896, 52, -156, -1000, -1000, 146, 705, -1000, 379,
	-1000, 379, -1000, -1000, 720, 637, 703, 895, 894, -1000,
	-1000, 11777, -1000, -1000, -1000, -1000, -1000, 893, 11777, 841,
	239, 1116, 1110, -1000, -1000, 192, 192, 192, 192, 72,
	-1000, -1000, 1139, -1000, 841, -1000, 888, 335, -1000, 11777,
	-1000, -1000, -1000, -1000, -1000, 185, -1000, 612, 419, 551,
	-159, -1000, 1137, -1000, -1000, 1134, 890, -1000, 11777, -1000,
	-1000, -1000, -139, -1000, -1000, -1000, -1000, -1000, 1122, 11777,
	11777, 804, -1000, 11777, 695, 168, 189, -1000, 7140, 7140,
	-1000, -1000, -1000, -1000, 611, 76, -161, 12291, 825, 611,
	11777, -1000, -1000, -1000, 520, -1000, -1000, 11777, 285, 285,
	11777, 689, -1000, -1000, 667, 661, -152, 11777, 7140, 648,
	925, 631, -1000, 11777, 889, 465, 817, -1000, 1027, -149,
	-165, 814, -1000, -1000, -1000, -1000, -1000, -1000, 610, -1000,
	1122, -1000, -1000, -175, -1000, 465, -1000, -153, -1000, 168,
	1038, 11777, -1000, 1016, -1000, 223, -1000, 7140, -1000, -1000,
	164, 605, -154, 12034, 465, 161, -1000, -162, 884, 841,
	-167, 11777, 7399, -1000, 600, 192, 611, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1358, 81, 657, 1357, 1356, 1352, 1351, 1347, 1342,
	1340, 1338, 1337, 1336, 1335, 1334, 1333, 1331, 1330, 1326,
	1325, 1324, 1323, 1322, 513, 1321, 1320, 1318, 75, 1316,
	84, 1310, 1308, 44, 78, 49, 39, 8, 1307, 28,
	80, 73, 1304, 52, 1302, 1301, 95, 1300, 65, 1298,
	1297, 41, 1293, 1289, 18, 6, 1288, 51, 1287, 1286,
	68, 70, 1285, 1284, 1283, 1282, 1278, 1277, 53, 10,
	14, 19, 20, 1276, 47, 11, 1275, 56, 1274, 1273,
	1271, 1270, 37, 1269, 55, 1268, 34, 54, 1265, 15,
	59, 29, 24, 9, 71, 67, 1264, 32, 58, 50,
	1263, 1259, 576, 1256, 1254, 1253, 1250, 1249, 1247, 753,
	525, 1246, 1244, 1243, 43, 0, 303, 27, 93, 1241,
	45, 1233, 1489, 66, 60, 22, 1230, 42, 1296, 40,
	1222, 1221, 36, 83, 1218, 94, 92, 1216, 1214, 1212,
	1211, 1210, 74, 30, 33, 1206, 1205, 1204, 13, 48,
	25, 46, 57, 1203, 1201, 1199, 26, 1198, 5, 17,
	1, 61, 1197, 1191, 1189, 1186, 31, 21, 1185, 16,
	7, 12, 1184, 1183, 3, 1182, 23, 1179, 2, 1178,
	4, 1177, 1176, 1175, 1174, 1173, 1171, 1170, 1169, 1167,
	1166, 1367, 1329, 1160, 1159, 1158, 1154, 97,
}
var yyR1 = [...]int{

	0, 189, 190, 190, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 193,
	193, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 182,
	182, 182, 183, 183, 183, 183, 183, 183, 185, 185,
	186, 186, 120, 120, 180, 180, 179, 178, 178, 177,
	177, 176, 187, 187, 16, 163, 164, 164, 164, 164,
	164, 152, 134, 134, 134, 134, 134, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 188,
	188, 184, 184, 184, 138, 138, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 137, 137, 137, 137,
	137, 137, 139, 139, 139, 139, 139, 135, 135, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 141, 141,
	141, 141, 141, 141, 141, 141, 151, 151, 142, 142,
	149, 149, 150, 150, 150, 148, 148, 148, 145, 145,
	146, 146, 147, 147, 147, 143, 143, 143, 144, 144,
	144, 154, 154, 172, 172, 171, 171, 171, 171, 162,
	162, 168, 168, 168, 168, 168, 168, 168, 161, 161,
	170, 170, 169, 156, 156, 156, 156, 156, 157, 158,
	158, 158, 158, 155, 159, 159, 160, 160, 165, 165,
	165, 166, 166, 166, 167, 167, 167, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	194, 194, 195, 195, 195, 195, 195, 195, 195, 175,
	173, 173, 174, 174, 13, 14, 14, 14, 14, 14,
	15, 15, 17, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 107, 107, 104, 104,
	105, 105, 106, 106, 106, 108, 108, 108, 131, 131,
	131, 19, 19, 21, 21, 22, 23, 20, 20, 20,
	20, 20, 196, 24, 25, 25, 26, 26, 26, 30,
	30, 30, 28, 28, 29, 29, 35, 35, 34, 34,
	36, 36, 36, 36, 119, 119, 119, 118, 118, 38,
	38, 39, 39, 40, 40, 41, 41, 41, 53, 53,
	89, 89, 91, 91, 42, 42, 42, 42, 43, 43,
	44, 44, 45, 45, 126, 126, 125, 125, 125, 124,
	124, 47, 47, 47, 49, 48, 48, 48, 48, 50,
	50, 52, 52, 51, 51, 54, 54, 54, 54, 55,
	55, 37, 37, 37, 37, 37, 37, 37, 103, 103,
	57, 57, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 67, 67, 67, 67, 67, 67, 58, 58,
	58, 58, 58, 58, 58, 33, 33, 68, 68, 68,
	74, 69, 69, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 65, 65, 65, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 197, 197, 66, 66, 66, 66, 31, 31,
	31, 31, 31, 129, 129, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 133,
	133, 133, 133, 133, 133, 133, 78, 78, 32, 32,
	76, 76, 77, 79, 79, 75, 75, 75, 60, 60,
	60, 60, 60, 60, 60, 60, 62, 62, 62, 80,
	80, 81, 81, 82, 82, 83, 83, 84, 85, 85,
	85, 86, 86, 86, 86, 87, 87, 87, 59, 59,
	59, 59, 59, 59, 88, 88, 88, 88, 92, 92,
	70, 70, 72, 72, 71, 73, 93, 93, 97, 94,
	94, 98, 98, 98, 96, 96, 96, 121, 121, 121,
	101, 101, 109, 109, 110, 110, 102, 102, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 112, 112,
	112, 113, 113, 116, 116, 117, 117, 122, 122, 123,
	123, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 191, 192, 127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 6, 5, 5, 5, 11, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 1, 3, 3, 3,
	3, 2, 3, 1, 1, 1, 1, 2, 2, 3,
	4, 3, 3, 3, 4, 3, 5, 2, 2, 3,
	2, 3, 2, 6, 3, 3, 5, 3, 6, 0,
	2, 0, 3, 3, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 2,
	2, 2, 1, 3, 3, 2, 1, 1, 1, 4,
	4, 4, 5, 2, 2, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 3, 3, 0, 1,
	0, 1, 0, 2, 1, 0, 3, 3, 0, 1,
	2, 5, 4, 1, 2, 2, 3, 2, 3, 0,
	1, 2, 3, 3, 2, 3, 2, 2, 1, 1,
	1, 3, 2, 1, 4, 4, 7, 7, 13, 1,
	1, 2, 2, 7, 0, 1, 1, 3, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 11, 13,
	7, 7, 7, 12, 7, 7, 7, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 5, 4, 6, 5, 4, 4,
	3, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 3, 3, 3, 3, 4, 3, 6, 4, 2,
	4, 2, 2, 2, 2, 3, 1, 1, 0, 1,
	0, 1, 0, 2, 2, 0, 2, 2, 0, 1,
	1, 2, 1, 1, 2, 1, 1, 2, 2, 2,
	2, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 3,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 6, 8, 8, 6, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 1, 2, 1, 2, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -189, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 142, 115, 135, 48, 163, 164,
	166, 167, 25, 136, 137, 140, 141, -191, 8, 257,
	52, -190, 277, -82, 15, -26, 5, -24, -196, -24,
	-24, -24, -24, -24, -163, 52, -120, -187, 150, 249,
	117, 132, 118, 133, 69, -102, 120, 122, 118, 118,
	119, 120, 249, 117, 118, -51, -122, 55, -115, 157,
	266, 20, 163, 176, 177, 168, 201, 192, 267, 155,
	189, 193, 236, 276, 64, 166, 245, 126, 161, 138,
	187, 183, 180, 27, 207, 273, 182, 129, 208, 212,
	237, 264, 173, 174, 239, 205, 31, 131, 268, 33,
	146, 240, 210, 204, 200, 203, 172, 199, 37, 214,
	213, 215, 235, 195, 156, 217, 184, 18, 141, 144,
	209, 211, 181, 158, 124, 148, 272, 241, 179, 145,
	159, 140, 244, 154, 167, 238, 175, 247, 36, 221,
	170, 171, 128, 164, 152, 197, 147, 185, 186, 202,
	169, 198, 165, 149, 142, 246, 222, 274, 196, 194,
	190, 191, 153, 120, 150, 151, 228, 229, 230, 231,
	269, 270, 242, 188, 223, 224, 118, 105, 193, 111,
	226, 119, 31, 148, -131, 118, -104, 151, 228, 229,
	230, 231, 55, 238, 237, 232, -122, 165, -127, -127,
	-127, -127, -127, -2, -86, 17, 16, -5, -3, -191,
	6, 20, 21, -30, 38, 39, -25, -36, 96, -37,
	-122, -56, 71, -61, 28, 55, -115, 23, -60, -57,
	-75, -73, -74, 105, 106, 94, 95, 102, 72, 107,
	-65, -63, -64, -66, 57, 56, 65, 58, 59, 60,
	61, 66, 67, 68, -116, -71, -191, 42, 43, 258,
	259, 260, 261, 265, 262, 74, 32, 248, 256, 255,
	254, 252, 253, 250, 251, 275, 123, 249, 100, 257,
	-102, -39, -40, -41, -42, -53, -74, -191, -51, 11,
	-46, -51, -94, -130, 165, -98, 238, 237, -117, -96,
	-116, -114, 236, 193, 235, 55, -115, 116, 70, 22,
	24, 219, 225, 73, 105, 16, 74, 104, 258, 111,
	46, 250, 251, 248, 260, 261, 249, 226, 28, 10,
	25, 136, 21, 98, 113, 77, 78, 139, 23, 137,
	68, 19, 49, 130, 11, 13, 14, 123, 122, 89,
	119, 44, 8, 107, 26, 86, 40, 134, 42, 87,
	17, 252, 253, 30, 265, 143, 100, 47, 34, 71,
	66, 50, 243, 69, 15, 45, 132, 88, 114, 257,
	43, 117, 6, 263, 29, 135, 41, 118, 227, 76,
	121, 67, 5, 133, 9, 48, 51, 254, 255, 256,
	32, 75, 12, -164, -152, 55, 119, 120, -116, -110,
	123, -110, -116, -110, 257, 118, -51, -51, -109, 123,
	55, -109, -109, -109, -51, 108, -51, 55, 29, 249,
	55, 148, 118, 149, 120, -128, -191, -117, -128, -128,
	-128, 152, 153, -128, -105, 233, 50, -128, -192, 54,
	-87, 19, 30, -37, -122, -83, -84, -37, -82, -2,
	-24, 34, -28, 21, 63, 11, -119, 70, 69, 86,
	-118, 22, -116, 57, 108, -37, -58, 89, 71, 87,
	88, 73, 91, 90, 101, 94, 95, 96, 97, 98,
	99, 100, 92, 93, 104, 275, 79, 80, 81, 82,
	83, 84, 85, -103, -191, -74, -191, 109, 110, -61,
	-61, -61, -61, -61, -61, -61, -191, -2, -69, -37,
	-191, -191, -191, -191, -191, -191, -191, -191, -191, -78,
	-37, -191, -197, -191, -197, -197, -197, -197, -197, -197,
	-197, -133, 105, 193, 138, 187, -136, -135, 197, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 192,
	267, -191, -191, -191, -191, -52, 26, -51, 29, 53,
	-47, -49, -48, -50, 40, 44, 46, 41, 42, 43,
	47, -126, 22, -39, -191, -125, 144, -124, 22, -122,
	57, -51, -46, -193, 53, 11, 51, 53, -94, 165,
	-95, -99, 239, 241, 79, -121, -116, 57, 28, 29,
	54, 53, -153, -134, -138, -135, -140, -139, -141, -136,
	-137, 189, 193, 190, 105, 194, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 196, 207, 29, 138,
	185, 186, 187, 188, 208, 209, 210, 211, 212, 213,
	214, 215, 179, 180, 182, 183, 184, -116, -51, -180,
	51, 55, 71, 55, 50, -51, -51, 243, -128, 121,
	-51, 23, 50, -51, 55, 55, -123, -122, -114, -128,
	-128, -128, -128, -128, -128, -128, -128, -128, -128, -107,
	227, 234, -51, 9, 89, 53, 18, 108, 53, -85,
	24, 25, -86, -192, -30, -62, -116, 58, 61, -29,
	41, -51, -37, -37, -67, 66, 71, 67, 68, -118,
	96, -123, -117, -114, -61, -68, -71, -74, 62, 89,
	87, 88, 73, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -129, 55,
	57, -133, 55, -60, -60, -116, -35, 21, -34, -36,
	-192, 53, -192, -2, -34, -34, -37, -37, -75, -116,
	-122, -75, -34, -28, -76, -77, 75, -75, -192, 191,
	-34, -35, -34, -34, -90, 144, -51, -93, -97, -75,
	-40, -41, -41, -40, -41, 40, 40, 40, 45, 40,
	45, 40, -48, -122, -192, -54, 48, 122, 49, -191,
	-124, -90, 51, -39, -51, -98, -95, 53, 240, 242,
	243, 50, -37, -144, 105, 104, -165, -166, -167, -117,
	57, 58, -152, -154, -156, -155, -168, -157, 126, 124,
	128, 129, 133, -161, 119, 134, 66, 71, 28, 50,
	219, 225, 124, 134, 133, 276, 64, 127, -147, 278,
	216, -145, 222, -142, 52, -142, -142, 191, -142, -142,
	-142, -143, 193, -143, -143, -143, 52, 52, -142, -142,
	-142, -149, 52, 181, -149, -149, -150, 52, -150, 50,
	51, 22, -178, 269, -179, 55, -128, 23, -128, -51,
	-111, 116, 113, 114, -175, 112, 219, 193, 64, 28,
	15, 258, 144, 274, 55, 145, -51, -51, -51, -128,
	-106, 11, 89, 36, -37, -37, -123, -84, -87, -101,
	19, 11, 32, 32, -34, 66, 67, 68, 108, -191,
	-68, -61, -61, -61, -33, 139, 70, -192, -192, -34,
	53, -37, -192, -192, -192, 53, 51, 22, 53, 11,
	108, 53, 11, -192, -34, -79, -77, 77, -37, -192,
	-192, -192, -192, -192, -59, 29, 32, -2, -191, -191,
	-55, 53, 12, 79, -44, -43, 50, 51, -45, 50,
	-43, 40, 40, 119, 119, 119, -91, -116, -55, -39,
	-55, -99, -100, 244, 241, 247, 55, 53, -167, 79,
	52, 50, -159, -116, 134, -161, -161, 55, -161, 55,
	55, 66, 57, 58, 59, 66, 248, 65, -57, 217,
	9, 134, 134, -191, 57, -122, 279, -146, 223, 58,
	-143, -143, -142, -143, -144, 29, -144, -144, -144, -151,
	57, -151, -148, 269, 270, -148, 58, -149, 58, -51,
	-116, -2, -177, -176, -117, -182, 22, -127, -120, -195,
	150, 125, 130, 129, 55, 124, 128, 144, -181, 150,
	125, 126, 130, 129, 55, 119, 134, 124, 128, 144,
	133, -112, -113, 121, 22, 119, 134, 144, 116, -128,
	-108, 87, 12, -122, -122, 37, 108, -51, -38, 11,
	96, -117, -35, -33, 70, -61, -61, -192, -36, -132,
	105, 189, 138, 187, 183, 205, 206, 195, 221, 185,
	222, -129, -132, -61, -61, -117, -61, -61, 266, -82,
	78, -37, 76, -92, 50, -93, -70, -72, -71, -191,
	-2, -88, -116, -91, -82, -97, -37, -37, -37, 52,
	-37, -191, -191, -191, -192, 53, -82, -55, 241, 245,
	246, -166, -167, -170, -169, -116, 10, 9, 130, 124,
	55, 55, 55, -184, 275, -142, -191, 248, -37, 52,
	54, -144, -144, -143, -144, 55, 105, 54, 53, 54,
	185, 185, 53, 54, 53, 52, 51, 50, 53, 79,
	-183, 19, 158, 159, -194, 119, 134, -127, -116, -127,
	-116, -51, -127, -116, 126, -156, 57, -37, -55, -39,
	-192, -61, -192, -142, -142, -142, -150, -142, 174, -142,
	174, -192, -192, -192, 53, 19, -192, 53, 19, -191,
	-32, 263, -37, 27, -92, 53, -192, -192, -192, 53,
	108, -192, -86, -89, -116, -89, -89, -89, -125, -116,
	-86, 54, 53, -142, -158, 154, 155, 29, 156, -158,
	134, 134, 193, 186, -192, -142, -192, -89, -144, -143,
	57, -143, 224, 224, 58, 58, -89, -116, -51, -176,
	-167, 121, 20, 6, 8, 9, 10, -116, 52, 26,
	-116, -80, 13, -143, 55, -61, -61, -61, -61, -61,
	-192, 57, 134, -72, 32, -2, -191, -116, -116, 53,
	54, -192, -192, -192, -54, -172, -171, 51, 131, 64,
	269, -169, 50, 66, 157, 50, -159, -116, 52, 191,
	-148, -188, 156, 54, -144, -144, 54, 54, 54, 52,
	52, -160, -116, 52, -89, -191, 124, -81, 14, 16,
	-192, -192, -192, -192, -31, 89, 269, 9, -70, -2,
	108, -116, -171, 55, -162, 79, 57, 271, 9, 10,
	52, -170, 264, -55, -89, -89, -185, 53, 51, -89,
	54, -173, -174, 144, 134, -37, -69, -192, 267, 47,
	272, -93, -192, -116, 58, -116, -158, -158, -160, 54,
	54, 54, -186, 269, -116, -37, 54, -180, -192, 53,
	-116, 52, 37, 268, 273, 54, -55, 276, -178, -174,
	32, -89, 37, 127, -37, 146, 54, 269, -51, 147,
	272, 52, -191, 273, -160, -61, 143, 54, -192, -192,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 593, 0, 352, 352, 352, 352, 352, 352, 0,
	-2, 646, 0, 0, 0, 0, -2, 342, 343, 0,
	345, 346, 886, 886, 886, 886, 886, 0, 33, 34,
	884, 1, 3, 601, 0, 0, 356, 359, 354, 0,
	646, 0, 0, 0, 60, 0, 0, 0, 0, 644,
	644, 0, 644, 83, 0, 0, 0, 647, 0, 642,
	0, 642, 642, 642, 0, 301, 423, 667, 668, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 0, 0, 0, 0,
	887, 887, 887, 887, 0, 887, 330, 319, 321, 322,
	323, 324, 887, 339, 340, 329, 341, 344, 347, 348,
	349, 350, 351, 27, 605, 0, 0, 593, 29, 0,
	352, 357, 358, 362, 360, 361, 353, 0, 370, 374,
	0, 431, 0, 436, 438, -2, -2, 0, 473, 474,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	501, 502, 503, 504, 578, 579, 580, 581, 582, 583,
	584, 585, 440, 441, 575, 625, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 566, 0, 532, 532, 532,
	532, 532, 532, 532, 532, 0, 0, 0, 0, 0,
	0, 0, 381, 383, 384, 385, 404, 0, 406, 0,
	0, 41, 45, 0, 860, 629, -2, -2, 0, 0,
	665, 666, -2, 779, -2, 663, 664, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 0, 96, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 93, 0, 887, 0, 0, 0,
	0, 0, 0, 0, 300, 0, 302, 887, 887, 887,
	887, 887, 887, 887, 887, 311, 888, 889, 312, 313,
	314, 887, 887, 316, 0, 331, 0, 325, 28, 885,
	22, 0, 0, 602, 0, 594, 595, 598, 601, 27,
	359, 0, 364, 363, 355, 0, 371, 0, 0, 0,
	375, 0, 377, 378, 0, 434, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 458, 459, 460, 461,
	462, 463, 464, 437, 0, 451, 0, 0, 0, 493,
	494, 495, 496, 497, 498, 0, 366, 27, 0, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 362, 0,
	567, 0, 523, 0, 524, 525, 526, 527, 528, 529,
	530, 531, 559, 0, 561, 562, 563, 564, 565, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 145, 157,
	158, 0, 366, 0, 0, 43, 0, 422, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 414, 0, 0,
	0, 0, 405, 0, 0, 425, 827, 407, 0, 409,
	410, -2, 0, 0, 0, 39, 40, 0, 46, 860,
	48, 49, 0, 0, 0, 208, 637, 638, 639, 635,
	248, 0, 101, 202, 198, 103, 104, 105, 106, 188,
	135, 188, 188, 188, 188, 188, 205, 205, 205, 205,
	169, 170, 171, 172, 173, 174, 175, 0, 0, 152,
	188, 188, 188, 156, 178, 179, 180, 181, 182, 183,
	184, 185, 190, 190, 190, 192, 192, 0, 0, 87,
	0, 887, 0, 887, 0, 94, 0, 0, 267, 0,
	295, 643, 0, 887, 298, 299, 424, 669, 670, 303,
	304, 305, 306, 307, 308, 309, 310, 315, 318, 332,
	326, 327, 320, 606, 0, 0, 0, 0, 0, 597,
	599, 600, 605, 30, 362, 0, 586, 0, 0, 0,
	365, 25, 432, 433, 435, 452, 0, 454, 456, 376,
	372, 0, 576, -2, 442, 443, 467, 468, 469, 0,
	0, 0, 0, 465, 447, 0, 478, 479, 480, 481,
	482, 483, 484, 485, 486, 487, 488, 489, 492, 543,
	544, 500, 0, 490, 491, 499, 0, 0, 367, 368,
	470, 0, 624, 27, 0, 0, 0, 0, 0, 575,
	0, 0, 0, 0, 573, 570, 0, 0, 533, 560,
	0, 0, 0, 0, 0, 0, 421, 429, 626, 0,
	382, 400, 402, 0, 397, 412, 413, 415, 0, 417,
	0, 419, 420, 386, 387, 388, 0, 0, 0, 0,
	408, 429, 0, 429, 42, 630, 47, 0, 0, 52,
	53, 631, 632, 633, 209, 0, 95, 249, 251, 254,
	255, 256, 97, 98, 99, 100, 0, 233, 244, 0,
	0, 0, 0, 0, 228, 229, 108, 0, 0, 0,
	117, 118, 0, 120, 122, 0, 0, 0, 107, 0,
	204, 200, 199, 134, 0, 205, 205, 188, 205, 163,
	164, 208, 0, 208, 208, 208, 0, 0, 195, 195,
	155, 146, 0, 190, 148, 149, 150, 0, 151, 0,
	0, 0, 65, 0, 85, 86, 66, 645, 67, 69,
	886, 82, 0, 658, 268, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 0, 0, 294, 887, 297,
	335, 0, 0, 0, 603, 604, 0, 596, 23, 0,
	640, 641, 587, 588, 379, 453, 455, 457, 0, 366,
	444, 465, 448, 0, 445, 0, 0, 439, 505, 0,
	0, 472, -2, 508, 509, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 593, 0, 571, 0, 0, 522,
	534, 535, 536, 537, 618, 0, 0, -2, 0, 0,
	593, 0, 0, 0, 394, 401, 0, 0, 395, 0,
	396, 416, 418, 0, 0, 0, 0, 392, 593, 429,
	38, 50, 51, 0, 0, 57, 210, 0, 252, 0,
	0, 0, 0, 245, 221, 0, 0, 224, 0, 226,
	227, 109, 131, 111, 112, 113, 188, 115, 125, 0,
	0, 119, 121, 0, 124, 127, 203, 102, 201, 0,
	208, 208, 205, 208, 165, 0, 166, 167, 168, 0,
	186, 0, 153, 0, 0, 154, 0, 147, 0, 0,
	0, -2, 88, 89, 0, 72, 0, 257, 0, 886,
	0, 282, 283, 284, 285, 286, 287, 288, 886, 0,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 886, 659, 660, 661, 662, 0, 0, 296,
	317, 0, 0, 333, 334, 607, 0, 24, 429, 0,
	373, 577, 0, 446, 0, 466, 449, 506, 369, 0,
	188, 188, 548, 188, 192, 551, 552, 188, 554, 188,
	557, 0, 0, 0, 0, 576, 0, 0, 0, 568,
	521, 574, 0, 31, 0, 618, 608, 620, 622, 0,
	27, 0, 614, 0, 601, 627, 430, 628, 398, 0,
	403, 0, 0, 0, 406, 0, 601, 37, 54, 55,
	56, 250, 253, 0, 230, 188, 0, 0, 0, 0,
	222, 223, 225, 110, 0, 114, 0, 188, 0, 0,
	189, 159, 160, 208, 161, 206, 207, 205, 0, 205,
	0, 0, 0, 193, 0, 0, 0, 0, 0, 0,
	0, 0, 70, 71, 0, 280, 281, 261, 0, 262,
	264, 265, 266, 0, 244, 260, 336, 337, 589, 380,
	507, 450, 510, 545, 205, 549, 550, 553, 555, 556,
	558, 512, 511, 513, 0, 0, 516, 0, 0, 0,
	0, 0, 572, 0, 32, 0, 623, -2, 0, 0,
	0, 44, 35, 0, 390, 0, 0, 0, 425, 393,
	36, 212, 0, 232, 234, 239, 240, 0, 0, 235,
	244, 0, 0, 195, 126, 116, 129, 0, 162, 208,
	187, 208, 196, 197, 0, 0, 0, 0, 0, 90,
	91, 0, 73, 74, 75, 76, 77, 0, 0, 0,
	245, 591, 0, 546, 547, 0, 0, 0, 0, 538,
	520, 569, 0, 621, 0, -2, 0, 616, 615, 0,
	399, 426, 427, 428, 389, 211, 213, 0, 219, 0,
	0, 231, 0, 241, 242, 0, 0, 245, 0, 132,
	133, 123, 0, 128, 176, 177, 191, 194, 429, 0,
	0, 78, 246, 0, 0, 0, 0, 26, 0, 0,
	514, 515, 517, 518, 0, 0, 0, 0, 611, 27,
	0, 391, 214, 215, 0, 220, 217, 0, 0, 0,
	0, 0, 130, 61, 0, 0, 80, 0, 0, 0,
	84, 0, 290, 0, 0, 592, 590, 519, 0, 0,
	0, 619, -2, 617, 216, 218, 236, 237, 0, 243,
	429, 62, 68, 0, 247, 79, 258, 87, 289, 0,
	0, 0, 539, 0, 542, 0, 63, 0, 263, 291,
	0, 0, 540, 0, 81, 0, 259, 0, 0, 0,
	0, 0, 0, 541, 0, 0, 0, 238, 292, 293,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 277,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 278, 3, 279, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:319
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:324
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:325
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:329
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:352
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:360
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:364
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:370
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:377
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:383
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:387
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:393
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:397
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:404
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:416
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:428
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:432
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:438
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:444
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:448
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:452
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:457
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:458
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:462
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:466
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:471
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:475
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:481
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:485
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:489
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:493
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:499
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:503
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:509
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:513
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:517
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:523
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:527
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:531
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:535
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:541
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:545
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:551
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:556
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:572
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:587
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:602
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:610
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:618
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:622
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:626
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:638
		{
			yyVAL.bytes = nil
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:642
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:646
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:651
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:655
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:659
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:663
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:667
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:671
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:676
		{
			yyVAL.expr = nil
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:680
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:685
		{
			yyVAL.expr = nil
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:689
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:694
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:698
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:703
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:707
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:713
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:718
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:723
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:729
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:734
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:740
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:745
		{
			yyVAL.bytes = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:749
		{
			yyVAL.bytes = nil
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:755
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:762
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:769
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:774
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:778
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:782
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:786
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:792
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:797
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:808
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:819
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:824
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:829
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:834
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:839
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:844
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:849
		{
			yyDollar[1].columnType.Default = NewValArgWithOpt(yyDollar[3].bytes, yyDollar[4].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:854
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:859
		{
			yyDollar[1].columnType.OnUpdate = NewValArgWithOpt(yyDollar[4].bytes, yyDollar[5].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:864
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:869
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:874
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:879
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:884
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:889
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:894
		{
			yyDollar[1].columnType.Check = NewWhere(WhereStr, yyDollar[4].expr)
			yyDollar[1].columnType.CheckNoInherit = yyDollar[6].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:900
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:905
		{
			yyDollar[1].columnType.Default = NewBoolSQLVal(bool(yyDollar[3].boolVal))
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:910
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:915
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:920
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:927
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:931
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:936
		{
			yyVAL.bytes = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:944
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:949
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1009
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1027
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1035
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1039
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1043
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1047
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1051
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1057
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1061
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1075
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1087
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1091
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1095
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1099
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1103
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1107
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1111
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1115
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1119
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1123
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1131
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1135
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1140
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1158
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1162
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1166
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1170
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1174
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1180
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1185
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1190
		{
			yyVAL.optVal = nil
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1194
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1199
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 191:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1203
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1211
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1215
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1221
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1229
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1233
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1237
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1242
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1246
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1251
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1255
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1260
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1264
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1268
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1273
		{
			yyVAL.str = ""
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1277
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1281
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1286
		{
			yyVAL.str = ""
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1290
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1294
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1300
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1304
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1310
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1314
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1320
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1324
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1329
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1333
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1339
		{
			yyVAL.str = ""
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1343
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1349
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1353
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1357
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1361
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1365
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1369
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1373
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1379
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1383
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1389
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1393
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1399
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1406
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1412
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 236:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1418
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1424
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 238:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1432
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1444
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1448
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1452
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1456
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 243:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1462
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:    &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true},
				Columns: yyDollar[6].indexColumns,
			}
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1470
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1477
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1481
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1486
		{
			yyVAL.str = ""
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1490
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1494
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1502
		{
			yyVAL.str = yyDollar[1].str
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1506
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1510
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1516
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1520
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1524
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1530
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1534
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 259:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1548
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 260:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1562
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 261:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1571
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1575
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1579
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 264:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1592
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 265:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1602
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1607
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1612
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1616
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1648
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1654
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1658
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 292:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1664
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 293:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1668
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 294:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1674
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1680
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 296:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1688
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1693
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1701
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1705
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1711
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1715
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1720
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1726
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1730
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1734
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1739
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1743
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1747
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1751
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1755
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1759
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1763
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1767
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1771
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1775
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1779
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1783
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1793
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1797
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1801
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1805
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1809
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1813
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1817
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1827
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1833
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1837
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1843
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1847
		{
			yyVAL.str = "extended "
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1853
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1857
		{
			yyVAL.str = "full "
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1863
		{
			yyVAL.str = ""
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1867
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1871
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1877
		{
			yyVAL.showFilter = nil
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1881
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1885
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1891
		{
			yyVAL.str = ""
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1895
		{
			yyVAL.str = SessionStr
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1899
		{
			yyVAL.str = GlobalStr
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1905
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1909
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1915
		{
			yyVAL.statement = &Begin{}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1919
		{
			yyVAL.statement = &Begin{}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1925
		{
			yyVAL.statement = &Commit{}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1931
		{
			yyVAL.statement = &Rollback{}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1937
		{
			yyVAL.statement = &OtherRead{}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1941
		{
			yyVAL.statement = &OtherRead{}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1945
		{
			yyVAL.statement = &OtherRead{}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1949
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1953
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1958
		{
			setAllowComments(yylex, true)
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1962
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1968
		{
			yyVAL.bytes2 = nil
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1972
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1978
		{
			yyVAL.str = UnionStr
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1982
		{
			yyVAL.str = UnionAllStr
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1986
		{
			yyVAL.str = UnionDistinctStr
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1991
		{
			yyVAL.str = ""
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1995
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1999
		{
			yyVAL.str = SQLCacheStr
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2004
		{
			yyVAL.str = ""
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2008
		{
			yyVAL.str = DistinctStr
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2013
		{
			yyVAL.str = ""
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2017
		{
			yyVAL.str = StraightJoinHint
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2022
		{
			yyVAL.selectExprs = nil
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2026
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2032
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2036
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2042
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2046
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2050
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 373:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2054
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2059
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2063
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2067
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2074
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2079
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2083
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2089
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2093
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2103
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2107
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2111
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2117
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 389:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2121
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2127
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2131
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2137
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2141
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2154
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2158
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2162
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2166
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2172
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2174
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2178
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2180
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2184
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2186
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2189
		{
			yyVAL.empty = struct{}{}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2191
		{
			yyVAL.empty = struct{}{}
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2194
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2198
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2202
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2209
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2215
		{
			yyVAL.str = JoinStr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2219
		{
			yyVAL.str = JoinStr
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2223
		{
			yyVAL.str = JoinStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2229
		{
			yyVAL.str = StraightJoinStr
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2235
		{
			yyVAL.str = LeftJoinStr
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2239
		{
			yyVAL.str = LeftJoinStr
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2243
		{
			yyVAL.str = RightJoinStr
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2247
		{
			yyVAL.str = RightJoinStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2253
		{
			yyVAL.str = NaturalJoinStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2257
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2267
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2271
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2277
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2281
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2286
		{
			yyVAL.indexHints = nil
		}
	case 426:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2290
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2294
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 428:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2298
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2303
		{
			yyVAL.expr = nil
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2307
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2313
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2317
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2321
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2325
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2329
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2333
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2337
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2343
		{
			yyVAL.str = ""
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2347
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2353
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2357
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2363
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2367
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2371
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2375
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2379
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2383
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2387
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2391
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2395
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2399
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2405
		{
			yyVAL.str = IsNullStr
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2409
		{
			yyVAL.str = IsNotNullStr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2413
		{
			yyVAL.str = IsTrueStr
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2417
		{
			yyVAL.str = IsNotTrueStr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2421
		{
			yyVAL.str = IsFalseStr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2425
		{
			yyVAL.str = IsNotFalseStr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2431
		{
			yyVAL.str = EqualStr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2435
		{
			yyVAL.str = LessThanStr
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2439
		{
			yyVAL.str = GreaterThanStr
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2443
		{
			yyVAL.str = LessEqualStr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2447
		{
			yyVAL.str = GreaterEqualStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2451
		{
			yyVAL.str = NotEqualStr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2455
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2460
		{
			yyVAL.expr = nil
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2464
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2470
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2474
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2478
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2484
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2490
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2494
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2500
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2504
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2508
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2512
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2516
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2520
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2524
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2528
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2532
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2536
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2540
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2544
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2548
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2552
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2556
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2560
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2564
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2568
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2572
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2576
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2580
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2584
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2588
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2596
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2610
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2614
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2618
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2626
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2640
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2644
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2648
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2658
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2662
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 510:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2666
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 511:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2670
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 512:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2674
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 513:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2678
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 514:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2682
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 515:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2686
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 516:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2690
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 517:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2694
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 518:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2698
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 519:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2702
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 520:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2706
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 521:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2710
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2714
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2724
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2728
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2732
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2736
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2741
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2746
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2751
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2756
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2760
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2774
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2778
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2782
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2786
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2792
		{
			yyVAL.str = ""
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2796
		{
			yyVAL.str = BooleanModeStr
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2800
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 541:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2804
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2808
		{
			yyVAL.str = QueryExpansionStr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2814
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2818
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2824
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2828
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2832
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2836
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2840
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2844
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2850
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2854
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2858
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2862
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2866
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2870
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2874
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2878
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2884
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2888
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2892
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2896
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2900
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2904
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2908
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2913
		{
			yyVAL.expr = nil
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2917
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2922
		{
			yyVAL.str = string("")
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2926
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2932
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2936
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2942
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2947
		{
			yyVAL.expr = nil
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2951
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2957
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2961
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2965
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2971
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2975
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2979
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2983
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2987
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2991
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2995
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2999
		{
			yyVAL.expr = &NullVal{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3005
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3014
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3018
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3023
		{
			yyVAL.exprs = nil
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3027
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3032
		{
			yyVAL.expr = nil
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3036
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3041
		{
			yyVAL.orderBy = nil
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3045
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3051
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3055
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3061
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3066
		{
			yyVAL.str = AscScr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3070
		{
			yyVAL.str = AscScr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3074
		{
			yyVAL.str = DescScr
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3079
		{
			yyVAL.limit = nil
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3083
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3087
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3091
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3096
		{
			yyVAL.str = ""
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3100
		{
			yyVAL.str = ForUpdateStr
		}
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3104
		{
			yyVAL.str = ShareModeStr
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3117
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3121
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3125
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3130
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3134
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 613:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3138
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3145
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3149
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3153
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3157
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3162
		{
			yyVAL.updateExprs = nil
		}
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3166
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3172
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3176
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3182
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3186
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3192
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3198
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3208
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3212
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3218
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3224
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3228
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3234
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3238
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3242
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3249
		{
			yyVAL.bytes = []byte("charset")
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3256
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3260
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3264
		{
			yyVAL.expr = &Default{}
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3273
		{
			yyVAL.byt = 0
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3275
		{
			yyVAL.byt = 1
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3278
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3280
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3283
		{
			yyVAL.str = ""
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3285
		{
			yyVAL.str = IgnoreStr
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3289
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3291
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3293
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3295
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3297
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3299
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3301
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3303
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3305
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3307
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3310
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3312
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3314
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3318
		{
			yyVAL.empty = struct{}{}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3320
		{
			yyVAL.empty = struct{}{}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3324
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3328
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3335
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3341
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3345
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3352
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3591
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3600
		{
			decNesting(yylex)
		}
	case 886:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3605
		{
			forceEOF(yylex)
		}
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3610
		{
			forceEOF(yylex)
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3614
		{
			forceEOF(yylex)
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3618
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
