// Code generated by goyacc -o sqlparser/parser.go sqlparser/parser.y. DO NOT EDIT.

//line sqlparser/parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sqlparser/parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sqlparser/parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OFF = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const PRIMARY = 57450
const COLUMN = 57451
const CONSTRAINT = 57452
const REFERENCES = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const KEY_BLOCK_SIZE = 57457
const POLICY = 57458
const UNIQUE = 57459
const KEY = 57460
const SHOW = 57461
const DESCRIBE = 57462
const EXPLAIN = 57463
const DATE = 57464
const ESCAPE = 57465
const REPAIR = 57466
const OPTIMIZE = 57467
const TRUNCATE = 57468
const MAXVALUE = 57469
const PARTITION = 57470
const REORGANIZE = 57471
const LESS = 57472
const THAN = 57473
const PROCEDURE = 57474
const TRIGGER = 57475
const VINDEX = 57476
const VINDEXES = 57477
const STATUS = 57478
const VARIABLES = 57479
const RESTRICT = 57480
const CASCADE = 57481
const NO = 57482
const ACTION = 57483
const PERMISSIVE = 57484
const RESTRICTIVE = 57485
const PUBLIC = 57486
const CURRENT_USER = 57487
const SESSION_USER = 57488
const PAD_INDEX = 57489
const FILLFACTOR = 57490
const IGNORE_DUP_KEY = 57491
const STATISTICS_NORECOMPUTE = 57492
const STATISTICS_INCREMENTAL = 57493
const ALLOW_ROW_LOCKS = 57494
const ALLOW_PAGE_LOCKS = 57495
const BEGIN = 57496
const START = 57497
const TRANSACTION = 57498
const COMMIT = 57499
const ROLLBACK = 57500
const BIT = 57501
const TINYINT = 57502
const SMALLINT = 57503
const SMALLSERIAL = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const SERIAL = 57508
const BIGINT = 57509
const BIGSERIAL = 57510
const INTNUM = 57511
const REAL = 57512
const DOUBLE = 57513
const PRECISION = 57514
const FLOAT_TYPE = 57515
const DECIMAL = 57516
const NUMERIC = 57517
const TIME = 57518
const TIMESTAMP = 57519
const DATETIME = 57520
const YEAR = 57521
const CHAR = 57522
const VARCHAR = 57523
const VARYING = 57524
const BOOL = 57525
const CHARACTER = 57526
const VARBINARY = 57527
const NCHAR = 57528
const UUID = 57529
const TEXT = 57530
const TINYTEXT = 57531
const MEDIUMTEXT = 57532
const LONGTEXT = 57533
const CITEXT = 57534
const BLOB = 57535
const TINYBLOB = 57536
const MEDIUMBLOB = 57537
const LONGBLOB = 57538
const JSON = 57539
const JSONB = 57540
const ENUM = 57541
const GEOMETRY = 57542
const POINT = 57543
const LINESTRING = 57544
const POLYGON = 57545
const GEOMETRYCOLLECTION = 57546
const MULTIPOINT = 57547
const MULTILINESTRING = 57548
const MULTIPOLYGON = 57549
const ARRAY = 57550
const NOW = 57551
const BPCHAR = 57552
const NULLX = 57553
const AUTO_INCREMENT = 57554
const APPROXNUM = 57555
const SIGNED = 57556
const UNSIGNED = 57557
const ZEROFILL = 57558
const ZONE = 57559
const AUTOINCREMENT = 57560
const DATABASES = 57561
const TABLES = 57562
const VITESS_KEYSPACES = 57563
const VITESS_SHARDS = 57564
const VITESS_TABLETS = 57565
const VSCHEMA_TABLES = 57566
const EXTENDED = 57567
const FULL = 57568
const PROCESSLIST = 57569
const NAMES = 57570
const CHARSET = 57571
const GLOBAL = 57572
const SESSION = 57573
const ISOLATION = 57574
const LEVEL = 57575
const READ = 57576
const WRITE = 57577
const ONLY = 57578
const REPEATABLE = 57579
const COMMITTED = 57580
const UNCOMMITTED = 57581
const SERIALIZABLE = 57582
const CURRENT_TIMESTAMP = 57583
const DATABASE = 57584
const CURRENT_DATE = 57585
const CURRENT_TIME = 57586
const LOCALTIME = 57587
const LOCALTIMESTAMP = 57588
const UTC_DATE = 57589
const UTC_TIME = 57590
const UTC_TIMESTAMP = 57591
const REPLACE = 57592
const CONVERT = 57593
const CAST = 57594
const SUBSTR = 57595
const SUBSTRING = 57596
const GROUP_CONCAT = 57597
const SEPARATOR = 57598
const INHERIT = 57599
const MATCH = 57600
const AGAINST = 57601
const BOOLEAN = 57602
const LANGUAGE = 57603
const WITH = 57604
const WITHOUT = 57605
const PARSER = 57606
const QUERY = 57607
const EXPANSION = 57608
const UNUSED = 57609
const GENERATED = 57610
const ALWAYS = 57611
const IDENTITY = 57612
const SEQUENCE = 57613
const INCREMENT = 57614
const MINVALUE = 57615
const CACHE = 57616
const CYCLE = 57617
const OWNED = 57618
const NONE = 57619
const CLUSTERED = 57620
const NONCLUSTERED = 57621
const TYPECAST = 57622
const CHECK = 57623

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	121, 92,
	-2, 82,
	-1, 36,
	153, 386,
	154, 386,
	-2, 376,
	-1, 262,
	109, 717,
	-2, 713,
	-1, 263,
	109, 718,
	-2, 714,
	-1, 333,
	80, 899,
	-2, 58,
	-1, 334,
	80, 854,
	-2, 59,
	-1, 339,
	80, 836,
	-2, 684,
	-1, 341,
	80, 876,
	-2, 686,
	-1, 634,
	51, 41,
	53, 41,
	-2, 43,
	-1, 767,
	109, 720,
	-2, 716,
	-1, 1002,
	5, 28,
	-2, 519,
	-1, 1027,
	5, 27,
	-2, 658,
	-1, 1120,
	5, 27,
	-2, 64,
	-1, 1329,
	5, 28,
	-2, 659,
	-1, 1406,
	5, 27,
	-2, 661,
	-1, 1515,
	5, 28,
	-2, 662,
}

const yyPrivate = 57344

const yyLast = 13807

var yyAct = [...]int{
	263, 1505, 1452, 1517, 480, 1518, 703, 942, 561, 1030,
	1205, 1521, 1232, 1348, 267, 831, 1335, 1111, 1243, 1206,
	1062, 292, 560, 3, 1233, 849, 873, 241, 1122, 868,
	325, 628, 936, 879, 1087, 88, 893, 1202, 88, 872,
	260, 626, 53, 832, 235, 800, 1046, 1178, 66, 792,
	931, 994, 1035, 803, 1108, 266, 644, 269, 802, 819,
	769, 338, 88, 88, 343, 85, 493, 447, 335, 343,
	240, 499, 343, 643, 332, 828, 615, 88, 320, 88,
	888, 630, 265, 319, 505, 88, 976, 589, 236, 237,
	238, 239, 584, 328, 513, 250, 590, 329, 327, 575,
	1094, 920, 906, 318, 52, 1574, 1256, 459, 527, 460,
	909, 537, 1360, 254, 537, 467, 1245, 1246, 1600, 323,
	478, 521, 1557, 524, 1595, 1513, 1476, 1081, 1563, 539,
	540, 541, 542, 543, 544, 545, 492, 522, 523, 520,
	526, 525, 535, 536, 528, 529, 530, 531, 532, 533,
	534, 527, 1319, 492, 537, 1466, 526, 525, 535, 536,
	528, 529, 530, 531, 532, 533, 534, 527, 1244, 1590,
	537, 1475, 1582, 526, 525, 535, 536, 528, 529, 530,
	531, 532, 533, 534, 527, 908, 1570, 537, 1112, 1113,
	526, 525, 535, 536, 528, 529, 530, 531, 532, 533,
	534, 527, 943, 1546, 537, 1556, 1197, 1493, 1323, 457,
	1091, 1227, 1093, 1092, 88, 1512, 1228, 1229, 343, 343,
	343, 343, 862, 343, 530, 531, 532, 533, 534, 527,
	343, 488, 537, 863, 864, 1374, 1316, 492, 1373, 83,
	79, 80, 81, 645, 469, 646, 528, 529, 530, 531,
	532, 533, 534, 527, 1096, 911, 537, 343, 525, 535,
	536, 528, 529, 530, 531, 532, 533, 534, 527, 502,
	1173, 537, 921, 1273, 526, 525, 535, 536, 528, 529,
	530, 531, 532, 533, 534, 527, 1395, 501, 537, 1443,
	526, 525, 535, 536, 528, 529, 530, 531, 532, 533,
	534, 527, 913, 538, 537, 291, 538, 473, 823, 1272,
	1312, 552, 553, 554, 555, 556, 557, 558, 88, 1310,
	234, 734, 548, 1284, 1285, 88, 88, 88, 735, 1245,
	1246, 343, 1569, 1432, 1571, 335, 1439, 343, 1594, 481,
	482, 483, 932, 486, 1467, 1588, 538, 1506, 610, 1562,
	490, 1156, 1054, 484, 485, 1053, 1351, 634, 1055, 256,
	829, 1320, 538, 1287, 996, 1507, 1069, 1403, 889, 337,
	1355, 475, 1248, 477, 451, 1354, 1075, 455, 1288, 538,
	82, 1074, 323, 890, 526, 525, 535, 536, 528, 529,
	530, 531, 532, 533, 534, 527, 538, 1080, 537, 1064,
	1476, 474, 476, 1153, 1238, 577, 578, 579, 580, 581,
	582, 583, 526, 525, 535, 536, 528, 529, 530, 531,
	532, 533, 534, 527, 538, 635, 537, 57, 641, 1581,
	1296, 889, 921, 526, 525, 535, 536, 528, 529, 530,
	531, 532, 533, 534, 527, 1511, 890, 537, 538, 916,
	343, 88, 59, 60, 61, 62, 63, 88, 1457, 88,
	343, 995, 88, 538, 1239, 88, 1067, 462, 453, 88,
	74, 343, 343, 343, 343, 343, 343, 343, 343, 933,
	538, 702, 1349, 1350, 1352, 343, 343, 709, 77, 710,
	88, 76, 714, 77, 1382, 717, 538, 713, 450, 1363,
	1045, 1154, 1044, 1152, 1043, 343, 1362, 850, 852, 88,
	1365, 472, 449, 458, 213, 343, 1155, 78, 70, 72,
	736, 1157, 766, 337, 337, 337, 337, 1593, 337, 746,
	722, 889, 1364, 71, 73, 337, 662, 550, 551, 755,
	1471, 1332, 770, 1165, 1010, 658, 890, 988, 741, 517,
	468, 68, 870, 869, 738, 720, 1267, 512, 1487, 343,
	768, 1486, 515, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 771, 767,
	712, 971, 851, 812, 815, 1161, 807, 1485, 1484, 821,
	538, 723, 724, 725, 726, 727, 728, 729, 730, 748,
	461, 1483, 496, 500, 765, 731, 732, 1268, 1482, 763,
	88, 510, 1481, 88, 88, 88, 88, 88, 538, 518,
	820, 1479, 1281, 808, 809, 88, 833, 512, 88, 816,
	1033, 795, 88, 797, 798, 647, 337, 88, 88, 538,
	830, 343, 649, 1179, 1419, 335, 1199, 820, 706, 1017,
	807, 825, 1431, 562, 343, 1071, 817, 1421, 874, 69,
	972, 1160, 573, 824, 492, 826, 827, 1522, 858, 507,
	323, 323, 323, 323, 323, 503, 1181, 75, 857, 50,
	511, 510, 464, 465, 466, 323, 1523, 776, 1584, 772,
	744, 745, 835, 836, 323, 838, 834, 512, 1583, 837,
	846, 774, 775, 773, 511, 510, 343, 1568, 343, 88,
	855, 1201, 88, 854, 88, 859, 860, 88, 343, 1567,
	1566, 512, 877, 452, 1480, 1420, 1524, 448, 1183, 1564,
	1188, 1368, 1182, 938, 1180, 1097, 511, 510, 317, 949,
	1186, 1367, 966, 1520, 967, 1097, 766, 968, 934, 935,
	1442, 1184, 1185, 512, 1376, 701, 1375, 1422, 1423, 1424,
	1425, 1426, 1427, 1428, 1254, 337, 1133, 1117, 1187, 1189,
	1007, 1565, 922, 923, 924, 925, 337, 337, 337, 337,
	337, 337, 337, 337, 793, 1006, 794, 1005, 1115, 1097,
	337, 337, 889, 1402, 454, 770, 456, 884, 1371, 883,
	1298, 885, 886, 767, 511, 510, 887, 890, 1109, 1077,
	750, 1477, 984, 978, 977, 991, 992, 993, 511, 510,
	515, 512, 1242, 337, 1241, 906, 946, 1240, 948, 511,
	510, 771, 21, 1070, 990, 512, 1134, 1130, 969, 1056,
	1135, 1132, 1131, 945, 740, 73, 512, 895, 985, 986,
	987, 1027, 1500, 1605, 343, 796, 1136, 88, 1559, 1602,
	999, 902, 1129, 891, 799, 1048, 719, 1050, 1534, 892,
	756, 757, 1474, 343, 813, 813, 1014, 874, 1016, 739,
	813, 759, 761, 762, 343, 1345, 1589, 760, 245, 718,
	1040, 1345, 1561, 1500, 1560, 343, 511, 510, 1049, 1058,
	1559, 1558, 1552, 492, 88, 492, 282, 281, 284, 285,
	286, 287, 707, 512, 323, 283, 288, 813, 1051, 1345,
	1549, 1495, 898, 562, 894, 903, 810, 811, 1345, 1544,
	1448, 900, 899, 1345, 1543, 1410, 1503, 1345, 1449, 1447,
	88, 343, 1410, 1440, 343, 705, 337, 1114, 1123, 470,
	1102, 463, 1104, 1105, 1106, 1107, 1410, 492, 1538, 337,
	1410, 1411, 1089, 448, 1120, 1262, 1065, 1066, 1068, 343,
	1118, 1540, 88, 88, 1345, 1344, 54, 912, 1224, 492,
	88, 1501, 1110, 1500, 1116, 638, 1535, 1331, 492, 343,
	1276, 1275, 23, 1170, 1031, 1126, 1270, 1271, 1270, 1269,
	1127, 1000, 492, 612, 492, 805, 492, 867, 654, 653,
	1166, 337, 805, 337, 1000, 1194, 1098, 1099, 1405, 1101,
	1327, 1203, 1032, 337, 1031, 639, 896, 637, 1032, 343,
	343, 856, 897, 637, 23, 1171, 1174, 1175, 50, 1317,
	833, 1204, 491, 1172, 23, 1168, 833, 337, 1207, 1192,
	1193, 1209, 1195, 1196, 1177, 1191, 1190, 1198, 343, 1226,
	343, 343, 874, 612, 874, 612, 1361, 1025, 1012, 1031,
	1026, 1280, 767, 1213, 611, 1214, 1212, 1278, 1277, 50,
	50, 1009, 904, 1274, 905, 1057, 1231, 1000, 861, 1158,
	50, 1225, 1000, 640, 742, 901, 1596, 1230, 612, 974,
	975, 1592, 500, 1536, 1537, 1539, 1541, 1542, 1249, 1247,
	1011, 526, 525, 535, 536, 528, 529, 530, 531, 532,
	533, 534, 527, 1008, 1554, 537, 247, 1491, 1263, 1264,
	343, 1266, 1490, 1454, 1451, 1450, 1441, 1389, 913, 343,
	535, 536, 528, 529, 530, 531, 532, 533, 534, 527,
	937, 88, 537, 1261, 1259, 1251, 1218, 343, 932, 1047,
	1082, 1060, 1036, 1037, 704, 1001, 343, 939, 940, 88,
	1170, 927, 50, 1289, 926, 65, 1433, 1300, 337, 1430,
	1018, 1293, 1291, 1279, 1042, 1419, 1203, 1061, 1039, 1063,
	716, 1297, 708, 489, 843, 1041, 1294, 754, 1421, 844,
	1072, 845, 1265, 621, 622, 617, 620, 621, 622, 618,
	1301, 619, 623, 841, 1303, 840, 1308, 839, 842, 343,
	1579, 343, 343, 343, 88, 343, 323, 251, 252, 1555,
	1164, 343, 973, 1577, 506, 874, 983, 1338, 1339, 1340,
	982, 1334, 1326, 494, 1103, 652, 1119, 504, 471, 337,
	1253, 1353, 343, 1343, 495, 1341, 1325, 1058, 1390, 947,
	715, 1252, 1125, 1356, 941, 625, 1420, 506, 1359, 1384,
	1283, 1385, 1386, 1387, 337, 248, 249, 242, 343, 343,
	88, 343, 343, 1383, 981, 1123, 874, 343, 1572, 54,
	1377, 1460, 980, 243, 337, 1369, 1459, 343, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1393, 1032, 508, 1381, 1380,
	1379, 1083, 1084, 1085, 1237, 1236, 337, 538, 1489, 1088,
	1086, 289, 290, 1488, 1468, 1073, 737, 56, 58, 1128,
	1286, 813, 343, 343, 1211, 1047, 636, 813, 51, 1,
	1494, 1079, 1438, 67, 538, 1545, 343, 1404, 1499, 1207,
	1418, 1255, 1282, 1406, 1124, 343, 1137, 1396, 1397, 944,
	1398, 1399, 1400, 337, 1121, 337, 1234, 1415, 954, 1504,
	1429, 1370, 1416, 1372, 1436, 1434, 881, 1200, 871, 446,
	64, 1444, 1478, 343, 882, 880, 878, 655, 907, 1095,
	343, 910, 1215, 1216, 661, 659, 1217, 660, 657, 1219,
	1445, 663, 1446, 656, 221, 330, 1455, 624, 1394, 648,
	509, 343, 1151, 1417, 1150, 950, 1469, 1159, 733, 970,
	487, 223, 1473, 546, 979, 1052, 336, 1207, 1210, 743,
	1470, 498, 1458, 1392, 1015, 1290, 1250, 572, 293, 47,
	818, 268, 758, 280, 1292, 277, 279, 278, 749, 1024,
	519, 343, 343, 258, 322, 343, 608, 616, 614, 1496,
	613, 1038, 1295, 1497, 1498, 1034, 321, 1502, 1167, 1509,
	1322, 337, 343, 1465, 753, 25, 55, 343, 253, 19,
	1090, 18, 17, 833, 1514, 20, 47, 16, 15, 14,
	29, 343, 343, 1532, 246, 1525, 1526, 1527, 1528, 1529,
	324, 343, 1530, 1531, 1533, 13, 12, 343, 11, 10,
	1550, 9, 1091, 8, 1093, 1092, 7, 6, 5, 4,
	244, 1299, 22, 2, 1336, 0, 1336, 1336, 1336, 0,
	1342, 617, 620, 621, 622, 618, 337, 619, 623, 0,
	0, 1036, 1037, 0, 0, 747, 0, 0, 0, 0,
	0, 0, 0, 1573, 1576, 343, 0, 1336, 1575, 0,
	0, 1324, 0, 0, 0, 1580, 0, 1578, 562, 0,
	497, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 1234, 1378, 0, 337, 337, 0, 0,
	0, 0, 1388, 0, 343, 0, 1597, 343, 1598, 1601,
	0, 0, 1391, 804, 806, 86, 0, 0, 233, 0,
	0, 0, 1591, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 1143, 0, 0, 0, 0, 0, 0, 0,
	257, 0, 86, 86, 0, 0, 0, 1408, 1409, 0,
	1603, 0, 914, 915, 917, 918, 919, 86, 0, 86,
	0, 1234, 0, 0, 0, 86, 479, 479, 479, 479,
	1435, 479, 928, 929, 930, 0, 0, 0, 479, 848,
	526, 525, 535, 536, 528, 529, 530, 531, 532, 533,
	534, 527, 0, 0, 537, 47, 0, 1144, 1453, 0,
	0, 0, 1146, 1139, 1140, 1336, 1147, 1142, 1141, 0,
	547, 1149, 1145, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 1148, 0, 0, 0, 1472, 1437, 1138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 0, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 0, 574, 576, 576, 576, 576, 576, 576, 576,
	576, 0, 604, 605, 606, 607, 1234, 1234, 0, 585,
	1234, 0, 0, 627, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 813, 960, 0, 1516, 0, 0,
	0, 0, 1519, 0, 86, 0, 0, 0, 959, 0,
	0, 0, 587, 0, 0, 0, 1453, 1234, 0, 0,
	0, 0, 0, 0, 0, 0, 1547, 0, 0, 0,
	0, 0, 1553, 0, 0, 964, 0, 0, 0, 1508,
	562, 0, 0, 0, 958, 0, 0, 0, 0, 592,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 997,
	0, 0, 0, 998, 0, 0, 0, 0, 588, 0,
	1002, 1003, 1004, 602, 586, 0, 0, 0, 591, 1013,
	1234, 1548, 0, 0, 1019, 0, 0, 1020, 1021, 1022,
	1023, 0, 0, 955, 952, 953, 538, 951, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 1100, 86, 632, 86, 479, 337,
	0, 0, 1453, 0, 0, 962, 965, 0, 0, 479,
	479, 479, 479, 479, 479, 479, 479, 0, 0, 0,
	0, 0, 0, 479, 479, 0, 0, 0, 0, 0,
	603, 0, 0, 0, 1587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 23, 24, 48, 26, 27,
	0, 957, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 42, 0, 0, 0, 28, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 47, 956,
	0, 0, 0, 0, 0, 0, 0, 37, 0, 0,
	0, 50, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 86, 961, 86,
	0, 0, 86, 0, 0, 86, 0, 0, 0, 721,
	0, 0, 1176, 0, 963, 0, 0, 0, 0, 0,
	0, 324, 324, 324, 324, 324, 0, 0, 0, 0,
	86, 30, 31, 33, 32, 35, 627, 0, 853, 1258,
	1260, 0, 0, 0, 0, 324, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 36, 43, 44, 721, 1223,
	45, 46, 34, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	38, 39, 0, 40, 41, 0, 0, 0, 0, 0,
	257, 0, 0, 0, 0, 257, 257, 0, 0, 814,
	814, 257, 0, 219, 479, 814, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 479, 1305, 1306, 0,
	1307, 0, 0, 0, 1309, 0, 1311, 229, 0, 0,
	0, 0, 0, 0, 0, 257, 257, 257, 257, 0,
	86, 0, 814, 86, 86, 86, 86, 86, 0, 0,
	0, 0, 0, 0, 0, 847, 0, 0, 86, 0,
	0, 0, 632, 0, 0, 989, 0, 86, 86, 0,
	0, 0, 1346, 1347, 1302, 0, 49, 0, 214, 0,
	0, 1304, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 222, 218, 1313, 1314, 1315, 0, 0, 1318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1328, 1329, 1330, 0, 1333, 0, 0, 0, 0,
	0, 220, 0, 0, 224, 0, 0, 1028, 1029, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 86, 0, 86, 0, 0, 86, 0, 0,
	0, 0, 0, 1358, 0, 324, 0, 0, 0, 0,
	1366, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 721, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1076, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	225, 226, 227, 228, 232, 0, 0, 0, 0, 231,
	230, 0, 0, 0, 0, 1401, 0, 0, 0, 0,
	0, 0, 257, 0, 0, 0, 0, 0, 0, 0,
	47, 1412, 1413, 1414, 0, 0, 0, 0, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	1462, 1463, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1208, 0, 47, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	1492, 0, 1220, 1221, 1222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	86, 0, 0, 1515, 0, 0, 0, 682, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1257,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1162, 1163, 0, 0, 0, 1551, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 721, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 667, 0, 814, 0, 0, 0,
	0, 0, 814, 0, 0, 0, 0, 324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 683, 0, 0,
	0, 0, 0, 0, 0, 0, 1321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1606, 1607, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 593, 594, 595, 596, 597,
	598, 599, 600, 601, 0, 696, 697, 0, 698, 699,
	700, 684, 685, 686, 687, 664, 666, 1357, 602, 665,
	668, 0, 680, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 681, 688, 689, 690, 691, 692,
	693, 694, 695, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	0, 91, 0, 0, 264, 0, 0, 0, 113, 261,
	0, 0, 126, 303, 129, 603, 1208, 168, 138, 1407,
	0, 0, 0, 294, 295, 0, 0, 0, 0, 0,
	0, 865, 0, 50, 0, 0, 262, 282, 281, 284,
	285, 286, 287, 0, 632, 104, 283, 288, 289, 290,
	866, 0, 0, 259, 275, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 273, 0, 1456,
	0, 0, 315, 0, 274, 0, 0, 270, 271, 276,
	0, 0, 0, 0, 1208, 0, 47, 0, 0, 0,
	86, 0, 193, 0, 0, 313, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 206, 207, 208, 209, 210,
	211, 212, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 304,
	314, 310, 311, 308, 309, 307, 306, 305, 316, 296,
	297, 298, 299, 301, 0, 121, 300, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 103,
	0, 0, 0, 1599, 0, 0, 0, 0, 0, 814,
	0, 434, 424, 0, 394, 436, 369, 384, 444, 386,
	387, 416, 353, 402, 147, 381, 91, 372, 347, 378,
	348, 370, 396, 113, 368, 426, 405, 126, 442, 129,
	410, 0, 168, 138, 0, 0, 398, 428, 400, 422,
	393, 417, 360, 409, 437, 382, 413, 438, 0, 0,
	0, 342, 0, 875, 876, 0, 0, 0, 0, 0,
	104, 0, 412, 433, 380, 445, 415, 346, 411, 0,
	351, 354, 443, 431, 375, 376, 1059, 0, 0, 0,
	0, 0, 0, 397, 401, 419, 391, 0, 0, 0,
	0, 0, 0, 0, 0, 373, 0, 408, 0, 0,
	0, 357, 352, 1586, 395, 0, 0, 0, 359, 0,
	374, 420, 86, 344, 423, 429, 392, 193, 432, 390,
	389, 154, 0, 107, 0, 172, 117, 383, 127, 418,
	435, 399, 427, 371, 379, 109, 377, 161, 148, 184,
	407, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	206, 207, 208, 209, 210, 211, 212, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 349, 0, 169, 186, 204,
	205, 350, 367, 430, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 414,
	162, 106, 185, 167, 363, 366, 361, 362, 403, 404,
	439, 440, 441, 421, 358, 0, 364, 365, 0, 425,
	121, 406, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 385, 345, 388, 0, 0, 0, 0, 0, 0,
	0, 355, 356, 0, 103, 434, 424, 0, 394, 436,
	369, 384, 444, 386, 387, 416, 353, 402, 147, 381,
	91, 372, 347, 378, 348, 370, 396, 113, 368, 426,
	405, 126, 442, 129, 410, 0, 168, 138, 0, 0,
	398, 428, 400, 422, 393, 417, 360, 409, 437, 382,
	413, 438, 0, 0, 0, 342, 0, 875, 876, 0,
	0, 0, 0, 0, 104, 0, 412, 433, 380, 445,
	415, 346, 411, 0, 351, 354, 443, 431, 375, 376,
	0, 0, 0, 0, 0, 0, 0, 397, 401, 419,
	391, 0, 0, 0, 0, 0, 0, 0, 0, 373,
	0, 408, 0, 0, 0, 357, 352, 0, 395, 0,
	0, 0, 359, 0, 374, 420, 0, 344, 423, 429,
	392, 193, 432, 390, 389, 154, 0, 107, 0, 172,
	117, 383, 127, 418, 435, 399, 427, 371, 379, 109,
	377, 161, 148, 184, 407, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 206, 207, 208, 209, 210, 211,
	212, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 349,
	0, 169, 186, 204, 205, 350, 367, 430, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 414, 162, 106, 185, 167, 363, 366,
	361, 362, 403, 404, 439, 440, 441, 421, 358, 0,
	364, 365, 0, 425, 121, 406, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 385, 345, 388, 0, 0,
	0, 0, 0, 0, 0, 355, 356, 0, 103, 434,
	424, 0, 394, 436, 369, 384, 444, 386, 387, 416,
	353, 402, 147, 381, 91, 372, 347, 378, 348, 370,
	396, 113, 368, 426, 405, 126, 442, 129, 410, 0,
	168, 138, 0, 0, 398, 428, 400, 422, 393, 417,
	360, 409, 437, 382, 413, 438, 0, 0, 0, 342,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	412, 433, 380, 445, 415, 346, 411, 0, 351, 354,
	443, 431, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 397, 401, 419, 391, 0, 0, 0, 0, 0,
	0, 1169, 0, 373, 0, 408, 0, 0, 0, 357,
	352, 0, 395, 0, 0, 0, 359, 0, 374, 420,
	0, 344, 423, 429, 392, 193, 432, 390, 389, 154,
	0, 107, 0, 172, 117, 383, 127, 418, 435, 399,
	427, 371, 379, 109, 377, 161, 148, 184, 407, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 206, 207,
	208, 209, 210, 211, 212, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 349, 0, 169, 186, 204, 205, 350,
	367, 430, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 414, 162, 106,
	185, 167, 363, 366, 361, 362, 403, 404, 439, 440,
	441, 421, 358, 0, 364, 365, 0, 425, 121, 406,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 385,
	345, 388, 0, 0, 0, 0, 0, 0, 0, 355,
	356, 0, 103, 434, 424, 0, 394, 436, 369, 384,
	444, 386, 387, 416, 353, 402, 147, 381, 91, 372,
	347, 378, 348, 370, 396, 113, 368, 426, 405, 126,
	442, 129, 410, 0, 168, 138, 0, 0, 398, 428,
	400, 422, 393, 417, 360, 409, 437, 382, 413, 438,
	50, 0, 0, 342, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 412, 433, 380, 445, 415, 346,
	411, 0, 351, 354, 443, 431, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 397, 401, 419, 391, 0,
	0, 0, 0, 0, 0, 0, 0, 373, 0, 408,
	0, 0, 0, 357, 352, 0, 395, 0, 0, 0,
	359, 0, 374, 420, 0, 344, 423, 429, 392, 193,
	432, 390, 389, 154, 0, 107, 0, 172, 117, 383,
	127, 418, 435, 399, 427, 371, 379, 109, 377, 161,
	148, 184, 407, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 206, 207, 208, 209, 210, 211, 212, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 349, 0, 169,
	186, 204, 205, 350, 367, 430, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 414, 162, 106, 185, 167, 363, 366, 361, 362,
	403, 404, 439, 440, 441, 421, 358, 0, 364, 365,
	0, 425, 121, 406, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 385, 345, 388, 0, 0, 0, 0,
	0, 0, 0, 355, 356, 0, 103, 434, 424, 0,
	394, 436, 369, 384, 444, 386, 387, 416, 353, 402,
	147, 381, 91, 372, 347, 378, 348, 370, 396, 113,
	368, 426, 405, 126, 442, 129, 410, 0, 168, 138,
	0, 0, 398, 428, 400, 422, 393, 417, 360, 409,
	437, 382, 413, 438, 0, 0, 0, 262, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 412, 433,
	380, 445, 415, 346, 411, 0, 351, 354, 443, 431,
	375, 376, 0, 0, 0, 0, 0, 0, 0, 397,
	401, 419, 391, 0, 0, 0, 0, 0, 0, 764,
	0, 373, 0, 408, 0, 0, 0, 357, 352, 0,
	395, 0, 0, 0, 359, 0, 374, 420, 0, 344,
	423, 429, 392, 193, 432, 390, 389, 154, 0, 107,
	0, 172, 117, 383, 127, 418, 435, 399, 427, 371,
	379, 109, 377, 161, 148, 184, 407, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 206, 207, 208, 209,
	210, 211, 212, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 349, 0, 169, 186, 204, 205, 350, 367, 430,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 414, 162, 106, 185, 167,
	363, 366, 361, 362, 403, 404, 439, 440, 441, 421,
	358, 0, 364, 365, 0, 425, 121, 406, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 385, 345, 388,
	0, 0, 0, 0, 0, 0, 0, 355, 356, 0,
	103, 434, 424, 0, 394, 436, 369, 384, 444, 386,
	387, 416, 353, 402, 147, 381, 91, 372, 347, 378,
	348, 370, 396, 113, 368, 426, 405, 126, 442, 129,
	410, 0, 168, 138, 0, 0, 398, 428, 400, 422,
	393, 417, 360, 409, 437, 382, 413, 438, 0, 0,
	0, 342, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 412, 433, 380, 445, 415, 346, 411, 0,
	351, 354, 443, 431, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 397, 401, 419, 391, 0, 0, 0,
	0, 0, 0, 0, 0, 373, 0, 408, 0, 0,
	0, 357, 352, 0, 395, 0, 0, 0, 359, 0,
	374, 420, 0, 344, 423, 429, 392, 193, 432, 390,
	389, 154, 0, 107, 0, 172, 117, 383, 127, 418,
	435, 399, 427, 371, 379, 109, 377, 161, 148, 184,
	407, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	206, 207, 208, 209, 210, 211, 212, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 349, 0, 169, 186, 204,
	205, 350, 367, 430, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 414,
	162, 106, 185, 167, 363, 366, 361, 362, 403, 404,
	439, 440, 441, 421, 358, 0, 364, 365, 0, 425,
	121, 406, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 385, 345, 388, 0, 0, 0, 0, 0, 0,
	0, 355, 356, 0, 103, 434, 424, 0, 394, 436,
	369, 384, 444, 386, 387, 416, 353, 402, 147, 381,
	91, 372, 347, 378, 348, 370, 396, 113, 368, 426,
	405, 126, 442, 129, 410, 0, 168, 138, 0, 0,
	398, 428, 400, 422, 393, 417, 360, 409, 437, 382,
	413, 438, 0, 0, 0, 262, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 412, 433, 380, 445,
	415, 346, 411, 0, 351, 354, 443, 431, 375, 376,
	0, 0, 0, 0, 0, 0, 0, 397, 401, 419,
	391, 0, 0, 0, 0, 0, 0, 0, 0, 373,
	0, 408, 0, 0, 0, 357, 352, 0, 395, 0,
	0, 0, 359, 0, 374, 420, 0, 344, 423, 429,
	392, 193, 432, 390, 389, 154, 0, 107, 0, 172,
	117, 383, 127, 418, 435, 399, 427, 371, 379, 109,
	377, 161, 148, 184, 407, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 206, 207, 208, 209, 210, 211,
	212, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 349,
	0, 169, 186, 204, 205, 350, 367, 430, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 414, 162, 106, 185, 167, 363, 366,
	361, 362, 403, 404, 439, 440, 441, 421, 358, 0,
	364, 365, 0, 425, 121, 406, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 385, 345, 388, 0, 0,
	0, 0, 0, 0, 0, 355, 356, 0, 103, 434,
	424, 0, 394, 436, 369, 384, 444, 386, 387, 416,
	353, 402, 147, 381, 91, 372, 347, 378, 348, 370,
	396, 113, 368, 426, 405, 126, 442, 129, 410, 0,
	168, 138, 0, 0, 398, 428, 400, 422, 393, 417,
	360, 409, 437, 382, 413, 438, 0, 0, 0, 342,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	412, 433, 380, 445, 415, 346, 411, 0, 351, 354,
	443, 431, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 397, 401, 419, 391, 0, 0, 0, 0, 0,
	0, 0, 0, 373, 0, 408, 0, 0, 0, 357,
	352, 0, 395, 0, 0, 0, 359, 0, 374, 420,
	0, 344, 423, 429, 392, 193, 432, 390, 389, 154,
	0, 107, 0, 172, 117, 383, 127, 418, 435, 399,
	427, 371, 379, 109, 377, 161, 148, 184, 407, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 206, 207,
	208, 209, 210, 211, 212, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 340, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 349, 0, 169, 186, 204, 205, 350,
	367, 430, 196, 197, 198, 199, 0, 0, 0, 341,
	339, 120, 165, 124, 131, 157, 202, 414, 162, 106,
	185, 167, 363, 366, 361, 362, 403, 404, 439, 440,
	441, 421, 358, 0, 364, 365, 0, 425, 121, 406,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 385,
	345, 388, 0, 0, 0, 0, 0, 0, 0, 355,
	356, 0, 103, 434, 424, 0, 394, 436, 369, 384,
	444, 386, 387, 416, 353, 402, 147, 381, 91, 372,
	347, 378, 348, 370, 396, 113, 368, 426, 405, 126,
	442, 129, 410, 0, 168, 138, 0, 0, 398, 428,
	400, 422, 393, 417, 360, 409, 437, 382, 413, 438,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 412, 433, 380, 445, 415, 346,
	411, 0, 351, 354, 443, 431, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 397, 401, 419, 391, 0,
	0, 0, 0, 0, 0, 0, 0, 373, 0, 408,
	0, 0, 0, 357, 352, 0, 395, 0, 0, 0,
	359, 0, 374, 420, 0, 344, 423, 429, 392, 193,
	432, 390, 389, 154, 0, 107, 0, 172, 117, 383,
	127, 418, 435, 399, 427, 371, 379, 109, 377, 161,
	148, 184, 407, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 206, 207, 208, 209, 210, 211, 212, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 349, 0, 169,
	186, 204, 205, 350, 367, 430, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 414, 162, 106, 185, 167, 363, 366, 361, 362,
	403, 404, 439, 440, 441, 421, 358, 0, 364, 365,
	0, 425, 121, 406, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 385, 345, 388, 0, 0, 0, 0,
	0, 0, 0, 355, 356, 0, 103, 434, 424, 0,
	394, 436, 369, 384, 444, 386, 387, 416, 353, 402,
	147, 381, 91, 372, 347, 378, 348, 370, 396, 113,
	368, 426, 405, 126, 442, 129, 410, 0, 168, 138,
	0, 0, 398, 428, 400, 422, 393, 417, 360, 409,
	437, 382, 413, 438, 0, 0, 0, 342, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 412, 433,
	380, 445, 415, 346, 411, 0, 351, 354, 443, 431,
	375, 376, 0, 0, 0, 0, 0, 0, 0, 397,
	401, 419, 391, 0, 0, 0, 0, 0, 0, 0,
	0, 373, 0, 408, 0, 0, 0, 357, 352, 0,
	395, 0, 0, 0, 359, 0, 374, 420, 0, 344,
	423, 429, 392, 193, 432, 390, 389, 154, 0, 107,
	0, 172, 117, 383, 127, 418, 435, 399, 427, 371,
	379, 109, 377, 161, 148, 184, 407, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 206, 207, 208, 209,
	210, 211, 212, 92, 173, 642, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 340, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 349, 0, 169, 186, 204, 205, 350, 367, 430,
	196, 197, 198, 199, 0, 0, 0, 341, 339, 120,
	165, 124, 131, 157, 202, 414, 162, 106, 185, 167,
	363, 366, 361, 362, 403, 404, 439, 440, 441, 421,
	358, 0, 364, 365, 0, 425, 121, 406, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 385, 345, 388,
	0, 0, 0, 0, 0, 0, 0, 355, 356, 0,
	103, 434, 424, 0, 394, 436, 369, 384, 444, 386,
	387, 416, 353, 402, 147, 381, 91, 372, 347, 378,
	348, 370, 396, 113, 368, 426, 405, 126, 442, 129,
	410, 0, 168, 138, 0, 0, 398, 428, 400, 422,
	393, 417, 360, 409, 437, 382, 413, 438, 0, 0,
	0, 342, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 412, 433, 380, 445, 415, 346, 411, 0,
	351, 354, 443, 431, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 397, 401, 419, 391, 0, 0, 0,
	0, 0, 0, 0, 0, 373, 0, 408, 0, 0,
	0, 357, 352, 0, 395, 0, 0, 0, 359, 0,
	374, 420, 0, 344, 423, 429, 392, 193, 432, 390,
	389, 154, 0, 107, 0, 172, 117, 383, 127, 418,
	435, 399, 427, 371, 379, 109, 377, 161, 148, 184,
	407, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	206, 207, 208, 209, 210, 211, 212, 92, 173, 331,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 340, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 349, 0, 169, 186, 204,
	205, 350, 367, 430, 196, 197, 198, 199, 0, 0,
	0, 341, 339, 334, 333, 124, 131, 157, 202, 414,
	162, 106, 185, 167, 363, 366, 361, 362, 403, 404,
	439, 440, 441, 421, 358, 0, 364, 365, 0, 425,
	121, 406, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 385, 345, 388, 0, 0, 0, 0, 0, 0,
	0, 355, 356, 147, 103, 91, 801, 0, 264, 0,
	0, 0, 113, 261, 0, 0, 126, 303, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 294, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	262, 282, 281, 284, 285, 286, 287, 0, 0, 104,
	283, 288, 289, 290, 0, 0, 0, 259, 275, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	272, 273, 255, 0, 0, 0, 315, 0, 274, 0,
	0, 270, 271, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 313,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 206,
	207, 208, 209, 210, 211, 212, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 304, 314, 310, 311, 308, 309, 307,
	306, 305, 316, 296, 297, 298, 299, 301, 0, 121,
	300, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	0, 147, 0, 91, 0, 0, 264, 0, 0, 0,
	113, 261, 312, 103, 126, 303, 129, 0, 0, 168,
	138, 0, 0, 0, 0, 294, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 492, 262, 282,
	281, 284, 285, 286, 287, 0, 0, 104, 283, 288,
	289, 290, 0, 0, 0, 259, 275, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 272, 273,
	0, 0, 0, 0, 315, 0, 274, 0, 0, 270,
	271, 276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 313, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 206, 207, 208,
	209, 210, 211, 212, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 0, 0, 169, 186, 204, 205, 0, 0,
	0, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 0, 162, 106, 185,
	167, 304, 314, 310, 311, 308, 309, 307, 306, 305,
	316, 296, 297, 298, 299, 301, 0, 121, 300, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 0, 147,
	0, 91, 0, 0, 264, 0, 0, 0, 113, 261,
	312, 103, 126, 303, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 294, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 262, 282, 281, 284,
	285, 286, 287, 0, 0, 104, 283, 288, 289, 290,
	0, 0, 0, 259, 275, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 273, 255, 0,
	0, 0, 315, 0, 274, 0, 0, 270, 271, 276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 313, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 206, 207, 208, 209, 210,
	211, 212, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 304,
	314, 310, 311, 308, 309, 307, 306, 305, 316, 296,
	297, 298, 299, 301, 0, 121, 300, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 0, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 103,
	147, 0, 91, 0, 0, 264, 0, 0, 0, 113,
	261, 0, 0, 126, 303, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 294, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 262, 282, 281,
	284, 285, 286, 287, 0, 0, 104, 283, 288, 289,
	290, 0, 0, 0, 259, 275, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 273, 0,
	0, 0, 0, 315, 0, 274, 0, 0, 270, 271,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 313, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 206, 207, 208, 209,
	210, 211, 212, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	304, 314, 310, 311, 308, 309, 307, 306, 305, 316,
	296, 297, 298, 299, 301, 0, 121, 300, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 0, 147, 0,
	91, 0, 0, 264, 0, 0, 0, 113, 261, 312,
	103, 126, 303, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 294, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 262, 282, 281, 284, 285,
	286, 287, 0, 0, 104, 283, 288, 289, 290, 0,
	0, 0, 259, 275, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 273, 0, 0, 0,
	0, 315, 0, 274, 0, 0, 270, 271, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 313, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 206, 207, 208, 209, 210, 211,
	212, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 0, 162, 106, 185, 167, 304, 314,
	310, 311, 308, 309, 307, 306, 305, 316, 296, 297,
	298, 299, 301, 0, 121, 300, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 0, 147, 0, 91, 0,
	0, 0, 0, 0, 0, 113, 0, 312, 103, 126,
	303, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	294, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 262, 282, 281, 284, 285, 286, 287,
	0, 0, 104, 283, 288, 289, 290, 0, 0, 0,
	0, 275, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 273, 0, 0, 0, 0, 315,
	0, 274, 0, 0, 270, 271, 276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 313, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 1604, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 206, 207, 208, 209, 210, 211, 212, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 304, 314, 310, 311,
	308, 309, 307, 306, 305, 316, 296, 297, 298, 299,
	301, 0, 121, 300, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 0, 147, 0, 91, 0, 0, 0,
	0, 0, 0, 113, 0, 312, 103, 126, 303, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 294, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 262, 282, 281, 284, 285, 286, 287, 0, 0,
	104, 283, 288, 289, 290, 0, 0, 0, 0, 275,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 273, 0, 0, 0, 0, 315, 0, 274,
	0, 0, 270, 271, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	313, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	206, 207, 208, 209, 210, 211, 212, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 304, 314, 310, 311, 308, 309,
	307, 306, 305, 316, 296, 297, 298, 299, 301, 0,
	121, 300, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 147, 0, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 312, 103, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 525, 535, 536, 528,
	529, 530, 531, 532, 533, 534, 527, 0, 0, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 206, 207,
	208, 209, 210, 211, 212, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	147, 0, 91, 0, 514, 0, 0, 0, 0, 113,
	0, 538, 103, 126, 0, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 516,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 512,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 206, 207, 208, 209,
	210, 211, 212, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 0, 147, 0,
	91, 0, 631, 0, 0, 0, 0, 113, 0, 0,
	103, 126, 0, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 633, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 206, 207, 208, 209, 210, 211,
	212, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 0, 162, 106, 185, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 23, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 0, 0, 147, 0, 91,
	0, 0, 0, 0, 0, 0, 113, 0, 103, 0,
	126, 0, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 342, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 154, 0, 107, 0, 172, 117,
	0, 127, 0, 0, 0, 0, 0, 0, 109, 0,
	161, 148, 184, 0, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 206, 207, 208, 209, 210, 211, 212,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 23, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 0, 0, 147, 0, 91, 0,
	0, 0, 0, 0, 0, 113, 0, 103, 0, 126,
	0, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 206, 207, 208, 209, 210, 211, 212, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 0, 147, 0, 91, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 103, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 0, 751, 0, 0, 752, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	206, 207, 208, 209, 210, 211, 212, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 147, 0, 91, 0, 0, 0, 0, 0,
	0, 113, 651, 0, 103, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 650, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 206, 207,
	208, 209, 210, 211, 212, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	147, 0, 91, 0, 631, 0, 0, 0, 0, 113,
	0, 0, 103, 126, 0, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 633,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 629, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 206, 207, 208, 209,
	210, 211, 212, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 0, 147, 0,
	91, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	103, 126, 0, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 206, 207, 208, 209, 210, 211,
	212, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 0, 162, 106, 185, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 0, 147, 0, 91, 0,
	0, 0, 0, 0, 1585, 113, 0, 0, 103, 126,
	0, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 1235, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 206, 207, 208, 209, 210, 211, 212, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 0, 147, 0, 91, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 103, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 1337, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	206, 207, 208, 209, 210, 211, 212, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 147, 0, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 103, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 206, 207,
	208, 209, 210, 211, 212, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	147, 0, 91, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 103, 126, 0, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 633,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 206, 207, 208, 209,
	210, 211, 212, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 0, 147, 0,
	91, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	103, 126, 0, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 516, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 206, 207, 208, 209, 210, 211,
	212, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 0, 162, 106, 185, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 0, 147, 0, 91, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 103, 126,
	0, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 206, 207, 208, 209, 210, 211, 212, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 711, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 0, 147, 0, 91, 0, 0, 0,
	0, 0, 609, 113, 0, 0, 103, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	206, 207, 208, 209, 210, 211, 212, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 326, 156, 115,
	187, 0, 0, 0, 147, 0, 91, 0, 0, 0,
	0, 0, 0, 113, 103, 0, 0, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	206, 207, 208, 209, 210, 211, 212, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 147, 0, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 103, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 193, 0, 0, 0, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 206, 207,
	208, 209, 210, 211, 212, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	147, 0, 91, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 103, 126, 0, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 206, 207, 208, 209,
	210, 211, 212, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 0, 147, 0,
	91, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	103, 126, 0, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 206, 207, 208, 209, 210, 211,
	212, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 0, 162, 106, 185, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 0, 147, 0, 91, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 103, 126,
	0, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 206, 207, 208, 209, 210, 211, 212, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103,
}

var yyPact = [...]int{
	1949, -1000, -195, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1274, 1322, -1000, -1000, -1000, -1000, -1000, -1000, 1123,
	400, 370, 398, 121, 12704, 395, 2112, 13240, -1000, 147,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1028, -1000, -1000,
	-1000, -1000, -1000, 1260, 1277, 1120, 1255, 1189, -1000, 6791,
	365, 11094, 12436, 5976, -1000, 908, 392, 377, 12972, 344,
	344, 12972, 344, -1000, -58, 394, 13240, -1000, 13240, 343,
	896, 343, 343, 343, 13240, -1000, 441, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 13240, 894, 1219, 252, 3918, 3918, 3918,
	3918, 200, 3918, -12, 1143, -1000, -1000, -1000, -1000, 3918,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	851, 1224, 7340, 7340, 1274, -1000, 1028, -1000, -1000, -1000,
	1213, -1000, -1000, 606, 1296, -1000, 8412, 440, -1000, 7340,
	49, 1027, -1000, -1000, 1027, -1000, -1000, 427, -1000, -1000,
	7876, 7876, 7876, 7876, 7876, 7876, 7876, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1027, -1000, 7072, 1027, 1027, 1027, 1027, 1027, 1027,
	1027, 1027, 7340, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
	1027, 1027, 1653, 1027, 1027, 1027, 1027, 12166, 1045, 1165,
	-1000, -1000, -1000, 1243, 9218, 10022, 13240, 974, -1000, 1040,
	5682, -6, -1000, -1000, -1000, 555, 9754, -1000, -1000, -1000,
	1216, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 955, -1000, 2488, 12972,
	13240, 1113, 890, 576, 857, 1142, 13240, -1000, 11898, 3918,
	375, 13240, 1237, 1140, 13240, 834, 811, -1000, 5388, -1000,
	3918, 3918, 3918, 3918, 3918, 3918, 3918, 3918, -1000, -1000,
	-1000, -1000, -1000, -1000, 3918, 3918, -1000, 84, -1000, 13240,
	-1000, -1000, -1000, -1000, 1317, 464, 826, 439, 1041, -1000,
	666, 1260, 851, 1189, 9486, 1156, -1000, -1000, 13240, -1000,
	7340, 7340, 815, -1000, 11630, -1000, -1000, 4212, 470, 7876,
	627, 613, 7876, 7876, 7876, 7876, 7876, 7876, 7876, 7876,
	7876, 7876, 7876, 7876, 7876, 7876, 7876, 729, 1653, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 800, -1000, 1028,
	850, 850, 9, 9, 9, 9, 9, 9, 8144, 6255,
	851, 952, 759, 7072, 6791, 6791, 7340, 7340, 13508, 13508,
	6791, 1246, 544, 759, 13508, -1000, 851, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 109, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6791, 6791, 6791, 6791, 215, 13240,
	-1000, 13508, 11094, 11094, 11094, 11094, 11094, -1000, 1177, 1175,
	-1000, 1173, 1154, 1161, 13240, -1000, 950, 9218, 459, 1027,
	-1000, 11362, -1000, -1000, 215, 980, 11094, 13240, -1000, -1000,
	5094, 1040, -6, 1035, -1000, -28, -19, 2731, 447, -1000,
	-1000, -1000, -1000, 3330, 672, 797, -115, 23, -1000, -1000,
	-1000, -1000, 1086, -1000, 1086, 250, 1086, 1086, 1086, 71,
	71, 71, 71, 71, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1122, 1119, -1000, 1086, 1086, 1086, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1106, 290, 1106, 1098,
	1098, 1117, 1242, -77, 788, 3918, 1236, 3918, 13240, -1000,
	1760, 13240, -1000, 13240, -1000, -1000, 13240, 3918, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 570, -1000, -1000, -1000, -1000, 1196, 7340,
	7340, 4800, 7340, -1000, -1000, -1000, 1224, -1000, 1246, 1273,
	-1000, 1208, 1204, 6791, -1000, -1000, 470, 540, -1000, -1000,
	782, -1000, -1000, -1000, -1000, 438, 1027, -1000, 1579, -1000,
	-1000, -1000, -1000, 627, 7876, 7876, 7876, 321, 1579, 293,
	1047, 166, 9, 127, 127, 6, 6, 6, 6, 6,
	151, 151, -1000, -1000, -1000, -1000, 851, -1000, -1000, -1000,
	851, 6791, 1039, -1000, -1000, 7340, -1000, 851, 948, 948,
	734, 748, 1070, -1000, 435, 1057, 948, 6791, 571, -1000,
	7340, 851, -1000, -1000, 948, 851, 948, 948, 1038, 1027,
	-1000, 1016, -1000, 550, 1165, 1112, 1138, 1491, -1000, -1000,
	-1000, -1000, 1155, -1000, 1144, -1000, -1000, -1000, -1000, -1000,
	384, 382, 380, 12972, -1000, 1294, 11094, 1010, -1000, -1000,
	1035, -6, 101, -1000, -1000, -1000, -1000, 759, -1000, -1000,
	784, 1032, 3036, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1109, 1137, 12972, 264, 248, 411, 311, 778, -1000,
	-1000, -1000, 589, -1000, 12972, 1316, -1000, -1000, 246, -1000,
	241, 1027, 752, 13240, 111, 1108, 1254, -1000, -201, -1000,
	21, -1000, -1000, 731, 71, 71, 1086, 71, -1000, -1000,
	447, 1215, 447, 447, 447, 447, 751, 751, -91, -91,
	-1000, -1000, 730, 1106, -1000, -1000, -1000, 709, -1000, 13240,
	12972, 1028, -1000, 4506, -1000, -1000, -1000, -1000, -1000, 1240,
	-1000, 711, 1567, 381, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 206, 404, -1000, 3918, -1000,
	573, 13240, 13240, 1193, 759, 759, 434, -1000, -1000, 13240,
	-1000, -1000, -1000, -1000, 1034, -1000, -1000, -1000, 3624, 6791,
	-1000, 321, 1579, 199, -1000, 7876, 7876, -1000, -1000, 948,
	6791, 759, -1000, -1000, -1000, 537, 729, 537, 7876, 7876,
	4800, 7876, 7876, -70, 961, 567, -1000, 7340, 634, -1000,
	-1000, -1000, -1000, -1000, 1136, 13508, 1027, -1000, 8949, 12972,
	1274, 13508, 7340, 7340, -1000, -1000, 7340, 1104, -1000, 7340,
	-1000, -1000, -1000, 1027, 1027, 1027, 925, -1000, 1274, 1010,
	-1000, -1000, -1000, -40, -39, -1000, -1000, 3330, -1000, 3330,
	10558, 1305, 273, 339, -1000, 772, 769, -1000, 767, -1000,
	34, -1000, 74, -48, -1000, -1000, 7340, -1000, 1103, 1239,
	-1000, 1222, 706, -191, -1000, -1000, -1000, -1000, -1000, -1000,
	1027, 1102, 1101, -1000, -1000, -1000, -1000, 911, 447, 447,
	71, 447, -1000, 501, -1000, -1000, -1000, -1000, 945, -1000,
	943, -1000, 116, 80, -1000, 1030, -1000, 937, 1026, 1133,
	-1000, 1018, -1000, 542, 1251, 164, -1000, 243, -1000, 12972,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12972, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13240, -1000, -1000, -1000, -1000, -1000, 12972, 303, -1000, -1000,
	743, 7340, -1000, -1000, -1000, 4506, -1000, 1294, 11094, -1000,
	-1000, 851, -1000, 7876, 1579, 1579, -1000, -1000, 851, 1086,
	1086, -1000, 1086, 1098, -1000, -1000, 1086, 137, 1086, 128,
	851, 851, 183, 1020, -1000, 99, 342, 1027, -65, -1000,
	759, 7340, -1000, 1229, 971, 967, -1000, -1000, 6523, 851,
	934, 432, 925, 1260, -1000, 759, 759, 759, 10826, 759,
	10826, 10826, 10826, 8680, 12972, 1260, -1000, -1000, -1000, -1000,
	3036, -1000, 921, -1000, 1086, 1086, 327, 327, 240, 235,
	-1000, -1000, -1000, -1000, -179, -1000, -1000, -1000, 1027, -1000,
	610, 10826, -175, -1000, 1013, -1000, 305, 851, -1000, 687,
	-1000, 677, -1000, -1000, -1000, 447, -1000, -1000, -1000, 71,
	741, 71, 4, 1, 698, -1000, 696, 10558, 12972, 13240,
	4506, 3330, 372, 1263, -1000, -1000, 12972, -1000, -1000, -1000,
	1085, -1000, -1000, -1000, -1000, 1232, 12972, -1000, -1000, 759,
	1292, 1012, -1000, 1579, -1000, -1000, 231, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 7876, 7876, -1000, 7876,
	7876, 7876, 851, 736, 759, 232, -1000, 1027, -1000, -1000,
	986, 12972, 12972, -1000, -1000, 907, -1000, -1000, 903, 903,
	903, 459, -1000, -1000, 1134, 10558, -1000, -1000, 1129, -1000,
	-1000, 586, 175, 1126, 12972, -179, -1000, 7340, 179, 889,
	1084, 692, 90, -91, -1000, -1000, -1000, -1000, -1000, -1000,
	447, -1000, 447, -1000, -1000, 885, 876, 884, 1083, 1082,
	-1000, -1000, 12972, -1000, -1000, -1000, -1000, -1000, 1081, 10826,
	1027, 333, 1282, 1275, -1000, -1000, 82, 82, 82, 82,
	65, -1000, -1000, 1315, -1000, 1027, -1000, 1028, 431, -1000,
	12972, -1000, -1000, -1000, -1000, -1000, 593, 119, -1000, 756,
	541, 667, 532, 528, 521, 508, 507, 481, 478, -1000,
	1314, -1000, -1000, 1308, 1080, -1000, 1075, 610, -1000, -67,
	-1000, -1000, 867, -1000, -1000, -1000, -1000, -1000, -1000, 1294,
	10558, 10558, 930, -1000, 10558, 882, 202, 230, -1000, 7340,
	7340, -1000, -1000, -1000, -1000, 851, 168, -157, 13508, 967,
	851, 12972, -1000, -1000, -155, 593, 12972, -1000, 685, -1000,
	-1000, 617, 668, 617, 617, 617, 617, 617, 327, 327,
	12972, 10558, -1000, -1000, 814, -1000, -1000, 880, 875, -76,
	12972, 7340, 866, 1113, 849, -1000, 12972, 1072, 759, 959,
	-1000, 1192, -73, -161, 941, -1000, -1000, 847, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 840, 838, -1000, 70, 713, 662, 661, 649,
	42, -1000, 1272, 1294, -1000, -1000, -193, -1000, 759, -1000,
	-77, -1000, 202, 1201, 10558, -1000, 1183, -1000, -1000, 593,
	301, -107, 640, -1000, 630, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10290, -1000, 7340, -1000, -1000, 198, 832, -110,
	-1000, 13240, 1049, -1000, -1000, -1000, 418, 759, 190, -1000,
	-158, 1044, 593, 4506, 1027, -165, 12972, 805, -1000, 7608,
	-1000, 799, -1000, 82, 851, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1523, 22, 832, 1522, 1520, 1519, 1518, 1517, 1516,
	1513, 1511, 1509, 1508, 1506, 1505, 1490, 1489, 1488, 1487,
	1485, 1482, 1481, 1479, 427, 1478, 1476, 1475, 84, 1474,
	95, 1473, 1470, 51, 58, 45, 53, 359, 1468, 41,
	83, 78, 1466, 52, 1465, 1461, 98, 1460, 76, 1458,
	1457, 30, 1456, 1454, 25, 9, 1453, 55, 1450, 1449,
	82, 40, 1448, 1447, 1446, 1445, 1443, 1442, 60, 8,
	10, 21, 19, 1441, 57, 14, 1440, 59, 1437, 1434,
	1433, 1432, 42, 1431, 71, 1429, 27, 66, 1428, 16,
	75, 46, 37, 15, 97, 73, 1426, 43, 74, 56,
	1425, 1424, 677, 1423, 1421, 1420, 1419, 1418, 1417, 600,
	723, 1415, 1414, 1412, 61, 0, 305, 4, 94, 1410,
	48, 1409, 1570, 86, 81, 31, 1407, 44, 120, 49,
	1405, 1404, 47, 92, 1403, 96, 87, 1401, 1398, 1397,
	1395, 1394, 977, 34, 101, 29, 1391, 1389, 1388, 17,
	50, 32, 54, 67, 1387, 1386, 1385, 33, 1384, 13,
	20, 2, 80, 1382, 1380, 1379, 1378, 39, 26, 1376,
	24, 12, 5, 1372, 3, 1369, 1, 1368, 28, 1364,
	7, 1359, 6, 1356, 1354, 1352, 1351, 1348, 1345, 1343,
	1342, 1341, 1340, 18, 36, 11, 1339, 1338, 1438, 1042,
	1336, 1330, 1329, 1328, 99,
}

var yyR1 = [...]int{
	0, 196, 197, 197, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 200,
	200, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 184,
	184, 184, 185, 185, 185, 185, 185, 185, 187, 187,
	188, 188, 120, 120, 182, 182, 181, 180, 180, 179,
	179, 178, 189, 189, 16, 164, 165, 165, 165, 165,
	165, 153, 134, 134, 134, 134, 134, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 194, 194, 194,
	194, 194, 194, 194, 194, 191, 191, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 143, 143, 143, 143, 143, 190, 190, 186, 186,
	186, 186, 186, 138, 138, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 137, 137, 137, 137, 137,
	137, 139, 139, 139, 139, 139, 135, 135, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 141, 141,
	141, 141, 141, 141, 141, 141, 152, 152, 142, 142,
	150, 150, 151, 151, 151, 149, 149, 149, 146, 146,
	147, 147, 148, 148, 148, 144, 144, 144, 145, 145,
	145, 155, 155, 155, 173, 173, 174, 174, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 163,
	163, 195, 195, 169, 169, 169, 169, 169, 169, 169,
	169, 162, 162, 171, 171, 170, 170, 157, 157, 157,
	157, 157, 158, 159, 159, 159, 159, 156, 156, 193,
	193, 193, 160, 160, 161, 161, 166, 166, 166, 167,
	167, 167, 168, 168, 168, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 201, 201,
	202, 202, 202, 202, 202, 202, 202, 177, 175, 175,
	176, 176, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 107, 107, 104, 104, 105, 105,
	106, 106, 106, 108, 108, 108, 131, 131, 131, 19,
	19, 21, 21, 22, 23, 20, 20, 20, 20, 20,
	203, 24, 25, 25, 26, 26, 26, 30, 30, 30,
	28, 28, 29, 29, 35, 35, 34, 34, 36, 36,
	36, 36, 119, 119, 119, 118, 118, 38, 38, 39,
	39, 40, 40, 41, 41, 41, 53, 53, 89, 89,
	89, 91, 91, 42, 42, 42, 42, 43, 43, 44,
	44, 45, 45, 126, 126, 125, 125, 125, 124, 124,
	47, 47, 47, 49, 48, 48, 48, 48, 50, 50,
	52, 52, 51, 51, 54, 54, 54, 54, 55, 55,
	37, 37, 37, 37, 37, 37, 37, 103, 103, 57,
	57, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 67, 67, 67, 67, 67, 67, 58, 58, 58,
	58, 58, 58, 58, 33, 33, 68, 68, 68, 74,
	69, 69, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 65, 65, 65, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 204, 204, 66, 66, 66, 66, 31, 31, 31,
	31, 31, 129, 129, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 133, 133,
	133, 133, 133, 133, 133, 78, 78, 32, 32, 76,
	76, 77, 79, 79, 75, 75, 75, 60, 60, 60,
	60, 60, 60, 60, 60, 62, 62, 62, 80, 80,
	81, 81, 82, 82, 83, 83, 84, 85, 85, 85,
	86, 86, 86, 86, 87, 87, 87, 59, 59, 59,
	59, 59, 59, 88, 88, 88, 88, 92, 92, 70,
	70, 72, 72, 71, 73, 93, 93, 97, 94, 94,
	98, 98, 98, 98, 96, 96, 96, 121, 121, 121,
	101, 101, 109, 109, 110, 110, 102, 102, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 112, 112,
	112, 113, 113, 116, 116, 117, 117, 122, 122, 123,
	123, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 198, 199, 127,
	128, 128, 128,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 6, 5, 5, 5, 11, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 1, 3, 3, 3,
	3, 2, 3, 1, 1, 1, 1, 2, 2, 3,
	2, 4, 4, 2, 2, 3, 2, 3, 2, 6,
	7, 3, 3, 6, 5, 8, 7, 3, 2, 2,
	2, 2, 2, 2, 4, 1, 2, 0, 4, 3,
	4, 3, 3, 3, 3, 3, 3, 3, 2, 4,
	6, 2, 3, 2, 3, 1, 0, 2, 0, 3,
	3, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 2, 2,
	2, 1, 3, 3, 2, 1, 1, 1, 4, 4,
	4, 5, 2, 2, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 3, 3, 0, 1,
	0, 1, 0, 2, 1, 0, 3, 3, 0, 1,
	2, 5, 8, 4, 1, 2, 1, 3, 2, 3,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 1, 1, 2, 3, 3, 2, 3, 2, 3,
	4, 1, 1, 1, 3, 2, 2, 1, 4, 4,
	7, 7, 13, 1, 1, 2, 2, 8, 12, 0,
	1, 1, 0, 1, 1, 3, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 11, 13, 7, 7,
	7, 12, 7, 7, 7, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 6, 4, 2, 4, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 7, 1, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 6, 8, 8, 6, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 1, 2, 1, 2, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}

var yyChk = [...]int{
	-1000, -196, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	112, 113, 115, 114, 143, 116, 136, 48, 171, 172,
	174, 175, 25, 137, 138, 141, 142, -198, 8, 267,
	52, -197, 299, -82, 15, -26, 5, -24, -203, -24,
	-24, -24, -24, -24, -164, 52, -120, -189, 151, 259,
	118, 133, 119, 134, 70, -102, 121, 123, 119, 119,
	120, 121, 259, 118, 119, -51, -122, 55, -115, 158,
	276, 20, 171, 184, 185, 176, 210, 200, 277, 156,
	197, 201, 246, 298, 64, 174, 255, 127, 162, 139,
	195, 191, 188, 27, 216, 283, 190, 130, 217, 221,
	247, 274, 181, 182, 249, 214, 31, 132, 278, 33,
	147, 250, 219, 213, 208, 212, 180, 207, 37, 223,
	222, 224, 245, 203, 157, 226, 192, 18, 142, 145,
	218, 220, 189, 159, 125, 149, 282, 251, 187, 146,
	160, 141, 254, 155, 175, 248, 183, 257, 36, 231,
	178, 179, 129, 172, 153, 205, 148, 193, 194, 211,
	177, 206, 173, 150, 143, 256, 232, 284, 204, 202,
	198, 199, 154, 121, 151, 152, 238, 239, 240, 241,
	279, 280, 252, 196, 233, 234, 164, 165, 166, 167,
	168, 169, 170, 119, 106, 201, 112, 236, 120, 31,
	149, -131, 119, -104, 152, 238, 239, 240, 241, 55,
	248, 247, 242, -122, 173, -127, -127, -127, -127, -127,
	-2, -86, 17, 16, -5, -3, -198, 6, 20, 21,
	-30, 38, 39, -25, -36, 97, -37, -122, -56, 72,
	-61, 28, 55, -115, 23, -60, -57, -75, -73, -74,
	106, 107, 95, 96, 103, 73, 108, -65, -63, -64,
	-66, 57, 56, 65, 58, 59, 60, 61, 66, 67,
	68, -116, -71, -198, 42, 43, 268, 269, 270, 271,
	275, 272, 75, 32, 258, 266, 265, 264, 262, 263,
	260, 261, 297, 124, 259, 101, 267, -102, -39, -40,
	-41, -42, -53, -74, -198, -51, 11, -46, -51, -94,
	-130, 173, -98, 248, 247, -117, -96, -116, -114, 246,
	201, 245, 55, -115, 117, 286, 71, 22, 24, 229,
	235, 74, 106, 16, 75, 295, 296, 105, 268, 112,
	46, 260, 261, 258, 270, 271, 259, 236, 28, 10,
	25, 137, 21, 99, 114, 78, 79, 140, 23, 138,
	68, 19, 49, 131, 11, 285, 13, 14, 287, 124,
	123, 90, 120, 44, 8, 108, 26, 87, 40, 135,
	42, 88, 17, 262, 263, 30, 275, 144, 101, 47,
	34, 72, 66, 50, 253, 70, 15, 45, 133, 89,
	115, 267, 43, 118, 6, 273, 29, 136, 41, 119,
	237, 77, 122, 67, 5, 134, 9, 48, 51, 264,
	265, 266, 32, 76, 12, 69, -165, -153, 55, 120,
	121, -116, -110, 124, -110, -116, -110, 267, 119, -51,
	-51, -109, 124, 55, -109, -109, -109, -51, 109, -51,
	55, 29, 259, 55, 149, 119, 150, 121, -128, -198,
	-117, -128, -128, -128, 153, 154, -128, -105, 243, 50,
	-128, -199, 54, -87, 19, 30, -37, -122, -83, -84,
	-37, -82, -2, -24, 34, -28, 21, 63, 11, -119,
	71, 70, 87, -118, 22, -116, 57, 109, -37, -58,
	90, 72, 88, 89, 74, 92, 91, 102, 95, 96,
	97, 98, 99, 100, 101, 93, 94, 105, 297, 80,
	81, 82, 83, 84, 85, 86, -103, -198, -74, -198,
	110, 111, -61, -61, -61, -61, -61, -61, -61, -198,
	-2, -69, -37, -198, -198, -198, -198, -198, -198, -198,
	-198, -198, -78, -37, -198, -204, -198, -204, -204, -204,
	-204, -204, -204, -204, -133, 106, 201, 139, 195, -136,
	-135, 205, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 200, 277, -198, -198, -198, -198, -52, 26,
	-51, 29, 53, -47, -49, -48, -50, 40, 44, 46,
	41, 42, 43, 47, -126, 22, -39, -198, -125, 145,
	-124, 22, -122, 57, -51, -46, -200, 53, 11, 51,
	53, -94, 173, -95, -99, 249, 251, 80, -121, -116,
	57, 28, 29, 54, 53, -154, -134, -138, -135, -140,
	-139, -141, -136, -137, 197, 201, 198, 106, 202, 205,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
	204, 216, 29, 139, 193, 194, 195, 196, 217, 218,
	219, 220, 221, 222, 223, 224, 187, 188, 190, 191,
	192, -116, -51, -182, 51, 55, 72, 55, 50, -51,
	-51, 253, -128, 122, -51, 23, 50, -51, 55, 55,
	-123, -122, -114, -128, -128, -128, -128, -128, -128, -128,
	-128, -128, -128, -107, 237, 244, -51, 9, 90, 53,
	18, 109, 53, -85, 24, 25, -86, -199, -30, -62,
	-116, 58, 61, -29, 41, -51, -37, -37, -67, 66,
	72, 67, 68, -118, 97, -123, -117, -114, -61, -68,
	-71, -74, 62, 90, 88, 89, 74, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -129, 55, 57, -133, 55, -60, -60, -116,
	-35, 21, -34, -36, -199, 53, -199, -2, -34, -34,
	-37, -37, -75, -116, -122, -75, -34, -28, -76, -77,
	76, -75, -199, 199, -34, -35, -34, -34, -90, 145,
	-51, -93, -97, -75, -40, -41, -41, -40, -41, 40,
	40, 40, 45, 40, 45, 40, -48, -122, -199, -54,
	48, 123, 49, -198, -124, -90, 51, -39, -51, -98,
	-95, 53, 250, 252, 253, 50, 69, -37, -145, 106,
	105, -166, -167, -168, -117, 57, 58, -153, -155, -157,
	-156, -169, -158, 127, 125, 129, 130, 134, -162, 120,
	135, 66, 72, -194, 127, 50, 229, 235, 125, 135,
	134, 298, 64, 128, 285, 287, 28, -148, 300, 225,
	-146, 232, -142, 52, -142, -142, 199, -142, -142, -142,
	-144, 201, -144, -144, -144, -144, 52, 52, -142, -142,
	-142, -150, 52, 189, -150, -150, -151, 52, -151, 50,
	51, 22, -180, 279, -181, 55, -128, 23, -128, -51,
	-111, 117, 114, 115, -177, 113, 229, 201, 64, 28,
	15, 268, 145, 284, 55, 146, -51, -51, -51, -128,
	-106, 11, 90, 36, -37, -37, -123, -84, -87, -101,
	19, 11, 32, 32, -34, 66, 67, 68, 109, -198,
	-68, -61, -61, -61, -33, 140, 71, -199, -199, -34,
	53, -37, -199, -199, -199, 53, 51, 22, 53, 11,
	109, 53, 11, -199, -34, -79, -77, 78, -37, -199,
	-199, -199, -199, -199, -59, 29, 32, -2, -198, -198,
	-55, 53, 12, 80, -44, -43, 50, 51, -45, 50,
	-43, 40, 40, 120, 120, 120, -91, -116, -55, -39,
	-55, -99, -100, 254, 251, 257, 55, 53, -168, 80,
	52, 50, -160, -116, 135, -162, -162, 55, -162, 55,
	55, 66, -116, 9, 135, 135, -198, 57, -122, -191,
	286, 16, 52, 57, 58, 59, 66, -143, 65, -57,
	226, 258, 261, 260, 301, -147, 233, 58, -144, -144,
	-142, -144, -145, 29, -145, -145, -145, -145, -152, 57,
	-152, -149, 279, 280, -149, 58, -150, 58, -51, -116,
	-2, -179, -178, -117, -184, 22, -127, -120, -202, 151,
	126, 131, 130, 55, 125, 129, 145, -183, 151, 126,
	127, 131, 130, 55, 120, 135, 125, 129, 145, 134,
	-112, -113, 122, 22, 120, 135, 145, 117, -128, -108,
	88, 12, -122, -122, 37, 109, -51, -38, 11, 97,
	-117, -35, -33, 71, -61, -61, -199, -36, -132, 106,
	197, 139, 195, 191, 214, 215, 203, 231, 193, 232,
	-129, -132, -61, -61, -117, -61, -61, 276, -82, 79,
	-37, 77, -92, 50, -93, -70, -72, -71, -198, -2,
	-88, -116, -91, -82, -97, -37, -37, -37, 52, -37,
	-198, -198, -198, -199, 53, -82, -55, 251, 255, 256,
	-167, -168, -171, -170, -116, 135, 10, 9, 131, 125,
	55, 55, 55, -193, 134, 295, 296, -194, 298, -143,
	-37, 52, 22, 28, 58, -186, 297, -198, -142, 52,
	-142, 52, 54, -145, -145, -144, -145, 55, 106, 54,
	53, 54, 193, 193, 53, 54, 53, 52, 51, 50,
	53, 80, -185, 19, 159, 160, -201, 120, 135, -127,
	-116, -127, -116, -51, -127, -116, 127, -157, 57, -37,
	-55, -39, -199, -61, -199, -142, -142, -142, -151, -142,
	182, -142, 182, -199, -199, -199, 53, 19, -199, 53,
	19, -198, -32, 273, -37, 27, -92, 53, -199, -199,
	-199, 53, 109, -199, -86, -89, -116, 135, -89, -89,
	-89, -125, -116, -86, 54, 53, -142, -142, -159, 155,
	156, 29, 157, -159, 135, 135, -193, -198, -199, -89,
	287, 53, 201, 194, 227, 205, -199, 54, 54, -145,
	-144, 57, -144, 234, 234, 58, 58, -171, -116, -51,
	-178, -168, 122, 20, 6, 8, 9, 10, -116, 52,
	26, -116, -80, 13, -144, 55, -61, -61, -61, -61,
	-61, -199, 57, 135, -72, 32, -2, -198, -116, -116,
	53, 54, -199, -199, -199, -54, -173, 279, -172, 51,
	132, 64, 164, 165, 166, 167, 168, 169, 170, -170,
	50, 66, 158, 50, -160, -116, -193, -37, -190, 157,
	54, 52, 58, 199, -149, -145, -145, 54, 54, 54,
	52, 52, -161, -116, 52, -89, -198, 125, -81, 14,
	16, -199, -199, -199, -199, -31, 90, 279, 9, -70,
	-2, 109, -116, -172, 279, 52, 281, 55, -163, 80,
	57, 80, 80, 80, 80, 80, 80, 80, 9, 10,
	52, 52, -199, 274, -192, 54, -55, -171, -171, -187,
	53, 51, -171, 54, -175, -176, 145, 135, -37, -69,
	-199, 277, 47, 282, -93, -199, -116, -174, -172, -116,
	58, -195, 50, 69, 58, -195, -195, -195, -195, -195,
	-159, -159, -161, -171, 54, 172, 289, 290, 144, 291,
	157, 292, 293, 54, 54, -188, 279, -116, -37, 54,
	-182, -199, 53, -116, 52, 37, 278, 283, 54, 53,
	54, 54, 279, 58, 16, 58, 58, 58, 58, 290,
	144, 292, 16, -55, 298, -180, -176, 32, -171, 37,
	-172, 128, 279, 58, 58, 294, -122, -37, 147, 54,
	279, -51, 52, 109, 148, 282, 52, -174, -117, -198,
	283, -161, 54, -61, 144, 54, -199, -199,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 642, 0, 400, 400, 400, 400, 400, 400, 0,
	-2, 696, 0, 0, 0, 0, -2, 390, 391, 0,
	393, 394, 949, 949, 949, 949, 949, 0, 33, 34,
	947, 1, 3, 650, 0, 0, 404, 407, 402, 0,
	696, 0, 0, 0, 60, 0, 0, 0, 0, 694,
	694, 0, 694, 83, 0, 0, 0, 697, 0, 692,
	0, 692, 692, 692, 0, 349, 472, 717, 718, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 0, 0, 0, 0, 950, 950, 950,
	950, 0, 950, 378, 367, 369, 370, 371, 372, 950,
	387, 388, 377, 389, 392, 395, 396, 397, 398, 399,
	27, 654, 0, 0, 642, 29, 0, 400, 405, 406,
	410, 408, 409, 401, 0, 418, 422, 0, 480, 0,
	485, 487, -2, -2, 0, 522, 523, 524, 525, 526,
	0, 0, 0, 0, 0, 0, 0, 550, 551, 552,
	553, 627, 628, 629, 630, 631, 632, 633, 634, 489,
	490, 624, 674, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 615, 0, 581, 581, 581, 581, 581, 581,
	581, 581, 0, 0, 0, 0, 0, 0, 0, 429,
	431, 432, 433, 453, 0, 455, 0, 0, 41, 45,
	0, 916, 678, -2, -2, 0, 0, 715, 716, -2,
	835, -2, 713, 714, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 0, 96, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 93, 0, 950,
	0, 0, 0, 0, 0, 0, 0, 348, 0, 350,
	950, 950, 950, 950, 950, 950, 950, 950, 359, 951,
	952, 360, 361, 362, 950, 950, 364, 0, 379, 0,
	373, 28, 948, 22, 0, 0, 651, 0, 643, 644,
	647, 650, 27, 407, 0, 412, 411, 403, 0, 419,
	0, 0, 0, 423, 0, 425, 426, 0, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 507,
	508, 509, 510, 511, 512, 513, 486, 0, 500, 0,
	0, 0, 542, 543, 544, 545, 546, 547, 0, 414,
	27, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 410, 0, 616, 0, 572, 0, 573, 574, 575,
	576, 577, 578, 579, 580, 608, 0, 610, 611, 612,
	613, 614, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 186, 187, 0, 414, 0, 0, 43, 0,
	471, 0, 0, 0, 0, 0, 0, 460, 0, 0,
	463, 0, 0, 0, 0, 454, 0, 0, 474, 883,
	456, 0, 458, 459, -2, 0, 0, 0, 39, 40,
	0, 46, 916, 48, 49, 0, 0, 0, 238, 687,
	688, 689, 685, 296, 0, 101, 232, 228, 103, 104,
	105, 106, 218, 164, 218, 218, 218, 218, 218, 235,
	235, 235, 235, 235, 199, 200, 201, 202, 203, 204,
	205, 0, 0, 181, 218, 218, 218, 185, 208, 209,
	210, 211, 212, 213, 214, 215, 220, 220, 220, 222,
	222, 0, 0, 87, 0, 950, 0, 950, 0, 94,
	0, 0, 315, 0, 343, 693, 0, 950, 346, 347,
	473, 719, 720, 351, 352, 353, 354, 355, 356, 357,
	358, 363, 366, 380, 374, 375, 368, 655, 0, 0,
	0, 0, 0, 646, 648, 649, 654, 30, 410, 0,
	635, 0, 0, 0, 413, 25, 481, 482, 484, 501,
	0, 503, 505, 424, 420, 0, 625, -2, 491, 492,
	516, 517, 518, 0, 0, 0, 0, 514, 496, 0,
	527, 528, 529, 530, 531, 532, 533, 534, 535, 536,
	537, 538, 541, 592, 593, 549, 0, 539, 540, 548,
	0, 0, 415, 416, 519, 0, 673, 27, 0, 0,
	0, 0, 0, 624, 0, 0, 0, 0, 622, 619,
	0, 0, 582, 609, 0, 0, 0, 0, 0, 0,
	470, 478, 675, 0, 430, 449, 451, 0, 446, 461,
	462, 464, 0, 466, 0, 468, 469, 434, 435, 436,
	0, 0, 0, 0, 457, 478, 0, 478, 42, 679,
	47, 0, 0, 52, 53, 680, 681, 682, 683, 239,
	0, 95, 297, 299, 302, 303, 304, 97, 98, 99,
	100, 0, 277, 292, 0, 0, 0, 0, 0, 271,
	272, 108, 0, 110, 0, 0, 113, 114, 0, 116,
	118, 0, 0, 0, 0, 0, 0, 107, 0, 234,
	230, 229, 163, 0, 235, 235, 218, 235, 192, 193,
	238, 0, 238, 238, 238, 238, 0, 0, 225, 225,
	184, 175, 0, 220, 177, 178, 179, 0, 180, 0,
	0, 0, 65, 0, 85, 86, 66, 695, 67, 69,
	949, 82, 0, 708, 316, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 0, 0, 342, 950, 345,
	383, 0, 0, 0, 652, 653, 0, 645, 23, 0,
	690, 691, 636, 637, 427, 502, 504, 506, 0, 414,
	493, 514, 497, 0, 494, 0, 0, 488, 554, 0,
	0, 521, -2, 557, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 642, 0, 620, 0, 0, 571,
	583, 584, 585, 586, 667, 0, 0, -2, 0, 0,
	642, 0, 0, 0, 443, 450, 0, 0, 444, 0,
	445, 465, 467, 0, 0, 0, 0, 441, 642, 478,
	38, 50, 51, 0, 0, 57, 240, 0, 300, 0,
	0, 0, 0, 293, 263, 0, 0, 266, 0, 268,
	289, 109, 0, 0, 115, 117, 0, 121, 122, 0,
	135, 0, 0, 158, 128, 129, 130, 131, 132, 133,
	0, 218, 218, 155, 233, 102, 231, 0, 238, 238,
	235, 238, 194, 0, 195, 196, 197, 198, 0, 216,
	0, 182, 0, 0, 183, 0, 176, 0, 0, 0,
	-2, 88, 89, 0, 72, 0, 305, 0, 949, 0,
	330, 331, 332, 333, 334, 335, 336, 949, 0, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 949, 709, 710, 711, 712, 0, 0, 344, 365,
	0, 0, 381, 382, 656, 0, 24, 478, 0, 421,
	626, 0, 495, 0, 515, 498, 555, 417, 0, 218,
	218, 597, 218, 222, 600, 601, 218, 603, 218, 606,
	0, 0, 0, 0, 625, 0, 0, 0, 617, 570,
	623, 0, 31, 0, 667, 657, 669, 671, 0, 27,
	0, 663, 0, 650, 676, 479, 677, 447, 0, 452,
	0, 0, 0, 455, 0, 650, 37, 54, 55, 56,
	298, 301, 0, 273, 218, 218, 0, 0, 0, 0,
	264, 265, 267, 269, 289, 290, 291, 111, 0, 112,
	0, 0, 0, 136, 0, 127, 0, 0, 151, 0,
	153, 0, 219, 188, 189, 238, 190, 236, 237, 235,
	0, 235, 0, 0, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 70, 71, 0, 328, 329, 309,
	0, 310, 312, 313, 314, 0, 292, 308, 384, 385,
	638, 428, 556, 499, 559, 594, 235, 598, 599, 602,
	604, 605, 607, 561, 560, 562, 0, 0, 565, 0,
	0, 0, 0, 0, 621, 0, 32, 0, 672, -2,
	0, 0, 0, 44, 35, 0, 438, 439, 0, 0,
	0, 474, 442, 36, 243, 0, 275, 276, 278, 283,
	284, 0, 0, 279, 292, 289, 270, 0, 156, 0,
	124, 0, 0, 225, 161, 162, 134, 152, 154, 191,
	238, 217, 238, 226, 227, 0, 0, 0, 0, 0,
	90, 91, 0, 73, 74, 75, 76, 77, 0, 0,
	0, 293, 640, 0, 595, 596, 0, 0, 0, 0,
	587, 569, 618, 0, 670, 0, -2, 0, 665, 664,
	0, 448, 475, 476, 477, 437, 241, 0, 244, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 285, 286, 0, 0, 293, 0, 0, 119, 0,
	123, 137, 0, 159, 160, 206, 207, 221, 224, 478,
	0, 0, 78, 294, 0, 0, 0, 0, 26, 0,
	0, 563, 564, 566, 567, 0, 0, 0, 0, 660,
	27, 0, 440, 245, 0, 0, 0, 248, 0, 260,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 157, 0, 126, 61, 0, 0, 80,
	0, 0, 0, 84, 0, 338, 0, 0, 641, 639,
	568, 0, 0, 0, 668, -2, 666, 0, 246, 251,
	249, 252, 261, 262, 253, 254, 255, 256, 257, 258,
	280, 281, 0, 0, 125, 0, 0, 0, 0, 0,
	0, 148, 0, 478, 62, 68, 0, 295, 79, 306,
	87, 337, 0, 0, 0, 588, 0, 591, 242, 0,
	0, 287, 0, 139, 0, 141, 142, 143, 144, 145,
	146, 147, 0, 63, 0, 311, 339, 0, 0, 589,
	247, 0, 0, 138, 140, 149, 0, 81, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 0,
	590, 0, 288, 0, 0, 282, 340, 341,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	52, 54, 97, 95, 53, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 299,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 300, 3, 301, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:336
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:341
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:342
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:346
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:369
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:377
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:381
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:387
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:394
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:400
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:404
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:410
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:414
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:421
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:433
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:445
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:449
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:455
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:461
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:465
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:469
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:474
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:475
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:479
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:483
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:488
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:492
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:498
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:502
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:506
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:510
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:516
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:520
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:526
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:530
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:534
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:540
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:544
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:548
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:552
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:558
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:562
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:568
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:573
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:589
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:604
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:619
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:627
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:635
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:639
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:643
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:655
		{
			yyVAL.bytes = nil
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:659
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:663
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:668
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:672
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:676
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:680
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:684
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:688
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:693
		{
			yyVAL.expr = nil
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:697
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:702
		{
			yyVAL.expr = nil
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:706
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:711
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:715
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:720
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:724
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:730
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:735
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:740
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:746
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:751
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:757
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:762
		{
			yyVAL.bytes = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:766
		{
			yyVAL.bytes = nil
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:772
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:779
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:786
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:791
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:795
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:799
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:803
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:809
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:814
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:825
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:837
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:842
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:847
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:852
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:857
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:862
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:867
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:872
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:877
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:882
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:887
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:892
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[4].expr)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[6].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:898
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[6].expr), ConstraintName: yyDollar[3].colIdent}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:903
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:908
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:913
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:919
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:925
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:931
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:938
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:942
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:946
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:950
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:954
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:958
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:962
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[2].boolVal))
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:966
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:972
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:976
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:981
		{
			yyVAL.sequence = &Sequence{}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:985
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:990
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:995
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1000
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1005
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1010
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1015
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1020
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1025
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1030
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1035
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1040
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1045
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1052
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1056
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1060
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1064
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1068
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1073
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1077
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1082
		{
			yyVAL.bytes = nil
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1092
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1097
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1103
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1107
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1111
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1115
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1119
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1123
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1131
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1135
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1139
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1145
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1151
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1157
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1163
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1169
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1175
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1183
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1187
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1191
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1195
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1199
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1205
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1209
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1215
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1219
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1223
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 191:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1227
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1231
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1235
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1239
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1243
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1247
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1251
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1255
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1259
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1263
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1267
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1271
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1275
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1283
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1287
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1292
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1298
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1302
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1306
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1310
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1314
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1318
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1322
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1326
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1332
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1337
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1342
		{
			yyVAL.optVal = nil
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1346
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1351
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1355
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1363
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1367
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1373
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1381
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1385
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1389
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1394
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1398
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1403
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1407
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1412
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1416
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1420
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1425
		{
			yyVAL.str = ""
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1429
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1433
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1438
		{
			yyVAL.str = ""
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1442
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1446
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1452
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 242:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1456
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[7].indexOptions}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1460
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1466
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1470
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1476
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1480
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1486
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1490
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1495
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1499
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1503
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1507
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1511
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1515
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1519
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1523
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1527
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1533
		{
			yyVAL.str = ""
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1537
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1543
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1547
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1553
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1557
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1561
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1565
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1569
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1573
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1577
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1581
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1587
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1591
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1597
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1601
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1607
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1612
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1619
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1625
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1631
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1637
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 282:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1645
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1657
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1661
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1665
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1669
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 287:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1675
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:    &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns: yyDollar[7].indexColumns,
			}
		}
	case 288:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:1682
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:    &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns: yyDollar[7].indexColumns, Options: yyDollar[11].indexOptions,
			}
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1691
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1695
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1699
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1704
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1711
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1715
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1720
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1724
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1728
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1736
		{
			yyVAL.str = yyDollar[1].str
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1740
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1744
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1750
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1754
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1758
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1764
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 306:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:1768
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 307:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1782
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 308:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1796
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 309:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1805
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1809
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 311:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:1813
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 312:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1826
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 313:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1836
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1841
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1846
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 316:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1850
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1882
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1888
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1892
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 340:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1898
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 341:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1902
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1908
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1914
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 344:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1922
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 345:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1927
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1935
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1939
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1945
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1949
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1954
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1960
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1964
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1968
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1973
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1977
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1981
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1985
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1989
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1993
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1997
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2001
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2005
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2009
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2013
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2017
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2027
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2031
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2035
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2039
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2043
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2047
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2051
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2061
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2067
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2071
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2077
		{
			yyVAL.str = ""
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2081
		{
			yyVAL.str = "extended "
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2087
		{
			yyVAL.str = ""
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2091
		{
			yyVAL.str = "full "
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2097
		{
			yyVAL.str = ""
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2101
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2105
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2111
		{
			yyVAL.showFilter = nil
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2115
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2119
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2125
		{
			yyVAL.str = ""
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2129
		{
			yyVAL.str = SessionStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2133
		{
			yyVAL.str = GlobalStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2139
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2143
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2149
		{
			yyVAL.statement = &Begin{}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2153
		{
			yyVAL.statement = &Begin{}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2159
		{
			yyVAL.statement = &Commit{}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2165
		{
			yyVAL.statement = &Rollback{}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2171
		{
			yyVAL.statement = &OtherRead{}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2175
		{
			yyVAL.statement = &OtherRead{}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2179
		{
			yyVAL.statement = &OtherRead{}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2183
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2187
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2192
		{
			setAllowComments(yylex, true)
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2196
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2202
		{
			yyVAL.bytes2 = nil
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2206
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2212
		{
			yyVAL.str = UnionStr
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2216
		{
			yyVAL.str = UnionAllStr
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2220
		{
			yyVAL.str = UnionDistinctStr
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2225
		{
			yyVAL.str = ""
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2229
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2233
		{
			yyVAL.str = SQLCacheStr
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2238
		{
			yyVAL.str = ""
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2242
		{
			yyVAL.str = DistinctStr
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2247
		{
			yyVAL.str = ""
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2251
		{
			yyVAL.str = StraightJoinHint
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2256
		{
			yyVAL.selectExprs = nil
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2260
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2266
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2270
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2276
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2280
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2284
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2288
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2293
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2297
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2301
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2308
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2313
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2317
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2323
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2327
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2337
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2341
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2345
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2351
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 437:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2355
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2361
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2366
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2370
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2376
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2380
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2393
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2397
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2401
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2405
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2411
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2413
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2417
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2419
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2423
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2425
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2428
		{
			yyVAL.empty = struct{}{}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2430
		{
			yyVAL.empty = struct{}{}
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2433
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2437
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2441
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2448
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2454
		{
			yyVAL.str = JoinStr
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2458
		{
			yyVAL.str = JoinStr
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2462
		{
			yyVAL.str = JoinStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2468
		{
			yyVAL.str = StraightJoinStr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2474
		{
			yyVAL.str = LeftJoinStr
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2478
		{
			yyVAL.str = LeftJoinStr
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2482
		{
			yyVAL.str = RightJoinStr
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2486
		{
			yyVAL.str = RightJoinStr
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2492
		{
			yyVAL.str = NaturalJoinStr
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2496
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2506
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2510
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2516
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2520
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2525
		{
			yyVAL.indexHints = nil
		}
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2529
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2533
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 477:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2537
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2542
		{
			yyVAL.expr = nil
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2546
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2552
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2556
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2560
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2564
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2568
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2572
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2576
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2582
		{
			yyVAL.str = ""
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2586
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2592
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2596
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2602
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2606
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2610
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2614
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 495:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2618
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2622
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2626
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 498:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2630
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 499:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2634
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2638
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2644
		{
			yyVAL.str = IsNullStr
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2648
		{
			yyVAL.str = IsNotNullStr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2652
		{
			yyVAL.str = IsTrueStr
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2656
		{
			yyVAL.str = IsNotTrueStr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2660
		{
			yyVAL.str = IsFalseStr
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2664
		{
			yyVAL.str = IsNotFalseStr
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2670
		{
			yyVAL.str = EqualStr
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2674
		{
			yyVAL.str = LessThanStr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2678
		{
			yyVAL.str = GreaterThanStr
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2682
		{
			yyVAL.str = LessEqualStr
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2686
		{
			yyVAL.str = GreaterEqualStr
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2690
		{
			yyVAL.str = NotEqualStr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2694
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2699
		{
			yyVAL.expr = nil
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2703
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2709
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2713
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2717
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2723
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2729
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2733
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2739
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2743
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2747
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2751
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2755
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2759
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2763
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2767
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2771
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2775
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2779
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2783
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2787
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2791
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2795
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2799
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2803
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2807
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2811
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2815
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2819
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2823
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2827
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2835
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2849
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2853
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2857
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2865
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2879
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2883
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 556:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2887
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2897
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2901
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 559:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2905
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 560:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2909
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 561:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2913
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 562:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2917
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 563:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2921
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 564:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2925
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 565:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2929
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 566:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2933
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 567:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2937
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 568:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:2941
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 569:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2945
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2949
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2953
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2963
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2967
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2971
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2975
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2980
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2985
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2990
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2995
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2999
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3013
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3017
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3021
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3025
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3031
		{
			yyVAL.str = ""
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3035
		{
			yyVAL.str = BooleanModeStr
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3039
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 590:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3043
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3047
		{
			yyVAL.str = QueryExpansionStr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3053
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3057
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3063
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3067
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3071
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3075
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3079
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3083
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3089
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3093
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3097
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3101
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3105
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3109
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3113
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3117
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3123
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3127
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3131
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3135
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3139
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3143
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3147
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3152
		{
			yyVAL.expr = nil
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3156
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3161
		{
			yyVAL.str = string("")
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3165
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3171
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3175
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3181
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3186
		{
			yyVAL.expr = nil
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3190
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3196
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3200
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 626:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3204
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3210
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3214
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3218
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3222
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3226
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3230
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3234
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3238
		{
			yyVAL.expr = &NullVal{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3244
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3253
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3257
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3262
		{
			yyVAL.exprs = nil
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3266
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3271
		{
			yyVAL.expr = nil
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3275
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3280
		{
			yyVAL.orderBy = nil
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3284
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3290
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3294
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3300
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3305
		{
			yyVAL.str = AscScr
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3309
		{
			yyVAL.str = AscScr
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3313
		{
			yyVAL.str = DescScr
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3318
		{
			yyVAL.limit = nil
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3322
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3326
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3330
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3335
		{
			yyVAL.str = ""
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3339
		{
			yyVAL.str = ForUpdateStr
		}
	case 656:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3343
		{
			yyVAL.str = ShareModeStr
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3356
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3360
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3364
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 660:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3369
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3373
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 662:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3377
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3384
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3388
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3392
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 666:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3396
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3401
		{
			yyVAL.updateExprs = nil
		}
	case 668:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3405
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3411
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3415
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3421
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3425
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3431
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3437
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3447
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3451
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3457
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3463
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3467
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3473
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3477
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3481
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3485
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3492
		{
			yyVAL.bytes = []byte("charset")
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3499
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3503
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3507
		{
			yyVAL.expr = &Default{}
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3516
		{
			yyVAL.byt = 0
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3518
		{
			yyVAL.byt = 1
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3521
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3523
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3526
		{
			yyVAL.str = ""
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3528
		{
			yyVAL.str = IgnoreStr
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3532
		{
			yyVAL.empty = struct{}{}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3534
		{
			yyVAL.empty = struct{}{}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3536
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3538
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3540
		{
			yyVAL.empty = struct{}{}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3542
		{
			yyVAL.empty = struct{}{}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3544
		{
			yyVAL.empty = struct{}{}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3546
		{
			yyVAL.empty = struct{}{}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3548
		{
			yyVAL.empty = struct{}{}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3550
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3553
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3555
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3557
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3561
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3563
		{
			yyVAL.empty = struct{}{}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3567
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3571
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3578
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3584
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3588
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3595
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3847
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3856
		{
			decNesting(yylex)
		}
	case 949:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3861
		{
			forceEOF(yylex)
		}
	case 950:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3866
		{
			forceEOF(yylex)
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3870
		{
			forceEOF(yylex)
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3874
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
