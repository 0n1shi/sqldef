// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const UNIQUE = 57457
const KEY = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const RESTRICT = 57478
const CASCADE = 57479
const NO = 57480
const ACTION = 57481
const BEGIN = 57482
const START = 57483
const TRANSACTION = 57484
const COMMIT = 57485
const ROLLBACK = 57486
const BIT = 57487
const TINYINT = 57488
const SMALLINT = 57489
const SMALLSERIAL = 57490
const MEDIUMINT = 57491
const INT = 57492
const INTEGER = 57493
const SERIAL = 57494
const BIGINT = 57495
const BIGSERIAL = 57496
const INTNUM = 57497
const REAL = 57498
const DOUBLE = 57499
const FLOAT_TYPE = 57500
const DECIMAL = 57501
const NUMERIC = 57502
const TIME = 57503
const TIMESTAMP = 57504
const DATETIME = 57505
const YEAR = 57506
const CHAR = 57507
const VARCHAR = 57508
const VARYING = 57509
const BOOL = 57510
const CHARACTER = 57511
const VARBINARY = 57512
const NCHAR = 57513
const UUID = 57514
const TEXT = 57515
const TINYTEXT = 57516
const MEDIUMTEXT = 57517
const LONGTEXT = 57518
const BLOB = 57519
const TINYBLOB = 57520
const MEDIUMBLOB = 57521
const LONGBLOB = 57522
const JSON = 57523
const ENUM = 57524
const GEOMETRY = 57525
const POINT = 57526
const LINESTRING = 57527
const POLYGON = 57528
const GEOMETRYCOLLECTION = 57529
const MULTIPOINT = 57530
const MULTILINESTRING = 57531
const MULTIPOLYGON = 57532
const NULLX = 57533
const AUTO_INCREMENT = 57534
const APPROXNUM = 57535
const SIGNED = 57536
const UNSIGNED = 57537
const ZEROFILL = 57538
const ZONE = 57539
const DATABASES = 57540
const TABLES = 57541
const VITESS_KEYSPACES = 57542
const VITESS_SHARDS = 57543
const VITESS_TABLETS = 57544
const VSCHEMA_TABLES = 57545
const EXTENDED = 57546
const FULL = 57547
const PROCESSLIST = 57548
const NAMES = 57549
const CHARSET = 57550
const GLOBAL = 57551
const SESSION = 57552
const ISOLATION = 57553
const LEVEL = 57554
const READ = 57555
const WRITE = 57556
const ONLY = 57557
const REPEATABLE = 57558
const COMMITTED = 57559
const UNCOMMITTED = 57560
const SERIALIZABLE = 57561
const CURRENT_TIMESTAMP = 57562
const DATABASE = 57563
const CURRENT_DATE = 57564
const CURRENT_TIME = 57565
const LOCALTIME = 57566
const LOCALTIMESTAMP = 57567
const UTC_DATE = 57568
const UTC_TIME = 57569
const UTC_TIMESTAMP = 57570
const REPLACE = 57571
const CONVERT = 57572
const CAST = 57573
const SUBSTR = 57574
const SUBSTRING = 57575
const GROUP_CONCAT = 57576
const SEPARATOR = 57577
const MATCH = 57578
const AGAINST = 57579
const BOOLEAN = 57580
const LANGUAGE = 57581
const WITH = 57582
const PARSER = 57583
const QUERY = 57584
const EXPANSION = 57585
const UNUSED = 57586

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	151, 303,
	152, 303,
	-2, 293,
	-1, 245,
	108, 622,
	-2, 618,
	-1, 246,
	108, 623,
	-2, 619,
	-1, 315,
	79, 788,
	-2, 58,
	-1, 316,
	79, 748,
	-2, 59,
	-1, 321,
	79, 732,
	-2, 589,
	-1, 323,
	79, 769,
	-2, 591,
	-1, 586,
	51, 41,
	53, 41,
	-2, 43,
	-1, 729,
	108, 625,
	-2, 621,
	-1, 946,
	5, 28,
	-2, 435,
	-1, 971,
	5, 27,
	-2, 564,
	-1, 1228,
	5, 28,
	-2, 565,
	-1, 1282,
	5, 27,
	-2, 567,
	-1, 1354,
	5, 28,
	-2, 568,
}

const yyPrivate = 57344

const yyLast = 11094

var yyAct = [...]int{

	246, 1360, 887, 1344, 666, 1245, 1293, 791, 250, 1129,
	1013, 1157, 533, 809, 1130, 275, 1234, 580, 1049, 224,
	881, 1126, 830, 974, 754, 831, 837, 990, 938, 1103,
	792, 66, 979, 867, 1038, 87, 844, 307, 87, 780,
	731, 472, 595, 453, 53, 466, 877, 218, 314, 920,
	596, 764, 788, 320, 761, 421, 478, 486, 578, 248,
	532, 3, 87, 87, 325, 233, 470, 582, 87, 567,
	325, 311, 84, 309, 52, 1390, 87, 1372, 87, 1387,
	1352, 1335, 904, 1384, 87, 1294, 888, 1042, 1371, 301,
	1351, 219, 220, 221, 222, 903, 547, 1121, 1296, 1222,
	310, 85, 425, 446, 216, 424, 302, 317, 223, 1165,
	597, 237, 598, 432, 1151, 433, 82, 78, 79, 80,
	300, 440, 908, 827, 998, 68, 240, 997, 85, 85,
	999, 902, 1152, 1153, 85, 823, 824, 1016, 1017, 1018,
	822, 696, 85, 461, 85, 1021, 1019, 1256, 697, 1027,
	85, 858, 1323, 499, 498, 508, 509, 501, 502, 503,
	504, 505, 506, 507, 500, 1295, 448, 510, 450, 868,
	252, 1271, 1176, 71, 72, 1211, 67, 1209, 860, 899,
	896, 897, 217, 895, 1301, 1345, 1386, 1068, 73, 57,
	457, 458, 1382, 1081, 789, 447, 449, 87, 1248, 1346,
	850, 325, 325, 325, 325, 69, 325, 1186, 1279, 1011,
	906, 909, 1251, 325, 59, 60, 61, 62, 63, 1009,
	1024, 1187, 851, 1023, 1006, 23, 24, 48, 26, 27,
	1078, 846, 305, 1164, 442, 1380, 856, 81, 848, 1195,
	325, 1314, 435, 849, 42, 847, 428, 763, 28, 76,
	75, 1069, 76, 901, 675, 665, 1071, 1064, 1065, 989,
	1072, 1067, 1066, 85, 1074, 1070, 988, 37, 810, 812,
	987, 50, 474, 846, 423, 1073, 900, 431, 196, 77,
	828, 1063, 1082, 846, 522, 523, 445, 847, 1328, 1231,
	475, 1297, 1090, 954, 70, 932, 853, 847, 1350, 703,
	87, 490, 868, 441, 855, 854, 510, 87, 87, 87,
	863, 239, 1171, 325, 905, 500, 700, 1020, 510, 325,
	1324, 1086, 1246, 1247, 1249, 1058, 485, 1079, 907, 1077,
	30, 31, 33, 32, 35, 738, 915, 562, 1333, 1184,
	977, 1080, 811, 599, 1123, 669, 586, 484, 483, 736,
	737, 735, 483, 36, 43, 44, 317, 1300, 45, 46,
	34, 243, 1172, 781, 485, 961, 85, 781, 485, 929,
	930, 931, 1015, 85, 584, 85, 38, 39, 480, 40,
	41, 852, 587, 1334, 593, 549, 550, 551, 552, 553,
	554, 555, 1356, 422, 1059, 1055, 1085, 1258, 1060, 1057,
	1056, 1257, 73, 508, 509, 501, 502, 503, 504, 505,
	506, 507, 500, 1061, 916, 510, 50, 1044, 520, 1054,
	476, 950, 74, 949, 325, 325, 734, 1043, 706, 707,
	427, 87, 87, 325, 755, 87, 756, 1278, 87, 484,
	483, 1028, 87, 1254, 325, 325, 325, 325, 325, 325,
	325, 325, 1197, 1104, 702, 1039, 485, 846, 325, 325,
	1025, 1331, 840, 87, 845, 49, 841, 842, 671, 672,
	843, 847, 676, 484, 483, 679, 21, 305, 325, 484,
	483, 1163, 87, 299, 859, 1106, 1125, 1162, 325, 701,
	485, 682, 434, 1161, 708, 684, 485, 85, 85, 1012,
	698, 85, 429, 430, 85, 484, 483, 1000, 683, 732,
	501, 502, 503, 504, 505, 506, 507, 500, 890, 717,
	510, 274, 485, 951, 1108, 757, 1112, 681, 1107, 85,
	1105, 325, 228, 680, 728, 23, 1110, 469, 473, 670,
	727, 668, 710, 443, 729, 725, 1109, 436, 85, 773,
	776, 721, 723, 724, 491, 782, 722, 683, 969, 1111,
	1113, 970, 87, 1374, 1394, 87, 87, 87, 87, 87,
	484, 483, 793, 437, 438, 439, 422, 87, 1286, 1383,
	87, 50, 758, 759, 87, 319, 465, 485, 534, 87,
	87, 426, 1307, 325, 1374, 1373, 768, 545, 240, 790,
	778, 1367, 465, 240, 240, 1306, 325, 775, 775, 240,
	1286, 1364, 785, 775, 1166, 524, 525, 526, 527, 528,
	529, 530, 976, 240, 240, 240, 240, 818, 85, 975,
	775, 85, 85, 85, 85, 85, 317, 820, 766, 815,
	768, 819, 464, 807, 1226, 806, 85, 817, 50, 832,
	584, 814, 1286, 1363, 794, 85, 85, 797, 869, 870,
	871, 976, 835, 564, 733, 564, 87, 1286, 1362, 325,
	590, 325, 795, 796, 87, 798, 87, 1286, 1342, 87,
	325, 1286, 1308, 883, 1093, 499, 498, 508, 509, 501,
	502, 503, 504, 505, 506, 507, 500, 1286, 465, 510,
	1286, 1287, 975, 886, 1243, 1242, 879, 880, 1148, 465,
	591, 910, 589, 911, 1230, 465, 912, 1179, 1178, 1174,
	1175, 1183, 319, 319, 319, 319, 944, 319, 1174, 1173,
	944, 465, 85, 939, 319, 305, 305, 305, 305, 305,
	85, 54, 85, 564, 465, 85, 921, 728, 766, 465,
	305, 732, 606, 605, 922, 23, 956, 729, 953, 305,
	816, 488, 589, 503, 504, 505, 506, 507, 500, 1127,
	683, 510, 975, 563, 23, 1177, 934, 1001, 821, 944,
	944, 1281, 240, 592, 769, 770, 1181, 1180, 667, 704,
	777, 230, 1388, 1369, 1338, 718, 719, 564, 955, 716,
	952, 50, 1311, 1310, 784, 1309, 786, 787, 1265, 569,
	572, 573, 574, 570, 325, 571, 575, 87, 860, 960,
	50, 1302, 882, 265, 264, 267, 268, 269, 270, 240,
	984, 325, 266, 271, 319, 1142, 1004, 50, 878, 992,
	601, 994, 980, 981, 1299, 240, 325, 534, 873, 971,
	771, 772, 884, 885, 730, 872, 1002, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 995, 65, 832, 993, 1182, 1127, 1007, 1008,
	1010, 1005, 983, 85, 678, 87, 325, 325, 462, 325,
	986, 985, 803, 800, 801, 1029, 1030, 804, 1032, 802,
	805, 799, 573, 574, 234, 235, 733, 1379, 1040, 1370,
	1089, 826, 917, 325, 1377, 479, 87, 87, 927, 926,
	467, 1034, 1045, 479, 87, 604, 1224, 1052, 477, 444,
	1266, 468, 1050, 325, 892, 677, 577, 569, 572, 573,
	574, 570, 1051, 571, 575, 663, 319, 980, 981, 231,
	232, 85, 925, 225, 319, 1317, 226, 54, 1316, 1269,
	924, 1091, 976, 928, 1097, 319, 319, 319, 319, 319,
	319, 319, 319, 325, 325, 1114, 1095, 1128, 793, 319,
	319, 1115, 1087, 1088, 793, 481, 1131, 305, 1096, 1337,
	85, 1033, 1336, 1035, 1036, 1037, 1102, 1325, 1118, 712,
	240, 1136, 325, 1122, 325, 325, 1138, 1022, 729, 488,
	943, 240, 319, 918, 919, 699, 473, 1150, 58, 1137,
	56, 683, 1160, 1159, 1154, 1053, 958, 1185, 588, 1155,
	51, 1, 1062, 1133, 889, 1048, 775, 1149, 898, 1343,
	1292, 1156, 775, 838, 829, 832, 420, 832, 64, 1332,
	839, 836, 760, 607, 1041, 325, 1026, 857, 613, 611,
	612, 609, 774, 774, 325, 1169, 615, 614, 774, 610,
	608, 204, 312, 576, 600, 482, 87, 1076, 945, 1075,
	894, 1084, 325, 695, 914, 774, 460, 206, 518, 923,
	996, 325, 318, 962, 87, 1134, 705, 471, 935, 936,
	937, 1188, 1315, 861, 862, 864, 865, 866, 1268, 1196,
	1190, 959, 544, 1192, 319, 779, 1199, 251, 709, 720,
	263, 874, 875, 876, 1193, 260, 262, 319, 261, 1207,
	711, 968, 492, 249, 1095, 241, 304, 560, 568, 566,
	565, 982, 85, 325, 978, 325, 325, 325, 87, 325,
	1225, 303, 1200, 1167, 1168, 325, 1170, 1233, 1092, 1221,
	85, 1236, 1237, 1238, 1322, 1239, 1250, 715, 25, 1241,
	55, 236, 19, 18, 17, 765, 767, 20, 16, 15,
	1002, 325, 325, 87, 325, 325, 325, 14, 29, 13,
	319, 783, 319, 12, 11, 10, 325, 1259, 832, 9,
	8, 319, 1262, 7, 6, 5, 4, 1253, 227, 1255,
	1263, 22, 2, 0, 584, 0, 0, 0, 0, 0,
	1261, 808, 0, 0, 0, 319, 0, 1050, 832, 0,
	0, 325, 325, 0, 0, 0, 0, 0, 0, 1270,
	0, 1280, 1131, 0, 325, 0, 0, 0, 0, 85,
	0, 0, 325, 1291, 0, 1298, 0, 0, 0, 0,
	0, 0, 1303, 0, 305, 0, 325, 0, 0, 0,
	0, 0, 0, 1124, 0, 0, 276, 47, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 325, 1139, 1140,
	1282, 1326, 1141, 1252, 0, 1143, 0, 1131, 0, 1330,
	0, 1099, 1100, 0, 0, 0, 0, 0, 0, 0,
	325, 325, 325, 0, 1116, 1117, 0, 1119, 1120, 465,
	0, 0, 0, 0, 47, 0, 1339, 1340, 1341, 325,
	1348, 0, 229, 1353, 793, 991, 325, 0, 306, 325,
	0, 0, 1358, 1359, 1327, 0, 325, 1365, 1031, 0,
	0, 0, 319, 0, 0, 499, 498, 508, 509, 501,
	502, 503, 504, 505, 506, 507, 500, 1014, 1375, 510,
	325, 1376, 0, 0, 0, 325, 0, 1304, 0, 1305,
	0, 87, 0, 0, 0, 0, 1378, 0, 0, 325,
	1391, 0, 775, 0, 0, 0, 0, 0, 1198, 0,
	941, 0, 0, 0, 942, 0, 0, 1046, 319, 0,
	319, 946, 947, 948, 0, 0, 0, 0, 1385, 0,
	957, 0, 0, 0, 0, 963, 0, 964, 965, 966,
	967, 0, 0, 0, 319, 0, 0, 1223, 0, 0,
	0, 0, 0, 0, 534, 0, 0, 85, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 0, 0, 0,
	1202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1218, 465, 0, 0, 451, 319, 452, 452, 452,
	452, 0, 452, 0, 0, 0, 0, 0, 0, 452,
	0, 774, 1215, 465, 1135, 991, 0, 774, 0, 0,
	0, 0, 0, 0, 0, 0, 47, 0, 499, 498,
	508, 509, 501, 502, 503, 504, 505, 506, 507, 500,
	0, 519, 510, 319, 521, 319, 1158, 0, 0, 499,
	498, 508, 509, 501, 502, 503, 504, 505, 506, 507,
	500, 0, 1219, 510, 0, 0, 0, 0, 0, 0,
	0, 531, 0, 535, 536, 537, 538, 539, 540, 541,
	542, 543, 0, 546, 548, 548, 548, 548, 548, 548,
	548, 548, 556, 557, 558, 559, 1189, 1272, 1273, 0,
	1274, 1275, 1276, 579, 0, 1191, 1101, 0, 0, 1204,
	1205, 0, 1206, 0, 0, 1208, 0, 1210, 0, 0,
	0, 0, 0, 1194, 0, 0, 0, 0, 0, 0,
	0, 0, 319, 499, 498, 508, 509, 501, 502, 503,
	504, 505, 506, 507, 500, 1098, 0, 510, 1347, 534,
	0, 0, 0, 1147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1244, 0, 499, 498, 508, 509, 501,
	502, 503, 504, 505, 506, 507, 500, 0, 0, 510,
	0, 0, 0, 0, 1235, 0, 1235, 1235, 1235, 0,
	1240, 0, 0, 0, 0, 0, 319, 454, 455, 456,
	0, 459, 0, 0, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 452, 1235, 1260, 0, 319, 319, 1264, 0, 452,
	0, 0, 0, 0, 0, 0, 0, 1267, 0, 0,
	452, 452, 452, 452, 452, 452, 452, 452, 0, 0,
	0, 0, 0, 0, 452, 452, 0, 0, 0, 1201,
	0, 0, 0, 0, 0, 0, 1203, 0, 0, 0,
	0, 1392, 1284, 1285, 0, 0, 0, 1212, 1213, 1214,
	0, 0, 1217, 0, 0, 1158, 0, 0, 0, 0,
	0, 0, 0, 1014, 0, 1227, 1228, 1229, 0, 1232,
	0, 0, 0, 0, 0, 0, 0, 1235, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1329, 0,
	0, 0, 535, 0, 0, 0, 0, 0, 0, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1235, 1235, 1235, 0, 0, 0, 0, 0, 0,
	0, 306, 306, 306, 306, 306, 0, 774, 0, 0,
	1355, 0, 0, 0, 0, 0, 579, 1357, 813, 0,
	1361, 0, 0, 0, 1277, 306, 0, 1368, 0, 197,
	0, 0, 0, 0, 0, 199, 0, 0, 0, 1288,
	1289, 1290, 205, 201, 0, 0, 0, 0, 0, 0,
	0, 1235, 0, 0, 0, 0, 1381, 0, 0, 0,
	664, 0, 0, 0, 0, 0, 0, 0, 674, 0,
	1361, 203, 0, 0, 207, 1318, 1319, 1320, 1321, 685,
	686, 687, 688, 689, 690, 691, 692, 0, 0, 0,
	0, 0, 0, 693, 694, 0, 0, 0, 634, 0,
	0, 0, 0, 0, 0, 452, 0, 452, 0, 0,
	198, 0, 0, 0, 0, 0, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 0, 0, 0, 0,
	1354, 0, 0, 0, 0, 0, 1216, 0, 0, 200,
	0, 208, 209, 210, 211, 215, 1366, 0, 0, 0,
	214, 213, 0, 0, 0, 0, 0, 0, 0, 494,
	0, 497, 0, 0, 0, 933, 0, 511, 512, 513,
	514, 515, 516, 517, 621, 495, 496, 493, 499, 498,
	508, 509, 501, 502, 503, 504, 505, 506, 507, 500,
	0, 0, 510, 0, 0, 1395, 1396, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 635, 499, 498, 508,
	509, 501, 502, 503, 504, 505, 506, 507, 500, 0,
	0, 510, 0, 0, 0, 972, 973, 0, 0, 0,
	0, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 0, 658, 659, 660, 661, 662, 636, 637, 638,
	639, 618, 620, 306, 616, 619, 622, 940, 632, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 633, 640,
	641, 642, 643, 644, 645, 646, 647, 499, 498, 508,
	509, 501, 502, 503, 504, 505, 506, 507, 500, 0,
	0, 510, 498, 508, 509, 501, 502, 503, 504, 505,
	506, 507, 500, 0, 891, 510, 893, 0, 0, 0,
	0, 0, 0, 0, 0, 913, 0, 0, 0, 0,
	0, 0, 0, 452, 617, 499, 498, 508, 509, 501,
	502, 503, 504, 505, 506, 507, 500, 0, 0, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1132, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1144, 1145, 1146, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 121, 0, 124,
	0, 0, 159, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 324, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 499, 498, 508, 509,
	501, 502, 503, 504, 505, 506, 507, 500, 0, 0,
	510, 0, 1047, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 184, 0, 0, 0,
	146, 0, 104, 0, 163, 113, 0, 122, 1083, 0,
	0, 0, 0, 105, 0, 152, 142, 175, 1220, 143,
	151, 125, 167, 147, 174, 185, 186, 165, 183, 154,
	97, 139, 88, 90, 164, 173, 102, 155, 93, 171,
	161, 162, 131, 117, 118, 157, 91, 92, 0, 150,
	108, 112, 107, 140, 168, 169, 106, 193, 98, 181,
	182, 95, 99, 180, 138, 179, 166, 172, 132, 129,
	94, 170, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 0, 0, 160, 177, 194,
	195, 0, 0, 187, 188, 189, 190, 0, 0, 0,
	137, 100, 116, 156, 119, 126, 149, 192, 0, 153,
	103, 176, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1132, 0, 0, 1283, 0, 0, 0,
	89, 96, 123, 191, 0, 148, 111, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1132, 0,
	47, 0, 409, 399, 0, 370, 411, 347, 362, 419,
	363, 364, 392, 333, 378, 141, 359, 0, 350, 328,
	356, 329, 348, 372, 109, 346, 401, 381, 121, 417,
	124, 386, 0, 159, 133, 0, 0, 374, 403, 376,
	397, 369, 393, 338, 385, 412, 360, 389, 413, 0,
	0, 0, 324, 0, 833, 834, 0, 0, 0, 0,
	0, 101, 0, 388, 408, 358, 391, 327, 387, 0,
	331, 334, 418, 406, 353, 354, 1003, 0, 0, 0,
	0, 0, 0, 373, 377, 394, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 351, 0, 384, 0, 0,
	0, 335, 332, 1389, 371, 0, 0, 0, 337, 0,
	352, 395, 0, 326, 398, 404, 368, 184, 407, 366,
	365, 146, 0, 104, 0, 163, 113, 361, 122, 410,
	375, 402, 349, 357, 105, 355, 152, 142, 175, 383,
	143, 151, 125, 167, 147, 174, 185, 186, 165, 183,
	154, 97, 139, 88, 90, 164, 173, 102, 155, 93,
	171, 161, 162, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 168, 169, 106, 193, 98,
	181, 182, 95, 99, 180, 138, 179, 166, 172, 132,
	129, 94, 170, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 330, 0, 160, 177,
	194, 195, 345, 405, 187, 188, 189, 190, 0, 0,
	0, 137, 100, 116, 156, 119, 126, 149, 192, 390,
	153, 103, 176, 158, 341, 344, 339, 340, 379, 380,
	414, 415, 416, 396, 336, 0, 342, 343, 0, 400,
	382, 89, 96, 123, 191, 0, 148, 111, 178, 409,
	399, 0, 370, 411, 347, 362, 419, 363, 364, 392,
	333, 378, 141, 359, 0, 350, 328, 356, 329, 348,
	372, 109, 346, 401, 381, 121, 417, 124, 386, 0,
	159, 133, 0, 0, 374, 403, 376, 397, 369, 393,
	338, 385, 412, 360, 389, 413, 0, 0, 0, 324,
	0, 833, 834, 0, 0, 0, 0, 0, 101, 0,
	388, 408, 358, 391, 327, 387, 0, 331, 334, 418,
	406, 353, 354, 0, 0, 0, 0, 0, 0, 0,
	373, 377, 394, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 351, 0, 384, 0, 0, 0, 335, 332,
	0, 371, 0, 0, 0, 337, 0, 352, 395, 0,
	326, 398, 404, 368, 184, 407, 366, 365, 146, 0,
	104, 0, 163, 113, 361, 122, 410, 375, 402, 349,
	357, 105, 355, 152, 142, 175, 383, 143, 151, 125,
	167, 147, 174, 185, 186, 165, 183, 154, 97, 139,
	88, 90, 164, 173, 102, 155, 93, 171, 161, 162,
	131, 117, 118, 157, 91, 92, 0, 150, 108, 112,
	107, 140, 168, 169, 106, 193, 98, 181, 182, 95,
	99, 180, 138, 179, 166, 172, 132, 129, 94, 170,
	130, 128, 120, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 330, 0, 160, 177, 194, 195, 345,
	405, 187, 188, 189, 190, 0, 0, 0, 137, 100,
	116, 156, 119, 126, 149, 192, 390, 153, 103, 176,
	158, 341, 344, 339, 340, 379, 380, 414, 415, 416,
	396, 336, 0, 342, 343, 0, 400, 382, 89, 96,
	123, 191, 0, 148, 111, 178, 409, 399, 0, 370,
	411, 347, 362, 419, 363, 364, 392, 333, 378, 141,
	359, 0, 350, 328, 356, 329, 348, 372, 109, 346,
	401, 381, 121, 417, 124, 386, 0, 159, 133, 0,
	0, 374, 403, 376, 397, 369, 393, 338, 385, 412,
	360, 389, 413, 0, 0, 0, 324, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 388, 408, 358,
	391, 327, 387, 0, 331, 334, 418, 406, 353, 354,
	0, 0, 0, 0, 0, 0, 0, 373, 377, 394,
	367, 0, 0, 0, 0, 0, 0, 1094, 0, 351,
	0, 384, 0, 0, 0, 335, 332, 0, 371, 0,
	0, 0, 337, 0, 352, 395, 0, 326, 398, 404,
	368, 184, 407, 366, 365, 146, 0, 104, 0, 163,
	113, 361, 122, 410, 375, 402, 349, 357, 105, 355,
	152, 142, 175, 383, 143, 151, 125, 167, 147, 174,
	185, 186, 165, 183, 154, 97, 139, 88, 90, 164,
	173, 102, 155, 93, 171, 161, 162, 131, 117, 118,
	157, 91, 92, 0, 150, 108, 112, 107, 140, 168,
	169, 106, 193, 98, 181, 182, 95, 99, 180, 138,
	179, 166, 172, 132, 129, 94, 170, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	330, 0, 160, 177, 194, 195, 345, 405, 187, 188,
	189, 190, 0, 0, 0, 137, 100, 116, 156, 119,
	126, 149, 192, 390, 153, 103, 176, 158, 341, 344,
	339, 340, 379, 380, 414, 415, 416, 396, 336, 0,
	342, 343, 0, 400, 382, 89, 96, 123, 191, 0,
	148, 111, 178, 409, 399, 0, 370, 411, 347, 362,
	419, 363, 364, 392, 333, 378, 141, 359, 0, 350,
	328, 356, 329, 348, 372, 109, 346, 401, 381, 121,
	417, 124, 386, 0, 159, 133, 0, 0, 374, 403,
	376, 397, 369, 393, 338, 385, 412, 360, 389, 413,
	50, 0, 0, 324, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 388, 408, 358, 391, 327, 387,
	0, 331, 334, 418, 406, 353, 354, 0, 0, 0,
	0, 0, 0, 0, 373, 377, 394, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 384, 0,
	0, 0, 335, 332, 0, 371, 0, 0, 0, 337,
	0, 352, 395, 0, 326, 398, 404, 368, 184, 407,
	366, 365, 146, 0, 104, 0, 163, 113, 361, 122,
	410, 375, 402, 349, 357, 105, 355, 152, 142, 175,
	383, 143, 151, 125, 167, 147, 174, 185, 186, 165,
	183, 154, 97, 139, 88, 90, 164, 173, 102, 155,
	93, 171, 161, 162, 131, 117, 118, 157, 91, 92,
	0, 150, 108, 112, 107, 140, 168, 169, 106, 193,
	98, 181, 182, 95, 99, 180, 138, 179, 166, 172,
	132, 129, 94, 170, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 330, 0, 160,
	177, 194, 195, 345, 405, 187, 188, 189, 190, 0,
	0, 0, 137, 100, 116, 156, 119, 126, 149, 192,
	390, 153, 103, 176, 158, 341, 344, 339, 340, 379,
	380, 414, 415, 416, 396, 336, 0, 342, 343, 0,
	400, 382, 89, 96, 123, 191, 0, 148, 111, 178,
	409, 399, 0, 370, 411, 347, 362, 419, 363, 364,
	392, 333, 378, 141, 359, 0, 350, 328, 356, 329,
	348, 372, 109, 346, 401, 381, 121, 417, 124, 386,
	0, 159, 133, 0, 0, 374, 403, 376, 397, 369,
	393, 338, 385, 412, 360, 389, 413, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 388, 408, 358, 391, 327, 387, 0, 331, 334,
	418, 406, 353, 354, 0, 0, 0, 0, 0, 0,
	0, 373, 377, 394, 367, 0, 0, 0, 0, 0,
	0, 726, 0, 351, 0, 384, 0, 0, 0, 335,
	332, 0, 371, 0, 0, 0, 337, 0, 352, 395,
	0, 326, 398, 404, 368, 184, 407, 366, 365, 146,
	0, 104, 0, 163, 113, 361, 122, 410, 375, 402,
	349, 357, 105, 355, 152, 142, 175, 383, 143, 151,
	125, 167, 147, 174, 185, 186, 165, 183, 154, 97,
	139, 88, 90, 164, 173, 102, 155, 93, 171, 161,
	162, 131, 117, 118, 157, 91, 92, 0, 150, 108,
	112, 107, 140, 168, 169, 106, 193, 98, 181, 182,
	95, 99, 180, 138, 179, 166, 172, 132, 129, 94,
	170, 130, 128, 120, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 330, 0, 160, 177, 194, 195,
	345, 405, 187, 188, 189, 190, 0, 0, 0, 137,
	100, 116, 156, 119, 126, 149, 192, 390, 153, 103,
	176, 158, 341, 344, 339, 340, 379, 380, 414, 415,
	416, 396, 336, 0, 342, 343, 0, 400, 382, 89,
	96, 123, 191, 0, 148, 111, 178, 409, 399, 0,
	370, 411, 347, 362, 419, 363, 364, 392, 333, 378,
	141, 359, 0, 350, 328, 356, 329, 348, 372, 109,
	346, 401, 381, 121, 417, 124, 386, 0, 159, 133,
	0, 0, 374, 403, 376, 397, 369, 393, 338, 385,
	412, 360, 389, 413, 0, 0, 0, 324, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 388, 408,
	358, 391, 327, 387, 0, 331, 334, 418, 406, 353,
	354, 0, 0, 0, 0, 0, 0, 0, 373, 377,
	394, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	351, 0, 384, 0, 0, 0, 335, 332, 0, 371,
	0, 0, 0, 337, 0, 352, 395, 0, 326, 398,
	404, 368, 184, 407, 366, 365, 146, 0, 104, 0,
	163, 113, 361, 122, 410, 375, 402, 349, 357, 105,
	355, 152, 142, 175, 383, 143, 151, 125, 167, 147,
	174, 185, 186, 165, 183, 154, 97, 139, 88, 90,
	164, 173, 102, 155, 93, 171, 161, 162, 131, 117,
	118, 157, 91, 92, 0, 150, 108, 112, 107, 140,
	168, 169, 106, 193, 98, 181, 182, 95, 99, 180,
	138, 179, 166, 172, 132, 129, 94, 170, 130, 128,
	120, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 330, 0, 160, 177, 194, 195, 345, 405, 187,
	188, 189, 190, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 192, 390, 153, 103, 176, 158, 341,
	344, 339, 340, 379, 380, 414, 415, 416, 396, 336,
	0, 342, 343, 0, 400, 382, 89, 96, 123, 191,
	0, 148, 111, 178, 409, 399, 0, 370, 411, 347,
	362, 419, 363, 364, 392, 333, 378, 141, 359, 0,
	350, 328, 356, 329, 348, 372, 109, 346, 401, 381,
	121, 417, 124, 386, 0, 159, 133, 0, 0, 374,
	403, 376, 397, 369, 393, 338, 385, 412, 360, 389,
	413, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 388, 408, 358, 391, 327,
	387, 0, 331, 334, 418, 406, 353, 354, 0, 0,
	0, 0, 0, 0, 0, 373, 377, 394, 367, 0,
	0, 0, 0, 0, 0, 0, 0, 351, 0, 384,
	0, 0, 0, 335, 332, 0, 371, 0, 0, 0,
	337, 0, 352, 395, 0, 326, 398, 404, 368, 184,
	407, 366, 365, 146, 0, 104, 0, 163, 113, 361,
	122, 410, 375, 402, 349, 357, 105, 355, 152, 142,
	175, 383, 143, 151, 125, 167, 147, 174, 185, 186,
	165, 183, 154, 97, 139, 88, 90, 164, 173, 102,
	155, 93, 171, 161, 162, 131, 117, 118, 157, 91,
	92, 0, 150, 108, 112, 107, 140, 168, 169, 106,
	193, 98, 181, 182, 95, 99, 180, 138, 179, 166,
	172, 132, 129, 94, 170, 130, 128, 120, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 330, 0,
	160, 177, 194, 195, 345, 405, 187, 188, 189, 190,
	0, 0, 0, 137, 100, 116, 156, 119, 126, 149,
	192, 390, 153, 103, 176, 158, 341, 344, 339, 340,
	379, 380, 414, 415, 416, 396, 336, 0, 342, 343,
	0, 400, 382, 89, 96, 123, 191, 0, 148, 111,
	178, 409, 399, 0, 370, 411, 347, 362, 419, 363,
	364, 392, 333, 378, 141, 359, 0, 350, 328, 356,
	329, 348, 372, 109, 346, 401, 381, 121, 417, 124,
	386, 0, 159, 133, 0, 0, 374, 403, 376, 397,
	369, 393, 338, 385, 412, 360, 389, 413, 0, 0,
	0, 324, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 388, 408, 358, 391, 327, 387, 0, 331,
	334, 418, 406, 353, 354, 0, 0, 0, 0, 0,
	0, 0, 373, 377, 394, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 351, 0, 384, 0, 0, 0,
	335, 332, 0, 371, 0, 0, 0, 337, 0, 352,
	395, 0, 326, 398, 404, 368, 184, 407, 366, 365,
	146, 0, 104, 0, 163, 113, 361, 122, 410, 375,
	402, 349, 357, 105, 355, 152, 142, 175, 383, 143,
	151, 125, 167, 147, 174, 185, 186, 165, 183, 154,
	97, 139, 88, 90, 164, 173, 102, 155, 93, 171,
	161, 162, 131, 117, 118, 157, 91, 92, 0, 150,
	108, 112, 107, 140, 168, 169, 106, 193, 98, 181,
	182, 95, 322, 180, 138, 179, 166, 172, 132, 129,
	94, 170, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 330, 0, 160, 177, 194,
	195, 345, 405, 187, 188, 189, 190, 0, 0, 0,
	323, 321, 116, 156, 119, 126, 149, 192, 390, 153,
	103, 176, 158, 341, 344, 339, 340, 379, 380, 414,
	415, 416, 396, 336, 0, 342, 343, 0, 400, 382,
	89, 96, 123, 191, 0, 148, 111, 178, 409, 399,
	0, 370, 411, 347, 362, 419, 363, 364, 392, 333,
	378, 141, 359, 0, 350, 328, 356, 329, 348, 372,
	109, 346, 401, 381, 121, 417, 124, 386, 0, 159,
	133, 0, 0, 374, 403, 376, 397, 369, 393, 338,
	385, 412, 360, 389, 413, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 388,
	408, 358, 391, 327, 387, 0, 331, 334, 418, 406,
	353, 354, 0, 0, 0, 0, 0, 0, 0, 373,
	377, 394, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 384, 0, 0, 0, 335, 332, 0,
	371, 0, 0, 0, 337, 0, 352, 395, 0, 326,
	398, 404, 368, 184, 407, 366, 365, 146, 0, 104,
	0, 163, 113, 361, 122, 410, 375, 402, 349, 357,
	105, 355, 152, 142, 175, 383, 143, 151, 125, 167,
	147, 174, 185, 186, 165, 183, 154, 97, 139, 88,
	90, 164, 173, 102, 155, 93, 171, 161, 162, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 168, 169, 106, 193, 98, 181, 182, 95, 99,
	180, 138, 179, 166, 172, 132, 129, 94, 170, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 330, 0, 160, 177, 194, 195, 345, 405,
	187, 188, 189, 190, 0, 0, 0, 137, 100, 116,
	156, 119, 126, 149, 192, 390, 153, 103, 176, 158,
	341, 344, 339, 340, 379, 380, 414, 415, 416, 396,
	336, 0, 342, 343, 0, 400, 382, 89, 96, 123,
	191, 0, 148, 111, 178, 409, 399, 0, 370, 411,
	347, 362, 419, 363, 364, 392, 333, 378, 141, 359,
	0, 350, 328, 356, 329, 348, 372, 109, 346, 401,
	381, 121, 417, 124, 386, 0, 159, 133, 0, 0,
	374, 403, 376, 397, 369, 393, 338, 385, 412, 360,
	389, 413, 0, 0, 0, 324, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 388, 408, 358, 391,
	327, 387, 0, 331, 334, 418, 406, 353, 354, 0,
	0, 0, 0, 0, 0, 0, 373, 377, 394, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 351, 0,
	384, 0, 0, 0, 335, 332, 0, 371, 0, 0,
	0, 337, 0, 352, 395, 0, 326, 398, 404, 368,
	184, 407, 366, 365, 146, 0, 104, 0, 163, 113,
	361, 122, 410, 375, 402, 349, 357, 105, 355, 152,
	142, 175, 383, 143, 151, 125, 167, 147, 174, 185,
	186, 165, 183, 154, 97, 139, 88, 90, 164, 594,
	102, 155, 93, 171, 161, 162, 131, 117, 118, 157,
	91, 92, 0, 150, 108, 112, 107, 140, 168, 169,
	106, 193, 98, 181, 182, 95, 322, 180, 138, 179,
	166, 172, 132, 129, 94, 170, 130, 128, 120, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 330,
	0, 160, 177, 194, 195, 345, 405, 187, 188, 189,
	190, 0, 0, 0, 323, 321, 116, 156, 119, 126,
	149, 192, 390, 153, 103, 176, 158, 341, 344, 339,
	340, 379, 380, 414, 415, 416, 396, 336, 0, 342,
	343, 0, 400, 382, 89, 96, 123, 191, 0, 148,
	111, 178, 409, 399, 0, 370, 411, 347, 362, 419,
	363, 364, 392, 333, 378, 141, 359, 0, 350, 328,
	356, 329, 348, 372, 109, 346, 401, 381, 121, 417,
	124, 386, 0, 159, 133, 0, 0, 374, 403, 376,
	397, 369, 393, 338, 385, 412, 360, 389, 413, 0,
	0, 0, 324, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 388, 408, 358, 391, 327, 387, 0,
	331, 334, 418, 406, 353, 354, 0, 0, 0, 0,
	0, 0, 0, 373, 377, 394, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 351, 0, 384, 0, 0,
	0, 335, 332, 0, 371, 0, 0, 0, 337, 0,
	352, 395, 0, 326, 398, 404, 368, 184, 407, 366,
	365, 146, 0, 104, 0, 163, 113, 361, 122, 410,
	375, 402, 349, 357, 105, 355, 152, 142, 175, 383,
	143, 151, 125, 167, 147, 174, 185, 186, 165, 183,
	154, 97, 139, 88, 90, 164, 313, 102, 155, 93,
	171, 161, 162, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 168, 169, 106, 193, 98,
	181, 182, 95, 322, 180, 138, 179, 166, 172, 132,
	129, 94, 170, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 330, 0, 160, 177,
	194, 195, 345, 405, 187, 188, 189, 190, 0, 0,
	0, 323, 321, 316, 315, 119, 126, 149, 192, 390,
	153, 103, 176, 158, 341, 344, 339, 340, 379, 380,
	414, 415, 416, 396, 336, 0, 342, 343, 0, 400,
	382, 89, 96, 123, 191, 0, 148, 111, 178, 141,
	0, 0, 762, 0, 247, 0, 0, 0, 109, 244,
	0, 0, 121, 286, 124, 0, 0, 159, 133, 0,
	0, 0, 0, 277, 278, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 245, 265, 264, 267,
	268, 269, 270, 0, 0, 101, 266, 271, 272, 273,
	0, 0, 242, 258, 0, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 238, 0, 0,
	0, 297, 0, 257, 0, 0, 253, 254, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 295, 146, 0, 104, 0, 163,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	152, 142, 175, 0, 143, 151, 125, 167, 147, 174,
	185, 186, 165, 183, 154, 97, 139, 88, 90, 164,
	173, 102, 155, 93, 171, 161, 162, 131, 117, 118,
	157, 91, 92, 0, 150, 108, 112, 107, 140, 168,
	169, 106, 193, 98, 181, 182, 95, 99, 180, 138,
	179, 166, 172, 132, 129, 94, 170, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 160, 177, 194, 195, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 137, 100, 116, 156, 119,
	126, 149, 192, 0, 153, 103, 176, 158, 287, 296,
	293, 294, 291, 292, 290, 289, 288, 298, 279, 280,
	281, 282, 284, 0, 283, 89, 96, 123, 191, 141,
	148, 111, 178, 0, 247, 0, 0, 0, 109, 244,
	0, 0, 121, 286, 124, 0, 0, 159, 133, 0,
	0, 0, 0, 277, 278, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 465, 245, 265, 264, 267,
	268, 269, 270, 0, 0, 101, 266, 271, 272, 273,
	0, 0, 242, 258, 0, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 0, 0, 0,
	0, 297, 0, 257, 0, 0, 253, 254, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 295, 146, 0, 104, 0, 163,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	152, 142, 175, 0, 143, 151, 125, 167, 147, 174,
	185, 186, 165, 183, 154, 97, 139, 88, 90, 164,
	173, 102, 155, 93, 171, 161, 162, 131, 117, 118,
	157, 91, 92, 0, 150, 108, 112, 107, 140, 168,
	169, 106, 193, 98, 181, 182, 95, 99, 180, 138,
	179, 166, 172, 132, 129, 94, 170, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 160, 177, 194, 195, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 137, 100, 116, 156, 119,
	126, 149, 192, 0, 153, 103, 176, 158, 287, 296,
	293, 294, 291, 292, 290, 289, 288, 298, 279, 280,
	281, 282, 284, 0, 283, 89, 96, 123, 191, 141,
	148, 111, 178, 0, 247, 0, 0, 0, 109, 244,
	0, 0, 121, 286, 124, 0, 0, 159, 133, 0,
	0, 0, 0, 277, 278, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 245, 265, 264, 267,
	268, 269, 270, 0, 0, 101, 266, 271, 272, 273,
	0, 0, 242, 258, 0, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 238, 0, 0,
	0, 297, 0, 257, 0, 0, 253, 254, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 295, 146, 0, 104, 0, 163,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	152, 142, 175, 0, 143, 151, 125, 167, 147, 174,
	185, 186, 165, 183, 154, 97, 139, 88, 90, 164,
	173, 102, 155, 93, 171, 161, 162, 131, 117, 118,
	157, 91, 92, 0, 150, 108, 112, 107, 140, 168,
	169, 106, 193, 98, 181, 182, 95, 99, 180, 138,
	179, 166, 172, 132, 129, 94, 170, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 160, 177, 194, 195, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 137, 100, 116, 156, 119,
	126, 149, 192, 0, 153, 103, 176, 158, 287, 296,
	293, 294, 291, 292, 290, 289, 288, 298, 279, 280,
	281, 282, 284, 0, 283, 89, 96, 123, 191, 141,
	148, 111, 178, 0, 247, 0, 0, 0, 109, 244,
	0, 0, 121, 286, 124, 0, 0, 159, 133, 0,
	0, 0, 0, 277, 278, 0, 0, 0, 0, 0,
	0, 825, 0, 50, 0, 0, 245, 265, 264, 267,
	268, 269, 270, 0, 0, 101, 266, 271, 272, 273,
	0, 0, 242, 258, 0, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 0, 0, 0,
	0, 297, 0, 257, 0, 0, 253, 254, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 295, 146, 0, 104, 0, 163,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	152, 142, 175, 0, 143, 151, 125, 167, 147, 174,
	185, 186, 165, 183, 154, 97, 139, 88, 90, 164,
	173, 102, 155, 93, 171, 161, 162, 131, 117, 118,
	157, 91, 92, 0, 150, 108, 112, 107, 140, 168,
	169, 106, 193, 98, 181, 182, 95, 99, 180, 138,
	179, 166, 172, 132, 129, 94, 170, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 160, 177, 194, 195, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 137, 100, 116, 156, 119,
	126, 149, 192, 0, 153, 103, 176, 158, 287, 296,
	293, 294, 291, 292, 290, 289, 288, 298, 279, 280,
	281, 282, 284, 23, 283, 89, 96, 123, 191, 0,
	148, 111, 178, 0, 0, 141, 0, 0, 0, 0,
	247, 0, 0, 0, 109, 244, 0, 0, 121, 286,
	124, 0, 0, 159, 133, 0, 0, 0, 0, 277,
	278, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 245, 265, 264, 267, 268, 269, 270, 0,
	0, 101, 266, 271, 272, 273, 0, 0, 242, 258,
	0, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 0, 0, 0, 0, 297, 0, 257,
	0, 0, 253, 254, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	295, 146, 0, 104, 0, 163, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 152, 142, 175, 0,
	143, 151, 125, 167, 147, 174, 185, 186, 165, 183,
	154, 97, 139, 88, 90, 164, 173, 102, 155, 93,
	171, 161, 162, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 168, 169, 106, 193, 98,
	181, 182, 95, 99, 180, 138, 179, 166, 172, 132,
	129, 94, 170, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 160, 177,
	194, 195, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 137, 100, 116, 156, 119, 126, 149, 192, 0,
	153, 103, 176, 158, 287, 296, 293, 294, 291, 292,
	290, 289, 288, 298, 279, 280, 281, 282, 284, 0,
	283, 89, 96, 123, 191, 141, 148, 111, 178, 0,
	247, 0, 0, 0, 109, 244, 0, 0, 121, 286,
	124, 0, 0, 159, 133, 0, 0, 0, 0, 277,
	278, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 245, 265, 264, 267, 268, 269, 270, 0,
	0, 101, 266, 271, 272, 273, 0, 0, 242, 258,
	0, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 0, 0, 0, 0, 297, 0, 257,
	0, 0, 253, 254, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	295, 146, 0, 104, 0, 163, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 152, 142, 175, 0,
	143, 151, 125, 167, 147, 174, 185, 186, 165, 183,
	154, 97, 139, 88, 90, 164, 173, 102, 155, 93,
	171, 161, 162, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 168, 169, 106, 193, 98,
	181, 182, 95, 99, 180, 138, 179, 166, 172, 132,
	129, 94, 170, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 160, 177,
	194, 195, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 137, 100, 116, 156, 119, 126, 149, 192, 0,
	153, 103, 176, 158, 287, 296, 293, 294, 291, 292,
	290, 289, 288, 298, 279, 280, 281, 282, 284, 0,
	283, 89, 96, 123, 191, 141, 148, 111, 178, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 121, 286,
	124, 0, 0, 159, 133, 0, 0, 0, 0, 277,
	278, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 245, 265, 264, 267, 268, 269, 270, 0,
	0, 101, 266, 271, 272, 273, 0, 0, 0, 258,
	0, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 0, 0, 0, 0, 297, 0, 257,
	0, 0, 253, 254, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	295, 146, 0, 104, 0, 163, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 152, 142, 175, 1393,
	143, 151, 125, 167, 147, 174, 185, 186, 165, 183,
	154, 97, 139, 88, 90, 164, 173, 102, 155, 93,
	171, 161, 162, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 168, 169, 106, 193, 98,
	181, 182, 95, 99, 180, 138, 179, 166, 172, 132,
	129, 94, 170, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 160, 177,
	194, 195, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 137, 100, 116, 156, 119, 126, 149, 192, 0,
	153, 103, 176, 158, 287, 296, 293, 294, 291, 292,
	290, 289, 288, 298, 279, 280, 281, 282, 284, 0,
	283, 89, 96, 123, 191, 141, 148, 111, 178, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 121, 286,
	124, 0, 0, 159, 133, 0, 0, 0, 0, 277,
	278, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 245, 265, 264, 267, 268, 269, 270, 0,
	0, 101, 266, 271, 272, 273, 0, 0, 0, 258,
	0, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 0, 0, 0, 0, 297, 0, 257,
	0, 0, 253, 254, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	295, 146, 0, 104, 0, 163, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 152, 142, 175, 0,
	143, 151, 125, 167, 147, 174, 185, 186, 165, 183,
	154, 97, 139, 88, 90, 164, 173, 102, 155, 93,
	171, 161, 162, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 168, 169, 106, 193, 98,
	181, 182, 95, 99, 180, 138, 179, 166, 172, 132,
	129, 94, 170, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 160, 177,
	194, 195, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 137, 100, 116, 156, 119, 126, 149, 192, 0,
	153, 103, 176, 158, 287, 296, 293, 294, 291, 292,
	290, 289, 288, 298, 279, 280, 281, 282, 284, 0,
	283, 89, 96, 123, 191, 141, 148, 111, 178, 487,
	0, 0, 0, 0, 109, 0, 0, 0, 121, 0,
	124, 0, 0, 159, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 324, 0, 489, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 484, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 146, 0, 104, 0, 163, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 152, 142, 175, 0,
	143, 151, 125, 167, 147, 174, 185, 186, 165, 183,
	154, 97, 139, 88, 90, 164, 173, 102, 155, 93,
	171, 161, 162, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 168, 169, 106, 193, 98,
	181, 182, 95, 99, 180, 138, 179, 166, 172, 132,
	129, 94, 170, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 160, 177,
	194, 195, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 137, 100, 116, 156, 119, 126, 149, 192, 0,
	153, 103, 176, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	583, 89, 96, 123, 191, 109, 148, 111, 178, 121,
	0, 124, 0, 0, 159, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 585, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	0, 0, 146, 0, 104, 0, 163, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 152, 142, 175,
	0, 143, 151, 125, 167, 147, 174, 185, 186, 165,
	183, 154, 97, 139, 88, 90, 164, 173, 102, 155,
	93, 171, 161, 162, 131, 117, 118, 157, 91, 92,
	0, 150, 108, 112, 107, 140, 168, 169, 106, 193,
	98, 181, 182, 95, 99, 180, 138, 179, 166, 172,
	132, 129, 94, 170, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 0, 160,
	177, 194, 195, 0, 0, 187, 188, 189, 190, 0,
	0, 0, 137, 100, 116, 156, 119, 126, 149, 192,
	0, 153, 103, 176, 158, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 89, 96, 123, 191, 109, 148, 111, 178,
	121, 0, 124, 0, 0, 159, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 324, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 0, 146, 0, 104, 0, 163, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 152, 142,
	175, 0, 143, 151, 125, 167, 147, 174, 185, 186,
	165, 183, 154, 97, 139, 88, 90, 164, 173, 102,
	155, 93, 171, 161, 162, 131, 117, 118, 157, 91,
	92, 0, 150, 108, 112, 107, 140, 168, 169, 106,
	193, 98, 181, 182, 95, 99, 180, 138, 179, 166,
	172, 132, 129, 94, 170, 130, 128, 120, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	160, 177, 194, 195, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 137, 100, 116, 156, 119, 126, 149,
	192, 0, 153, 103, 176, 158, 23, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 89, 96, 123, 191, 109, 148, 111,
	178, 121, 0, 124, 0, 0, 159, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 0, 0, 146, 0, 104, 0, 163, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 152,
	142, 175, 0, 143, 151, 125, 167, 147, 174, 185,
	186, 165, 183, 154, 97, 139, 88, 90, 164, 173,
	102, 155, 93, 171, 161, 162, 131, 117, 118, 157,
	91, 92, 0, 150, 108, 112, 107, 140, 168, 169,
	106, 193, 98, 181, 182, 95, 99, 180, 138, 179,
	166, 172, 132, 129, 94, 170, 130, 128, 120, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 0,
	0, 160, 177, 194, 195, 0, 0, 187, 188, 189,
	190, 0, 0, 0, 137, 100, 116, 156, 119, 126,
	149, 192, 141, 153, 103, 176, 158, 0, 0, 0,
	0, 109, 0, 0, 0, 121, 0, 124, 0, 0,
	159, 133, 0, 0, 89, 96, 123, 191, 0, 148,
	111, 178, 0, 0, 0, 0, 0, 0, 0, 324,
	0, 0, 713, 0, 0, 714, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 0, 0, 0, 146, 0,
	104, 0, 163, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 152, 142, 175, 0, 143, 151, 125,
	167, 147, 174, 185, 186, 165, 183, 154, 97, 139,
	88, 90, 164, 173, 102, 155, 93, 171, 161, 162,
	131, 117, 118, 157, 91, 92, 0, 150, 108, 112,
	107, 140, 168, 169, 106, 193, 98, 181, 182, 95,
	99, 180, 138, 179, 166, 172, 132, 129, 94, 170,
	130, 128, 120, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 0, 0, 160, 177, 194, 195, 0,
	0, 187, 188, 189, 190, 0, 0, 0, 137, 100,
	116, 156, 119, 126, 149, 192, 141, 153, 103, 176,
	158, 0, 0, 0, 0, 109, 603, 0, 0, 121,
	0, 124, 0, 0, 159, 133, 0, 0, 89, 96,
	123, 191, 0, 148, 111, 178, 0, 0, 0, 0,
	0, 0, 0, 324, 0, 602, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	0, 0, 146, 0, 104, 0, 163, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 152, 142, 175,
	0, 143, 151, 125, 167, 147, 174, 185, 186, 165,
	183, 154, 97, 139, 88, 90, 164, 173, 102, 155,
	93, 171, 161, 162, 131, 117, 118, 157, 91, 92,
	0, 150, 108, 112, 107, 140, 168, 169, 106, 193,
	98, 181, 182, 95, 99, 180, 138, 179, 166, 172,
	132, 129, 94, 170, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 0, 160,
	177, 194, 195, 0, 0, 187, 188, 189, 190, 0,
	0, 0, 137, 100, 116, 156, 119, 126, 149, 192,
	0, 153, 103, 176, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 583, 89, 96, 123, 191, 109, 148, 111, 178,
	121, 0, 124, 0, 0, 159, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 585, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 0, 146, 0, 104, 0, 163, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 152, 142,
	175, 0, 581, 151, 125, 167, 147, 174, 185, 186,
	165, 183, 154, 97, 139, 88, 90, 164, 173, 102,
	155, 93, 171, 161, 162, 131, 117, 118, 157, 91,
	92, 0, 150, 108, 112, 107, 140, 168, 169, 106,
	193, 98, 181, 182, 95, 99, 180, 138, 179, 166,
	172, 132, 129, 94, 170, 130, 128, 120, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	160, 177, 194, 195, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 137, 100, 116, 156, 119, 126, 149,
	192, 141, 153, 103, 176, 158, 0, 0, 0, 0,
	109, 0, 0, 0, 121, 0, 124, 0, 0, 159,
	133, 0, 0, 89, 96, 123, 191, 0, 148, 111,
	178, 0, 0, 0, 0, 50, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 0, 146, 0, 104,
	0, 163, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 152, 142, 175, 0, 143, 151, 125, 167,
	147, 174, 185, 186, 165, 183, 154, 97, 139, 88,
	90, 164, 173, 102, 155, 93, 171, 161, 162, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 168, 169, 106, 193, 98, 181, 182, 95, 99,
	180, 138, 179, 166, 172, 132, 129, 94, 170, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 160, 177, 194, 195, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 137, 100, 116,
	156, 119, 126, 149, 192, 141, 153, 103, 176, 158,
	0, 0, 0, 0, 109, 0, 0, 0, 121, 0,
	124, 0, 0, 159, 133, 0, 0, 89, 96, 123,
	191, 0, 148, 111, 178, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 585, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 146, 0, 104, 0, 163, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 152, 142, 175, 0,
	143, 151, 125, 167, 147, 174, 185, 186, 165, 183,
	154, 97, 139, 88, 90, 164, 173, 102, 155, 93,
	171, 161, 162, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 168, 169, 106, 193, 98,
	181, 182, 95, 99, 180, 138, 179, 166, 172, 132,
	129, 94, 170, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 160, 177,
	194, 195, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 137, 100, 116, 156, 119, 126, 149, 192, 141,
	153, 103, 176, 158, 0, 0, 0, 0, 109, 0,
	0, 0, 121, 0, 124, 0, 0, 159, 133, 0,
	0, 89, 96, 123, 191, 0, 148, 111, 178, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 489, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 0, 146, 0, 104, 0, 163,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	152, 142, 175, 0, 143, 151, 125, 167, 147, 174,
	185, 186, 165, 183, 154, 97, 139, 88, 90, 164,
	173, 102, 155, 93, 171, 161, 162, 131, 117, 118,
	157, 91, 92, 0, 150, 108, 112, 107, 140, 168,
	169, 106, 193, 98, 181, 182, 95, 99, 180, 138,
	179, 166, 172, 132, 129, 94, 170, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 160, 177, 194, 195, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 137, 100, 116, 156, 119,
	126, 149, 192, 141, 153, 103, 176, 158, 0, 0,
	0, 0, 109, 0, 0, 0, 121, 0, 124, 0,
	0, 159, 133, 0, 0, 89, 96, 123, 191, 0,
	148, 111, 178, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 0, 146,
	0, 104, 0, 163, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 152, 142, 175, 0, 143, 151,
	125, 167, 147, 174, 185, 186, 165, 183, 154, 97,
	139, 88, 90, 164, 173, 102, 155, 93, 171, 161,
	162, 131, 117, 118, 157, 91, 92, 0, 150, 108,
	112, 107, 140, 168, 169, 106, 193, 98, 181, 182,
	95, 99, 180, 138, 179, 166, 172, 132, 129, 94,
	170, 130, 128, 120, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 0, 160, 177, 194, 195,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 137,
	100, 116, 156, 119, 126, 149, 192, 673, 153, 103,
	176, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	96, 123, 191, 141, 148, 111, 178, 0, 0, 0,
	0, 561, 109, 0, 0, 0, 121, 0, 124, 0,
	0, 159, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 0, 146,
	0, 104, 0, 163, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 152, 142, 175, 0, 143, 151,
	125, 167, 147, 174, 185, 186, 165, 183, 154, 97,
	139, 88, 90, 164, 173, 102, 155, 93, 171, 161,
	162, 131, 117, 118, 157, 91, 92, 0, 150, 108,
	112, 107, 140, 168, 169, 106, 193, 98, 181, 182,
	95, 99, 180, 138, 179, 166, 172, 132, 129, 94,
	170, 130, 128, 120, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 0, 160, 177, 194, 195,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 137,
	100, 116, 156, 119, 126, 149, 192, 0, 153, 103,
	176, 158, 0, 0, 0, 0, 0, 308, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 89,
	96, 123, 191, 109, 148, 111, 178, 121, 0, 124,
	0, 0, 159, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 0,
	146, 0, 104, 0, 163, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 152, 142, 175, 0, 143,
	151, 125, 167, 147, 174, 185, 186, 165, 183, 154,
	97, 139, 88, 90, 164, 173, 102, 155, 93, 171,
	161, 162, 131, 117, 118, 157, 91, 92, 0, 150,
	108, 112, 107, 140, 168, 169, 106, 193, 98, 181,
	182, 95, 99, 180, 138, 179, 166, 172, 132, 129,
	94, 170, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 0, 0, 160, 177, 194,
	195, 0, 0, 187, 188, 189, 190, 0, 0, 0,
	137, 100, 116, 156, 119, 126, 149, 192, 141, 153,
	103, 176, 158, 0, 0, 0, 0, 109, 0, 0,
	0, 121, 0, 124, 0, 0, 159, 133, 0, 0,
	89, 96, 123, 191, 0, 148, 111, 178, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 0,
	184, 0, 0, 0, 146, 0, 104, 0, 163, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 152,
	142, 175, 0, 143, 151, 125, 167, 147, 174, 185,
	186, 165, 183, 154, 97, 139, 88, 90, 164, 173,
	102, 155, 93, 171, 161, 162, 131, 117, 118, 157,
	91, 92, 0, 150, 108, 112, 107, 140, 168, 169,
	106, 193, 98, 181, 182, 95, 99, 180, 138, 179,
	166, 172, 132, 129, 94, 170, 130, 128, 120, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 0,
	0, 160, 177, 194, 195, 0, 0, 187, 188, 189,
	190, 0, 0, 0, 137, 100, 116, 156, 119, 126,
	149, 192, 141, 153, 103, 176, 158, 0, 0, 0,
	0, 109, 0, 0, 0, 121, 0, 124, 0, 0,
	159, 133, 0, 0, 89, 96, 123, 191, 0, 148,
	111, 178, 0, 0, 0, 0, 0, 0, 0, 324,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 0, 0, 0, 146, 0,
	104, 0, 163, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 152, 142, 175, 0, 143, 151, 125,
	167, 147, 174, 185, 186, 165, 183, 154, 97, 139,
	88, 90, 164, 173, 102, 155, 93, 171, 161, 162,
	131, 117, 118, 157, 91, 92, 0, 150, 108, 112,
	107, 140, 168, 169, 106, 193, 98, 181, 182, 95,
	99, 180, 138, 179, 166, 172, 132, 129, 94, 170,
	130, 128, 120, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 0, 0, 160, 177, 194, 195, 0,
	0, 187, 188, 189, 190, 0, 0, 0, 137, 100,
	116, 156, 119, 126, 149, 192, 141, 153, 103, 176,
	158, 0, 0, 0, 0, 109, 0, 0, 0, 121,
	0, 124, 0, 0, 159, 133, 0, 0, 89, 96,
	123, 191, 0, 148, 111, 178, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	0, 0, 146, 0, 104, 0, 163, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 152, 142, 175,
	0, 143, 151, 125, 167, 147, 174, 185, 186, 165,
	183, 154, 97, 139, 88, 90, 164, 173, 102, 155,
	93, 171, 161, 162, 131, 117, 118, 157, 91, 92,
	0, 150, 108, 112, 107, 140, 168, 169, 106, 193,
	98, 181, 182, 95, 99, 180, 138, 179, 166, 172,
	132, 129, 94, 170, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 0, 160,
	177, 194, 195, 0, 0, 187, 188, 189, 190, 0,
	0, 0, 137, 100, 116, 156, 119, 126, 149, 192,
	141, 153, 103, 176, 158, 0, 0, 0, 0, 109,
	0, 0, 0, 121, 0, 124, 0, 0, 159, 133,
	0, 0, 89, 96, 123, 191, 0, 148, 111, 178,
	0, 0, 0, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 0, 0, 0, 146, 0, 104, 0,
	163, 113, 0, 122, 0, 0, 0, 0, 0, 105,
	0, 152, 142, 175, 0, 143, 151, 125, 167, 147,
	174, 185, 186, 165, 183, 154, 97, 139, 88, 90,
	164, 173, 102, 155, 93, 171, 161, 162, 131, 117,
	118, 157, 91, 92, 0, 150, 108, 112, 107, 140,
	168, 169, 106, 193, 98, 181, 182, 95, 99, 180,
	138, 179, 166, 172, 132, 129, 94, 170, 130, 128,
	120, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 0, 0, 160, 177, 194, 195, 0, 0, 187,
	188, 189, 190, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 192, 0, 153, 103, 176, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 96, 123, 191,
	0, 148, 111, 178,
}
var yyPact = [...]int{

	219, -1000, -188, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 942, 1015, -1000, -1000, -1000, -1000, -1000, -1000, 821,
	56, 130, 161, -1, 10190, 160, 1764, 10618, -1000, 23,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 768, -1000, -1000,
	-1000, -1000, -1000, 936, 940, 785, 929, 866, -1000, 5851,
	127, 8863, 9976, 5127, -1000, 521, 155, 10618, -144, 10404,
	123, 123, 123, -1000, 159, 10618, -1000, 10618, 119, 492,
	119, 119, 119, 10618, -1000, 195, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10618, 488, 900, 48,
	3328, 3328, 3328, 3328, 39, 3328, -79, 838, -1000, -1000,
	-1000, -1000, 3328, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 532, 901, 6577, 6577, 942, -1000, 768,
	-1000, -1000, -1000, 894, -1000, -1000, 315, 974, -1000, 7297,
	193, -1000, 6577, 1928, 596, -1000, -1000, 596, -1000, -1000,
	175, -1000, -1000, 7057, 7057, 7057, 7057, 7057, 7057, 7057,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 596, -1000, 6337, 596, 596, 596,
	596, 596, 596, 596, 596, 6577, 596, 596, 596, 596,
	596, 596, 596, 596, 596, 596, 596, 596, 596, 9745,
	744, 769, -1000, -1000, -1000, 914, 7990, 8649, 10618, 659,
	-1000, 730, 4870, -118, -1000, -1000, -1000, 264, 8418, -1000,
	-1000, -1000, 896, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	699, -1000, 1909, 10404, 3328, 135, 737, 486, 274, 484,
	10618, 9505, 3328, 133, 10618, 912, 834, 10618, 478, 472,
	-1000, 4613, -1000, 3328, 3328, 3328, 3328, 3328, 3328, 3328,
	3328, -1000, -1000, -1000, -1000, -1000, -1000, 3328, 3328, -1000,
	-75, -1000, 10618, -1000, -1000, -1000, -1000, 1006, 227, 436,
	191, 736, -1000, 404, 936, 532, 866, 8204, 758, -1000,
	-1000, 10618, -1000, 6577, 6577, 485, -1000, 9291, -1000, -1000,
	3585, 240, 7057, 364, 262, 7057, 7057, 7057, 7057, 7057,
	7057, 7057, 7057, 7057, 7057, 7057, 7057, 7057, 7057, 7057,
	379, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 470,
	-1000, 768, 767, 767, 202, 202, 202, 202, 202, 202,
	2256, 5371, 532, 695, 278, 6337, 5851, 5851, 6577, 6577,
	10832, 10832, 5851, 902, 292, 278, 10832, -1000, 532, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5851, 5851, 5851, 5851,
	51, 10618, -1000, 10832, 8863, 8863, 8863, 8863, 8863, -1000,
	861, 853, -1000, 854, 852, 860, 10618, -1000, 690, 7990,
	220, 596, -1000, 9077, -1000, -1000, 51, 709, 8863, 10618,
	-1000, -1000, 4356, 730, -118, 725, -1000, -89, -96, 6091,
	176, -1000, -1000, -1000, -1000, 2814, 338, 172, -1000, -61,
	-1000, -1000, -1000, -1000, 766, -1000, -1000, -1000, 766, 126,
	766, 766, 766, -17, -17, -17, -17, -1000, -1000, -1000,
	-1000, -1000, -1000, 803, 796, -1000, 766, 766, 766, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 786, 786,
	786, 770, 770, 802, -1000, 10618, -171, 463, 3328, 911,
	3328, -1000, 67, 10618, -1000, 10618, -1000, -1000, 10618, 3328,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 325, -1000, -1000, -1000, -1000,
	876, 6577, 6577, 4099, 6577, -1000, -1000, -1000, 901, -1000,
	902, 941, -1000, 887, 886, 5851, -1000, -1000, 240, 282,
	-1000, -1000, 303, -1000, -1000, -1000, -1000, 187, 596, -1000,
	2075, -1000, -1000, -1000, -1000, 364, 7057, 7057, 7057, 595,
	2075, 2027, 311, 2041, 202, 667, 667, 214, 214, 214,
	214, 214, 416, 416, -1000, -1000, -1000, 532, -1000, -1000,
	-1000, 532, 5851, 727, -1000, -1000, 6577, -1000, 532, 677,
	677, 370, 501, 747, -1000, 185, 745, 677, 5851, 288,
	-1000, 6577, 532, -1000, 677, 532, 677, 677, 529, 596,
	-1000, 649, -1000, 261, 769, 792, 832, 897, -1000, -1000,
	-1000, -1000, 851, -1000, 850, -1000, -1000, -1000, -1000, -1000,
	151, 147, 140, 10404, -1000, 950, 8863, 610, -1000, -1000,
	725, -118, -106, -1000, -1000, -1000, 278, -1000, 452, 724,
	2557, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 784, 831,
	91, 112, 164, 154, 444, 10404, -1000, -1000, -1000, 306,
	80, 998, -1000, 90, -1000, 87, 403, -64, -1000, -1000,
	383, -17, -17, 766, -17, -1000, -1000, 176, 892, 176,
	176, 176, 398, 398, -1000, -170, -1000, -1000, 369, -1000,
	-1000, -1000, 359, -1000, 10618, 10404, 3328, -1000, 3842, -1000,
	-1000, -1000, -1000, -1000, -1000, 270, 132, 208, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 50,
	166, -1000, 3328, -1000, 309, 10618, 10618, 873, 278, 278,
	184, -1000, -1000, 10618, -1000, -1000, -1000, -1000, 673, -1000,
	-1000, -1000, 3071, 5851, -1000, 595, 2075, 1555, -1000, 7057,
	7057, -1000, -1000, 677, 5851, 278, -1000, -1000, -1000, 348,
	379, 348, 7057, 7057, 4099, 7057, 7057, -157, 726, 266,
	-1000, 6577, 410, -1000, -1000, -1000, -1000, -1000, 827, 10832,
	596, -1000, 7759, 10404, 942, 10832, 6577, 6577, -1000, -1000,
	6577, 783, -1000, 6577, -1000, -1000, -1000, 596, 596, 596,
	655, -1000, 942, 610, -1000, -1000, -1000, -116, -102, -1000,
	-1000, 2814, -1000, 2814, 10404, 1013, -1000, 438, 432, -1000,
	426, -1000, -1000, 103, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -128, -1000, -1000, -1000, -1000, -1000, 560, 176,
	176, -17, 176, -1000, 257, -1000, -1000, -1000, 675, -1000,
	666, -1000, -6, 722, 664, 735, 826, -1000, 668, -1000,
	260, -1000, 88, -1000, 10404, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 10404, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10618, -1000, -1000, -1000, -1000,
	-1000, 10404, 113, -1000, -1000, 395, 6577, -1000, -1000, -1000,
	3842, -1000, 950, 8863, -1000, -1000, 532, -1000, 7057, 2075,
	2075, -1000, -1000, 532, 766, 766, -1000, 766, 770, -1000,
	766, 9, 766, 7, 532, 532, 1439, 1957, -1000, 1418,
	1523, 596, -153, -1000, 278, 6577, -1000, 899, 719, 591,
	-1000, -1000, 5611, 532, 661, 181, 655, 936, -1000, 278,
	278, 278, 10404, 278, 10404, 10404, 10404, 7528, 10404, 936,
	-1000, -1000, -1000, -1000, 2557, -1000, 651, -1000, 766, 169,
	169, -1000, -1000, -1000, 79, -1000, -1000, -1000, -1000, 176,
	-1000, -1000, -1000, -17, 386, -17, -67, 343, -1000, 339,
	10404, 10404, 10618, 3842, 2814, 10404, -1000, -1000, -1000, 756,
	-1000, -1000, -1000, -1000, 904, 10404, -1000, -1000, 278, 946,
	612, -1000, 2075, -1000, -1000, 116, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 7057, 7057, -1000, 7057, 7057,
	7057, 532, 380, 278, 75, -1000, 596, -1000, -1000, 749,
	10404, 10404, -1000, -1000, 647, -1000, 644, 644, 644, 220,
	-1000, -1000, 34, 10404, -1000, 794, -1000, -1000, 291, 28,
	771, 10404, -1000, 176, -1000, 176, -1000, 551, 538, 628,
	753, 751, -1000, -1000, 750, 10404, 596, 117, 944, 939,
	-1000, -1000, 1265, 1265, 1265, 1265, 63, -1000, -1000, 988,
	-1000, 596, -1000, 768, 180, -1000, 10404, -1000, -1000, -1000,
	-1000, -1000, 34, -1000, 406, 259, 326, -177, -1000, 983,
	-1000, -1000, 979, 742, -1000, -1000, -1000, -1000, -1000, 10404,
	10404, 10404, 624, 42, 66, -1000, 6577, 6577, -1000, -1000,
	-1000, -1000, 532, 43, -179, 10832, 591, 532, 10404, -1000,
	-1000, -1000, 334, -1000, -1000, 10404, 169, 169, 10404, 614,
	599, 557, 737, 548, -1000, 10404, 741, 278, 585, -1000,
	872, -168, -183, 576, -1000, -1000, -1000, -1000, -1000, -1000,
	541, -1000, -1000, -1000, -1000, -171, -1000, 42, 882, 10404,
	-1000, 870, -1000, 108, 10404, -1000, -1000, 47, 525, -174,
	10618, -1000, 40, -1000, -180, 740, 596, -185, 10404, 6817,
	-1000, 510, 1265, 532, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1212, 60, 476, 1211, 1208, 1206, 1205, 1204, 1203,
	1200, 1199, 1195, 1194, 1193, 1189, 1188, 1187, 1179, 1178,
	1177, 1174, 1173, 1172, 189, 1171, 1170, 1168, 56, 1167,
	65, 1164, 1159, 28, 247, 54, 51, 311, 1158, 58,
	89, 106, 1151, 32, 1144, 1141, 73, 1140, 69, 1139,
	1138, 37, 1137, 1136, 13, 23, 1135, 1133, 1132, 1131,
	59, 361, 1130, 1128, 1126, 1125, 1120, 1119, 40, 12,
	9, 15, 14, 1117, 170, 8, 1115, 39, 1112, 1111,
	1108, 1102, 44, 1097, 41, 1096, 19, 45, 1095, 16,
	52, 27, 21, 7, 71, 42, 1092, 30, 48, 50,
	1090, 1089, 422, 1088, 1087, 1086, 1084, 1083, 1081, 492,
	430, 1080, 1079, 1077, 53, 0, 521, 43, 57, 1075,
	31, 1074, 66, 49, 67, 17, 1073, 47, 1475, 24,
	1072, 1071, 29, 1070, 1069, 1067, 1066, 1061, 1060, 1059,
	1058, 484, 33, 123, 1057, 1056, 1054, 46, 20, 34,
	55, 1053, 1051, 26, 1050, 5, 10, 1, 36, 1049,
	1048, 1046, 1044, 22, 25, 1043, 11, 1041, 6, 1040,
	1039, 3, 1038, 18, 1035, 2, 1034, 4, 1032, 1031,
	1030, 1276, 642, 1028, 1027, 1025, 1018, 96,
}
var yyR1 = [...]int{

	0, 179, 180, 180, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 183,
	183, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 120,
	120, 177, 177, 176, 175, 175, 174, 174, 173, 16,
	160, 161, 161, 161, 161, 150, 133, 133, 133, 133,
	133, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 137, 137, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 136,
	136, 136, 136, 136, 138, 138, 138, 138, 138, 134,
	134, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 140,
	140, 140, 140, 140, 140, 140, 140, 149, 149, 141,
	141, 147, 147, 148, 148, 148, 146, 146, 144, 144,
	145, 145, 142, 142, 142, 143, 143, 152, 152, 169,
	169, 168, 168, 168, 168, 159, 159, 165, 165, 165,
	165, 165, 165, 165, 158, 158, 167, 167, 166, 153,
	153, 153, 153, 153, 154, 155, 155, 155, 155, 156,
	156, 157, 157, 162, 162, 162, 163, 163, 163, 164,
	164, 164, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 184, 184, 185, 185, 185,
	185, 185, 185, 185, 172, 170, 170, 171, 171, 13,
	14, 14, 14, 14, 14, 15, 15, 17, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 107, 107, 104, 104, 105, 105, 106, 106, 106,
	108, 108, 108, 131, 131, 131, 19, 19, 21, 21,
	22, 23, 20, 20, 20, 20, 20, 186, 24, 25,
	25, 26, 26, 26, 30, 30, 30, 28, 28, 29,
	29, 35, 35, 34, 34, 36, 36, 36, 36, 119,
	119, 119, 118, 118, 38, 38, 39, 39, 40, 40,
	41, 41, 41, 53, 53, 89, 89, 91, 91, 42,
	42, 42, 42, 43, 43, 44, 44, 45, 45, 126,
	126, 125, 125, 125, 124, 124, 47, 47, 47, 49,
	48, 48, 48, 48, 50, 50, 52, 52, 51, 51,
	54, 54, 54, 54, 55, 55, 37, 37, 37, 37,
	37, 37, 37, 103, 103, 57, 57, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 67, 67, 67,
	67, 67, 67, 58, 58, 58, 58, 58, 58, 58,
	33, 33, 68, 68, 68, 74, 69, 69, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 65,
	65, 65, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 64, 64, 64,
	64, 64, 64, 64, 64, 187, 187, 66, 66, 66,
	66, 31, 31, 31, 31, 31, 129, 129, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 78, 78, 32, 32, 76, 76, 77, 79, 79,
	75, 75, 75, 60, 60, 60, 60, 60, 60, 60,
	60, 62, 62, 62, 80, 80, 81, 81, 82, 82,
	83, 83, 84, 85, 85, 85, 86, 86, 86, 86,
	87, 87, 87, 59, 59, 59, 59, 59, 59, 88,
	88, 88, 88, 92, 92, 70, 70, 72, 72, 71,
	73, 93, 93, 97, 94, 94, 98, 98, 98, 96,
	96, 96, 121, 121, 121, 101, 101, 109, 109, 110,
	110, 102, 102, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 112, 112, 112, 113, 113, 116, 116,
	117, 117, 122, 122, 123, 123, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 181, 182,
	127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 9, 11, 11, 4, 6, 5, 5, 5, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 3, 2, 3, 1, 1, 1,
	1, 1, 2, 3, 3, 3, 3, 3, 3, 3,
	4, 2, 3, 2, 3, 2, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 3, 2, 1, 1,
	1, 4, 4, 4, 5, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 3, 0, 1,
	0, 1, 0, 3, 3, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 3, 0, 1, 2, 3, 3,
	2, 3, 2, 2, 1, 1, 1, 3, 2, 1,
	4, 4, 7, 7, 13, 1, 1, 2, 2, 0,
	1, 1, 3, 0, 1, 3, 1, 2, 3, 1,
	1, 1, 6, 11, 13, 7, 7, 7, 12, 7,
	7, 7, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 3, 3, 3, 3,
	4, 3, 6, 4, 2, 4, 2, 2, 2, 2,
	3, 1, 1, 0, 1, 0, 1, 0, 2, 2,
	0, 2, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 3, 7, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	0, 5, 5, 5, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 6, 8, 8,
	6, 8, 8, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -179, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 141, 115, 134, 48, 157, 158,
	160, 161, 25, 135, 136, 139, 140, -181, 8, 246,
	52, -180, 262, -82, 15, -26, 5, -24, -186, -24,
	-24, -24, -24, -24, -160, 52, -120, 120, 69, 149,
	238, 117, 118, 132, -102, 120, 122, 118, 118, 119,
	120, 238, 117, 118, -51, -122, 55, -115, 156, 254,
	157, 170, 171, 162, 194, 185, 255, 154, 182, 186,
	225, 64, 160, 234, 126, 137, 180, 176, 174, 27,
	199, 260, 175, 129, 200, 204, 226, 167, 168, 228,
	198, 31, 131, 256, 33, 145, 229, 202, 197, 193,
	196, 166, 192, 37, 206, 205, 207, 224, 188, 155,
	177, 18, 140, 143, 201, 203, 124, 147, 259, 230,
	173, 144, 139, 233, 153, 161, 227, 169, 236, 36,
	211, 164, 165, 128, 158, 151, 190, 146, 178, 179,
	195, 163, 191, 159, 148, 141, 235, 212, 261, 189,
	187, 183, 184, 152, 120, 149, 150, 217, 218, 219,
	220, 257, 231, 181, 213, 214, 118, 105, 186, 111,
	215, 119, 31, 147, -131, 118, -104, 150, 217, 218,
	219, 220, 55, 227, 226, 221, -122, 159, -127, -127,
	-127, -127, -127, -2, -86, 17, 16, -5, -3, -181,
	6, 20, 21, -30, 38, 39, -25, -36, 96, -37,
	-122, -56, 71, -61, 28, 55, -115, 23, -60, -57,
	-75, -73, -74, 105, 106, 94, 95, 102, 72, 107,
	-65, -63, -64, -66, 57, 56, 65, 58, 59, 60,
	61, 66, 67, 68, -116, -71, -181, 42, 43, 247,
	248, 249, 250, 253, 251, 74, 32, 237, 245, 244,
	243, 241, 242, 239, 240, 123, 238, 100, 246, -102,
	-39, -40, -41, -42, -53, -74, -181, -51, 11, -46,
	-51, -94, -130, 159, -98, 227, 226, -117, -96, -116,
	-114, 225, 186, 224, 55, -115, 116, 70, 22, 24,
	209, 73, 105, 16, 74, 104, 247, 111, 46, 239,
	240, 237, 249, 250, 238, 215, 28, 10, 25, 135,
	21, 98, 113, 77, 78, 138, 23, 136, 68, 19,
	49, 130, 11, 13, 14, 123, 122, 89, 119, 44,
	8, 107, 26, 86, 40, 133, 42, 87, 17, 241,
	242, 30, 253, 142, 100, 47, 34, 71, 66, 50,
	232, 69, 15, 45, 88, 114, 246, 43, 117, 6,
	252, 29, 134, 41, 118, 216, 76, 121, 67, 5,
	132, 9, 48, 51, 243, 244, 245, 32, 75, 12,
	-161, -150, 55, 119, -51, 246, -116, -110, 123, -110,
	-110, 118, -51, -51, -109, 123, 55, -109, -109, -109,
	-51, 108, -51, 55, 29, 238, 55, 147, 118, 148,
	120, -128, -181, -117, -128, -128, -128, 151, 152, -128,
	-105, 222, 50, -128, -182, 54, -87, 19, 30, -37,
	-122, -83, -84, -37, -82, -2, -24, 34, -28, 21,
	63, 11, -119, 70, 69, 86, -118, 22, -116, 57,
	108, -37, -58, 89, 71, 87, 88, 73, 91, 90,
	101, 94, 95, 96, 97, 98, 99, 100, 92, 93,
	104, 79, 80, 81, 82, 83, 84, 85, -103, -181,
	-74, -181, 109, 110, -61, -61, -61, -61, -61, -61,
	-61, -181, -2, -69, -37, -181, -181, -181, -181, -181,
	-181, -181, -181, -181, -78, -37, -181, -187, -181, -187,
	-187, -187, -187, -187, -187, -187, -181, -181, -181, -181,
	-52, 26, -51, 29, 53, -47, -49, -48, -50, 40,
	44, 46, 41, 42, 43, 47, -126, 22, -39, -181,
	-125, 143, -124, 22, -122, 57, -51, -46, -183, 53,
	11, 51, 53, -94, 159, -95, -99, 228, 230, 79,
	-121, -116, 57, 28, 29, 54, 53, -151, -133, -137,
	-134, -139, -138, -140, -135, -136, 185, 255, 182, 186,
	183, 105, 187, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 189, 199, 29, 137, 178, 179, 180, 181,
	200, 201, 202, 203, 204, 205, 206, 207, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 171, 173, 174,
	175, 176, 177, -116, -128, 120, -177, 51, 55, 71,
	55, -51, -51, 232, -128, 121, -51, 23, 50, -51,
	55, 55, -123, -122, -114, -128, -128, -128, -128, -128,
	-128, -128, -128, -128, -128, -107, 216, 223, -51, 9,
	89, 53, 18, 108, 53, -85, 24, 25, -86, -182,
	-30, -62, -116, 58, 61, -29, 41, -51, -37, -37,
	-67, 66, 71, 67, 68, -118, 96, -123, -117, -114,
	-61, -68, -71, -74, 62, 89, 87, 88, 73, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -129, 55, 57, 55, -60, -60,
	-116, -35, 21, -34, -36, -182, 53, -182, -2, -34,
	-34, -37, -37, -75, -116, -122, -75, -34, -28, -76,
	-77, 75, -75, -182, -34, -35, -34, -34, -90, 143,
	-51, -93, -97, -75, -40, -41, -41, -40, -41, 40,
	40, 40, 45, 40, 45, 40, -48, -122, -182, -54,
	48, 122, 49, -181, -124, -90, 51, -39, -51, -98,
	-95, 53, 229, 231, 232, 50, -37, -143, 104, -162,
	-163, -164, -117, 57, 58, -150, -152, -153, -165, -154,
	124, 128, 129, 132, -158, 126, 119, 133, 66, 71,
	28, 50, 209, 124, 133, 132, 64, -144, 212, -141,
	52, -141, -141, 184, -141, -141, -141, -142, 186, -142,
	-142, -142, 52, 52, -141, -141, -141, -147, 52, -147,
	-147, -148, 52, -148, 50, 51, -51, -175, 257, -176,
	55, -128, 23, -128, -111, 116, 113, 114, -172, 112,
	209, 186, 64, 28, 15, 247, 143, 261, 55, 144,
	-51, -51, -51, -128, -106, 11, 89, 36, -37, -37,
	-123, -84, -87, -101, 19, 11, 32, 32, -34, 66,
	67, 68, 108, -181, -68, -61, -61, -61, -33, 138,
	70, -182, -182, -34, 53, -37, -182, -182, -182, 53,
	51, 22, 53, 11, 108, 53, 11, -182, -34, -79,
	-77, 77, -37, -182, -182, -182, -182, -182, -59, 29,
	32, -2, -181, -181, -55, 53, 12, 79, -44, -43,
	50, 51, -45, 50, -43, 40, 40, 119, 119, 119,
	-91, -116, -55, -39, -55, -99, -100, 233, 230, 236,
	55, 53, -164, 79, 52, 50, 133, -158, -158, 55,
	-158, 55, 55, -156, -116, 66, 57, 58, 59, 66,
	237, 65, 9, 133, 133, 57, -145, 213, 58, -142,
	-142, -141, -142, -143, 29, -143, -143, -143, -149, 57,
	-149, -146, 257, 58, 58, -51, -116, -128, -174, -173,
	-117, -127, -120, -185, 149, 125, 130, 129, 55, 124,
	128, 143, -178, 149, 125, 126, 130, 129, 55, 119,
	133, 124, 128, 143, 132, -112, -113, 121, 22, 119,
	133, 143, 116, -128, -108, 87, 12, -122, -122, 37,
	108, -51, -38, 11, 96, -117, -35, -33, 70, -61,
	-61, -182, -36, -132, 105, 182, 137, 180, 176, 198,
	188, 211, 178, 212, -129, -132, -61, -61, -117, -61,
	-61, 254, -82, 78, -37, 76, -92, 50, -93, -70,
	-72, -71, -181, -2, -88, -116, -91, -82, -97, -37,
	-37, -37, 52, -37, -181, -181, -181, -182, 53, -82,
	-55, 230, 234, 235, -163, -164, -167, -166, -116, 10,
	9, 55, 55, 55, 130, 237, 54, -143, -143, -142,
	-143, 55, 105, 54, 53, 54, 178, 53, 54, 53,
	52, 51, 50, 53, 79, -184, 119, 133, -127, -116,
	-127, -116, -51, -127, -116, 126, -153, 57, -37, -55,
	-39, -182, -61, -182, -141, -141, -141, -148, -141, 168,
	-141, 168, -182, -182, -182, 53, 19, -182, 53, 19,
	-181, -32, 252, -37, 27, -92, 53, -182, -182, -182,
	53, 108, -182, -86, -89, -116, -89, -89, -89, -125,
	-116, -86, 54, 53, -141, -155, 153, 154, 29, 155,
	-155, 133, -143, -142, 57, -142, 214, 58, 58, -89,
	-116, -51, -173, -164, -116, 52, 26, -116, -80, 13,
	-142, 55, -61, -61, -61, -61, -61, -182, 57, 133,
	-72, 32, -2, -181, -116, -116, 53, 54, -182, -182,
	-182, -54, -169, -168, 51, 131, 64, 257, -166, 50,
	66, 156, 50, -156, -143, -143, 54, 54, 54, 52,
	52, 52, -89, -181, 124, -81, 14, 16, -182, -182,
	-182, -182, -31, 89, 257, 9, -70, -2, 108, -116,
	-168, 55, -159, 79, 57, 258, 9, 10, 52, -89,
	-89, -89, 54, -170, -171, 143, 133, -37, -69, -182,
	255, 47, 259, -93, -182, -116, 58, -116, -155, -155,
	-157, -116, 54, 54, 54, -177, -182, 53, -116, 52,
	37, 256, 260, 54, 53, -175, -171, 32, -89, 37,
	127, -116, 145, 54, 257, -51, 146, 259, 52, -181,
	260, -157, -61, 142, 54, -182, -182,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 548, 0, 317, 317, 317, 317, 317, 317, 0,
	69, 601, 0, 0, 0, 0, -2, 307, 308, 0,
	310, 311, 830, 830, 830, 830, 830, 0, 33, 34,
	828, 1, 3, 556, 0, 0, 321, 324, 319, 0,
	601, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	599, 599, 599, 70, 0, 0, 602, 0, 597, 0,
	597, 597, 597, 0, 266, 388, 622, 623, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 0, 0, 0, 0,
	831, 831, 831, 831, 0, 831, 295, 284, 286, 287,
	288, 289, 831, 304, 305, 294, 306, 309, 312, 313,
	314, 315, 316, 27, 560, 0, 0, 548, 29, 0,
	317, 322, 323, 327, 325, 326, 318, 0, 335, 339,
	0, 396, 0, 401, 403, -2, -2, 0, 438, 439,
	440, 441, 442, 0, 0, 0, 0, 0, 0, 0,
	465, 466, 467, 468, 533, 534, 535, 536, 537, 538,
	539, 540, 405, 406, 530, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 521, 0, 495, 495, 495,
	495, 495, 495, 495, 495, 0, 0, 0, 0, 0,
	0, 346, 348, 349, 350, 369, 0, 371, 0, 0,
	41, 45, 0, 805, 584, -2, -2, 0, 0, 620,
	621, -2, 731, -2, 618, 619, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 647, 648, 649,
	650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
	660, 661, 662, 663, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	0, 81, 0, 0, 831, 0, 71, 0, 0, 0,
	0, 0, 831, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 267, 831, 831, 831, 831, 831, 831, 831,
	831, 276, 832, 833, 277, 278, 279, 831, 831, 281,
	0, 296, 0, 290, 28, 829, 22, 0, 0, 557,
	0, 549, 550, 553, 556, 27, 324, 0, 329, 328,
	320, 0, 336, 0, 0, 0, 340, 0, 342, 343,
	0, 399, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 423, 424, 425, 426, 427, 428, 429, 402, 0,
	416, 0, 0, 0, 458, 459, 460, 461, 462, 463,
	0, 331, 27, 0, 436, 0, 0, 0, 0, 0,
	0, 0, 0, 327, 0, 522, 0, 487, 0, 488,
	489, 490, 491, 492, 493, 494, 0, 331, 0, 0,
	43, 0, 387, 0, 0, 0, 0, 0, 0, 376,
	0, 0, 379, 0, 0, 0, 0, 370, 0, 0,
	390, 775, 372, 0, 374, 375, -2, 0, 0, 0,
	39, 40, 0, 46, 805, 48, 49, 0, 0, 0,
	175, 592, 593, 594, 590, 213, 0, 85, 91, 168,
	87, 88, 89, 90, 159, 108, 129, 130, 159, 159,
	159, 159, 159, 172, 172, 172, 172, 141, 142, 143,
	144, 145, 146, 0, 0, 124, 159, 159, 159, 128,
	149, 150, 151, 152, 153, 154, 155, 156, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 161, 161,
	161, 163, 163, 0, 64, 0, 74, 0, 831, 0,
	831, 79, 0, 0, 232, 0, 260, 598, 0, 831,
	263, 264, 389, 624, 625, 268, 269, 270, 271, 272,
	273, 274, 275, 280, 283, 297, 291, 292, 285, 561,
	0, 0, 0, 0, 0, 552, 554, 555, 560, 30,
	327, 0, 541, 0, 0, 0, 330, 25, 397, 398,
	400, 417, 0, 419, 421, 341, 337, 0, 531, -2,
	407, 408, 432, 433, 434, 0, 0, 0, 0, 430,
	412, 0, 443, 444, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 457, 506, 507, 0, 455, 456,
	464, 0, 0, 332, 333, 435, 0, 579, 27, 0,
	0, 0, 0, 0, 530, 0, 0, 0, 0, 528,
	525, 0, 0, 496, 0, 0, 0, 0, 0, 0,
	386, 394, 581, 0, 347, 365, 367, 0, 362, 377,
	378, 380, 0, 382, 0, 384, 385, 351, 352, 353,
	0, 0, 0, 0, 373, 394, 0, 394, 42, 585,
	47, 0, 0, 52, 53, 586, 587, 588, 0, 80,
	214, 216, 219, 220, 221, 82, 83, 84, 0, 199,
	0, 0, 0, 0, 0, 209, 194, 195, 92, 0,
	0, 0, 101, 0, 103, 105, 0, 170, 169, 107,
	0, 172, 172, 159, 172, 135, 136, 175, 0, 175,
	175, 175, 0, 0, 125, 166, 127, 119, 0, 120,
	121, 122, 0, 123, 0, 0, 831, 66, 0, 72,
	73, 67, 600, 68, 830, 69, 0, 613, 233, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 0,
	0, 259, 831, 262, 300, 0, 0, 0, 558, 559,
	0, 551, 23, 0, 595, 596, 542, 543, 344, 418,
	420, 422, 0, 331, 409, 430, 413, 0, 410, 0,
	0, 404, 469, 0, 0, 437, -2, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 548, 0,
	526, 0, 0, 486, 497, 498, 499, 500, 573, 0,
	0, -2, 0, 0, 548, 0, 0, 0, 359, 366,
	0, 0, 360, 0, 361, 381, 383, 0, 0, 0,
	0, 357, 548, 394, 38, 50, 51, 0, 0, 57,
	176, 0, 217, 0, 0, 0, 187, 0, 0, 190,
	0, 192, 193, 0, 210, 93, 94, 95, 96, 97,
	98, 99, 0, 102, 104, 106, 86, 171, 0, 175,
	175, 172, 175, 137, 0, 138, 139, 140, 0, 157,
	0, 126, 0, 0, 0, 0, 0, 65, 75, 76,
	0, 222, 0, 830, 0, 247, 248, 249, 250, 251,
	252, 253, 830, 0, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 830, 614, 615, 616,
	617, 0, 0, 261, 282, 0, 0, 298, 299, 562,
	0, 24, 394, 0, 338, 532, 0, 411, 0, 431,
	414, 470, 334, 0, 159, 159, 511, 159, 163, 514,
	159, 516, 159, 519, 0, 0, 0, 0, 531, 0,
	0, 0, 523, 485, 529, 0, 31, 0, 573, 563,
	575, 577, 0, 27, 0, 569, 0, 556, 582, 395,
	583, 363, 0, 368, 0, 0, 0, 371, 0, 556,
	37, 54, 55, 56, 215, 218, 0, 196, 159, 0,
	0, 188, 189, 191, 0, 100, 160, 131, 132, 175,
	133, 173, 174, 172, 0, 172, 0, 0, 164, 0,
	0, 0, 0, 0, 0, 0, 245, 246, 226, 0,
	227, 229, 230, 231, 0, 209, 225, 301, 302, 544,
	345, 471, 415, 474, 508, 172, 512, 513, 515, 517,
	518, 520, 476, 475, 477, 0, 0, 480, 0, 0,
	0, 0, 0, 527, 0, 32, 0, 578, -2, 0,
	0, 0, 44, 35, 0, 355, 0, 0, 0, 390,
	358, 36, 178, 0, 198, 200, 205, 206, 0, 0,
	201, 209, 134, 175, 158, 175, 167, 0, 0, 0,
	0, 0, 77, 78, 0, 0, 0, 210, 546, 0,
	509, 510, 0, 0, 0, 0, 501, 484, 524, 0,
	576, 0, -2, 0, 571, 570, 0, 364, 391, 392,
	393, 354, 177, 179, 0, 185, 0, 0, 197, 0,
	207, 208, 0, 0, 147, 148, 162, 165, 61, 0,
	0, 0, 0, 0, 0, 26, 0, 0, 478, 479,
	481, 482, 0, 0, 0, 0, 566, 27, 0, 356,
	180, 181, 0, 186, 183, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 255, 0, 0, 547, 545, 483,
	0, 0, 0, 574, -2, 572, 182, 184, 202, 203,
	0, 211, 63, 62, 223, 74, 254, 0, 0, 0,
	502, 0, 505, 0, 0, 228, 256, 0, 0, 503,
	0, 212, 0, 224, 0, 0, 0, 0, 0, 0,
	504, 0, 0, 0, 204, 257, 258,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 262,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:310
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:315
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:316
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:320
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:343
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:351
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:355
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:361
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:368
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:374
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:378
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:384
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:388
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:395
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:407
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:419
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:423
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:429
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:435
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:439
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:443
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:448
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:449
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:453
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:457
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:462
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:466
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:472
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:476
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:480
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:484
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:490
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:494
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:500
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:504
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:508
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:522
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:532
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:536
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:542
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:547
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:562
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:577
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:591
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:595
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:599
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:607
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:611
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:616
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:620
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:625
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:629
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:635
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:640
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:645
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:651
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:656
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:662
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:668
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:675
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:682
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:687
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:691
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:695
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:701
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:706
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:717
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:727
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:732
		{
			yyDollar[1].columnType.NotNull = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:737
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:742
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:747
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:752
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:757
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:762
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:767
		{
			yyDollar[1].columnType.OnUpdate = NewValArg(yyDollar[4].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:772
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:777
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:782
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:787
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:792
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:797
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:804
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:809
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 148:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1008
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1012
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1016
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1020
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1024
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1030
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1035
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1040
		{
			yyVAL.optVal = nil
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1044
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1049
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1053
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1061
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1065
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1071
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1079
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1083
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1088
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1092
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1097
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1101
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1106
		{
			yyVAL.str = ""
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1110
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1114
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1119
		{
			yyVAL.str = ""
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1123
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1129
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1133
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1139
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1143
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1149
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1153
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1158
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1162
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1168
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1172
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1178
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1182
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1186
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1190
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1194
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1198
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1202
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1208
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1212
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1218
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1222
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1228
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1235
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1241
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1247
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1253
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 204:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1261
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1273
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1277
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1281
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1285
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1290
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1297
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1301
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1306
		{
			yyVAL.str = ""
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1310
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1314
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1322
		{
			yyVAL.str = yyDollar[1].str
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1326
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1330
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1336
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1340
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1344
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1350
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1354
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 224:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1368
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1382
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1391
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1395
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1399
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1412
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1422
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1427
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1432
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1436
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1468
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1474
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1478
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 257:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1484
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 258:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1488
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1494
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1500
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 261:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1508
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1513
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1521
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1525
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1531
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1535
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1540
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1546
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1550
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1559
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1563
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1567
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1571
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1575
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1579
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1583
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1587
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1591
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1595
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1599
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1603
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1613
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1617
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1621
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1625
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1629
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1633
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1637
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1647
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1653
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1657
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1663
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1667
		{
			yyVAL.str = "extended "
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1673
		{
			yyVAL.str = ""
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1677
		{
			yyVAL.str = "full "
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1683
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1687
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1691
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1697
		{
			yyVAL.showFilter = nil
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1701
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1705
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1711
		{
			yyVAL.str = ""
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1715
		{
			yyVAL.str = SessionStr
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1719
		{
			yyVAL.str = GlobalStr
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1725
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1729
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1735
		{
			yyVAL.statement = &Begin{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1739
		{
			yyVAL.statement = &Begin{}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1745
		{
			yyVAL.statement = &Commit{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1751
		{
			yyVAL.statement = &Rollback{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1757
		{
			yyVAL.statement = &OtherRead{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1761
		{
			yyVAL.statement = &OtherRead{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1765
		{
			yyVAL.statement = &OtherRead{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1769
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1773
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1778
		{
			setAllowComments(yylex, true)
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1782
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1788
		{
			yyVAL.bytes2 = nil
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1792
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1798
		{
			yyVAL.str = UnionStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1802
		{
			yyVAL.str = UnionAllStr
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1806
		{
			yyVAL.str = UnionDistinctStr
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1811
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1815
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1819
		{
			yyVAL.str = SQLCacheStr
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1824
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1828
		{
			yyVAL.str = DistinctStr
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1833
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1837
		{
			yyVAL.str = StraightJoinHint
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1842
		{
			yyVAL.selectExprs = nil
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1846
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1852
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1856
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1862
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1866
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1870
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 338:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1874
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1879
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1883
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1887
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1894
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1899
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1903
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1909
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1913
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1923
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1927
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1931
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1937
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 354:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1941
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1947
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1951
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1957
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1961
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1974
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1978
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1982
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1986
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1992
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1994
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1998
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2000
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2004
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2006
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2009
		{
			yyVAL.empty = struct{}{}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2011
		{
			yyVAL.empty = struct{}{}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2014
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2018
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2022
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2029
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2035
		{
			yyVAL.str = JoinStr
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2039
		{
			yyVAL.str = JoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2043
		{
			yyVAL.str = JoinStr
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2049
		{
			yyVAL.str = StraightJoinStr
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2055
		{
			yyVAL.str = LeftJoinStr
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2059
		{
			yyVAL.str = LeftJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2063
		{
			yyVAL.str = RightJoinStr
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2067
		{
			yyVAL.str = RightJoinStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2073
		{
			yyVAL.str = NaturalJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2077
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2087
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2091
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2097
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2101
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2106
		{
			yyVAL.indexHints = nil
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2110
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2114
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2118
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2123
		{
			yyVAL.expr = nil
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2127
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2133
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2137
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2141
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2145
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2149
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2153
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2157
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2163
		{
			yyVAL.str = ""
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2167
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2173
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2177
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2183
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2187
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2191
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2195
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2199
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2203
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2207
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2211
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 415:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2215
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2219
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2225
		{
			yyVAL.str = IsNullStr
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2229
		{
			yyVAL.str = IsNotNullStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2233
		{
			yyVAL.str = IsTrueStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2237
		{
			yyVAL.str = IsNotTrueStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2241
		{
			yyVAL.str = IsFalseStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2245
		{
			yyVAL.str = IsNotFalseStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2251
		{
			yyVAL.str = EqualStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2255
		{
			yyVAL.str = LessThanStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2259
		{
			yyVAL.str = GreaterThanStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2263
		{
			yyVAL.str = LessEqualStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2267
		{
			yyVAL.str = GreaterEqualStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2271
		{
			yyVAL.str = NotEqualStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2275
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2280
		{
			yyVAL.expr = nil
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2284
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2290
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2294
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2298
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2304
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2310
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2314
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2320
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2324
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2328
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2332
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2336
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2340
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2344
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2348
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2352
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2356
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2360
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2364
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2368
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2372
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2376
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2380
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2384
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2388
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2392
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2396
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2400
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2404
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2408
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2416
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2430
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2434
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2438
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2456
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2460
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2464
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2474
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2478
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2482
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 475:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2486
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 476:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2490
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2494
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2498
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 479:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2502
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2506
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 481:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2510
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 482:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2514
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 483:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2518
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 484:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2522
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2526
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2530
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2540
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2544
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2548
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2552
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2557
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2562
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2567
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2572
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2586
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2590
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2594
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2598
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2604
		{
			yyVAL.str = ""
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2608
		{
			yyVAL.str = BooleanModeStr
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2612
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 504:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2616
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2620
		{
			yyVAL.str = QueryExpansionStr
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2626
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2630
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2636
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2640
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2644
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2648
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2652
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2656
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2662
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2666
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2670
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2674
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2678
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2682
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2686
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2691
		{
			yyVAL.expr = nil
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2695
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2700
		{
			yyVAL.str = string("")
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2704
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2710
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2714
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2720
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2725
		{
			yyVAL.expr = nil
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2729
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2735
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2739
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 532:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2743
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2749
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2753
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2757
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2761
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2765
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2769
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2773
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2777
		{
			yyVAL.expr = &NullVal{}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2783
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2792
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2796
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2801
		{
			yyVAL.exprs = nil
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2805
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2810
		{
			yyVAL.expr = nil
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2814
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2819
		{
			yyVAL.orderBy = nil
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2823
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2829
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2833
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2839
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2844
		{
			yyVAL.str = AscScr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2848
		{
			yyVAL.str = AscScr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2852
		{
			yyVAL.str = DescScr
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2857
		{
			yyVAL.limit = nil
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2861
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2865
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2869
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2874
		{
			yyVAL.str = ""
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2878
		{
			yyVAL.str = ForUpdateStr
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2882
		{
			yyVAL.str = ShareModeStr
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2895
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2899
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2903
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 566:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2908
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2912
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 568:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2916
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2923
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2927
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2931
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2935
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2940
		{
			yyVAL.updateExprs = nil
		}
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2944
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2950
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2954
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2960
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2964
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2970
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2976
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2986
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2990
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2996
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3002
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3006
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3012
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3016
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3020
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3027
		{
			yyVAL.bytes = []byte("charset")
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3034
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3038
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3042
		{
			yyVAL.expr = &Default{}
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3051
		{
			yyVAL.byt = 0
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3053
		{
			yyVAL.byt = 1
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3056
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3058
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3061
		{
			yyVAL.str = ""
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3063
		{
			yyVAL.str = IgnoreStr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3067
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3069
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3071
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3073
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3075
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3077
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3079
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3081
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3083
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3085
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3088
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3090
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3092
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3096
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3098
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3102
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3106
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3113
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3119
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3123
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3130
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3358
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3367
		{
			decNesting(yylex)
		}
	case 830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3372
		{
			forceEOF(yylex)
		}
	case 831:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3377
		{
			forceEOF(yylex)
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3381
		{
			forceEOF(yylex)
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3385
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
