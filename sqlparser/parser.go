// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const UNIQUE = 57457
const KEY = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const RESTRICT = 57478
const CASCADE = 57479
const NO = 57480
const ACTION = 57481
const BEGIN = 57482
const START = 57483
const TRANSACTION = 57484
const COMMIT = 57485
const ROLLBACK = 57486
const BIT = 57487
const TINYINT = 57488
const SMALLINT = 57489
const SMALLSERIAL = 57490
const MEDIUMINT = 57491
const INT = 57492
const INTEGER = 57493
const SERIAL = 57494
const BIGINT = 57495
const BIGSERIAL = 57496
const INTNUM = 57497
const REAL = 57498
const DOUBLE = 57499
const PRECISION = 57500
const FLOAT_TYPE = 57501
const DECIMAL = 57502
const NUMERIC = 57503
const TIME = 57504
const TIMESTAMP = 57505
const DATETIME = 57506
const YEAR = 57507
const CHAR = 57508
const VARCHAR = 57509
const VARYING = 57510
const BOOL = 57511
const CHARACTER = 57512
const VARBINARY = 57513
const NCHAR = 57514
const UUID = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const JSONB = 57525
const ENUM = 57526
const GEOMETRY = 57527
const POINT = 57528
const LINESTRING = 57529
const POLYGON = 57530
const GEOMETRYCOLLECTION = 57531
const MULTIPOINT = 57532
const MULTILINESTRING = 57533
const MULTIPOLYGON = 57534
const ARRAY = 57535
const NOW = 57536
const NULLX = 57537
const AUTO_INCREMENT = 57538
const APPROXNUM = 57539
const SIGNED = 57540
const UNSIGNED = 57541
const ZEROFILL = 57542
const ZONE = 57543
const DATABASES = 57544
const TABLES = 57545
const VITESS_KEYSPACES = 57546
const VITESS_SHARDS = 57547
const VITESS_TABLETS = 57548
const VSCHEMA_TABLES = 57549
const EXTENDED = 57550
const FULL = 57551
const PROCESSLIST = 57552
const NAMES = 57553
const CHARSET = 57554
const GLOBAL = 57555
const SESSION = 57556
const ISOLATION = 57557
const LEVEL = 57558
const READ = 57559
const WRITE = 57560
const ONLY = 57561
const REPEATABLE = 57562
const COMMITTED = 57563
const UNCOMMITTED = 57564
const SERIALIZABLE = 57565
const CURRENT_TIMESTAMP = 57566
const DATABASE = 57567
const CURRENT_DATE = 57568
const CURRENT_TIME = 57569
const LOCALTIME = 57570
const LOCALTIMESTAMP = 57571
const UTC_DATE = 57572
const UTC_TIME = 57573
const UTC_TIMESTAMP = 57574
const REPLACE = 57575
const CONVERT = 57576
const CAST = 57577
const SUBSTR = 57578
const SUBSTRING = 57579
const GROUP_CONCAT = 57580
const SEPARATOR = 57581
const MATCH = 57582
const AGAINST = 57583
const BOOLEAN = 57584
const LANGUAGE = 57585
const WITH = 57586
const WITHOUT = 57587
const PARSER = 57588
const QUERY = 57589
const EXPANSION = 57590
const UNUSED = 57591
const TYPECAST = 57592

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"TYPECAST",
	"';'",
	"'['",
	"']'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	120, 78,
	-2, 68,
	-1, 36,
	151, 316,
	152, 316,
	-2, 306,
	-1, 248,
	108, 645,
	-2, 641,
	-1, 249,
	108, 646,
	-2, 642,
	-1, 319,
	79, 813,
	-2, 58,
	-1, 320,
	79, 771,
	-2, 59,
	-1, 325,
	79, 755,
	-2, 612,
	-1, 327,
	79, 792,
	-2, 614,
	-1, 611,
	51, 41,
	53, 41,
	-2, 43,
	-1, 742,
	108, 648,
	-2, 644,
	-1, 966,
	5, 28,
	-2, 448,
	-1, 991,
	5, 27,
	-2, 587,
	-1, 1073,
	5, 27,
	-2, 64,
	-1, 1260,
	5, 28,
	-2, 588,
	-1, 1319,
	5, 27,
	-2, 590,
	-1, 1394,
	5, 28,
	-2, 591,
}

const yyPrivate = 57344

const yyLast = 11646

var yyAct = [...]int{

	249, 1400, 907, 1384, 538, 806, 994, 1266, 679, 253,
	1330, 537, 3, 1033, 1156, 1064, 1157, 1184, 1277, 278,
	227, 847, 824, 1075, 605, 901, 853, 603, 846, 1129,
	1153, 324, 1010, 778, 53, 87, 807, 767, 87, 66,
	958, 896, 1061, 621, 999, 252, 255, 794, 744, 775,
	620, 470, 476, 425, 318, 860, 803, 592, 607, 226,
	251, 482, 87, 87, 329, 940, 561, 246, 236, 329,
	490, 305, 315, 566, 567, 313, 87, 1048, 87, 455,
	504, 52, 514, 514, 87, 1193, 1431, 1412, 1428, 304,
	875, 1392, 1374, 240, 1065, 1066, 1425, 1331, 552, 908,
	1411, 1148, 1254, 306, 886, 434, 1391, 1196, 309, 1018,
	1333, 622, 1017, 623, 777, 1019, 1179, 1180, 498, 1178,
	501, 221, 838, 839, 837, 465, 516, 517, 518, 519,
	520, 521, 522, 1293, 499, 500, 497, 503, 502, 512,
	513, 505, 506, 507, 508, 509, 510, 511, 504, 874,
	1050, 514, 709, 1292, 877, 82, 78, 79, 80, 710,
	887, 1341, 1308, 1285, 1208, 222, 223, 224, 225, 798,
	1284, 277, 879, 1207, 1243, 1241, 842, 1332, 220, 1338,
	461, 462, 1427, 1250, 469, 897, 242, 1362, 503, 502,
	512, 513, 505, 506, 507, 508, 509, 510, 511, 504,
	87, 1423, 514, 1385, 329, 329, 329, 329, 1107, 329,
	1247, 469, 804, 1386, 1316, 1283, 329, 1046, 1045, 1218,
	503, 502, 512, 513, 505, 506, 507, 508, 509, 510,
	511, 504, 469, 1219, 514, 323, 1026, 1421, 1191, 1227,
	429, 1353, 1280, 329, 479, 515, 515, 503, 502, 512,
	513, 505, 506, 507, 508, 509, 510, 511, 504, 439,
	1251, 514, 431, 76, 57, 478, 688, 862, 503, 502,
	512, 513, 505, 506, 507, 508, 509, 510, 511, 504,
	81, 863, 514, 428, 458, 459, 460, 1104, 463, 59,
	60, 61, 62, 63, 887, 467, 1009, 525, 507, 508,
	509, 510, 511, 504, 87, 882, 514, 1334, 898, 1008,
	1007, 87, 87, 87, 515, 427, 450, 329, 1390, 435,
	75, 1031, 76, 329, 529, 530, 531, 532, 533, 534,
	535, 503, 502, 512, 513, 505, 506, 507, 508, 509,
	510, 511, 504, 199, 77, 514, 512, 513, 505, 506,
	507, 508, 509, 510, 511, 504, 1108, 309, 514, 1363,
	1367, 1036, 1037, 1038, 73, 515, 1278, 1279, 1281, 1041,
	1039, 275, 276, 527, 528, 323, 323, 323, 323, 452,
	323, 454, 1263, 1029, 1105, 862, 1103, 323, 612, 618,
	554, 555, 556, 557, 558, 559, 560, 515, 1106, 863,
	1116, 974, 952, 713, 716, 825, 827, 426, 451, 453,
	494, 445, 70, 71, 492, 473, 477, 844, 843, 935,
	1202, 489, 1372, 1216, 515, 487, 997, 72, 329, 87,
	624, 1150, 495, 795, 87, 1112, 87, 329, 795, 87,
	981, 489, 87, 751, 68, 515, 87, 862, 329, 329,
	329, 329, 329, 329, 329, 329, 682, 749, 750, 748,
	1337, 863, 329, 329, 1035, 484, 539, 87, 1396, 515,
	1203, 862, 970, 1295, 969, 550, 856, 697, 861, 826,
	857, 858, 329, 50, 859, 863, 87, 430, 323, 74,
	488, 487, 329, 747, 626, 488, 487, 936, 480, 721,
	639, 635, 1152, 449, 1294, 488, 487, 489, 515, 1070,
	1111, 695, 489, 1068, 1051, 1043, 687, 745, 734, 736,
	737, 515, 489, 735, 1373, 1315, 742, 698, 699, 700,
	701, 702, 703, 704, 705, 1290, 329, 69, 719, 720,
	1229, 706, 707, 1062, 746, 1040, 438, 1047, 971, 723,
	303, 768, 782, 769, 1370, 787, 790, 21, 432, 433,
	740, 796, 738, 1190, 743, 1414, 1435, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 770, 488, 487, 1323, 1424, 87, 772, 773,
	87, 87, 87, 87, 87, 488, 487, 1189, 808, 677,
	489, 1188, 87, 1032, 878, 87, 1414, 1413, 323, 87,
	792, 1020, 489, 231, 87, 87, 782, 910, 329, 323,
	323, 323, 323, 323, 323, 323, 323, 441, 442, 443,
	771, 329, 800, 323, 323, 694, 309, 309, 309, 309,
	309, 832, 949, 950, 951, 268, 267, 270, 271, 272,
	273, 309, 693, 725, 269, 274, 783, 784, 821, 683,
	309, 809, 791, 492, 812, 681, 323, 829, 830, 715,
	835, 447, 834, 440, 731, 732, 1407, 469, 279, 47,
	1323, 1404, 329, 426, 329, 851, 469, 87, 1346, 87,
	1323, 1403, 87, 329, 810, 811, 799, 813, 801, 802,
	1323, 1402, 903, 1248, 714, 1323, 1382, 774, 1323, 1347,
	1323, 469, 1323, 1324, 1345, 899, 900, 788, 788, 1197,
	488, 487, 615, 788, 1275, 1274, 47, 539, 1175, 469,
	785, 786, 1262, 469, 232, 1211, 1210, 489, 1205, 1206,
	310, 1205, 1204, 964, 469, 589, 469, 995, 742, 780,
	469, 780, 888, 889, 890, 631, 630, 1258, 996, 1119,
	788, 911, 616, 913, 614, 589, 23, 996, 745, 831,
	941, 614, 933, 942, 503, 502, 512, 513, 505, 506,
	507, 508, 509, 510, 511, 504, 1215, 1154, 514, 323,
	995, 976, 1318, 54, 973, 746, 588, 954, 23, 589,
	23, 964, 323, 594, 597, 598, 599, 595, 995, 596,
	600, 841, 50, 1000, 1001, 991, 50, 955, 956, 957,
	589, 989, 1213, 1212, 990, 1209, 1021, 836, 1429, 329,
	964, 964, 87, 975, 617, 717, 972, 1012, 1409, 1014,
	233, 980, 1377, 948, 50, 1350, 50, 329, 1349, 1348,
	1302, 879, 902, 323, 1169, 323, 897, 1004, 1024, 1013,
	1000, 1001, 329, 892, 323, 904, 905, 680, 1022, 505,
	506, 507, 508, 509, 510, 511, 504, 891, 309, 514,
	1015, 65, 456, 456, 456, 456, 50, 456, 323, 1339,
	1336, 963, 1214, 1154, 456, 1025, 1003, 691, 466, 729,
	468, 938, 939, 818, 477, 87, 329, 978, 819, 329,
	1067, 47, 1042, 1027, 1028, 1030, 1006, 1005, 1073, 457,
	815, 594, 597, 598, 599, 595, 524, 596, 600, 526,
	814, 237, 238, 329, 816, 1063, 87, 87, 1420, 817,
	1069, 1410, 1115, 820, 87, 598, 599, 937, 1418, 947,
	946, 515, 1057, 329, 629, 1078, 536, 448, 540, 541,
	542, 543, 544, 545, 546, 547, 548, 965, 551, 553,
	553, 553, 553, 553, 553, 553, 553, 483, 581, 582,
	583, 584, 982, 321, 1256, 1052, 1053, 1303, 1055, 604,
	481, 471, 912, 329, 329, 1155, 1123, 690, 1128, 808,
	1011, 1142, 472, 1122, 1160, 808, 742, 906, 1141, 602,
	1158, 483, 1109, 1149, 234, 235, 228, 866, 323, 1356,
	1177, 229, 329, 474, 329, 329, 1163, 1125, 1126, 1164,
	945, 54, 1165, 1034, 996, 1355, 1077, 1306, 944, 867,
	1143, 1144, 515, 1146, 1147, 1182, 485, 1176, 1187, 1186,
	1181, 1376, 1375, 872, 1364, 864, 1044, 712, 85, 56,
	865, 219, 58, 1056, 1079, 1058, 1059, 1060, 1217, 1192,
	613, 51, 1, 67, 1088, 1084, 909, 1072, 1074, 918,
	323, 329, 1383, 243, 1329, 85, 85, 1183, 854, 845,
	329, 424, 64, 1371, 855, 852, 632, 873, 1049, 85,
	876, 85, 87, 638, 323, 636, 637, 85, 329, 634,
	640, 633, 207, 869, 316, 456, 601, 329, 625, 486,
	87, 871, 870, 1102, 323, 1231, 456, 456, 456, 456,
	456, 456, 456, 456, 1101, 1228, 914, 1110, 708, 934,
	456, 456, 464, 209, 1085, 1081, 323, 1232, 1086, 1083,
	1082, 523, 72, 943, 1016, 322, 1161, 718, 475, 1200,
	1239, 788, 1354, 1087, 1162, 1011, 309, 788, 1151, 1080,
	329, 1305, 329, 329, 329, 87, 329, 979, 549, 1268,
	1269, 1270, 329, 1166, 1167, 1265, 1257, 1168, 793, 254,
	1170, 733, 1234, 323, 266, 323, 1185, 1273, 263, 1271,
	265, 1220, 868, 1022, 264, 47, 1282, 724, 988, 496,
	1222, 244, 308, 329, 329, 87, 329, 329, 329, 540,
	1296, 585, 593, 85, 1225, 591, 590, 1002, 329, 1198,
	1199, 998, 1201, 307, 1118, 1253, 321, 1361, 1300, 1299,
	728, 25, 55, 239, 19, 18, 880, 881, 883, 884,
	885, 17, 1221, 20, 16, 15, 14, 29, 13, 12,
	11, 1223, 10, 329, 329, 893, 894, 895, 310, 310,
	310, 310, 310, 1319, 9, 1317, 329, 8, 1158, 1226,
	7, 6, 5, 604, 329, 828, 4, 230, 323, 22,
	2, 0, 310, 1335, 1328, 0, 0, 1340, 0, 1230,
	0, 1342, 0, 329, 0, 0, 0, 0, 0, 1289,
	1351, 1291, 0, 0, 0, 1309, 1310, 0, 1311, 1312,
	1313, 0, 0, 0, 329, 0, 0, 85, 0, 311,
	0, 0, 1366, 1365, 85, 609, 85, 0, 1158, 1255,
	1369, 1267, 1307, 1267, 1267, 1267, 539, 1272, 0, 329,
	329, 329, 0, 323, 1378, 0, 1379, 1380, 1381, 0,
	456, 1388, 456, 0, 84, 0, 0, 0, 329, 0,
	1393, 456, 0, 0, 808, 329, 0, 1288, 329, 0,
	722, 0, 0, 0, 1267, 1297, 329, 323, 323, 1301,
	0, 1405, 314, 0, 1398, 1399, 0, 0, 0, 1304,
	0, 0, 0, 0, 0, 436, 0, 437, 1416, 1415,
	329, 1417, 0, 444, 741, 329, 0, 1419, 0, 0,
	953, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	329, 1432, 0, 0, 1321, 1322, 0, 0, 779, 781,
	0, 0, 0, 0, 0, 0, 0, 1185, 0, 0,
	0, 0, 85, 0, 797, 1034, 0, 85, 0, 85,
	0, 0, 85, 0, 0, 85, 1343, 0, 1344, 696,
	0, 0, 0, 0, 1267, 0, 0, 0, 0, 0,
	0, 0, 992, 993, 0, 0, 0, 1054, 0, 0,
	85, 0, 0, 0, 0, 1368, 0, 0, 1433, 0,
	0, 0, 0, 0, 823, 0, 0, 0, 0, 85,
	310, 0, 0, 0, 0, 0, 0, 0, 696, 0,
	1267, 1267, 1267, 0, 0, 0, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 788, 321, 0, 1395,
	0, 0, 1387, 539, 0, 0, 1397, 0, 0, 1401,
	848, 0, 0, 0, 0, 0, 0, 1408, 0, 0,
	243, 0, 0, 0, 0, 243, 243, 0, 0, 789,
	789, 243, 0, 0, 0, 789, 0, 0, 0, 0,
	0, 1267, 0, 0, 0, 47, 1422, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1401, 0, 0, 0, 243, 243, 243, 243, 0,
	85, 456, 789, 85, 85, 85, 85, 85, 0, 0,
	0, 0, 0, 0, 0, 822, 1124, 0, 85, 0,
	0, 0, 609, 587, 0, 0, 741, 85, 85, 0,
	0, 0, 611, 0, 0, 1194, 503, 502, 512, 513,
	505, 506, 507, 508, 509, 510, 511, 504, 0, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 1159,
	0, 47, 961, 0, 0, 0, 962, 0, 0, 0,
	0, 0, 0, 966, 967, 968, 1171, 1172, 1173, 0,
	0, 0, 977, 0, 0, 0, 0, 983, 0, 0,
	984, 985, 986, 987, 0, 0, 0, 0, 0, 0,
	85, 0, 85, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 1195, 503, 502, 512, 513, 505, 506, 507,
	508, 509, 510, 511, 504, 1236, 1237, 514, 1238, 0,
	696, 0, 1240, 0, 1242, 0, 0, 0, 0, 0,
	0, 0, 243, 0, 0, 0, 0, 0, 678, 0,
	0, 0, 0, 684, 0, 685, 848, 0, 689, 0,
	0, 692, 503, 502, 512, 513, 505, 506, 507, 508,
	509, 510, 511, 504, 0, 0, 514, 0, 0, 0,
	1276, 0, 0, 0, 0, 0, 711, 0, 310, 0,
	243, 1287, 0, 0, 0, 0, 0, 0, 0, 960,
	0, 0, 0, 0, 0, 730, 243, 0, 0, 0,
	959, 0, 0, 515, 0, 0, 562, 1252, 1076, 503,
	502, 512, 513, 505, 506, 507, 508, 509, 510, 511,
	504, 1130, 0, 514, 502, 512, 513, 505, 506, 507,
	508, 509, 510, 511, 504, 85, 924, 514, 564, 0,
	0, 0, 0, 0, 1127, 0, 0, 0, 0, 923,
	0, 0, 1121, 1132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 0, 1145, 0, 928, 0, 0, 0,
	515, 0, 565, 0, 0, 922, 0, 579, 563, 0,
	0, 1174, 568, 1134, 0, 1139, 805, 1133, 0, 1131,
	0, 205, 0, 0, 0, 1137, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 1135, 1136, 1159, 0, 0,
	1320, 848, 0, 848, 833, 215, 0, 0, 0, 515,
	0, 1138, 1140, 919, 916, 917, 0, 915, 0, 1113,
	1114, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	580, 0, 1352, 0, 926, 929, 0, 0, 243, 0,
	0, 0, 0, 0, 0, 200, 0, 1159, 696, 47,
	0, 202, 0, 0, 0, 1094, 515, 0, 208, 204,
	0, 0, 0, 789, 0, 0, 930, 0, 931, 789,
	515, 932, 0, 1233, 0, 0, 0, 0, 921, 0,
	1235, 0, 0, 0, 0, 0, 1121, 206, 0, 0,
	210, 0, 1244, 1245, 1246, 0, 0, 1249, 0, 0,
	0, 0, 0, 0, 920, 0, 0, 0, 0, 0,
	1259, 1260, 1261, 0, 1264, 0, 0, 0, 0, 1095,
	0, 0, 0, 0, 1097, 1090, 1091, 201, 1098, 1093,
	1092, 0, 1100, 1096, 0, 0, 0, 0, 0, 0,
	0, 0, 925, 1099, 0, 0, 1286, 0, 0, 1089,
	0, 848, 0, 0, 0, 0, 1430, 927, 0, 203,
	0, 211, 212, 213, 214, 218, 0, 0, 0, 0,
	217, 216, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1076, 848, 0, 0, 0,
	0, 658, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1325,
	1326, 1327, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 609, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1357, 1358, 1359, 1360, 0, 0, 0, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1071, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 659,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1389, 0, 0, 0, 0, 1394, 0, 0,
	0, 0, 0, 1117, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 1406, 672, 673, 0, 674, 675,
	676, 660, 661, 662, 663, 641, 643, 0, 579, 642,
	645, 0, 656, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 657, 664, 665, 666, 667, 668, 669,
	670, 671, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 789, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 403, 85, 374, 415, 351, 366,
	423, 367, 368, 396, 337, 382, 142, 363, 0, 354,
	332, 360, 333, 352, 376, 109, 350, 405, 385, 121,
	421, 124, 390, 0, 161, 133, 0, 0, 378, 407,
	380, 401, 373, 397, 342, 389, 416, 364, 393, 417,
	0, 0, 0, 328, 0, 849, 850, 0, 0, 0,
	0, 0, 101, 0, 392, 412, 362, 395, 331, 391,
	0, 335, 338, 422, 410, 357, 358, 1023, 0, 0,
	0, 0, 0, 0, 377, 381, 398, 371, 0, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 388, 0,
	0, 0, 339, 336, 1298, 375, 0, 0, 0, 341,
	0, 356, 399, 0, 330, 402, 408, 372, 186, 411,
	370, 369, 148, 0, 104, 0, 165, 113, 365, 122,
	414, 379, 406, 353, 361, 105, 359, 154, 143, 177,
	387, 144, 153, 125, 169, 149, 176, 187, 188, 167,
	185, 156, 97, 139, 88, 90, 166, 175, 102, 157,
	93, 173, 163, 164, 131, 117, 118, 159, 91, 92,
	0, 152, 108, 147, 112, 107, 141, 170, 171, 106,
	196, 98, 183, 184, 95, 99, 182, 138, 181, 168,
	174, 132, 129, 94, 172, 130, 128, 120, 0, 110,
	114, 145, 127, 146, 115, 135, 134, 136, 0, 140,
	0, 334, 0, 162, 179, 197, 198, 349, 409, 189,
	190, 191, 192, 0, 0, 0, 137, 100, 116, 158,
	119, 126, 151, 195, 394, 155, 103, 178, 160, 345,
	348, 343, 344, 383, 384, 418, 419, 420, 400, 340,
	0, 346, 347, 0, 404, 386, 89, 96, 123, 193,
	194, 0, 150, 111, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 403, 0,
	374, 415, 351, 366, 423, 367, 368, 396, 337, 382,
	142, 363, 0, 354, 332, 360, 333, 352, 376, 109,
	350, 405, 385, 121, 421, 124, 390, 0, 161, 133,
	0, 1426, 378, 407, 380, 401, 373, 397, 342, 389,
	416, 364, 393, 417, 0, 0, 0, 328, 0, 849,
	850, 0, 0, 0, 0, 0, 101, 0, 392, 412,
	362, 395, 331, 391, 0, 335, 338, 422, 410, 357,
	358, 0, 0, 0, 0, 0, 0, 0, 377, 381,
	398, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 388, 0, 0, 0, 339, 336, 0, 375,
	0, 0, 0, 341, 0, 356, 399, 0, 330, 402,
	408, 372, 186, 411, 370, 369, 148, 0, 104, 0,
	165, 113, 365, 122, 414, 379, 406, 353, 361, 105,
	359, 154, 143, 177, 387, 144, 153, 125, 169, 149,
	176, 187, 188, 167, 185, 156, 97, 139, 88, 90,
	166, 175, 102, 157, 93, 173, 163, 164, 131, 117,
	118, 159, 91, 92, 0, 152, 108, 147, 112, 107,
	141, 170, 171, 106, 196, 98, 183, 184, 95, 99,
	182, 138, 181, 168, 174, 132, 129, 94, 172, 130,
	128, 120, 0, 110, 114, 145, 127, 146, 115, 135,
	134, 136, 0, 140, 0, 334, 0, 162, 179, 197,
	198, 349, 409, 189, 190, 191, 192, 0, 0, 0,
	137, 100, 116, 158, 119, 126, 151, 195, 394, 155,
	103, 178, 160, 345, 348, 343, 344, 383, 384, 418,
	419, 420, 400, 340, 0, 346, 347, 0, 404, 386,
	89, 96, 123, 193, 194, 0, 150, 111, 180, 413,
	403, 0, 374, 415, 351, 366, 423, 367, 368, 396,
	337, 382, 142, 363, 0, 354, 332, 360, 333, 352,
	376, 109, 350, 405, 385, 121, 421, 124, 390, 0,
	161, 133, 0, 0, 378, 407, 380, 401, 373, 397,
	342, 389, 416, 364, 393, 417, 0, 0, 0, 328,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	392, 412, 362, 395, 331, 391, 0, 335, 338, 422,
	410, 357, 358, 0, 0, 0, 0, 0, 0, 0,
	377, 381, 398, 371, 0, 0, 0, 0, 0, 0,
	1120, 0, 355, 0, 388, 0, 0, 0, 339, 336,
	0, 375, 0, 0, 0, 341, 0, 356, 399, 0,
	330, 402, 408, 372, 186, 411, 370, 369, 148, 0,
	104, 0, 165, 113, 365, 122, 414, 379, 406, 353,
	361, 105, 359, 154, 143, 177, 387, 144, 153, 125,
	169, 149, 176, 187, 188, 167, 185, 156, 97, 139,
	88, 90, 166, 175, 102, 157, 93, 173, 163, 164,
	131, 117, 118, 159, 91, 92, 0, 152, 108, 147,
	112, 107, 141, 170, 171, 106, 196, 98, 183, 184,
	95, 99, 182, 138, 181, 168, 174, 132, 129, 94,
	172, 130, 128, 120, 0, 110, 114, 145, 127, 146,
	115, 135, 134, 136, 0, 140, 0, 334, 0, 162,
	179, 197, 198, 349, 409, 189, 190, 191, 192, 0,
	0, 0, 137, 100, 116, 158, 119, 126, 151, 195,
	394, 155, 103, 178, 160, 345, 348, 343, 344, 383,
	384, 418, 419, 420, 400, 340, 0, 346, 347, 0,
	404, 386, 89, 96, 123, 193, 194, 0, 150, 111,
	180, 413, 403, 0, 374, 415, 351, 366, 423, 367,
	368, 396, 337, 382, 142, 363, 0, 354, 332, 360,
	333, 352, 376, 109, 350, 405, 385, 121, 421, 124,
	390, 0, 161, 133, 0, 0, 378, 407, 380, 401,
	373, 397, 342, 389, 416, 364, 393, 417, 50, 0,
	0, 328, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 392, 412, 362, 395, 331, 391, 0, 335,
	338, 422, 410, 357, 358, 0, 0, 0, 0, 0,
	0, 0, 377, 381, 398, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 388, 0, 0, 0,
	339, 336, 0, 375, 0, 0, 0, 341, 0, 356,
	399, 0, 330, 402, 408, 372, 186, 411, 370, 369,
	148, 0, 104, 0, 165, 113, 365, 122, 414, 379,
	406, 353, 361, 105, 359, 154, 143, 177, 387, 144,
	153, 125, 169, 149, 176, 187, 188, 167, 185, 156,
	97, 139, 88, 90, 166, 175, 102, 157, 93, 173,
	163, 164, 131, 117, 118, 159, 91, 92, 0, 152,
	108, 147, 112, 107, 141, 170, 171, 106, 196, 98,
	183, 184, 95, 99, 182, 138, 181, 168, 174, 132,
	129, 94, 172, 130, 128, 120, 0, 110, 114, 145,
	127, 146, 115, 135, 134, 136, 0, 140, 0, 334,
	0, 162, 179, 197, 198, 349, 409, 189, 190, 191,
	192, 0, 0, 0, 137, 100, 116, 158, 119, 126,
	151, 195, 394, 155, 103, 178, 160, 345, 348, 343,
	344, 383, 384, 418, 419, 420, 400, 340, 0, 346,
	347, 0, 404, 386, 89, 96, 123, 193, 194, 0,
	150, 111, 180, 413, 403, 0, 374, 415, 351, 366,
	423, 367, 368, 396, 337, 382, 142, 363, 0, 354,
	332, 360, 333, 352, 376, 109, 350, 405, 385, 121,
	421, 124, 390, 0, 161, 133, 0, 0, 378, 407,
	380, 401, 373, 397, 342, 389, 416, 364, 393, 417,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 392, 412, 362, 395, 331, 391,
	0, 335, 338, 422, 410, 357, 358, 0, 0, 0,
	0, 0, 0, 0, 377, 381, 398, 371, 0, 0,
	0, 0, 0, 0, 739, 0, 355, 0, 388, 0,
	0, 0, 339, 336, 0, 375, 0, 0, 0, 341,
	0, 356, 399, 0, 330, 402, 408, 372, 186, 411,
	370, 369, 148, 0, 104, 0, 165, 113, 365, 122,
	414, 379, 406, 353, 361, 105, 359, 154, 143, 177,
	387, 144, 153, 125, 169, 149, 176, 187, 188, 167,
	185, 156, 97, 139, 88, 90, 166, 175, 102, 157,
	93, 173, 163, 164, 131, 117, 118, 159, 91, 92,
	0, 152, 108, 147, 112, 107, 141, 170, 171, 106,
	196, 98, 183, 184, 95, 99, 182, 138, 181, 168,
	174, 132, 129, 94, 172, 130, 128, 120, 0, 110,
	114, 145, 127, 146, 115, 135, 134, 136, 0, 140,
	0, 334, 0, 162, 179, 197, 198, 349, 409, 189,
	190, 191, 192, 0, 0, 0, 137, 100, 116, 158,
	119, 126, 151, 195, 394, 155, 103, 178, 160, 345,
	348, 343, 344, 383, 384, 418, 419, 420, 400, 340,
	0, 346, 347, 0, 404, 386, 89, 96, 123, 193,
	194, 0, 150, 111, 180, 413, 403, 0, 374, 415,
	351, 366, 423, 367, 368, 396, 337, 382, 142, 363,
	0, 354, 332, 360, 333, 352, 376, 109, 350, 405,
	385, 121, 421, 124, 390, 0, 161, 133, 0, 0,
	378, 407, 380, 401, 373, 397, 342, 389, 416, 364,
	393, 417, 0, 0, 0, 328, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 392, 412, 362, 395,
	331, 391, 0, 335, 338, 422, 410, 357, 358, 0,
	0, 0, 0, 0, 0, 0, 377, 381, 398, 371,
	0, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	388, 0, 0, 0, 339, 336, 0, 375, 0, 0,
	0, 341, 0, 356, 399, 0, 330, 402, 408, 372,
	186, 411, 370, 369, 148, 0, 104, 0, 165, 113,
	365, 122, 414, 379, 406, 353, 361, 105, 359, 154,
	143, 177, 387, 144, 153, 125, 169, 149, 176, 187,
	188, 167, 185, 156, 97, 139, 88, 90, 166, 175,
	102, 157, 93, 173, 163, 164, 131, 117, 118, 159,
	91, 92, 0, 152, 108, 147, 112, 107, 141, 170,
	171, 106, 196, 98, 183, 184, 95, 99, 182, 138,
	181, 168, 174, 132, 129, 94, 172, 130, 128, 120,
	0, 110, 114, 145, 127, 146, 115, 135, 134, 136,
	0, 140, 0, 334, 0, 162, 179, 197, 198, 349,
	409, 189, 190, 191, 192, 0, 0, 0, 137, 100,
	116, 158, 119, 126, 151, 195, 394, 155, 103, 178,
	160, 345, 348, 343, 344, 383, 384, 418, 419, 420,
	400, 340, 0, 346, 347, 0, 404, 386, 89, 96,
	123, 193, 194, 0, 150, 111, 180, 413, 403, 0,
	374, 415, 351, 366, 423, 367, 368, 396, 337, 382,
	142, 363, 0, 354, 332, 360, 333, 352, 376, 109,
	350, 405, 385, 121, 421, 124, 390, 0, 161, 133,
	0, 0, 378, 407, 380, 401, 373, 397, 342, 389,
	416, 364, 393, 417, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 392, 412,
	362, 395, 331, 391, 0, 335, 338, 422, 410, 357,
	358, 0, 0, 0, 0, 0, 0, 0, 377, 381,
	398, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 388, 0, 0, 0, 339, 336, 0, 375,
	0, 0, 0, 341, 0, 356, 399, 0, 330, 402,
	408, 372, 186, 411, 370, 369, 148, 0, 104, 0,
	165, 113, 365, 122, 414, 379, 406, 353, 361, 105,
	359, 154, 143, 177, 387, 144, 153, 125, 169, 149,
	176, 187, 188, 167, 185, 156, 97, 139, 88, 90,
	166, 175, 102, 157, 93, 173, 163, 164, 131, 117,
	118, 159, 91, 92, 0, 152, 108, 147, 112, 107,
	141, 170, 171, 106, 196, 98, 183, 184, 95, 99,
	182, 138, 181, 168, 174, 132, 129, 94, 172, 130,
	128, 120, 0, 110, 114, 145, 127, 146, 115, 135,
	134, 136, 0, 140, 0, 334, 0, 162, 179, 197,
	198, 349, 409, 189, 190, 191, 192, 0, 0, 0,
	137, 100, 116, 158, 119, 126, 151, 195, 394, 155,
	103, 178, 160, 345, 348, 343, 344, 383, 384, 418,
	419, 420, 400, 340, 0, 346, 347, 0, 404, 386,
	89, 96, 123, 193, 194, 0, 150, 111, 180, 413,
	403, 0, 374, 415, 351, 366, 423, 367, 368, 396,
	337, 382, 142, 363, 0, 354, 332, 360, 333, 352,
	376, 109, 350, 405, 385, 121, 421, 124, 390, 0,
	161, 133, 0, 0, 378, 407, 380, 401, 373, 397,
	342, 389, 416, 364, 393, 417, 0, 0, 0, 328,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	392, 412, 362, 395, 331, 391, 0, 335, 338, 422,
	410, 357, 358, 0, 0, 0, 0, 0, 0, 0,
	377, 381, 398, 371, 0, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 388, 0, 0, 0, 339, 336,
	0, 375, 0, 0, 0, 341, 0, 356, 399, 0,
	330, 402, 408, 372, 186, 411, 370, 369, 148, 0,
	104, 0, 165, 113, 365, 122, 414, 379, 406, 353,
	361, 105, 359, 154, 143, 177, 387, 144, 153, 125,
	169, 149, 176, 187, 188, 167, 185, 156, 97, 139,
	88, 90, 166, 175, 102, 157, 93, 173, 163, 164,
	131, 117, 118, 159, 91, 92, 0, 152, 108, 147,
	112, 107, 141, 170, 171, 106, 196, 98, 183, 184,
	95, 326, 182, 138, 181, 168, 174, 132, 129, 94,
	172, 130, 128, 120, 0, 110, 114, 145, 127, 146,
	115, 135, 134, 136, 0, 140, 0, 334, 0, 162,
	179, 197, 198, 349, 409, 189, 190, 191, 192, 0,
	0, 0, 327, 325, 116, 158, 119, 126, 151, 195,
	394, 155, 103, 178, 160, 345, 348, 343, 344, 383,
	384, 418, 419, 420, 400, 340, 0, 346, 347, 0,
	404, 386, 89, 96, 123, 193, 194, 0, 150, 111,
	180, 413, 403, 0, 374, 415, 351, 366, 423, 367,
	368, 396, 337, 382, 142, 363, 0, 354, 332, 360,
	333, 352, 376, 109, 350, 405, 385, 121, 421, 124,
	390, 0, 161, 133, 0, 0, 378, 407, 380, 401,
	373, 397, 342, 389, 416, 364, 393, 417, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 392, 412, 362, 395, 331, 391, 0, 335,
	338, 422, 410, 357, 358, 0, 0, 0, 0, 0,
	0, 0, 377, 381, 398, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 388, 0, 0, 0,
	339, 336, 0, 375, 0, 0, 0, 341, 0, 356,
	399, 0, 330, 402, 408, 372, 186, 411, 370, 369,
	148, 0, 104, 0, 165, 113, 365, 122, 414, 379,
	406, 353, 361, 105, 359, 154, 143, 177, 387, 144,
	153, 125, 169, 149, 176, 187, 188, 167, 185, 156,
	97, 139, 88, 90, 166, 175, 102, 157, 93, 173,
	163, 164, 131, 117, 118, 159, 91, 92, 0, 152,
	108, 147, 112, 107, 141, 170, 171, 106, 196, 98,
	183, 184, 95, 99, 182, 138, 181, 168, 174, 132,
	129, 94, 172, 130, 128, 120, 0, 110, 114, 145,
	127, 146, 115, 135, 134, 136, 0, 140, 0, 334,
	0, 162, 179, 197, 198, 349, 409, 189, 190, 191,
	192, 0, 0, 0, 137, 100, 116, 158, 119, 126,
	151, 195, 394, 155, 103, 178, 160, 345, 348, 343,
	344, 383, 384, 418, 419, 420, 400, 340, 0, 346,
	347, 0, 404, 386, 89, 96, 123, 193, 194, 0,
	150, 111, 180, 413, 403, 0, 374, 415, 351, 366,
	423, 367, 368, 396, 337, 382, 142, 363, 0, 354,
	332, 360, 333, 352, 376, 109, 350, 405, 385, 121,
	421, 124, 390, 0, 161, 133, 0, 0, 378, 407,
	380, 401, 373, 397, 342, 389, 416, 364, 393, 417,
	0, 0, 0, 328, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 392, 412, 362, 395, 331, 391,
	0, 335, 338, 422, 410, 357, 358, 0, 0, 0,
	0, 0, 0, 0, 377, 381, 398, 371, 0, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 388, 0,
	0, 0, 339, 336, 0, 375, 0, 0, 0, 341,
	0, 356, 399, 0, 330, 402, 408, 372, 186, 411,
	370, 369, 148, 0, 104, 0, 165, 113, 365, 122,
	414, 379, 406, 353, 361, 105, 359, 154, 143, 177,
	387, 144, 153, 125, 169, 149, 176, 187, 188, 167,
	185, 156, 97, 139, 88, 90, 166, 619, 102, 157,
	93, 173, 163, 164, 131, 117, 118, 159, 91, 92,
	0, 152, 108, 147, 112, 107, 141, 170, 171, 106,
	196, 98, 183, 184, 95, 326, 182, 138, 181, 168,
	174, 132, 129, 94, 172, 130, 128, 120, 0, 110,
	114, 145, 127, 146, 115, 135, 134, 136, 0, 140,
	0, 334, 0, 162, 179, 197, 198, 349, 409, 189,
	190, 191, 192, 0, 0, 0, 327, 325, 116, 158,
	119, 126, 151, 195, 394, 155, 103, 178, 160, 345,
	348, 343, 344, 383, 384, 418, 419, 420, 400, 340,
	0, 346, 347, 0, 404, 386, 89, 96, 123, 193,
	194, 0, 150, 111, 180, 413, 403, 0, 374, 415,
	351, 366, 423, 367, 368, 396, 337, 382, 142, 363,
	0, 354, 332, 360, 333, 352, 376, 109, 350, 405,
	385, 121, 421, 124, 390, 0, 161, 133, 0, 0,
	378, 407, 380, 401, 373, 397, 342, 389, 416, 364,
	393, 417, 0, 0, 0, 328, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 392, 412, 362, 395,
	331, 391, 0, 335, 338, 422, 410, 357, 358, 0,
	0, 0, 0, 0, 0, 0, 377, 381, 398, 371,
	0, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	388, 0, 0, 0, 339, 336, 0, 375, 0, 0,
	0, 341, 0, 356, 399, 0, 330, 402, 408, 372,
	186, 411, 370, 369, 148, 0, 104, 0, 165, 113,
	365, 122, 414, 379, 406, 353, 361, 105, 359, 154,
	143, 177, 387, 144, 153, 125, 169, 149, 176, 187,
	188, 167, 185, 156, 97, 139, 88, 90, 166, 317,
	102, 157, 93, 173, 163, 164, 131, 117, 118, 159,
	91, 92, 0, 152, 108, 147, 112, 107, 141, 170,
	171, 106, 196, 98, 183, 184, 95, 326, 182, 138,
	181, 168, 174, 132, 129, 94, 172, 130, 128, 120,
	0, 110, 114, 145, 127, 146, 115, 135, 134, 136,
	0, 140, 0, 334, 0, 162, 179, 197, 198, 349,
	409, 189, 190, 191, 192, 0, 0, 0, 327, 325,
	320, 319, 119, 126, 151, 195, 394, 155, 103, 178,
	160, 345, 348, 343, 344, 383, 384, 418, 419, 420,
	400, 340, 0, 346, 347, 0, 404, 386, 89, 96,
	123, 193, 194, 0, 150, 111, 180, 142, 0, 0,
	776, 0, 250, 0, 0, 0, 109, 247, 0, 0,
	121, 289, 124, 0, 0, 161, 133, 0, 0, 0,
	0, 280, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 248, 268, 267, 270, 271, 272,
	273, 0, 0, 101, 269, 274, 275, 276, 0, 0,
	245, 261, 0, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 241, 0, 0, 0, 301,
	0, 260, 0, 0, 256, 257, 262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 299, 148, 0, 104, 0, 165, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 154, 143,
	177, 0, 144, 153, 125, 169, 149, 176, 187, 188,
	167, 185, 156, 97, 139, 88, 90, 166, 175, 102,
	157, 93, 173, 163, 164, 131, 117, 118, 159, 91,
	92, 0, 152, 108, 147, 112, 107, 141, 170, 171,
	106, 196, 98, 183, 184, 95, 99, 182, 138, 181,
	168, 174, 132, 129, 94, 172, 130, 128, 120, 0,
	110, 114, 145, 127, 146, 115, 135, 134, 136, 0,
	140, 0, 0, 0, 162, 179, 197, 198, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 137, 100, 116,
	158, 119, 126, 151, 195, 0, 155, 103, 178, 160,
	290, 300, 296, 297, 294, 295, 293, 292, 291, 302,
	282, 283, 284, 285, 287, 0, 286, 89, 96, 123,
	193, 194, 142, 150, 111, 180, 298, 250, 0, 0,
	0, 109, 247, 0, 0, 121, 289, 124, 0, 0,
	161, 133, 0, 0, 0, 0, 280, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 469, 248,
	268, 267, 270, 271, 272, 273, 0, 0, 101, 269,
	274, 275, 276, 0, 0, 245, 261, 0, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	0, 0, 0, 0, 301, 0, 260, 0, 0, 256,
	257, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 299, 148, 0,
	104, 0, 165, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 154, 143, 177, 0, 144, 153, 125,
	169, 149, 176, 187, 188, 167, 185, 156, 97, 139,
	88, 90, 166, 175, 102, 157, 93, 173, 163, 164,
	131, 117, 118, 159, 91, 92, 0, 152, 108, 147,
	112, 107, 141, 170, 171, 106, 196, 98, 183, 184,
	95, 99, 182, 138, 181, 168, 174, 132, 129, 94,
	172, 130, 128, 120, 0, 110, 114, 145, 127, 146,
	115, 135, 134, 136, 0, 140, 0, 0, 0, 162,
	179, 197, 198, 0, 0, 189, 190, 191, 192, 0,
	0, 0, 137, 100, 116, 158, 119, 126, 151, 195,
	0, 155, 103, 178, 160, 290, 300, 296, 297, 294,
	295, 293, 292, 291, 302, 282, 283, 284, 285, 287,
	0, 286, 89, 96, 123, 193, 194, 142, 150, 111,
	180, 298, 250, 0, 0, 0, 109, 247, 0, 0,
	121, 289, 124, 0, 0, 161, 133, 0, 0, 0,
	0, 280, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 248, 268, 267, 270, 271, 272,
	273, 0, 0, 101, 269, 274, 275, 276, 0, 0,
	245, 261, 0, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 241, 0, 0, 0, 301,
	0, 260, 0, 0, 256, 257, 262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 299, 148, 0, 104, 0, 165, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 154, 143,
	177, 0, 144, 153, 125, 169, 149, 176, 187, 188,
	167, 185, 156, 97, 139, 88, 90, 166, 175, 102,
	157, 93, 173, 163, 164, 131, 117, 118, 159, 91,
	92, 0, 152, 108, 147, 112, 107, 141, 170, 171,
	106, 196, 98, 183, 184, 95, 99, 182, 138, 181,
	168, 174, 132, 129, 94, 172, 130, 128, 120, 0,
	110, 114, 145, 127, 146, 115, 135, 134, 136, 0,
	140, 0, 0, 0, 162, 179, 197, 198, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 137, 100, 116,
	158, 119, 126, 151, 195, 0, 155, 103, 178, 160,
	290, 300, 296, 297, 294, 295, 293, 292, 291, 302,
	282, 283, 284, 285, 287, 0, 286, 89, 96, 123,
	193, 194, 142, 150, 111, 180, 298, 250, 0, 0,
	0, 109, 247, 0, 0, 121, 289, 124, 0, 0,
	161, 133, 0, 0, 0, 0, 280, 281, 0, 0,
	0, 0, 0, 0, 840, 0, 50, 0, 0, 248,
	268, 267, 270, 271, 272, 273, 0, 0, 101, 269,
	274, 275, 276, 0, 0, 245, 261, 0, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	0, 0, 0, 0, 301, 0, 260, 0, 0, 256,
	257, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 299, 148, 0,
	104, 0, 165, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 154, 143, 177, 0, 144, 153, 125,
	169, 149, 176, 187, 188, 167, 185, 156, 97, 139,
	88, 90, 166, 175, 102, 157, 93, 173, 163, 164,
	131, 117, 118, 159, 91, 92, 0, 152, 108, 147,
	112, 107, 141, 170, 171, 106, 196, 98, 183, 184,
	95, 99, 182, 138, 181, 168, 174, 132, 129, 94,
	172, 130, 128, 120, 0, 110, 114, 145, 127, 146,
	115, 135, 134, 136, 0, 140, 0, 0, 0, 162,
	179, 197, 198, 0, 0, 189, 190, 191, 192, 0,
	0, 0, 137, 100, 116, 158, 119, 126, 151, 195,
	0, 155, 103, 178, 160, 290, 300, 296, 297, 294,
	295, 293, 292, 291, 302, 282, 283, 284, 285, 287,
	23, 286, 89, 96, 123, 193, 194, 0, 150, 111,
	180, 298, 142, 0, 0, 0, 0, 250, 0, 0,
	0, 109, 247, 0, 0, 121, 289, 124, 0, 0,
	161, 133, 0, 0, 0, 0, 280, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 248,
	268, 267, 270, 271, 272, 273, 0, 0, 101, 269,
	274, 275, 276, 0, 0, 245, 261, 0, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	0, 0, 0, 0, 301, 0, 260, 0, 0, 256,
	257, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 299, 148, 0,
	104, 0, 165, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 154, 143, 177, 0, 144, 153, 125,
	169, 149, 176, 187, 188, 167, 185, 156, 97, 139,
	88, 90, 166, 175, 102, 157, 93, 173, 163, 164,
	131, 117, 118, 159, 91, 92, 0, 152, 108, 147,
	112, 107, 141, 170, 171, 106, 196, 98, 183, 184,
	95, 99, 182, 138, 181, 168, 174, 132, 129, 94,
	172, 130, 128, 120, 0, 110, 114, 145, 127, 146,
	115, 135, 134, 136, 0, 140, 0, 0, 0, 162,
	179, 197, 198, 0, 0, 189, 190, 191, 192, 0,
	0, 0, 137, 100, 116, 158, 119, 126, 151, 195,
	0, 155, 103, 178, 160, 290, 300, 296, 297, 294,
	295, 293, 292, 291, 302, 282, 283, 284, 285, 287,
	0, 286, 89, 96, 123, 193, 194, 142, 150, 111,
	180, 298, 250, 0, 0, 0, 109, 247, 0, 0,
	121, 289, 124, 0, 0, 161, 133, 0, 0, 0,
	0, 280, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 248, 268, 267, 270, 271, 272,
	273, 0, 0, 101, 269, 274, 275, 276, 0, 0,
	245, 261, 0, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 0, 0, 0, 0, 301,
	0, 260, 0, 0, 256, 257, 262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 299, 148, 0, 104, 0, 165, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 154, 143,
	177, 0, 144, 153, 125, 169, 149, 176, 187, 188,
	167, 185, 156, 97, 139, 88, 90, 166, 175, 102,
	157, 93, 173, 163, 164, 131, 117, 118, 159, 91,
	92, 0, 152, 108, 147, 112, 107, 141, 170, 171,
	106, 196, 98, 183, 184, 95, 99, 182, 138, 181,
	168, 174, 132, 129, 94, 172, 130, 128, 120, 0,
	110, 114, 145, 127, 146, 115, 135, 134, 136, 0,
	140, 0, 0, 0, 162, 179, 197, 198, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 137, 100, 116,
	158, 119, 126, 151, 195, 0, 155, 103, 178, 160,
	290, 300, 296, 297, 294, 295, 293, 292, 291, 302,
	282, 283, 284, 285, 287, 0, 286, 89, 96, 123,
	193, 194, 142, 150, 111, 180, 298, 0, 0, 0,
	0, 109, 0, 0, 0, 121, 289, 124, 0, 0,
	161, 133, 0, 0, 0, 0, 280, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 248,
	268, 267, 270, 271, 272, 273, 0, 0, 101, 269,
	274, 275, 276, 0, 0, 0, 261, 0, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	0, 0, 0, 0, 301, 0, 260, 0, 0, 256,
	257, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 299, 148, 0,
	104, 0, 165, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 154, 143, 177, 1434, 144, 153, 125,
	169, 149, 176, 187, 188, 167, 185, 156, 97, 139,
	88, 90, 166, 175, 102, 157, 93, 173, 163, 164,
	131, 117, 118, 159, 91, 92, 0, 152, 108, 147,
	112, 107, 141, 170, 171, 106, 196, 98, 183, 184,
	95, 99, 182, 138, 181, 168, 174, 132, 129, 94,
	172, 130, 128, 120, 0, 110, 114, 145, 127, 146,
	115, 135, 134, 136, 0, 140, 0, 0, 0, 162,
	179, 197, 198, 0, 0, 189, 190, 191, 192, 0,
	0, 0, 137, 100, 116, 158, 119, 126, 151, 195,
	0, 155, 103, 178, 160, 290, 300, 296, 297, 294,
	295, 293, 292, 291, 302, 282, 283, 284, 285, 287,
	0, 286, 89, 96, 123, 193, 194, 142, 150, 111,
	180, 298, 0, 0, 0, 0, 109, 0, 0, 0,
	121, 289, 124, 0, 0, 161, 133, 0, 0, 0,
	0, 280, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 248, 268, 267, 270, 271, 272,
	273, 0, 0, 101, 269, 274, 275, 276, 0, 0,
	0, 261, 0, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 0, 0, 0, 0, 301,
	0, 260, 0, 0, 256, 257, 262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 299, 148, 0, 104, 0, 165, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 154, 143,
	177, 0, 144, 153, 125, 169, 149, 176, 187, 188,
	167, 185, 156, 97, 139, 88, 90, 166, 175, 102,
	157, 93, 173, 163, 164, 131, 117, 118, 159, 91,
	92, 0, 152, 108, 147, 112, 107, 141, 170, 171,
	106, 196, 98, 183, 184, 95, 99, 182, 138, 181,
	168, 174, 132, 129, 94, 172, 130, 128, 120, 0,
	110, 114, 145, 127, 146, 115, 135, 134, 136, 0,
	140, 0, 0, 0, 162, 179, 197, 198, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 137, 100, 116,
	158, 119, 126, 151, 195, 0, 155, 103, 178, 160,
	290, 300, 296, 297, 294, 295, 293, 292, 291, 302,
	282, 283, 284, 285, 287, 0, 286, 89, 96, 123,
	193, 194, 142, 150, 111, 180, 298, 0, 0, 0,
	0, 109, 0, 0, 0, 121, 0, 124, 0, 0,
	161, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 503, 502, 512, 513, 505, 506,
	507, 508, 509, 510, 511, 504, 0, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 148, 0,
	104, 0, 165, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 154, 143, 177, 0, 144, 153, 125,
	169, 149, 176, 187, 188, 167, 185, 156, 97, 139,
	88, 90, 166, 175, 102, 157, 93, 173, 163, 164,
	131, 117, 118, 159, 91, 92, 0, 152, 108, 147,
	112, 107, 141, 170, 171, 106, 196, 98, 183, 184,
	95, 99, 182, 138, 181, 168, 174, 132, 129, 94,
	172, 130, 128, 120, 0, 110, 114, 145, 127, 146,
	115, 135, 134, 136, 0, 140, 0, 0, 0, 162,
	179, 197, 198, 0, 0, 189, 190, 191, 192, 0,
	0, 0, 137, 100, 116, 158, 119, 126, 151, 195,
	0, 155, 103, 178, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 96, 123, 193, 194, 0, 150, 111,
	180, 515, 142, 0, 0, 0, 491, 0, 0, 0,
	0, 109, 0, 0, 0, 121, 0, 124, 0, 0,
	161, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	0, 493, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 488, 487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 148, 0,
	104, 0, 165, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 154, 143, 177, 0, 144, 153, 125,
	169, 149, 176, 187, 188, 167, 185, 156, 97, 139,
	88, 90, 166, 175, 102, 157, 93, 173, 163, 164,
	131, 117, 118, 159, 91, 92, 0, 152, 108, 147,
	112, 107, 141, 170, 171, 106, 196, 98, 183, 184,
	95, 99, 182, 138, 181, 168, 174, 132, 129, 94,
	172, 130, 128, 120, 0, 110, 114, 145, 127, 146,
	115, 135, 134, 136, 0, 140, 0, 0, 0, 162,
	179, 197, 198, 0, 0, 189, 190, 191, 192, 0,
	0, 0, 137, 100, 116, 158, 119, 126, 151, 195,
	0, 155, 103, 178, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 96, 123, 193, 194, 142, 150, 111,
	180, 608, 0, 0, 0, 0, 109, 0, 0, 0,
	121, 0, 124, 0, 0, 161, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 610, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 148, 0, 104, 0, 165, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 154, 143,
	177, 0, 144, 153, 125, 169, 149, 176, 187, 188,
	167, 185, 156, 97, 139, 88, 90, 166, 175, 102,
	157, 93, 173, 163, 164, 131, 117, 118, 159, 91,
	92, 0, 152, 108, 147, 112, 107, 141, 170, 171,
	106, 196, 98, 183, 184, 95, 99, 182, 138, 181,
	168, 174, 132, 129, 94, 172, 130, 128, 120, 0,
	110, 114, 145, 127, 146, 115, 135, 134, 136, 0,
	140, 0, 0, 0, 162, 179, 197, 198, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 137, 100, 116,
	158, 119, 126, 151, 195, 0, 155, 103, 178, 160,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 89, 96, 123,
	193, 194, 109, 150, 111, 180, 121, 0, 124, 0,
	0, 161, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	328, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 0, 0, 0, 148,
	0, 104, 0, 165, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 154, 143, 177, 0, 144, 153,
	125, 169, 149, 176, 187, 188, 167, 185, 156, 97,
	139, 88, 90, 166, 175, 102, 157, 93, 173, 163,
	164, 131, 117, 118, 159, 91, 92, 0, 152, 108,
	147, 112, 107, 141, 170, 171, 106, 196, 98, 183,
	184, 95, 99, 182, 138, 181, 168, 174, 132, 129,
	94, 172, 130, 128, 120, 0, 110, 114, 145, 127,
	146, 115, 135, 134, 136, 0, 140, 0, 0, 0,
	162, 179, 197, 198, 0, 0, 189, 190, 191, 192,
	0, 0, 0, 137, 100, 116, 158, 119, 126, 151,
	195, 0, 155, 103, 178, 160, 0, 23, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 89, 96, 123, 193, 194, 109, 150,
	111, 180, 121, 0, 124, 0, 0, 161, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 0, 0, 0, 148, 0, 104, 0, 165,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	154, 143, 177, 0, 144, 153, 125, 169, 149, 176,
	187, 188, 167, 185, 156, 97, 139, 88, 90, 166,
	175, 102, 157, 93, 173, 163, 164, 131, 117, 118,
	159, 91, 92, 0, 152, 108, 147, 112, 107, 141,
	170, 171, 106, 196, 98, 183, 184, 95, 99, 182,
	138, 181, 168, 174, 132, 129, 94, 172, 130, 128,
	120, 0, 110, 114, 145, 127, 146, 115, 135, 134,
	136, 0, 140, 0, 0, 0, 162, 179, 197, 198,
	0, 0, 189, 190, 191, 192, 0, 0, 0, 137,
	100, 116, 158, 119, 126, 151, 195, 142, 155, 103,
	178, 160, 0, 0, 0, 0, 109, 0, 0, 0,
	121, 0, 124, 0, 0, 161, 133, 0, 0, 89,
	96, 123, 193, 194, 0, 150, 111, 180, 0, 0,
	0, 0, 0, 0, 328, 0, 0, 726, 0, 0,
	727, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 148, 0, 104, 0, 165, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 154, 143,
	177, 0, 144, 153, 125, 169, 149, 176, 187, 188,
	167, 185, 156, 97, 139, 88, 90, 166, 175, 102,
	157, 93, 173, 163, 164, 131, 117, 118, 159, 91,
	92, 0, 152, 108, 147, 112, 107, 141, 170, 171,
	106, 196, 98, 183, 184, 95, 99, 182, 138, 181,
	168, 174, 132, 129, 94, 172, 130, 128, 120, 0,
	110, 114, 145, 127, 146, 115, 135, 134, 136, 0,
	140, 0, 0, 0, 162, 179, 197, 198, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 137, 100, 116,
	158, 119, 126, 151, 195, 142, 155, 103, 178, 160,
	0, 0, 0, 0, 109, 628, 0, 0, 121, 0,
	124, 0, 0, 161, 133, 0, 0, 89, 96, 123,
	193, 194, 0, 150, 111, 180, 0, 0, 0, 0,
	0, 0, 328, 0, 627, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 0, 0,
	0, 148, 0, 104, 0, 165, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 154, 143, 177, 0,
	144, 153, 125, 169, 149, 176, 187, 188, 167, 185,
	156, 97, 139, 88, 90, 166, 175, 102, 157, 93,
	173, 163, 164, 131, 117, 118, 159, 91, 92, 0,
	152, 108, 147, 112, 107, 141, 170, 171, 106, 196,
	98, 183, 184, 95, 99, 182, 138, 181, 168, 174,
	132, 129, 94, 172, 130, 128, 120, 0, 110, 114,
	145, 127, 146, 115, 135, 134, 136, 0, 140, 0,
	0, 0, 162, 179, 197, 198, 0, 0, 189, 190,
	191, 192, 0, 0, 0, 137, 100, 116, 158, 119,
	126, 151, 195, 0, 155, 103, 178, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 96, 123, 193, 194,
	142, 150, 111, 180, 608, 0, 0, 0, 0, 109,
	0, 0, 0, 121, 0, 124, 0, 0, 161, 133,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 610,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 0, 0, 0, 148, 0, 104, 0,
	165, 113, 0, 122, 0, 0, 0, 0, 0, 105,
	0, 154, 143, 177, 0, 606, 153, 125, 169, 149,
	176, 187, 188, 167, 185, 156, 97, 139, 88, 90,
	166, 175, 102, 157, 93, 173, 163, 164, 131, 117,
	118, 159, 91, 92, 0, 152, 108, 147, 112, 107,
	141, 170, 171, 106, 196, 98, 183, 184, 95, 99,
	182, 138, 181, 168, 174, 132, 129, 94, 172, 130,
	128, 120, 0, 110, 114, 145, 127, 146, 115, 135,
	134, 136, 0, 140, 0, 0, 0, 162, 179, 197,
	198, 0, 0, 189, 190, 191, 192, 0, 0, 0,
	137, 100, 116, 158, 119, 126, 151, 195, 142, 155,
	103, 178, 160, 0, 0, 0, 0, 109, 0, 0,
	0, 121, 0, 124, 0, 0, 161, 133, 0, 0,
	89, 96, 123, 193, 194, 0, 150, 111, 180, 0,
	0, 0, 50, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 0, 0, 0, 148, 0, 104, 0, 165, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 154,
	143, 177, 0, 144, 153, 125, 169, 149, 176, 187,
	188, 167, 185, 156, 97, 139, 88, 90, 166, 175,
	102, 157, 93, 173, 163, 164, 131, 117, 118, 159,
	91, 92, 0, 152, 108, 147, 112, 107, 141, 170,
	171, 106, 196, 98, 183, 184, 95, 99, 182, 138,
	181, 168, 174, 132, 129, 94, 172, 130, 128, 120,
	0, 110, 114, 145, 127, 146, 115, 135, 134, 136,
	0, 140, 0, 0, 0, 162, 179, 197, 198, 0,
	0, 189, 190, 191, 192, 0, 0, 0, 137, 100,
	116, 158, 119, 126, 151, 195, 142, 155, 103, 178,
	160, 0, 0, 0, 0, 109, 0, 0, 0, 121,
	0, 124, 0, 0, 161, 133, 0, 0, 89, 96,
	123, 193, 194, 0, 150, 111, 180, 0, 0, 0,
	0, 0, 0, 86, 0, 610, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 0,
	0, 0, 148, 0, 104, 0, 165, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 154, 143, 177,
	0, 144, 153, 125, 169, 149, 176, 187, 188, 167,
	185, 156, 97, 139, 88, 90, 166, 175, 102, 157,
	93, 173, 163, 164, 131, 117, 118, 159, 91, 92,
	0, 152, 108, 147, 112, 107, 141, 170, 171, 106,
	196, 98, 183, 184, 95, 99, 182, 138, 181, 168,
	174, 132, 129, 94, 172, 130, 128, 120, 0, 110,
	114, 145, 127, 146, 115, 135, 134, 136, 0, 140,
	0, 0, 0, 162, 179, 197, 198, 0, 0, 189,
	190, 191, 192, 0, 0, 0, 137, 100, 116, 158,
	119, 126, 151, 195, 142, 155, 103, 178, 160, 0,
	0, 0, 0, 109, 0, 0, 0, 121, 0, 124,
	0, 0, 161, 133, 0, 0, 89, 96, 123, 193,
	194, 0, 150, 111, 180, 0, 0, 0, 0, 0,
	0, 328, 0, 493, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 0, 0, 0,
	148, 0, 104, 0, 165, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 154, 143, 177, 0, 144,
	153, 125, 169, 149, 176, 187, 188, 167, 185, 156,
	97, 139, 88, 90, 166, 175, 102, 157, 93, 173,
	163, 164, 131, 117, 118, 159, 91, 92, 0, 152,
	108, 147, 112, 107, 141, 170, 171, 106, 196, 98,
	183, 184, 95, 99, 182, 138, 181, 168, 174, 132,
	129, 94, 172, 130, 128, 120, 0, 110, 114, 145,
	127, 146, 115, 135, 134, 136, 0, 140, 0, 0,
	0, 162, 179, 197, 198, 0, 0, 189, 190, 191,
	192, 0, 0, 0, 137, 100, 116, 158, 119, 126,
	151, 195, 142, 155, 103, 178, 160, 0, 0, 0,
	0, 109, 0, 0, 0, 121, 0, 124, 0, 0,
	161, 133, 0, 0, 89, 96, 123, 193, 194, 0,
	150, 111, 180, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 148, 0,
	104, 0, 165, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 154, 143, 177, 0, 144, 153, 125,
	169, 149, 176, 187, 188, 167, 185, 156, 97, 139,
	88, 90, 166, 175, 102, 157, 93, 173, 163, 164,
	131, 117, 118, 159, 91, 92, 0, 152, 108, 147,
	112, 107, 141, 170, 171, 106, 196, 98, 183, 184,
	95, 99, 182, 138, 181, 168, 174, 132, 129, 94,
	172, 130, 128, 120, 0, 110, 114, 145, 127, 146,
	115, 135, 134, 136, 0, 140, 0, 0, 0, 162,
	179, 197, 198, 0, 0, 189, 190, 191, 192, 0,
	0, 0, 137, 100, 116, 158, 119, 126, 151, 195,
	686, 155, 103, 178, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 96, 123, 193, 194, 142, 150, 111,
	180, 0, 0, 0, 0, 586, 109, 0, 0, 0,
	121, 0, 124, 0, 0, 161, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 148, 0, 104, 0, 165, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 154, 143,
	177, 0, 144, 153, 125, 169, 149, 176, 187, 188,
	167, 185, 156, 97, 139, 88, 90, 166, 175, 102,
	157, 93, 173, 163, 164, 131, 117, 118, 159, 91,
	92, 0, 152, 108, 147, 112, 107, 141, 170, 171,
	106, 196, 98, 183, 184, 95, 99, 182, 138, 181,
	168, 174, 132, 129, 94, 172, 130, 128, 120, 0,
	110, 114, 145, 127, 146, 115, 135, 134, 136, 0,
	140, 0, 0, 0, 162, 179, 197, 198, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 137, 100, 116,
	158, 119, 126, 151, 195, 0, 155, 103, 178, 160,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 89, 96, 123,
	193, 194, 109, 150, 111, 180, 121, 0, 124, 0,
	0, 161, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 0, 0, 0, 148,
	0, 104, 0, 165, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 154, 143, 177, 0, 144, 153,
	125, 169, 149, 176, 187, 188, 167, 185, 156, 97,
	139, 88, 90, 166, 175, 102, 157, 93, 173, 163,
	164, 131, 117, 118, 159, 91, 92, 0, 152, 108,
	147, 112, 107, 141, 170, 171, 106, 196, 98, 183,
	184, 95, 99, 182, 138, 181, 168, 174, 132, 129,
	94, 172, 130, 128, 120, 0, 110, 114, 145, 127,
	146, 115, 135, 134, 136, 0, 140, 0, 0, 0,
	162, 179, 197, 198, 0, 0, 189, 190, 191, 192,
	0, 0, 0, 137, 100, 116, 158, 119, 126, 151,
	195, 142, 155, 103, 178, 160, 0, 0, 0, 0,
	109, 0, 0, 0, 121, 0, 124, 0, 0, 161,
	133, 0, 0, 89, 96, 123, 193, 194, 0, 150,
	111, 180, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 0, 186, 0, 0, 0, 148, 0, 104,
	0, 165, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 154, 143, 177, 0, 144, 153, 125, 169,
	149, 176, 187, 188, 167, 185, 156, 97, 139, 88,
	90, 166, 175, 102, 157, 93, 173, 163, 164, 131,
	117, 118, 159, 91, 92, 0, 152, 108, 147, 112,
	107, 141, 170, 171, 106, 196, 98, 183, 184, 95,
	99, 182, 138, 181, 168, 174, 132, 129, 94, 172,
	130, 128, 120, 0, 110, 114, 145, 127, 146, 115,
	135, 134, 136, 0, 140, 0, 0, 0, 162, 179,
	197, 198, 0, 0, 189, 190, 191, 192, 0, 0,
	0, 137, 100, 116, 158, 119, 126, 151, 195, 142,
	155, 103, 178, 160, 0, 0, 0, 0, 109, 0,
	0, 0, 121, 0, 124, 0, 0, 161, 133, 0,
	0, 89, 96, 123, 193, 194, 0, 150, 111, 180,
	0, 0, 0, 0, 0, 0, 328, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 0, 0, 0, 148, 0, 104, 0, 165,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	154, 143, 177, 0, 144, 153, 125, 169, 149, 176,
	187, 188, 167, 185, 156, 97, 139, 88, 90, 166,
	175, 102, 157, 93, 173, 163, 164, 131, 117, 118,
	159, 91, 92, 0, 152, 108, 147, 112, 107, 141,
	170, 171, 106, 196, 98, 183, 184, 95, 99, 182,
	138, 181, 168, 174, 132, 129, 94, 172, 130, 128,
	120, 0, 110, 114, 145, 127, 146, 115, 135, 134,
	136, 0, 140, 0, 0, 0, 162, 179, 197, 198,
	0, 0, 189, 190, 191, 192, 0, 0, 0, 137,
	100, 116, 158, 119, 126, 151, 195, 142, 155, 103,
	178, 160, 0, 0, 0, 0, 109, 0, 0, 0,
	121, 0, 124, 0, 0, 161, 133, 0, 0, 89,
	96, 123, 193, 194, 0, 150, 111, 180, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 148, 0, 104, 0, 165, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 154, 143,
	177, 0, 144, 153, 125, 169, 149, 176, 187, 188,
	167, 185, 156, 97, 139, 88, 90, 166, 175, 102,
	157, 93, 173, 163, 164, 131, 117, 118, 159, 91,
	92, 0, 152, 108, 147, 112, 107, 141, 170, 171,
	106, 196, 98, 183, 184, 95, 99, 182, 138, 181,
	168, 174, 132, 129, 94, 172, 130, 128, 120, 0,
	110, 114, 145, 127, 146, 115, 135, 134, 136, 0,
	140, 0, 0, 0, 162, 179, 197, 198, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 137, 100, 116,
	158, 119, 126, 151, 195, 142, 155, 103, 178, 160,
	0, 0, 0, 0, 109, 0, 0, 0, 121, 0,
	124, 0, 0, 161, 133, 0, 0, 89, 96, 123,
	193, 194, 0, 150, 111, 180, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 0, 0,
	0, 148, 0, 104, 0, 165, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 154, 143, 177, 0,
	144, 153, 125, 169, 149, 176, 187, 188, 167, 185,
	156, 97, 139, 88, 90, 166, 175, 102, 157, 93,
	173, 163, 164, 131, 117, 118, 159, 91, 92, 0,
	152, 108, 147, 112, 107, 141, 170, 171, 106, 196,
	98, 183, 184, 95, 99, 182, 138, 181, 168, 174,
	132, 129, 94, 172, 130, 128, 120, 0, 110, 114,
	145, 127, 146, 115, 135, 134, 136, 0, 140, 0,
	0, 0, 162, 179, 197, 198, 0, 0, 189, 190,
	191, 192, 0, 0, 0, 137, 100, 116, 158, 119,
	126, 151, 195, 0, 155, 103, 178, 160, 0, 0,
	0, 23, 24, 48, 26, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 96, 123, 193, 194,
	42, 150, 111, 180, 28, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 37, 0, 0, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 30, 31, 33, 32,
	35, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	43, 44, 0, 0, 45, 46, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 38, 39, 0, 40, 41, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49,
}
var yyPact = [...]int{

	11395, -1000, -187, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1016, 1054, -1000, -1000, -1000, -1000, -1000, -1000, 829,
	295, 200, 226, 38, 10503, 225, 1890, 10939, -1000, 19,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 794, -1000, -1000,
	-1000, -1000, -1000, 999, 1005, 834, 994, 893, -1000, 5809,
	141, 9150, 10285, 5070, -1000, 628, 196, 163, 10721, 139,
	139, 139, -1000, -145, 201, 10939, -1000, 10939, 136, 618,
	136, 136, 136, 10939, -1000, 303, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10939,
	616, 928, 261, 3236, 3236, 3236, 3236, 29, 3236, -101,
	848, -1000, -1000, -1000, -1000, 3236, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 632, 972, 6549, 6549,
	1016, -1000, 794, -1000, -1000, -1000, 956, -1000, -1000, 402,
	1035, -1000, 7534, 302, -1000, 6549, 47, 764, -1000, -1000,
	764, -1000, -1000, 264, -1000, -1000, 7039, 7039, 7039, 7039,
	7039, 7039, 7039, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 764, -1000, 6304,
	764, 764, 764, 764, 764, 764, 764, 764, 6549, 764,
	764, 764, 764, 764, 764, 764, 764, 764, 1721, 764,
	764, 764, 764, 10049, 767, 881, -1000, -1000, -1000, 987,
	8251, 8932, 10939, 711, -1000, 781, 4808, -121, -1000, -1000,
	-1000, 351, 8687, -1000, -1000, -1000, 925, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 702, -1000, 2112, 10721, 10939, 816,
	610, 385, 604, 10939, -1000, 9804, 3236, 145, 10939, 974,
	847, 10939, 597, 580, -1000, 4546, -1000, 3236, 3236, 3236,
	3236, 3236, 3236, 3236, 3236, -1000, -1000, -1000, -1000, -1000,
	-1000, 3236, 3236, -1000, -68, -1000, 10939, -1000, -1000, -1000,
	-1000, 1048, 314, 651, 296, 782, -1000, 514, 999, 632,
	893, 8469, 858, -1000, -1000, 10939, -1000, 6549, 6549, 452,
	-1000, 9586, -1000, -1000, 3498, 335, 7039, 431, 370, 7039,
	7039, 7039, 7039, 7039, 7039, 7039, 7039, 7039, 7039, 7039,
	7039, 7039, 7039, 7039, 496, 1721, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 575, -1000, 794, 589, 589, -22,
	-22, -22, -22, -22, -22, 7284, 5319, 632, 696, 436,
	6304, 5809, 5809, 6549, 6549, 11157, 11157, 5809, 990, 358,
	436, 11157, -1000, 632, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -16, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5809, 5809, 5809, 5809, 69, 10939, -1000, 11157, 9150,
	9150, 9150, 9150, 9150, -1000, 890, 880, -1000, 894, 863,
	903, 10939, -1000, 692, 8251, 357, 764, -1000, 9368, -1000,
	-1000, 69, 718, 9150, 10939, -1000, -1000, 4284, 781, -121,
	774, -1000, -109, -113, 6054, 313, -1000, -1000, -1000, -1000,
	2712, 352, 989, -120, -62, -1000, -1000, -1000, -1000, 799,
	-1000, 799, 120, 799, 799, 799, -27, -27, -27, -27,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 825, 811, -1000,
	799, 799, 799, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 804, 133, 804, 800, 800, 815, 985, -162,
	562, 3236, 969, 3236, -1000, 1841, 10939, -1000, 10939, -1000,
	-1000, 10939, 3236, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 408, -1000,
	-1000, -1000, -1000, 911, 6549, 6549, 4022, 6549, -1000, -1000,
	-1000, 972, -1000, 990, 1019, -1000, 918, 917, 5809, -1000,
	-1000, 335, 355, -1000, -1000, 576, -1000, -1000, -1000, -1000,
	294, 764, -1000, 1633, -1000, -1000, -1000, -1000, 431, 7039,
	7039, 7039, 1682, 1633, 1739, 254, 1753, -22, 202, 202,
	-21, -21, -21, -21, -21, 775, 775, -1000, -1000, -1000,
	-1000, 632, -1000, -1000, -1000, 632, 5809, 777, -1000, -1000,
	6549, -1000, 632, 690, 690, 421, 526, 783, -1000, 293,
	780, 690, 5809, 363, -1000, 6549, 632, -1000, -1000, 690,
	632, 690, 690, 792, 764, -1000, 755, -1000, 347, 881,
	810, 846, 763, -1000, -1000, -1000, -1000, 877, -1000, 876,
	-1000, -1000, -1000, -1000, -1000, 191, 190, 177, 10721, -1000,
	1022, 9150, 746, -1000, -1000, 774, -121, -125, -1000, -1000,
	-1000, 436, -1000, -1000, 556, 773, 2438, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 806, 845, 103, 148, 328, 266,
	548, 10721, -1000, -1000, -1000, 398, 304, 1047, -1000, 85,
	-1000, 84, 490, -1000, -193, -1000, -67, -1000, -1000, 456,
	-27, -27, 799, -27, -1000, -1000, 313, 923, 313, 313,
	313, 486, 486, -167, -167, -1000, -1000, 455, 804, -1000,
	-1000, -1000, 451, -1000, 10939, 10721, 794, -1000, 3760, -1000,
	-1000, -1000, -1000, -1000, -1000, 1020, 1950, 265, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 65,
	240, -1000, 3236, -1000, 423, 10939, 10939, 905, 436, 436,
	292, -1000, -1000, 10939, -1000, -1000, -1000, -1000, 748, -1000,
	-1000, -1000, 2974, 5809, -1000, 1682, 1633, 1556, -1000, 7039,
	7039, -1000, -1000, 690, 5809, 436, -1000, -1000, -1000, 1736,
	496, 1736, 7039, 7039, 4022, 7039, 7039, -157, 778, 353,
	-1000, 6549, 426, -1000, -1000, -1000, -1000, -1000, 843, 11157,
	764, -1000, 8015, 10721, 1016, 11157, 6549, 6549, -1000, -1000,
	6549, 802, -1000, 6549, -1000, -1000, -1000, 764, 764, 764,
	675, -1000, 1016, 746, -1000, -1000, -1000, -115, -122, -1000,
	-1000, 2712, -1000, 2712, 10721, 1039, -1000, 546, 542, -1000,
	508, -1000, -1000, 108, -1000, -1000, -182, -1000, -1000, -1000,
	799, -1000, -1000, 764, -134, -1000, -1000, -1000, -1000, -1000,
	-1000, 665, 313, 313, -27, 313, -1000, 365, -1000, -1000,
	-1000, 688, -1000, 685, -1000, -6, -15, -1000, 772, -1000,
	682, 771, 842, -1000, 733, -1000, 344, -1000, 100, -1000,
	10721, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10721,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10939, -1000, -1000, -1000, -1000, -1000, 10721, 113, -1000,
	-1000, 483, 6549, -1000, -1000, -1000, 3760, -1000, 1022, 9150,
	-1000, -1000, 632, -1000, 7039, 1633, 1633, -1000, -1000, 632,
	799, 799, -1000, 799, 800, -1000, -1000, 799, 7, 799,
	6, 632, 632, 157, 684, -1000, 130, 241, 764, -154,
	-1000, 436, 6549, -1000, 957, 737, 704, -1000, -1000, 5564,
	632, 679, 274, 675, 999, -1000, 436, 436, 436, 10721,
	436, 10721, 10721, 10721, 7779, 10721, 999, -1000, -1000, -1000,
	-1000, 2438, -1000, 671, -1000, 799, 213, 213, -1000, -1000,
	-1000, 82, -1000, -17, -1000, 632, 799, -1000, -1000, -1000,
	313, -1000, -1000, -1000, -27, 478, -27, -65, -85, 446,
	-1000, 415, 10721, 10721, 10939, 3760, 2712, 10721, -1000, -1000,
	-1000, 798, -1000, -1000, -1000, -1000, 961, 10721, -1000, -1000,
	436, 1024, 712, -1000, 1633, -1000, -1000, 107, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 7039, 7039, -1000,
	7039, 7039, 7039, 632, 468, 436, 81, -1000, 764, -1000,
	-1000, 760, 10721, 10721, -1000, -1000, 659, -1000, 657, 657,
	657, 357, -1000, -1000, 46, 10721, -1000, 840, -1000, -1000,
	394, 23, 839, 10721, -24, -167, -1000, -1000, -1000, 313,
	-1000, 313, -1000, -1000, 660, 634, 655, 797, 796, -1000,
	-1000, 793, 10721, 764, 117, 1021, 1003, -1000, -1000, 178,
	178, 178, 178, 98, -1000, -1000, 1045, -1000, 764, -1000,
	794, 252, -1000, 10721, -1000, -1000, -1000, -1000, -1000, 46,
	-1000, 499, 343, 467, -171, -1000, 1043, -1000, -1000, 1041,
	790, -1000, -1000, -1000, -1000, -1000, -1000, 1022, 10721, 10721,
	10721, 652, 60, 80, -1000, 6549, 6549, -1000, -1000, -1000,
	-1000, 632, 59, -173, 11157, 704, 632, 10721, -1000, -1000,
	-1000, 410, -1000, -1000, 10721, 213, 213, 10721, -1000, 647,
	637, 627, 816, 623, -1000, 10721, 786, 436, 698, -1000,
	904, -160, -178, 694, -1000, -1000, -1000, -1000, -1000, -1000,
	553, -1000, 1022, -1000, -1000, -162, -1000, 60, 916, 10721,
	-1000, 901, -1000, 110, 10721, -1000, -1000, -1000, 56, 532,
	-165, 10939, -1000, 36, -1000, -176, 776, 764, -179, 10721,
	6794, -1000, 512, 178, 632, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1290, 11, 557, 1289, 1287, 1286, 1282, 1281, 1280,
	1277, 1274, 1262, 1260, 1259, 1258, 1257, 1256, 1255, 1254,
	1253, 1251, 1245, 1244, 264, 1243, 1242, 1241, 61, 1240,
	68, 1237, 1235, 40, 114, 49, 33, 186, 1234, 27,
	71, 103, 1233, 44, 1231, 1227, 75, 1226, 57, 1225,
	1222, 1329, 1221, 1212, 22, 6, 1211, 45, 1209, 1208,
	60, 67, 1207, 1204, 1200, 1198, 1194, 1191, 48, 4,
	14, 19, 16, 1189, 46, 9, 1188, 47, 1178, 1177,
	1171, 1162, 34, 1158, 52, 1157, 20, 51, 1156, 7,
	56, 32, 30, 5, 72, 50, 1155, 36, 54, 43,
	1154, 1153, 489, 1151, 1143, 1142, 1139, 1138, 1137, 546,
	487, 1136, 1134, 1123, 31, 0, 171, 919, 70, 1119,
	39, 1118, 1023, 65, 58, 24, 1116, 121, 79, 37,
	1114, 1112, 29, 66, 1111, 74, 73, 1110, 1109, 1106,
	1105, 1103, 604, 104, 176, 1100, 1098, 1097, 15, 41,
	25, 42, 53, 1096, 1095, 26, 1094, 18, 13, 1,
	55, 1093, 1092, 1091, 1089, 28, 21, 1088, 17, 1087,
	10, 1084, 1082, 3, 1079, 23, 1078, 2, 1076, 8,
	1074, 1073, 1072, 1071, 678, 900, 1070, 1069, 1068, 1064,
	1062, 98,
}
var yyR1 = [...]int{

	0, 182, 183, 183, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 186,
	186, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 120, 120,
	179, 179, 178, 177, 177, 176, 176, 175, 181, 181,
	16, 162, 163, 163, 163, 163, 152, 134, 134, 134,
	134, 134, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	187, 187, 187, 138, 138, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 137, 137, 137, 137, 137,
	137, 139, 139, 139, 139, 139, 135, 135, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 141, 141, 141,
	141, 141, 141, 141, 141, 151, 151, 142, 142, 149,
	149, 150, 150, 150, 148, 148, 148, 145, 145, 146,
	146, 147, 147, 147, 143, 143, 143, 144, 144, 144,
	154, 154, 171, 171, 170, 170, 170, 170, 161, 161,
	167, 167, 167, 167, 167, 167, 167, 160, 160, 169,
	169, 168, 155, 155, 155, 155, 155, 156, 157, 157,
	157, 157, 158, 158, 159, 159, 164, 164, 164, 165,
	165, 165, 166, 166, 166, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 188, 188,
	189, 189, 189, 189, 189, 189, 189, 174, 172, 172,
	173, 173, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 107, 107, 104, 104, 105, 105,
	106, 106, 106, 108, 108, 108, 131, 131, 131, 19,
	19, 21, 21, 22, 23, 20, 20, 20, 20, 20,
	190, 24, 25, 25, 26, 26, 26, 30, 30, 30,
	28, 28, 29, 29, 35, 35, 34, 34, 36, 36,
	36, 36, 119, 119, 119, 118, 118, 38, 38, 39,
	39, 40, 40, 41, 41, 41, 53, 53, 89, 89,
	91, 91, 42, 42, 42, 42, 43, 43, 44, 44,
	45, 45, 126, 126, 125, 125, 125, 124, 124, 47,
	47, 47, 49, 48, 48, 48, 48, 50, 50, 52,
	52, 51, 51, 54, 54, 54, 54, 55, 55, 37,
	37, 37, 37, 37, 37, 37, 103, 103, 57, 57,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	67, 67, 67, 67, 67, 67, 58, 58, 58, 58,
	58, 58, 58, 33, 33, 68, 68, 68, 74, 69,
	69, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 65, 65, 65, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	191, 191, 66, 66, 66, 66, 31, 31, 31, 31,
	31, 129, 129, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 133, 133, 133,
	133, 133, 133, 133, 78, 78, 32, 32, 76, 76,
	77, 79, 79, 75, 75, 75, 60, 60, 60, 60,
	60, 60, 60, 60, 62, 62, 62, 80, 80, 81,
	81, 82, 82, 83, 83, 84, 85, 85, 85, 86,
	86, 86, 86, 87, 87, 87, 59, 59, 59, 59,
	59, 59, 88, 88, 88, 88, 92, 92, 70, 70,
	72, 72, 71, 73, 93, 93, 97, 94, 94, 98,
	98, 98, 96, 96, 96, 121, 121, 121, 101, 101,
	109, 109, 110, 110, 102, 102, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 112, 112, 112, 113,
	113, 116, 116, 117, 117, 122, 122, 123, 123, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 184, 185, 127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 6, 5, 5, 5, 0, 1,
	0, 2, 1, 0, 2, 1, 3, 3, 0, 2,
	4, 4, 1, 3, 3, 3, 2, 3, 1, 1,
	1, 1, 2, 2, 3, 4, 3, 3, 3, 4,
	3, 5, 2, 3, 2, 3, 2, 3, 3, 5,
	0, 3, 3, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 2, 2,
	2, 1, 3, 3, 2, 1, 1, 1, 4, 4,
	4, 5, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 3, 3, 0, 1, 0,
	1, 0, 2, 1, 0, 3, 3, 0, 1, 2,
	5, 4, 1, 2, 2, 3, 2, 3, 0, 1,
	2, 3, 3, 2, 3, 2, 2, 1, 1, 1,
	3, 2, 1, 4, 4, 7, 7, 13, 1, 1,
	2, 2, 0, 1, 1, 3, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 11, 13, 7, 7,
	7, 12, 7, 7, 7, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 6, 4, 2, 4, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 7, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 3, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 6, 8, 8, 6, 8, 8, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	1, 2, 1, 2, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -182, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 141, 115, 134, 48, 157, 158,
	160, 161, 25, 135, 136, 139, 140, -184, 8, 250,
	52, -183, 268, -82, 15, -26, 5, -24, -190, -24,
	-24, -24, -24, -24, -162, 52, -120, -181, 149, 242,
	117, 118, 132, 69, -102, 120, 122, 118, 118, 119,
	120, 242, 117, 118, -51, -122, 55, -115, 156, 258,
	157, 170, 171, 162, 195, 186, 259, 154, 183, 187,
	229, 64, 160, 238, 126, 137, 181, 177, 174, 27,
	201, 265, 176, 129, 202, 206, 230, 167, 168, 232,
	199, 31, 131, 260, 33, 145, 233, 204, 198, 194,
	197, 166, 193, 37, 208, 207, 209, 228, 189, 155,
	211, 178, 18, 140, 143, 203, 205, 175, 124, 147,
	264, 234, 173, 144, 139, 237, 153, 161, 231, 169,
	240, 36, 215, 164, 165, 128, 158, 151, 191, 146,
	179, 180, 196, 163, 192, 159, 148, 141, 239, 216,
	266, 190, 188, 184, 185, 152, 120, 149, 150, 221,
	222, 223, 224, 261, 262, 235, 182, 217, 218, 118,
	105, 187, 111, 219, 119, 31, 147, -131, 118, -104,
	150, 221, 222, 223, 224, 55, 231, 230, 225, -122,
	159, -127, -127, -127, -127, -127, -2, -86, 17, 16,
	-5, -3, -184, 6, 20, 21, -30, 38, 39, -25,
	-36, 96, -37, -122, -56, 71, -61, 28, 55, -115,
	23, -60, -57, -75, -73, -74, 105, 106, 94, 95,
	102, 72, 107, -65, -63, -64, -66, 57, 56, 65,
	58, 59, 60, 61, 66, 67, 68, -116, -71, -184,
	42, 43, 251, 252, 253, 254, 257, 255, 74, 32,
	241, 249, 248, 247, 245, 246, 243, 244, 267, 123,
	242, 100, 250, -102, -39, -40, -41, -42, -53, -74,
	-184, -51, 11, -46, -51, -94, -130, 159, -98, 231,
	230, -117, -96, -116, -114, 229, 187, 228, 55, -115,
	116, 70, 22, 24, 213, 73, 105, 16, 74, 104,
	251, 111, 46, 243, 244, 241, 253, 254, 242, 219,
	28, 10, 25, 135, 21, 98, 113, 77, 78, 138,
	23, 136, 68, 19, 49, 130, 11, 13, 14, 123,
	122, 89, 119, 44, 8, 107, 26, 86, 40, 133,
	42, 87, 17, 245, 246, 30, 257, 142, 100, 47,
	34, 71, 66, 50, 236, 69, 15, 45, 88, 114,
	250, 43, 117, 6, 256, 29, 134, 41, 118, 220,
	76, 121, 67, 5, 132, 9, 48, 51, 247, 248,
	249, 32, 75, 12, -163, -152, 55, 119, 120, -116,
	-110, 123, -110, -110, 250, 118, -51, -51, -109, 123,
	55, -109, -109, -109, -51, 108, -51, 55, 29, 242,
	55, 147, 118, 148, 120, -128, -184, -117, -128, -128,
	-128, 151, 152, -128, -105, 226, 50, -128, -185, 54,
	-87, 19, 30, -37, -122, -83, -84, -37, -82, -2,
	-24, 34, -28, 21, 63, 11, -119, 70, 69, 86,
	-118, 22, -116, 57, 108, -37, -58, 89, 71, 87,
	88, 73, 91, 90, 101, 94, 95, 96, 97, 98,
	99, 100, 92, 93, 104, 267, 79, 80, 81, 82,
	83, 84, 85, -103, -184, -74, -184, 109, 110, -61,
	-61, -61, -61, -61, -61, -61, -184, -2, -69, -37,
	-184, -184, -184, -184, -184, -184, -184, -184, -184, -78,
	-37, -184, -191, -184, -191, -191, -191, -191, -191, -191,
	-191, -133, 105, 187, 137, 181, -136, -135, 191, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 186,
	259, -184, -184, -184, -184, -52, 26, -51, 29, 53,
	-47, -49, -48, -50, 40, 44, 46, 41, 42, 43,
	47, -126, 22, -39, -184, -125, 143, -124, 22, -122,
	57, -51, -46, -186, 53, 11, 51, 53, -94, 159,
	-95, -99, 232, 234, 79, -121, -116, 57, 28, 29,
	54, 53, -153, -134, -138, -135, -140, -139, -141, -136,
	-137, 183, 187, 184, 105, 188, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 190, 201, 29, 137,
	179, 180, 181, 182, 202, 203, 204, 205, 206, 207,
	208, 209, 173, 174, 176, 177, 178, -116, -51, -179,
	51, 55, 71, 55, -51, -51, 236, -128, 121, -51,
	23, 50, -51, 55, 55, -123, -122, -114, -128, -128,
	-128, -128, -128, -128, -128, -128, -128, -128, -107, 220,
	227, -51, 9, 89, 53, 18, 108, 53, -85, 24,
	25, -86, -185, -30, -62, -116, 58, 61, -29, 41,
	-51, -37, -37, -67, 66, 71, 67, 68, -118, 96,
	-123, -117, -114, -61, -68, -71, -74, 62, 89, 87,
	88, 73, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -129, 55, 57,
	-133, 55, -60, -60, -116, -35, 21, -34, -36, -185,
	53, -185, -2, -34, -34, -37, -37, -75, -116, -122,
	-75, -34, -28, -76, -77, 75, -75, -185, 185, -34,
	-35, -34, -34, -90, 143, -51, -93, -97, -75, -40,
	-41, -41, -40, -41, 40, 40, 40, 45, 40, 45,
	40, -48, -122, -185, -54, 48, 122, 49, -184, -124,
	-90, 51, -39, -51, -98, -95, 53, 233, 235, 236,
	50, -37, -144, 105, 104, -164, -165, -166, -117, 57,
	58, -152, -154, -155, -167, -156, 124, 128, 129, 132,
	-160, 126, 119, 133, 66, 71, 28, 50, 213, 124,
	133, 132, 64, -147, 269, 210, -145, 216, -142, 52,
	-142, -142, 185, -142, -142, -142, -143, 187, -143, -143,
	-143, 52, 52, -142, -142, -142, -149, 52, 175, -149,
	-149, -150, 52, -150, 50, 51, 22, -177, 261, -178,
	55, -128, 23, -128, -111, 116, 113, 114, -174, 112,
	213, 187, 64, 28, 15, 251, 143, 266, 55, 144,
	-51, -51, -51, -128, -106, 11, 89, 36, -37, -37,
	-123, -84, -87, -101, 19, 11, 32, 32, -34, 66,
	67, 68, 108, -184, -68, -61, -61, -61, -33, 138,
	70, -185, -185, -34, 53, -37, -185, -185, -185, 53,
	51, 22, 53, 11, 108, 53, 11, -185, -34, -79,
	-77, 77, -37, -185, -185, -185, -185, -185, -59, 29,
	32, -2, -184, -184, -55, 53, 12, 79, -44, -43,
	50, 51, -45, 50, -43, 40, 40, 119, 119, 119,
	-91, -116, -55, -39, -55, -99, -100, 237, 234, 240,
	55, 53, -166, 79, 52, 50, 133, -160, -160, 55,
	-160, 55, 55, -158, -116, 66, 57, 58, 59, 66,
	241, 65, -57, 211, 9, 133, 133, 57, 270, -146,
	217, 58, -143, -143, -142, -143, -144, 29, -144, -144,
	-144, -151, 57, -151, -148, 261, 262, -148, 58, -149,
	58, -51, -116, -2, -176, -175, -117, -127, -120, -189,
	149, 125, 130, 129, 55, 124, 128, 143, -180, 149,
	125, 126, 130, 129, 55, 119, 133, 124, 128, 143,
	132, -112, -113, 121, 22, 119, 133, 143, 116, -128,
	-108, 87, 12, -122, -122, 37, 108, -51, -38, 11,
	96, -117, -35, -33, 70, -61, -61, -185, -36, -132,
	105, 183, 137, 181, 177, 199, 200, 189, 215, 179,
	216, -129, -132, -61, -61, -117, -61, -61, 258, -82,
	78, -37, 76, -92, 50, -93, -70, -72, -71, -184,
	-2, -88, -116, -91, -82, -97, -37, -37, -37, 52,
	-37, -184, -184, -184, -185, 53, -82, -55, 234, 238,
	239, -165, -166, -169, -168, -116, 10, 9, 55, 55,
	55, 130, -187, 267, -142, -184, 241, 54, -144, -144,
	-143, -144, 55, 105, 54, 53, 54, 179, 179, 53,
	54, 53, 52, 51, 50, 53, 79, -188, 119, 133,
	-127, -116, -127, -116, -51, -127, -116, 126, -155, 57,
	-37, -55, -39, -185, -61, -185, -142, -142, -142, -150,
	-142, 168, -142, 168, -185, -185, -185, 53, 19, -185,
	53, 19, -184, -32, 256, -37, 27, -92, 53, -185,
	-185, -185, 53, 108, -185, -86, -89, -116, -89, -89,
	-89, -125, -116, -86, 54, 53, -142, -157, 153, 154,
	29, 155, -157, 133, 187, 180, -185, -142, -144, -143,
	57, -143, 218, 218, 58, 58, -89, -116, -51, -175,
	-166, -116, 52, 26, -116, -80, 13, -143, 55, -61,
	-61, -61, -61, -61, -185, 57, 133, -72, 32, -2,
	-184, -116, -116, 53, 54, -185, -185, -185, -54, -171,
	-170, 51, 131, 64, 261, -168, 50, 66, 156, 50,
	-158, 185, -148, -144, -144, 54, 54, 54, 52, 52,
	52, -89, -184, 124, -81, 14, 16, -185, -185, -185,
	-185, -31, 89, 261, 9, -70, -2, 108, -116, -170,
	55, -161, 79, 57, 263, 9, 10, 52, -55, -89,
	-89, -89, 54, -172, -173, 143, 133, -37, -69, -185,
	259, 47, 264, -93, -185, -116, 58, -116, -157, -157,
	-159, -116, 54, 54, 54, -179, -185, 53, -116, 52,
	37, 260, 265, 54, 53, -55, -177, -173, 32, -89,
	37, 127, -116, 145, 54, 261, -51, 146, 264, 52,
	-184, 265, -159, -61, 142, 54, -185, -185,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 571, 0, 330, 330, 330, 330, 330, 330, 0,
	-2, 624, 0, 0, 0, 0, -2, 320, 321, 0,
	323, 324, 856, 856, 856, 856, 856, 0, 33, 34,
	854, 1, 3, 579, 0, 0, 334, 337, 332, 0,
	624, 0, 0, 0, 60, 0, 0, 0, 0, 622,
	622, 622, 69, 0, 0, 0, 625, 0, 620, 0,
	620, 620, 620, 0, 279, 401, 645, 646, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 0,
	0, 0, 0, 857, 857, 857, 857, 0, 857, 308,
	297, 299, 300, 301, 302, 857, 317, 318, 307, 319,
	322, 325, 326, 327, 328, 329, 27, 583, 0, 0,
	571, 29, 0, 330, 335, 336, 340, 338, 339, 331,
	0, 348, 352, 0, 409, 0, 414, 416, -2, -2,
	0, 451, 452, 453, 454, 455, 0, 0, 0, 0,
	0, 0, 0, 479, 480, 481, 482, 556, 557, 558,
	559, 560, 561, 562, 563, 418, 419, 553, 603, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 544, 0,
	510, 510, 510, 510, 510, 510, 510, 510, 0, 0,
	0, 0, 0, 0, 0, 359, 361, 362, 363, 382,
	0, 384, 0, 0, 41, 45, 0, 830, 607, -2,
	-2, 0, 0, 643, 644, -2, 754, -2, 641, 642,
	649, 650, 651, 652, 653, 654, 655, 656, 657, 658,
	659, 660, 661, 662, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
	689, 690, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 0, 82, 0, 0, 0, 70,
	0, 0, 0, 0, 79, 0, 857, 0, 0, 0,
	0, 0, 0, 0, 278, 0, 280, 857, 857, 857,
	857, 857, 857, 857, 857, 289, 858, 859, 290, 291,
	292, 857, 857, 294, 0, 309, 0, 303, 28, 855,
	22, 0, 0, 580, 0, 572, 573, 576, 579, 27,
	337, 0, 342, 341, 333, 0, 349, 0, 0, 0,
	353, 0, 355, 356, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 436, 437, 438, 439,
	440, 441, 442, 415, 0, 429, 0, 0, 0, 471,
	472, 473, 474, 475, 476, 0, 344, 27, 0, 449,
	0, 0, 0, 0, 0, 0, 0, 0, 340, 0,
	545, 0, 501, 0, 502, 503, 504, 505, 506, 507,
	508, 509, 537, 0, 539, 540, 541, 542, 543, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 136,
	137, 0, 344, 0, 0, 43, 0, 400, 0, 0,
	0, 0, 0, 0, 389, 0, 0, 392, 0, 0,
	0, 0, 383, 0, 0, 403, 799, 385, 0, 387,
	388, -2, 0, 0, 0, 39, 40, 0, 46, 830,
	48, 49, 0, 0, 0, 187, 615, 616, 617, 613,
	226, 0, 86, 181, 177, 88, 89, 90, 91, 167,
	114, 167, 167, 167, 167, 167, 184, 184, 184, 184,
	148, 149, 150, 151, 152, 153, 154, 0, 0, 131,
	167, 167, 167, 135, 157, 158, 159, 160, 161, 162,
	163, 164, 169, 169, 169, 171, 171, 0, 0, 73,
	0, 857, 0, 857, 80, 0, 0, 245, 0, 273,
	621, 0, 857, 276, 277, 402, 647, 648, 281, 282,
	283, 284, 285, 286, 287, 288, 293, 296, 310, 304,
	305, 298, 584, 0, 0, 0, 0, 0, 575, 577,
	578, 583, 30, 340, 0, 564, 0, 0, 0, 343,
	25, 410, 411, 413, 430, 0, 432, 434, 354, 350,
	0, 554, -2, 420, 421, 445, 446, 447, 0, 0,
	0, 0, 443, 425, 0, 456, 457, 458, 459, 460,
	461, 462, 463, 464, 465, 466, 467, 470, 521, 522,
	478, 0, 468, 469, 477, 0, 0, 345, 346, 448,
	0, 602, 27, 0, 0, 0, 0, 0, 553, 0,
	0, 0, 0, 551, 548, 0, 0, 511, 538, 0,
	0, 0, 0, 0, 0, 399, 407, 604, 0, 360,
	378, 380, 0, 375, 390, 391, 393, 0, 395, 0,
	397, 398, 364, 365, 366, 0, 0, 0, 0, 386,
	407, 0, 407, 42, 608, 47, 0, 0, 52, 53,
	609, 610, 611, 188, 0, 81, 227, 229, 232, 233,
	234, 83, 84, 85, 0, 212, 0, 0, 0, 0,
	0, 222, 207, 208, 93, 0, 0, 0, 102, 0,
	104, 106, 0, 92, 0, 183, 179, 178, 113, 0,
	184, 184, 167, 184, 142, 143, 187, 0, 187, 187,
	187, 0, 0, 174, 174, 134, 125, 0, 169, 127,
	128, 129, 0, 130, 0, 0, 0, 65, 0, 71,
	72, 66, 623, 67, 856, 68, 0, 636, 246, 626,
	627, 628, 629, 630, 631, 632, 633, 634, 635, 0,
	0, 272, 857, 275, 313, 0, 0, 0, 581, 582,
	0, 574, 23, 0, 618, 619, 565, 566, 357, 431,
	433, 435, 0, 344, 422, 443, 426, 0, 423, 0,
	0, 417, 483, 0, 0, 450, -2, 486, 487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 571, 0,
	549, 0, 0, 500, 512, 513, 514, 515, 596, 0,
	0, -2, 0, 0, 571, 0, 0, 0, 372, 379,
	0, 0, 373, 0, 374, 394, 396, 0, 0, 0,
	0, 370, 571, 407, 38, 50, 51, 0, 0, 57,
	189, 0, 230, 0, 0, 0, 200, 0, 0, 203,
	0, 205, 206, 0, 223, 94, 110, 96, 97, 98,
	167, 100, 108, 0, 0, 103, 105, 107, 182, 87,
	180, 0, 187, 187, 184, 187, 144, 0, 145, 146,
	147, 0, 165, 0, 132, 0, 0, 133, 0, 126,
	0, 0, 0, -2, 74, 75, 0, 235, 0, 856,
	0, 260, 261, 262, 263, 264, 265, 266, 856, 0,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 0, 856, 637, 638, 639, 640, 0, 0, 274,
	295, 0, 0, 311, 312, 585, 0, 24, 407, 0,
	351, 555, 0, 424, 0, 444, 427, 484, 347, 0,
	167, 167, 526, 167, 171, 529, 530, 167, 532, 167,
	535, 0, 0, 0, 0, 554, 0, 0, 0, 546,
	499, 552, 0, 31, 0, 596, 586, 598, 600, 0,
	27, 0, 592, 0, 579, 605, 408, 606, 376, 0,
	381, 0, 0, 0, 384, 0, 579, 37, 54, 55,
	56, 228, 231, 0, 209, 167, 0, 0, 201, 202,
	204, 0, 95, 0, 99, 0, 167, 168, 138, 139,
	187, 140, 185, 186, 184, 0, 184, 0, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	239, 0, 240, 242, 243, 244, 0, 222, 238, 314,
	315, 567, 358, 485, 428, 488, 523, 184, 527, 528,
	531, 533, 534, 536, 490, 489, 491, 0, 0, 494,
	0, 0, 0, 0, 0, 550, 0, 32, 0, 601,
	-2, 0, 0, 0, 44, 35, 0, 368, 0, 0,
	0, 403, 371, 36, 191, 0, 211, 213, 218, 219,
	0, 0, 214, 222, 0, 174, 109, 101, 141, 187,
	166, 187, 175, 176, 0, 0, 0, 0, 0, 76,
	77, 0, 0, 0, 223, 569, 0, 524, 525, 0,
	0, 0, 0, 516, 498, 547, 0, 599, 0, -2,
	0, 594, 593, 0, 377, 404, 405, 406, 367, 190,
	192, 0, 198, 0, 0, 210, 0, 220, 221, 0,
	0, 111, 112, 155, 156, 170, 173, 407, 0, 0,
	0, 0, 0, 0, 26, 0, 0, 492, 493, 495,
	496, 0, 0, 0, 0, 589, 27, 0, 369, 193,
	194, 0, 199, 196, 0, 0, 0, 0, 61, 0,
	0, 0, 70, 0, 268, 0, 0, 570, 568, 497,
	0, 0, 0, 597, -2, 595, 195, 197, 215, 216,
	0, 224, 407, 62, 236, 73, 267, 0, 0, 0,
	517, 0, 520, 0, 0, 63, 241, 269, 0, 0,
	518, 0, 225, 0, 237, 0, 0, 0, 0, 0,
	0, 519, 0, 0, 0, 217, 270, 271,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 268,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 269, 3, 270, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:314
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:319
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:320
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:324
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:347
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:355
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:359
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:365
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:372
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:378
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:382
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:388
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:392
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:399
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:411
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:423
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:427
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:433
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:439
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:443
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:447
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:452
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:453
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:457
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:461
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:466
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:470
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:476
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:480
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:484
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:488
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:494
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:498
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:504
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:508
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:512
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:522
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:530
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:536
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:540
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:546
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:551
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:567
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:582
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:597
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:605
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:613
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:617
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:622
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:626
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:631
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:635
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:641
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:646
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:651
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:657
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:662
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:668
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:673
		{
			yyVAL.bytes = nil
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:677
		{
			yyVAL.bytes = nil
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:683
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:690
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:697
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:702
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:706
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:710
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:716
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:721
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:732
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:743
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:748
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:753
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:758
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:763
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:768
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:773
		{
			yyDollar[1].columnType.Default = NewValArgWithOpt(yyDollar[3].bytes, yyDollar[4].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:778
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:783
		{
			yyDollar[1].columnType.OnUpdate = NewValArgWithOpt(yyDollar[4].bytes, yyDollar[5].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:788
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:793
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:798
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:803
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:808
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:813
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:818
		{
			yyDollar[1].columnType.Default = NewBoolSQLVal(bool(yyDollar[3].boolVal))
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:823
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:834
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:839
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1001
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1005
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1009
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1013
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1017
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 156:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1030
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1036
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1040
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1044
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1048
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1052
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1056
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1060
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1064
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1070
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1075
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1080
		{
			yyVAL.optVal = nil
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1084
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1089
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1093
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1101
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1105
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 173:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1111
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1119
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1123
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1127
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1132
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1136
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1141
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1145
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1150
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1154
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1158
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1163
		{
			yyVAL.str = ""
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1167
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1171
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1176
		{
			yyVAL.str = ""
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1180
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1184
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1190
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1194
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1200
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1204
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1210
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1214
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1219
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1223
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1229
		{
			yyVAL.str = ""
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1233
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1239
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1243
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1247
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1251
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1255
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1259
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1263
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1269
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1273
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1279
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1283
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1289
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1296
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1302
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 215:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1308
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1314
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 217:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1322
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1334
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1338
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1342
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1346
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1351
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1358
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1362
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1367
		{
			yyVAL.str = ""
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1371
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1375
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1383
		{
			yyVAL.str = yyDollar[1].str
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1387
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1391
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1397
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1401
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1405
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 235:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1411
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1415
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 237:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1429
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1443
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 239:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1452
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1456
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1460
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 242:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1473
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 243:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1483
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1488
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1493
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1497
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 267:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1529
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1535
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1539
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 270:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1545
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 271:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1549
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1555
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1561
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 274:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1569
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1574
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1582
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1586
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1592
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1596
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1601
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1607
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1611
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1615
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1620
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1624
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1628
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1632
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1636
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1640
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1644
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1648
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1652
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1656
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1660
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1664
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1674
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1678
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1682
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1686
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1690
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1694
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1698
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1708
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1714
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1718
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1724
		{
			yyVAL.str = ""
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1728
		{
			yyVAL.str = "extended "
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1734
		{
			yyVAL.str = ""
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1738
		{
			yyVAL.str = "full "
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1744
		{
			yyVAL.str = ""
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1748
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1752
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1758
		{
			yyVAL.showFilter = nil
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1762
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1766
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1772
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1776
		{
			yyVAL.str = SessionStr
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1780
		{
			yyVAL.str = GlobalStr
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1786
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1790
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1796
		{
			yyVAL.statement = &Begin{}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1800
		{
			yyVAL.statement = &Begin{}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1806
		{
			yyVAL.statement = &Commit{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1812
		{
			yyVAL.statement = &Rollback{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1818
		{
			yyVAL.statement = &OtherRead{}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1822
		{
			yyVAL.statement = &OtherRead{}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1826
		{
			yyVAL.statement = &OtherRead{}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1830
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1834
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1839
		{
			setAllowComments(yylex, true)
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1843
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1849
		{
			yyVAL.bytes2 = nil
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1853
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1859
		{
			yyVAL.str = UnionStr
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1863
		{
			yyVAL.str = UnionAllStr
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1867
		{
			yyVAL.str = UnionDistinctStr
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1872
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1876
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1880
		{
			yyVAL.str = SQLCacheStr
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1885
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1889
		{
			yyVAL.str = DistinctStr
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1894
		{
			yyVAL.str = ""
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1898
		{
			yyVAL.str = StraightJoinHint
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1903
		{
			yyVAL.selectExprs = nil
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1907
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1913
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1917
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1923
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1927
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1931
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1935
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1940
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1944
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1948
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1955
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1960
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1964
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1970
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1974
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1984
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1988
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1992
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1998
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 367:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2002
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2008
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2012
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2018
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2022
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2035
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2039
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2043
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2047
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2053
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2055
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2059
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2061
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2065
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2067
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2070
		{
			yyVAL.empty = struct{}{}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2072
		{
			yyVAL.empty = struct{}{}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2075
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2079
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2083
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2090
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2096
		{
			yyVAL.str = JoinStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2100
		{
			yyVAL.str = JoinStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2104
		{
			yyVAL.str = JoinStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2110
		{
			yyVAL.str = StraightJoinStr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2116
		{
			yyVAL.str = LeftJoinStr
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2120
		{
			yyVAL.str = LeftJoinStr
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2124
		{
			yyVAL.str = RightJoinStr
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2128
		{
			yyVAL.str = RightJoinStr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2134
		{
			yyVAL.str = NaturalJoinStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2138
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2148
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2152
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2158
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2162
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2167
		{
			yyVAL.indexHints = nil
		}
	case 404:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2171
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2175
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2179
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2184
		{
			yyVAL.expr = nil
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2188
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2194
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2198
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2202
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2206
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2210
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2214
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2218
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2224
		{
			yyVAL.str = ""
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2228
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2234
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2238
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2244
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2248
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2252
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2256
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 424:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2260
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2264
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2268
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2272
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 428:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2276
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2280
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2286
		{
			yyVAL.str = IsNullStr
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2290
		{
			yyVAL.str = IsNotNullStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2294
		{
			yyVAL.str = IsTrueStr
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2298
		{
			yyVAL.str = IsNotTrueStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2302
		{
			yyVAL.str = IsFalseStr
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2306
		{
			yyVAL.str = IsNotFalseStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2312
		{
			yyVAL.str = EqualStr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2316
		{
			yyVAL.str = LessThanStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2320
		{
			yyVAL.str = GreaterThanStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2324
		{
			yyVAL.str = LessEqualStr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2328
		{
			yyVAL.str = GreaterEqualStr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2332
		{
			yyVAL.str = NotEqualStr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2336
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2341
		{
			yyVAL.expr = nil
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2345
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2351
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2355
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2359
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2365
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2371
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2375
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2381
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2385
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2389
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2393
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2397
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2401
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2405
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2409
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2413
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2417
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2421
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2425
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2429
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2433
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2437
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2441
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2445
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2449
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2453
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2457
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2461
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2465
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2469
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2477
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2491
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2495
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2499
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2507
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2521
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 484:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2525
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2529
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2539
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2543
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 488:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2547
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 489:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2551
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 490:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2555
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 491:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2559
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 492:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2563
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 493:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2567
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 494:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2571
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 495:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2575
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 496:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2579
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 497:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2583
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 498:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2587
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 499:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2591
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2595
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2605
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2609
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2613
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2617
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2622
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2627
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2632
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2637
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2641
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2655
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2659
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2663
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2667
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2673
		{
			yyVAL.str = ""
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2677
		{
			yyVAL.str = BooleanModeStr
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2681
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 519:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2685
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2689
		{
			yyVAL.str = QueryExpansionStr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2695
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2699
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2705
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2709
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2713
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2717
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2721
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2725
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2731
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2735
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2739
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2743
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2747
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2751
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2755
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2759
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2765
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2769
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2773
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2777
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2781
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2785
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2789
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2794
		{
			yyVAL.expr = nil
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2798
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2803
		{
			yyVAL.str = string("")
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2807
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2813
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2817
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2823
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2828
		{
			yyVAL.expr = nil
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2832
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2838
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2842
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2846
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2852
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2856
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2860
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2864
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2868
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2872
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2876
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2880
		{
			yyVAL.expr = &NullVal{}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2886
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2895
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2899
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2904
		{
			yyVAL.exprs = nil
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2908
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2913
		{
			yyVAL.expr = nil
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2917
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2922
		{
			yyVAL.orderBy = nil
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2926
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2932
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2936
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2942
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2947
		{
			yyVAL.str = AscScr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2951
		{
			yyVAL.str = AscScr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2955
		{
			yyVAL.str = DescScr
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2960
		{
			yyVAL.limit = nil
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2964
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2968
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2972
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2977
		{
			yyVAL.str = ""
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2981
		{
			yyVAL.str = ForUpdateStr
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2985
		{
			yyVAL.str = ShareModeStr
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2998
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3002
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3006
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 589:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3011
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3015
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 591:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3019
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3026
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3030
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3034
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3038
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3043
		{
			yyVAL.updateExprs = nil
		}
	case 597:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3047
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3053
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3057
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3063
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3067
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3073
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3079
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3089
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3093
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3099
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3105
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3109
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3115
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3119
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3123
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3130
		{
			yyVAL.bytes = []byte("charset")
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3137
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3141
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3145
		{
			yyVAL.expr = &Default{}
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3154
		{
			yyVAL.byt = 0
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3156
		{
			yyVAL.byt = 1
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3159
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3161
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3164
		{
			yyVAL.str = ""
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3166
		{
			yyVAL.str = IgnoreStr
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3170
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3172
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3174
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3176
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3178
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3180
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3182
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3184
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3186
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3188
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3191
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3193
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3195
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3199
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3201
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3205
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3209
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3216
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3222
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3226
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3233
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3464
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3473
		{
			decNesting(yylex)
		}
	case 856:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3478
		{
			forceEOF(yylex)
		}
	case 857:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3483
		{
			forceEOF(yylex)
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3487
		{
			forceEOF(yylex)
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3491
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
