// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const UNIQUE = 57457
const KEY = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const RESTRICT = 57478
const CASCADE = 57479
const NO = 57480
const ACTION = 57481
const BEGIN = 57482
const START = 57483
const TRANSACTION = 57484
const COMMIT = 57485
const ROLLBACK = 57486
const BIT = 57487
const TINYINT = 57488
const SMALLINT = 57489
const SMALLSERIAL = 57490
const MEDIUMINT = 57491
const INT = 57492
const INTEGER = 57493
const SERIAL = 57494
const BIGINT = 57495
const BIGSERIAL = 57496
const INTNUM = 57497
const REAL = 57498
const DOUBLE = 57499
const FLOAT_TYPE = 57500
const DECIMAL = 57501
const NUMERIC = 57502
const TIME = 57503
const TIMESTAMP = 57504
const DATETIME = 57505
const YEAR = 57506
const CHAR = 57507
const VARCHAR = 57508
const VARYING = 57509
const BOOL = 57510
const CHARACTER = 57511
const VARBINARY = 57512
const NCHAR = 57513
const UUID = 57514
const TEXT = 57515
const TINYTEXT = 57516
const MEDIUMTEXT = 57517
const LONGTEXT = 57518
const BLOB = 57519
const TINYBLOB = 57520
const MEDIUMBLOB = 57521
const LONGBLOB = 57522
const JSON = 57523
const ENUM = 57524
const GEOMETRY = 57525
const POINT = 57526
const LINESTRING = 57527
const POLYGON = 57528
const GEOMETRYCOLLECTION = 57529
const MULTIPOINT = 57530
const MULTILINESTRING = 57531
const MULTIPOLYGON = 57532
const NULLX = 57533
const AUTO_INCREMENT = 57534
const APPROXNUM = 57535
const SIGNED = 57536
const UNSIGNED = 57537
const ZEROFILL = 57538
const ZONE = 57539
const DATABASES = 57540
const TABLES = 57541
const VITESS_KEYSPACES = 57542
const VITESS_SHARDS = 57543
const VITESS_TABLETS = 57544
const VSCHEMA_TABLES = 57545
const EXTENDED = 57546
const FULL = 57547
const PROCESSLIST = 57548
const NAMES = 57549
const CHARSET = 57550
const GLOBAL = 57551
const SESSION = 57552
const ISOLATION = 57553
const LEVEL = 57554
const READ = 57555
const WRITE = 57556
const ONLY = 57557
const REPEATABLE = 57558
const COMMITTED = 57559
const UNCOMMITTED = 57560
const SERIALIZABLE = 57561
const CURRENT_TIMESTAMP = 57562
const DATABASE = 57563
const CURRENT_DATE = 57564
const CURRENT_TIME = 57565
const LOCALTIME = 57566
const LOCALTIMESTAMP = 57567
const UTC_DATE = 57568
const UTC_TIME = 57569
const UTC_TIMESTAMP = 57570
const REPLACE = 57571
const CONVERT = 57572
const CAST = 57573
const SUBSTR = 57574
const SUBSTRING = 57575
const GROUP_CONCAT = 57576
const SEPARATOR = 57577
const MATCH = 57578
const AGAINST = 57579
const BOOLEAN = 57580
const LANGUAGE = 57581
const WITH = 57582
const WITHOUT = 57583
const PARSER = 57584
const QUERY = 57585
const EXPANSION = 57586
const UNUSED = 57587

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	151, 304,
	152, 304,
	-2, 294,
	-1, 246,
	108, 623,
	-2, 619,
	-1, 247,
	108, 624,
	-2, 620,
	-1, 316,
	79, 789,
	-2, 58,
	-1, 317,
	79, 749,
	-2, 59,
	-1, 322,
	79, 733,
	-2, 590,
	-1, 324,
	79, 770,
	-2, 592,
	-1, 587,
	51, 41,
	53, 41,
	-2, 43,
	-1, 730,
	108, 626,
	-2, 622,
	-1, 947,
	5, 28,
	-2, 436,
	-1, 972,
	5, 27,
	-2, 565,
	-1, 1232,
	5, 28,
	-2, 566,
	-1, 1287,
	5, 27,
	-2, 568,
	-1, 1360,
	5, 28,
	-2, 569,
}

const yyPrivate = 57344

const yyLast = 11332

var yyAct = [...]int{

	247, 1366, 667, 1350, 1298, 975, 888, 792, 534, 276,
	1132, 1238, 1014, 1160, 1133, 1249, 810, 251, 1052, 832,
	828, 225, 581, 53, 533, 3, 882, 579, 838, 831,
	308, 1129, 1106, 868, 755, 87, 454, 793, 87, 321,
	991, 219, 939, 765, 66, 253, 1042, 762, 597, 1039,
	980, 732, 781, 467, 473, 878, 422, 845, 789, 315,
	596, 303, 87, 87, 326, 84, 583, 568, 87, 487,
	326, 302, 224, 479, 249, 312, 87, 548, 87, 921,
	310, 52, 1397, 905, 87, 220, 221, 222, 223, 301,
	1378, 1394, 1358, 311, 764, 234, 904, 1299, 425, 1340,
	318, 1043, 1044, 238, 1391, 889, 433, 306, 434, 1377,
	1301, 1357, 1124, 1226, 441, 426, 68, 1168, 1154, 1017,
	1018, 1019, 823, 909, 447, 1155, 1156, 1022, 1020, 824,
	825, 598, 903, 599, 1328, 500, 499, 509, 510, 502,
	503, 504, 505, 506, 507, 508, 501, 57, 697, 511,
	82, 78, 79, 80, 999, 698, 462, 998, 1261, 1260,
	1000, 1028, 859, 869, 71, 72, 1180, 67, 1179, 1276,
	851, 1215, 59, 60, 61, 62, 63, 1300, 1213, 73,
	900, 897, 898, 218, 896, 861, 1107, 449, 1306, 451,
	458, 459, 852, 1352, 1393, 1389, 69, 1252, 87, 1351,
	1084, 790, 326, 326, 326, 326, 857, 326, 849, 423,
	203, 907, 910, 850, 326, 1190, 448, 450, 1109, 847,
	1284, 1255, 1025, 1024, 1007, 1167, 1387, 1012, 443, 1191,
	1199, 1319, 436, 848, 213, 429, 1081, 811, 813, 76,
	1010, 326, 75, 666, 76, 676, 990, 989, 988, 424,
	432, 1333, 475, 197, 902, 476, 77, 1111, 1235, 1115,
	1085, 1110, 1174, 1108, 523, 524, 854, 1093, 1071, 1113,
	955, 81, 933, 847, 856, 855, 916, 901, 841, 1112,
	846, 704, 842, 843, 198, 70, 844, 848, 275, 491,
	200, 847, 1114, 1116, 521, 442, 244, 206, 202, 1021,
	869, 87, 1329, 1302, 847, 848, 829, 446, 87, 87,
	87, 812, 1175, 501, 326, 906, 511, 864, 848, 1356,
	326, 1250, 1251, 1253, 511, 701, 204, 485, 484, 208,
	908, 563, 1072, 1082, 1061, 1080, 486, 1074, 1067, 1068,
	587, 1075, 1070, 1069, 486, 1077, 1073, 1083, 1089, 1338,
	318, 853, 320, 306, 917, 1188, 1076, 978, 427, 435,
	739, 484, 1066, 670, 600, 199, 1126, 550, 551, 552,
	553, 554, 555, 556, 737, 738, 736, 486, 782, 477,
	504, 505, 506, 507, 508, 501, 481, 860, 511, 594,
	588, 1305, 707, 708, 201, 1016, 209, 210, 211, 212,
	216, 1362, 1263, 1062, 1058, 215, 214, 1063, 1060, 1059,
	1339, 73, 509, 510, 502, 503, 504, 505, 506, 507,
	508, 501, 1064, 1088, 511, 326, 326, 782, 1057, 962,
	1262, 1047, 87, 87, 326, 1046, 87, 485, 484, 87,
	438, 439, 440, 87, 74, 326, 326, 326, 326, 326,
	326, 326, 326, 756, 486, 757, 722, 724, 725, 326,
	326, 723, 672, 673, 87, 428, 677, 1029, 703, 680,
	502, 503, 504, 505, 506, 507, 508, 501, 952, 326,
	511, 1283, 685, 87, 930, 931, 932, 1258, 1201, 326,
	320, 320, 320, 320, 699, 320, 50, 709, 951, 1040,
	950, 1336, 320, 702, 733, 300, 735, 485, 484, 1026,
	1380, 1401, 466, 718, 1128, 1166, 485, 484, 21, 485,
	484, 1165, 683, 1164, 486, 485, 484, 1013, 729, 489,
	1001, 730, 326, 486, 1291, 1390, 486, 430, 431, 891,
	734, 758, 486, 1380, 1379, 1373, 466, 1291, 1370, 1291,
	1369, 525, 526, 527, 528, 529, 530, 531, 726, 774,
	777, 769, 682, 87, 681, 783, 87, 87, 87, 87,
	87, 728, 671, 711, 229, 1291, 1368, 1312, 87, 1291,
	1348, 87, 794, 1291, 1313, 87, 1291, 466, 1291, 1292,
	87, 87, 669, 791, 326, 1247, 1246, 1311, 759, 760,
	1151, 466, 320, 1234, 466, 769, 786, 326, 602, 1183,
	1182, 306, 306, 306, 306, 306, 23, 818, 779, 1177,
	1178, 819, 1177, 1176, 945, 466, 306, 444, 796, 797,
	318, 799, 770, 771, 591, 306, 437, 795, 778, 970,
	798, 423, 971, 833, 807, 1169, 816, 565, 466, 767,
	466, 815, 785, 820, 787, 788, 821, 607, 606, 870,
	871, 872, 50, 23, 836, 1130, 54, 87, 976, 976,
	326, 977, 326, 1096, 592, 87, 590, 87, 977, 957,
	87, 326, 266, 265, 268, 269, 270, 271, 954, 1286,
	884, 267, 272, 817, 564, 590, 767, 887, 1230, 23,
	565, 1187, 1181, 1002, 945, 911, 822, 912, 945, 50,
	913, 668, 565, 664, 320, 945, 880, 881, 565, 976,
	593, 956, 320, 1185, 1184, 570, 573, 574, 575, 571,
	953, 572, 576, 320, 320, 320, 320, 320, 320, 320,
	320, 729, 705, 231, 730, 50, 733, 320, 320, 499,
	509, 510, 502, 503, 504, 505, 506, 507, 508, 501,
	922, 50, 511, 923, 1395, 1375, 1343, 713, 570, 573,
	574, 575, 571, 1316, 572, 576, 1315, 489, 981, 982,
	320, 1314, 734, 1270, 861, 883, 1145, 1005, 935, 50,
	731, 981, 982, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 885, 886,
	987, 929, 879, 874, 972, 326, 873, 65, 87, 1307,
	761, 1304, 993, 1186, 995, 1130, 1006, 984, 679, 463,
	775, 775, 326, 961, 804, 802, 775, 717, 986, 805,
	803, 806, 801, 574, 575, 994, 800, 326, 1386, 985,
	1376, 1003, 1092, 775, 235, 236, 918, 480, 944, 1384,
	928, 927, 468, 306, 1035, 1271, 605, 445, 833, 1228,
	478, 996, 893, 469, 959, 480, 678, 578, 232, 233,
	226, 1322, 320, 227, 54, 1321, 87, 326, 326, 1034,
	326, 1036, 1037, 1038, 1274, 320, 1030, 1031, 926, 1033,
	1008, 1009, 1011, 977, 1163, 1162, 925, 482, 1342, 1341,
	1330, 1023, 700, 56, 326, 58, 1048, 87, 87, 1056,
	1189, 589, 51, 1045, 1041, 87, 1053, 240, 1, 1065,
	890, 1051, 899, 1349, 326, 1297, 1159, 1054, 839, 830,
	421, 1055, 500, 499, 509, 510, 502, 503, 504, 505,
	506, 507, 508, 501, 64, 1094, 511, 1337, 320, 840,
	320, 837, 608, 1027, 858, 465, 614, 612, 613, 320,
	1098, 610, 616, 615, 326, 326, 611, 609, 1131, 1100,
	205, 1134, 1099, 1125, 313, 1118, 1117, 577, 794, 1105,
	940, 601, 1121, 320, 794, 730, 483, 1079, 1136, 1140,
	1153, 1078, 895, 326, 1087, 326, 326, 862, 863, 865,
	866, 867, 696, 915, 1141, 1139, 461, 1152, 207, 519,
	924, 997, 319, 1137, 1158, 875, 876, 877, 706, 472,
	1320, 1273, 1157, 960, 936, 937, 938, 545, 780, 833,
	252, 833, 721, 264, 261, 263, 262, 712, 969, 493,
	250, 1170, 1171, 242, 1173, 305, 561, 569, 326, 567,
	566, 983, 979, 304, 1095, 1225, 1172, 326, 1327, 716,
	25, 55, 237, 19, 18, 17, 20, 16, 15, 87,
	14, 29, 13, 12, 11, 326, 10, 9, 8, 7,
	6, 5, 4, 228, 326, 22, 2, 87, 1192, 0,
	0, 1203, 0, 992, 0, 0, 0, 1194, 0, 1196,
	0, 0, 0, 0, 1200, 0, 0, 0, 0, 0,
	320, 1197, 0, 0, 1204, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 1015, 0, 0, 1211, 0,
	0, 0, 306, 0, 0, 0, 326, 0, 326, 326,
	326, 87, 326, 0, 470, 474, 0, 0, 326, 1240,
	1241, 1242, 1237, 1229, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 1243, 1245, 1049, 320, 1003, 320, 1254,
	0, 0, 0, 0, 0, 326, 326, 87, 326, 326,
	326, 0, 0, 1256, 833, 0, 1264, 0, 0, 0,
	326, 0, 320, 0, 0, 535, 1267, 0, 1268, 0,
	1257, 0, 1259, 0, 546, 0, 0, 1266, 0, 0,
	0, 0, 320, 0, 1053, 833, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 326, 1102, 1103, 0,
	1134, 0, 0, 1275, 320, 1285, 0, 0, 326, 0,
	1119, 1120, 1032, 1122, 1123, 452, 326, 0, 1287, 775,
	1296, 1303, 1138, 992, 0, 775, 0, 0, 1308, 0,
	0, 326, 0, 0, 0, 0, 0, 0, 1309, 0,
	1310, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 320, 326, 320, 1161, 0, 1134, 1331, 0, 0,
	0, 0, 1335, 0, 0, 0, 0, 471, 0, 0,
	0, 0, 0, 1332, 0, 326, 326, 326, 0, 1344,
	0, 0, 0, 0, 0, 0, 1345, 1346, 1347, 0,
	0, 1354, 0, 0, 326, 0, 0, 0, 1359, 0,
	0, 326, 85, 0, 326, 217, 1193, 0, 794, 0,
	0, 1371, 326, 0, 0, 1195, 0, 1364, 1365, 0,
	0, 0, 0, 277, 47, 0, 0, 241, 0, 85,
	85, 0, 0, 1198, 1381, 85, 326, 1383, 1382, 0,
	0, 326, 320, 85, 0, 85, 0, 1385, 87, 0,
	0, 85, 0, 0, 0, 0, 326, 1398, 1206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 719, 720, 0, 0, 0, 0, 1392, 230,
	0, 0, 0, 0, 0, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 1239, 0, 1239, 1239, 1239, 0,
	1244, 0, 710, 0, 0, 0, 320, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 455, 456,
	457, 0, 460, 0, 535, 0, 0, 772, 773, 464,
	0, 0, 0, 1239, 1265, 0, 320, 320, 1269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 1208, 1209, 0, 1210, 766,
	768, 1212, 0, 1214, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 784, 1277, 1278, 0, 1279,
	1280, 1281, 0, 1289, 1290, 0, 0, 0, 827, 0,
	0, 0, 0, 0, 0, 0, 1161, 0, 0, 0,
	0, 0, 0, 0, 1015, 809, 466, 0, 0, 1248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1239,
	0, 0, 0, 0, 0, 453, 453, 453, 453, 0,
	453, 0, 0, 0, 0, 0, 0, 453, 0, 0,
	1334, 0, 500, 499, 509, 510, 502, 503, 504, 505,
	506, 507, 508, 501, 47, 0, 511, 0, 0, 0,
	0, 0, 0, 1239, 1239, 1239, 0, 0, 85, 520,
	0, 0, 522, 0, 0, 85, 585, 85, 0, 775,
	0, 0, 1361, 0, 0, 0, 0, 0, 0, 1363,
	919, 920, 1367, 474, 0, 0, 0, 0, 0, 532,
	1374, 536, 537, 538, 539, 540, 541, 542, 543, 544,
	0, 547, 549, 549, 549, 549, 549, 549, 549, 549,
	557, 558, 559, 560, 1239, 0, 0, 0, 0, 1388,
	0, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 665, 0, 0, 1367, 0, 0, 0, 0, 675,
	0, 0, 0, 1399, 0, 946, 0, 0, 0, 0,
	686, 687, 688, 689, 690, 691, 692, 693, 0, 0,
	963, 0, 0, 0, 694, 695, 0, 0, 1222, 466,
	0, 0, 0, 0, 942, 0, 0, 0, 943, 0,
	0, 0, 0, 0, 0, 947, 948, 949, 0, 85,
	85, 0, 0, 85, 958, 0, 85, 0, 0, 964,
	684, 965, 966, 967, 968, 500, 499, 509, 510, 502,
	503, 504, 505, 506, 507, 508, 501, 0, 0, 511,
	0, 85, 500, 499, 509, 510, 502, 503, 504, 505,
	506, 507, 508, 501, 0, 0, 511, 1219, 466, 453,
	85, 0, 0, 0, 0, 0, 0, 453, 0, 684,
	0, 0, 0, 0, 0, 0, 0, 0, 453, 453,
	453, 453, 453, 453, 453, 453, 0, 0, 0, 0,
	0, 0, 453, 453, 500, 499, 509, 510, 502, 503,
	504, 505, 506, 507, 508, 501, 0, 0, 511, 0,
	241, 0, 0, 0, 0, 241, 241, 0, 0, 776,
	776, 241, 0, 0, 0, 776, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 241, 241, 241, 0,
	85, 0, 776, 85, 85, 85, 85, 85, 0, 0,
	0, 0, 0, 0, 0, 808, 47, 1223, 85, 0,
	1127, 0, 585, 0, 0, 0, 0, 85, 85, 0,
	536, 0, 0, 0, 0, 1142, 1143, 0, 0, 1144,
	1104, 0, 1146, 0, 0, 0, 0, 1220, 0, 0,
	0, 0, 0, 0, 0, 892, 0, 894, 0, 307,
	307, 307, 307, 307, 0, 0, 914, 0, 0, 0,
	0, 0, 0, 0, 580, 0, 814, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 0, 1150, 500, 499,
	509, 510, 502, 503, 504, 505, 506, 507, 508, 501,
	0, 0, 511, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 85, 0, 85, 0, 0, 85, 500, 499,
	509, 510, 502, 503, 504, 505, 506, 507, 508, 501,
	0, 0, 511, 0, 0, 0, 0, 23, 24, 48,
	26, 27, 684, 0, 0, 0, 0, 1202, 0, 0,
	0, 0, 0, 0, 241, 0, 42, 0, 0, 0,
	28, 0, 0, 453, 0, 453, 0, 0, 0, 0,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 37,
	0, 0, 0, 50, 0, 0, 1227, 0, 0, 0,
	0, 0, 0, 535, 0, 1205, 0, 0, 0, 0,
	0, 241, 1207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1216, 1217, 1218, 0, 241, 1221, 0,
	0, 0, 0, 934, 0, 0, 0, 0, 0, 0,
	0, 1231, 1232, 1233, 0, 1236, 0, 0, 0, 0,
	0, 0, 30, 31, 33, 32, 35, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 43, 44, 0, 0,
	45, 46, 34, 1050, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 973, 974, 0, 0, 0, 38, 39,
	0, 40, 41, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 1101,
	0, 1282, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1293, 1294, 1295, 500,
	499, 509, 510, 502, 503, 504, 505, 506, 507, 508,
	501, 0, 0, 511, 1090, 1091, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 1323, 1324, 1325, 1326, 49, 0, 1353,
	535, 453, 0, 241, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 684, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 453, 776, 0,
	0, 0, 0, 0, 776, 0, 0, 0, 0, 0,
	0, 0, 0, 1355, 0, 0, 0, 0, 1360, 0,
	495, 0, 498, 0, 0, 0, 0, 0, 512, 513,
	514, 515, 516, 517, 518, 1372, 496, 497, 494, 500,
	499, 509, 510, 502, 503, 504, 505, 506, 507, 508,
	501, 0, 0, 511, 0, 1135, 0, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1147, 1148, 1149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1402, 1403, 0, 0, 0,
	141, 941, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 121, 0, 124, 85, 0, 159, 133,
	0, 500, 499, 509, 510, 502, 503, 504, 505, 506,
	507, 508, 501, 0, 85, 511, 0, 325, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 500, 499, 509, 510, 502, 503, 504, 505,
	506, 507, 508, 501, 0, 0, 511, 0, 585, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 0, 0, 0, 146, 0, 104, 0,
	163, 113, 0, 122, 0, 0, 0, 0, 1224, 105,
	0, 152, 142, 175, 85, 143, 151, 125, 167, 147,
	174, 185, 186, 165, 183, 154, 97, 139, 88, 90,
	164, 173, 102, 155, 93, 171, 161, 162, 131, 117,
	118, 157, 91, 92, 0, 150, 108, 112, 107, 140,
	168, 169, 106, 194, 98, 181, 182, 95, 99, 180,
	138, 179, 166, 172, 132, 129, 94, 170, 130, 128,
	120, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 0, 0, 160, 177, 195, 196, 0, 0, 187,
	188, 189, 190, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 193, 0, 153, 103, 176, 158, 0,
	0, 0, 0, 0, 1135, 0, 0, 1288, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 96, 123, 191,
	192, 0, 148, 111, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1318, 0, 0, 776, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1135, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 410, 400, 0, 371, 412, 348, 363, 420, 364,
	365, 393, 334, 379, 141, 360, 0, 351, 329, 357,
	330, 349, 373, 109, 347, 402, 382, 121, 418, 124,
	387, 0, 159, 133, 0, 85, 375, 404, 377, 398,
	370, 394, 339, 386, 413, 361, 390, 414, 0, 0,
	0, 325, 0, 834, 835, 0, 0, 0, 0, 0,
	101, 0, 389, 409, 359, 392, 328, 388, 0, 332,
	335, 419, 407, 354, 355, 1004, 0, 0, 0, 0,
	0, 0, 374, 378, 395, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 0, 385, 1396, 0, 0,
	336, 333, 0, 372, 0, 0, 0, 338, 0, 353,
	396, 0, 327, 399, 405, 369, 184, 408, 367, 366,
	146, 0, 104, 0, 163, 113, 362, 122, 411, 376,
	403, 350, 358, 105, 356, 152, 142, 175, 384, 143,
	151, 125, 167, 147, 174, 185, 186, 165, 183, 154,
	97, 139, 88, 90, 164, 173, 102, 155, 93, 171,
	161, 162, 131, 117, 118, 157, 91, 92, 0, 150,
	108, 112, 107, 140, 168, 169, 106, 194, 98, 181,
	182, 95, 99, 180, 138, 179, 166, 172, 132, 129,
	94, 170, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 331, 0, 160, 177, 195,
	196, 346, 406, 187, 188, 189, 190, 0, 0, 0,
	137, 100, 116, 156, 119, 126, 149, 193, 391, 153,
	103, 176, 158, 342, 345, 340, 341, 380, 381, 415,
	416, 417, 397, 337, 0, 343, 344, 0, 401, 383,
	89, 96, 123, 191, 192, 0, 148, 111, 178, 410,
	400, 0, 371, 412, 348, 363, 420, 364, 365, 393,
	334, 379, 141, 360, 0, 351, 329, 357, 330, 349,
	373, 109, 347, 402, 382, 121, 418, 124, 387, 0,
	159, 133, 0, 0, 375, 404, 377, 398, 370, 394,
	339, 386, 413, 361, 390, 414, 0, 0, 0, 325,
	0, 834, 835, 0, 0, 0, 0, 0, 101, 0,
	389, 409, 359, 392, 328, 388, 0, 332, 335, 419,
	407, 354, 355, 0, 0, 0, 0, 0, 0, 0,
	374, 378, 395, 368, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 0, 385, 0, 0, 0, 336, 333,
	0, 372, 0, 0, 0, 338, 0, 353, 396, 0,
	327, 399, 405, 369, 184, 408, 367, 366, 146, 0,
	104, 0, 163, 113, 362, 122, 411, 376, 403, 350,
	358, 105, 356, 152, 142, 175, 384, 143, 151, 125,
	167, 147, 174, 185, 186, 165, 183, 154, 97, 139,
	88, 90, 164, 173, 102, 155, 93, 171, 161, 162,
	131, 117, 118, 157, 91, 92, 0, 150, 108, 112,
	107, 140, 168, 169, 106, 194, 98, 181, 182, 95,
	99, 180, 138, 179, 166, 172, 132, 129, 94, 170,
	130, 128, 120, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 331, 0, 160, 177, 195, 196, 346,
	406, 187, 188, 189, 190, 0, 0, 0, 137, 100,
	116, 156, 119, 126, 149, 193, 391, 153, 103, 176,
	158, 342, 345, 340, 341, 380, 381, 415, 416, 417,
	397, 337, 0, 343, 344, 0, 401, 383, 89, 96,
	123, 191, 192, 0, 148, 111, 178, 410, 400, 0,
	371, 412, 348, 363, 420, 364, 365, 393, 334, 379,
	141, 360, 0, 351, 329, 357, 330, 349, 373, 109,
	347, 402, 382, 121, 418, 124, 387, 0, 159, 133,
	0, 0, 375, 404, 377, 398, 370, 394, 339, 386,
	413, 361, 390, 414, 0, 0, 0, 325, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 389, 409,
	359, 392, 328, 388, 0, 332, 335, 419, 407, 354,
	355, 0, 0, 0, 0, 0, 0, 0, 374, 378,
	395, 368, 0, 0, 0, 0, 0, 0, 1097, 0,
	352, 0, 385, 0, 0, 0, 336, 333, 0, 372,
	0, 0, 0, 338, 0, 353, 396, 0, 327, 399,
	405, 369, 184, 408, 367, 366, 146, 0, 104, 0,
	163, 113, 362, 122, 411, 376, 403, 350, 358, 105,
	356, 152, 142, 175, 384, 143, 151, 125, 167, 147,
	174, 185, 186, 165, 183, 154, 97, 139, 88, 90,
	164, 173, 102, 155, 93, 171, 161, 162, 131, 117,
	118, 157, 91, 92, 0, 150, 108, 112, 107, 140,
	168, 169, 106, 194, 98, 181, 182, 95, 99, 180,
	138, 179, 166, 172, 132, 129, 94, 170, 130, 128,
	120, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 331, 0, 160, 177, 195, 196, 346, 406, 187,
	188, 189, 190, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 193, 391, 153, 103, 176, 158, 342,
	345, 340, 341, 380, 381, 415, 416, 417, 397, 337,
	0, 343, 344, 0, 401, 383, 89, 96, 123, 191,
	192, 0, 148, 111, 178, 410, 400, 0, 371, 412,
	348, 363, 420, 364, 365, 393, 334, 379, 141, 360,
	0, 351, 329, 357, 330, 349, 373, 109, 347, 402,
	382, 121, 418, 124, 387, 0, 159, 133, 0, 0,
	375, 404, 377, 398, 370, 394, 339, 386, 413, 361,
	390, 414, 50, 0, 0, 325, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 389, 409, 359, 392,
	328, 388, 0, 332, 335, 419, 407, 354, 355, 0,
	0, 0, 0, 0, 0, 0, 374, 378, 395, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 352, 0,
	385, 0, 0, 0, 336, 333, 0, 372, 0, 0,
	0, 338, 0, 353, 396, 0, 327, 399, 405, 369,
	184, 408, 367, 366, 146, 0, 104, 0, 163, 113,
	362, 122, 411, 376, 403, 350, 358, 105, 356, 152,
	142, 175, 384, 143, 151, 125, 167, 147, 174, 185,
	186, 165, 183, 154, 97, 139, 88, 90, 164, 173,
	102, 155, 93, 171, 161, 162, 131, 117, 118, 157,
	91, 92, 0, 150, 108, 112, 107, 140, 168, 169,
	106, 194, 98, 181, 182, 95, 99, 180, 138, 179,
	166, 172, 132, 129, 94, 170, 130, 128, 120, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 331,
	0, 160, 177, 195, 196, 346, 406, 187, 188, 189,
	190, 0, 0, 0, 137, 100, 116, 156, 119, 126,
	149, 193, 391, 153, 103, 176, 158, 342, 345, 340,
	341, 380, 381, 415, 416, 417, 397, 337, 0, 343,
	344, 0, 401, 383, 89, 96, 123, 191, 192, 0,
	148, 111, 178, 410, 400, 0, 371, 412, 348, 363,
	420, 364, 365, 393, 334, 379, 141, 360, 0, 351,
	329, 357, 330, 349, 373, 109, 347, 402, 382, 121,
	418, 124, 387, 0, 159, 133, 0, 0, 375, 404,
	377, 398, 370, 394, 339, 386, 413, 361, 390, 414,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 389, 409, 359, 392, 328, 388,
	0, 332, 335, 419, 407, 354, 355, 0, 0, 0,
	0, 0, 0, 0, 374, 378, 395, 368, 0, 0,
	0, 0, 0, 0, 727, 0, 352, 0, 385, 0,
	0, 0, 336, 333, 0, 372, 0, 0, 0, 338,
	0, 353, 396, 0, 327, 399, 405, 369, 184, 408,
	367, 366, 146, 0, 104, 0, 163, 113, 362, 122,
	411, 376, 403, 350, 358, 105, 356, 152, 142, 175,
	384, 143, 151, 125, 167, 147, 174, 185, 186, 165,
	183, 154, 97, 139, 88, 90, 164, 173, 102, 155,
	93, 171, 161, 162, 131, 117, 118, 157, 91, 92,
	0, 150, 108, 112, 107, 140, 168, 169, 106, 194,
	98, 181, 182, 95, 99, 180, 138, 179, 166, 172,
	132, 129, 94, 170, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 331, 0, 160,
	177, 195, 196, 346, 406, 187, 188, 189, 190, 0,
	0, 0, 137, 100, 116, 156, 119, 126, 149, 193,
	391, 153, 103, 176, 158, 342, 345, 340, 341, 380,
	381, 415, 416, 417, 397, 337, 0, 343, 344, 0,
	401, 383, 89, 96, 123, 191, 192, 0, 148, 111,
	178, 410, 400, 0, 371, 412, 348, 363, 420, 364,
	365, 393, 334, 379, 141, 360, 0, 351, 329, 357,
	330, 349, 373, 109, 347, 402, 382, 121, 418, 124,
	387, 0, 159, 133, 0, 0, 375, 404, 377, 398,
	370, 394, 339, 386, 413, 361, 390, 414, 0, 0,
	0, 325, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 389, 409, 359, 392, 328, 388, 0, 332,
	335, 419, 407, 354, 355, 0, 0, 0, 0, 0,
	0, 0, 374, 378, 395, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 0, 385, 0, 0, 0,
	336, 333, 0, 372, 0, 0, 0, 338, 0, 353,
	396, 0, 327, 399, 405, 369, 184, 408, 367, 366,
	146, 0, 104, 0, 163, 113, 362, 122, 411, 376,
	403, 350, 358, 105, 356, 152, 142, 175, 384, 143,
	151, 125, 167, 147, 174, 185, 186, 165, 183, 154,
	97, 139, 88, 90, 164, 173, 102, 155, 93, 171,
	161, 162, 131, 117, 118, 157, 91, 92, 0, 150,
	108, 112, 107, 140, 168, 169, 106, 194, 98, 181,
	182, 95, 99, 180, 138, 179, 166, 172, 132, 129,
	94, 170, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 331, 0, 160, 177, 195,
	196, 346, 406, 187, 188, 189, 190, 0, 0, 0,
	137, 100, 116, 156, 119, 126, 149, 193, 391, 153,
	103, 176, 158, 342, 345, 340, 341, 380, 381, 415,
	416, 417, 397, 337, 0, 343, 344, 0, 401, 383,
	89, 96, 123, 191, 192, 0, 148, 111, 178, 410,
	400, 0, 371, 412, 348, 363, 420, 364, 365, 393,
	334, 379, 141, 360, 0, 351, 329, 357, 330, 349,
	373, 109, 347, 402, 382, 121, 418, 124, 387, 0,
	159, 133, 0, 0, 375, 404, 377, 398, 370, 394,
	339, 386, 413, 361, 390, 414, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	389, 409, 359, 392, 328, 388, 0, 332, 335, 419,
	407, 354, 355, 0, 0, 0, 0, 0, 0, 0,
	374, 378, 395, 368, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 0, 385, 0, 0, 0, 336, 333,
	0, 372, 0, 0, 0, 338, 0, 353, 396, 0,
	327, 399, 405, 369, 184, 408, 367, 366, 146, 0,
	104, 0, 163, 113, 362, 122, 411, 376, 403, 350,
	358, 105, 356, 152, 142, 175, 384, 143, 151, 125,
	167, 147, 174, 185, 186, 165, 183, 154, 97, 139,
	88, 90, 164, 173, 102, 155, 93, 171, 161, 162,
	131, 117, 118, 157, 91, 92, 0, 150, 108, 112,
	107, 140, 168, 169, 106, 194, 98, 181, 182, 95,
	99, 180, 138, 179, 166, 172, 132, 129, 94, 170,
	130, 128, 120, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 331, 0, 160, 177, 195, 196, 346,
	406, 187, 188, 189, 190, 0, 0, 0, 137, 100,
	116, 156, 119, 126, 149, 193, 391, 153, 103, 176,
	158, 342, 345, 340, 341, 380, 381, 415, 416, 417,
	397, 337, 0, 343, 344, 0, 401, 383, 89, 96,
	123, 191, 192, 0, 148, 111, 178, 410, 400, 0,
	371, 412, 348, 363, 420, 364, 365, 393, 334, 379,
	141, 360, 0, 351, 329, 357, 330, 349, 373, 109,
	347, 402, 382, 121, 418, 124, 387, 0, 159, 133,
	0, 0, 375, 404, 377, 398, 370, 394, 339, 386,
	413, 361, 390, 414, 0, 0, 0, 325, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 389, 409,
	359, 392, 328, 388, 0, 332, 335, 419, 407, 354,
	355, 0, 0, 0, 0, 0, 0, 0, 374, 378,
	395, 368, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 385, 0, 0, 0, 336, 333, 0, 372,
	0, 0, 0, 338, 0, 353, 396, 0, 327, 399,
	405, 369, 184, 408, 367, 366, 146, 0, 104, 0,
	163, 113, 362, 122, 411, 376, 403, 350, 358, 105,
	356, 152, 142, 175, 384, 143, 151, 125, 167, 147,
	174, 185, 186, 165, 183, 154, 97, 139, 88, 90,
	164, 173, 102, 155, 93, 171, 161, 162, 131, 117,
	118, 157, 91, 92, 0, 150, 108, 112, 107, 140,
	168, 169, 106, 194, 98, 181, 182, 95, 323, 180,
	138, 179, 166, 172, 132, 129, 94, 170, 130, 128,
	120, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 331, 0, 160, 177, 195, 196, 346, 406, 187,
	188, 189, 190, 0, 0, 0, 324, 322, 116, 156,
	119, 126, 149, 193, 391, 153, 103, 176, 158, 342,
	345, 340, 341, 380, 381, 415, 416, 417, 397, 337,
	0, 343, 344, 0, 401, 383, 89, 96, 123, 191,
	192, 0, 148, 111, 178, 410, 400, 0, 371, 412,
	348, 363, 420, 364, 365, 393, 334, 379, 141, 360,
	0, 351, 329, 357, 330, 349, 373, 109, 347, 402,
	382, 121, 418, 124, 387, 0, 159, 133, 0, 0,
	375, 404, 377, 398, 370, 394, 339, 386, 413, 361,
	390, 414, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 389, 409, 359, 392,
	328, 388, 0, 332, 335, 419, 407, 354, 355, 0,
	0, 0, 0, 0, 0, 0, 374, 378, 395, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 352, 0,
	385, 0, 0, 0, 336, 333, 0, 372, 0, 0,
	0, 338, 0, 353, 396, 0, 327, 399, 405, 369,
	184, 408, 367, 366, 146, 0, 104, 0, 163, 113,
	362, 122, 411, 376, 403, 350, 358, 105, 356, 152,
	142, 175, 384, 143, 151, 125, 167, 147, 174, 185,
	186, 165, 183, 154, 97, 139, 88, 90, 164, 173,
	102, 155, 93, 171, 161, 162, 131, 117, 118, 157,
	91, 92, 0, 150, 108, 112, 107, 140, 168, 169,
	106, 194, 98, 181, 182, 95, 99, 180, 138, 179,
	166, 172, 132, 129, 94, 170, 130, 128, 120, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 331,
	0, 160, 177, 195, 196, 346, 406, 187, 188, 189,
	190, 0, 0, 0, 137, 100, 116, 156, 119, 126,
	149, 193, 391, 153, 103, 176, 158, 342, 345, 340,
	341, 380, 381, 415, 416, 417, 397, 337, 0, 343,
	344, 0, 401, 383, 89, 96, 123, 191, 192, 0,
	148, 111, 178, 410, 400, 0, 371, 412, 348, 363,
	420, 364, 365, 393, 334, 379, 141, 360, 0, 351,
	329, 357, 330, 349, 373, 109, 347, 402, 382, 121,
	418, 124, 387, 0, 159, 133, 0, 0, 375, 404,
	377, 398, 370, 394, 339, 386, 413, 361, 390, 414,
	0, 0, 0, 325, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 389, 409, 359, 392, 328, 388,
	0, 332, 335, 419, 407, 354, 355, 0, 0, 0,
	0, 0, 0, 0, 374, 378, 395, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 352, 0, 385, 0,
	0, 0, 336, 333, 0, 372, 0, 0, 0, 338,
	0, 353, 396, 0, 327, 399, 405, 369, 184, 408,
	367, 366, 146, 0, 104, 0, 163, 113, 362, 122,
	411, 376, 403, 350, 358, 105, 356, 152, 142, 175,
	384, 143, 151, 125, 167, 147, 174, 185, 186, 165,
	183, 154, 97, 139, 88, 90, 164, 595, 102, 155,
	93, 171, 161, 162, 131, 117, 118, 157, 91, 92,
	0, 150, 108, 112, 107, 140, 168, 169, 106, 194,
	98, 181, 182, 95, 323, 180, 138, 179, 166, 172,
	132, 129, 94, 170, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 331, 0, 160,
	177, 195, 196, 346, 406, 187, 188, 189, 190, 0,
	0, 0, 324, 322, 116, 156, 119, 126, 149, 193,
	391, 153, 103, 176, 158, 342, 345, 340, 341, 380,
	381, 415, 416, 417, 397, 337, 0, 343, 344, 0,
	401, 383, 89, 96, 123, 191, 192, 0, 148, 111,
	178, 410, 400, 0, 371, 412, 348, 363, 420, 364,
	365, 393, 334, 379, 141, 360, 0, 351, 329, 357,
	330, 349, 373, 109, 347, 402, 382, 121, 418, 124,
	387, 0, 159, 133, 0, 0, 375, 404, 377, 398,
	370, 394, 339, 386, 413, 361, 390, 414, 0, 0,
	0, 325, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 389, 409, 359, 392, 328, 388, 0, 332,
	335, 419, 407, 354, 355, 0, 0, 0, 0, 0,
	0, 0, 374, 378, 395, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 0, 385, 0, 0, 0,
	336, 333, 0, 372, 0, 0, 0, 338, 0, 353,
	396, 0, 327, 399, 405, 369, 184, 408, 367, 366,
	146, 0, 104, 0, 163, 113, 362, 122, 411, 376,
	403, 350, 358, 105, 356, 152, 142, 175, 384, 143,
	151, 125, 167, 147, 174, 185, 186, 165, 183, 154,
	97, 139, 88, 90, 164, 314, 102, 155, 93, 171,
	161, 162, 131, 117, 118, 157, 91, 92, 0, 150,
	108, 112, 107, 140, 168, 169, 106, 194, 98, 181,
	182, 95, 323, 180, 138, 179, 166, 172, 132, 129,
	94, 170, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 331, 0, 160, 177, 195,
	196, 346, 406, 187, 188, 189, 190, 0, 0, 0,
	324, 322, 317, 316, 119, 126, 149, 193, 391, 153,
	103, 176, 158, 342, 345, 340, 341, 380, 381, 415,
	416, 417, 397, 337, 0, 343, 344, 0, 401, 383,
	89, 96, 123, 191, 192, 0, 148, 111, 178, 141,
	0, 0, 763, 0, 248, 0, 0, 0, 109, 245,
	0, 0, 121, 287, 124, 0, 0, 159, 133, 0,
	0, 0, 0, 278, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 246, 266, 265, 268,
	269, 270, 271, 0, 0, 101, 267, 272, 273, 274,
	0, 0, 243, 259, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 239, 0, 0,
	0, 298, 0, 258, 0, 0, 254, 255, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 296, 146, 0, 104, 0, 163,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	152, 142, 175, 0, 143, 151, 125, 167, 147, 174,
	185, 186, 165, 183, 154, 97, 139, 88, 90, 164,
	173, 102, 155, 93, 171, 161, 162, 131, 117, 118,
	157, 91, 92, 0, 150, 108, 112, 107, 140, 168,
	169, 106, 194, 98, 181, 182, 95, 99, 180, 138,
	179, 166, 172, 132, 129, 94, 170, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 160, 177, 195, 196, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 137, 100, 116, 156, 119,
	126, 149, 193, 0, 153, 103, 176, 158, 288, 297,
	294, 295, 292, 293, 291, 290, 289, 299, 280, 281,
	282, 283, 285, 0, 284, 89, 96, 123, 191, 192,
	141, 148, 111, 178, 0, 248, 0, 0, 0, 109,
	245, 0, 0, 121, 287, 124, 0, 0, 159, 133,
	0, 0, 0, 0, 278, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 466, 246, 266, 265,
	268, 269, 270, 271, 0, 0, 101, 267, 272, 273,
	274, 0, 0, 243, 259, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 0, 0,
	0, 0, 298, 0, 258, 0, 0, 254, 255, 260,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 0, 0, 296, 146, 0, 104, 0,
	163, 113, 0, 122, 0, 0, 0, 0, 0, 105,
	0, 152, 142, 175, 0, 143, 151, 125, 167, 147,
	174, 185, 186, 165, 183, 154, 97, 139, 88, 90,
	164, 173, 102, 155, 93, 171, 161, 162, 131, 117,
	118, 157, 91, 92, 0, 150, 108, 112, 107, 140,
	168, 169, 106, 194, 98, 181, 182, 95, 99, 180,
	138, 179, 166, 172, 132, 129, 94, 170, 130, 128,
	120, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 0, 0, 160, 177, 195, 196, 0, 0, 187,
	188, 189, 190, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 193, 0, 153, 103, 176, 158, 288,
	297, 294, 295, 292, 293, 291, 290, 289, 299, 280,
	281, 282, 283, 285, 0, 284, 89, 96, 123, 191,
	192, 141, 148, 111, 178, 0, 248, 0, 0, 0,
	109, 245, 0, 0, 121, 287, 124, 0, 0, 159,
	133, 0, 0, 0, 0, 278, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 246, 266,
	265, 268, 269, 270, 271, 0, 0, 101, 267, 272,
	273, 274, 0, 0, 243, 259, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 239,
	0, 0, 0, 298, 0, 258, 0, 0, 254, 255,
	260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 296, 146, 0, 104,
	0, 163, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 152, 142, 175, 0, 143, 151, 125, 167,
	147, 174, 185, 186, 165, 183, 154, 97, 139, 88,
	90, 164, 173, 102, 155, 93, 171, 161, 162, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 168, 169, 106, 194, 98, 181, 182, 95, 99,
	180, 138, 179, 166, 172, 132, 129, 94, 170, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 160, 177, 195, 196, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 137, 100, 116,
	156, 119, 126, 149, 193, 0, 153, 103, 176, 158,
	288, 297, 294, 295, 292, 293, 291, 290, 289, 299,
	280, 281, 282, 283, 285, 0, 284, 89, 96, 123,
	191, 192, 141, 148, 111, 178, 0, 248, 0, 0,
	0, 109, 245, 0, 0, 121, 287, 124, 0, 0,
	159, 133, 0, 0, 0, 0, 278, 279, 0, 0,
	0, 0, 0, 0, 826, 0, 50, 0, 0, 246,
	266, 265, 268, 269, 270, 271, 0, 0, 101, 267,
	272, 273, 274, 0, 0, 243, 259, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	0, 0, 0, 0, 298, 0, 258, 0, 0, 254,
	255, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 0, 0, 296, 146, 0,
	104, 0, 163, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 152, 142, 175, 0, 143, 151, 125,
	167, 147, 174, 185, 186, 165, 183, 154, 97, 139,
	88, 90, 164, 173, 102, 155, 93, 171, 161, 162,
	131, 117, 118, 157, 91, 92, 0, 150, 108, 112,
	107, 140, 168, 169, 106, 194, 98, 181, 182, 95,
	99, 180, 138, 179, 166, 172, 132, 129, 94, 170,
	130, 128, 120, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 0, 0, 160, 177, 195, 196, 0,
	0, 187, 188, 189, 190, 0, 0, 0, 137, 100,
	116, 156, 119, 126, 149, 193, 0, 153, 103, 176,
	158, 288, 297, 294, 295, 292, 293, 291, 290, 289,
	299, 280, 281, 282, 283, 285, 23, 284, 89, 96,
	123, 191, 192, 0, 148, 111, 178, 0, 141, 0,
	0, 0, 0, 248, 0, 0, 0, 109, 245, 0,
	0, 121, 287, 124, 0, 0, 159, 133, 0, 0,
	0, 0, 278, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 246, 266, 265, 268, 269,
	270, 271, 0, 0, 101, 267, 272, 273, 274, 0,
	0, 243, 259, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 0, 0, 0, 0,
	298, 0, 258, 0, 0, 254, 255, 260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 0, 296, 146, 0, 104, 0, 163, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 152,
	142, 175, 0, 143, 151, 125, 167, 147, 174, 185,
	186, 165, 183, 154, 97, 139, 88, 90, 164, 173,
	102, 155, 93, 171, 161, 162, 131, 117, 118, 157,
	91, 92, 0, 150, 108, 112, 107, 140, 168, 169,
	106, 194, 98, 181, 182, 95, 99, 180, 138, 179,
	166, 172, 132, 129, 94, 170, 130, 128, 120, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 0,
	0, 160, 177, 195, 196, 0, 0, 187, 188, 189,
	190, 0, 0, 0, 137, 100, 116, 156, 119, 126,
	149, 193, 0, 153, 103, 176, 158, 288, 297, 294,
	295, 292, 293, 291, 290, 289, 299, 280, 281, 282,
	283, 285, 0, 284, 89, 96, 123, 191, 192, 141,
	148, 111, 178, 0, 248, 0, 0, 0, 109, 245,
	0, 0, 121, 287, 124, 0, 0, 159, 133, 0,
	0, 0, 0, 278, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 246, 266, 265, 268,
	269, 270, 271, 0, 0, 101, 267, 272, 273, 274,
	0, 0, 243, 259, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 0, 0, 0,
	0, 298, 0, 258, 0, 0, 254, 255, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 296, 146, 0, 104, 0, 163,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	152, 142, 175, 0, 143, 151, 125, 167, 147, 174,
	185, 186, 165, 183, 154, 97, 139, 88, 90, 164,
	173, 102, 155, 93, 171, 161, 162, 131, 117, 118,
	157, 91, 92, 0, 150, 108, 112, 107, 140, 168,
	169, 106, 194, 98, 181, 182, 95, 99, 180, 138,
	179, 166, 172, 132, 129, 94, 170, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 160, 177, 195, 196, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 137, 100, 116, 156, 119,
	126, 149, 193, 0, 153, 103, 176, 158, 288, 297,
	294, 295, 292, 293, 291, 290, 289, 299, 280, 281,
	282, 283, 285, 0, 284, 89, 96, 123, 191, 192,
	141, 148, 111, 178, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 121, 287, 124, 0, 0, 159, 133,
	0, 0, 0, 0, 278, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 246, 266, 265,
	268, 269, 270, 271, 0, 0, 101, 267, 272, 273,
	274, 0, 0, 0, 259, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 0, 0,
	0, 0, 298, 0, 258, 0, 0, 254, 255, 260,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 0, 0, 296, 146, 0, 104, 0,
	163, 113, 0, 122, 0, 0, 0, 0, 0, 105,
	0, 152, 142, 175, 1400, 143, 151, 125, 167, 147,
	174, 185, 186, 165, 183, 154, 97, 139, 88, 90,
	164, 173, 102, 155, 93, 171, 161, 162, 131, 117,
	118, 157, 91, 92, 0, 150, 108, 112, 107, 140,
	168, 169, 106, 194, 98, 181, 182, 95, 99, 180,
	138, 179, 166, 172, 132, 129, 94, 170, 130, 128,
	120, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 0, 0, 160, 177, 195, 196, 0, 0, 187,
	188, 189, 190, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 193, 0, 153, 103, 176, 158, 288,
	297, 294, 295, 292, 293, 291, 290, 289, 299, 280,
	281, 282, 283, 285, 0, 284, 89, 96, 123, 191,
	192, 141, 148, 111, 178, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 121, 287, 124, 0, 0, 159,
	133, 0, 0, 0, 0, 278, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 246, 266,
	265, 268, 269, 270, 271, 0, 0, 101, 267, 272,
	273, 274, 0, 0, 0, 259, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 0,
	0, 0, 0, 298, 0, 258, 0, 0, 254, 255,
	260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 296, 146, 0, 104,
	0, 163, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 152, 142, 175, 0, 143, 151, 125, 167,
	147, 174, 185, 186, 165, 183, 154, 97, 139, 88,
	90, 164, 173, 102, 155, 93, 171, 161, 162, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 168, 169, 106, 194, 98, 181, 182, 95, 99,
	180, 138, 179, 166, 172, 132, 129, 94, 170, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 160, 177, 195, 196, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 137, 100, 116,
	156, 119, 126, 149, 193, 0, 153, 103, 176, 158,
	288, 297, 294, 295, 292, 293, 291, 290, 289, 299,
	280, 281, 282, 283, 285, 0, 284, 89, 96, 123,
	191, 192, 141, 148, 111, 178, 488, 0, 0, 0,
	0, 109, 0, 0, 0, 121, 0, 124, 0, 0,
	159, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 490, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 485, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 0, 0, 0, 146, 0,
	104, 0, 163, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 152, 142, 175, 0, 143, 151, 125,
	167, 147, 174, 185, 186, 165, 183, 154, 97, 139,
	88, 90, 164, 173, 102, 155, 93, 171, 161, 162,
	131, 117, 118, 157, 91, 92, 0, 150, 108, 112,
	107, 140, 168, 169, 106, 194, 98, 181, 182, 95,
	99, 180, 138, 179, 166, 172, 132, 129, 94, 170,
	130, 128, 120, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 0, 0, 160, 177, 195, 196, 0,
	0, 187, 188, 189, 190, 0, 0, 0, 137, 100,
	116, 156, 119, 126, 149, 193, 0, 153, 103, 176,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 96,
	123, 191, 192, 141, 148, 111, 178, 584, 0, 0,
	0, 0, 109, 0, 0, 0, 121, 0, 124, 0,
	0, 159, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 586, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 0, 146,
	0, 104, 0, 163, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 152, 142, 175, 0, 143, 151,
	125, 167, 147, 174, 185, 186, 165, 183, 154, 97,
	139, 88, 90, 164, 173, 102, 155, 93, 171, 161,
	162, 131, 117, 118, 157, 91, 92, 0, 150, 108,
	112, 107, 140, 168, 169, 106, 194, 98, 181, 182,
	95, 99, 180, 138, 179, 166, 172, 132, 129, 94,
	170, 130, 128, 120, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 0, 160, 177, 195, 196,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 137,
	100, 116, 156, 119, 126, 149, 193, 0, 153, 103,
	176, 158, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 89,
	96, 123, 191, 192, 109, 148, 111, 178, 121, 0,
	124, 0, 0, 159, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 325, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 146, 0, 104, 0, 163, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 152, 142, 175, 0,
	143, 151, 125, 167, 147, 174, 185, 186, 165, 183,
	154, 97, 139, 88, 90, 164, 173, 102, 155, 93,
	171, 161, 162, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 168, 169, 106, 194, 98,
	181, 182, 95, 99, 180, 138, 179, 166, 172, 132,
	129, 94, 170, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 160, 177,
	195, 196, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 137, 100, 116, 156, 119, 126, 149, 193, 0,
	153, 103, 176, 158, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 89, 96, 123, 191, 192, 109, 148, 111, 178,
	121, 0, 124, 0, 0, 159, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 0, 146, 0, 104, 0, 163, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 152, 142,
	175, 0, 143, 151, 125, 167, 147, 174, 185, 186,
	165, 183, 154, 97, 139, 88, 90, 164, 173, 102,
	155, 93, 171, 161, 162, 131, 117, 118, 157, 91,
	92, 0, 150, 108, 112, 107, 140, 168, 169, 106,
	194, 98, 181, 182, 95, 99, 180, 138, 179, 166,
	172, 132, 129, 94, 170, 130, 128, 120, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	160, 177, 195, 196, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 137, 100, 116, 156, 119, 126, 149,
	193, 141, 153, 103, 176, 158, 0, 0, 0, 0,
	109, 0, 0, 0, 121, 0, 124, 0, 0, 159,
	133, 0, 0, 89, 96, 123, 191, 192, 0, 148,
	111, 178, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 714, 0, 0, 715, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 0, 146, 0, 104,
	0, 163, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 152, 142, 175, 0, 143, 151, 125, 167,
	147, 174, 185, 186, 165, 183, 154, 97, 139, 88,
	90, 164, 173, 102, 155, 93, 171, 161, 162, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 168, 169, 106, 194, 98, 181, 182, 95, 99,
	180, 138, 179, 166, 172, 132, 129, 94, 170, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 160, 177, 195, 196, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 137, 100, 116,
	156, 119, 126, 149, 193, 141, 153, 103, 176, 158,
	0, 0, 0, 0, 109, 604, 0, 0, 121, 0,
	124, 0, 0, 159, 133, 0, 0, 89, 96, 123,
	191, 192, 0, 148, 111, 178, 0, 0, 0, 0,
	0, 0, 325, 0, 603, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 146, 0, 104, 0, 163, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 152, 142, 175, 0,
	143, 151, 125, 167, 147, 174, 185, 186, 165, 183,
	154, 97, 139, 88, 90, 164, 173, 102, 155, 93,
	171, 161, 162, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 168, 169, 106, 194, 98,
	181, 182, 95, 99, 180, 138, 179, 166, 172, 132,
	129, 94, 170, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 160, 177,
	195, 196, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 137, 100, 116, 156, 119, 126, 149, 193, 0,
	153, 103, 176, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 96, 123, 191, 192, 141, 148, 111, 178,
	584, 0, 0, 0, 0, 109, 0, 0, 0, 121,
	0, 124, 0, 0, 159, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 586, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	0, 0, 146, 0, 104, 0, 163, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 152, 142, 175,
	0, 582, 151, 125, 167, 147, 174, 185, 186, 165,
	183, 154, 97, 139, 88, 90, 164, 173, 102, 155,
	93, 171, 161, 162, 131, 117, 118, 157, 91, 92,
	0, 150, 108, 112, 107, 140, 168, 169, 106, 194,
	98, 181, 182, 95, 99, 180, 138, 179, 166, 172,
	132, 129, 94, 170, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 0, 160,
	177, 195, 196, 0, 0, 187, 188, 189, 190, 0,
	0, 0, 137, 100, 116, 156, 119, 126, 149, 193,
	141, 153, 103, 176, 158, 0, 0, 0, 0, 109,
	0, 0, 0, 121, 0, 124, 0, 0, 159, 133,
	0, 0, 89, 96, 123, 191, 192, 0, 148, 111,
	178, 0, 0, 0, 50, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 0, 0, 0, 146, 0, 104, 0,
	163, 113, 0, 122, 0, 0, 0, 0, 0, 105,
	0, 152, 142, 175, 0, 143, 151, 125, 167, 147,
	174, 185, 186, 165, 183, 154, 97, 139, 88, 90,
	164, 173, 102, 155, 93, 171, 161, 162, 131, 117,
	118, 157, 91, 92, 0, 150, 108, 112, 107, 140,
	168, 169, 106, 194, 98, 181, 182, 95, 99, 180,
	138, 179, 166, 172, 132, 129, 94, 170, 130, 128,
	120, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 0, 0, 160, 177, 195, 196, 0, 0, 187,
	188, 189, 190, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 193, 141, 153, 103, 176, 158, 0,
	0, 0, 0, 109, 0, 0, 0, 121, 0, 124,
	0, 0, 159, 133, 0, 0, 89, 96, 123, 191,
	192, 0, 148, 111, 178, 0, 0, 0, 0, 0,
	0, 86, 0, 586, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 0,
	146, 0, 104, 0, 163, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 152, 142, 175, 0, 143,
	151, 125, 167, 147, 174, 185, 186, 165, 183, 154,
	97, 139, 88, 90, 164, 173, 102, 155, 93, 171,
	161, 162, 131, 117, 118, 157, 91, 92, 0, 150,
	108, 112, 107, 140, 168, 169, 106, 194, 98, 181,
	182, 95, 99, 180, 138, 179, 166, 172, 132, 129,
	94, 170, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 0, 0, 160, 177, 195,
	196, 0, 0, 187, 188, 189, 190, 0, 0, 0,
	137, 100, 116, 156, 119, 126, 149, 193, 141, 153,
	103, 176, 158, 0, 0, 0, 0, 109, 0, 0,
	0, 121, 0, 124, 0, 0, 159, 133, 0, 0,
	89, 96, 123, 191, 192, 0, 148, 111, 178, 0,
	0, 0, 0, 0, 0, 325, 0, 490, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 0, 0, 146, 0, 104, 0, 163, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 152,
	142, 175, 0, 143, 151, 125, 167, 147, 174, 185,
	186, 165, 183, 154, 97, 139, 88, 90, 164, 173,
	102, 155, 93, 171, 161, 162, 131, 117, 118, 157,
	91, 92, 0, 150, 108, 112, 107, 140, 168, 169,
	106, 194, 98, 181, 182, 95, 99, 180, 138, 179,
	166, 172, 132, 129, 94, 170, 130, 128, 120, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 0,
	0, 160, 177, 195, 196, 0, 0, 187, 188, 189,
	190, 0, 0, 0, 137, 100, 116, 156, 119, 126,
	149, 193, 141, 153, 103, 176, 158, 0, 0, 0,
	0, 109, 0, 0, 0, 121, 0, 124, 0, 0,
	159, 133, 0, 0, 89, 96, 123, 191, 192, 0,
	148, 111, 178, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 0, 0, 0, 146, 0,
	104, 0, 163, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 152, 142, 175, 0, 143, 151, 125,
	167, 147, 174, 185, 186, 165, 183, 154, 97, 139,
	88, 90, 164, 173, 102, 155, 93, 171, 161, 162,
	131, 117, 118, 157, 91, 92, 0, 150, 108, 112,
	107, 140, 168, 169, 106, 194, 98, 181, 182, 95,
	99, 180, 138, 179, 166, 172, 132, 129, 94, 170,
	130, 128, 120, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 0, 0, 160, 177, 195, 196, 0,
	0, 187, 188, 189, 190, 0, 0, 0, 137, 100,
	116, 156, 119, 126, 149, 193, 674, 153, 103, 176,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 96,
	123, 191, 192, 141, 148, 111, 178, 0, 0, 0,
	0, 562, 109, 0, 0, 0, 121, 0, 124, 0,
	0, 159, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 0, 146,
	0, 104, 0, 163, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 152, 142, 175, 0, 143, 151,
	125, 167, 147, 174, 185, 186, 165, 183, 154, 97,
	139, 88, 90, 164, 173, 102, 155, 93, 171, 161,
	162, 131, 117, 118, 157, 91, 92, 0, 150, 108,
	112, 107, 140, 168, 169, 106, 194, 98, 181, 182,
	95, 99, 180, 138, 179, 166, 172, 132, 129, 94,
	170, 130, 128, 120, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 0, 160, 177, 195, 196,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 137,
	100, 116, 156, 119, 126, 149, 193, 0, 153, 103,
	176, 158, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 89,
	96, 123, 191, 192, 109, 148, 111, 178, 121, 0,
	124, 0, 0, 159, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 146, 0, 104, 0, 163, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 152, 142, 175, 0,
	143, 151, 125, 167, 147, 174, 185, 186, 165, 183,
	154, 97, 139, 88, 90, 164, 173, 102, 155, 93,
	171, 161, 162, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 168, 169, 106, 194, 98,
	181, 182, 95, 99, 180, 138, 179, 166, 172, 132,
	129, 94, 170, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 160, 177,
	195, 196, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 137, 100, 116, 156, 119, 126, 149, 193, 141,
	153, 103, 176, 158, 0, 0, 0, 0, 109, 0,
	0, 0, 121, 0, 124, 0, 0, 159, 133, 0,
	0, 89, 96, 123, 191, 192, 0, 148, 111, 178,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	0, 184, 0, 0, 0, 146, 0, 104, 0, 163,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	152, 142, 175, 0, 143, 151, 125, 167, 147, 174,
	185, 186, 165, 183, 154, 97, 139, 88, 90, 164,
	173, 102, 155, 93, 171, 161, 162, 131, 117, 118,
	157, 91, 92, 0, 150, 108, 112, 107, 140, 168,
	169, 106, 194, 98, 181, 182, 95, 99, 180, 138,
	179, 166, 172, 132, 129, 94, 170, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 160, 177, 195, 196, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 137, 100, 116, 156, 119,
	126, 149, 193, 141, 153, 103, 176, 158, 0, 0,
	0, 0, 109, 0, 0, 0, 121, 0, 124, 0,
	0, 159, 133, 0, 0, 89, 96, 123, 191, 192,
	0, 148, 111, 178, 0, 0, 0, 0, 0, 0,
	325, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 0, 146,
	0, 104, 0, 163, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 152, 142, 175, 0, 143, 151,
	125, 167, 147, 174, 185, 186, 165, 183, 154, 97,
	139, 88, 90, 164, 173, 102, 155, 93, 171, 161,
	162, 131, 117, 118, 157, 91, 92, 0, 150, 108,
	112, 107, 140, 168, 169, 106, 194, 98, 181, 182,
	95, 99, 180, 138, 179, 166, 172, 132, 129, 94,
	170, 130, 128, 120, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 0, 160, 177, 195, 196,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 137,
	100, 116, 156, 119, 126, 149, 193, 141, 153, 103,
	176, 158, 0, 0, 0, 0, 109, 0, 0, 0,
	121, 0, 124, 0, 0, 159, 133, 0, 0, 89,
	96, 123, 191, 192, 0, 148, 111, 178, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 0, 146, 0, 104, 0, 163, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 152, 142,
	175, 0, 143, 151, 125, 167, 147, 174, 185, 186,
	165, 183, 154, 97, 139, 88, 90, 164, 173, 102,
	155, 93, 171, 161, 162, 131, 117, 118, 157, 91,
	92, 0, 150, 108, 112, 107, 140, 168, 169, 106,
	194, 98, 181, 182, 95, 99, 180, 138, 179, 166,
	172, 132, 129, 94, 170, 130, 128, 120, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	160, 177, 195, 196, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 137, 100, 116, 156, 119, 126, 149,
	193, 141, 153, 103, 176, 158, 0, 0, 0, 0,
	109, 0, 0, 0, 121, 0, 124, 0, 0, 159,
	133, 0, 0, 89, 96, 123, 191, 192, 0, 148,
	111, 178, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 0, 146, 0, 104,
	0, 163, 113, 0, 122, 635, 0, 0, 0, 0,
	105, 0, 152, 142, 175, 0, 143, 151, 125, 167,
	147, 174, 185, 186, 165, 183, 154, 97, 139, 88,
	90, 164, 173, 102, 155, 93, 171, 161, 162, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 168, 169, 106, 194, 98, 181, 182, 95, 99,
	180, 138, 179, 166, 172, 132, 129, 94, 170, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 622, 0, 0, 160, 177, 195, 196, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 137, 100, 116,
	156, 119, 126, 149, 193, 0, 153, 103, 176, 158,
	0, 0, 0, 636, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 96, 123,
	191, 192, 0, 148, 111, 178, 0, 0, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 0, 659,
	660, 661, 662, 663, 637, 638, 639, 640, 619, 621,
	0, 617, 620, 623, 0, 633, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 634, 641, 642, 643, 644,
	645, 646, 647, 648, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 618,
}
var yyPact = [...]int{

	2001, -1000, -182, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 869, 908, -1000, -1000, -1000, -1000, -1000, -1000, 765,
	47, 122, 138, 33, 10331, 135, 179, 10759, -1000, 24,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 693, -1000, -1000,
	-1000, -1000, -1000, 863, 867, 737, 858, 816, -1000, 5963,
	117, 9002, 10117, 5236, -1000, 586, 130, 10759, -131, 10545,
	112, 112, 112, -1000, 132, 10759, -1000, 10759, 109, 581,
	109, 109, 109, 10759, -1000, 187, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10759, 572, 838,
	69, 3430, 3430, 3430, 3430, 39, 3430, -66, 779, -1000,
	-1000, -1000, -1000, 3430, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 458, 843, 6691, 6691, 869, -1000,
	693, -1000, -1000, -1000, 836, -1000, -1000, 323, 896, -1000,
	7414, 181, -1000, 6691, 2229, 709, -1000, -1000, 709, -1000,
	-1000, 155, -1000, -1000, 7173, 7173, 7173, 7173, 7173, 7173,
	7173, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 709, -1000, 6450, 709, 709,
	709, 709, 709, 709, 709, 709, 6691, 709, 709, 709,
	709, 709, 709, 709, 709, 709, 709, 709, 709, 709,
	9885, 665, 685, -1000, -1000, -1000, 855, 8119, 8788, 10759,
	623, -1000, 667, 4978, -97, -1000, -1000, -1000, 285, 8547,
	-1000, -1000, -1000, 837, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 604, -1000, 11076, 10545, 3430, 123, 660, 537, 292,
	517, 10759, 9644, 3430, 124, 10759, 853, 778, 10759, 509,
	507, -1000, 4720, -1000, 3430, 3430, 3430, 3430, 3430, 3430,
	3430, 3430, -1000, -1000, -1000, -1000, -1000, -1000, 3430, 3430,
	-1000, -68, -1000, 10759, -1000, -1000, -1000, -1000, 903, 236,
	450, 173, 689, -1000, 368, 863, 458, 816, 8333, 796,
	-1000, -1000, 10759, -1000, 6691, 6691, 390, -1000, 9430, -1000,
	-1000, 3688, 250, 7173, 444, 287, 7173, 7173, 7173, 7173,
	7173, 7173, 7173, 7173, 7173, 7173, 7173, 7173, 7173, 7173,
	7173, 398, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	486, -1000, 693, 626, 626, 220, 220, 220, 220, 220,
	220, 2352, 5481, 458, 596, 258, 6450, 5963, 5963, 6691,
	6691, 10973, 10973, 5963, 854, 303, 258, 10973, -1000, 458,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5963, 5963, 5963,
	5963, 58, 10759, -1000, 10973, 9002, 9002, 9002, 9002, 9002,
	-1000, 806, 802, -1000, 795, 794, 801, 10759, -1000, 594,
	8119, 189, 709, -1000, 9216, -1000, -1000, 58, 642, 9002,
	10759, -1000, -1000, 4462, 667, -97, 653, -1000, -107, -102,
	6204, 202, -1000, -1000, -1000, -1000, 2914, 154, 142, -1000,
	-50, -1000, -1000, -1000, -1000, 732, -1000, -1000, -1000, 732,
	133, 732, 732, 732, -23, -23, -23, -23, -1000, -1000,
	-1000, -1000, -1000, -1000, 764, 761, -1000, 732, 732, 732,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 760,
	760, 760, 733, 733, 758, -1000, 10759, -152, 484, 3430,
	849, 3430, -1000, 68, 10759, -1000, 10759, -1000, -1000, 10759,
	3430, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 265, -1000, -1000, -1000,
	-1000, 820, 6691, 6691, 4204, 6691, -1000, -1000, -1000, 843,
	-1000, 854, 887, -1000, 829, 828, 5963, -1000, -1000, 250,
	291, -1000, -1000, 418, -1000, -1000, -1000, -1000, 164, 709,
	-1000, 1682, -1000, -1000, -1000, -1000, 444, 7173, 7173, 7173,
	852, 1682, 2301, 320, 658, 220, 284, 284, 212, 212,
	212, 212, 212, 376, 376, -1000, -1000, -1000, 458, -1000,
	-1000, -1000, 458, 5963, 655, -1000, -1000, 6691, -1000, 458,
	571, 571, 447, 456, 677, -1000, 162, 668, 571, 5963,
	352, -1000, 6691, 458, -1000, 571, 458, 571, 571, 610,
	709, -1000, 666, -1000, 278, 685, 741, 777, 728, -1000,
	-1000, -1000, -1000, 798, -1000, 770, -1000, -1000, -1000, -1000,
	-1000, 129, 128, 127, 10545, -1000, 891, 9002, 659, -1000,
	-1000, 653, -97, -76, -1000, -1000, -1000, 258, -1000, 475,
	650, 2656, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 735,
	776, 91, 100, 185, 172, 472, 10545, -1000, -1000, -1000,
	329, 62, 902, -1000, 90, -1000, 89, 452, -52, -1000,
	-1000, 409, -23, -23, 732, -23, -1000, -1000, 202, 835,
	202, 202, 202, 442, 442, -156, -156, -1000, -1000, 377,
	-1000, -1000, -1000, 373, -1000, 10759, 10545, 3430, -1000, 3946,
	-1000, -1000, -1000, -1000, -1000, -1000, 279, 213, 214, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	57, 144, -1000, 3430, -1000, 336, 10759, 10759, 815, 258,
	258, 159, -1000, -1000, 10759, -1000, -1000, -1000, -1000, 662,
	-1000, -1000, -1000, 3172, 5963, -1000, 852, 1682, 2119, -1000,
	7173, 7173, -1000, -1000, 571, 5963, 258, -1000, -1000, -1000,
	81, 398, 81, 7173, 7173, 4204, 7173, 7173, -142, 651,
	288, -1000, 6691, 438, -1000, -1000, -1000, -1000, -1000, 775,
	10973, 709, -1000, 7887, 10545, 869, 10973, 6691, 6691, -1000,
	-1000, 6691, 734, -1000, 6691, -1000, -1000, -1000, 709, 709,
	709, 547, -1000, 869, 659, -1000, -1000, -1000, -112, -109,
	-1000, -1000, 2914, -1000, 2914, 10545, 895, -1000, 468, 466,
	-1000, 460, -1000, -1000, 95, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -120, -1000, -1000, -1000, -1000, -1000, 591,
	202, 202, -23, 202, -1000, 207, -1000, -1000, -1000, 569,
	-1000, 566, -1000, -10, -12, -1000, 649, 556, 672, 773,
	-1000, 648, -1000, 276, -1000, 96, -1000, 10545, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10545, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10759, -1000,
	-1000, -1000, -1000, -1000, 10545, 104, -1000, -1000, 431, 6691,
	-1000, -1000, -1000, 3946, -1000, 891, 9002, -1000, -1000, 458,
	-1000, 7173, 1682, 1682, -1000, -1000, 458, 732, 732, -1000,
	732, 733, -1000, 732, 10, 732, 3, 458, 458, 1734,
	1898, -1000, 1665, 1868, 709, -139, -1000, 258, 6691, -1000,
	842, 615, 645, -1000, -1000, 5722, 458, 550, 150, 547,
	863, -1000, 258, 258, 258, 10545, 258, 10545, 10545, 10545,
	7655, 10545, 863, -1000, -1000, -1000, -1000, 2656, -1000, 542,
	-1000, 732, 168, 168, -1000, -1000, -1000, 88, -1000, -1000,
	-1000, -1000, 202, -1000, -1000, -1000, -23, 430, -23, -55,
	-56, 372, -1000, 344, 10545, 10545, 10759, 3946, 2914, 10545,
	-1000, -1000, -1000, 731, -1000, -1000, -1000, -1000, 839, 10545,
	-1000, -1000, 258, 881, 647, -1000, 1682, -1000, -1000, 114,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7173,
	7173, -1000, 7173, 7173, 7173, 458, 424, 258, 87, -1000,
	709, -1000, -1000, 657, 10545, 10545, -1000, -1000, 535, -1000,
	533, 533, 533, 189, -1000, -1000, 46, 10545, -1000, 771,
	-1000, -1000, 325, 32, 769, 10545, -1000, 202, -1000, 202,
	-1000, -1000, 543, 523, 530, 729, 724, -1000, -1000, 721,
	10545, 709, 107, 871, 865, -1000, -1000, 1492, 1492, 1492,
	1492, 45, -1000, -1000, 901, -1000, 709, -1000, 693, 143,
	-1000, 10545, -1000, -1000, -1000, -1000, -1000, 46, -1000, 446,
	270, 353, -160, -1000, 900, -1000, -1000, 898, 714, -1000,
	-1000, -1000, -1000, 891, 10545, 10545, 10545, 526, 56, 60,
	-1000, 6691, 6691, -1000, -1000, -1000, -1000, 458, 64, -168,
	10973, 645, 458, 10545, -1000, -1000, -1000, 343, -1000, -1000,
	10545, 168, 168, 10545, -1000, 522, 496, 494, 660, 492,
	-1000, 10545, 713, 258, 643, -1000, 813, -147, -171, 616,
	-1000, -1000, -1000, -1000, -1000, -1000, 490, -1000, 891, -1000,
	-1000, -152, -1000, 56, 827, 10545, -1000, 811, -1000, 99,
	10545, -1000, -1000, -1000, 50, 481, -153, 10759, -1000, 48,
	-1000, -169, 712, 709, -179, 10545, 6932, -1000, 457, 1492,
	458, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1096, 24, 518, 1095, 1093, 1092, 1091, 1090, 1089,
	1088, 1087, 1086, 1084, 1083, 1082, 1081, 1080, 1078, 1077,
	1076, 1075, 1074, 1073, 147, 1072, 1071, 1070, 73, 1069,
	95, 1068, 1065, 42, 94, 47, 43, 927, 1064, 27,
	71, 61, 1063, 50, 1062, 1061, 80, 1060, 67, 1059,
	1057, 30, 1056, 1055, 16, 5, 1053, 1050, 1049, 1048,
	74, 296, 1047, 1046, 1045, 1044, 1043, 1042, 51, 8,
	10, 9, 14, 1040, 45, 17, 1038, 52, 1037, 1033,
	1031, 1030, 23, 1029, 54, 1028, 21, 53, 1023, 11,
	58, 40, 31, 7, 75, 60, 1022, 37, 59, 48,
	1021, 1020, 444, 1019, 1018, 1016, 1013, 1012, 1004, 359,
	465, 1002, 1001, 997, 39, 0, 288, 36, 69, 996,
	44, 991, 1307, 79, 66, 22, 987, 41, 1255, 34,
	984, 980, 32, 977, 976, 973, 972, 971, 968, 967,
	966, 387, 33, 20, 964, 963, 46, 55, 26, 49,
	56, 962, 961, 28, 959, 15, 12, 1, 57, 957,
	954, 940, 939, 29, 19, 938, 13, 936, 4, 935,
	933, 3, 932, 18, 931, 6, 930, 2, 929, 928,
	922, 1363, 965, 921, 920, 919, 915, 77,
}
var yyR1 = [...]int{

	0, 179, 180, 180, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 183,
	183, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 120,
	120, 177, 177, 176, 175, 175, 174, 174, 173, 16,
	160, 161, 161, 161, 161, 150, 133, 133, 133, 133,
	133, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 137, 137, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 136,
	136, 136, 136, 136, 138, 138, 138, 138, 138, 134,
	134, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 140,
	140, 140, 140, 140, 140, 140, 140, 149, 149, 141,
	141, 147, 147, 148, 148, 148, 146, 146, 146, 144,
	144, 145, 145, 142, 142, 142, 143, 143, 152, 152,
	169, 169, 168, 168, 168, 168, 159, 159, 165, 165,
	165, 165, 165, 165, 165, 158, 158, 167, 167, 166,
	153, 153, 153, 153, 153, 154, 155, 155, 155, 155,
	156, 156, 157, 157, 162, 162, 162, 163, 163, 163,
	164, 164, 164, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 184, 184, 185, 185,
	185, 185, 185, 185, 185, 172, 170, 170, 171, 171,
	13, 14, 14, 14, 14, 14, 15, 15, 17, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 107, 107, 104, 104, 105, 105, 106, 106,
	106, 108, 108, 108, 131, 131, 131, 19, 19, 21,
	21, 22, 23, 20, 20, 20, 20, 20, 186, 24,
	25, 25, 26, 26, 26, 30, 30, 30, 28, 28,
	29, 29, 35, 35, 34, 34, 36, 36, 36, 36,
	119, 119, 119, 118, 118, 38, 38, 39, 39, 40,
	40, 41, 41, 41, 53, 53, 89, 89, 91, 91,
	42, 42, 42, 42, 43, 43, 44, 44, 45, 45,
	126, 126, 125, 125, 125, 124, 124, 47, 47, 47,
	49, 48, 48, 48, 48, 50, 50, 52, 52, 51,
	51, 54, 54, 54, 54, 55, 55, 37, 37, 37,
	37, 37, 37, 37, 103, 103, 57, 57, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 67, 67,
	67, 67, 67, 67, 58, 58, 58, 58, 58, 58,
	58, 33, 33, 68, 68, 68, 74, 69, 69, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	65, 65, 65, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 64, 64,
	64, 64, 64, 64, 64, 64, 187, 187, 66, 66,
	66, 66, 31, 31, 31, 31, 31, 129, 129, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 78, 78, 32, 32, 76, 76, 77, 79,
	79, 75, 75, 75, 60, 60, 60, 60, 60, 60,
	60, 60, 62, 62, 62, 80, 80, 81, 81, 82,
	82, 83, 83, 84, 85, 85, 85, 86, 86, 86,
	86, 87, 87, 87, 59, 59, 59, 59, 59, 59,
	88, 88, 88, 88, 92, 92, 70, 70, 72, 72,
	71, 73, 93, 93, 97, 94, 94, 98, 98, 98,
	96, 96, 96, 121, 121, 121, 101, 101, 109, 109,
	110, 110, 102, 102, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 112, 112, 112, 113, 113, 116,
	116, 117, 117, 122, 122, 123, 123, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	181, 182, 127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 4, 6, 5, 5, 5, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 3, 2, 3, 1, 1, 1,
	1, 1, 2, 3, 3, 3, 3, 3, 3, 3,
	4, 2, 3, 2, 3, 2, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 3, 3, 2, 1, 1,
	1, 4, 4, 4, 5, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 3, 3, 0,
	1, 0, 1, 0, 3, 3, 0, 2, 5, 4,
	1, 2, 2, 3, 2, 3, 0, 1, 2, 3,
	3, 2, 3, 2, 2, 1, 1, 1, 3, 2,
	1, 4, 4, 7, 7, 13, 1, 1, 2, 2,
	0, 1, 1, 3, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 11, 13, 7, 7, 7, 12,
	7, 7, 7, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 6, 4, 2, 4, 2, 2, 2,
	2, 3, 1, 1, 0, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 7, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	4, 5, 6, 4, 4, 6, 6, 6, 6, 8,
	8, 6, 8, 8, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -179, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 141, 115, 134, 48, 157, 158,
	160, 161, 25, 135, 136, 139, 140, -181, 8, 246,
	52, -180, 263, -82, 15, -26, 5, -24, -186, -24,
	-24, -24, -24, -24, -160, 52, -120, 120, 69, 149,
	238, 117, 118, 132, -102, 120, 122, 118, 118, 119,
	120, 238, 117, 118, -51, -122, 55, -115, 156, 254,
	157, 170, 171, 162, 194, 185, 255, 154, 182, 186,
	225, 64, 160, 234, 126, 137, 180, 176, 174, 27,
	199, 261, 175, 129, 200, 204, 226, 167, 168, 228,
	198, 31, 131, 256, 33, 145, 229, 202, 197, 193,
	196, 166, 192, 37, 206, 205, 207, 224, 188, 155,
	177, 18, 140, 143, 201, 203, 124, 147, 260, 230,
	173, 144, 139, 233, 153, 161, 227, 169, 236, 36,
	211, 164, 165, 128, 158, 151, 190, 146, 178, 179,
	195, 163, 191, 159, 148, 141, 235, 212, 262, 189,
	187, 183, 184, 152, 120, 149, 150, 217, 218, 219,
	220, 257, 258, 231, 181, 213, 214, 118, 105, 186,
	111, 215, 119, 31, 147, -131, 118, -104, 150, 217,
	218, 219, 220, 55, 227, 226, 221, -122, 159, -127,
	-127, -127, -127, -127, -2, -86, 17, 16, -5, -3,
	-181, 6, 20, 21, -30, 38, 39, -25, -36, 96,
	-37, -122, -56, 71, -61, 28, 55, -115, 23, -60,
	-57, -75, -73, -74, 105, 106, 94, 95, 102, 72,
	107, -65, -63, -64, -66, 57, 56, 65, 58, 59,
	60, 61, 66, 67, 68, -116, -71, -181, 42, 43,
	247, 248, 249, 250, 253, 251, 74, 32, 237, 245,
	244, 243, 241, 242, 239, 240, 123, 238, 100, 246,
	-102, -39, -40, -41, -42, -53, -74, -181, -51, 11,
	-46, -51, -94, -130, 159, -98, 227, 226, -117, -96,
	-116, -114, 225, 186, 224, 55, -115, 116, 70, 22,
	24, 209, 73, 105, 16, 74, 104, 247, 111, 46,
	239, 240, 237, 249, 250, 238, 215, 28, 10, 25,
	135, 21, 98, 113, 77, 78, 138, 23, 136, 68,
	19, 49, 130, 11, 13, 14, 123, 122, 89, 119,
	44, 8, 107, 26, 86, 40, 133, 42, 87, 17,
	241, 242, 30, 253, 142, 100, 47, 34, 71, 66,
	50, 232, 69, 15, 45, 88, 114, 246, 43, 117,
	6, 252, 29, 134, 41, 118, 216, 76, 121, 67,
	5, 132, 9, 48, 51, 243, 244, 245, 32, 75,
	12, -161, -150, 55, 119, -51, 246, -116, -110, 123,
	-110, -110, 118, -51, -51, -109, 123, 55, -109, -109,
	-109, -51, 108, -51, 55, 29, 238, 55, 147, 118,
	148, 120, -128, -181, -117, -128, -128, -128, 151, 152,
	-128, -105, 222, 50, -128, -182, 54, -87, 19, 30,
	-37, -122, -83, -84, -37, -82, -2, -24, 34, -28,
	21, 63, 11, -119, 70, 69, 86, -118, 22, -116,
	57, 108, -37, -58, 89, 71, 87, 88, 73, 91,
	90, 101, 94, 95, 96, 97, 98, 99, 100, 92,
	93, 104, 79, 80, 81, 82, 83, 84, 85, -103,
	-181, -74, -181, 109, 110, -61, -61, -61, -61, -61,
	-61, -61, -181, -2, -69, -37, -181, -181, -181, -181,
	-181, -181, -181, -181, -181, -78, -37, -181, -187, -181,
	-187, -187, -187, -187, -187, -187, -187, -181, -181, -181,
	-181, -52, 26, -51, 29, 53, -47, -49, -48, -50,
	40, 44, 46, 41, 42, 43, 47, -126, 22, -39,
	-181, -125, 143, -124, 22, -122, 57, -51, -46, -183,
	53, 11, 51, 53, -94, 159, -95, -99, 228, 230,
	79, -121, -116, 57, 28, 29, 54, 53, -151, -133,
	-137, -134, -139, -138, -140, -135, -136, 185, 255, 182,
	186, 183, 105, 187, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 189, 199, 29, 137, 178, 179, 180,
	181, 200, 201, 202, 203, 204, 205, 206, 207, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 173,
	174, 175, 176, 177, -116, -128, 120, -177, 51, 55,
	71, 55, -51, -51, 232, -128, 121, -51, 23, 50,
	-51, 55, 55, -123, -122, -114, -128, -128, -128, -128,
	-128, -128, -128, -128, -128, -128, -107, 216, 223, -51,
	9, 89, 53, 18, 108, 53, -85, 24, 25, -86,
	-182, -30, -62, -116, 58, 61, -29, 41, -51, -37,
	-37, -67, 66, 71, 67, 68, -118, 96, -123, -117,
	-114, -61, -68, -71, -74, 62, 89, 87, 88, 73,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -129, 55, 57, 55, -60,
	-60, -116, -35, 21, -34, -36, -182, 53, -182, -2,
	-34, -34, -37, -37, -75, -116, -122, -75, -34, -28,
	-76, -77, 75, -75, -182, -34, -35, -34, -34, -90,
	143, -51, -93, -97, -75, -40, -41, -41, -40, -41,
	40, 40, 40, 45, 40, 45, 40, -48, -122, -182,
	-54, 48, 122, 49, -181, -124, -90, 51, -39, -51,
	-98, -95, 53, 229, 231, 232, 50, -37, -143, 104,
	-162, -163, -164, -117, 57, 58, -150, -152, -153, -165,
	-154, 124, 128, 129, 132, -158, 126, 119, 133, 66,
	71, 28, 50, 209, 124, 133, 132, 64, -144, 212,
	-141, 52, -141, -141, 184, -141, -141, -141, -142, 186,
	-142, -142, -142, 52, 52, -141, -141, -141, -147, 52,
	-147, -147, -148, 52, -148, 50, 51, -51, -175, 257,
	-176, 55, -128, 23, -128, -111, 116, 113, 114, -172,
	112, 209, 186, 64, 28, 15, 247, 143, 262, 55,
	144, -51, -51, -51, -128, -106, 11, 89, 36, -37,
	-37, -123, -84, -87, -101, 19, 11, 32, 32, -34,
	66, 67, 68, 108, -181, -68, -61, -61, -61, -33,
	138, 70, -182, -182, -34, 53, -37, -182, -182, -182,
	53, 51, 22, 53, 11, 108, 53, 11, -182, -34,
	-79, -77, 77, -37, -182, -182, -182, -182, -182, -59,
	29, 32, -2, -181, -181, -55, 53, 12, 79, -44,
	-43, 50, 51, -45, 50, -43, 40, 40, 119, 119,
	119, -91, -116, -55, -39, -55, -99, -100, 233, 230,
	236, 55, 53, -164, 79, 52, 50, 133, -158, -158,
	55, -158, 55, 55, -156, -116, 66, 57, 58, 59,
	66, 237, 65, 9, 133, 133, 57, -145, 213, 58,
	-142, -142, -141, -142, -143, 29, -143, -143, -143, -149,
	57, -149, -146, 257, 258, -146, 58, 58, -51, -116,
	-128, -174, -173, -117, -127, -120, -185, 149, 125, 130,
	129, 55, 124, 128, 143, -178, 149, 125, 126, 130,
	129, 55, 119, 133, 124, 128, 143, 132, -112, -113,
	121, 22, 119, 133, 143, 116, -128, -108, 87, 12,
	-122, -122, 37, 108, -51, -38, 11, 96, -117, -35,
	-33, 70, -61, -61, -182, -36, -132, 105, 182, 137,
	180, 176, 198, 188, 211, 178, 212, -129, -132, -61,
	-61, -117, -61, -61, 254, -82, 78, -37, 76, -92,
	50, -93, -70, -72, -71, -181, -2, -88, -116, -91,
	-82, -97, -37, -37, -37, 52, -37, -181, -181, -181,
	-182, 53, -82, -55, 230, 234, 235, -163, -164, -167,
	-166, -116, 10, 9, 55, 55, 55, 130, 237, 54,
	-143, -143, -142, -143, 55, 105, 54, 53, 54, 178,
	178, 53, 54, 53, 52, 51, 50, 53, 79, -184,
	119, 133, -127, -116, -127, -116, -51, -127, -116, 126,
	-153, 57, -37, -55, -39, -182, -61, -182, -141, -141,
	-141, -148, -141, 168, -141, 168, -182, -182, -182, 53,
	19, -182, 53, 19, -181, -32, 252, -37, 27, -92,
	53, -182, -182, -182, 53, 108, -182, -86, -89, -116,
	-89, -89, -89, -125, -116, -86, 54, 53, -141, -155,
	153, 154, 29, 155, -155, 133, -143, -142, 57, -142,
	214, 214, 58, 58, -89, -116, -51, -173, -164, -116,
	52, 26, -116, -80, 13, -142, 55, -61, -61, -61,
	-61, -61, -182, 57, 133, -72, 32, -2, -181, -116,
	-116, 53, 54, -182, -182, -182, -54, -169, -168, 51,
	131, 64, 257, -166, 50, 66, 156, 50, -156, -143,
	-143, 54, 54, 54, 52, 52, 52, -89, -181, 124,
	-81, 14, 16, -182, -182, -182, -182, -31, 89, 257,
	9, -70, -2, 108, -116, -168, 55, -159, 79, 57,
	259, 9, 10, 52, -55, -89, -89, -89, 54, -170,
	-171, 143, 133, -37, -69, -182, 255, 47, 260, -93,
	-182, -116, 58, -116, -155, -155, -157, -116, 54, 54,
	54, -177, -182, 53, -116, 52, 37, 256, 261, 54,
	53, -55, -175, -171, 32, -89, 37, 127, -116, 145,
	54, 257, -51, 146, 260, 52, -181, 261, -157, -61,
	142, 54, -182, -182,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 549, 0, 318, 318, 318, 318, 318, 318, 0,
	69, 602, 0, 0, 0, 0, -2, 308, 309, 0,
	311, 312, 832, 832, 832, 832, 832, 0, 33, 34,
	830, 1, 3, 557, 0, 0, 322, 325, 320, 0,
	602, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	600, 600, 600, 70, 0, 0, 603, 0, 598, 0,
	598, 598, 598, 0, 267, 389, 623, 624, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 0, 0, 0,
	0, 833, 833, 833, 833, 0, 833, 296, 285, 287,
	288, 289, 290, 833, 305, 306, 295, 307, 310, 313,
	314, 315, 316, 317, 27, 561, 0, 0, 549, 29,
	0, 318, 323, 324, 328, 326, 327, 319, 0, 336,
	340, 0, 397, 0, 402, 404, -2, -2, 0, 439,
	440, 441, 442, 443, 0, 0, 0, 0, 0, 0,
	0, 466, 467, 468, 469, 534, 535, 536, 537, 538,
	539, 540, 541, 406, 407, 531, 581, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 0, 496, 496,
	496, 496, 496, 496, 496, 496, 0, 0, 0, 0,
	0, 0, 347, 349, 350, 351, 370, 0, 372, 0,
	0, 41, 45, 0, 806, 585, -2, -2, 0, 0,
	621, 622, -2, 732, -2, 619, 620, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 647, 648, 649,
	650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
	660, 661, 662, 663, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 0, 81, 0, 0, 833, 0, 71, 0, 0,
	0, 0, 0, 833, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 268, 833, 833, 833, 833, 833, 833,
	833, 833, 277, 834, 835, 278, 279, 280, 833, 833,
	282, 0, 297, 0, 291, 28, 831, 22, 0, 0,
	558, 0, 550, 551, 554, 557, 27, 325, 0, 330,
	329, 321, 0, 337, 0, 0, 0, 341, 0, 343,
	344, 0, 400, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 424, 425, 426, 427, 428, 429, 430, 403,
	0, 417, 0, 0, 0, 459, 460, 461, 462, 463,
	464, 0, 332, 27, 0, 437, 0, 0, 0, 0,
	0, 0, 0, 0, 328, 0, 523, 0, 488, 0,
	489, 490, 491, 492, 493, 494, 495, 0, 332, 0,
	0, 43, 0, 388, 0, 0, 0, 0, 0, 0,
	377, 0, 0, 380, 0, 0, 0, 0, 371, 0,
	0, 391, 776, 373, 0, 375, 376, -2, 0, 0,
	0, 39, 40, 0, 46, 806, 48, 49, 0, 0,
	0, 176, 593, 594, 595, 591, 214, 0, 85, 91,
	169, 87, 88, 89, 90, 159, 108, 129, 130, 159,
	159, 159, 159, 159, 173, 173, 173, 173, 141, 142,
	143, 144, 145, 146, 0, 0, 124, 159, 159, 159,
	128, 149, 150, 151, 152, 153, 154, 155, 156, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 161,
	161, 161, 163, 163, 0, 64, 0, 74, 0, 833,
	0, 833, 79, 0, 0, 233, 0, 261, 599, 0,
	833, 264, 265, 390, 625, 626, 269, 270, 271, 272,
	273, 274, 275, 276, 281, 284, 298, 292, 293, 286,
	562, 0, 0, 0, 0, 0, 553, 555, 556, 561,
	30, 328, 0, 542, 0, 0, 0, 331, 25, 398,
	399, 401, 418, 0, 420, 422, 342, 338, 0, 532,
	-2, 408, 409, 433, 434, 435, 0, 0, 0, 0,
	431, 413, 0, 444, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 458, 507, 508, 0, 456,
	457, 465, 0, 0, 333, 334, 436, 0, 580, 27,
	0, 0, 0, 0, 0, 531, 0, 0, 0, 0,
	529, 526, 0, 0, 497, 0, 0, 0, 0, 0,
	0, 387, 395, 582, 0, 348, 366, 368, 0, 363,
	378, 379, 381, 0, 383, 0, 385, 386, 352, 353,
	354, 0, 0, 0, 0, 374, 395, 0, 395, 42,
	586, 47, 0, 0, 52, 53, 587, 588, 589, 0,
	80, 215, 217, 220, 221, 222, 82, 83, 84, 0,
	200, 0, 0, 0, 0, 0, 210, 195, 196, 92,
	0, 0, 0, 101, 0, 103, 105, 0, 171, 170,
	107, 0, 173, 173, 159, 173, 135, 136, 176, 0,
	176, 176, 176, 0, 0, 166, 166, 127, 119, 0,
	120, 121, 122, 0, 123, 0, 0, 833, 66, 0,
	72, 73, 67, 601, 68, 832, 69, 0, 614, 234,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	0, 0, 260, 833, 263, 301, 0, 0, 0, 559,
	560, 0, 552, 23, 0, 596, 597, 543, 544, 345,
	419, 421, 423, 0, 332, 410, 431, 414, 0, 411,
	0, 0, 405, 470, 0, 0, 438, -2, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 527, 0, 0, 487, 498, 499, 500, 501, 574,
	0, 0, -2, 0, 0, 549, 0, 0, 0, 360,
	367, 0, 0, 361, 0, 362, 382, 384, 0, 0,
	0, 0, 358, 549, 395, 38, 50, 51, 0, 0,
	57, 177, 0, 218, 0, 0, 0, 188, 0, 0,
	191, 0, 193, 194, 0, 211, 93, 94, 95, 96,
	97, 98, 99, 0, 102, 104, 106, 86, 172, 0,
	176, 176, 173, 176, 137, 0, 138, 139, 140, 0,
	157, 0, 125, 0, 0, 126, 0, 0, 0, 0,
	65, 75, 76, 0, 223, 0, 832, 0, 248, 249,
	250, 251, 252, 253, 254, 832, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 832,
	615, 616, 617, 618, 0, 0, 262, 283, 0, 0,
	299, 300, 563, 0, 24, 395, 0, 339, 533, 0,
	412, 0, 432, 415, 471, 335, 0, 159, 159, 512,
	159, 163, 515, 159, 517, 159, 520, 0, 0, 0,
	0, 532, 0, 0, 0, 524, 486, 530, 0, 31,
	0, 574, 564, 576, 578, 0, 27, 0, 570, 0,
	557, 583, 396, 584, 364, 0, 369, 0, 0, 0,
	372, 0, 557, 37, 54, 55, 56, 216, 219, 0,
	197, 159, 0, 0, 189, 190, 192, 0, 100, 160,
	131, 132, 176, 133, 174, 175, 173, 0, 173, 0,
	0, 0, 164, 0, 0, 0, 0, 0, 0, 0,
	246, 247, 227, 0, 228, 230, 231, 232, 0, 210,
	226, 302, 303, 545, 346, 472, 416, 475, 509, 173,
	513, 514, 516, 518, 519, 521, 477, 476, 478, 0,
	0, 481, 0, 0, 0, 0, 0, 528, 0, 32,
	0, 579, -2, 0, 0, 0, 44, 35, 0, 356,
	0, 0, 0, 391, 359, 36, 179, 0, 199, 201,
	206, 207, 0, 0, 202, 210, 134, 176, 158, 176,
	167, 168, 0, 0, 0, 0, 0, 77, 78, 0,
	0, 0, 211, 547, 0, 510, 511, 0, 0, 0,
	0, 502, 485, 525, 0, 577, 0, -2, 0, 572,
	571, 0, 365, 392, 393, 394, 355, 178, 180, 0,
	186, 0, 0, 198, 0, 208, 209, 0, 0, 147,
	148, 162, 165, 395, 0, 0, 0, 0, 0, 0,
	26, 0, 0, 479, 480, 482, 483, 0, 0, 0,
	0, 567, 27, 0, 357, 181, 182, 0, 187, 184,
	0, 0, 0, 0, 61, 0, 0, 0, 71, 0,
	256, 0, 0, 548, 546, 484, 0, 0, 0, 575,
	-2, 573, 183, 185, 203, 204, 0, 212, 395, 62,
	224, 74, 255, 0, 0, 0, 503, 0, 506, 0,
	0, 63, 229, 257, 0, 0, 504, 0, 213, 0,
	225, 0, 0, 0, 0, 0, 0, 505, 0, 0,
	0, 205, 258, 259,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 263,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:310
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:315
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:316
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:320
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:343
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:351
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:355
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:361
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:368
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:374
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:378
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:384
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:388
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:395
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:407
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:419
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:423
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:429
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:435
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:439
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:443
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:448
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:449
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:453
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:457
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:462
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:466
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:472
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:476
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:480
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:484
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:490
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:494
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:500
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:504
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:508
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:522
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:532
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:536
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:542
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:547
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:563
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:578
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:593
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:597
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:601
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:609
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:613
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:618
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:622
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:627
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:631
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:637
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:642
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:647
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:653
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:658
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:664
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:670
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:677
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:684
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:689
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:693
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:697
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:703
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:708
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:719
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:729
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:734
		{
			yyDollar[1].columnType.NotNull = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:739
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:744
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:749
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:754
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:759
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:764
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:769
		{
			yyDollar[1].columnType.OnUpdate = NewValArg(yyDollar[4].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:774
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:779
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:784
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:789
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:794
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:799
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:806
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:811
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 148:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:998
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1002
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1006
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1010
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1014
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1018
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1022
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1026
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1032
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1037
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1042
		{
			yyVAL.optVal = nil
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1046
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1051
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1055
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1063
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1067
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1073
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1081
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1085
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1089
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1094
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1098
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1103
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1107
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1112
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1116
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1120
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1125
		{
			yyVAL.str = ""
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1129
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1135
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1139
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1145
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1149
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1155
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1159
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1164
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1168
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1174
		{
			yyVAL.str = ""
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1178
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1184
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1188
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1192
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1196
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1200
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1204
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1208
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1214
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1218
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1224
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1228
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1234
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1241
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1247
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1253
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1259
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 205:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1267
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1279
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1283
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1287
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1291
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1296
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1303
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1307
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1312
		{
			yyVAL.str = ""
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1316
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1320
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1328
		{
			yyVAL.str = yyDollar[1].str
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1332
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1336
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1342
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1346
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1350
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1356
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1360
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 225:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1374
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1388
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1397
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1401
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1405
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1418
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1428
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1433
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1438
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1442
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 255:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1474
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1480
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1484
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 258:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1490
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 259:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1494
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1500
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1506
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 262:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1514
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1519
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1527
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1531
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1537
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1541
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1546
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1552
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1556
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1560
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1565
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1569
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1573
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1577
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1581
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1585
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1589
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1593
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1597
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1601
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1605
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1609
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1619
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1623
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1627
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1631
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1635
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1639
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1643
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1653
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1659
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1663
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1669
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1673
		{
			yyVAL.str = "extended "
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1679
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1683
		{
			yyVAL.str = "full "
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1689
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1693
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1697
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1703
		{
			yyVAL.showFilter = nil
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1707
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1711
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1717
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1721
		{
			yyVAL.str = SessionStr
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1725
		{
			yyVAL.str = GlobalStr
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1731
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1735
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1741
		{
			yyVAL.statement = &Begin{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1745
		{
			yyVAL.statement = &Begin{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1751
		{
			yyVAL.statement = &Commit{}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1757
		{
			yyVAL.statement = &Rollback{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1763
		{
			yyVAL.statement = &OtherRead{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1767
		{
			yyVAL.statement = &OtherRead{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1771
		{
			yyVAL.statement = &OtherRead{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1775
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1779
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1784
		{
			setAllowComments(yylex, true)
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1788
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1794
		{
			yyVAL.bytes2 = nil
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1798
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1804
		{
			yyVAL.str = UnionStr
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1808
		{
			yyVAL.str = UnionAllStr
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1812
		{
			yyVAL.str = UnionDistinctStr
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1817
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1821
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1825
		{
			yyVAL.str = SQLCacheStr
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1830
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1834
		{
			yyVAL.str = DistinctStr
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1839
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1843
		{
			yyVAL.str = StraightJoinHint
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1848
		{
			yyVAL.selectExprs = nil
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1852
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1858
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1862
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1868
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1872
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1876
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 339:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1880
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1885
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1889
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1893
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1900
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1905
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1909
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1915
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1919
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1929
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1933
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1937
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1943
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 355:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1947
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1953
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1957
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1963
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1967
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1980
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1984
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1988
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1992
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1998
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2000
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2004
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2006
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2010
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2012
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2015
		{
			yyVAL.empty = struct{}{}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2017
		{
			yyVAL.empty = struct{}{}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2020
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2024
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2028
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2035
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2041
		{
			yyVAL.str = JoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2045
		{
			yyVAL.str = JoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2049
		{
			yyVAL.str = JoinStr
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2055
		{
			yyVAL.str = StraightJoinStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2061
		{
			yyVAL.str = LeftJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2065
		{
			yyVAL.str = LeftJoinStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2069
		{
			yyVAL.str = RightJoinStr
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2073
		{
			yyVAL.str = RightJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2079
		{
			yyVAL.str = NaturalJoinStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2083
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2093
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2097
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2103
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2107
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2112
		{
			yyVAL.indexHints = nil
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2116
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2120
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2124
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2129
		{
			yyVAL.expr = nil
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2133
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2139
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2143
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2147
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2151
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2155
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2159
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2163
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2169
		{
			yyVAL.str = ""
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2173
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2179
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2183
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2189
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2193
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2197
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2201
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2205
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2209
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2213
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2217
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 416:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2221
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2225
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2231
		{
			yyVAL.str = IsNullStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2235
		{
			yyVAL.str = IsNotNullStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2239
		{
			yyVAL.str = IsTrueStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2243
		{
			yyVAL.str = IsNotTrueStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2247
		{
			yyVAL.str = IsFalseStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2251
		{
			yyVAL.str = IsNotFalseStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2257
		{
			yyVAL.str = EqualStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2261
		{
			yyVAL.str = LessThanStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2265
		{
			yyVAL.str = GreaterThanStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2269
		{
			yyVAL.str = LessEqualStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2273
		{
			yyVAL.str = GreaterEqualStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2277
		{
			yyVAL.str = NotEqualStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2281
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2286
		{
			yyVAL.expr = nil
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2290
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2296
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2300
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2304
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2310
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2316
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2320
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2326
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2330
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2334
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2338
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2342
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2346
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2350
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2354
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2358
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2362
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2366
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2370
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2374
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2378
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2382
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2386
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2390
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2394
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2398
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2402
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2406
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2410
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2414
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2422
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2436
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2440
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2444
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2462
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2466
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2470
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2480
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2484
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2488
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 476:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2492
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2496
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2500
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 479:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2504
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 480:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2508
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 481:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2512
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 482:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2516
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 483:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2520
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 484:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2524
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 485:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2528
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2532
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2536
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2546
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2550
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2554
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2558
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2563
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2568
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2573
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2578
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2592
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2596
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2600
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2604
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2610
		{
			yyVAL.str = ""
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2614
		{
			yyVAL.str = BooleanModeStr
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2618
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 505:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2622
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2626
		{
			yyVAL.str = QueryExpansionStr
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2632
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2636
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2642
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2646
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2650
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2654
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2658
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2662
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2668
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2672
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2676
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2680
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2684
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2688
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2692
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2697
		{
			yyVAL.expr = nil
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2701
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2706
		{
			yyVAL.str = string("")
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2710
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2716
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2720
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2726
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2731
		{
			yyVAL.expr = nil
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2735
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2741
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2745
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 533:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2749
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2755
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2759
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2763
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2767
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2771
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2775
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2779
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2783
		{
			yyVAL.expr = &NullVal{}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2789
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2798
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2802
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2807
		{
			yyVAL.exprs = nil
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2811
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2816
		{
			yyVAL.expr = nil
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2820
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2825
		{
			yyVAL.orderBy = nil
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2829
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2835
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2839
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2845
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2850
		{
			yyVAL.str = AscScr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2854
		{
			yyVAL.str = AscScr
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2858
		{
			yyVAL.str = DescScr
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2863
		{
			yyVAL.limit = nil
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2867
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2871
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2875
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2880
		{
			yyVAL.str = ""
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2884
		{
			yyVAL.str = ForUpdateStr
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2888
		{
			yyVAL.str = ShareModeStr
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2901
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2905
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2909
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 567:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2914
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2918
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 569:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2922
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2929
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2933
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2937
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2941
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2946
		{
			yyVAL.updateExprs = nil
		}
	case 575:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2950
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2956
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2960
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2966
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2970
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2976
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2982
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2992
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2996
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3002
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3008
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3012
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3018
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3022
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3026
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3033
		{
			yyVAL.bytes = []byte("charset")
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3040
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3044
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3048
		{
			yyVAL.expr = &Default{}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3057
		{
			yyVAL.byt = 0
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3059
		{
			yyVAL.byt = 1
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3062
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3064
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3067
		{
			yyVAL.str = ""
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3069
		{
			yyVAL.str = IgnoreStr
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3073
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3075
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3077
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3079
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3081
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3083
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3085
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3087
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3089
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3091
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3094
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3096
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3098
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3102
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3104
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3108
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3112
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3119
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3125
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3129
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3136
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3365
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3374
		{
			decNesting(yylex)
		}
	case 832:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3379
		{
			forceEOF(yylex)
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3384
		{
			forceEOF(yylex)
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3388
		{
			forceEOF(yylex)
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3392
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
