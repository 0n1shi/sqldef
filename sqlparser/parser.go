// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
	blockStatement       []Statement
	localVariable        *LocalVariable
	localVariables       []*LocalVariable
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const REFERENCES = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const POLICY = 57459
const WHILE = 57460
const UNIQUE = 57461
const KEY = 57462
const SHOW = 57463
const DESCRIBE = 57464
const EXPLAIN = 57465
const DATE = 57466
const ESCAPE = 57467
const REPAIR = 57468
const OPTIMIZE = 57469
const TRUNCATE = 57470
const MAXVALUE = 57471
const PARTITION = 57472
const REORGANIZE = 57473
const LESS = 57474
const THAN = 57475
const PROCEDURE = 57476
const TRIGGER = 57477
const VINDEX = 57478
const VINDEXES = 57479
const STATUS = 57480
const VARIABLES = 57481
const RESTRICT = 57482
const CASCADE = 57483
const NO = 57484
const ACTION = 57485
const PERMISSIVE = 57486
const RESTRICTIVE = 57487
const PUBLIC = 57488
const CURRENT_USER = 57489
const SESSION_USER = 57490
const PAD_INDEX = 57491
const FILLFACTOR = 57492
const IGNORE_DUP_KEY = 57493
const STATISTICS_NORECOMPUTE = 57494
const STATISTICS_INCREMENTAL = 57495
const ALLOW_ROW_LOCKS = 57496
const ALLOW_PAGE_LOCKS = 57497
const BEFORE = 57498
const AFTER = 57499
const EACH = 57500
const ROW = 57501
const SCROLL = 57502
const CURSOR = 57503
const OPEN = 57504
const CLOSE = 57505
const FETCH = 57506
const PRIOR = 57507
const FIRST = 57508
const LAST = 57509
const DEALLOCATE = 57510
const BEGIN = 57511
const START = 57512
const TRANSACTION = 57513
const COMMIT = 57514
const ROLLBACK = 57515
const BIT = 57516
const TINYINT = 57517
const SMALLINT = 57518
const SMALLSERIAL = 57519
const MEDIUMINT = 57520
const INT = 57521
const INTEGER = 57522
const SERIAL = 57523
const BIGINT = 57524
const BIGSERIAL = 57525
const INTNUM = 57526
const REAL = 57527
const DOUBLE = 57528
const PRECISION = 57529
const FLOAT_TYPE = 57530
const DECIMAL = 57531
const NUMERIC = 57532
const SMALLMONEY = 57533
const MONEY = 57534
const TIME = 57535
const TIMESTAMP = 57536
const DATETIME = 57537
const YEAR = 57538
const DATETIMEOFFSET = 57539
const DATETIME2 = 57540
const SMALLDATETIME = 57541
const CHAR = 57542
const VARCHAR = 57543
const VARYING = 57544
const BOOL = 57545
const CHARACTER = 57546
const VARBINARY = 57547
const NCHAR = 57548
const NVARCHAR = 57549
const NTEXT = 57550
const UUID = 57551
const TEXT = 57552
const TINYTEXT = 57553
const MEDIUMTEXT = 57554
const LONGTEXT = 57555
const CITEXT = 57556
const BLOB = 57557
const TINYBLOB = 57558
const MEDIUMBLOB = 57559
const LONGBLOB = 57560
const JSON = 57561
const JSONB = 57562
const ENUM = 57563
const GEOMETRY = 57564
const POINT = 57565
const LINESTRING = 57566
const POLYGON = 57567
const GEOMETRYCOLLECTION = 57568
const MULTIPOINT = 57569
const MULTILINESTRING = 57570
const MULTIPOLYGON = 57571
const ARRAY = 57572
const NOW = 57573
const GETDATE = 57574
const BPCHAR = 57575
const NULLX = 57576
const AUTO_INCREMENT = 57577
const APPROXNUM = 57578
const SIGNED = 57579
const UNSIGNED = 57580
const ZEROFILL = 57581
const ZONE = 57582
const AUTOINCREMENT = 57583
const DATABASES = 57584
const TABLES = 57585
const VITESS_KEYSPACES = 57586
const VITESS_SHARDS = 57587
const VITESS_TABLETS = 57588
const VSCHEMA_TABLES = 57589
const EXTENDED = 57590
const FULL = 57591
const PROCESSLIST = 57592
const NAMES = 57593
const CHARSET = 57594
const GLOBAL = 57595
const SESSION = 57596
const ISOLATION = 57597
const LEVEL = 57598
const READ = 57599
const WRITE = 57600
const ONLY = 57601
const REPEATABLE = 57602
const COMMITTED = 57603
const UNCOMMITTED = 57604
const SERIALIZABLE = 57605
const CURRENT_TIMESTAMP = 57606
const DATABASE = 57607
const CURRENT_DATE = 57608
const CURRENT_TIME = 57609
const LOCALTIME = 57610
const LOCALTIMESTAMP = 57611
const UTC_DATE = 57612
const UTC_TIME = 57613
const UTC_TIMESTAMP = 57614
const REPLACE = 57615
const CONVERT = 57616
const CAST = 57617
const SUBSTR = 57618
const SUBSTRING = 57619
const GROUP_CONCAT = 57620
const SEPARATOR = 57621
const INHERIT = 57622
const MATCH = 57623
const AGAINST = 57624
const BOOLEAN = 57625
const LANGUAGE = 57626
const WITH = 57627
const WITHOUT = 57628
const PARSER = 57629
const QUERY = 57630
const EXPANSION = 57631
const UNUSED = 57632
const VIRTUAL = 57633
const GENERATED = 57634
const ALWAYS = 57635
const IDENTITY = 57636
const SEQUENCE = 57637
const INCREMENT = 57638
const MINVALUE = 57639
const CACHE = 57640
const CYCLE = 57641
const OWNED = 57642
const NONE = 57643
const CLUSTERED = 57644
const NONCLUSTERED = 57645
const REPLICATION = 57646
const INCLUDE = 57647
const TYPECAST = 57648
const CHECK = 57649

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	122, 136,
	-2, 126,
	-1, 36,
	155, 449,
	156, 449,
	-2, 439,
	-1, 272,
	110, 782,
	-2, 778,
	-1, 273,
	110, 783,
	-2, 779,
	-1, 343,
	81, 987,
	-2, 81,
	-1, 344,
	81, 938,
	-2, 82,
	-1, 349,
	81, 917,
	-2, 749,
	-1, 351,
	81, 961,
	-2, 751,
	-1, 663,
	52, 41,
	54, 41,
	-2, 43,
	-1, 809,
	110, 785,
	-2, 781,
	-1, 1052,
	5, 28,
	-2, 584,
	-1, 1077,
	5, 27,
	-2, 723,
	-1, 1178,
	5, 27,
	-2, 87,
	-1, 1397,
	5, 28,
	-2, 724,
	-1, 1481,
	5, 27,
	-2, 726,
	-1, 1636,
	5, 28,
	-2, 727,
	-1, 1763,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 15660

var yyAct = [...]int{
	273, 1626, 1491, 21, 1727, 589, 3, 1532, 1572, 1080,
	509, 1494, 986, 873, 268, 1728, 1416, 277, 1611, 590,
	251, 1111, 1403, 522, 740, 302, 1643, 1266, 1169, 891,
	785, 275, 1293, 1294, 1267, 89, 1180, 475, 89, 1114,
	915, 276, 1263, 981, 1136, 657, 921, 994, 910, 655,
	53, 914, 874, 250, 995, 1096, 1142, 834, 935, 255,
	842, 1239, 89, 89, 353, 845, 66, 348, 279, 353,
	1044, 964, 353, 353, 345, 746, 245, 930, 89, 673,
	89, 1085, 861, 473, 528, 811, 89, 342, 870, 659,
	976, 335, 844, 672, 1166, 329, 644, 534, 330, 260,
	691, 687, 1026, 613, 542, 1680, 337, 1150, 339, 948,
	52, 328, 556, 1721, 566, 566, 1319, 1669, 476, 477,
	246, 247, 248, 249, 1306, 264, 86, 1422, 1307, 1658,
	333, 1565, 555, 554, 564, 565, 557, 558, 559, 560,
	561, 562, 563, 556, 951, 1134, 566, 1429, 1771, 1698,
	1766, 1634, 1577, 1755, 338, 554, 564, 565, 557, 558,
	559, 560, 561, 562, 563, 556, 1387, 521, 566, 488,
	550, 489, 553, 987, 1576, 1673, 1714, 496, 568, 569,
	570, 571, 572, 573, 574, 1697, 551, 552, 549, 555,
	554, 564, 565, 557, 558, 559, 560, 561, 562, 563,
	556, 1170, 1171, 566, 555, 554, 564, 565, 557, 558,
	559, 560, 561, 562, 563, 556, 1707, 301, 566, 1258,
	1633, 1657, 1234, 950, 89, 1391, 486, 1288, 353, 353,
	353, 353, 904, 353, 84, 80, 81, 82, 1289, 1290,
	353, 517, 555, 554, 564, 565, 557, 558, 559, 560,
	561, 562, 563, 556, 1384, 521, 566, 1104, 1447, 674,
	1103, 675, 531, 1105, 905, 906, 1152, 353, 564, 565,
	557, 558, 559, 560, 561, 562, 563, 556, 1149, 521,
	566, 347, 1446, 953, 965, 1523, 479, 865, 1470, 483,
	484, 1388, 555, 554, 564, 565, 557, 558, 559, 560,
	561, 562, 563, 556, 776, 530, 566, 476, 477, 955,
	1146, 777, 1148, 1147, 1339, 498, 555, 554, 564, 565,
	557, 558, 559, 560, 561, 562, 563, 556, 89, 1338,
	566, 567, 567, 57, 1385, 89, 89, 89, 1380, 1378,
	244, 353, 1566, 577, 1713, 977, 1715, 353, 1769, 1689,
	1510, 345, 1606, 1725, 748, 948, 604, 748, 59, 60,
	61, 62, 63, 567, 555, 554, 564, 565, 557, 558,
	559, 560, 561, 562, 563, 556, 1534, 937, 566, 559,
	560, 561, 562, 563, 556, 567, 747, 566, 1616, 1419,
	1435, 944, 1765, 933, 1349, 1350, 1595, 83, 1753, 934,
	1434, 513, 514, 333, 1309, 1430, 1437, 555, 554, 564,
	565, 557, 558, 559, 560, 561, 562, 563, 556, 639,
	567, 566, 1627, 618, 619, 1577, 502, 1217, 663, 1436,
	871, 1628, 1478, 1424, 1423, 567, 1128, 1127, 1116, 1133,
	1355, 1659, 1214, 664, 931, 347, 347, 347, 347, 670,
	347, 1737, 940, 965, 936, 945, 1356, 347, 1364, 1706,
	932, 1300, 942, 941, 557, 558, 559, 560, 561, 562,
	563, 556, 1632, 567, 566, 958, 1556, 1301, 75, 89,
	491, 1121, 481, 1455, 544, 1119, 89, 78, 89, 353,
	504, 89, 506, 77, 89, 78, 978, 567, 89, 270,
	353, 353, 353, 353, 353, 353, 353, 353, 749, 750,
	755, 749, 750, 478, 353, 353, 1417, 1418, 1420, 89,
	1095, 503, 505, 567, 892, 894, 70, 73, 1759, 1094,
	1093, 738, 1663, 487, 353, 1617, 1618, 1619, 89, 1218,
	1215, 71, 1213, 74, 353, 1665, 931, 567, 223, 1570,
	931, 788, 79, 579, 580, 266, 1216, 808, 347, 72,
	68, 1400, 932, 1226, 678, 764, 932, 1060, 1038, 783,
	739, 546, 497, 1660, 1333, 812, 1021, 751, 938, 752,
	685, 780, 756, 1222, 939, 759, 912, 911, 353, 541,
	520, 532, 818, 539, 1588, 567, 540, 539, 849, 893,
	762, 1587, 1260, 521, 567, 1586, 816, 817, 815, 541,
	778, 839, 840, 541, 809, 854, 857, 1585, 813, 540,
	539, 863, 1584, 540, 539, 1334, 1583, 1582, 1580, 797,
	1262, 1346, 790, 1764, 1083, 946, 541, 947, 567, 89,
	541, 676, 89, 89, 89, 89, 89, 862, 805, 807,
	943, 862, 501, 1067, 89, 1113, 1022, 89, 875, 743,
	1221, 89, 849, 1509, 480, 1644, 89, 89, 618, 619,
	353, 837, 606, 607, 608, 609, 610, 611, 612, 536,
	345, 1495, 1512, 353, 1645, 490, 850, 851, 1124, 69,
	1708, 567, 858, 916, 1497, 867, 1740, 1739, 859, 1661,
	1662, 1664, 1666, 1667, 1113, 1508, 347, 1035, 1036, 1037,
	333, 333, 333, 333, 333, 899, 1712, 347, 347, 347,
	347, 347, 347, 347, 347, 333, 866, 1113, 868, 869,
	872, 347, 347, 1709, 333, 482, 1123, 876, 485, 353,
	879, 877, 878, 353, 880, 353, 89, 1711, 89, 888,
	896, 792, 897, 1056, 89, 1055, 89, 901, 900, 89,
	353, 544, 1496, 1710, 347, 902, 1112, 919, 493, 494,
	495, 1646, 540, 539, 966, 967, 968, 969, 1642, 983,
	581, 582, 583, 584, 585, 586, 587, 76, 1113, 541,
	474, 1521, 50, 1581, 808, 1498, 1499, 1500, 1501, 1502,
	1503, 1504, 814, 1440, 1449, 841, 1448, 1153, 525, 529,
	786, 787, 1028, 1317, 1315, 855, 855, 1175, 1138, 1139,
	1140, 855, 1173, 979, 980, 547, 1143, 1141, 299, 300,
	1057, 1439, 801, 803, 804, 1153, 782, 993, 802, 999,
	835, 812, 836, 1194, 1477, 1016, 1444, 1017, 327, 1153,
	1018, 809, 1366, 1167, 1495, 931, 540, 539, 855, 591,
	926, 1130, 925, 521, 927, 928, 1578, 1497, 602, 1027,
	929, 932, 781, 541, 1604, 1776, 1077, 1304, 540, 539,
	1485, 1761, 1413, 1754, 813, 1413, 1720, 347, 1034, 540,
	539, 1413, 1719, 1413, 1705, 541, 353, 1604, 1704, 89,
	347, 1040, 1701, 1700, 1693, 521, 541, 1098, 257, 1100,
	48, 26, 27, 1195, 1191, 353, 1303, 1196, 1193, 1192,
	1413, 1690, 1546, 74, 1302, 916, 353, 1485, 1624, 1413,
	1600, 1493, 28, 1122, 1197, 1496, 1049, 353, 1485, 1518,
	1190, 1485, 521, 1066, 1485, 1486, 89, 1106, 1099, 1413,
	1412, 1599, 1064, 1285, 521, 1108, 984, 1399, 521, 1598,
	347, 1090, 347, 1342, 1341, 1129, 989, 333, 1498, 1499,
	1500, 1501, 1502, 1503, 1504, 1336, 1337, 347, 1336, 1335,
	1050, 521, 1777, 1101, 641, 521, 1596, 23, 353, 838,
	1144, 1178, 761, 646, 649, 650, 651, 647, 1181, 648,
	652, 347, 1172, 1086, 1087, 1117, 1118, 1120, 1145, 1149,
	760, 1075, 744, 1160, 1076, 1162, 1163, 1164, 1165, 353,
	847, 521, 89, 89, 742, 683, 682, 1552, 1154, 1155,
	89, 1157, 1158, 1159, 50, 667, 499, 1551, 492, 353,
	474, 1146, 1528, 1148, 1147, 1605, 1527, 1604, 810, 1231,
	1522, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 1168, 1462, 1188, 1174,
	23, 1255, 1441, 1432, 1326, 1186, 668, 1187, 666, 353,
	353, 1547, 1548, 1550, 1270, 1264, 54, 1549, 1081, 1265,
	898, 1184, 666, 875, 1185, 798, 799, 1480, 1185, 875,
	1232, 1229, 1268, 640, 1575, 1082, 1081, 847, 353, 1287,
	353, 353, 1233, 1097, 1251, 1259, 1238, 50, 916, 1252,
	916, 1227, 789, 796, 1678, 1050, 1395, 641, 809, 641,
	1062, 1274, 347, 1059, 1275, 1273, 292, 291, 294, 295,
	296, 297, 23, 1115, 1050, 293, 298, 641, 591, 1286,
	1292, 852, 853, 1082, 1125, 1451, 1450, 741, 1431, 1291,
	1305, 555, 554, 564, 565, 557, 558, 559, 560, 561,
	562, 563, 556, 1061, 1345, 566, 1058, 89, 353, 1144,
	846, 848, 1316, 1310, 1308, 89, 1340, 1107, 903, 50,
	50, 353, 49, 1050, 669, 1081, 864, 784, 257, 1767,
	353, 1718, 1695, 1327, 1328, 347, 1330, 1331, 1332, 954,
	1602, 1045, 89, 646, 649, 650, 651, 647, 353, 648,
	652, 1601, 1592, 1591, 1553, 1573, 1520, 353, 1329, 1464,
	89, 955, 909, 982, 1353, 1325, 347, 1231, 1368, 1324,
	1352, 1322, 1312, 1279, 977, 50, 890, 1176, 1177, 1732,
	1135, 1110, 1086, 1087, 1452, 971, 347, 970, 65, 1264,
	1089, 758, 745, 518, 885, 1365, 1357, 883, 1343, 886,
	1092, 887, 884, 650, 651, 1359, 1351, 1091, 347, 1369,
	353, 882, 353, 353, 353, 89, 353, 881, 1376, 1362,
	261, 262, 353, 855, 1734, 1402, 1272, 1097, 333, 855,
	1696, 1225, 916, 1361, 1406, 1407, 1408, 1411, 1394, 1023,
	535, 1033, 1032, 353, 523, 1421, 1041, 1042, 1043, 1161,
	681, 500, 1314, 533, 1393, 347, 524, 347, 1295, 1726,
	1409, 1426, 1108, 786, 787, 1428, 1465, 1024, 1025, 1457,
	529, 1458, 1459, 1460, 1425, 991, 353, 353, 757, 1313,
	1183, 985, 654, 535, 1456, 353, 1181, 916, 252, 1144,
	258, 259, 1433, 1748, 1461, 353, 555, 554, 564, 565,
	557, 558, 559, 560, 561, 562, 563, 556, 1442, 1348,
	566, 1031, 1453, 1299, 1716, 1559, 54, 1454, 253, 1030,
	1558, 1468, 567, 1082, 1686, 1344, 996, 997, 998, 1590,
	353, 353, 1685, 1051, 1481, 1684, 1683, 1443, 1358, 1445,
	1298, 1297, 1589, 537, 353, 1567, 1126, 1360, 1068, 779,
	56, 1268, 1541, 8, 353, 1538, 7, 1539, 6, 1047,
	1479, 1537, 5, 1048, 58, 1363, 1189, 1354, 1507, 1490,
	1052, 1053, 1054, 1511, 347, 1506, 1469, 1505, 665, 1063,
	51, 353, 353, 89, 1069, 1, 353, 1070, 1071, 1072,
	1073, 1519, 1515, 1513, 1524, 353, 1545, 1679, 1609, 1535,
	1615, 1597, 1132, 1594, 67, 1672, 1603, 1318, 1536, 1347,
	1182, 1198, 988, 1529, 1179, 1004, 353, 1554, 1569, 1625,
	1639, 1046, 1525, 1492, 1526, 923, 913, 1404, 472, 1404,
	1404, 1404, 64, 1410, 1574, 1579, 1268, 924, 1568, 347,
	922, 555, 554, 564, 565, 557, 558, 559, 560, 561,
	562, 563, 556, 920, 684, 566, 949, 1151, 952, 690,
	1404, 688, 689, 686, 692, 231, 340, 653, 677, 1545,
	538, 1212, 1211, 1000, 1531, 1235, 1236, 353, 353, 353,
	353, 1607, 1220, 775, 353, 1020, 516, 233, 1253, 1254,
	575, 1256, 1257, 347, 347, 1029, 1620, 1622, 1102, 346,
	1668, 353, 1463, 1271, 353, 527, 1557, 1467, 353, 1630,
	1065, 1635, 1466, 601, 860, 875, 1623, 278, 1640, 800,
	290, 287, 353, 353, 289, 288, 1608, 567, 791, 1654,
	1074, 548, 353, 353, 332, 353, 1652, 1653, 637, 645,
	1545, 1647, 1648, 1649, 1650, 1651, 353, 1483, 1484, 507,
	643, 642, 1676, 1261, 1545, 1655, 1088, 1084, 353, 1677,
	331, 1295, 1228, 1390, 1670, 1671, 1687, 1564, 1276, 1277,
	1237, 1514, 1278, 303, 47, 1280, 795, 25, 55, 1691,
	263, 19, 18, 17, 20, 16, 15, 14, 29, 13,
	12, 11, 10, 9, 1544, 1543, 1542, 1540, 1295, 1530,
	4, 254, 22, 1533, 1702, 1703, 2, 0, 1717, 353,
	0, 0, 1404, 0, 0, 0, 0, 1284, 0, 0,
	0, 47, 1545, 1545, 1729, 1731, 353, 1723, 0, 256,
	353, 1722, 0, 1571, 1730, 334, 0, 0, 1738, 0,
	0, 0, 0, 1736, 0, 0, 0, 89, 0, 353,
	1743, 0, 0, 1746, 0, 0, 0, 353, 1733, 1745,
	0, 1545, 0, 1545, 1371, 0, 0, 0, 89, 0,
	0, 1744, 567, 1751, 0, 1751, 0, 1758, 1762, 0,
	0, 0, 1760, 0, 1763, 0, 0, 0, 0, 0,
	353, 0, 0, 0, 1610, 1612, 1613, 1614, 353, 0,
	1768, 1295, 0, 1545, 1773, 1772, 0, 1545, 1367, 0,
	0, 0, 0, 0, 0, 855, 0, 0, 1637, 1751,
	0, 1638, 0, 0, 0, 1641, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1533,
	1295, 0, 0, 257, 0, 48, 26, 27, 1392, 1295,
	1295, 0, 1674, 1370, 0, 591, 0, 1546, 0, 1757,
	1372, 0, 0, 1682, 0, 0, 0, 28, 0, 0,
	0, 0, 1381, 1382, 1383, 1694, 0, 1386, 510, 511,
	512, 0, 515, 0, 0, 0, 0, 0, 0, 519,
	1396, 1397, 1398, 0, 1401, 0, 0, 1427, 0, 0,
	0, 508, 508, 508, 508, 0, 508, 0, 0, 0,
	0, 0, 0, 508, 1471, 1472, 0, 1473, 1474, 1475,
	0, 0, 0, 0, 0, 0, 1724, 0, 0, 0,
	47, 0, 0, 956, 957, 959, 960, 961, 0, 962,
	963, 1438, 0, 1295, 0, 576, 0, 1735, 578, 0,
	0, 0, 0, 0, 0, 1010, 972, 973, 974, 0,
	975, 0, 1552, 0, 0, 0, 1404, 0, 0, 1009,
	0, 0, 1551, 0, 1749, 588, 0, 592, 593, 594,
	595, 596, 597, 598, 599, 600, 0, 603, 605, 605,
	605, 605, 605, 605, 605, 605, 1014, 633, 634, 635,
	636, 0, 0, 0, 0, 1008, 0, 347, 656, 0,
	0, 1476, 0, 0, 0, 1533, 1547, 1548, 1550, 614,
	0, 0, 1549, 1688, 0, 1137, 0, 1487, 1488, 1489,
	1138, 1139, 1140, 0, 0, 0, 526, 0, 1143, 1141,
	299, 300, 0, 0, 0, 0, 0, 0, 1517, 0,
	0, 0, 0, 616, 1005, 1002, 1003, 0, 1001, 0,
	0, 0, 0, 0, 0, 0, 0, 1138, 1139, 1140,
	0, 87, 0, 0, 243, 1143, 1141, 299, 300, 0,
	0, 1621, 1621, 0, 0, 0, 0, 1012, 1015, 0,
	0, 0, 1560, 1561, 1562, 1563, 267, 0, 87, 87,
	0, 0, 1593, 621, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 0, 87, 0, 87, 0, 0, 229,
	0, 0, 87, 0, 617, 0, 0, 49, 0, 0,
	0, 0, 631, 615, 0, 0, 0, 0, 754, 620,
	0, 0, 0, 239, 1629, 591, 0, 0, 0, 765,
	766, 767, 768, 769, 770, 771, 772, 0, 0, 0,
	0, 1007, 508, 773, 774, 1240, 0, 0, 0, 0,
	0, 0, 0, 508, 508, 508, 508, 508, 508, 508,
	508, 0, 0, 0, 0, 1631, 0, 508, 508, 0,
	1636, 1675, 1006, 0, 224, 0, 0, 0, 1156, 1242,
	226, 0, 257, 0, 48, 26, 27, 232, 228, 0,
	0, 0, 632, 0, 1656, 0, 1546, 0, 0, 0,
	1145, 1149, 0, 0, 0, 257, 28, 48, 26, 27,
	0, 1011, 0, 0, 0, 0, 0, 0, 230, 1546,
	0, 234, 0, 0, 0, 0, 1692, 1013, 0, 28,
	0, 0, 47, 1146, 0, 1148, 1147, 1145, 1149, 714,
	87, 0, 0, 0, 1244, 0, 592, 0, 1249, 0,
	1243, 0, 0, 0, 0, 1241, 1752, 0, 0, 0,
	0, 1247, 0, 0, 0, 0, 0, 0, 0, 0,
	1146, 0, 1148, 1147, 1245, 1246, 0, 0, 0, 1750,
	1774, 0, 0, 0, 0, 0, 0, 1747, 225, 0,
	0, 0, 1248, 1250, 0, 334, 334, 334, 334, 334,
	0, 1552, 0, 0, 0, 0, 0, 0, 0, 0,
	656, 1551, 895, 0, 0, 0, 699, 0, 0, 334,
	0, 0, 0, 0, 1552, 0, 227, 0, 235, 236,
	237, 238, 242, 0, 1551, 0, 1756, 241, 240, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	715, 87, 661, 87, 0, 1547, 1548, 1550, 0, 0,
	0, 1549, 0, 0, 0, 0, 1321, 1323, 0, 0,
	0, 0, 990, 0, 992, 1778, 1779, 0, 1547, 1548,
	1550, 0, 0, 0, 1549, 0, 1681, 0, 0, 1019,
	0, 0, 0, 0, 0, 0, 508, 0, 508, 0,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	0, 731, 732, 508, 733, 734, 735, 737, 736, 716,
	717, 718, 722, 720, 719, 721, 693, 695, 0, 631,
	694, 700, 696, 697, 698, 712, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 713, 723, 724,
	725, 726, 727, 728, 729, 730, 1204, 0, 0, 0,
	1373, 1374, 1039, 1375, 0, 0, 49, 1377, 0, 1379,
	257, 0, 48, 26, 27, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1546, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 28, 87, 0, 0, 0, 0,
	0, 0, 87, 0, 87, 0, 0, 87, 0, 632,
	87, 0, 0, 0, 763, 1414, 1415, 0, 0, 0,
	0, 1205, 0, 0, 1078, 1079, 1207, 1200, 1201, 0,
	1208, 1203, 1202, 0, 0, 87, 1210, 1206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1209, 0, 0,
	0, 0, 334, 1199, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 763, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1551,
	0, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	267, 267, 0, 0, 856, 856, 267, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	0, 714, 0, 1547, 1548, 1550, 0, 0, 1219, 1549,
	267, 267, 267, 267, 0, 87, 0, 856, 87, 87,
	87, 87, 87, 0, 0, 0, 0, 0, 0, 0,
	889, 0, 508, 87, 0, 0, 0, 661, 0, 0,
	0, 0, 87, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 699, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1269, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1281, 1282, 1283,
	0, 0, 715, 0, 49, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 87, 0, 0, 0, 0, 0,
	87, 0, 87, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1320,
	763, 0, 621, 622, 623, 624, 625, 626, 627, 628,
	629, 630, 267, 731, 732, 0, 733, 734, 735, 737,
	736, 716, 717, 718, 722, 720, 719, 721, 693, 695,
	0, 631, 694, 700, 696, 697, 698, 712, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 713,
	723, 724, 725, 726, 727, 728, 729, 730, 0, 0,
	267, 23, 24, 48, 26, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 0, 0, 0,
	0, 42, 0, 334, 0, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 37, 0, 0, 0, 50, 0,
	0, 632, 1389, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1131, 0, 0, 0, 0, 0, 30, 31,
	33, 32, 35, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 36, 43, 44, 0, 0, 45, 46,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1223, 1224,
	0, 38, 39, 0, 40, 41, 87, 0, 0, 1269,
	0, 0, 1482, 0, 0, 0, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 763, 0, 0,
	1516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1269, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1699, 0, 0, 0, 0, 0, 0, 0,
	0, 661, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 130, 0, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 554, 564, 565, 557, 558, 559, 560,
	561, 562, 563, 556, 0, 0, 566, 0, 0, 0,
	0, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 161, 0, 108, 1770,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 856, 0, 0, 125, 0, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 567, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	459, 449, 0, 414, 461, 385, 403, 469, 405, 406,
	438, 365, 423, 154, 400, 383, 92, 388, 358, 395,
	359, 386, 416, 116, 384, 451, 426, 130, 467, 133,
	431, 0, 176, 142, 0, 0, 418, 453, 421, 445,
	413, 439, 373, 430, 462, 401, 434, 463, 0, 0,
	0, 352, 0, 917, 918, 0, 0, 0, 0, 0,
	105, 0, 433, 458, 397, 471, 437, 357, 432, 0,
	363, 366, 468, 456, 392, 393, 1109, 0, 0, 0,
	0, 0, 0, 417, 422, 442, 410, 0, 0, 0,
	0, 0, 0, 0, 0, 389, 0, 429, 0, 0,
	0, 370, 364, 1742, 415, 0, 0, 0, 372, 0,
	390, 443, 0, 354, 447, 454, 412, 203, 457, 409,
	408, 161, 0, 108, 87, 182, 120, 402, 131, 440,
	470, 460, 419, 452, 387, 396, 110, 394, 168, 155,
	194, 428, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	391, 446, 448, 377, 436, 367, 398, 441, 399, 420,
	382, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 381, 455, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 435, 169, 107, 195, 175, 376, 380, 374, 375,
	424, 425, 464, 465, 466, 444, 371, 0, 378, 379,
	0, 450, 125, 427, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 404, 356, 407, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 170, 411, 0, 104,
	459, 449, 0, 414, 461, 385, 403, 469, 405, 406,
	438, 365, 423, 154, 400, 383, 92, 388, 358, 395,
	359, 386, 416, 116, 384, 451, 426, 130, 467, 133,
	431, 0, 176, 142, 0, 0, 418, 453, 421, 445,
	413, 439, 373, 430, 462, 401, 434, 463, 0, 0,
	0, 352, 0, 917, 918, 0, 0, 0, 0, 0,
	105, 0, 433, 458, 397, 471, 437, 357, 432, 0,
	363, 366, 468, 456, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 417, 422, 442, 410, 0, 0, 0,
	0, 0, 0, 0, 0, 389, 0, 429, 0, 0,
	0, 370, 364, 0, 415, 0, 0, 0, 372, 0,
	390, 443, 0, 354, 447, 454, 412, 203, 457, 409,
	408, 161, 0, 108, 0, 182, 120, 402, 131, 440,
	470, 460, 419, 452, 387, 396, 110, 394, 168, 155,
	194, 428, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	391, 446, 448, 377, 436, 367, 398, 441, 399, 420,
	382, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 381, 455, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 435, 169, 107, 195, 175, 376, 380, 374, 375,
	424, 425, 464, 465, 466, 444, 371, 0, 378, 379,
	0, 450, 125, 427, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 404, 356, 407, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 170, 411, 0, 104,
	459, 449, 0, 414, 461, 385, 403, 469, 405, 406,
	438, 365, 423, 154, 400, 383, 92, 388, 358, 395,
	359, 386, 416, 116, 384, 451, 426, 130, 467, 133,
	431, 0, 176, 142, 0, 0, 418, 453, 421, 445,
	413, 439, 373, 430, 462, 401, 434, 463, 0, 0,
	0, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 433, 458, 397, 471, 437, 357, 432, 0,
	363, 366, 468, 456, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 417, 422, 442, 410, 0, 0, 0,
	0, 0, 0, 1230, 0, 389, 0, 429, 0, 0,
	0, 370, 364, 0, 415, 0, 0, 0, 372, 0,
	390, 443, 0, 354, 447, 454, 412, 203, 457, 409,
	408, 161, 0, 108, 0, 182, 120, 402, 131, 440,
	470, 460, 419, 452, 387, 396, 110, 394, 168, 155,
	194, 428, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	391, 446, 448, 377, 436, 367, 398, 441, 399, 420,
	382, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 381, 455, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 435, 169, 107, 195, 175, 376, 380, 374, 375,
	424, 425, 464, 465, 466, 444, 371, 0, 378, 379,
	0, 450, 125, 427, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 404, 356, 407, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 170, 411, 0, 104,
	459, 449, 0, 414, 461, 385, 403, 469, 405, 406,
	438, 365, 423, 154, 400, 383, 92, 388, 358, 395,
	359, 386, 416, 116, 384, 451, 426, 130, 467, 133,
	431, 0, 176, 142, 0, 0, 418, 453, 421, 445,
	413, 439, 373, 430, 462, 401, 434, 463, 50, 0,
	0, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 433, 458, 397, 471, 437, 357, 432, 0,
	363, 366, 468, 456, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 417, 422, 442, 410, 0, 0, 0,
	0, 0, 0, 0, 0, 389, 0, 429, 0, 0,
	0, 370, 364, 0, 415, 0, 0, 0, 372, 0,
	390, 443, 0, 354, 447, 454, 412, 203, 457, 409,
	408, 161, 0, 108, 0, 182, 120, 402, 131, 440,
	470, 460, 419, 452, 387, 396, 110, 394, 168, 155,
	194, 428, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	391, 446, 448, 377, 436, 367, 398, 441, 399, 420,
	382, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 381, 455, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 435, 169, 107, 195, 175, 376, 380, 374, 375,
	424, 425, 464, 465, 466, 444, 371, 0, 378, 379,
	0, 450, 125, 427, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 404, 356, 407, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 170, 411, 0, 104,
	459, 449, 0, 414, 461, 385, 403, 469, 405, 406,
	438, 365, 423, 154, 400, 383, 92, 388, 358, 395,
	359, 386, 416, 116, 384, 451, 426, 130, 467, 133,
	431, 0, 176, 142, 0, 0, 418, 453, 421, 445,
	413, 439, 373, 430, 462, 401, 434, 463, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 433, 458, 397, 471, 437, 357, 432, 0,
	363, 366, 468, 456, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 417, 422, 442, 410, 0, 0, 0,
	0, 0, 0, 806, 0, 389, 0, 429, 0, 0,
	0, 370, 364, 0, 415, 0, 0, 0, 372, 0,
	390, 443, 0, 354, 447, 454, 412, 203, 457, 409,
	408, 161, 0, 108, 0, 182, 120, 402, 131, 440,
	470, 460, 419, 452, 387, 396, 110, 394, 168, 155,
	194, 428, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	391, 446, 448, 377, 436, 367, 398, 441, 399, 420,
	382, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 381, 455, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 435, 169, 107, 195, 175, 376, 380, 374, 375,
	424, 425, 464, 465, 466, 444, 371, 0, 378, 379,
	0, 450, 125, 427, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 404, 356, 407, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 170, 411, 0, 104,
	459, 449, 0, 414, 461, 385, 403, 469, 405, 406,
	438, 365, 423, 154, 400, 383, 92, 388, 358, 395,
	359, 386, 416, 116, 384, 451, 426, 130, 467, 133,
	431, 0, 176, 142, 0, 0, 418, 453, 421, 445,
	413, 439, 373, 430, 462, 401, 434, 463, 0, 0,
	0, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 433, 458, 397, 471, 437, 357, 432, 0,
	363, 366, 468, 456, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 417, 422, 442, 410, 0, 0, 0,
	0, 0, 0, 0, 0, 389, 0, 429, 0, 0,
	0, 370, 364, 0, 415, 0, 0, 0, 372, 0,
	390, 443, 0, 354, 447, 454, 412, 203, 457, 409,
	408, 161, 0, 108, 0, 182, 120, 402, 131, 440,
	470, 460, 419, 452, 387, 396, 110, 394, 168, 155,
	194, 428, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	391, 446, 448, 377, 436, 367, 398, 441, 399, 420,
	382, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 381, 455, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 435, 169, 107, 195, 175, 376, 380, 374, 375,
	424, 425, 464, 465, 466, 444, 371, 0, 378, 379,
	0, 450, 125, 427, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 404, 356, 407, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 170, 411, 0, 104,
	459, 449, 0, 414, 461, 385, 403, 469, 405, 406,
	438, 365, 423, 154, 400, 383, 92, 388, 358, 395,
	359, 386, 416, 116, 384, 451, 426, 130, 467, 133,
	431, 0, 176, 142, 0, 0, 418, 453, 421, 445,
	413, 439, 373, 430, 462, 401, 434, 463, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 433, 458, 397, 471, 437, 357, 432, 0,
	363, 366, 468, 456, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 417, 422, 442, 410, 0, 0, 0,
	0, 0, 0, 0, 0, 389, 0, 429, 0, 0,
	0, 370, 364, 0, 415, 0, 0, 0, 372, 0,
	390, 443, 0, 354, 447, 454, 412, 203, 457, 409,
	408, 161, 0, 108, 0, 182, 120, 402, 131, 440,
	470, 460, 419, 452, 387, 396, 110, 394, 168, 155,
	194, 428, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	391, 446, 448, 377, 436, 367, 398, 441, 399, 420,
	382, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 381, 455, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 435, 169, 107, 195, 175, 376, 380, 374, 375,
	424, 425, 464, 465, 466, 444, 371, 0, 378, 379,
	0, 450, 125, 427, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 404, 356, 407, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 170, 411, 0, 104,
	459, 449, 0, 414, 461, 385, 403, 469, 405, 406,
	438, 365, 423, 154, 400, 383, 92, 388, 358, 395,
	359, 386, 416, 116, 384, 451, 426, 130, 467, 133,
	431, 0, 176, 142, 0, 0, 418, 453, 421, 445,
	413, 439, 373, 430, 462, 401, 434, 463, 0, 0,
	0, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 433, 458, 397, 471, 437, 357, 432, 0,
	363, 366, 468, 456, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 417, 422, 442, 410, 0, 0, 0,
	0, 0, 0, 0, 0, 389, 0, 429, 0, 0,
	0, 370, 364, 0, 415, 0, 0, 0, 372, 0,
	390, 443, 0, 354, 447, 454, 412, 203, 457, 409,
	408, 161, 0, 108, 0, 182, 120, 402, 131, 440,
	470, 460, 419, 452, 387, 396, 110, 394, 168, 155,
	194, 428, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	391, 446, 448, 377, 436, 367, 398, 441, 399, 420,
	382, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 350, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 381, 455, 206, 207, 208, 209,
	0, 0, 0, 351, 349, 124, 173, 128, 135, 164,
	212, 435, 169, 107, 195, 175, 376, 380, 374, 375,
	424, 425, 464, 465, 466, 444, 371, 0, 378, 379,
	0, 450, 125, 427, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 404, 356, 407, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 170, 411, 0, 104,
	459, 449, 0, 414, 461, 385, 403, 469, 405, 406,
	438, 365, 423, 154, 400, 383, 92, 388, 358, 395,
	359, 386, 416, 116, 384, 451, 426, 130, 467, 133,
	431, 0, 176, 142, 0, 0, 418, 453, 421, 445,
	413, 439, 373, 430, 462, 401, 434, 463, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 433, 458, 397, 471, 437, 357, 432, 0,
	363, 366, 468, 456, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 417, 422, 442, 410, 0, 0, 0,
	0, 0, 0, 0, 0, 389, 0, 429, 0, 0,
	0, 370, 364, 0, 415, 0, 0, 0, 372, 0,
	390, 443, 0, 354, 447, 454, 412, 203, 457, 409,
	408, 161, 0, 108, 0, 182, 120, 402, 131, 440,
	470, 460, 419, 452, 387, 396, 110, 394, 168, 155,
	194, 428, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	391, 446, 448, 377, 436, 367, 398, 441, 399, 420,
	382, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 381, 455, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 435, 169, 107, 195, 175, 376, 380, 374, 375,
	424, 425, 464, 465, 466, 444, 371, 0, 378, 379,
	0, 450, 125, 427, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 404, 356, 407, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 170, 411, 0, 104,
	459, 449, 0, 414, 461, 385, 403, 469, 405, 406,
	438, 365, 423, 154, 400, 383, 92, 388, 358, 395,
	359, 386, 416, 116, 384, 451, 426, 130, 467, 133,
	431, 0, 176, 142, 0, 0, 418, 453, 421, 445,
	413, 439, 373, 430, 462, 401, 434, 463, 0, 0,
	0, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 433, 458, 397, 471, 437, 357, 432, 0,
	363, 366, 468, 456, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 417, 422, 442, 410, 0, 0, 0,
	0, 0, 0, 0, 0, 389, 0, 429, 0, 0,
	0, 370, 364, 0, 415, 0, 0, 0, 372, 0,
	390, 443, 0, 354, 447, 454, 412, 203, 457, 409,
	408, 161, 0, 108, 0, 182, 120, 402, 131, 440,
	470, 460, 419, 452, 387, 396, 110, 394, 168, 155,
	194, 428, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	391, 446, 448, 377, 436, 367, 398, 441, 399, 420,
	382, 93, 183, 671, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 350, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 381, 455, 206, 207, 208, 209,
	0, 0, 0, 351, 349, 124, 173, 128, 135, 164,
	212, 435, 169, 107, 195, 175, 376, 380, 374, 375,
	424, 425, 464, 465, 466, 444, 371, 0, 378, 379,
	0, 450, 125, 427, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 404, 356, 407, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 170, 411, 0, 104,
	459, 449, 0, 414, 461, 385, 403, 469, 405, 406,
	438, 365, 423, 154, 400, 383, 92, 388, 358, 395,
	359, 386, 416, 116, 384, 451, 426, 130, 467, 133,
	431, 0, 176, 142, 0, 0, 418, 453, 421, 445,
	413, 439, 373, 430, 462, 401, 434, 463, 0, 0,
	0, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 433, 458, 397, 471, 437, 357, 432, 0,
	363, 366, 468, 456, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 417, 422, 442, 410, 0, 0, 0,
	0, 0, 0, 0, 0, 389, 0, 429, 0, 0,
	0, 370, 364, 0, 415, 0, 0, 0, 372, 0,
	390, 443, 0, 354, 447, 454, 412, 203, 457, 409,
	408, 161, 0, 108, 0, 182, 120, 402, 131, 440,
	470, 460, 419, 452, 387, 396, 110, 394, 168, 155,
	194, 428, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	391, 446, 448, 377, 436, 367, 398, 441, 399, 420,
	382, 93, 183, 341, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 350, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 381, 455, 206, 207, 208, 209,
	0, 0, 0, 351, 349, 344, 343, 128, 135, 164,
	212, 435, 169, 107, 195, 175, 376, 380, 374, 375,
	424, 425, 464, 465, 466, 444, 371, 0, 378, 379,
	0, 450, 125, 427, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 404, 356, 407, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 170, 411, 154, 104,
	0, 92, 0, 0, 274, 0, 0, 0, 116, 271,
	0, 0, 130, 313, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 304, 305, 0, 0, 0, 0, 0,
	0, 907, 0, 50, 0, 0, 272, 292, 291, 294,
	295, 296, 297, 0, 0, 105, 293, 298, 299, 300,
	908, 0, 0, 269, 285, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 0, 0,
	0, 0, 325, 0, 284, 0, 0, 280, 281, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 323, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 314, 324, 320, 321, 318, 319, 317, 316, 315,
	326, 306, 307, 308, 309, 311, 0, 125, 310, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 92,
	843, 170, 274, 322, 104, 0, 116, 271, 0, 0,
	130, 313, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 272, 292, 291, 294, 295, 296,
	297, 0, 0, 105, 293, 298, 299, 300, 0, 0,
	0, 269, 285, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 265, 0, 0, 0,
	325, 0, 284, 0, 0, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 323, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 314,
	324, 320, 321, 318, 319, 317, 316, 315, 326, 306,
	307, 308, 309, 311, 0, 125, 310, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 92, 0, 170,
	274, 322, 104, 0, 116, 271, 0, 0, 130, 313,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 304,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 521, 272, 292, 291, 294, 295, 296, 297, 0,
	0, 105, 293, 298, 299, 300, 0, 0, 0, 269,
	285, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 283, 0, 0, 0, 0, 325, 0,
	284, 0, 0, 280, 281, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 323, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 314, 324, 320,
	321, 318, 319, 317, 316, 315, 326, 306, 307, 308,
	309, 311, 0, 125, 310, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 92, 0, 170, 274, 322,
	104, 0, 116, 271, 0, 0, 130, 313, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 292, 291, 294, 295, 296, 297, 0, 0, 105,
	293, 298, 299, 300, 0, 0, 0, 269, 285, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 265, 0, 0, 0, 325, 0, 284, 0,
	0, 280, 281, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 323,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 314, 324, 320, 321, 318,
	319, 317, 316, 315, 326, 306, 307, 308, 309, 311,
	0, 125, 310, 91, 99, 132, 210, 211, 23, 163,
	118, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 92, 0, 170, 274, 322, 104, 0,
	116, 271, 0, 0, 130, 313, 133, 0, 0, 176,
	142, 0, 0, 0, 0, 304, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 292,
	291, 294, 295, 296, 297, 0, 0, 105, 293, 298,
	299, 300, 0, 0, 0, 269, 285, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	0, 0, 0, 0, 325, 0, 284, 0, 0, 280,
	281, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 323, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 214, 215,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 0, 169,
	107, 195, 175, 314, 324, 320, 321, 318, 319, 317,
	316, 315, 326, 306, 307, 308, 309, 311, 0, 125,
	310, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 92, 0, 170, 274, 322, 104, 0, 116, 271,
	0, 0, 130, 313, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 304, 305, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 272, 292, 291, 294,
	295, 296, 297, 0, 0, 105, 293, 298, 299, 300,
	0, 0, 0, 269, 285, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 0, 0,
	0, 0, 325, 0, 284, 0, 0, 280, 281, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 323, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 314, 324, 320, 321, 318, 319, 317, 316, 315,
	326, 306, 307, 308, 309, 311, 0, 125, 310, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 0,
	0, 0, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 170, 116, 322, 104, 0, 130, 313, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 292, 291, 294, 295, 296, 297, 0, 0, 105,
	293, 298, 299, 300, 0, 0, 0, 0, 285, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 0, 0, 0, 0, 325, 0, 284, 0,
	0, 280, 281, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 323,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	1775, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 314, 324, 320, 321, 318,
	319, 317, 316, 315, 326, 306, 307, 308, 309, 311,
	0, 125, 310, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 0, 0, 0, 154, 0, 0, 92,
	0, 0, 274, 0, 0, 170, 116, 322, 104, 0,
	130, 313, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 272, 292, 291, 294, 295, 296,
	297, 0, 0, 105, 293, 298, 299, 300, 0, 0,
	0, 0, 285, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 0, 0, 0, 0,
	325, 0, 284, 0, 0, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 323, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 314,
	324, 320, 321, 318, 319, 317, 316, 315, 326, 306,
	307, 308, 309, 311, 0, 125, 310, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 0, 0, 0, 0,
	154, 0, 0, 92, 0, 0, 0, 0, 0, 170,
	116, 322, 104, 0, 130, 313, 133, 0, 0, 176,
	142, 0, 0, 0, 0, 304, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 292,
	291, 294, 295, 296, 297, 0, 0, 105, 293, 298,
	299, 300, 0, 0, 0, 0, 285, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	0, 0, 0, 0, 325, 0, 284, 0, 0, 280,
	281, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 323, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 214, 215,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 0, 169,
	107, 195, 175, 314, 324, 320, 321, 318, 319, 317,
	316, 315, 326, 306, 307, 308, 309, 311, 0, 125,
	310, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	0, 0, 0, 0, 154, 0, 0, 92, 0, 543,
	0, 0, 0, 170, 116, 322, 104, 0, 130, 0,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 0, 545, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 540, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 0, 154, 0, 0, 92, 0,
	660, 0, 0, 0, 0, 116, 0, 170, 0, 130,
	104, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 662, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 23, 163, 118, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 92, 0, 170, 0,
	0, 104, 0, 116, 0, 0, 0, 130, 0, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 168, 155,
	194, 0, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 23,
	163, 118, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 92, 0, 170, 0, 0, 104,
	0, 116, 0, 0, 0, 130, 0, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 0, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 0, 793, 0, 0, 794, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 154, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 680, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 352, 0, 679, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 168, 155,
	194, 0, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 154, 0, 0, 92, 0, 660,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 662, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 658, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 0, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 116, 0, 170, 0, 130,
	104, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 1405, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 0, 154, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 116, 0, 170, 0,
	130, 104, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 0, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 1741, 116, 0, 170,
	0, 130, 104, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 1296, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 0, 169, 107, 195, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 0, 154, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 116, 0,
	170, 0, 130, 104, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 116,
	0, 170, 0, 130, 104, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 662,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	154, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	116, 0, 170, 0, 130, 104, 133, 0, 0, 176,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 352, 0,
	545, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 214, 215,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 0, 169,
	107, 195, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	0, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 753,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 0, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 638, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 336, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 92, 0, 0, 170, 0, 0, 104, 116,
	0, 0, 0, 130, 0, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	154, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	116, 0, 170, 0, 130, 104, 133, 0, 0, 176,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 0, 203, 0, 0, 0, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 214, 215,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 0, 169,
	107, 195, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	0, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 0, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 154, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 0, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 168, 155,
	194, 0, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 104,
}

var yyPact = [...]int{
	2845, -1000, -215, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1371, 1415, -1000, -1000, -1000, -1000, -1000, -1000, 1205,
	407, 371, 432, 115, 14462, 428, 2057, 15044, -1000, 152,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1136, -1000, -1000,
	-1000, -1000, -1000, 1341, 1372, 1192, 1339, 1251, -1000, 8014,
	363, 12710, 14171, 6815, -1000, 984, -201, 391, 14753, 357,
	357, 14753, 14753, 357, -1000, -64, 413, 15044, -1000, 15044,
	355, 982, 355, 355, 355, 15044, -1000, 462, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 15044, 980, 1291, 370, 4575, 4575, 4575,
	4575, 246, 4575, -25, 1212, -1000, -1000, -1000, -1000, 4575,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	808, 1295, 8610, 8610, 1371, -1000, 1136, -1000, -1000, -1000,
	1288, -1000, -1000, 615, 1402, -1000, 9786, 461, -1000, 8610,
	97, 1137, -1000, -1000, 1137, -1000, -1000, 442, -1000, -1000,
	9492, 9492, 9492, 9492, 9492, 9492, 9492, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1137, -1000, 8312, 1137, 1137, 1137, 1137, 1137, 1137,
	1137, 1137, 8610, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
	1137, 1137, 1882, 1137, 1137, 1137, 1137, 13874, 1073, 1172,
	-1000, -1000, -1000, 1329, 10673, 11546, 15044, 1024, -1000, 1140,
	6495, -13, -1000, -1000, -1000, 560, 11255, -1000, -1000, -1000,
	1290, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 971, -1000, 2601, 410, -1000, -1000, 15044, 1105,
	968, 586, 956, 1211, 335, 15044, -1000, 13583, 4575, 387,
	15044, 1324, 1210, 15044, 954, 936, -1000, 6175, -1000, 4575,
	4575, 4575, 4575, 4575, 4575, 4575, 4575, -1000, -1000, -1000,
	-1000, -1000, -1000, 4575, 4575, -1000, 44, -1000, 15044, -1000,
	-1000, -1000, -1000, 1410, 490, 818, 459, 1143, -1000, 785,
	1341, 808, 1251, 10964, 1081, -1000, -1000, 15044, -1000, 8610,
	8610, 765, -1000, 13292, -1000, -1000, 4895, 501, 9492, 739,
	517, 9492, 9492, 9492, 9492, 9492, 9492, 9492, 9492, 9492,
	9492, 9492, 9492, 9492, 9492, 9492, 784, 1882, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 933, -1000, 1136, 1079,
	1079, 8, 8, 8, 8, 8, 8, 3280, 7418, 808,
	966, 525, 8312, 8014, 8014, 8610, 8610, 15335, 15335, 8014,
	1331, 570, 525, 15335, -1000, 808, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 68, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 8014, 8014, 8014, 8014, 283, 15044, -1000,
	15335, 12710, 12710, 12710, 12710, 12710, -1000, 1246, 1240, -1000,
	1226, 1223, 1230, 15044, -1000, 930, 10673, 475, 1137, -1000,
	13001, -1000, -1000, 283, 1038, 12710, 15044, -1000, -1000, 5855,
	1140, -13, 1134, -1000, -41, -11, 7120, 480, -1000, -1000,
	-1000, -1000, 3935, 734, 326, -103, 28, -1000, -1000, -1000,
	-1000, 1178, -1000, 1178, 256, 1178, 1178, 1178, -1000, 1178,
	1178, 63, 63, 63, 63, 63, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1204, 1202, -1000, 1178, 1178, 1178, -1000,
	1178, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1191, 292, 1191, 1180, 1180, -1000, -1000, 14753, 1328,
	-129, 910, 4575, 1321, 4575, 15044, 1388, 15044, -1000, -1000,
	-1000, -1000, 1910, 15044, -1000, 15044, -1000, -1000, 15044, 4575,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 565, -1000, -1000, -1000, -1000,
	1272, 8610, 8610, 5535, 8610, -1000, -1000, -1000, 1295, -1000,
	1331, 1370, -1000, 1279, 1278, 8014, -1000, -1000, 501, 521,
	-1000, -1000, 640, -1000, -1000, -1000, -1000, 458, 1137, -1000,
	1274, -1000, -1000, -1000, -1000, 739, 9492, 9492, 9492, 1069,
	1274, 1419, 174, 62, 8, 281, 281, 9, 9, 9,
	9, 9, 368, 368, -1000, -1000, -1000, -1000, 808, -1000,
	-1000, -1000, 808, 8014, 1139, -1000, -1000, 8610, -1000, 808,
	926, 926, 701, 807, 1122, -1000, 457, 1119, 926, 8014,
	574, -1000, 8610, 808, -1000, -1000, 926, 808, 926, 926,
	981, 1137, -1000, 1141, -1000, 553, 1172, 1201, 1209, 952,
	-1000, -1000, -1000, -1000, 1236, -1000, 1229, -1000, -1000, -1000,
	-1000, -1000, 409, 408, 399, 14753, -1000, 1381, 12710, 1093,
	-1000, -1000, 1134, -13, -17, -1000, -1000, -1000, -1000, 525,
	-1000, -1000, 891, 1133, 3615, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1198, 715, 14753, 301, 323, 429, 425,
	877, -1000, -1000, -1000, 669, -1000, 14753, 1407, -1000, -1000,
	300, -1000, 299, 582, 803, 15044, 129, 1197, 1942, -1000,
	-220, -1000, 10, -1000, -1000, 790, 63, 63, 1178, 63,
	63, 63, -1000, -1000, 480, 1289, 480, 480, 480, 480,
	795, 795, -101, -101, -1000, -1000, -1000, 763, 1191, -1000,
	-1000, -1000, 758, -1000, 1196, 1136, -1000, 5215, -1000, -1000,
	-1000, -1000, -1000, 1327, 1040, -1000, -1000, -1000, -1000, 338,
	-1000, 787, 2390, 419, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 280, 421, -1000, 4575, -1000,
	571, 15044, 15044, 1263, 525, 525, 453, -1000, -1000, 15044,
	-1000, -1000, -1000, -1000, 1090, -1000, -1000, -1000, 4255, 8014,
	-1000, 1069, 1274, 150, -1000, 9492, 9492, -1000, -1000, 926,
	8014, 525, -1000, -1000, -1000, 2028, 784, 2028, 9492, 9492,
	5535, 9492, 9492, -80, 1071, 522, -1000, 8610, 552, -1000,
	-1000, -1000, -1000, -1000, 1208, 15335, 1137, -1000, 10375, 14753,
	1371, 15335, 8610, 8610, -1000, -1000, 8610, 1190, -1000, 8610,
	-1000, -1000, -1000, 1137, 1137, 1137, 899, -1000, 1371, 1093,
	-1000, -1000, -1000, -47, -40, -1000, -1000, 3935, -1000, 3935,
	12419, -1000, 1401, 1364, 329, 351, -1000, 868, 860, -1000,
	821, -1000, -12, -1000, -193, 80, 29, -1000, -1000, 1137,
	-1000, 1189, 1326, -1000, 1293, 755, -1000, 760, -207, -1000,
	-1000, -1000, -1000, -1000, -1000, 1137, 1188, 1186, -1000, 1182,
	-1000, -1000, -1000, 1019, 480, 480, 63, 480, 480, 480,
	-1000, 518, -1000, -1000, -1000, -1000, 924, -1000, 921, -1000,
	119, 104, -1000, 1132, -1000, 909, 15044, 14753, -1000, 1120,
	-1000, 550, 1360, 233, 15044, 1388, 1388, -1000, 319, -1000,
	14753, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14753,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15044, -1000, -1000, -1000, -1000, -1000, 14753, 330, -1000,
	-1000, 794, 8610, -1000, -1000, -1000, 5215, -1000, 1381, 12710,
	-1000, -1000, 808, -1000, 9492, 1274, 1274, -1000, -1000, 808,
	1178, 1178, -1000, 1178, 1180, -1000, -1000, 1178, 142, 1178,
	141, 808, 808, 200, 315, -1000, 112, 272, 1137, -71,
	-1000, 525, 8610, -1000, 1296, 1034, 1072, -1000, -1000, 7716,
	808, 903, 451, 899, 1341, -1000, 525, 525, 525, 11837,
	525, 11837, 11837, 11837, 10077, 14753, 1341, -1000, -1000, -1000,
	-1000, 3615, -1000, 895, -1000, 1178, 1178, 359, 359, -194,
	297, 296, -1000, -1000, -1000, -1000, -201, -1000, -1000, 582,
	-1000, 8610, 11837, 94, -1000, 1104, 1018, 1979, -1000, 179,
	808, -1000, 776, -1000, 748, 1017, -1000, -1000, -1000, 480,
	-1000, -1000, -1000, -1000, -1000, 63, 788, 63, 25, 1,
	747, -1000, 745, 1103, 1203, 5215, 3935, 360, 1333, -1000,
	-1000, 1345, -1000, 1044, 14753, -1000, -1000, -1000, 1176, -1000,
	-1000, -1000, -1000, 1309, 14753, -1000, -1000, 525, 1378, 1075,
	-1000, 1274, -1000, -1000, 232, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 9492, 9492, -1000, 9492, 9492, 9492,
	808, 786, 525, 295, -1000, 1137, -1000, -1000, 1064, 14753,
	14753, -1000, -1000, 890, -1000, -1000, 887, 887, 887, 475,
	-1000, -1000, 629, 12419, 1308, -1000, 654, -1000, -1000, 596,
	190, 631, -1000, 14753, -201, -1000, 1137, 548, 884, 1079,
	1173, 732, -1000, 995, 66, -101, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 480, -1000, 480, -1000, -1000, 991, 987,
	12419, 14753, 15044, -1000, -1000, 14753, -1000, -1000, -1000, -1000,
	-1000, 201, 2454, 1171, 11837, 1137, 350, 1376, 1369, -1000,
	-1000, 224, 224, 224, 224, 40, -1000, -1000, 1406, -1000,
	1137, -1000, 1136, 439, -1000, 14753, -1000, -1000, -1000, -1000,
	-1000, 1174, 802, 121, -1000, 810, 547, 735, 546, 545,
	541, 536, 524, 520, 513, -1000, -1000, -1000, 1403, -1000,
	-1000, -1000, 1389, 1170, -1000, 1169, 8610, 237, -1000, 931,
	-1000, 904, 896, -1000, -1000, -1000, -1000, -1000, -1000, 875,
	1168, 1157, 993, -1000, 176, 2454, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1371, 14753, 14753, 14753, 14753,
	353, 9198, 9198, 12419, 873, 275, 294, -1000, 8610, 8610,
	-1000, -1000, -1000, -1000, 808, 172, -154, 15335, 1072, 808,
	14753, -1000, -1000, 14753, -1000, -152, 802, 14753, -1000, 719,
	-1000, -1000, 614, 712, 614, 614, 614, 614, 614, 359,
	359, 14753, 12419, 548, -1000, -76, -179, 386, -1000, -1000,
	-205, 12419, 12419, -127, 14753, 8610, 2454, -1000, 1341, 1070,
	2199, -1000, -1000, -1000, -1000, 14753, 1395, 1394, 1391, 1383,
	1807, 97, 163, 866, 1105, 850, -1000, 14753, 1149, 525,
	1053, -1000, 1262, -116, -157, 1052, -1000, -1000, 1137, 848,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 582, 582, 843, 839, -1000, -1000, -1000, -1000,
	157, 674, 704, 688, 657, 30, -1000, 1368, 1381, 1148,
	837, 831, -1000, -211, -1000, 525, -1000, 1295, 14753, 175,
	-1000, -1000, 1302, -1000, -1000, -1000, -1000, -1000, 2454, 2454,
	-1000, -129, -1000, 275, 1216, 12419, -1000, 1256, -1000, 14753,
	-1000, 802, -1000, -1000, 322, 629, 638, -1000, 637, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12128, 629, 11837, 1381,
	629, 8610, -1000, -1000, 2601, 1344, 14753, 2189, -1000, 2166,
	-1000, -1000, 249, 828, -149, 808, -1000, 15044, 1174, -1000,
	-1000, -1000, 418, 1174, 826, 629, -1000, 525, 1136, -1000,
	-1000, -1000, 554, 242, -1000, -155, -1000, 1146, -1000, 5215,
	-1000, -1000, -1000, -1000, 162, 1137, -158, 14753, -1000, 2454,
	8904, -1000, 820, 902, 224, 808, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1676, 5, 3, 1672, 1671, 1670, 1431, 1427, 1425,
	1422, 1667, 1666, 1665, 1664, 1663, 1662, 1661, 1660, 1659,
	1658, 1657, 1656, 1655, 1654, 1653, 1652, 1651, 333, 1650,
	1648, 1647, 97, 1646, 99, 1637, 1633, 70, 92, 60,
	65, 555, 1632, 49, 95, 98, 1630, 81, 1627, 1626,
	106, 1621, 96, 1620, 1609, 91, 1608, 1604, 29, 9,
	14, 41, 1601, 1600, 31, 499, 1598, 1595, 1594, 1591,
	1590, 1589, 85, 19, 27, 25, 34, 1587, 68, 17,
	1584, 82, 1583, 1580, 1577, 1576, 50, 1575, 84, 30,
	20, 23, 1573, 22, 1570, 88, 55, 42, 13, 108,
	93, 1569, 52, 87, 79, 1568, 1565, 787, 1560, 1557,
	1556, 1555, 1553, 1552, 685, 664, 1543, 1542, 1541, 67,
	0, 217, 10, 104, 1540, 66, 1538, 2006, 102, 89,
	45, 1537, 76, 1619, 57, 1536, 1535, 61, 103, 105,
	101, 100, 1534, 1533, 1532, 1531, 1529, 1209, 56, 71,
	48, 1528, 1527, 1526, 28, 90, 43, 94, 83, 1524,
	1523, 1510, 46, 1507, 16, 39, 7, 77, 1505, 1502,
	1498, 1496, 51, 40, 1495, 33, 32, 8, 2, 11,
	1493, 1490, 1489, 1, 1485, 36, 1484, 12, 1482, 24,
	1481, 1480, 1479, 1477, 1476, 1475, 1474, 1473, 1472, 1471,
	37, 21, 58, 44, 26, 75, 54, 1470, 47, 1469,
	4, 15, 18, 1468, 1467, 1455, 1450, 1643, 590, 1448,
	1437, 1436, 1434, 356,
}

var yyR1 = [...]int{
	0, 215, 216, 216, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 219,
	219, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 213, 213, 212, 214, 214, 12, 12, 12, 12,
	12, 207, 207, 207, 207, 207, 13, 13, 210, 210,
	14, 14, 100, 100, 104, 104, 104, 105, 105, 105,
	105, 135, 135, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 205, 205, 205, 206, 206, 206,
	208, 208, 209, 209, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 191, 191, 191, 192, 192, 192, 192,
	192, 192, 194, 194, 195, 195, 125, 125, 189, 189,
	188, 187, 187, 186, 186, 185, 196, 196, 20, 169,
	170, 170, 170, 170, 170, 158, 139, 139, 139, 139,
	139, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 202, 202, 202, 203, 203, 203, 203,
	203, 203, 203, 203, 198, 198, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	148, 148, 148, 148, 148, 148, 197, 197, 193, 193,
	193, 193, 193, 143, 143, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 142, 142, 142, 142, 142,
	142, 142, 142, 144, 144, 144, 144, 144, 144, 144,
	144, 140, 140, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 146, 146, 146, 146,
	146, 146, 146, 146, 157, 157, 147, 147, 155, 155,
	156, 156, 156, 154, 154, 154, 151, 151, 152, 152,
	153, 153, 153, 149, 149, 149, 150, 150, 150, 160,
	178, 178, 178, 180, 180, 181, 181, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 168, 168,
	204, 204, 177, 177, 177, 174, 174, 174, 174, 174,
	174, 174, 174, 167, 167, 176, 176, 175, 175, 162,
	162, 162, 162, 162, 163, 164, 164, 164, 164, 161,
	200, 200, 200, 201, 201, 165, 165, 166, 166, 171,
	171, 171, 172, 172, 172, 173, 173, 173, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 220, 220, 221, 221, 221, 221, 221, 221, 221,
	184, 182, 182, 183, 183, 17, 18, 18, 18, 18,
	18, 19, 19, 21, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 112, 112, 109,
	109, 110, 110, 111, 111, 111, 113, 113, 113, 136,
	136, 136, 23, 23, 25, 25, 26, 27, 24, 24,
	24, 24, 24, 222, 28, 29, 29, 30, 30, 30,
	34, 34, 34, 32, 32, 33, 33, 39, 39, 38,
	38, 40, 40, 40, 40, 124, 124, 124, 123, 123,
	42, 42, 43, 43, 44, 44, 45, 45, 45, 57,
	57, 93, 93, 93, 96, 96, 46, 46, 46, 46,
	47, 47, 48, 48, 49, 49, 131, 131, 130, 130,
	130, 129, 129, 51, 51, 51, 53, 52, 52, 52,
	52, 54, 54, 56, 56, 55, 55, 58, 58, 58,
	58, 59, 59, 94, 94, 41, 41, 41, 41, 41,
	41, 41, 108, 108, 61, 61, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 71, 71, 71, 71,
	71, 71, 62, 62, 62, 62, 62, 62, 62, 37,
	37, 72, 72, 72, 78, 73, 73, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 69,
	69, 69, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 223, 223, 70, 70,
	70, 70, 35, 35, 35, 35, 35, 134, 134, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 138, 138, 138, 138, 138, 138, 138,
	82, 82, 36, 36, 80, 80, 81, 83, 83, 79,
	79, 79, 64, 64, 64, 64, 64, 64, 64, 64,
	66, 66, 66, 84, 84, 85, 85, 86, 86, 87,
	87, 88, 89, 89, 89, 90, 90, 90, 90, 91,
	91, 91, 63, 63, 63, 63, 63, 63, 92, 92,
	92, 92, 97, 97, 74, 74, 76, 76, 75, 77,
	98, 98, 102, 99, 99, 103, 103, 103, 103, 101,
	101, 101, 126, 126, 126, 106, 106, 114, 114, 115,
	115, 107, 107, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 117, 117, 117, 118, 118, 121, 121,
	122, 122, 127, 127, 128, 128, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 217, 218, 132,
	133, 133, 133,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	5, 9, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 14, 13, 14, 6, 5, 5,
	5, 11, 11, 9, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 0, 2, 2, 0, 2, 2, 2,
	2, 2, 0, 2, 0, 3, 0, 1, 0, 2,
	1, 0, 2, 1, 3, 3, 0, 2, 4, 4,
	1, 3, 3, 3, 3, 2, 3, 1, 1, 1,
	1, 2, 2, 3, 2, 4, 4, 2, 2, 3,
	2, 3, 2, 7, 8, 3, 3, 6, 8, 5,
	8, 7, 4, 2, 4, 6, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 2, 0, 4, 3, 4,
	3, 3, 3, 3, 3, 3, 3, 2, 4, 6,
	2, 3, 2, 3, 1, 3, 0, 2, 0, 3,
	3, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 2, 2,
	2, 1, 1, 1, 3, 3, 2, 1, 2, 1,
	1, 1, 1, 4, 4, 4, 4, 4, 1, 5,
	2, 2, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 3, 3, 0, 1, 0, 1,
	0, 2, 1, 0, 3, 3, 0, 1, 2, 6,
	0, 1, 4, 1, 2, 1, 3, 2, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	1, 1, 0, 2, 5, 2, 3, 3, 2, 3,
	2, 3, 4, 1, 1, 1, 3, 3, 2, 2,
	5, 5, 8, 8, 13, 1, 1, 2, 2, 10,
	0, 1, 1, 0, 3, 0, 1, 1, 3, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 6, 11,
	13, 7, 7, 7, 12, 7, 7, 7, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 5, 4, 6, 5, 4,
	4, 3, 2, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 3, 3, 3, 3, 4, 3, 6, 4,
	2, 4, 2, 2, 2, 2, 3, 1, 1, 0,
	1, 0, 1, 0, 2, 2, 0, 2, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	7, 1, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 0, 4, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 3, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 6, 8, 8,
	6, 8, 8, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 1, 2, 1, 2,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}

var yyChk = [...]int{
	-1000, -215, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	113, 114, 116, 115, 145, 117, 138, 49, 186, 187,
	189, 190, 26, 139, 140, 143, 144, -217, 8, 290,
	53, -216, 325, -86, 15, -30, 5, -28, -222, -28,
	-28, -28, -28, -28, -169, 53, -125, -196, 153, 282,
	119, 134, 152, 120, 136, 71, -107, 122, 124, 120,
	120, 121, 122, 282, 119, 120, -55, -127, 56, -120,
	160, 299, 21, 186, 199, 200, 191, 232, 220, 300,
	158, 217, 221, 269, 324, 65, 189, 278, 128, 164,
	141, 212, 215, 214, 206, 203, 28, 238, 306, 205,
	131, 239, 243, 249, 270, 297, 196, 197, 272, 236,
	32, 133, 301, 34, 149, 273, 241, 235, 230, 234,
	195, 229, 38, 209, 245, 244, 246, 268, 223, 159,
	248, 225, 207, 224, 18, 144, 147, 240, 242, 204,
	161, 126, 151, 305, 274, 202, 148, 162, 143, 277,
	321, 157, 190, 271, 198, 280, 37, 254, 216, 193,
	208, 194, 130, 187, 155, 227, 150, 210, 211, 233,
	192, 228, 188, 152, 145, 279, 255, 307, 226, 222,
	218, 219, 156, 122, 153, 154, 261, 262, 263, 264,
	302, 303, 275, 213, 256, 257, 166, 167, 168, 169,
	170, 171, 172, 120, 107, 221, 113, 259, 121, 32,
	151, -136, 120, -109, 154, 261, 262, 263, 264, 56,
	271, 270, 265, -127, 188, -132, -132, -132, -132, -132,
	-2, -90, 17, 16, -5, -3, -217, 6, 21, 22,
	-34, 39, 40, -29, -40, 98, -41, -127, -60, 73,
	-65, 29, 56, -120, 24, -64, -61, -79, -77, -78,
	107, 108, 96, 97, 104, 74, 109, -69, -67, -68,
	-70, 58, 57, 66, 59, 60, 61, 62, 67, 68,
	69, -121, -75, -217, 43, 44, 291, 292, 293, 294,
	298, 295, 76, 33, 281, 289, 288, 287, 285, 286,
	283, 284, 323, 125, 282, 102, 290, -107, -43, -44,
	-45, -46, -57, -78, -217, -55, 11, -50, -55, -99,
	-135, 188, -103, 271, 270, -122, -101, -121, -119, 269,
	221, 268, 56, -120, 118, 174, 310, 72, 23, 25,
	252, 258, 173, 75, 107, 16, 76, 180, 319, 320,
	106, 291, 113, 47, 283, 284, 281, 178, 293, 294,
	282, 259, 185, 20, 29, 10, 26, 139, 22, 100,
	115, 175, 79, 80, 142, 24, 140, 69, 181, 183,
	19, 50, 132, 11, 309, 13, 14, 311, 125, 124,
	91, 322, 121, 45, 8, 109, 27, 88, 41, 137,
	184, 43, 89, 17, 285, 286, 31, 298, 146, 102,
	48, 35, 73, 67, 51, 276, 179, 71, 15, 46,
	134, 182, 90, 116, 290, 44, 176, 119, 177, 6,
	296, 30, 138, 42, 120, 260, 78, 123, 68, 5,
	136, 9, 49, 52, 287, 288, 289, 33, 77, 12,
	135, 70, -170, -158, 56, -200, 319, 320, 122, -121,
	-115, 125, -115, -121, -121, -115, 290, 120, -55, -55,
	-114, 125, 56, -114, -114, -114, -55, 110, -55, 56,
	30, 282, 56, 151, 120, 152, 122, -133, -217, -122,
	-133, -133, -133, 155, 156, -133, -110, 266, 51, -133,
	-218, 55, -91, 19, 31, -41, -127, -87, -88, -41,
	-86, -2, -28, 35, -32, 22, 64, 11, -124, 72,
	71, 88, -123, 23, -121, 58, 110, -41, -62, 91,
	73, 89, 90, 75, 93, 92, 103, 96, 97, 98,
	99, 100, 101, 102, 94, 95, 106, 323, 81, 82,
	83, 84, 85, 86, 87, -108, -217, -78, -217, 111,
	112, -65, -65, -65, -65, -65, -65, -65, -217, -2,
	-73, -41, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -82, -41, -217, -223, -217, -223, -223, -223, -223,
	-223, -223, -223, -138, 107, 221, 141, 212, -141, -140,
	227, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 220, 300, -217, -217, -217, -217, -56, 27, -55,
	30, 54, -51, -53, -52, -54, 41, 45, 47, 42,
	43, 44, 48, -131, 23, -43, -217, -130, 147, -129,
	23, -127, 58, -55, -50, -219, 54, 11, 52, 54,
	-99, 188, -100, -104, 272, 274, 81, -126, -121, 58,
	29, 30, 55, 54, -159, -139, -143, -140, -145, -144,
	-146, -141, -142, 217, 221, 218, 223, 224, 225, 107,
	222, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	236, 237, 226, 238, 30, 141, 210, 211, 212, 215,
	214, 216, 213, 239, 240, 241, 242, 243, 244, 245,
	246, 202, 203, 205, 206, 207, 209, 208, 121, -55,
	-189, 52, 56, 73, 56, 51, -205, 51, 19, 173,
	174, -55, -55, 276, -133, 123, -55, 24, 51, -55,
	56, 56, -128, -127, -119, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -112, 260, 267, -55, 9,
	91, 54, 18, 110, 54, -89, 25, 26, -90, -218,
	-34, -66, -121, 59, 62, -33, 42, -55, -41, -41,
	-71, 67, 73, 68, 69, -123, 98, -128, -122, -119,
	-65, -72, -75, -78, 63, 91, 89, 90, 75, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -134, 56, 58, -138, 56, -64,
	-64, -121, -39, 22, -38, -40, -218, 54, -218, -2,
	-38, -38, -41, -41, -79, -121, -127, -79, -38, -32,
	-80, -81, 77, -79, -218, 219, -38, -39, -38, -38,
	-95, 147, -55, -98, -102, -79, -44, -45, -45, -44,
	-45, 41, 41, 41, 46, 41, 46, 41, -52, -127,
	-218, -58, 49, 124, 50, -217, -129, -95, 52, -43,
	-55, -103, -100, 54, 273, 275, 276, 51, 70, -41,
	-150, 107, 106, -171, -172, -173, -122, 58, 59, -158,
	-160, -162, -161, -174, -163, 128, 126, 130, 131, 136,
	-167, 121, 137, 67, 73, -202, 128, 51, 252, 258,
	126, 137, 136, 324, 65, 129, 309, 311, 29, -153,
	326, 247, -151, 255, -147, 53, -147, -147, 219, -147,
	-147, -147, -147, -147, -149, 221, -149, -149, -149, -149,
	53, 53, -147, -147, -147, -147, -155, 53, 204, -155,
	-155, -156, 53, -156, -121, 23, -187, 302, -188, 56,
	-133, 24, -133, -55, -208, -206, 8, 9, 10, -55,
	-116, 118, 115, 116, -184, 114, 252, 221, 65, 29,
	15, 291, 147, 307, 56, 148, -55, -55, -55, -133,
	-111, 11, 91, 37, -41, -41, -128, -88, -91, -106,
	19, 11, 33, 33, -38, 67, 68, 69, 110, -217,
	-72, -65, -65, -65, -37, 142, 72, -218, -218, -38,
	54, -41, -218, -218, -218, 54, 52, 23, 54, 11,
	110, 54, 11, -218, -38, -83, -81, 79, -41, -218,
	-218, -218, -218, -218, -63, 30, 33, -2, -217, -217,
	-59, 54, 12, 81, -48, -47, 51, 52, -49, 51,
	-47, 41, 41, 121, 121, 121, -96, -121, -59, -43,
	-59, -104, -105, 277, 274, 280, 56, 54, -173, 81,
	53, -201, 51, 73, -165, -121, 137, -167, -167, 56,
	-167, 56, 56, 67, 19, -121, 9, 137, 137, -201,
	58, -127, -198, 310, 16, 53, -203, 53, 58, 59,
	60, 67, -148, 66, -61, 248, 281, 284, 283, 249,
	327, -152, 256, 59, -149, -149, -147, -149, -149, -149,
	-150, 30, -150, -150, -150, -150, -157, 58, -157, -154,
	302, 303, -154, 59, -155, 59, 51, 52, -2, -186,
	-185, -122, -191, 23, 51, 54, -205, -132, -125, -221,
	153, 127, 132, 131, 56, 126, 130, 147, -190, 153,
	127, 128, 132, 131, 56, 121, 137, 126, 130, 147,
	136, -117, -118, 123, 23, 121, 137, 147, 118, -133,
	-113, 89, 12, -127, -127, 38, 110, -55, -42, 11,
	98, -122, -39, -37, 72, -65, -65, -218, -40, -137,
	107, 217, 141, 212, 206, 236, 237, 223, 254, 210,
	255, -134, -137, -65, -65, -122, -65, -65, 299, -86,
	80, -41, 78, -97, 51, -98, -74, -76, -75, -217,
	-2, -92, -121, -96, -86, -102, -41, -41, -41, 53,
	-41, -217, -217, -217, -218, 54, -86, -59, 274, 278,
	279, -172, -173, -176, -175, -121, 137, 10, 9, 19,
	132, 126, 56, 56, 56, -200, 136, 321, -202, 324,
	-148, -217, 53, 23, 29, 59, -203, 53, -193, 323,
	-217, -147, 53, -147, 53, 53, 55, -150, -150, -149,
	-150, -150, -150, 56, 107, 55, 54, 55, 210, 210,
	54, 55, 54, -55, -121, 54, 81, -192, 19, 161,
	162, -55, -206, -208, -220, 121, 137, -132, -121, -132,
	-121, -55, -132, -121, 128, -162, 58, -41, -59, -43,
	-218, -65, -218, -147, -147, -147, -156, -147, 197, -147,
	197, -218, -218, -218, 54, 19, -218, 54, 19, -217,
	-36, 296, -41, 28, -97, 54, -218, -218, -218, 54,
	110, -218, -90, -93, -121, 137, -93, -93, -93, -130,
	-121, -90, 55, 54, -147, -147, -164, 157, 158, 30,
	159, -164, 321, 137, 137, -200, -201, -41, -93, 53,
	311, 54, 55, -203, 221, 211, 250, 227, -218, 55,
	55, 55, -150, -149, 58, -149, 257, 257, 59, 59,
	53, 52, 51, -185, -173, 123, 21, 6, 8, 9,
	10, 19, 23, -121, 53, 27, -121, -84, 13, -149,
	56, -65, -65, -65, -65, -65, -218, 58, 137, -76,
	33, -2, -217, -121, -121, 54, 55, -218, -218, -218,
	-58, -178, -180, 302, -179, 52, 133, 65, 166, 167,
	168, 169, 170, 171, 172, -175, -89, -201, 51, 67,
	160, -201, 51, -165, -121, -200, -217, -218, 55, -64,
	53, 59, 55, 219, -154, -150, -150, 55, 55, -176,
	-121, -55, -166, -121, 175, -209, -211, -7, -9, -8,
	-11, -10, -12, -13, -14, -3, 20, 179, 180, 185,
	181, 135, 125, 53, -93, -217, 126, -85, 14, 16,
	-218, -218, -218, -218, -35, 91, 302, 9, -74, -2,
	110, -121, -177, 51, -179, 302, 53, 304, 56, -168,
	81, 58, 81, 81, 81, 81, 81, 81, 81, 9,
	10, 53, 53, -41, -197, 159, 55, -199, 55, 55,
	55, 53, 53, -194, 54, 52, 176, -211, -86, -213,
	-121, -212, -121, -121, -121, -207, 35, 182, 183, 184,
	-60, -65, -60, -176, 55, -182, -183, 147, 137, -41,
	-73, -218, 300, 48, 305, -98, -218, -121, -121, -181,
	-179, -121, 59, -204, 51, 70, 59, -204, -204, -204,
	-204, -204, -164, -164, -166, -176, -218, 297, 308, 55,
	187, 313, 314, 146, 315, 159, 316, 317, -94, 322,
	-176, -176, -195, 302, -121, -41, -211, -90, 54, -214,
	-139, 177, -121, 11, 11, 11, 11, -211, 186, 186,
	55, -189, -218, 54, -121, 53, 38, 301, 306, -217,
	55, 54, -201, -201, 55, 55, 302, 59, 16, 59,
	59, 59, 59, 314, 146, 316, 16, -59, 53, 55,
	55, 324, -91, -212, -121, 178, 27, -210, -211, -210,
	-187, -183, 33, -176, 38, -121, -179, 129, -178, 59,
	59, 318, -127, -178, -93, -59, -178, -41, 19, -121,
	80, -211, 80, 149, 55, 302, -218, -55, -177, 110,
	-177, 55, -178, -2, 79, 150, 305, 53, -122, 186,
	-217, 306, -166, -210, -65, 146, 55, 80, -218, -218,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 707, 0, 463, 463, 463, 463, 463, 463, 0,
	-2, 761, 0, 0, 0, 0, -2, 453, 454, 0,
	456, 457, 1039, 1039, 1039, 1039, 1039, 0, 33, 34,
	1037, 1, 3, 715, 0, 0, 467, 470, 465, 0,
	761, 0, 0, 0, 83, 0, 350, 0, 0, 759,
	759, 0, 0, 759, 127, 0, 0, 0, 762, 0,
	757, 0, 757, 757, 757, 0, 412, 535, 782, 783,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 0, 0, 0, 0, 1040, 1040, 1040,
	1040, 0, 1040, 441, 430, 432, 433, 434, 435, 1040,
	450, 451, 440, 452, 455, 458, 459, 460, 461, 462,
	27, 719, 0, 0, 707, 29, 0, 463, 468, 469,
	473, 471, 472, 464, 0, 481, 485, 0, 545, 0,
	550, 552, -2, -2, 0, 587, 588, 589, 590, 591,
	0, 0, 0, 0, 0, 0, 0, 615, 616, 617,
	618, 692, 693, 694, 695, 696, 697, 698, 699, 554,
	555, 689, 739, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 680, 0, 646, 646, 646, 646, 646, 646,
	646, 646, 0, 0, 0, 0, 0, 0, 0, 492,
	494, 495, 496, 516, 0, 518, 0, 0, 41, 45,
	0, 1006, 743, -2, -2, 0, 0, 780, 781, -2,
	916, -2, 778, 779, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 0, 140, 0, 0, 351, 352, 0, 128,
	0, 0, 0, 0, 0, 0, 137, 0, 1040, 0,
	0, 0, 0, 0, 0, 0, 411, 0, 413, 1040,
	1040, 1040, 1040, 1040, 1040, 1040, 1040, 422, 1041, 1042,
	423, 424, 425, 1040, 1040, 427, 0, 442, 0, 436,
	28, 1038, 22, 0, 0, 716, 0, 708, 709, 712,
	715, 27, 470, 0, 475, 474, 466, 0, 482, 0,
	0, 0, 486, 0, 488, 489, 0, 548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 572, 573,
	574, 575, 576, 577, 578, 551, 0, 565, 0, 0,
	0, 607, 608, 609, 610, 611, 612, 0, 477, 27,
	0, 585, 0, 0, 0, 0, 0, 0, 0, 0,
	473, 0, 681, 0, 637, 0, 638, 639, 640, 641,
	642, 643, 644, 645, 673, 0, 675, 676, 677, 678,
	679, 215, 216, 217, 218, 219, 220, 221, 222, 223,
	224, 241, 242, 0, 477, 0, 0, 43, 0, 534,
	0, 0, 0, 0, 0, 0, 523, 0, 0, 526,
	0, 0, 0, 0, 517, 0, 0, 537, 970, 519,
	0, 521, 522, -2, 0, 0, 0, 39, 40, 0,
	46, 1006, 48, 72, 0, 0, 0, 296, 752, 753,
	754, 750, 359, 0, 145, 290, 286, 147, 148, 149,
	150, 276, 214, 276, 276, 276, 276, 276, 248, 276,
	276, 293, 293, 293, 293, 293, 257, 258, 259, 260,
	261, 262, 263, 0, 0, 233, 276, 276, 276, 237,
	276, 239, 240, 266, 267, 268, 269, 270, 271, 272,
	273, 278, 278, 278, 280, 280, 231, 232, 0, 0,
	131, 0, 1040, 0, 1040, 0, 0, 0, 94, 95,
	96, 138, 0, 0, 378, 0, 406, 758, 0, 1040,
	409, 410, 536, 784, 785, 414, 415, 416, 417, 418,
	419, 420, 421, 426, 429, 443, 437, 438, 431, 720,
	0, 0, 0, 0, 0, 711, 713, 714, 719, 30,
	473, 0, 700, 0, 0, 0, 476, 25, 546, 547,
	549, 566, 0, 568, 570, 487, 483, 0, 690, -2,
	556, 557, 581, 582, 583, 0, 0, 0, 0, 579,
	561, 0, 592, 593, 594, 595, 596, 597, 598, 599,
	600, 601, 602, 603, 606, 657, 658, 614, 0, 604,
	605, 613, 0, 0, 478, 479, 584, 0, 738, 27,
	0, 0, 0, 0, 0, 689, 0, 0, 0, 0,
	687, 684, 0, 0, 647, 674, 0, 0, 0, 0,
	0, 0, 533, 541, 740, 0, 493, 512, 514, 0,
	509, 524, 525, 527, 0, 529, 0, 531, 532, 497,
	498, 499, 0, 0, 0, 0, 520, 541, 0, 541,
	42, 744, 47, 0, 0, 75, 76, 745, 746, 747,
	748, 297, 0, 139, 360, 362, 365, 366, 367, 141,
	142, 143, 144, 0, 353, 355, 0, 0, 0, 0,
	0, 333, 334, 152, 0, 154, 0, 0, 157, 158,
	0, 160, 162, 353, 0, 0, 0, 0, 0, 151,
	0, 292, 288, 287, 213, 0, 293, 293, 276, 293,
	293, 293, 250, 251, 296, 0, 296, 296, 296, 296,
	0, 0, 283, 283, 236, 238, 225, 0, 278, 227,
	228, 229, 0, 230, 0, 0, 88, 0, 129, 130,
	89, 760, 90, 113, 0, 100, 97, 98, 99, 0,
	1039, 126, 0, 773, 379, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 0, 0, 405, 1040, 408,
	446, 0, 0, 0, 717, 718, 0, 710, 23, 0,
	755, 756, 701, 702, 490, 567, 569, 571, 0, 477,
	558, 579, 562, 0, 559, 0, 0, 553, 619, 0,
	0, 586, -2, 622, 623, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 707, 0, 685, 0, 0, 636,
	648, 649, 650, 651, 732, 0, 0, -2, 0, 0,
	707, 0, 0, 0, 506, 513, 0, 0, 507, 0,
	508, 528, 530, 0, 0, 0, 0, 504, 707, 541,
	38, 73, 74, 0, 0, 80, 298, 0, 363, 0,
	0, 339, 0, 0, 0, 356, 325, 0, 0, 328,
	0, 330, 350, 153, 0, 0, 0, 159, 161, 0,
	165, 166, 0, 184, 0, 0, 173, 0, 208, 177,
	178, 179, 180, 181, 182, 0, 276, 276, 204, 0,
	291, 146, 289, 0, 296, 296, 293, 296, 296, 296,
	252, 0, 253, 254, 255, 256, 0, 274, 0, 234,
	0, 0, 235, 0, 226, 0, 0, 0, -2, 132,
	133, 0, 116, 0, 0, 0, 0, 368, 0, 1039,
	0, 393, 394, 395, 396, 397, 398, 399, 1039, 0,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 0, 1039, 774, 775, 776, 777, 0, 0, 407,
	428, 0, 0, 444, 445, 721, 0, 24, 541, 0,
	484, 691, 0, 560, 0, 580, 563, 620, 480, 0,
	276, 276, 662, 276, 280, 665, 666, 276, 668, 276,
	671, 0, 0, 0, 0, 690, 0, 0, 0, 682,
	635, 688, 0, 31, 0, 732, 722, 734, 736, 0,
	27, 0, 728, 0, 715, 741, 542, 742, 510, 0,
	515, 0, 0, 0, 518, 0, 715, 37, 77, 78,
	79, 361, 364, 0, 335, 276, 276, 0, 0, 0,
	0, 0, 326, 327, 329, 331, 350, 172, 155, 353,
	156, 0, 0, 0, 185, 0, 0, 0, 176, 0,
	0, 200, 0, 202, 0, 0, 277, 243, 244, 296,
	245, 246, 247, 294, 295, 293, 0, 293, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 114,
	115, 0, 101, 0, 0, 391, 392, 372, 0, 373,
	375, 376, 377, 0, 355, 371, 447, 448, 703, 491,
	621, 564, 624, 659, 293, 663, 664, 667, 669, 670,
	672, 626, 625, 627, 0, 0, 630, 0, 0, 0,
	0, 0, 686, 0, 32, 0, 737, -2, 0, 0,
	0, 44, 35, 0, 501, 502, 0, 0, 0, 537,
	505, 36, 300, 0, 712, 338, 353, 345, 346, 0,
	0, 353, 354, 355, 350, 332, 0, 0, 0, 0,
	169, 0, 174, 0, 0, 283, 211, 212, 183, 201,
	203, 205, 249, 296, 275, 296, 284, 285, 0, 0,
	0, 0, 0, 134, 135, 0, 117, 118, 119, 120,
	121, 0, 0, 0, 0, 0, 356, 705, 0, 660,
	661, 0, 0, 0, 0, 652, 634, 683, 0, 735,
	0, -2, 0, 730, 729, 0, 511, 538, 539, 540,
	500, 322, 301, 0, 303, 0, 318, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 337, 340, 0, 347,
	348, 341, 0, 0, 356, 0, 0, 206, 167, 0,
	186, 0, 0, 209, 210, 264, 265, 279, 282, 0,
	0, 0, 122, 357, 0, 93, 102, 104, 105, 106,
	107, 108, 109, 110, 111, 707, 0, 0, 0, 0,
	61, 0, 0, 0, 0, 0, 0, 26, 0, 0,
	628, 629, 631, 632, 0, 0, 0, 0, 725, 27,
	0, 503, 299, 0, 304, 0, 0, 0, 307, 0,
	319, 309, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 163, 0, 0, 0, 171, 175,
	543, 0, 0, 124, 0, 0, 0, 103, 715, 49,
	54, 51, 56, 57, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 401, 0, 0, 706,
	704, 633, 0, 0, 0, 733, -2, 731, 323, 0,
	305, 310, 308, 311, 320, 321, 312, 313, 314, 315,
	316, 317, 353, 353, 0, 0, 164, 207, 168, 170,
	0, 0, 0, 0, 0, 0, 197, 0, 541, 0,
	0, 0, 91, 0, 358, 123, 92, 719, 0, 0,
	53, 55, 59, 62, 63, 64, 65, 66, 0, 0,
	369, 131, 400, 0, 0, 0, 653, 0, 656, 0,
	302, 0, 342, 343, 0, 300, 0, 188, 0, 190,
	191, 192, 193, 194, 195, 196, 0, 300, 0, 541,
	300, 0, 112, 52, 0, 0, 0, 0, 68, 0,
	374, 402, 0, 0, 654, 0, 306, 0, 322, 187,
	189, 198, 0, 322, 0, 300, 85, 125, 0, 60,
	67, 69, 70, 0, 370, 0, 324, 0, 349, 0,
	84, 544, 86, -2, 0, 0, 0, 0, 199, 0,
	0, 655, 0, 0, 0, 0, 344, 71, 403, 404,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 325,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 326, 3, 327, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:357
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:362
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:363
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:367
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:390
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:398
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:402
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:408
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:415
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:421
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:425
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:431
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:435
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:442
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:454
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:466
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:470
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:476
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:482
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:486
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:490
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:495
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:496
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:500
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:504
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:509
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:513
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:519
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:523
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:527
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:531
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:537
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:541
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:554
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:558
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:564
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:569
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:573
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:579
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:586
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:593
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:600
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:608
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:618
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:622
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:626
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:630
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:634
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:640
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:647
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:657
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:661
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:667
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:675
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:686
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:690
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:696
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:700
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:704
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:710
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:714
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:718
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:722
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:728
		{
			yyVAL.str = SessionStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:732
		{
			yyVAL.str = GlobalStr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:738
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 84:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:743
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 85:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:763
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 86:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:779
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:794
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:802
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:810
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:814
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:818
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 92:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:829
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:839
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:851
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:855
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:859
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:865
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:869
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:873
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:879
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:883
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:889
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:893
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:899
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:910
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:919
		{
			yyVAL.bytes = nil
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:923
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:927
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:932
		{
			yyVAL.bytes = nil
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:936
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:940
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:944
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:948
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:952
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:957
		{
			yyVAL.expr = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:961
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:966
		{
			yyVAL.expr = nil
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:970
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:975
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:979
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:984
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:988
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:994
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:999
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1004
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1010
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1015
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1021
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1026
		{
			yyVAL.bytes = nil
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1030
		{
			yyVAL.bytes = nil
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1036
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1043
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1050
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1055
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1059
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1063
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1067
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1073
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1078
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1089
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1101
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1106
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1111
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1116
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1121
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1126
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1131
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1136
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1141
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1146
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1151
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1156
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[5].expr), NotForReplication: bool(yyDollar[3].boolVal)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[7].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1162
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[7].expr), ConstraintName: yyDollar[3].colIdent, NotForReplication: bool(yyDollar[5].boolVal)}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1167
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1172
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1177
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1184
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1190
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1196
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1202
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1208
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1215
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1219
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 175:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1223
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1229
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1233
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1237
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1241
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1245
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1249
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1253
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1257
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1263
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1267
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1272
		{
			yyVAL.sequence = &Sequence{}
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1276
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1281
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1286
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1291
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1296
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1301
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1306
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1311
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1316
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1321
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1326
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1331
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1336
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1343
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1347
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1351
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1355
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1359
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1363
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1368
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1372
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1377
		{
			yyVAL.bytes = nil
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1387
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1392
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1398
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1402
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1406
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1410
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1414
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1418
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1422
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1426
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1430
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1434
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1440
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1446
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1452
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1458
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1464
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1470
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1476
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1480
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1486
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1494
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1498
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1502
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1506
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1510
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1514
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1520
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1524
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1530
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1534
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1538
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1542
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1546
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1550
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1570
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1578
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1590
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1594
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1598
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1602
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1659
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1664
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1669
		{
			yyVAL.optVal = nil
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1673
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1678
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1682
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1690
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1694
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1700
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1708
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1712
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1716
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1721
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1725
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1730
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1734
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1739
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1743
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1747
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1752
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1756
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1760
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1765
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1769
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1773
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1779
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1784
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1788
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1792
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1798
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1802
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1808
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1812
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1818
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1822
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1827
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1831
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1835
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1839
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1843
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1847
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1851
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1855
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1859
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1865
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1869
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1875
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1879
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1885
		{
			yyVAL.indexPartition = nil
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1889
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 324:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1893
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1899
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1903
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1907
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1911
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1915
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1919
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1923
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1927
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1933
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1937
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1943
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1947
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1953
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1958
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1964
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1969
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1976
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 342:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1983
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 343:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1990
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 344:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1999
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2011
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2015
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2019
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2023
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 349:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2029
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2040
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2044
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2048
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2054
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2058
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2063
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2070
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2074
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2079
		{
			yyVAL.str = ""
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2083
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2087
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2095
		{
			yyVAL.str = yyDollar[1].str
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2099
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2103
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2109
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2113
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2117
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2123
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 369:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2127
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 370:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2141
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 371:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2155
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 372:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2164
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 373:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2168
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 374:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2172
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2185
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 376:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2195
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2200
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2205
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2209
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 400:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2241
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2247
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2251
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 403:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2257
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 404:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2261
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2267
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2273
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 407:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2281
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2286
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2294
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2298
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2304
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2308
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2313
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2319
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2323
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2327
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2332
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2336
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2340
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2344
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2348
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2352
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2356
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2360
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2364
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2368
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2372
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2376
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2386
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2390
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2394
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2398
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2402
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2406
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2420
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2426
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2430
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2436
		{
			yyVAL.str = ""
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2440
		{
			yyVAL.str = "extended "
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2446
		{
			yyVAL.str = ""
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2450
		{
			yyVAL.str = "full "
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2456
		{
			yyVAL.str = ""
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2460
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2464
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2470
		{
			yyVAL.showFilter = nil
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2474
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2478
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2484
		{
			yyVAL.str = ""
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2488
		{
			yyVAL.str = SessionStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2492
		{
			yyVAL.str = GlobalStr
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2498
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2502
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2508
		{
			yyVAL.statement = &Begin{}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2512
		{
			yyVAL.statement = &Begin{}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2518
		{
			yyVAL.statement = &Commit{}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2524
		{
			yyVAL.statement = &Rollback{}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2530
		{
			yyVAL.statement = &OtherRead{}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2534
		{
			yyVAL.statement = &OtherRead{}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2538
		{
			yyVAL.statement = &OtherRead{}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2542
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2546
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2551
		{
			setAllowComments(yylex, true)
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2555
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2561
		{
			yyVAL.bytes2 = nil
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2565
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2571
		{
			yyVAL.str = UnionStr
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2575
		{
			yyVAL.str = UnionAllStr
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2579
		{
			yyVAL.str = UnionDistinctStr
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2584
		{
			yyVAL.str = ""
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2588
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2592
		{
			yyVAL.str = SQLCacheStr
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2597
		{
			yyVAL.str = ""
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2601
		{
			yyVAL.str = DistinctStr
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2606
		{
			yyVAL.str = ""
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2610
		{
			yyVAL.str = StraightJoinHint
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2615
		{
			yyVAL.selectExprs = nil
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2619
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2625
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2629
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2635
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2639
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2643
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 484:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2647
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2652
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2656
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2660
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2667
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2672
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2676
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2682
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2686
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2696
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2700
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2704
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2710
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 500:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2714
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2720
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2725
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2729
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2735
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2739
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2752
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2756
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2760
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2764
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2770
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2772
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2776
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2778
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2782
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2784
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2787
		{
			yyVAL.empty = struct{}{}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2789
		{
			yyVAL.empty = struct{}{}
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2792
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2796
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2800
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2807
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2813
		{
			yyVAL.str = JoinStr
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2817
		{
			yyVAL.str = JoinStr
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2821
		{
			yyVAL.str = JoinStr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2827
		{
			yyVAL.str = StraightJoinStr
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2833
		{
			yyVAL.str = LeftJoinStr
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2837
		{
			yyVAL.str = LeftJoinStr
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2841
		{
			yyVAL.str = RightJoinStr
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2845
		{
			yyVAL.str = RightJoinStr
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2851
		{
			yyVAL.str = NaturalJoinStr
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2855
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2865
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2869
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2875
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2879
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2884
		{
			yyVAL.indexHints = nil
		}
	case 538:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2888
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 539:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2892
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2896
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2901
		{
			yyVAL.expr = nil
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2905
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2910
		{
			yyVAL.columns = nil
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2914
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2920
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2924
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2928
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2932
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2936
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2940
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2944
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2950
		{
			yyVAL.str = ""
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2954
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2960
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2964
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2970
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2974
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2978
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2982
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 560:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2986
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2990
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2994
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2998
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 564:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3002
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3006
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3012
		{
			yyVAL.str = IsNullStr
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3016
		{
			yyVAL.str = IsNotNullStr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3020
		{
			yyVAL.str = IsTrueStr
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3024
		{
			yyVAL.str = IsNotTrueStr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3028
		{
			yyVAL.str = IsFalseStr
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3032
		{
			yyVAL.str = IsNotFalseStr
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3038
		{
			yyVAL.str = EqualStr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3042
		{
			yyVAL.str = LessThanStr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3046
		{
			yyVAL.str = GreaterThanStr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3050
		{
			yyVAL.str = LessEqualStr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3054
		{
			yyVAL.str = GreaterEqualStr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3058
		{
			yyVAL.str = NotEqualStr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3062
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3067
		{
			yyVAL.expr = nil
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3071
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3077
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3081
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3085
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3091
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3097
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3101
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3107
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3111
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3115
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3119
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3123
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3127
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3131
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3135
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3139
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3143
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3147
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3151
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3155
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3159
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3163
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3167
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3171
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3175
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3179
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3183
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3187
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3191
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3195
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3203
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3217
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3221
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3225
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3233
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3247
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3251
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 621:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3255
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3265
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3269
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 624:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3273
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 625:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3277
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 626:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3281
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 627:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3285
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 628:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3289
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 629:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3293
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 630:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3297
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 631:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3301
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 632:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3305
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 633:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3309
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 634:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3313
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 635:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3317
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3321
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3331
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3335
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3339
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3343
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3348
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3353
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3358
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3363
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3367
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3381
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3385
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3389
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3393
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3399
		{
			yyVAL.str = ""
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3403
		{
			yyVAL.str = BooleanModeStr
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3407
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 655:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3411
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3415
		{
			yyVAL.str = QueryExpansionStr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3421
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3425
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3431
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3435
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3439
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3443
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3447
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3451
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3457
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3461
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3465
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3469
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3473
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3477
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3481
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3485
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3491
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3495
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3499
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3503
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3507
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3511
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3515
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3520
		{
			yyVAL.expr = nil
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3524
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3529
		{
			yyVAL.str = string("")
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3533
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3539
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3543
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3549
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3554
		{
			yyVAL.expr = nil
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3558
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3564
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3568
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 691:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3572
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3578
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3582
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3586
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3590
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3594
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3598
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3602
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3606
		{
			yyVAL.expr = &NullVal{}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3612
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3621
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3625
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3630
		{
			yyVAL.exprs = nil
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3634
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3639
		{
			yyVAL.expr = nil
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3643
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3648
		{
			yyVAL.orderBy = nil
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3652
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3658
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3662
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3668
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3673
		{
			yyVAL.str = AscScr
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3677
		{
			yyVAL.str = AscScr
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3681
		{
			yyVAL.str = DescScr
		}
	case 715:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3686
		{
			yyVAL.limit = nil
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3690
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3694
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3698
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3703
		{
			yyVAL.str = ""
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3707
		{
			yyVAL.str = ForUpdateStr
		}
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3711
		{
			yyVAL.str = ShareModeStr
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3724
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3728
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3732
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 725:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3737
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3741
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 727:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3745
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3752
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3756
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3760
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 731:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3764
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3769
		{
			yyVAL.updateExprs = nil
		}
	case 733:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3773
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3779
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3783
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3789
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3793
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3799
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3805
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3815
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3819
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3825
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3831
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3835
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3841
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3845
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3849
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3853
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3860
		{
			yyVAL.bytes = []byte("charset")
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3867
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3871
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3875
		{
			yyVAL.expr = &Default{}
		}
	case 757:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3884
		{
			yyVAL.byt = 0
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3886
		{
			yyVAL.byt = 1
		}
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3889
		{
			yyVAL.empty = struct{}{}
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3891
		{
			yyVAL.empty = struct{}{}
		}
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3894
		{
			yyVAL.str = ""
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3896
		{
			yyVAL.str = IgnoreStr
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3900
		{
			yyVAL.empty = struct{}{}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3902
		{
			yyVAL.empty = struct{}{}
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3904
		{
			yyVAL.empty = struct{}{}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3906
		{
			yyVAL.empty = struct{}{}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3908
		{
			yyVAL.empty = struct{}{}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3910
		{
			yyVAL.empty = struct{}{}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3912
		{
			yyVAL.empty = struct{}{}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3914
		{
			yyVAL.empty = struct{}{}
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3916
		{
			yyVAL.empty = struct{}{}
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3918
		{
			yyVAL.empty = struct{}{}
		}
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3921
		{
			yyVAL.empty = struct{}{}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3923
		{
			yyVAL.empty = struct{}{}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3925
		{
			yyVAL.empty = struct{}{}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3929
		{
			yyVAL.empty = struct{}{}
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3931
		{
			yyVAL.empty = struct{}{}
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3935
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3939
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3946
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3952
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3956
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3963
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4240
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4249
		{
			decNesting(yylex)
		}
	case 1039:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4254
		{
			forceEOF(yylex)
		}
	case 1040:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4259
		{
			forceEOF(yylex)
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4263
		{
			forceEOF(yylex)
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4267
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
