// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const POLICY = 57457
const UNIQUE = 57458
const KEY = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const STATUS = 57477
const VARIABLES = 57478
const RESTRICT = 57479
const CASCADE = 57480
const NO = 57481
const ACTION = 57482
const PERMISSIVE = 57483
const RESTRICTIVE = 57484
const PUBLIC = 57485
const CURRENT_USER = 57486
const SESSION_USER = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const SMALLSERIAL = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const SERIAL = 57500
const BIGINT = 57501
const BIGSERIAL = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const PRECISION = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const VARYING = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const UUID = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const JSONB = 57531
const ENUM = 57532
const GEOMETRY = 57533
const POINT = 57534
const LINESTRING = 57535
const POLYGON = 57536
const GEOMETRYCOLLECTION = 57537
const MULTIPOINT = 57538
const MULTILINESTRING = 57539
const MULTIPOLYGON = 57540
const ARRAY = 57541
const NOW = 57542
const NULLX = 57543
const AUTO_INCREMENT = 57544
const APPROXNUM = 57545
const SIGNED = 57546
const UNSIGNED = 57547
const ZEROFILL = 57548
const ZONE = 57549
const DATABASES = 57550
const TABLES = 57551
const VITESS_KEYSPACES = 57552
const VITESS_SHARDS = 57553
const VITESS_TABLETS = 57554
const VSCHEMA_TABLES = 57555
const EXTENDED = 57556
const FULL = 57557
const PROCESSLIST = 57558
const NAMES = 57559
const CHARSET = 57560
const GLOBAL = 57561
const SESSION = 57562
const ISOLATION = 57563
const LEVEL = 57564
const READ = 57565
const WRITE = 57566
const ONLY = 57567
const REPEATABLE = 57568
const COMMITTED = 57569
const UNCOMMITTED = 57570
const SERIALIZABLE = 57571
const CURRENT_TIMESTAMP = 57572
const DATABASE = 57573
const CURRENT_DATE = 57574
const CURRENT_TIME = 57575
const LOCALTIME = 57576
const LOCALTIMESTAMP = 57577
const UTC_DATE = 57578
const UTC_TIME = 57579
const UTC_TIMESTAMP = 57580
const REPLACE = 57581
const CONVERT = 57582
const CAST = 57583
const SUBSTR = 57584
const SUBSTRING = 57585
const GROUP_CONCAT = 57586
const SEPARATOR = 57587
const MATCH = 57588
const AGAINST = 57589
const BOOLEAN = 57590
const LANGUAGE = 57591
const WITH = 57592
const WITHOUT = 57593
const PARSER = 57594
const QUERY = 57595
const EXPANSION = 57596
const UNUSED = 57597
const TYPECAST = 57598
const CHECK = 57599

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	152, 328,
	153, 328,
	-2, 318,
	-1, 253,
	108, 656,
	-2, 652,
	-1, 254,
	108, 657,
	-2, 653,
	-1, 324,
	79, 829,
	-2, 58,
	-1, 325,
	79, 785,
	-2, 59,
	-1, 330,
	79, 768,
	-2, 623,
	-1, 332,
	79, 806,
	-2, 625,
	-1, 598,
	51, 41,
	53, 41,
	-2, 43,
	-1, 751,
	108, 659,
	-2, 655,
	-1, 972,
	5, 28,
	-2, 461,
	-1, 997,
	5, 27,
	-2, 598,
	-1, 1274,
	5, 28,
	-2, 599,
	-1, 1338,
	5, 27,
	-2, 601,
	-1, 1417,
	5, 28,
	-2, 602,
}

const yyPrivate = 57344

const yyLast = 12291

var yyAct = [...]int{

	254, 1407, 1368, 1000, 679, 911, 1280, 810, 247, 544,
	1349, 1291, 258, 1166, 1194, 1167, 1039, 592, 851, 283,
	828, 1081, 905, 857, 850, 1163, 590, 811, 232, 890,
	783, 1137, 846, 1016, 260, 88, 543, 3, 88, 53,
	964, 66, 900, 1067, 1070, 257, 780, 608, 226, 799,
	1005, 477, 753, 483, 431, 607, 310, 579, 864, 323,
	311, 498, 88, 88, 334, 329, 807, 594, 88, 489,
	334, 320, 256, 334, 241, 1054, 318, 88, 558, 88,
	52, 945, 879, 716, 231, 88, 1441, 929, 309, 496,
	245, 1203, 227, 228, 229, 230, 314, 976, 977, 975,
	928, 1382, 511, 510, 520, 521, 513, 514, 515, 516,
	517, 518, 519, 512, 1461, 495, 494, 494, 715, 720,
	721, 1438, 476, 495, 494, 1457, 1415, 933, 464, 1394,
	1162, 1453, 496, 496, 495, 494, 927, 495, 494, 251,
	496, 912, 878, 495, 494, 495, 494, 1427, 782, 1437,
	1350, 496, 1071, 1072, 496, 1414, 1158, 1268, 435, 1206,
	496, 1188, 496, 1352, 495, 494, 83, 79, 80, 81,
	1189, 1190, 842, 843, 841, 57, 23, 24, 48, 26,
	27, 496, 472, 1306, 924, 921, 922, 609, 920, 610,
	68, 1024, 326, 457, 1023, 42, 1305, 1025, 1056, 28,
	59, 60, 61, 62, 63, 88, 710, 881, 1327, 334,
	334, 334, 334, 711, 334, 891, 931, 934, 37, 1298,
	883, 334, 50, 1042, 1043, 1044, 1360, 957, 1218, 1217,
	1351, 1048, 1046, 280, 281, 901, 1257, 1255, 71, 73,
	567, 67, 480, 484, 225, 1229, 1230, 1357, 334, 468,
	469, 1456, 1451, 72, 74, 1408, 459, 1115, 461, 503,
	808, 1037, 1294, 1409, 1335, 926, 740, 1297, 1052, 1051,
	1032, 69, 1201, 1112, 486, 485, 497, 1232, 1035, 1383,
	1241, 30, 31, 33, 32, 35, 458, 460, 866, 1448,
	531, 925, 1233, 545, 77, 1373, 446, 82, 438, 742,
	1314, 282, 556, 867, 678, 36, 43, 44, 689, 88,
	45, 46, 34, 76, 1015, 77, 88, 88, 88, 497,
	497, 1014, 334, 829, 831, 866, 1013, 497, 334, 930,
	433, 442, 204, 38, 39, 744, 40, 41, 497, 78,
	867, 497, 866, 1116, 932, 1387, 891, 497, 743, 497,
	314, 533, 534, 745, 741, 1277, 1124, 867, 746, 886,
	980, 958, 717, 502, 902, 328, 1353, 452, 497, 70,
	1113, 436, 1111, 1413, 440, 560, 561, 562, 563, 564,
	565, 566, 1212, 1049, 512, 1114, 456, 1292, 1293, 1295,
	848, 847, 714, 605, 599, 760, 1120, 830, 1392, 940,
	1226, 535, 536, 537, 538, 539, 540, 541, 1003, 758,
	759, 757, 1102, 1047, 487, 510, 520, 521, 513, 514,
	515, 516, 517, 518, 519, 512, 49, 611, 1160, 800,
	870, 987, 1213, 800, 334, 334, 515, 516, 517, 518,
	519, 512, 88, 88, 334, 445, 88, 437, 682, 88,
	326, 1356, 871, 88, 491, 334, 334, 334, 334, 334,
	334, 334, 334, 954, 955, 956, 876, 1041, 868, 334,
	334, 1119, 75, 869, 88, 1419, 1103, 941, 1092, 1308,
	1307, 1105, 1098, 1099, 1076, 1106, 1101, 1100, 50, 334,
	1108, 1104, 1074, 88, 735, 737, 738, 1057, 756, 736,
	334, 1107, 1393, 732, 733, 1334, 1150, 1097, 1151, 1303,
	328, 328, 328, 328, 722, 328, 1243, 1068, 698, 439,
	1053, 441, 328, 1402, 1465, 754, 873, 448, 449, 450,
	21, 1342, 1452, 308, 696, 875, 874, 1402, 1439, 476,
	755, 1390, 334, 1433, 476, 1342, 1430, 1093, 1089, 500,
	1200, 1094, 1091, 1090, 1199, 545, 74, 1198, 790, 791,
	1038, 747, 724, 1026, 792, 795, 882, 1095, 751, 914,
	801, 1342, 1425, 1088, 88, 1342, 1424, 88, 88, 88,
	88, 88, 776, 787, 749, 695, 236, 694, 812, 88,
	1342, 1405, 88, 1342, 1365, 1364, 88, 1342, 476, 1342,
	1343, 88, 88, 1289, 1288, 334, 777, 778, 1185, 476,
	1363, 314, 314, 314, 314, 314, 804, 683, 334, 681,
	845, 872, 454, 328, 797, 447, 314, 836, 787, 613,
	432, 750, 1403, 813, 1402, 314, 816, 1164, 814, 815,
	1001, 817, 1276, 476, 752, 825, 1207, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 839, 833, 838, 834, 892, 893, 894, 1127,
	432, 1221, 1220, 855, 1215, 1216, 1215, 1214, 1001, 88,
	970, 476, 334, 23, 334, 88, 576, 476, 88, 982,
	88, 785, 476, 88, 334, 979, 788, 789, 907, 618,
	617, 1002, 796, 835, 575, 601, 995, 1138, 785, 996,
	602, 970, 1002, 54, 1272, 903, 904, 803, 23, 805,
	806, 23, 576, 1225, 943, 944, 1219, 484, 576, 50,
	238, 981, 1027, 326, 866, 676, 328, 978, 840, 860,
	1140, 865, 576, 861, 862, 328, 852, 1337, 863, 867,
	603, 970, 601, 1001, 1223, 1222, 328, 328, 328, 328,
	328, 328, 328, 328, 50, 680, 970, 50, 1358, 604,
	328, 328, 946, 718, 947, 50, 50, 754, 1458, 1435,
	1397, 1370, 1367, 751, 1366, 1142, 1321, 1147, 883, 1141,
	726, 1139, 755, 906, 971, 1179, 901, 1145, 1030, 1006,
	1007, 500, 908, 909, 328, 896, 895, 1143, 1144, 988,
	960, 511, 510, 520, 521, 513, 514, 515, 516, 517,
	518, 519, 512, 1146, 1148, 513, 514, 515, 516, 517,
	518, 519, 512, 334, 65, 1355, 88, 1224, 1018, 1164,
	1020, 1031, 1009, 779, 997, 692, 750, 684, 986, 473,
	822, 334, 820, 793, 793, 823, 1012, 821, 730, 793,
	965, 824, 1019, 585, 586, 1011, 334, 1010, 819, 1028,
	314, 273, 272, 275, 276, 277, 278, 793, 953, 818,
	274, 279, 1447, 581, 584, 585, 586, 582, 1021, 583,
	587, 242, 243, 1006, 1007, 1436, 1123, 1445, 961, 962,
	963, 581, 584, 585, 586, 582, 328, 583, 587, 88,
	334, 334, 942, 334, 1058, 1059, 1045, 1061, 490, 328,
	1033, 1034, 1036, 1062, 952, 1064, 1065, 1066, 951, 1063,
	969, 488, 616, 478, 455, 1270, 1322, 1084, 334, 916,
	1069, 88, 88, 1073, 479, 1075, 984, 691, 589, 88,
	1316, 490, 1317, 1318, 1319, 239, 240, 950, 1228, 334,
	233, 1376, 1086, 234, 1315, 949, 54, 1375, 1085, 520,
	521, 513, 514, 515, 516, 517, 518, 519, 512, 852,
	1325, 1002, 492, 328, 1396, 328, 1197, 1196, 1395, 56,
	1384, 1050, 713, 58, 1087, 328, 1161, 1231, 600, 334,
	334, 1136, 1131, 1165, 51, 1, 1130, 1426, 812, 1152,
	1401, 1176, 1177, 1202, 812, 1178, 1168, 1227, 1180, 328,
	1083, 1096, 913, 1187, 1159, 1080, 923, 1406, 334, 1175,
	334, 334, 1348, 1173, 1193, 1170, 858, 849, 430, 64,
	1174, 1082, 1391, 859, 856, 619, 751, 877, 1192, 1055,
	880, 506, 1191, 509, 625, 623, 624, 621, 1186, 522,
	523, 524, 525, 526, 527, 528, 627, 507, 508, 505,
	511, 510, 520, 521, 513, 514, 515, 516, 517, 518,
	519, 512, 626, 622, 620, 739, 212, 1129, 321, 334,
	1210, 1208, 1209, 1149, 1211, 588, 612, 493, 334, 1110,
	1109, 919, 1118, 709, 939, 1133, 1134, 471, 214, 1155,
	88, 529, 948, 1022, 327, 1171, 334, 719, 1153, 1154,
	482, 1156, 1157, 1374, 1324, 334, 985, 555, 88, 1244,
	1245, 798, 259, 734, 1017, 271, 1234, 475, 268, 270,
	1242, 269, 725, 994, 504, 1236, 249, 313, 572, 580,
	578, 577, 328, 1008, 1246, 1004, 852, 312, 852, 1239,
	1126, 1267, 314, 1381, 729, 1253, 25, 1040, 55, 244,
	19, 1269, 18, 17, 20, 16, 15, 14, 545, 29,
	334, 13, 334, 334, 334, 88, 334, 12, 1282, 1283,
	1284, 1271, 334, 11, 10, 9, 8, 884, 885, 887,
	888, 889, 1285, 1279, 462, 7, 6, 5, 4, 1296,
	1028, 1078, 328, 235, 328, 1287, 897, 898, 899, 22,
	2, 0, 0, 334, 334, 88, 334, 334, 0, 1309,
	0, 0, 334, 0, 0, 0, 0, 0, 0, 328,
	0, 0, 334, 1301, 1302, 1313, 1304, 1312, 0, 0,
	0, 0, 0, 1129, 0, 0, 0, 0, 0, 0,
	328, 0, 0, 0, 0, 284, 47, 0, 0, 0,
	0, 0, 1248, 0, 0, 0, 0, 334, 334, 0,
	0, 1326, 328, 0, 0, 0, 0, 0, 1336, 0,
	334, 0, 1168, 0, 0, 0, 0, 793, 334, 0,
	1172, 1017, 0, 793, 1354, 0, 1347, 0, 0, 0,
	0, 0, 1338, 47, 1359, 334, 0, 0, 0, 0,
	852, 237, 334, 0, 0, 0, 0, 315, 1371, 328,
	0, 328, 1195, 0, 0, 1361, 0, 1362, 0, 0,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	0, 1385, 0, 0, 1082, 852, 0, 1168, 0, 1389,
	0, 0, 0, 0, 0, 0, 0, 334, 334, 1398,
	0, 334, 0, 1399, 1400, 0, 1386, 1404, 0, 0,
	0, 0, 0, 0, 1410, 545, 1411, 0, 334, 0,
	1235, 0, 1416, 0, 0, 334, 0, 812, 334, 1237,
	1423, 1328, 1329, 334, 1330, 1331, 1332, 1421, 1422, 334,
	1431, 0, 0, 0, 465, 466, 467, 1240, 470, 0,
	0, 0, 0, 0, 0, 474, 328, 0, 1440, 481,
	0, 0, 0, 0, 0, 1444, 334, 1443, 1442, 0,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 1060, 0, 0, 0, 0, 1455, 334,
	0, 1462, 0, 0, 86, 0, 0, 224, 0, 0,
	0, 0, 0, 0, 463, 463, 463, 463, 0, 463,
	0, 1281, 0, 1281, 1281, 1281, 463, 1286, 0, 248,
	0, 86, 86, 328, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 47, 0, 0, 86, 0, 86, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 530, 0,
	0, 532, 0, 0, 1281, 1310, 0, 328, 328, 0,
	1265, 0, 0, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 542, 0,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 0,
	557, 559, 559, 559, 559, 559, 559, 559, 559, 0,
	568, 569, 570, 571, 0, 0, 0, 0, 1340, 1341,
	0, 591, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1195, 0, 0, 0, 0, 0, 0, 0, 1040,
	1463, 511, 510, 520, 521, 513, 514, 515, 516, 517,
	518, 519, 512, 0, 1204, 0, 1369, 0, 0, 0,
	0, 0, 0, 1281, 723, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 677,
	0, 0, 0, 0, 1388, 0, 0, 0, 688, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 699,
	700, 701, 702, 703, 704, 705, 706, 0, 1281, 1281,
	0, 0, 1281, 707, 708, 0, 0, 0, 0, 0,
	0, 784, 786, 0, 0, 0, 793, 0, 0, 1418,
	0, 0, 0, 0, 0, 316, 1420, 802, 0, 1369,
	463, 0, 0, 0, 1428, 1250, 1251, 0, 1252, 463,
	1434, 0, 1254, 0, 1256, 0, 0, 0, 0, 0,
	463, 463, 463, 463, 463, 463, 463, 463, 827, 0,
	85, 0, 0, 0, 463, 463, 0, 1281, 86, 0,
	0, 0, 0, 0, 0, 86, 596, 86, 1264, 476,
	0, 0, 0, 0, 1262, 0, 0, 0, 319, 0,
	1369, 0, 1290, 434, 476, 0, 0, 0, 0, 0,
	0, 0, 443, 1300, 444, 0, 1261, 476, 0, 0,
	451, 0, 0, 0, 0, 511, 510, 520, 521, 513,
	514, 515, 516, 517, 518, 519, 512, 0, 47, 0,
	511, 510, 520, 521, 513, 514, 515, 516, 517, 518,
	519, 512, 546, 511, 510, 520, 521, 513, 514, 515,
	516, 517, 518, 519, 512, 511, 510, 520, 521, 513,
	514, 515, 516, 517, 518, 519, 512, 0, 0, 0,
	0, 0, 315, 315, 315, 315, 315, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 832,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 0,
	0, 86, 86, 220, 0, 86, 0, 0, 86, 0,
	0, 0, 697, 0, 0, 0, 915, 0, 917, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 938, 0,
	453, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 968, 0,
	0, 0, 86, 205, 0, 972, 973, 974, 0, 207,
	0, 0, 697, 0, 983, 0, 213, 209, 0, 989,
	0, 990, 991, 992, 993, 0, 0, 463, 0, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 0, 0, 211, 0, 0, 215,
	0, 0, 248, 0, 0, 0, 0, 248, 248, 0,
	0, 794, 794, 248, 0, 0, 0, 794, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 248,
	248, 248, 0, 86, 574, 794, 86, 86, 86, 86,
	86, 206, 0, 598, 0, 0, 959, 0, 826, 0,
	0, 86, 0, 0, 0, 596, 0, 0, 0, 0,
	86, 86, 0, 0, 0, 0, 1132, 0, 0, 0,
	0, 0, 0, 208, 0, 216, 217, 218, 219, 223,
	0, 0, 0, 0, 222, 221, 511, 510, 520, 521,
	513, 514, 515, 516, 517, 518, 519, 512, 966, 0,
	0, 0, 0, 998, 999, 511, 510, 520, 521, 513,
	514, 515, 516, 517, 518, 519, 512, 0, 511, 510,
	520, 521, 513, 514, 515, 516, 517, 518, 519, 512,
	0, 315, 0, 0, 0, 0, 0, 1135, 86, 0,
	0, 0, 0, 0, 86, 1079, 0, 86, 0, 86,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 685, 686, 0,
	0, 690, 1117, 0, 693, 0, 0, 697, 0, 0,
	0, 0, 0, 0, 1184, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 712,
	0, 0, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 731, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1169, 0, 47, 86, 0, 0, 1247, 809,
	0, 0, 0, 0, 0, 1249, 0, 0, 0, 1181,
	1182, 1183, 0, 0, 0, 0, 0, 1258, 0, 0,
	1259, 1260, 0, 0, 1263, 0, 0, 837, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1273, 1274, 1275,
	0, 1278, 0, 0, 0, 1205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 647, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1121, 1122, 0, 0, 910, 0, 0, 0, 86, 0,
	918, 0, 0, 935, 0, 936, 0, 0, 937, 248,
	0, 0, 0, 315, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 1333, 0, 633, 0, 0,
	697, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 1345, 1346, 0, 1266, 794, 0, 0, 0, 0,
	0, 794, 0, 0, 0, 0, 0, 0, 0, 0,
	648, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1377, 1378, 1379, 1380,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	0, 671, 672, 0, 673, 674, 675, 649, 650, 651,
	652, 630, 632, 0, 628, 631, 634, 0, 645, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, 646,
	653, 654, 655, 656, 657, 658, 659, 660, 0, 1412,
	0, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1169, 86,
	0, 1339, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 629, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 0, 0, 0, 0, 0, 0, 0, 1372, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 1466, 1467, 1169, 1077, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1238, 0, 0, 0, 0,
	0, 0, 0, 0, 794, 0, 0, 0, 0, 0,
	0, 0, 419, 409, 0, 379, 421, 356, 371, 429,
	372, 373, 401, 342, 387, 145, 368, 91, 359, 337,
	365, 338, 357, 381, 112, 355, 411, 390, 124, 427,
	127, 395, 0, 166, 136, 0, 0, 383, 413, 385,
	407, 378, 402, 347, 394, 422, 369, 398, 423, 0,
	0, 0, 333, 0, 853, 854, 0, 0, 86, 0,
	0, 104, 0, 397, 418, 367, 400, 336, 396, 0,
	340, 343, 428, 416, 362, 363, 1029, 0, 0, 0,
	0, 0, 0, 382, 386, 404, 376, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 0, 393, 0, 0,
	1311, 344, 341, 0, 380, 0, 0, 0, 346, 0,
	361, 405, 0, 335, 408, 414, 377, 191, 417, 375,
	374, 152, 0, 107, 0, 170, 116, 370, 125, 403,
	420, 384, 412, 358, 366, 108, 364, 159, 146, 182,
	392, 147, 157, 128, 174, 153, 181, 192, 193, 172,
	190, 161, 99, 142, 89, 151, 158, 0, 0, 0,
	92, 171, 180, 105, 162, 95, 178, 168, 169, 134,
	120, 121, 164, 93, 94, 0, 156, 111, 150, 115,
	110, 144, 175, 176, 109, 201, 100, 188, 189, 97,
	101, 187, 141, 186, 173, 179, 135, 132, 96, 177,
	133, 131, 123, 0, 113, 117, 148, 130, 149, 118,
	138, 137, 139, 0, 143, 0, 339, 0, 167, 184,
	202, 203, 354, 415, 194, 195, 196, 197, 0, 0,
	0, 140, 102, 119, 163, 122, 129, 155, 200, 399,
	160, 106, 183, 165, 350, 353, 348, 349, 388, 389,
	424, 425, 426, 406, 345, 0, 351, 352, 0, 410,
	391, 90, 98, 126, 198, 199, 0, 154, 114, 185,
	0, 103, 0, 419, 409, 0, 379, 421, 356, 371,
	429, 372, 373, 401, 342, 387, 145, 368, 91, 359,
	337, 365, 338, 357, 381, 112, 355, 411, 390, 124,
	427, 127, 395, 0, 166, 136, 0, 0, 383, 413,
	385, 407, 378, 402, 347, 394, 422, 369, 398, 423,
	0, 0, 0, 333, 1454, 853, 854, 0, 0, 0,
	0, 0, 104, 0, 397, 418, 367, 400, 336, 396,
	0, 340, 343, 428, 416, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 382, 386, 404, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 360, 0, 393, 0,
	0, 0, 344, 341, 0, 380, 0, 0, 0, 346,
	0, 361, 405, 0, 335, 408, 414, 377, 191, 417,
	375, 374, 152, 0, 107, 0, 170, 116, 370, 125,
	403, 420, 384, 412, 358, 366, 108, 364, 159, 146,
	182, 392, 147, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 180, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 101, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 339, 0, 167,
	184, 202, 203, 354, 415, 194, 195, 196, 197, 0,
	0, 0, 140, 102, 119, 163, 122, 129, 155, 200,
	399, 160, 106, 183, 165, 350, 353, 348, 349, 388,
	389, 424, 425, 426, 406, 345, 0, 351, 352, 0,
	410, 391, 90, 98, 126, 198, 199, 0, 154, 114,
	185, 0, 103, 419, 409, 0, 379, 421, 356, 371,
	429, 372, 373, 401, 342, 387, 145, 368, 91, 359,
	337, 365, 338, 357, 381, 112, 355, 411, 390, 124,
	427, 127, 395, 0, 166, 136, 0, 0, 383, 413,
	385, 407, 378, 402, 347, 394, 422, 369, 398, 423,
	0, 0, 0, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 397, 418, 367, 400, 336, 396,
	0, 340, 343, 428, 416, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 382, 386, 404, 376, 0, 0,
	0, 0, 0, 0, 1128, 0, 360, 0, 393, 0,
	0, 0, 344, 341, 0, 380, 0, 0, 0, 346,
	0, 361, 405, 0, 335, 408, 414, 377, 191, 417,
	375, 374, 152, 0, 107, 0, 170, 116, 370, 125,
	403, 420, 384, 412, 358, 366, 108, 364, 159, 146,
	182, 392, 147, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 180, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 101, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 339, 0, 167,
	184, 202, 203, 354, 415, 194, 195, 196, 197, 0,
	0, 0, 140, 102, 119, 163, 122, 129, 155, 200,
	399, 160, 106, 183, 165, 350, 353, 348, 349, 388,
	389, 424, 425, 426, 406, 345, 0, 351, 352, 0,
	410, 391, 90, 98, 126, 198, 199, 0, 154, 114,
	185, 0, 103, 419, 409, 0, 379, 421, 356, 371,
	429, 372, 373, 401, 342, 387, 145, 368, 91, 359,
	337, 365, 338, 357, 381, 112, 355, 411, 390, 124,
	427, 127, 395, 0, 166, 136, 0, 0, 383, 413,
	385, 407, 378, 402, 347, 394, 422, 369, 398, 423,
	50, 0, 0, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 397, 418, 367, 400, 336, 396,
	0, 340, 343, 428, 416, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 382, 386, 404, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 360, 0, 393, 0,
	0, 0, 344, 341, 0, 380, 0, 0, 0, 346,
	0, 361, 405, 0, 335, 408, 414, 377, 191, 417,
	375, 374, 152, 0, 107, 0, 170, 116, 370, 125,
	403, 420, 384, 412, 358, 366, 108, 364, 159, 146,
	182, 392, 147, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 180, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 101, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 339, 0, 167,
	184, 202, 203, 354, 415, 194, 195, 196, 197, 0,
	0, 0, 140, 102, 119, 163, 122, 129, 155, 200,
	399, 160, 106, 183, 165, 350, 353, 348, 349, 388,
	389, 424, 425, 426, 406, 345, 0, 351, 352, 0,
	410, 391, 90, 98, 126, 198, 199, 0, 154, 114,
	185, 0, 103, 419, 409, 0, 379, 421, 356, 371,
	429, 372, 373, 401, 342, 387, 145, 368, 91, 359,
	337, 365, 338, 357, 381, 112, 355, 411, 390, 124,
	427, 127, 395, 0, 166, 136, 0, 0, 383, 413,
	385, 407, 378, 402, 347, 394, 422, 369, 398, 423,
	0, 0, 0, 253, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 397, 418, 367, 400, 336, 396,
	0, 340, 343, 428, 416, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 382, 386, 404, 376, 0, 0,
	0, 0, 0, 0, 748, 0, 360, 0, 393, 0,
	0, 0, 344, 341, 0, 380, 0, 0, 0, 346,
	0, 361, 405, 0, 335, 408, 414, 377, 191, 417,
	375, 374, 152, 0, 107, 0, 170, 116, 370, 125,
	403, 420, 384, 412, 358, 366, 108, 364, 159, 146,
	182, 392, 147, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 180, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 101, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 339, 0, 167,
	184, 202, 203, 354, 415, 194, 195, 196, 197, 0,
	0, 0, 140, 102, 119, 163, 122, 129, 155, 200,
	399, 160, 106, 183, 165, 350, 353, 348, 349, 388,
	389, 424, 425, 426, 406, 345, 0, 351, 352, 0,
	410, 391, 90, 98, 126, 198, 199, 0, 154, 114,
	185, 0, 103, 419, 409, 0, 379, 421, 356, 371,
	429, 372, 373, 401, 342, 387, 145, 368, 91, 359,
	337, 365, 338, 357, 381, 112, 355, 411, 390, 124,
	427, 127, 395, 0, 166, 136, 0, 0, 383, 413,
	385, 407, 378, 402, 347, 394, 422, 369, 398, 423,
	0, 0, 0, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 397, 418, 367, 400, 336, 396,
	0, 340, 343, 428, 416, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 382, 386, 404, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 360, 0, 393, 0,
	0, 0, 344, 341, 0, 380, 0, 0, 0, 346,
	0, 361, 405, 0, 335, 408, 414, 377, 191, 417,
	375, 374, 152, 0, 107, 0, 170, 116, 370, 125,
	403, 420, 384, 412, 358, 366, 108, 364, 159, 146,
	182, 392, 147, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 180, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 101, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 339, 0, 167,
	184, 202, 203, 354, 415, 194, 195, 196, 197, 0,
	0, 0, 140, 102, 119, 163, 122, 129, 155, 200,
	399, 160, 106, 183, 165, 350, 353, 348, 349, 388,
	389, 424, 425, 426, 406, 345, 0, 351, 352, 0,
	410, 391, 90, 98, 126, 198, 199, 0, 154, 114,
	185, 0, 103, 419, 409, 0, 379, 421, 356, 371,
	429, 372, 373, 401, 342, 387, 145, 368, 91, 359,
	337, 365, 338, 357, 381, 112, 355, 411, 390, 124,
	427, 127, 395, 0, 166, 136, 0, 0, 383, 413,
	385, 407, 378, 402, 347, 394, 422, 369, 398, 423,
	0, 0, 0, 253, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 397, 418, 367, 400, 336, 396,
	0, 340, 343, 428, 416, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 382, 386, 404, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 360, 0, 393, 0,
	0, 0, 344, 341, 0, 380, 0, 0, 0, 346,
	0, 361, 405, 0, 335, 408, 414, 377, 191, 417,
	375, 374, 152, 0, 107, 0, 170, 116, 370, 125,
	403, 420, 384, 412, 358, 366, 108, 364, 159, 146,
	182, 392, 147, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 180, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 101, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 339, 0, 167,
	184, 202, 203, 354, 415, 194, 195, 196, 197, 0,
	0, 0, 140, 102, 119, 163, 122, 129, 155, 200,
	399, 160, 106, 183, 165, 350, 353, 348, 349, 388,
	389, 424, 425, 426, 406, 345, 0, 351, 352, 0,
	410, 391, 90, 98, 126, 198, 199, 0, 154, 114,
	185, 0, 103, 419, 409, 0, 379, 421, 356, 371,
	429, 372, 373, 401, 342, 387, 145, 368, 91, 359,
	337, 365, 338, 357, 381, 112, 355, 411, 390, 124,
	427, 127, 395, 0, 166, 136, 0, 0, 383, 413,
	385, 407, 378, 402, 347, 394, 422, 369, 398, 423,
	0, 0, 0, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 397, 418, 367, 400, 336, 396,
	0, 340, 343, 428, 416, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 382, 386, 404, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 360, 0, 393, 0,
	0, 0, 344, 341, 0, 380, 0, 0, 0, 346,
	0, 361, 405, 0, 335, 408, 414, 377, 191, 417,
	375, 374, 152, 0, 107, 0, 170, 116, 370, 125,
	403, 420, 384, 412, 358, 366, 108, 364, 159, 146,
	182, 392, 147, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 180, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 331, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 339, 0, 167,
	184, 202, 203, 354, 415, 194, 195, 196, 197, 0,
	0, 0, 332, 330, 119, 163, 122, 129, 155, 200,
	399, 160, 106, 183, 165, 350, 353, 348, 349, 388,
	389, 424, 425, 426, 406, 345, 0, 351, 352, 0,
	410, 391, 90, 98, 126, 198, 199, 0, 154, 114,
	185, 0, 103, 419, 409, 0, 379, 421, 356, 371,
	429, 372, 373, 401, 342, 387, 145, 368, 91, 359,
	337, 365, 338, 357, 381, 112, 355, 411, 390, 124,
	427, 127, 395, 0, 166, 136, 0, 0, 383, 413,
	385, 407, 378, 402, 347, 394, 422, 369, 398, 423,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 397, 418, 367, 400, 336, 396,
	0, 340, 343, 428, 416, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 382, 386, 404, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 360, 0, 393, 0,
	0, 0, 344, 341, 0, 380, 0, 0, 0, 346,
	0, 361, 405, 0, 335, 408, 414, 377, 191, 417,
	375, 374, 152, 0, 107, 0, 170, 116, 370, 125,
	403, 420, 384, 412, 358, 366, 108, 364, 159, 146,
	182, 392, 147, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 180, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 101, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 339, 0, 167,
	184, 202, 203, 354, 415, 194, 195, 196, 197, 0,
	0, 0, 140, 102, 119, 163, 122, 129, 155, 200,
	399, 160, 106, 183, 165, 350, 353, 348, 349, 388,
	389, 424, 425, 426, 406, 345, 0, 351, 352, 0,
	410, 391, 90, 98, 126, 198, 199, 0, 154, 114,
	185, 0, 103, 419, 409, 0, 379, 421, 356, 371,
	429, 372, 373, 401, 342, 387, 145, 368, 91, 359,
	337, 365, 338, 357, 381, 112, 355, 411, 390, 124,
	427, 127, 395, 0, 166, 136, 0, 0, 383, 413,
	385, 407, 378, 402, 347, 394, 422, 369, 398, 423,
	0, 0, 0, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 397, 418, 367, 400, 336, 396,
	0, 340, 343, 428, 416, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 382, 386, 404, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 360, 0, 393, 0,
	0, 0, 344, 341, 0, 380, 0, 0, 0, 346,
	0, 361, 405, 0, 335, 408, 414, 377, 191, 417,
	375, 374, 152, 0, 107, 0, 170, 116, 370, 125,
	403, 420, 384, 412, 358, 366, 108, 364, 159, 146,
	182, 392, 147, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 606, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 331, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 339, 0, 167,
	184, 202, 203, 354, 415, 194, 195, 196, 197, 0,
	0, 0, 332, 330, 119, 163, 122, 129, 155, 200,
	399, 160, 106, 183, 165, 350, 353, 348, 349, 388,
	389, 424, 425, 426, 406, 345, 0, 351, 352, 0,
	410, 391, 90, 98, 126, 198, 199, 0, 154, 114,
	185, 0, 103, 419, 409, 0, 379, 421, 356, 371,
	429, 372, 373, 401, 342, 387, 145, 368, 91, 359,
	337, 365, 338, 357, 381, 112, 355, 411, 390, 124,
	427, 127, 395, 0, 166, 136, 0, 0, 383, 413,
	385, 407, 378, 402, 347, 394, 422, 369, 398, 423,
	0, 0, 0, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 397, 418, 367, 400, 336, 396,
	0, 340, 343, 428, 416, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 382, 386, 404, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 360, 0, 393, 0,
	0, 0, 344, 341, 0, 380, 0, 0, 0, 346,
	0, 361, 405, 0, 335, 408, 414, 377, 191, 417,
	375, 374, 152, 0, 107, 0, 170, 116, 370, 125,
	403, 420, 384, 412, 358, 366, 108, 364, 159, 146,
	182, 392, 147, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 322, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 331, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 339, 0, 167,
	184, 202, 203, 354, 415, 194, 195, 196, 197, 0,
	0, 0, 332, 330, 325, 324, 122, 129, 155, 200,
	399, 160, 106, 183, 165, 350, 353, 348, 349, 388,
	389, 424, 425, 426, 406, 345, 0, 351, 352, 0,
	410, 391, 90, 98, 126, 198, 199, 0, 154, 114,
	185, 145, 103, 91, 781, 0, 255, 0, 0, 0,
	112, 252, 0, 0, 124, 294, 127, 0, 0, 166,
	136, 0, 0, 0, 0, 285, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 253, 273,
	272, 275, 276, 277, 278, 0, 0, 104, 274, 279,
	280, 281, 0, 0, 250, 266, 0, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 246,
	0, 0, 0, 306, 0, 265, 0, 0, 261, 262,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 304, 152, 0, 107,
	0, 170, 116, 0, 125, 0, 0, 0, 0, 0,
	0, 108, 0, 159, 146, 182, 0, 147, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 180, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 101, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 0, 0, 167, 184, 202, 203, 0, 0,
	194, 195, 196, 197, 0, 0, 0, 140, 102, 119,
	163, 122, 129, 155, 200, 0, 160, 106, 183, 165,
	295, 305, 301, 302, 299, 300, 298, 297, 296, 307,
	287, 288, 289, 290, 292, 0, 291, 90, 98, 126,
	198, 199, 0, 154, 114, 185, 303, 103, 145, 0,
	91, 0, 0, 255, 0, 0, 0, 112, 252, 0,
	0, 124, 294, 127, 0, 0, 166, 136, 0, 0,
	0, 0, 285, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 476, 253, 273, 272, 275, 276,
	277, 278, 0, 0, 104, 274, 279, 280, 281, 0,
	0, 250, 266, 0, 293, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 0, 0, 0, 0,
	306, 0, 265, 0, 0, 261, 262, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 304, 152, 0, 107, 0, 170, 116,
	0, 125, 0, 0, 0, 0, 0, 0, 108, 0,
	159, 146, 182, 0, 147, 157, 128, 174, 153, 181,
	192, 193, 172, 190, 161, 99, 142, 89, 151, 158,
	0, 0, 0, 92, 171, 180, 105, 162, 95, 178,
	168, 169, 134, 120, 121, 164, 93, 94, 0, 156,
	111, 150, 115, 110, 144, 175, 176, 109, 201, 100,
	188, 189, 97, 101, 187, 141, 186, 173, 179, 135,
	132, 96, 177, 133, 131, 123, 0, 113, 117, 148,
	130, 149, 118, 138, 137, 139, 0, 143, 0, 0,
	0, 167, 184, 202, 203, 0, 0, 194, 195, 196,
	197, 0, 0, 0, 140, 102, 119, 163, 122, 129,
	155, 200, 0, 160, 106, 183, 165, 295, 305, 301,
	302, 299, 300, 298, 297, 296, 307, 287, 288, 289,
	290, 292, 0, 291, 90, 98, 126, 198, 199, 0,
	154, 114, 185, 303, 103, 145, 0, 91, 0, 0,
	255, 0, 0, 0, 112, 252, 0, 0, 124, 294,
	127, 0, 0, 166, 136, 0, 0, 0, 0, 285,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 253, 273, 272, 275, 276, 277, 278, 0,
	0, 104, 274, 279, 280, 281, 0, 0, 250, 266,
	0, 293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 246, 0, 0, 0, 306, 0, 265,
	0, 0, 261, 262, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	304, 152, 0, 107, 0, 170, 116, 0, 125, 0,
	0, 0, 0, 0, 0, 108, 0, 159, 146, 182,
	0, 147, 157, 128, 174, 153, 181, 192, 193, 172,
	190, 161, 99, 142, 89, 151, 158, 0, 0, 0,
	92, 171, 180, 105, 162, 95, 178, 168, 169, 134,
	120, 121, 164, 93, 94, 0, 156, 111, 150, 115,
	110, 144, 175, 176, 109, 201, 100, 188, 189, 97,
	101, 187, 141, 186, 173, 179, 135, 132, 96, 177,
	133, 131, 123, 0, 113, 117, 148, 130, 149, 118,
	138, 137, 139, 0, 143, 0, 0, 0, 167, 184,
	202, 203, 0, 0, 194, 195, 196, 197, 0, 0,
	0, 140, 102, 119, 163, 122, 129, 155, 200, 0,
	160, 106, 183, 165, 295, 305, 301, 302, 299, 300,
	298, 297, 296, 307, 287, 288, 289, 290, 292, 0,
	291, 90, 98, 126, 198, 199, 0, 154, 114, 185,
	303, 103, 145, 0, 91, 0, 0, 255, 0, 0,
	0, 112, 252, 0, 0, 124, 294, 127, 0, 0,
	166, 136, 0, 0, 0, 0, 285, 286, 0, 0,
	0, 0, 0, 0, 844, 0, 50, 0, 0, 253,
	273, 272, 275, 276, 277, 278, 0, 0, 104, 274,
	279, 280, 281, 0, 0, 250, 266, 0, 293, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	0, 0, 0, 0, 306, 0, 265, 0, 0, 261,
	262, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 304, 152, 0,
	107, 0, 170, 116, 0, 125, 0, 0, 0, 0,
	0, 0, 108, 0, 159, 146, 182, 0, 147, 157,
	128, 174, 153, 181, 192, 193, 172, 190, 161, 99,
	142, 89, 151, 158, 0, 0, 0, 92, 171, 180,
	105, 162, 95, 178, 168, 169, 134, 120, 121, 164,
	93, 94, 0, 156, 111, 150, 115, 110, 144, 175,
	176, 109, 201, 100, 188, 189, 97, 101, 187, 141,
	186, 173, 179, 135, 132, 96, 177, 133, 131, 123,
	0, 113, 117, 148, 130, 149, 118, 138, 137, 139,
	0, 143, 0, 0, 0, 167, 184, 202, 203, 0,
	0, 194, 195, 196, 197, 0, 0, 0, 140, 102,
	119, 163, 122, 129, 155, 200, 0, 160, 106, 183,
	165, 295, 305, 301, 302, 299, 300, 298, 297, 296,
	307, 287, 288, 289, 290, 292, 0, 291, 90, 98,
	126, 198, 199, 23, 154, 114, 185, 303, 103, 0,
	0, 0, 0, 0, 0, 145, 0, 91, 0, 0,
	255, 0, 0, 0, 112, 252, 0, 0, 124, 294,
	127, 0, 0, 166, 136, 0, 0, 0, 0, 285,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 253, 273, 272, 275, 276, 277, 278, 0,
	0, 104, 274, 279, 280, 281, 0, 0, 250, 266,
	0, 293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 0, 0, 0, 0, 306, 0, 265,
	0, 0, 261, 262, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	304, 152, 0, 107, 0, 170, 116, 0, 125, 0,
	0, 0, 0, 0, 0, 108, 0, 159, 146, 182,
	0, 147, 157, 128, 174, 153, 181, 192, 193, 172,
	190, 161, 99, 142, 89, 151, 158, 0, 0, 0,
	92, 171, 180, 105, 162, 95, 178, 168, 169, 134,
	120, 121, 164, 93, 94, 0, 156, 111, 150, 115,
	110, 144, 175, 176, 109, 201, 100, 188, 189, 97,
	101, 187, 141, 186, 173, 179, 135, 132, 96, 177,
	133, 131, 123, 0, 113, 117, 148, 130, 149, 118,
	138, 137, 139, 0, 143, 0, 0, 0, 167, 184,
	202, 203, 0, 0, 194, 195, 196, 197, 0, 0,
	0, 140, 102, 119, 163, 122, 129, 155, 200, 0,
	160, 106, 183, 165, 295, 305, 301, 302, 299, 300,
	298, 297, 296, 307, 287, 288, 289, 290, 292, 0,
	291, 90, 98, 126, 198, 199, 0, 154, 114, 185,
	303, 103, 145, 0, 91, 0, 0, 255, 0, 0,
	0, 112, 252, 0, 0, 124, 294, 127, 0, 0,
	166, 136, 0, 0, 0, 0, 285, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 253,
	273, 272, 275, 276, 277, 278, 0, 0, 104, 274,
	279, 280, 281, 0, 0, 250, 266, 0, 293, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	0, 0, 0, 0, 306, 0, 265, 0, 0, 261,
	262, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 304, 152, 0,
	107, 0, 170, 116, 0, 125, 0, 0, 0, 0,
	0, 0, 108, 0, 159, 146, 182, 0, 147, 157,
	128, 174, 153, 181, 192, 193, 172, 190, 161, 99,
	142, 89, 151, 158, 0, 0, 0, 92, 171, 180,
	105, 162, 95, 178, 168, 169, 134, 120, 121, 164,
	93, 94, 0, 156, 111, 150, 115, 110, 144, 175,
	176, 109, 201, 100, 188, 189, 97, 101, 187, 141,
	186, 173, 179, 135, 132, 96, 177, 133, 131, 123,
	0, 113, 117, 148, 130, 149, 118, 138, 137, 139,
	0, 143, 0, 0, 0, 167, 184, 202, 203, 0,
	0, 194, 195, 196, 197, 0, 0, 0, 140, 102,
	119, 163, 122, 129, 155, 200, 0, 160, 106, 183,
	165, 295, 305, 301, 302, 299, 300, 298, 297, 296,
	307, 287, 288, 289, 290, 292, 0, 291, 90, 98,
	126, 198, 199, 0, 154, 114, 185, 303, 103, 145,
	0, 91, 0, 0, 0, 0, 0, 0, 112, 0,
	0, 0, 124, 294, 127, 0, 0, 166, 136, 0,
	0, 0, 0, 285, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 253, 273, 272, 275,
	276, 277, 278, 0, 0, 104, 274, 279, 280, 281,
	0, 0, 0, 266, 0, 293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 0, 0, 0,
	0, 306, 0, 265, 0, 0, 261, 262, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 304, 152, 0, 107, 0, 170,
	116, 0, 125, 0, 0, 0, 0, 0, 0, 108,
	0, 159, 146, 182, 1464, 147, 157, 128, 174, 153,
	181, 192, 193, 172, 190, 161, 99, 142, 89, 151,
	158, 0, 0, 0, 92, 171, 180, 105, 162, 95,
	178, 168, 169, 134, 120, 121, 164, 93, 94, 0,
	156, 111, 150, 115, 110, 144, 175, 176, 109, 201,
	100, 188, 189, 97, 101, 187, 141, 186, 173, 179,
	135, 132, 96, 177, 133, 131, 123, 0, 113, 117,
	148, 130, 149, 118, 138, 137, 139, 0, 143, 0,
	0, 0, 167, 184, 202, 203, 0, 0, 194, 195,
	196, 197, 0, 0, 0, 140, 102, 119, 163, 122,
	129, 155, 200, 0, 160, 106, 183, 165, 295, 305,
	301, 302, 299, 300, 298, 297, 296, 307, 287, 288,
	289, 290, 292, 0, 291, 90, 98, 126, 198, 199,
	0, 154, 114, 185, 303, 103, 145, 0, 91, 0,
	0, 0, 0, 0, 0, 112, 0, 0, 0, 124,
	294, 127, 0, 0, 166, 136, 0, 0, 0, 0,
	285, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 253, 273, 272, 275, 276, 277, 278,
	0, 0, 104, 274, 279, 280, 281, 0, 0, 0,
	266, 0, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 0, 0, 0, 0, 306, 0,
	265, 0, 0, 261, 262, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 304, 152, 0, 107, 0, 170, 116, 0, 125,
	0, 0, 0, 0, 0, 0, 108, 0, 159, 146,
	182, 0, 147, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 180, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 101, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 0, 0, 167,
	184, 202, 203, 0, 0, 194, 195, 196, 197, 0,
	0, 0, 140, 102, 119, 163, 122, 129, 155, 200,
	0, 160, 106, 183, 165, 295, 305, 301, 302, 299,
	300, 298, 297, 296, 307, 287, 288, 289, 290, 292,
	0, 291, 90, 98, 126, 198, 199, 0, 154, 114,
	185, 303, 103, 145, 0, 91, 0, 0, 0, 0,
	0, 0, 112, 0, 0, 0, 124, 0, 127, 0,
	0, 166, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 511, 510, 520, 521, 513,
	514, 515, 516, 517, 518, 519, 512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 152,
	0, 107, 0, 170, 116, 0, 125, 0, 0, 0,
	0, 0, 0, 108, 0, 159, 146, 182, 0, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 0, 0, 0, 92, 171,
	180, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 101, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 0, 0, 167, 184, 202, 203,
	0, 0, 194, 195, 196, 197, 0, 0, 0, 140,
	102, 119, 163, 122, 129, 155, 200, 0, 160, 106,
	183, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	98, 126, 198, 199, 0, 154, 114, 185, 145, 103,
	91, 0, 499, 0, 0, 0, 0, 112, 0, 0,
	0, 124, 0, 127, 0, 0, 166, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 0, 501, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 495,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 152, 0, 107, 0, 170, 116,
	0, 125, 0, 0, 0, 0, 0, 0, 108, 0,
	159, 146, 182, 0, 147, 157, 128, 174, 153, 181,
	192, 193, 172, 190, 161, 99, 142, 89, 151, 158,
	0, 0, 0, 92, 171, 180, 105, 162, 95, 178,
	168, 169, 134, 120, 121, 164, 93, 94, 0, 156,
	111, 150, 115, 110, 144, 175, 176, 109, 201, 100,
	188, 189, 97, 101, 187, 141, 186, 173, 179, 135,
	132, 96, 177, 133, 131, 123, 0, 113, 117, 148,
	130, 149, 118, 138, 137, 139, 0, 143, 0, 0,
	0, 167, 184, 202, 203, 0, 0, 194, 195, 196,
	197, 0, 0, 0, 140, 102, 119, 163, 122, 129,
	155, 200, 0, 160, 106, 183, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 98, 126, 198, 199, 0,
	154, 114, 185, 497, 103, 145, 0, 91, 0, 595,
	0, 0, 0, 0, 112, 0, 0, 0, 124, 0,
	127, 0, 0, 166, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 597, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 152, 0, 107, 0, 170, 116, 0, 125, 0,
	0, 0, 0, 0, 0, 108, 0, 159, 146, 182,
	0, 147, 157, 128, 174, 153, 181, 192, 193, 172,
	190, 161, 99, 142, 89, 151, 158, 0, 0, 0,
	92, 171, 180, 105, 162, 95, 178, 168, 169, 134,
	120, 121, 164, 93, 94, 0, 156, 111, 150, 115,
	110, 144, 175, 176, 109, 201, 100, 188, 189, 97,
	101, 187, 141, 186, 173, 179, 135, 132, 96, 177,
	133, 131, 123, 0, 113, 117, 148, 130, 149, 118,
	138, 137, 139, 0, 143, 0, 0, 0, 167, 184,
	202, 203, 0, 0, 194, 195, 196, 197, 0, 0,
	0, 140, 102, 119, 163, 122, 129, 155, 200, 0,
	160, 106, 183, 165, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 145, 0, 91,
	0, 90, 98, 126, 198, 199, 112, 154, 114, 185,
	124, 103, 127, 0, 0, 166, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 333, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 152, 0, 107, 0, 170, 116, 0,
	125, 0, 0, 0, 0, 0, 0, 108, 0, 159,
	146, 182, 0, 147, 157, 128, 174, 153, 181, 192,
	193, 172, 190, 161, 99, 142, 89, 151, 158, 0,
	0, 0, 92, 171, 180, 105, 162, 95, 178, 168,
	169, 134, 120, 121, 164, 93, 94, 0, 156, 111,
	150, 115, 110, 144, 175, 176, 109, 201, 100, 188,
	189, 97, 101, 187, 141, 186, 173, 179, 135, 132,
	96, 177, 133, 131, 123, 0, 113, 117, 148, 130,
	149, 118, 138, 137, 139, 0, 143, 0, 0, 0,
	167, 184, 202, 203, 0, 0, 194, 195, 196, 197,
	0, 0, 0, 140, 102, 119, 163, 122, 129, 155,
	200, 0, 160, 106, 183, 165, 0, 23, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 145,
	0, 91, 0, 90, 98, 126, 198, 199, 112, 154,
	114, 185, 124, 103, 127, 0, 0, 166, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 152, 0, 107, 0, 170,
	116, 0, 125, 0, 0, 0, 0, 0, 0, 108,
	0, 159, 146, 182, 0, 147, 157, 128, 174, 153,
	181, 192, 193, 172, 190, 161, 99, 142, 89, 151,
	158, 0, 0, 0, 92, 171, 180, 105, 162, 95,
	178, 168, 169, 134, 120, 121, 164, 93, 94, 0,
	156, 111, 150, 115, 110, 144, 175, 176, 109, 201,
	100, 188, 189, 97, 101, 187, 141, 186, 173, 179,
	135, 132, 96, 177, 133, 131, 123, 0, 113, 117,
	148, 130, 149, 118, 138, 137, 139, 0, 143, 0,
	0, 0, 167, 184, 202, 203, 0, 0, 194, 195,
	196, 197, 0, 0, 0, 140, 102, 119, 163, 122,
	129, 155, 200, 0, 160, 106, 183, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 0, 91, 0, 90, 98, 126, 198, 199,
	112, 154, 114, 185, 124, 103, 127, 0, 0, 166,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 333, 0,
	0, 727, 0, 0, 728, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 152, 0, 107,
	0, 170, 116, 0, 125, 0, 0, 0, 0, 0,
	0, 108, 0, 159, 146, 182, 0, 147, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 180, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 101, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 0, 0, 167, 184, 202, 203, 0, 0,
	194, 195, 196, 197, 0, 0, 0, 140, 102, 119,
	163, 122, 129, 155, 200, 0, 160, 106, 183, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 98, 126,
	198, 199, 0, 154, 114, 185, 145, 103, 91, 0,
	0, 0, 0, 0, 0, 112, 615, 0, 0, 124,
	0, 127, 0, 0, 166, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 333, 0, 614, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 0, 152, 0, 107, 0, 170, 116, 0, 125,
	0, 0, 0, 0, 0, 0, 108, 0, 159, 146,
	182, 0, 147, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 180, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 101, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 0, 0, 167,
	184, 202, 203, 0, 0, 194, 195, 196, 197, 0,
	0, 0, 140, 102, 119, 163, 122, 129, 155, 200,
	0, 160, 106, 183, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 98, 126, 198, 199, 0, 154, 114,
	185, 145, 103, 91, 0, 595, 0, 0, 0, 0,
	112, 0, 0, 0, 124, 0, 127, 0, 0, 166,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	597, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 152, 0, 107,
	0, 170, 116, 0, 125, 0, 0, 0, 0, 0,
	0, 108, 0, 159, 146, 182, 0, 593, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 180, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 101, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 0, 0, 167, 184, 202, 203, 0, 0,
	194, 195, 196, 197, 0, 0, 0, 140, 102, 119,
	163, 122, 129, 155, 200, 0, 160, 106, 183, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 145, 0, 91, 0, 90, 98, 126,
	198, 199, 112, 154, 114, 185, 124, 103, 127, 0,
	0, 166, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 152,
	0, 107, 0, 170, 116, 0, 125, 0, 0, 0,
	0, 0, 0, 108, 0, 159, 146, 182, 0, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 0, 0, 0, 92, 171,
	180, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 101, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 0, 0, 167, 184, 202, 203,
	0, 0, 194, 195, 196, 197, 0, 0, 0, 140,
	102, 119, 163, 122, 129, 155, 200, 0, 160, 106,
	183, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 145, 0, 91, 0, 90,
	98, 126, 198, 199, 112, 154, 114, 185, 124, 103,
	127, 0, 0, 166, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 597, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 152, 0, 107, 0, 170, 116, 0, 125, 0,
	0, 0, 0, 0, 0, 108, 0, 159, 146, 182,
	0, 147, 157, 128, 174, 153, 181, 192, 193, 172,
	190, 161, 99, 142, 89, 151, 158, 0, 0, 0,
	92, 171, 180, 105, 162, 95, 178, 168, 169, 134,
	120, 121, 164, 93, 94, 0, 156, 111, 150, 115,
	110, 144, 175, 176, 109, 201, 100, 188, 189, 97,
	101, 187, 141, 186, 173, 179, 135, 132, 96, 177,
	133, 131, 123, 0, 113, 117, 148, 130, 149, 118,
	138, 137, 139, 0, 143, 0, 0, 0, 167, 184,
	202, 203, 0, 0, 194, 195, 196, 197, 0, 0,
	0, 140, 102, 119, 163, 122, 129, 155, 200, 0,
	160, 106, 183, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 145, 0, 91,
	0, 90, 98, 126, 198, 199, 112, 154, 114, 185,
	124, 103, 127, 0, 0, 166, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 0, 501, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 152, 0, 107, 0, 170, 116, 0,
	125, 0, 0, 0, 0, 0, 0, 108, 0, 159,
	146, 182, 0, 147, 157, 128, 174, 153, 181, 192,
	193, 172, 190, 161, 99, 142, 89, 151, 158, 0,
	0, 0, 92, 171, 180, 105, 162, 95, 178, 168,
	169, 134, 120, 121, 164, 93, 94, 0, 156, 111,
	150, 115, 110, 144, 175, 176, 109, 201, 100, 188,
	189, 97, 101, 187, 141, 186, 173, 179, 135, 132,
	96, 177, 133, 131, 123, 0, 113, 117, 148, 130,
	149, 118, 138, 137, 139, 0, 143, 0, 0, 0,
	167, 184, 202, 203, 0, 0, 194, 195, 196, 197,
	0, 0, 0, 140, 102, 119, 163, 122, 129, 155,
	200, 0, 160, 106, 183, 165, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 145,
	0, 91, 0, 90, 98, 126, 198, 199, 112, 154,
	114, 185, 124, 103, 127, 0, 0, 166, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 152, 0, 107, 0, 170,
	116, 0, 125, 0, 0, 0, 0, 0, 0, 108,
	0, 159, 146, 182, 0, 147, 157, 128, 174, 153,
	181, 192, 193, 172, 190, 161, 99, 142, 89, 151,
	158, 0, 0, 0, 92, 171, 180, 105, 162, 95,
	178, 168, 169, 134, 120, 121, 164, 93, 94, 0,
	156, 111, 150, 115, 110, 144, 175, 176, 109, 201,
	100, 188, 189, 97, 101, 187, 141, 186, 173, 179,
	135, 132, 96, 177, 133, 131, 123, 0, 113, 117,
	148, 130, 149, 118, 138, 137, 139, 0, 143, 0,
	0, 0, 167, 184, 202, 203, 0, 0, 194, 195,
	196, 197, 0, 0, 0, 140, 102, 119, 163, 122,
	129, 155, 200, 687, 160, 106, 183, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 98, 126, 198, 199,
	0, 154, 114, 185, 145, 103, 91, 0, 0, 0,
	0, 0, 573, 112, 0, 0, 0, 124, 0, 127,
	0, 0, 166, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	152, 0, 107, 0, 170, 116, 0, 125, 0, 0,
	0, 0, 0, 0, 108, 0, 159, 146, 182, 0,
	147, 157, 128, 174, 153, 181, 192, 193, 172, 190,
	161, 99, 142, 89, 151, 158, 0, 0, 0, 92,
	171, 180, 105, 162, 95, 178, 168, 169, 134, 120,
	121, 164, 93, 94, 0, 156, 111, 150, 115, 110,
	144, 175, 176, 109, 201, 100, 188, 189, 97, 101,
	187, 141, 186, 173, 179, 135, 132, 96, 177, 133,
	131, 123, 0, 113, 117, 148, 130, 149, 118, 138,
	137, 139, 0, 143, 0, 0, 0, 167, 184, 202,
	203, 0, 0, 194, 195, 196, 197, 0, 0, 0,
	140, 102, 119, 163, 122, 129, 155, 200, 0, 160,
	106, 183, 165, 0, 0, 0, 0, 0, 0, 317,
	0, 0, 0, 0, 0, 0, 145, 0, 91, 0,
	90, 98, 126, 198, 199, 112, 154, 114, 185, 124,
	103, 127, 0, 0, 166, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 0, 152, 0, 107, 0, 170, 116, 0, 125,
	0, 0, 0, 0, 0, 0, 108, 0, 159, 146,
	182, 0, 147, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 180, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 101, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 0, 0, 167,
	184, 202, 203, 0, 0, 194, 195, 196, 197, 0,
	0, 0, 140, 102, 119, 163, 122, 129, 155, 200,
	0, 160, 106, 183, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 145, 0,
	91, 0, 90, 98, 126, 198, 199, 112, 154, 114,
	185, 124, 103, 127, 0, 0, 166, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	191, 0, 0, 0, 152, 0, 107, 0, 170, 116,
	0, 125, 0, 0, 0, 0, 0, 0, 108, 0,
	159, 146, 182, 0, 147, 157, 128, 174, 153, 181,
	192, 193, 172, 190, 161, 99, 142, 89, 151, 158,
	0, 0, 0, 92, 171, 180, 105, 162, 95, 178,
	168, 169, 134, 120, 121, 164, 93, 94, 0, 156,
	111, 150, 115, 110, 144, 175, 176, 109, 201, 100,
	188, 189, 97, 101, 187, 141, 186, 173, 179, 135,
	132, 96, 177, 133, 131, 123, 0, 113, 117, 148,
	130, 149, 118, 138, 137, 139, 0, 143, 0, 0,
	0, 167, 184, 202, 203, 0, 0, 194, 195, 196,
	197, 0, 0, 0, 140, 102, 119, 163, 122, 129,
	155, 200, 0, 160, 106, 183, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	145, 0, 91, 0, 90, 98, 126, 198, 199, 112,
	154, 114, 185, 124, 103, 127, 0, 0, 166, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 333, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 0, 152, 0, 107, 0,
	170, 116, 0, 125, 0, 0, 0, 0, 0, 0,
	108, 0, 159, 146, 182, 0, 147, 157, 128, 174,
	153, 181, 192, 193, 172, 190, 161, 99, 142, 89,
	151, 158, 0, 0, 0, 92, 171, 180, 105, 162,
	95, 178, 168, 169, 134, 120, 121, 164, 93, 94,
	0, 156, 111, 150, 115, 110, 144, 175, 176, 109,
	201, 100, 188, 189, 97, 101, 187, 141, 186, 173,
	179, 135, 132, 96, 177, 133, 131, 123, 0, 113,
	117, 148, 130, 149, 118, 138, 137, 139, 0, 143,
	0, 0, 0, 167, 184, 202, 203, 0, 0, 194,
	195, 196, 197, 0, 0, 0, 140, 102, 119, 163,
	122, 129, 155, 200, 0, 160, 106, 183, 165, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 145, 0, 91, 0, 90, 98, 126, 198,
	199, 112, 154, 114, 185, 124, 103, 127, 0, 0,
	166, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 152, 0,
	107, 0, 170, 116, 0, 125, 0, 0, 0, 0,
	0, 0, 108, 0, 159, 146, 182, 0, 147, 157,
	128, 174, 153, 181, 192, 193, 172, 190, 161, 99,
	142, 89, 151, 158, 0, 0, 0, 92, 171, 180,
	105, 162, 95, 178, 168, 169, 134, 120, 121, 164,
	93, 94, 0, 156, 111, 150, 115, 110, 144, 175,
	176, 109, 201, 100, 188, 189, 97, 101, 187, 141,
	186, 173, 179, 135, 132, 96, 177, 133, 131, 123,
	0, 113, 117, 148, 130, 149, 118, 138, 137, 139,
	0, 143, 0, 0, 0, 167, 184, 202, 203, 0,
	0, 194, 195, 196, 197, 0, 0, 0, 140, 102,
	119, 163, 122, 129, 155, 200, 0, 160, 106, 183,
	165, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 0, 91, 0, 90, 98,
	126, 198, 199, 112, 154, 114, 185, 124, 103, 127,
	0, 0, 166, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	152, 0, 107, 0, 170, 116, 0, 125, 0, 0,
	0, 0, 0, 0, 108, 0, 159, 146, 182, 0,
	147, 157, 128, 174, 153, 181, 192, 193, 172, 190,
	161, 99, 142, 89, 151, 158, 0, 0, 0, 92,
	171, 180, 105, 162, 95, 178, 168, 169, 134, 120,
	121, 164, 93, 94, 0, 156, 111, 150, 115, 110,
	144, 175, 176, 109, 201, 100, 188, 189, 97, 101,
	187, 141, 186, 173, 179, 135, 132, 96, 177, 133,
	131, 123, 0, 113, 117, 148, 130, 149, 118, 138,
	137, 139, 0, 143, 0, 0, 0, 167, 184, 202,
	203, 0, 0, 194, 195, 196, 197, 0, 0, 0,
	140, 102, 119, 163, 122, 129, 155, 200, 0, 160,
	106, 183, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 98, 126, 198, 199, 0, 154, 114, 185, 0,
	103,
}
var yyPact = [...]int{

	170, -1000, -195, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 951, 984, -1000, -1000, -1000, -1000, -1000, -1000, 782,
	121, 193, 221, 49, 11290, 214, 1818, 11774, -1000, 79,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 712, -1000, -1000,
	-1000, -1000, -1000, 943, 947, 724, 935, 853, -1000, 6287,
	172, 9825, 11048, 5518, -1000, 575, 211, 11774, -98, 11532,
	175, 175, 11532, 175, -1000, 213, 11774, -1000, 11774, 173,
	570, 173, 173, 173, 11774, -1000, 259, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11774, 567, 905, 138, 3628, 3628,
	3628, 3628, 97, 3628, -50, 799, -1000, -1000, -1000, -1000,
	3628, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 485, 914, 7064, 7064, 951, -1000, 712, -1000, -1000,
	-1000, 897, -1000, -1000, 391, 971, -1000, 8090, 255, -1000,
	7064, 980, 723, -1000, -1000, 723, -1000, -1000, 242, -1000,
	-1000, 7578, 7578, 7578, 7578, 7578, 7578, 7578, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 723, -1000, 6807, 723, 723, 723, 723, 723,
	723, 723, 723, 7064, 723, 723, 723, 723, 723, 723,
	723, 723, 723, 66, 723, 723, 723, 723, 10806, 675,
	861, -1000, -1000, -1000, 926, 8831, 9583, 11774, 699, -1000,
	716, 5248, -51, -1000, -1000, -1000, 348, 9328, -1000, -1000,
	-1000, 903, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	646, -1000, 2302, 11532, 3628, 184, 714, 564, 377, 562,
	797, 11774, 10551, 3628, 187, 11774, 924, 795, 11774, 532,
	530, -1000, 4978, -1000, 3628, 3628, 3628, 3628, 3628, 3628,
	3628, 3628, -1000, -1000, -1000, -1000, -1000, -1000, 3628, 3628,
	-1000, -20, -1000, 11774, -1000, -1000, -1000, -1000, 983, 303,
	65, 254, 720, -1000, 95, 943, 485, 853, 9073, 817,
	-1000, -1000, 11774, -1000, 7064, 7064, 428, 161, -1000, 10309,
	-1000, -1000, 3898, 3, 7578, 436, 322, 7578, 7578, 7578,
	7578, 7578, 7578, 7578, 7578, 7578, 7578, 7578, 7578, 7578,
	7578, 7578, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	527, -1000, 712, 815, 815, -1000, -1000, -1000, -1000, -1000,
	-1000, 7835, 5773, 485, 638, 74, 6807, 6287, 6287, 7064,
	7064, 12016, 12016, 6287, 930, 358, 74, 12016, -1000, 485,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6287, 6287,
	6287, 6287, 116, 11774, -1000, 12016, 9825, 9825, 9825, 9825,
	9825, -1000, 839, 828, -1000, 812, 810, 821, 11774, -1000,
	633, 8831, 275, 723, -1000, 10067, -1000, -1000, 116, 652,
	9825, 11774, -1000, -1000, 4708, 716, -51, 685, -1000, -65,
	-69, 6544, 286, -1000, -1000, -1000, -1000, 3088, 615, 402,
	-134, -15, -1000, -1000, -1000, -1000, 736, -1000, -1000, -1000,
	736, 168, 736, 736, 736, 22, 22, 22, 22, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 754, 753, -1000, 736,
	736, 736, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 744, 183, 744, 741, 741, 752, -1000, 11774, -126,
	514, 3628, 916, 3628, 11774, -1000, 72, 11774, -1000, 11774,
	-1000, -1000, 11774, 3628, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 388,
	-1000, -1000, -1000, -1000, 876, 7064, 7064, 4438, 7064, -1000,
	-1000, -1000, 914, -1000, 930, 946, -1000, 896, 892, 6287,
	-1000, -1000, 3, 47, -1000, -1000, 397, -1000, -1000, -1000,
	-1000, 36, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 253,
	723, -1000, 1985, -1000, -1000, -1000, -1000, 436, 7578, 7578,
	7578, 721, 1985, 1998, 877, 324, -1000, 340, 340, 283,
	283, 283, 283, 283, 731, 731, 485, -1000, -1000, -1000,
	485, 6287, 713, -1000, -1000, 7064, -1000, 485, 627, 627,
	46, 76, 684, -1000, 252, 678, 627, 6287, 354, -1000,
	7064, 485, -1000, 627, 485, 627, 627, 677, 723, -1000,
	700, -1000, 329, 861, 749, 792, 843, -1000, -1000, -1000,
	-1000, 825, -1000, 816, -1000, -1000, -1000, -1000, -1000, 207,
	202, 195, 11532, -1000, 969, 9825, 689, -1000, -1000, 685,
	-51, -49, -1000, -1000, -1000, 74, -1000, -1000, 508, 679,
	2817, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 746, 791,
	136, 169, 223, 206, 505, 11532, -1000, -1000, -1000, 401,
	166, 982, -1000, 135, -1000, 134, 463, -1000, -202, -1000,
	-25, -1000, -1000, 439, 22, 22, 736, 22, -1000, -1000,
	286, 900, 286, 286, 286, 460, 460, -115, -115, -1000,
	-1000, 434, 744, -1000, -1000, -1000, 426, -1000, 11774, 11532,
	3628, -1000, 4168, -1000, -1000, -1000, -1000, -1000, 915, -1000,
	423, 357, 251, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 113, 227, -1000, 3628, -1000, 384,
	11774, 11774, 859, 74, 74, 248, -1000, -1000, 11774, -1000,
	-1000, -1000, -1000, 658, -1000, -1000, -1000, -1000, 3358, 6287,
	-1000, 721, 1985, 1966, -1000, 7578, 7578, -1000, -1000, 627,
	6287, 74, -1000, -1000, -1000, 602, 451, 602, 7578, 7578,
	4438, 7578, 7578, -108, 698, 350, -1000, 7064, 54, -1000,
	-1000, -1000, -1000, -1000, 789, 12016, 723, -1000, 8589, 11532,
	951, 12016, 7064, 7064, -1000, -1000, 7064, 743, -1000, 7064,
	-1000, -1000, -1000, 723, 723, 723, 555, -1000, 951, 689,
	-1000, -1000, -1000, -79, -74, -1000, -1000, 3088, -1000, 3088,
	11532, 977, -1000, 502, 499, -1000, 495, -1000, -1000, 142,
	-1000, -1000, -182, -1000, -1000, -1000, -1000, 736, -1000, 723,
	-88, -1000, -1000, -1000, -1000, -1000, -1000, 592, 286, 286,
	22, 286, -1000, 327, -1000, -1000, -1000, 623, -1000, 621,
	-1000, 44, 43, -1000, 673, -1000, 618, 703, 787, -1000,
	670, -1000, 321, 939, 87, -1000, 158, -1000, 11532, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11532, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11774,
	-1000, -1000, -1000, -1000, -1000, 11532, 154, -1000, -1000, 459,
	7064, -1000, -1000, -1000, 4168, -1000, 969, 9825, -1000, -1000,
	485, -1000, 7578, 1985, 1985, -1000, -1000, 485, 736, 736,
	-1000, 736, 741, -1000, -1000, 736, 63, 736, 62, 485,
	-1000, -1000, 485, 1723, 1735, -1000, 1695, 1511, 723, -105,
	-1000, 74, 7064, -1000, 908, 587, 661, -1000, -1000, 6030,
	485, 589, 247, 555, 943, -1000, 74, 74, 74, 11532,
	74, 11532, 11532, 11532, 8347, 11532, 943, -1000, -1000, -1000,
	-1000, 2817, -1000, 550, -1000, 736, 233, 233, -1000, -1000,
	-1000, 133, -1000, 26, -1000, 485, 736, -1000, -1000, -1000,
	286, -1000, -1000, -1000, 22, 452, 22, -28, -41, 422,
	-1000, 421, 11532, 11532, 11774, 4168, 3088, 179, 944, -1000,
	-1000, 11532, -1000, -1000, -1000, 734, -1000, -1000, -1000, -1000,
	910, 11532, -1000, -1000, 74, 967, 669, -1000, 1985, -1000,
	-1000, 153, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7578, 7578, -1000, 7578, 7578, 7578, 485, 448, 74,
	130, -1000, 723, -1000, -1000, 715, 11532, 11532, -1000, -1000,
	546, -1000, 544, 544, 544, 275, -1000, -1000, 99, 11532,
	-1000, 785, -1000, -1000, 385, 90, 718, 11532, 35, -1000,
	-1000, -1000, 286, -1000, 286, -1000, -1000, 556, 541, 540,
	732, 730, -1000, -1000, 11532, -1000, -1000, -1000, -1000, -1000,
	729, 11532, 723, 171, 953, 945, -1000, -1000, 1710, 1710,
	1710, 1710, 12, -1000, -1000, 981, -1000, 723, -1000, 712,
	237, -1000, 11532, -1000, -1000, -1000, -1000, -1000, 99, -1000,
	486, 319, 445, -140, -1000, 979, -1000, -1000, 974, 728,
	-1000, -1000, -1000, -1000, -1000, 969, 11532, 11532, 581, -1000,
	11532, 537, 111, 129, -1000, 7064, 7064, -1000, -1000, -1000,
	-1000, 485, 108, -144, 12016, 661, 485, 11532, -1000, -1000,
	-1000, 417, -1000, -1000, 11532, 233, 233, 11532, -1000, 522,
	518, -120, 11532, 723, 492, 714, 490, -1000, 11532, 727,
	74, 655, -1000, 858, -117, -150, 625, -1000, -1000, -1000,
	-1000, -1000, -1000, 484, 969, -1000, -1000, -188, -1000, 7064,
	-1000, -126, -1000, 111, 865, 11532, -1000, 845, -1000, 162,
	-1000, 723, 68, -1000, -1000, 106, 478, -136, 11774, 7064,
	-1000, 104, -1000, -145, 726, 68, 723, -157, 11532, -1000,
	7321, -1000, 470, 1710, 485, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1220, 36, 530, 1219, 1213, 1208, 1207, 1206, 1205,
	1196, 1195, 1194, 1193, 1187, 1181, 1179, 1177, 1176, 1175,
	1174, 1173, 1172, 1170, 175, 1169, 1168, 1166, 69, 1164,
	74, 1163, 1161, 40, 148, 46, 30, 8, 1160, 26,
	56, 60, 1157, 50, 1155, 1153, 76, 1151, 57, 1150,
	1149, 1695, 1148, 1147, 20, 3, 1146, 45, 1144, 1143,
	72, 139, 1142, 1141, 1139, 1138, 1135, 1133, 52, 9,
	13, 19, 15, 1132, 34, 12, 1131, 49, 1127, 1126,
	1124, 1123, 39, 1120, 53, 1117, 28, 51, 1115, 6,
	66, 33, 25, 7, 71, 55, 1114, 27, 59, 47,
	1113, 1112, 472, 1111, 1108, 1107, 1104, 1103, 1102, 445,
	447, 1101, 1100, 1099, 65, 0, 301, 128, 61, 1097,
	41, 1096, 1429, 81, 67, 17, 1095, 48, 1204, 1093,
	1088, 1086, 31, 1085, 1084, 1083, 1082, 1066, 1057, 1056,
	1055, 1054, 566, 29, 32, 1050, 1049, 1047, 44, 42,
	22, 43, 54, 1045, 1044, 23, 1043, 11, 16, 2,
	58, 1042, 1039, 1038, 1037, 24, 18, 1036, 14, 1034,
	10, 1032, 1027, 1, 1026, 21, 1025, 5, 1022, 4,
	1021, 1020, 1017, 1013, 1010, 1007, 1005, 1004, 1265, 1137,
	998, 997, 994, 993, 78,
}
var yyR1 = [...]int{

	0, 186, 187, 187, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 190,
	190, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	181, 181, 181, 182, 182, 182, 182, 182, 182, 184,
	184, 185, 185, 120, 120, 179, 179, 178, 177, 177,
	176, 176, 175, 16, 162, 163, 163, 163, 163, 152,
	134, 134, 134, 134, 134, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 183, 183, 138, 138, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 137, 137, 137,
	137, 137, 137, 139, 139, 139, 139, 139, 135, 135,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 141,
	141, 141, 141, 141, 141, 141, 141, 151, 151, 142,
	142, 149, 149, 150, 150, 150, 148, 148, 148, 145,
	145, 146, 146, 147, 147, 147, 143, 143, 143, 144,
	144, 144, 154, 154, 171, 171, 170, 170, 170, 170,
	161, 161, 167, 167, 167, 167, 167, 167, 167, 160,
	160, 169, 169, 168, 155, 155, 155, 155, 155, 156,
	157, 157, 157, 157, 158, 158, 159, 159, 164, 164,
	164, 165, 165, 165, 166, 166, 166, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	191, 191, 192, 192, 192, 192, 192, 192, 192, 174,
	172, 172, 173, 173, 13, 14, 14, 14, 14, 14,
	15, 15, 17, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 107, 107, 104, 104,
	105, 105, 106, 106, 106, 108, 108, 108, 131, 131,
	131, 19, 19, 21, 21, 22, 23, 20, 20, 20,
	20, 20, 193, 24, 25, 25, 26, 26, 26, 30,
	30, 30, 28, 28, 29, 29, 35, 35, 34, 34,
	36, 36, 36, 36, 119, 119, 119, 118, 118, 38,
	38, 39, 39, 40, 40, 41, 41, 41, 53, 53,
	89, 89, 91, 91, 42, 42, 42, 42, 43, 43,
	44, 44, 45, 45, 126, 126, 125, 125, 125, 124,
	124, 47, 47, 47, 49, 48, 48, 48, 48, 50,
	50, 52, 52, 51, 51, 54, 54, 54, 54, 55,
	55, 37, 37, 37, 37, 37, 37, 37, 37, 103,
	103, 57, 57, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 67, 67, 67, 67, 67, 67, 58,
	58, 58, 58, 58, 58, 58, 33, 33, 68, 68,
	68, 74, 69, 69, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 65, 65, 65, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 194, 194, 66, 66, 66, 66, 31, 31, 31,
	31, 31, 129, 129, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 133, 133,
	133, 133, 133, 133, 133, 78, 78, 32, 32, 76,
	76, 77, 79, 79, 75, 75, 75, 60, 60, 60,
	60, 60, 60, 60, 60, 62, 62, 62, 80, 80,
	81, 81, 82, 82, 83, 83, 84, 85, 85, 85,
	86, 86, 86, 86, 87, 87, 87, 59, 59, 59,
	59, 59, 59, 88, 88, 88, 88, 92, 92, 70,
	70, 72, 72, 71, 73, 93, 93, 97, 94, 94,
	98, 98, 98, 96, 96, 96, 121, 121, 121, 101,
	101, 109, 109, 110, 110, 102, 102, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 112, 112, 112,
	113, 113, 116, 116, 117, 117, 122, 122, 123, 123,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	188, 189, 127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 4, 6, 5, 5, 5, 11,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	4, 0, 5, 0, 1, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 1, 3, 3, 3, 2,
	3, 1, 1, 1, 1, 2, 2, 3, 4, 3,
	3, 3, 3, 4, 3, 5, 5, 2, 3, 2,
	3, 2, 3, 0, 3, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 3, 2,
	2, 2, 2, 1, 3, 3, 2, 1, 1, 1,
	4, 4, 4, 5, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 3, 3, 0,
	1, 0, 1, 0, 2, 1, 0, 3, 3, 0,
	1, 2, 5, 4, 1, 2, 2, 3, 2, 3,
	0, 1, 2, 3, 3, 2, 3, 2, 2, 1,
	1, 1, 3, 2, 1, 4, 4, 7, 7, 13,
	1, 1, 2, 2, 0, 1, 1, 3, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 11, 13,
	7, 7, 7, 12, 7, 7, 7, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 5, 4, 6, 5, 4, 4,
	3, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 3, 3, 3, 3, 4, 3, 6, 4, 2,
	4, 2, 2, 2, 2, 3, 1, 1, 0, 1,
	0, 1, 0, 2, 2, 0, 2, 2, 0, 1,
	1, 2, 1, 1, 2, 1, 1, 2, 2, 2,
	2, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 3, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 6, 8, 8, 6, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 1, 2, 1, 2, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -186, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 142, 115, 135, 48, 163, 164,
	166, 167, 25, 136, 137, 140, 141, -188, 8, 256,
	52, -187, 275, -82, 15, -26, 5, -24, -193, -24,
	-24, -24, -24, -24, -162, 52, -120, 120, 69, 150,
	248, 117, 132, 118, 133, -102, 120, 122, 118, 118,
	119, 120, 248, 117, 118, -51, -122, 55, -115, 157,
	264, 20, 163, 176, 177, 168, 201, 192, 265, 155,
	189, 193, 235, 274, 64, 166, 244, 126, 138, 187,
	183, 180, 27, 207, 271, 182, 129, 208, 212, 236,
	173, 174, 238, 205, 31, 131, 266, 33, 146, 239,
	210, 204, 200, 203, 172, 199, 37, 214, 213, 215,
	234, 195, 156, 217, 184, 18, 141, 144, 209, 211,
	181, 158, 124, 148, 270, 240, 179, 145, 159, 140,
	243, 154, 167, 237, 175, 246, 36, 221, 170, 171,
	128, 164, 152, 197, 147, 185, 186, 202, 169, 198,
	165, 149, 142, 245, 222, 272, 196, 194, 190, 191,
	153, 120, 150, 151, 227, 228, 229, 230, 267, 268,
	241, 188, 223, 224, 118, 105, 193, 111, 225, 119,
	31, 148, -131, 118, -104, 151, 227, 228, 229, 230,
	55, 237, 236, 231, -122, 165, -127, -127, -127, -127,
	-127, -2, -86, 17, 16, -5, -3, -188, 6, 20,
	21, -30, 38, 39, -25, -36, 96, -37, -122, -56,
	71, -61, 28, 55, -115, 23, -60, -57, -75, -73,
	-74, 105, 106, 94, 95, 102, 72, 107, -65, -63,
	-64, -66, 57, 56, 65, 58, 59, 60, 61, 66,
	67, 68, -116, -71, -188, 42, 43, 257, 258, 259,
	260, 263, 261, 74, 32, 247, 255, 254, 253, 251,
	252, 249, 250, 273, 123, 248, 100, 256, -102, -39,
	-40, -41, -42, -53, -74, -188, -51, 11, -46, -51,
	-94, -130, 165, -98, 237, 236, -117, -96, -116, -114,
	235, 193, 234, 55, -115, 116, 70, 22, 24, 219,
	73, 105, 16, 74, 104, 257, 111, 46, 249, 250,
	247, 259, 260, 248, 225, 28, 10, 25, 136, 21,
	98, 113, 77, 78, 139, 23, 137, 68, 19, 49,
	130, 11, 13, 14, 123, 122, 89, 119, 44, 8,
	107, 26, 86, 40, 134, 42, 87, 17, 251, 252,
	30, 263, 143, 100, 47, 34, 71, 66, 50, 242,
	69, 15, 45, 132, 88, 114, 256, 43, 117, 6,
	262, 29, 135, 41, 118, 226, 76, 121, 67, 5,
	133, 9, 48, 51, 253, 254, 255, 32, 75, 12,
	-163, -152, 55, 119, -51, 256, -116, -110, 123, -110,
	-116, -110, 118, -51, -51, -109, 123, 55, -109, -109,
	-109, -51, 108, -51, 55, 29, 248, 55, 148, 118,
	149, 120, -128, -188, -117, -128, -128, -128, 152, 153,
	-128, -105, 232, 50, -128, -189, 54, -87, 19, 30,
	-37, -122, -83, -84, -37, -82, -2, -24, 34, -28,
	21, 63, 11, -119, 70, 69, 86, 273, -118, 22,
	-116, 57, 108, -37, -58, 89, 71, 87, 88, 73,
	91, 90, 101, 94, 95, 96, 97, 98, 99, 100,
	92, 93, 79, 80, 81, 82, 83, 84, 85, -103,
	-188, -74, -188, 109, 110, -61, -61, -61, -61, -61,
	-61, -61, -188, -2, -69, -37, -188, -188, -188, -188,
	-188, -188, -188, -188, -188, -78, -37, -188, -194, -188,
	-194, -194, -194, -194, -194, -194, -194, 174, -188, -188,
	-188, -188, -52, 26, -51, 29, 53, -47, -49, -48,
	-50, 40, 44, 46, 41, 42, 43, 47, -126, 22,
	-39, -188, -125, 144, -124, 22, -122, 57, -51, -46,
	-190, 53, 11, 51, 53, -94, 165, -95, -99, 238,
	240, 79, -121, -116, 57, 28, 29, 54, 53, -153,
	-134, -138, -135, -140, -139, -141, -136, -137, 192, 265,
	189, 193, 190, 105, 194, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 196, 207, 29, 138, 185,
	186, 187, 188, 208, 209, 210, 211, 212, 213, 214,
	215, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 179, 180, 182, 183, 184, -116, -128, 120, -179,
	51, 55, 71, 55, 50, -51, -51, 242, -128, 121,
	-51, 23, 50, -51, 55, 55, -123, -122, -114, -128,
	-128, -128, -128, -128, -128, -128, -128, -128, -128, -107,
	226, 233, -51, 9, 89, 53, 18, 108, 53, -85,
	24, 25, -86, -189, -30, -62, -116, 58, 61, -29,
	41, -51, -37, -37, -67, 66, 71, 67, 68, -133,
	105, 193, 138, 187, 174, 192, 197, -118, 96, -123,
	-117, -114, -61, -68, -71, -74, 62, 89, 87, 88,
	73, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, 55, -60, -60, -116,
	-35, 21, -34, -36, -189, 53, -189, -2, -34, -34,
	-37, -37, -75, -116, -122, -75, -34, -28, -76, -77,
	75, -75, -189, -34, -35, -34, -34, -90, 144, -51,
	-93, -97, -75, -40, -41, -41, -40, -41, 40, 40,
	40, 45, 40, 45, 40, -48, -122, -189, -54, 48,
	122, 49, -188, -124, -90, 51, -39, -51, -98, -95,
	53, 239, 241, 242, 50, -37, -144, 105, 104, -164,
	-165, -166, -117, 57, 58, -152, -154, -155, -167, -156,
	124, 128, 129, 133, -160, 126, 119, 134, 66, 71,
	28, 50, 219, 124, 134, 133, 64, -147, 276, 216,
	-145, 222, -142, 52, -142, -142, 191, -142, -142, -142,
	-143, 193, -143, -143, -143, 52, 52, -142, -142, -142,
	-149, 52, 181, -149, -149, -150, 52, -150, 50, 51,
	-51, -177, 267, -178, 55, -128, 23, -128, -51, -111,
	116, 113, 114, -174, 112, 219, 193, 64, 28, 15,
	257, 144, 272, 55, 145, -51, -51, -51, -128, -106,
	11, 89, 36, -37, -37, -123, -84, -87, -101, 19,
	11, 32, 32, -34, 66, 67, 68, 191, 108, -188,
	-68, -61, -61, -61, -33, 139, 70, -189, -189, -34,
	53, -37, -189, -189, -189, 53, 51, 22, 53, 11,
	108, 53, 11, -189, -34, -79, -77, 77, -37, -189,
	-189, -189, -189, -189, -59, 29, 32, -2, -188, -188,
	-55, 53, 12, 79, -44, -43, 50, 51, -45, 50,
	-43, 40, 40, 119, 119, 119, -91, -116, -55, -39,
	-55, -99, -100, 243, 240, 246, 55, 53, -166, 79,
	52, 50, 134, -160, -160, 55, -160, 55, 55, -158,
	-116, 66, 57, 58, 59, -57, 66, 247, 65, 217,
	9, 134, 134, 57, 277, -146, 223, 58, -143, -143,
	-142, -143, -144, 29, -144, -144, -144, -151, 57, -151,
	-148, 267, 268, -148, 58, -149, 58, -51, -116, -128,
	-176, -175, -117, -181, 22, -127, -120, -192, 150, 125,
	130, 129, 55, 124, 128, 144, -180, 150, 125, 126,
	130, 129, 55, 119, 134, 124, 128, 144, 133, -112,
	-113, 121, 22, 119, 134, 144, 116, -128, -108, 87,
	12, -122, -122, 37, 108, -51, -38, 11, 96, -117,
	-35, -33, 70, -61, -61, -189, -36, -132, 105, 189,
	138, 187, 183, 205, 206, 195, 221, 185, 222, -129,
	55, 57, -132, -61, -61, -117, -61, -61, 264, -82,
	78, -37, 76, -92, 50, -93, -70, -72, -71, -188,
	-2, -88, -116, -91, -82, -97, -37, -37, -37, 52,
	-37, -188, -188, -188, -189, 53, -82, -55, 240, 244,
	245, -165, -166, -169, -168, -116, 10, 9, 55, 55,
	55, 130, -183, 273, -142, -188, 247, 54, -144, -144,
	-143, -144, 55, 105, 54, 53, 54, 185, 185, 53,
	54, 53, 52, 51, 50, 53, 79, -182, 19, 158,
	159, -191, 119, 134, -127, -116, -127, -116, -51, -127,
	-116, 126, -155, 57, -37, -55, -39, -189, -61, -189,
	-142, -142, -142, -150, -142, 174, -142, 174, -189, -189,
	-189, 53, 19, -189, 53, 19, -188, -32, 262, -37,
	27, -92, 53, -189, -189, -189, 53, 108, -189, -86,
	-89, -116, -89, -89, -89, -125, -116, -86, 54, 53,
	-142, -157, 154, 155, 29, 156, -157, 134, 193, -189,
	-142, -144, -143, 57, -143, 224, 224, 58, 58, -89,
	-116, -51, -175, -166, 121, 20, 6, 8, 9, 10,
	-116, 52, 26, -116, -80, 13, -143, 55, -61, -61,
	-61, -61, -61, -189, 57, 134, -72, 32, -2, -188,
	-116, -116, 53, 54, -189, -189, -189, -54, -171, -170,
	51, 131, 64, 267, -168, 50, 66, 157, 50, -158,
	191, -144, -144, 54, 54, 54, 52, 52, -159, -116,
	52, -89, -188, 124, -81, 14, 16, -189, -189, -189,
	-189, -31, 89, 267, 9, -70, -2, 108, -116, -170,
	55, -161, 79, 57, 269, 9, 10, 52, -55, -89,
	-89, -184, 53, 51, -89, 54, -172, -173, 144, 134,
	-37, -69, -189, 265, 47, 270, -93, -189, -116, 58,
	-116, -157, -157, -159, 54, 54, -185, 267, -116, -188,
	54, -179, -189, 53, -116, 52, 37, 266, 271, 54,
	-55, 274, -37, -177, -173, 32, -89, 37, 127, -188,
	-189, 146, 54, 267, -51, -37, 147, 270, 52, -189,
	-188, 271, -159, -61, 143, 54, -189, -189,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 582, 0, 342, 342, 342, 342, 342, 342, 0,
	83, 635, 0, 0, 0, 0, -2, 332, 333, 0,
	335, 336, 872, 872, 872, 872, 872, 0, 33, 34,
	870, 1, 3, 590, 0, 0, 346, 349, 344, 0,
	635, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	633, 633, 0, 633, 84, 0, 0, 636, 0, 631,
	0, 631, 631, 631, 0, 291, 413, 656, 657, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 0, 0, 0, 0, 873, 873,
	873, 873, 0, 873, 320, 309, 311, 312, 313, 314,
	873, 329, 330, 319, 331, 334, 337, 338, 339, 340,
	341, 27, 594, 0, 0, 582, 29, 0, 342, 347,
	348, 352, 350, 351, 343, 0, 360, 364, 0, 421,
	0, 426, 429, -2, -2, 0, 464, 465, 466, 467,
	468, 0, 0, 0, 0, 0, 0, 0, 490, 491,
	492, 493, 567, 568, 569, 570, 571, 572, 573, 574,
	431, 432, 564, 614, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 0, 521, 521, 521, 521, 521,
	521, 521, 521, 0, 0, 0, 0, 0, 0, 0,
	371, 373, 374, 375, 394, 0, 396, 0, 0, 41,
	45, 0, 846, 618, -2, -2, 0, 0, 654, 655,
	-2, 767, -2, 652, 653, 660, 661, 662, 663, 664,
	665, 666, 667, 668, 669, 670, 671, 672, 673, 674,
	675, 676, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	0, 95, 0, 0, 873, 0, 85, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 0, 0,
	0, 290, 0, 292, 873, 873, 873, 873, 873, 873,
	873, 873, 301, 874, 875, 302, 303, 304, 873, 873,
	306, 0, 321, 0, 315, 28, 871, 22, 0, 0,
	591, 0, 583, 584, 587, 590, 27, 349, 0, 354,
	353, 345, 0, 361, 0, 0, 0, 0, 365, 0,
	367, 368, 0, 424, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 450, 451, 452, 453, 454, 455, 427,
	0, 442, 0, 0, 0, 483, 484, 485, 486, 487,
	488, 0, 356, 27, 0, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 0, 556, 0, 512, 0,
	513, 514, 515, 516, 517, 518, 519, 520, 0, 356,
	0, 0, 43, 0, 412, 0, 0, 0, 0, 0,
	0, 401, 0, 0, 404, 0, 0, 0, 0, 395,
	0, 0, 415, 813, 397, 0, 399, 400, -2, 0,
	0, 0, 39, 40, 0, 46, 846, 48, 49, 0,
	0, 0, 199, 626, 627, 628, 624, 238, 0, 99,
	193, 189, 101, 102, 103, 104, 179, 126, 148, 149,
	179, 179, 179, 179, 179, 196, 196, 196, 196, 160,
	161, 162, 163, 164, 165, 166, 0, 0, 143, 179,
	179, 179, 147, 169, 170, 171, 172, 173, 174, 175,
	176, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 181, 181, 181, 183, 183, 0, 64, 0, 88,
	0, 873, 0, 873, 0, 93, 0, 0, 257, 0,
	285, 632, 0, 873, 288, 289, 414, 658, 659, 293,
	294, 295, 296, 297, 298, 299, 300, 305, 308, 322,
	316, 317, 310, 595, 0, 0, 0, 0, 0, 586,
	588, 589, 594, 30, 352, 0, 575, 0, 0, 0,
	355, 25, 422, 423, 425, 443, 0, 445, 447, 428,
	548, 0, 550, 551, 552, 553, 554, 366, 362, 0,
	565, -2, 433, 434, 458, 459, 460, 0, 0, 0,
	0, 456, 438, 0, 469, 470, 471, 472, 473, 474,
	475, 476, 477, 478, 479, 480, 0, 481, 482, 489,
	0, 0, 357, 358, 461, 0, 613, 27, 0, 0,
	0, 0, 0, 564, 0, 0, 0, 0, 562, 559,
	0, 0, 522, 0, 0, 0, 0, 0, 0, 411,
	419, 615, 0, 372, 390, 392, 0, 387, 402, 403,
	405, 0, 407, 0, 409, 410, 376, 377, 378, 0,
	0, 0, 0, 398, 419, 0, 419, 42, 619, 47,
	0, 0, 52, 53, 620, 621, 622, 200, 0, 94,
	239, 241, 244, 245, 246, 96, 97, 98, 0, 224,
	0, 0, 0, 0, 0, 234, 219, 220, 106, 0,
	0, 0, 117, 0, 119, 121, 0, 105, 0, 195,
	191, 190, 125, 0, 196, 196, 179, 196, 154, 155,
	199, 0, 199, 199, 199, 0, 0, 186, 186, 146,
	137, 0, 181, 139, 140, 141, 0, 142, 0, 0,
	873, 66, 0, 86, 87, 67, 634, 68, 70, 872,
	83, 0, 647, 258, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 0, 0, 284, 873, 287, 325,
	0, 0, 0, 592, 593, 0, 585, 23, 0, 629,
	630, 576, 577, 369, 444, 446, 448, 549, 0, 356,
	435, 456, 439, 0, 436, 0, 0, 430, 494, 0,
	0, 463, -2, 497, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 0, 560, 0, 0, 511,
	523, 524, 525, 526, 607, 0, 0, -2, 0, 0,
	582, 0, 0, 0, 384, 391, 0, 0, 385, 0,
	386, 406, 408, 0, 0, 0, 0, 382, 582, 419,
	38, 50, 51, 0, 0, 57, 201, 0, 242, 0,
	0, 0, 212, 0, 0, 215, 0, 217, 218, 0,
	235, 107, 123, 109, 110, 111, 112, 179, 114, 0,
	0, 118, 120, 122, 194, 100, 192, 0, 199, 199,
	196, 199, 156, 0, 157, 158, 159, 0, 177, 0,
	144, 0, 0, 145, 0, 138, 0, 0, 0, 65,
	89, 90, 0, 73, 0, 247, 0, 872, 0, 272,
	273, 274, 275, 276, 277, 278, 872, 0, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	872, 648, 649, 650, 651, 0, 0, 286, 307, 0,
	0, 323, 324, 596, 0, 24, 419, 0, 363, 566,
	0, 437, 0, 457, 440, 495, 359, 0, 179, 179,
	537, 179, 183, 540, 541, 179, 543, 179, 546, 0,
	532, 533, 0, 0, 0, 565, 0, 0, 0, 557,
	510, 563, 0, 31, 0, 607, 597, 609, 611, 0,
	27, 0, 603, 0, 590, 616, 420, 617, 388, 0,
	393, 0, 0, 0, 396, 0, 590, 37, 54, 55,
	56, 240, 243, 0, 221, 179, 0, 0, 213, 214,
	216, 0, 108, 0, 113, 0, 179, 180, 150, 151,
	199, 152, 197, 198, 196, 0, 196, 0, 0, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	72, 0, 270, 271, 251, 0, 252, 254, 255, 256,
	0, 234, 250, 326, 327, 578, 370, 496, 441, 499,
	534, 196, 538, 539, 542, 544, 545, 547, 501, 500,
	502, 0, 0, 505, 0, 0, 0, 0, 0, 561,
	0, 32, 0, 612, -2, 0, 0, 0, 44, 35,
	0, 380, 0, 0, 0, 415, 383, 36, 203, 0,
	223, 225, 230, 231, 0, 0, 226, 234, 0, 115,
	116, 153, 199, 178, 199, 187, 188, 0, 0, 0,
	0, 0, 91, 92, 0, 74, 75, 76, 77, 78,
	0, 0, 0, 235, 580, 0, 535, 536, 0, 0,
	0, 0, 527, 509, 558, 0, 610, 0, -2, 0,
	605, 604, 0, 389, 416, 417, 418, 379, 202, 204,
	0, 210, 0, 0, 222, 0, 232, 233, 0, 0,
	124, 167, 168, 182, 185, 419, 0, 0, 79, 236,
	0, 0, 0, 0, 26, 0, 0, 503, 504, 506,
	507, 0, 0, 0, 0, 600, 27, 0, 381, 205,
	206, 0, 211, 208, 0, 0, 0, 0, 61, 0,
	0, 81, 0, 0, 0, 85, 0, 280, 0, 0,
	581, 579, 508, 0, 0, 0, 608, -2, 606, 207,
	209, 227, 228, 0, 419, 62, 69, 0, 237, 0,
	248, 88, 279, 0, 0, 0, 528, 0, 531, 0,
	63, 0, 0, 253, 281, 0, 0, 529, 0, 0,
	80, 0, 249, 0, 0, 0, 0, 0, 0, 82,
	0, 530, 0, 0, 0, 229, 282, 283,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 275,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 276, 3, 277, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:316
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:321
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:322
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:326
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:349
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:357
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:361
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:367
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:374
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:380
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:384
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:390
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:394
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:401
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:413
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:425
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:429
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:435
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:441
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:445
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:449
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:454
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:455
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:459
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:463
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:468
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:472
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:478
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:482
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:486
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:490
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:496
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:500
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:506
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:510
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:520
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:524
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:528
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:532
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:538
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:542
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:548
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:553
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:569
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:584
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:599
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:603
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:607
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:615
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:619
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:623
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:635
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:642
		{
			yyVAL.bytes = nil
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:652
		{
			yyVAL.expr = nil
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:656
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:661
		{
			yyVAL.expr = nil
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:665
		{
			yyVAL.expr = yyDollar[4].expr
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:670
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:674
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:679
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:683
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:689
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:694
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:699
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:705
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:710
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:716
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:722
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:729
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:736
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:741
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:745
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:749
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:755
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:760
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:771
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:782
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:787
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:792
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:797
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:802
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:807
		{
			yyDollar[1].columnType.Default = NewBoolSQLVal(bool(yyDollar[3].boolVal))
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:812
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:817
		{
			yyDollar[1].columnType.Default = NewValArgWithOpt(yyDollar[3].bytes, yyDollar[4].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:822
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:827
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:832
		{
			yyDollar[1].columnType.OnUpdate = NewValArgWithOpt(yyDollar[4].bytes, yyDollar[5].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:837
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:842
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:847
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:852
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:857
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:862
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:868
		{
			yyVAL.bytes = nil
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:872
		{
			yyVAL.bytes = nil
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:878
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:883
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1001
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1005
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1009
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1013
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1017
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1029
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1033
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1037
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1041
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1045
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1049
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1053
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1057
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1061
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1065
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1069
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 168:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1074
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1080
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1084
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1088
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1092
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1096
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1100
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1104
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1108
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1114
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1119
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1124
		{
			yyVAL.optVal = nil
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1128
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1133
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1137
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1145
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1149
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 185:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1155
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1163
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1167
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1171
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1176
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1180
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1185
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1189
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1194
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1198
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1202
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1207
		{
			yyVAL.str = ""
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1211
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1215
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1220
		{
			yyVAL.str = ""
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1224
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1228
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1234
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1238
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1244
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1248
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1254
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1258
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1263
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1267
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1273
		{
			yyVAL.str = ""
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1277
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1283
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1287
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1291
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1295
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1299
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1303
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1307
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1313
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1317
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1323
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1327
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1333
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1340
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1346
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1352
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1358
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 229:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1366
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1378
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1382
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1386
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1390
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1395
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1402
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1406
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1411
		{
			yyVAL.str = ""
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1415
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1419
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1427
		{
			yyVAL.str = yyDollar[1].str
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1431
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1435
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1441
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1445
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1449
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1455
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 248:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1459
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 249:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1473
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 250:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1487
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 251:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1496
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 252:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1500
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1504
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1517
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 255:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1527
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1532
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1537
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1541
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 279:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1573
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1579
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1583
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 282:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1589
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 283:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1593
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1599
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1605
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 286:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1613
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1618
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1626
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1630
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1636
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1640
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1645
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1651
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1655
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1659
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1664
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1668
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1672
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1676
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1680
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1684
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1688
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1692
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1696
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1700
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1704
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1708
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1718
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1722
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1726
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1730
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1734
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1738
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1742
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1752
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1758
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1762
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1768
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1772
		{
			yyVAL.str = "extended "
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1778
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1782
		{
			yyVAL.str = "full "
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1788
		{
			yyVAL.str = ""
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1792
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1796
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1802
		{
			yyVAL.showFilter = nil
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1806
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1810
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1816
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1820
		{
			yyVAL.str = SessionStr
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1824
		{
			yyVAL.str = GlobalStr
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1830
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1834
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1840
		{
			yyVAL.statement = &Begin{}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1844
		{
			yyVAL.statement = &Begin{}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1850
		{
			yyVAL.statement = &Commit{}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1856
		{
			yyVAL.statement = &Rollback{}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1862
		{
			yyVAL.statement = &OtherRead{}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1866
		{
			yyVAL.statement = &OtherRead{}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1870
		{
			yyVAL.statement = &OtherRead{}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1874
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1878
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1883
		{
			setAllowComments(yylex, true)
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1887
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1893
		{
			yyVAL.bytes2 = nil
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1897
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1903
		{
			yyVAL.str = UnionStr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1907
		{
			yyVAL.str = UnionAllStr
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1911
		{
			yyVAL.str = UnionDistinctStr
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1916
		{
			yyVAL.str = ""
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1920
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1924
		{
			yyVAL.str = SQLCacheStr
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1929
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1933
		{
			yyVAL.str = DistinctStr
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1938
		{
			yyVAL.str = ""
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1942
		{
			yyVAL.str = StraightJoinHint
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1947
		{
			yyVAL.selectExprs = nil
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1951
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1957
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1961
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1967
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1971
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1975
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 363:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1979
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1984
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1988
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1992
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1999
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2004
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2008
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2014
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2018
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2028
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2032
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2036
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2042
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 379:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2046
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2052
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2056
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2062
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2066
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2079
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2083
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2087
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2091
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2097
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2099
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2103
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2105
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2109
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2111
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2114
		{
			yyVAL.empty = struct{}{}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2116
		{
			yyVAL.empty = struct{}{}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2119
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2123
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2127
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2134
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2140
		{
			yyVAL.str = JoinStr
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2144
		{
			yyVAL.str = JoinStr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2148
		{
			yyVAL.str = JoinStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2154
		{
			yyVAL.str = StraightJoinStr
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2160
		{
			yyVAL.str = LeftJoinStr
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2164
		{
			yyVAL.str = LeftJoinStr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2168
		{
			yyVAL.str = RightJoinStr
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2172
		{
			yyVAL.str = RightJoinStr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2178
		{
			yyVAL.str = NaturalJoinStr
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2182
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2192
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2196
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2202
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2206
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2211
		{
			yyVAL.indexHints = nil
		}
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2215
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2219
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2223
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2228
		{
			yyVAL.expr = nil
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2232
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2238
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2242
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2246
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2250
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2254
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2258
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2262
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2266
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2272
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2276
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2282
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2286
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2292
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2296
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2300
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2304
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2308
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2312
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2316
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2320
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 441:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2324
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2328
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2334
		{
			yyVAL.str = IsNullStr
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2338
		{
			yyVAL.str = IsNotNullStr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2342
		{
			yyVAL.str = IsTrueStr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2346
		{
			yyVAL.str = IsNotTrueStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2350
		{
			yyVAL.str = IsFalseStr
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2354
		{
			yyVAL.str = IsNotFalseStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2360
		{
			yyVAL.str = EqualStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2364
		{
			yyVAL.str = LessThanStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2368
		{
			yyVAL.str = GreaterThanStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2372
		{
			yyVAL.str = LessEqualStr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2376
		{
			yyVAL.str = GreaterEqualStr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2380
		{
			yyVAL.str = NotEqualStr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2384
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2389
		{
			yyVAL.expr = nil
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2393
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2399
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2403
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2407
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2413
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2419
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2423
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2429
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2433
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2437
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2441
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2445
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2449
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2453
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2457
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2461
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2465
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2469
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2473
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2477
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2481
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2485
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2489
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2493
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2497
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2501
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2505
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2509
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2513
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2521
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2535
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2539
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2543
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2561
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2565
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2569
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2579
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2583
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 499:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2587
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 500:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2591
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 501:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2595
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 502:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2599
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 503:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2603
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 504:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2607
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 505:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2611
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 506:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2615
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 507:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2619
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 508:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2623
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 509:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2627
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 510:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2631
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2635
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2645
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2649
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2653
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2657
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2662
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2667
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2672
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2677
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2681
		{
			yyVAL.expr = &ConvertExpr{Type: &ConvertType{Type: string(yyDollar[2].bytes)}}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2695
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2699
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2703
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2707
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2713
		{
			yyVAL.str = ""
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2717
		{
			yyVAL.str = BooleanModeStr
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2721
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 530:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2725
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2729
		{
			yyVAL.str = QueryExpansionStr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2735
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2739
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2745
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2749
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2753
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2757
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2761
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2765
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2771
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2775
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2779
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2783
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2787
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2791
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2795
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2799
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2805
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2809
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2813
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2817
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2821
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2825
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2829
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2834
		{
			yyVAL.expr = nil
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2838
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2843
		{
			yyVAL.str = string("")
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2847
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2853
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2857
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2863
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2868
		{
			yyVAL.expr = nil
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2872
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2878
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2882
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 566:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2886
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2892
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2896
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2900
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2904
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2908
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2912
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2916
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2920
		{
			yyVAL.expr = &NullVal{}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2926
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2935
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2939
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2944
		{
			yyVAL.exprs = nil
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2948
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2953
		{
			yyVAL.expr = nil
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2957
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2962
		{
			yyVAL.orderBy = nil
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2966
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2972
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2976
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2982
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2987
		{
			yyVAL.str = AscScr
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2991
		{
			yyVAL.str = AscScr
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2995
		{
			yyVAL.str = DescScr
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3000
		{
			yyVAL.limit = nil
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3004
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3008
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3012
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3017
		{
			yyVAL.str = ""
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3021
		{
			yyVAL.str = ForUpdateStr
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3025
		{
			yyVAL.str = ShareModeStr
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3038
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3042
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3046
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 600:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3051
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3055
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 602:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3059
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3066
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3070
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3074
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3078
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3083
		{
			yyVAL.updateExprs = nil
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3087
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3093
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3097
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3103
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3107
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3113
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3119
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3129
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3133
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3139
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3145
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3149
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3155
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3159
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3163
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3170
		{
			yyVAL.bytes = []byte("charset")
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3177
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3181
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3185
		{
			yyVAL.expr = &Default{}
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3194
		{
			yyVAL.byt = 0
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3196
		{
			yyVAL.byt = 1
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3199
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3201
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3204
		{
			yyVAL.str = ""
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3206
		{
			yyVAL.str = IgnoreStr
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3210
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3212
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3214
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3216
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3218
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3220
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3222
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3224
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3226
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3228
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3231
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3233
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3235
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3239
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3241
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3245
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3249
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3256
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3262
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3266
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3273
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3509
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3518
		{
			decNesting(yylex)
		}
	case 872:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3523
		{
			forceEOF(yylex)
		}
	case 873:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3528
		{
			forceEOF(yylex)
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3532
		{
			forceEOF(yylex)
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3536
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
