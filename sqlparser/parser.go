// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const REFERENCES = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const POLICY = 57459
const WHILE = 57460
const UNIQUE = 57461
const KEY = 57462
const SHOW = 57463
const DESCRIBE = 57464
const EXPLAIN = 57465
const DATE = 57466
const ESCAPE = 57467
const REPAIR = 57468
const OPTIMIZE = 57469
const TRUNCATE = 57470
const MAXVALUE = 57471
const PARTITION = 57472
const REORGANIZE = 57473
const LESS = 57474
const THAN = 57475
const PROCEDURE = 57476
const TRIGGER = 57477
const TYPE = 57478
const VINDEX = 57479
const VINDEXES = 57480
const STATUS = 57481
const VARIABLES = 57482
const RESTRICT = 57483
const CASCADE = 57484
const NO = 57485
const ACTION = 57486
const PERMISSIVE = 57487
const RESTRICTIVE = 57488
const PUBLIC = 57489
const CURRENT_USER = 57490
const SESSION_USER = 57491
const PAD_INDEX = 57492
const FILLFACTOR = 57493
const IGNORE_DUP_KEY = 57494
const STATISTICS_NORECOMPUTE = 57495
const STATISTICS_INCREMENTAL = 57496
const ALLOW_ROW_LOCKS = 57497
const ALLOW_PAGE_LOCKS = 57498
const BEFORE = 57499
const AFTER = 57500
const EACH = 57501
const ROW = 57502
const SCROLL = 57503
const CURSOR = 57504
const OPEN = 57505
const CLOSE = 57506
const FETCH = 57507
const PRIOR = 57508
const FIRST = 57509
const LAST = 57510
const DEALLOCATE = 57511
const DEFERRABLE = 57512
const INITIALLY = 57513
const IMMEDIATE = 57514
const DEFERRED = 57515
const CONCURRENTLY = 57516
const BEGIN = 57517
const START = 57518
const TRANSACTION = 57519
const COMMIT = 57520
const ROLLBACK = 57521
const BIT = 57522
const TINYINT = 57523
const SMALLINT = 57524
const SMALLSERIAL = 57525
const MEDIUMINT = 57526
const INT = 57527
const INTEGER = 57528
const SERIAL = 57529
const BIGINT = 57530
const BIGSERIAL = 57531
const INTNUM = 57532
const REAL = 57533
const DOUBLE = 57534
const PRECISION = 57535
const FLOAT_TYPE = 57536
const DECIMAL = 57537
const NUMERIC = 57538
const SMALLMONEY = 57539
const MONEY = 57540
const TIME = 57541
const TIMESTAMP = 57542
const DATETIME = 57543
const YEAR = 57544
const DATETIMEOFFSET = 57545
const DATETIME2 = 57546
const SMALLDATETIME = 57547
const CHAR = 57548
const VARCHAR = 57549
const VARYING = 57550
const BOOL = 57551
const CHARACTER = 57552
const VARBINARY = 57553
const NCHAR = 57554
const NVARCHAR = 57555
const NTEXT = 57556
const UUID = 57557
const TEXT = 57558
const TINYTEXT = 57559
const MEDIUMTEXT = 57560
const LONGTEXT = 57561
const CITEXT = 57562
const BLOB = 57563
const TINYBLOB = 57564
const MEDIUMBLOB = 57565
const LONGBLOB = 57566
const JSON = 57567
const JSONB = 57568
const ENUM = 57569
const GEOMETRY = 57570
const POINT = 57571
const LINESTRING = 57572
const POLYGON = 57573
const GEOMETRYCOLLECTION = 57574
const MULTIPOINT = 57575
const MULTILINESTRING = 57576
const MULTIPOLYGON = 57577
const VARIADIC = 57578
const ARRAY = 57579
const NOW = 57580
const GETDATE = 57581
const BPCHAR = 57582
const TEXT_PATTERN_OPS = 57583
const NULLX = 57584
const AUTO_INCREMENT = 57585
const APPROXNUM = 57586
const SIGNED = 57587
const UNSIGNED = 57588
const ZEROFILL = 57589
const ZONE = 57590
const AUTOINCREMENT = 57591
const DATABASES = 57592
const TABLES = 57593
const VITESS_KEYSPACES = 57594
const VITESS_SHARDS = 57595
const VITESS_TABLETS = 57596
const VSCHEMA_TABLES = 57597
const EXTENDED = 57598
const FULL = 57599
const PROCESSLIST = 57600
const NAMES = 57601
const CHARSET = 57602
const GLOBAL = 57603
const SESSION = 57604
const ISOLATION = 57605
const LEVEL = 57606
const READ = 57607
const WRITE = 57608
const ONLY = 57609
const REPEATABLE = 57610
const COMMITTED = 57611
const UNCOMMITTED = 57612
const SERIALIZABLE = 57613
const NEW = 57614
const CURRENT_TIMESTAMP = 57615
const DATABASE = 57616
const CURRENT_DATE = 57617
const CURRENT_TIME = 57618
const LOCALTIME = 57619
const LOCALTIMESTAMP = 57620
const UTC_DATE = 57621
const UTC_TIME = 57622
const UTC_TIMESTAMP = 57623
const REPLACE = 57624
const CONVERT = 57625
const CAST = 57626
const SUBSTR = 57627
const SUBSTRING = 57628
const GROUP_CONCAT = 57629
const SEPARATOR = 57630
const INHERIT = 57631
const MATCH = 57632
const AGAINST = 57633
const BOOLEAN = 57634
const LANGUAGE = 57635
const WITH = 57636
const WITHOUT = 57637
const PARSER = 57638
const QUERY = 57639
const EXPANSION = 57640
const UNUSED = 57641
const VIRTUAL = 57642
const STORED = 57643
const GENERATED = 57644
const ALWAYS = 57645
const IDENTITY = 57646
const SEQUENCE = 57647
const INCREMENT = 57648
const MINVALUE = 57649
const CACHE = 57650
const CYCLE = 57651
const OWNED = 57652
const NONE = 57653
const CLUSTERED = 57654
const NONCLUSTERED = 57655
const REPLICATION = 57656
const INCLUDE = 57657
const HOLDLOCK = 57658
const NOLOCK = 57659
const NOWAIT = 57660
const PAGLOCK = 57661
const ROWLOCK = 57662
const TABLELOCK = 57663
const TYPECAST = 57664
const CHECK = 57665

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	122, 142,
	-2, 132,
	-1, 36,
	156, 471,
	157, 471,
	-2, 461,
	-1, 272,
	110, 823,
	-2, 819,
	-1, 273,
	110, 824,
	-2, 820,
	-1, 315,
	254, 833,
	-2, 717,
	-1, 347,
	81, 1046,
	-2, 82,
	-1, 348,
	81, 997,
	-2, 83,
	-1, 354,
	81, 976,
	-2, 790,
	-1, 356,
	81, 1020,
	-2, 792,
	-1, 604,
	254, 833,
	-2, 499,
	-1, 653,
	254, 833,
	-2, 499,
	-1, 682,
	52, 41,
	54, 41,
	-2, 43,
	-1, 843,
	110, 826,
	-2, 822,
	-1, 1097,
	254, 833,
	-2, 499,
	-1, 1118,
	5, 28,
	-2, 616,
	-1, 1143,
	5, 27,
	-2, 763,
	-1, 1191,
	56, 349,
	-2, 346,
	-1, 1251,
	5, 27,
	-2, 90,
	-1, 1486,
	5, 28,
	-2, 764,
	-1, 1587,
	5, 27,
	-2, 766,
	-1, 1756,
	5, 28,
	-2, 767,
	-1, 1911,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 19008

var yyAct = [...]int{
	273, 1746, 1642, 1602, 521, 1685, 1864, 607, 3, 1863,
	1043, 1645, 1729, 773, 534, 608, 1718, 1180, 1515, 53,
	926, 1553, 268, 1159, 1146, 288, 21, 251, 1708, 1496,
	1345, 486, 819, 1183, 944, 90, 1375, 1492, 90, 305,
	1253, 1346, 676, 969, 975, 1599, 1206, 276, 1342, 1212,
	1036, 1554, 1164, 280, 1107, 250, 927, 674, 968, 1051,
	990, 1763, 90, 90, 358, 277, 1052, 353, 349, 358,
	868, 270, 358, 358, 90, 602, 66, 1318, 1019, 90,
	892, 90, 255, 339, 779, 245, 1031, 90, 897, 964,
	1110, 1102, 845, 540, 1239, 692, 1808, 914, 1151, 484,
	691, 923, 985, 346, 333, 663, 678, 275, 895, 546,
	712, 707, 706, 1084, 631, 337, 343, 1312, 87, 332,
	1223, 554, 260, 257, 886, 48, 26, 27, 1006, 246,
	247, 248, 249, 334, 1890, 52, 1003, 1656, 1497, 1498,
	1499, 1500, 1501, 1502, 341, 578, 342, 28, 264, 1856,
	571, 572, 573, 574, 575, 568, 603, 496, 578, 1382,
	1402, 1719, 500, 562, 501, 565, 487, 488, 1847, 1521,
	508, 580, 581, 582, 583, 584, 585, 586, 1389, 563,
	564, 561, 567, 566, 576, 577, 569, 570, 571, 572,
	573, 574, 575, 568, 1529, 1388, 578, 1676, 567, 566,
	576, 577, 569, 570, 571, 572, 573, 574, 575, 568,
	1781, 1782, 578, 1924, 568, 1828, 1005, 578, 1917, 1204,
	1754, 1689, 1690, 1840, 90, 1111, 1112, 1902, 358, 358,
	358, 358, 1044, 358, 1799, 1160, 1827, 1476, 533, 1337,
	358, 1753, 1662, 1778, 569, 570, 571, 572, 573, 574,
	575, 568, 1661, 1480, 578, 498, 1393, 1368, 85, 81,
	82, 83, 1172, 957, 543, 1171, 1009, 358, 1173, 529,
	1473, 533, 1369, 1370, 542, 567, 566, 576, 577, 569,
	570, 571, 572, 573, 574, 575, 568, 958, 959, 578,
	1217, 1225, 1219, 1218, 810, 1460, 1783, 1657, 1658, 1660,
	693, 811, 694, 1659, 1008, 1459, 1640, 510, 567, 566,
	576, 577, 569, 570, 571, 572, 573, 574, 575, 568,
	1010, 601, 578, 1020, 533, 1109, 1576, 1010, 589, 519,
	918, 1315, 90, 1469, 1314, 1032, 1467, 76, 244, 90,
	90, 90, 1922, 514, 1818, 358, 1846, 532, 1848, 349,
	1915, 1914, 358, 593, 594, 595, 596, 597, 598, 599,
	1003, 567, 566, 576, 577, 569, 570, 571, 572, 573,
	574, 575, 568, 1383, 888, 578, 1898, 1869, 579, 1899,
	1734, 1861, 992, 1724, 887, 70, 74, 1787, 487, 488,
	890, 579, 337, 781, 1644, 1618, 999, 781, 988, 891,
	71, 1789, 75, 1709, 989, 1916, 1311, 516, 1900, 518,
	1434, 1435, 525, 526, 889, 658, 49, 1677, 72, 73,
	68, 1748, 1747, 1291, 682, 780, 57, 924, 1190, 579,
	84, 1584, 1440, 986, 1784, 1523, 636, 637, 515, 517,
	1188, 1381, 1522, 1198, 1197, 579, 1518, 1391, 1441, 987,
	579, 59, 60, 61, 62, 63, 1185, 995, 1895, 991,
	1000, 689, 1530, 1569, 1877, 1450, 1667, 997, 996, 1921,
	945, 947, 503, 492, 78, 1839, 79, 79, 1560, 789,
	489, 1690, 1163, 1162, 1161, 683, 358, 579, 771, 499,
	90, 1868, 1033, 1191, 1292, 223, 1288, 1020, 90, 1013,
	90, 358, 1752, 90, 622, 986, 90, 80, 1906, 987,
	90, 1513, 358, 358, 358, 358, 358, 358, 358, 358,
	1681, 987, 579, 1203, 1489, 1513, 358, 358, 1735, 1736,
	1737, 90, 1410, 567, 566, 576, 577, 569, 570, 571,
	572, 573, 574, 575, 568, 946, 358, 578, 782, 783,
	90, 1418, 782, 783, 1300, 579, 358, 69, 522, 523,
	524, 1126, 527, 842, 1785, 1786, 1788, 1790, 1791, 531,
	822, 591, 592, 772, 1516, 1517, 1519, 798, 513, 1096,
	817, 785, 705, 786, 696, 606, 790, 558, 509, 793,
	852, 993, 358, 358, 1289, 814, 1287, 994, 966, 965,
	358, 846, 1419, 1701, 850, 851, 849, 358, 579, 551,
	1290, 898, 552, 551, 812, 847, 1079, 553, 902, 1817,
	894, 1296, 1912, 796, 502, 553, 843, 1700, 1699, 553,
	1123, 1698, 844, 831, 1697, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	1001, 1696, 1002, 552, 551, 1695, 1693, 1431, 90, 1174,
	1341, 90, 90, 90, 90, 90, 1149, 824, 695, 1910,
	553, 998, 841, 90, 1339, 1477, 90, 839, 552, 551,
	90, 907, 910, 902, 544, 90, 90, 916, 915, 358,
	873, 637, 871, 349, 872, 553, 1080, 358, 1295, 882,
	884, 963, 1913, 358, 1122, 1182, 1121, 970, 505, 506,
	507, 915, 776, 1133, 337, 337, 337, 337, 337, 1880,
	903, 904, 1617, 552, 551, 928, 911, 533, 912, 337,
	552, 551, 548, 1879, 920, 1845, 820, 821, 337, 1194,
	553, 925, 952, 552, 551, 1620, 1844, 553, 567, 566,
	576, 577, 569, 570, 571, 572, 573, 574, 575, 568,
	553, 919, 578, 921, 922, 929, 1843, 1182, 932, 953,
	1764, 1766, 358, 1093, 1094, 1095, 358, 941, 358, 90,
	579, 90, 552, 551, 950, 358, 949, 1193, 90, 1765,
	90, 955, 954, 90, 358, 930, 931, 294, 933, 553,
	1762, 1226, 1630, 973, 1021, 1022, 1023, 1024, 566, 576,
	577, 569, 570, 571, 572, 573, 574, 575, 568, 1038,
	1549, 578, 842, 624, 625, 626, 627, 628, 629, 630,
	788, 77, 1616, 1548, 1278, 1841, 491, 1086, 1181, 50,
	1694, 799, 800, 801, 802, 803, 804, 805, 806, 848,
	1398, 1711, 1034, 1035, 1182, 807, 808, 835, 837, 838,
	1182, 352, 1050, 836, 1056, 485, 490, 552, 551, 494,
	495, 1074, 869, 1075, 870, 1541, 1076, 1246, 1842, 1226,
	816, 1057, 1540, 1244, 553, 843, 1226, 1583, 50, 846,
	1546, 823, 331, 605, 1108, 1452, 1240, 358, 1200, 1279,
	605, 1722, 1929, 847, 1281, 1274, 1275, 493, 1282, 1277,
	1276, 497, 1085, 1691, 1284, 1280, 815, 1510, 1901, 533,
	266, 1386, 1099, 1100, 1101, 1283, 1591, 1887, 1851, 1038,
	986, 1143, 1273, 552, 551, 981, 1385, 980, 1092, 982,
	983, 1384, 1098, 1510, 1852, 984, 987, 1510, 1835, 358,
	553, 1603, 90, 1192, 1175, 899, 901, 1722, 1834, 1831,
	1830, 1797, 1034, 1035, 1605, 1823, 533, 1510, 1820, 358,
	1046, 917, 881, 970, 795, 1166, 794, 1168, 1510, 1819,
	1715, 358, 777, 1011, 1012, 1014, 1015, 1016, 775, 1017,
	1018, 511, 358, 1591, 1744, 579, 1591, 1627, 1591, 533,
	1714, 90, 1114, 1594, 1593, 337, 1027, 1028, 1029, 1167,
	1030, 1132, 1177, 1591, 1592, 1713, 1199, 1510, 1509, 1365,
	533, 1130, 943, 1488, 533, 352, 352, 352, 352, 1216,
	352, 1156, 1604, 1425, 1424, 1421, 1422, 352, 1421, 1420,
	1639, 90, 358, 1116, 533, 358, 900, 533, 1635, 1254,
	1251, 1214, 1169, 504, 579, 23, 660, 533, 703, 702,
	1723, 485, 1722, 1268, 556, 686, 1606, 1607, 1608, 1609,
	1610, 1611, 1612, 1634, 1631, 1542, 1532, 358, 1411, 1141,
	90, 90, 1142, 23, 1201, 1186, 1187, 1189, 90, 1343,
	1227, 1228, 1147, 1230, 1231, 1232, 1567, 358, 1148, 1147,
	900, 1305, 50, 50, 1303, 1047, 687, 1049, 685, 1233,
	1586, 1235, 1236, 1237, 1238, 1148, 54, 1128, 1242, 1243,
	1245, 1241, 1257, 1077, 1249, 1258, 1125, 1258, 1806, 1484,
	50, 1334, 659, 1269, 1265, 1262, 1261, 1270, 1267, 1266,
	660, 1259, 352, 75, 1260, 358, 358, 1116, 23, 698,
	1338, 951, 1349, 685, 1271, 1116, 660, 1147, 1510, 660,
	1127, 1264, 1344, 1551, 1550, 257, 1353, 1531, 1430, 1124,
	1423, 1301, 1176, 537, 541, 1309, 1310, 358, 1306, 358,
	358, 970, 1347, 970, 1313, 956, 1366, 1116, 688, 818,
	559, 1307, 1367, 1330, 843, 50, 1332, 1333, 1352, 1335,
	1336, 1331, 1918, 1825, 1354, 1317, 1796, 928, 1717, 1716,
	1601, 1705, 50, 928, 665, 668, 669, 670, 666, 1704,
	667, 671, 1373, 1664, 1387, 1663, 774, 609, 1641, 1105,
	1629, 1374, 1570, 1216, 1409, 1372, 620, 1010, 1037, 1428,
	1113, 1408, 1115, 1406, 1395, 1360, 1392, 1358, 90, 358,
	1118, 1119, 1120, 1032, 1399, 1214, 1390, 1205, 90, 1129,
	1247, 1248, 1686, 358, 1135, 358, 1179, 1136, 1137, 1138,
	1139, 1152, 1153, 1158, 358, 1026, 1025, 65, 1710, 1552,
	1229, 1429, 1343, 711, 1401, 1155, 90, 1403, 792, 778,
	530, 938, 358, 830, 936, 1157, 939, 935, 352, 937,
	940, 358, 669, 670, 90, 1305, 934, 1874, 1414, 352,
	352, 352, 352, 352, 352, 352, 352, 1412, 1413, 1438,
	1415, 1416, 1417, 352, 352, 1437, 1826, 1454, 261, 262,
	1299, 1426, 1081, 1872, 1091, 1090, 1234, 1451, 701, 547,
	512, 1436, 1397, 826, 665, 668, 669, 670, 666, 1443,
	667, 671, 545, 556, 1152, 1153, 352, 337, 1445, 358,
	1482, 1455, 358, 358, 358, 90, 358, 1458, 1862, 1447,
	535, 1571, 1448, 358, 1465, 820, 821, 970, 1048, 791,
	1457, 1491, 536, 1396, 1256, 1042, 784, 673, 547, 883,
	883, 258, 259, 1483, 1508, 1891, 358, 885, 1520, 1503,
	1504, 1505, 1089, 358, 352, 1566, 1293, 1506, 1433, 1526,
	1088, 358, 1380, 908, 908, 1543, 1177, 252, 1849, 908,
	1525, 1670, 253, 54, 1669, 1574, 1216, 1148, 1814, 1813,
	90, 358, 358, 1528, 1812, 1254, 970, 1053, 1054, 1055,
	358, 1562, 1811, 1563, 1564, 1565, 1703, 1533, 1214, 1780,
	1779, 358, 1379, 1378, 1555, 549, 1561, 908, 1702, 1678,
	1196, 813, 1316, 56, 1651, 8, 1648, 7, 1649, 6,
	58, 1558, 832, 833, 1263, 1559, 1647, 5, 1439, 684,
	51, 1, 1106, 600, 1405, 1407, 352, 292, 1897, 358,
	358, 1867, 278, 1495, 352, 1587, 1807, 1727, 1802, 1545,
	352, 1547, 1733, 1712, 1544, 1202, 67, 1798, 1721, 1432,
	1255, 358, 1364, 1557, 1272, 1045, 1252, 1062, 1745, 1759,
	1600, 1512, 978, 358, 1347, 896, 1585, 967, 483, 64,
	1692, 609, 979, 1615, 905, 906, 977, 976, 1619, 974,
	704, 1598, 1575, 1004, 1614, 1577, 1578, 1613, 1579, 1580,
	1581, 1224, 358, 90, 1007, 1623, 1621, 710, 708, 709,
	713, 358, 231, 344, 672, 697, 550, 1286, 1285, 1039,
	1058, 358, 1636, 352, 1646, 352, 1555, 1294, 809, 1078,
	528, 233, 711, 587, 1087, 1170, 1462, 1463, 351, 1464,
	1350, 352, 358, 1466, 1655, 1468, 1680, 539, 1668, 1573,
	1131, 619, 913, 279, 1687, 834, 291, 290, 1665, 289,
	825, 1140, 560, 336, 656, 352, 962, 1679, 664, 662,
	661, 1154, 1684, 1150, 1683, 335, 1347, 1302, 1479, 1675,
	829, 25, 55, 263, 19, 1632, 1638, 1633, 18, 17,
	20, 16, 15, 1511, 1514, 14, 29, 13, 12, 11,
	10, 9, 1725, 1654, 1456, 1653, 1652, 358, 358, 358,
	358, 1650, 4, 1720, 358, 358, 1461, 1555, 254, 22,
	2, 0, 1655, 0, 0, 1726, 0, 0, 1470, 1471,
	1472, 0, 358, 1475, 1738, 1741, 1750, 358, 0, 0,
	0, 358, 0, 1760, 556, 0, 1485, 1486, 1487, 1755,
	1490, 0, 0, 0, 0, 358, 358, 1774, 0, 0,
	0, 0, 0, 0, 0, 1742, 1743, 0, 358, 0,
	0, 1772, 1773, 358, 0, 0, 0, 0, 0, 358,
	0, 1803, 1792, 1739, 358, 1776, 1082, 1083, 1793, 541,
	0, 0, 1555, 1795, 928, 1815, 1165, 0, 358, 0,
	0, 1655, 1539, 0, 1805, 0, 0, 1775, 1821, 1767,
	1768, 1769, 1770, 1771, 0, 1655, 352, 0, 0, 1794,
	0, 0, 257, 0, 48, 26, 27, 0, 1184, 0,
	0, 0, 0, 0, 0, 0, 1656, 0, 0, 1195,
	1832, 1833, 0, 0, 0, 0, 28, 358, 1837, 1838,
	0, 1221, 0, 0, 0, 0, 1836, 358, 0, 306,
	47, 1857, 0, 0, 1855, 0, 0, 1850, 0, 1859,
	1858, 1117, 0, 1511, 1646, 1871, 358, 1582, 1866, 1865,
	358, 1655, 1870, 0, 1854, 1876, 1134, 0, 0, 1250,
	0, 1853, 352, 1655, 1655, 1655, 1930, 0, 0, 0,
	90, 1595, 1596, 1597, 0, 0, 0, 47, 0, 1886,
	0, 358, 0, 358, 0, 256, 0, 0, 1068, 0,
	1894, 338, 1725, 1894, 352, 1626, 1884, 1873, 90, 0,
	1888, 1878, 1067, 0, 1905, 0, 0, 0, 0, 1907,
	1655, 1662, 1655, 1655, 352, 0, 1883, 0, 1885, 1911,
	0, 1661, 0, 0, 0, 0, 0, 358, 0, 1072,
	0, 1919, 0, 0, 0, 1920, 0, 0, 1066, 358,
	0, 1925, 0, 0, 352, 1671, 1672, 1673, 1674, 0,
	1908, 0, 1926, 1894, 1909, 1474, 0, 0, 0, 908,
	0, 0, 1351, 1165, 0, 908, 1657, 1658, 1660, 1655,
	0, 0, 1659, 1655, 0, 0, 0, 0, 0, 0,
	1308, 1904, 0, 0, 0, 0, 0, 1063, 1060, 1061,
	0, 1059, 1706, 0, 352, 0, 352, 1376, 0, 0,
	567, 566, 576, 577, 569, 570, 571, 572, 573, 574,
	575, 568, 0, 0, 578, 1927, 0, 0, 0, 0,
	1070, 1073, 0, 0, 0, 1221, 0, 0, 567, 566,
	576, 577, 569, 570, 571, 572, 573, 574, 575, 568,
	0, 0, 578, 1751, 0, 0, 0, 0, 1756, 0,
	0, 0, 0, 0, 0, 0, 0, 520, 520, 520,
	520, 0, 520, 0, 0, 0, 1427, 0, 0, 520,
	0, 0, 0, 0, 1340, 1777, 0, 0, 0, 0,
	1442, 0, 1444, 0, 0, 49, 47, 0, 0, 1355,
	1356, 1446, 0, 1357, 0, 0, 1359, 0, 0, 0,
	1065, 588, 0, 0, 590, 0, 0, 0, 0, 1449,
	0, 0, 0, 1822, 0, 1371, 0, 0, 352, 0,
	0, 0, 0, 0, 604, 0, 0, 0, 0, 0,
	0, 0, 0, 1064, 0, 0, 610, 611, 612, 613,
	614, 615, 616, 617, 618, 0, 621, 623, 623, 623,
	623, 623, 623, 623, 623, 0, 652, 653, 654, 655,
	0, 0, 0, 0, 0, 0, 0, 0, 675, 1319,
	0, 538, 0, 1069, 0, 0, 1493, 0, 0, 1493,
	1493, 1493, 0, 1507, 0, 0, 0, 0, 0, 1071,
	352, 567, 566, 576, 577, 569, 570, 571, 572, 573,
	574, 575, 568, 1321, 0, 578, 88, 0, 0, 243,
	0, 0, 0, 1493, 0, 0, 0, 0, 1221, 0,
	1534, 0, 0, 0, 0, 0, 0, 0, 352, 0,
	0, 267, 0, 88, 88, 0, 0, 1453, 0, 0,
	0, 1103, 1603, 1903, 0, 88, 1556, 579, 352, 352,
	88, 0, 88, 0, 0, 1605, 0, 1568, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1572, 0,
	0, 0, 0, 0, 1323, 579, 0, 0, 1328, 0,
	1322, 0, 1481, 0, 0, 1320, 0, 0, 1104, 609,
	0, 1326, 0, 0, 0, 1931, 1932, 0, 0, 0,
	0, 0, 0, 0, 1324, 1325, 1589, 1590, 567, 566,
	576, 577, 569, 570, 571, 572, 573, 574, 575, 568,
	0, 0, 578, 1604, 1327, 1329, 0, 0, 1376, 0,
	520, 632, 0, 0, 0, 1527, 0, 0, 0, 0,
	1622, 520, 520, 520, 520, 520, 520, 520, 520, 0,
	0, 0, 0, 0, 0, 520, 520, 1606, 1607, 1608,
	1609, 1610, 1611, 1612, 0, 634, 0, 0, 1556, 1637,
	0, 0, 0, 0, 0, 0, 0, 0, 1643, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 88, 576, 577, 569, 570,
	571, 572, 573, 574, 575, 568, 0, 0, 578, 1682,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 640, 641, 642, 643, 644, 645, 646, 647, 648,
	649, 0, 0, 0, 0, 0, 0, 0, 579, 0,
	610, 0, 635, 0, 0, 0, 0, 0, 0, 0,
	650, 633, 0, 0, 0, 0, 639, 638, 0, 1556,
	0, 0, 0, 0, 257, 1624, 48, 26, 27, 0,
	1628, 0, 0, 0, 1728, 1730, 1731, 1732, 1656, 0,
	0, 1376, 1376, 0, 0, 0, 0, 0, 28, 0,
	338, 338, 338, 338, 338, 0, 908, 0, 0, 1757,
	0, 1688, 0, 88, 1758, 675, 0, 948, 1761, 0,
	88, 680, 88, 0, 338, 0, 0, 0, 0, 0,
	0, 0, 1643, 1376, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 651, 1556, 1376, 0, 0, 1896, 0,
	1800, 0, 0, 0, 0, 0, 711, 0, 0, 0,
	0, 1810, 0, 0, 0, 579, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1824, 1707, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 0, 48, 26,
	27, 0, 0, 1662, 0, 0, 0, 0, 0, 0,
	1656, 0, 632, 1661, 0, 0, 0, 0, 0, 0,
	28, 0, 0, 1740, 0, 520, 0, 520, 0, 0,
	1749, 609, 0, 0, 1493, 0, 0, 0, 0, 0,
	0, 0, 0, 520, 1860, 0, 634, 0, 0, 0,
	0, 0, 23, 24, 48, 26, 27, 0, 1657, 1658,
	1660, 579, 0, 1376, 1659, 0, 0, 1875, 0, 0,
	1893, 0, 42, 0, 0, 0, 28, 0, 0, 0,
	0, 88, 0, 0, 1801, 0, 0, 0, 0, 88,
	0, 88, 1097, 0, 88, 37, 0, 88, 711, 50,
	1892, 797, 640, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 0, 874, 875, 1662, 876, 877, 878, 880,
	879, 0, 88, 635, 0, 1661, 0, 0, 0, 0,
	0, 650, 633, 0, 0, 0, 0, 639, 638, 0,
	0, 88, 0, 257, 352, 48, 26, 27, 0, 0,
	797, 0, 0, 0, 0, 0, 1643, 1656, 0, 30,
	31, 33, 32, 35, 0, 0, 0, 28, 0, 0,
	1657, 1658, 1660, 1144, 1145, 0, 1659, 49, 0, 0,
	0, 0, 0, 0, 36, 43, 44, 0, 0, 45,
	46, 34, 0, 0, 0, 0, 267, 0, 0, 0,
	0, 338, 0, 267, 267, 0, 0, 909, 909, 267,
	0, 0, 0, 909, 651, 0, 0, 1889, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 38, 39,
	0, 40, 41, 0, 267, 267, 267, 267, 0, 88,
	0, 909, 88, 88, 88, 88, 88, 0, 0, 0,
	0, 0, 1662, 0, 942, 0, 257, 88, 48, 26,
	27, 680, 1661, 0, 229, 0, 88, 88, 0, 257,
	1656, 48, 26, 27, 0, 0, 0, 0, 0, 49,
	28, 0, 47, 1656, 0, 0, 0, 0, 239, 0,
	0, 0, 0, 28, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1657, 1658, 1660,
	0, 0, 0, 1659, 0, 0, 520, 0, 0, 1816,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 224,
	0, 0, 0, 0, 0, 226, 0, 0, 0, 0,
	0, 0, 232, 228, 0, 0, 0, 0, 0, 0,
	88, 0, 88, 0, 0, 0, 0, 0, 0, 88,
	0, 88, 0, 0, 88, 1662, 0, 0, 0, 0,
	0, 0, 1348, 230, 47, 1661, 0, 234, 1662, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1661, 797,
	0, 1361, 1362, 1363, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	1657, 1658, 1660, 0, 0, 0, 1659, 0, 0, 1394,
	0, 0, 1804, 1657, 1658, 1660, 0, 0, 0, 1659,
	0, 0, 0, 0, 0, 1404, 0, 0, 0, 225,
	0, 604, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 0, 0, 0, 227,
	0, 235, 236, 237, 238, 242, 0, 0, 0, 0,
	241, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 338, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 88, 0, 0, 1222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 1524, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1297, 1298, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 797, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 909, 1348, 0, 0, 1588, 0, 909,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1625, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 1222,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1666, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1348, 0, 47, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 680, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	0, 131, 1222, 134, 0, 0, 177, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1829, 0,
	0, 0, 0, 0, 0, 357, 0, 0, 0, 0,
	1222, 88, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 567, 566, 576, 577, 569, 570, 571, 572, 573,
	574, 575, 568, 0, 0, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 1222, 0, 88, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 1923, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 1222, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	909, 211, 0, 164, 119, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 0, 0, 0, 0, 0, 0, 0, 579, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 1222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 469, 459, 0, 420, 471,
	390, 408, 479, 410, 411, 446, 370, 429, 155, 405,
	388, 93, 393, 363, 400, 364, 391, 422, 117, 389,
	461, 432, 131, 477, 134, 437, 0, 177, 143, 0,
	0, 424, 463, 427, 454, 419, 447, 378, 436, 472,
	406, 442, 473, 0, 0, 0, 357, 0, 971, 972,
	0, 0, 0, 0, 0, 106, 0, 441, 468, 402,
	482, 445, 362, 439, 0, 368, 371, 478, 466, 397,
	398, 1178, 0, 0, 0, 0, 0, 0, 423, 428,
	451, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	394, 1882, 435, 0, 0, 0, 375, 369, 0, 421,
	0, 0, 0, 377, 0, 395, 452, 0, 359, 457,
	464, 418, 204, 467, 415, 414, 162, 0, 109, 88,
	183, 121, 407, 132, 449, 480, 470, 425, 462, 392,
	401, 111, 399, 169, 156, 195, 434, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 367, 360, 396, 455, 458, 382,
	444, 372, 403, 450, 404, 426, 387, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 0, 151, 124, 0, 0, 0,
	365, 0, 178, 197, 214, 215, 366, 386, 465, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 443, 170, 108, 196, 176, 0,
	381, 385, 379, 380, 430, 431, 474, 475, 476, 453,
	376, 0, 383, 384, 0, 460, 126, 433, 92, 100,
	133, 481, 211, 0, 164, 119, 198, 0, 0, 409,
	361, 413, 0, 0, 0, 0, 0, 0, 0, 373,
	374, 171, 417, 412, 438, 440, 448, 456, 469, 459,
	105, 420, 471, 390, 408, 479, 410, 411, 446, 370,
	429, 155, 405, 388, 93, 393, 363, 400, 364, 391,
	422, 117, 389, 461, 432, 131, 477, 134, 437, 0,
	177, 143, 0, 0, 424, 463, 427, 454, 419, 447,
	378, 436, 472, 406, 442, 473, 0, 0, 0, 357,
	0, 971, 972, 0, 0, 0, 0, 0, 106, 0,
	441, 468, 402, 482, 445, 362, 439, 0, 368, 371,
	478, 466, 397, 398, 0, 0, 0, 0, 0, 0,
	0, 423, 428, 451, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 394, 0, 435, 0, 0, 0, 375,
	369, 0, 421, 0, 0, 0, 377, 0, 395, 452,
	0, 359, 457, 464, 418, 204, 467, 415, 414, 162,
	0, 109, 0, 183, 121, 407, 132, 449, 480, 470,
	425, 462, 392, 401, 111, 399, 169, 156, 195, 434,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 367, 360, 396,
	455, 458, 382, 444, 372, 403, 450, 404, 426, 387,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 0, 151, 124,
	0, 0, 0, 365, 0, 178, 197, 214, 215, 366,
	386, 465, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 443, 170, 108,
	196, 176, 0, 381, 385, 379, 380, 430, 431, 474,
	475, 476, 453, 376, 0, 383, 384, 0, 460, 126,
	433, 92, 100, 133, 481, 211, 0, 164, 119, 198,
	0, 0, 409, 361, 413, 0, 0, 0, 0, 0,
	0, 0, 373, 374, 171, 417, 412, 438, 440, 448,
	456, 469, 459, 105, 420, 471, 390, 408, 479, 410,
	411, 446, 370, 429, 155, 405, 388, 93, 393, 363,
	400, 364, 391, 422, 117, 389, 461, 432, 131, 477,
	134, 437, 0, 177, 143, 0, 0, 424, 463, 427,
	454, 419, 447, 378, 436, 472, 406, 442, 473, 0,
	0, 0, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 441, 468, 402, 482, 445, 362, 439,
	0, 368, 371, 478, 466, 397, 398, 0, 0, 0,
	0, 0, 0, 0, 423, 428, 451, 416, 0, 0,
	0, 0, 0, 0, 1304, 0, 394, 0, 435, 0,
	0, 0, 375, 369, 0, 421, 0, 0, 0, 377,
	0, 395, 452, 0, 359, 457, 464, 418, 204, 467,
	415, 414, 162, 0, 109, 0, 183, 121, 407, 132,
	449, 480, 470, 425, 462, 392, 401, 111, 399, 169,
	156, 195, 434, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	367, 360, 396, 455, 458, 382, 444, 372, 403, 450,
	404, 426, 387, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 151, 124, 0, 0, 0, 365, 0, 178, 197,
	214, 215, 366, 386, 465, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	443, 170, 108, 196, 176, 0, 381, 385, 379, 380,
	430, 431, 474, 475, 476, 453, 376, 0, 383, 384,
	0, 460, 126, 433, 92, 100, 133, 481, 211, 0,
	164, 119, 198, 0, 0, 409, 361, 413, 0, 0,
	0, 0, 0, 0, 0, 373, 374, 171, 417, 412,
	438, 440, 448, 456, 469, 459, 105, 420, 471, 390,
	408, 479, 410, 411, 446, 370, 429, 155, 405, 388,
	93, 393, 363, 400, 364, 391, 422, 117, 389, 461,
	432, 131, 477, 134, 437, 0, 177, 143, 0, 0,
	424, 463, 427, 454, 419, 447, 378, 436, 472, 406,
	442, 473, 50, 0, 0, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 441, 468, 402, 482,
	445, 362, 439, 0, 368, 371, 478, 466, 397, 398,
	0, 0, 0, 0, 0, 0, 0, 423, 428, 451,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 394,
	0, 435, 0, 0, 0, 375, 369, 0, 421, 0,
	0, 0, 377, 0, 395, 452, 0, 359, 457, 464,
	418, 204, 467, 415, 414, 162, 0, 109, 0, 183,
	121, 407, 132, 449, 480, 470, 425, 462, 392, 401,
	111, 399, 169, 156, 195, 434, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 367, 360, 396, 455, 458, 382, 444,
	372, 403, 450, 404, 426, 387, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 0, 151, 124, 0, 0, 0, 365,
	0, 178, 197, 214, 215, 366, 386, 465, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 443, 170, 108, 196, 176, 0, 381,
	385, 379, 380, 430, 431, 474, 475, 476, 453, 376,
	0, 383, 384, 0, 460, 126, 433, 92, 100, 133,
	481, 211, 0, 164, 119, 198, 0, 0, 409, 361,
	413, 0, 0, 0, 0, 0, 0, 0, 373, 374,
	171, 417, 412, 438, 440, 448, 456, 469, 459, 105,
	420, 471, 390, 408, 479, 410, 411, 446, 370, 429,
	155, 405, 388, 93, 393, 363, 400, 364, 391, 422,
	117, 389, 461, 432, 131, 477, 134, 437, 0, 177,
	143, 0, 0, 424, 463, 427, 454, 419, 447, 378,
	436, 472, 406, 442, 473, 0, 0, 0, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 441,
	468, 402, 482, 445, 362, 439, 0, 368, 371, 478,
	466, 397, 398, 0, 0, 0, 0, 0, 0, 0,
	423, 428, 451, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 394, 0, 435, 0, 0, 0, 375, 369,
	0, 421, 0, 0, 0, 377, 0, 395, 452, 0,
	359, 457, 464, 418, 204, 467, 415, 414, 162, 0,
	109, 0, 183, 121, 407, 132, 449, 480, 470, 425,
	462, 392, 401, 111, 399, 169, 156, 195, 434, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 367, 360, 396, 455,
	458, 382, 444, 372, 403, 450, 404, 426, 387, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 355,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 0, 151, 124, 0,
	0, 0, 365, 0, 178, 197, 214, 215, 366, 386,
	465, 207, 208, 209, 210, 0, 0, 0, 356, 354,
	125, 174, 129, 136, 165, 212, 443, 170, 108, 196,
	176, 350, 381, 385, 379, 380, 430, 431, 474, 475,
	476, 453, 376, 0, 383, 384, 0, 460, 126, 433,
	92, 100, 133, 481, 211, 0, 164, 119, 198, 0,
	0, 409, 361, 413, 0, 0, 0, 0, 0, 0,
	0, 373, 374, 171, 417, 412, 438, 440, 448, 456,
	469, 459, 105, 420, 471, 390, 408, 479, 410, 411,
	446, 370, 429, 155, 405, 388, 93, 393, 363, 400,
	364, 391, 422, 117, 389, 461, 432, 131, 477, 134,
	437, 0, 177, 143, 0, 0, 424, 463, 427, 454,
	419, 447, 378, 436, 472, 406, 442, 473, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 441, 468, 402, 482, 445, 362, 439, 0,
	368, 371, 478, 466, 397, 398, 0, 0, 0, 0,
	0, 0, 0, 423, 428, 451, 416, 0, 0, 0,
	0, 0, 0, 840, 0, 394, 0, 435, 0, 0,
	0, 375, 369, 0, 421, 0, 0, 0, 377, 0,
	395, 452, 0, 359, 457, 464, 418, 204, 467, 415,
	414, 162, 0, 109, 0, 183, 121, 407, 132, 449,
	480, 470, 425, 462, 392, 401, 111, 399, 169, 156,
	195, 434, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 367,
	360, 396, 455, 458, 382, 444, 372, 403, 450, 404,
	426, 387, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 0,
	151, 124, 0, 0, 0, 365, 0, 178, 197, 214,
	215, 366, 386, 465, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 443,
	170, 108, 196, 176, 0, 381, 385, 379, 380, 430,
	431, 474, 475, 476, 453, 376, 0, 383, 384, 0,
	460, 126, 433, 92, 100, 133, 481, 211, 0, 164,
	119, 198, 0, 0, 409, 361, 413, 0, 0, 0,
	0, 0, 0, 0, 373, 374, 171, 417, 412, 438,
	440, 448, 456, 469, 459, 105, 420, 471, 390, 408,
	479, 410, 411, 446, 370, 429, 155, 405, 388, 93,
	393, 363, 400, 364, 391, 422, 117, 389, 461, 432,
	131, 477, 134, 437, 0, 177, 143, 0, 0, 424,
	463, 427, 454, 419, 447, 378, 436, 472, 406, 442,
	473, 0, 0, 0, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 441, 468, 402, 482, 445,
	362, 439, 0, 368, 371, 478, 466, 397, 398, 0,
	0, 0, 0, 0, 0, 0, 423, 428, 451, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 394, 0,
	435, 0, 0, 0, 375, 369, 0, 421, 0, 0,
	0, 377, 0, 395, 452, 0, 359, 457, 464, 418,
	204, 467, 415, 414, 162, 0, 109, 0, 183, 121,
	407, 132, 449, 480, 470, 425, 462, 392, 401, 111,
	399, 169, 156, 195, 434, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 367, 360, 396, 455, 458, 382, 444, 372,
	403, 450, 404, 426, 387, 0, 0, 0, 0, 0,
	94, 184, 690, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 355, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 0, 151, 124, 0, 0, 0, 365, 0,
	178, 197, 214, 215, 366, 386, 465, 207, 208, 209,
	210, 0, 0, 0, 356, 354, 125, 174, 129, 136,
	165, 212, 443, 170, 108, 196, 176, 350, 381, 385,
	379, 380, 430, 431, 474, 475, 476, 453, 376, 0,
	383, 384, 0, 460, 126, 433, 92, 100, 133, 481,
	211, 0, 164, 119, 198, 0, 0, 409, 361, 413,
	0, 0, 0, 0, 0, 0, 0, 373, 374, 171,
	417, 412, 438, 440, 448, 456, 469, 459, 105, 420,
	471, 390, 408, 479, 410, 411, 446, 370, 429, 155,
	405, 388, 93, 393, 363, 400, 364, 391, 422, 117,
	389, 461, 432, 131, 477, 134, 437, 0, 177, 143,
	0, 0, 424, 463, 427, 454, 419, 447, 378, 436,
	472, 406, 442, 473, 0, 0, 0, 357, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 441, 468,
	402, 482, 445, 362, 439, 0, 368, 371, 478, 466,
	397, 398, 0, 0, 0, 0, 0, 0, 0, 423,
	428, 451, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 394, 0, 435, 0, 0, 0, 375, 369, 0,
	421, 0, 0, 0, 377, 0, 395, 452, 0, 359,
	457, 464, 418, 204, 467, 415, 414, 162, 0, 109,
	0, 183, 121, 407, 132, 449, 480, 470, 425, 462,
	392, 401, 111, 399, 169, 156, 195, 434, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 367, 360, 396, 455, 458,
	382, 444, 372, 403, 450, 404, 426, 387, 0, 0,
	0, 0, 0, 94, 184, 345, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 355, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 0, 151, 124, 0, 0,
	0, 365, 0, 178, 197, 214, 215, 366, 386, 465,
	207, 208, 209, 210, 0, 0, 0, 356, 354, 348,
	347, 129, 136, 165, 212, 443, 170, 108, 196, 176,
	350, 381, 385, 379, 380, 430, 431, 474, 475, 476,
	453, 376, 0, 383, 384, 0, 460, 126, 433, 92,
	100, 133, 481, 211, 0, 164, 119, 198, 0, 0,
	409, 361, 413, 0, 0, 0, 0, 0, 0, 0,
	373, 374, 171, 417, 412, 438, 440, 448, 456, 469,
	459, 105, 420, 471, 390, 408, 479, 410, 411, 446,
	370, 429, 155, 405, 388, 93, 393, 363, 400, 364,
	391, 422, 117, 389, 461, 432, 131, 477, 134, 437,
	0, 177, 143, 0, 0, 424, 463, 427, 454, 419,
	447, 378, 436, 472, 406, 442, 473, 0, 0, 0,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 441, 468, 402, 482, 445, 362, 439, 0, 368,
	371, 478, 466, 397, 398, 0, 0, 0, 0, 0,
	0, 0, 423, 428, 451, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 394, 0, 435, 0, 0, 0,
	375, 369, 0, 421, 0, 0, 0, 377, 0, 395,
	452, 0, 359, 457, 464, 418, 204, 467, 415, 414,
	162, 0, 109, 0, 183, 121, 407, 132, 449, 480,
	470, 425, 462, 392, 401, 111, 399, 169, 156, 195,
	434, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 367, 360,
	396, 455, 458, 382, 444, 372, 403, 450, 404, 426,
	387, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 151,
	124, 0, 0, 0, 365, 0, 178, 197, 214, 215,
	366, 386, 465, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 443, 170,
	108, 196, 176, 0, 381, 385, 379, 380, 430, 431,
	474, 475, 476, 453, 376, 0, 383, 384, 0, 460,
	126, 433, 92, 100, 133, 481, 211, 0, 164, 119,
	198, 0, 0, 409, 361, 413, 0, 0, 0, 0,
	0, 0, 0, 373, 374, 171, 417, 412, 438, 440,
	448, 456, 469, 459, 105, 420, 471, 390, 408, 479,
	410, 411, 446, 370, 429, 155, 405, 388, 93, 393,
	363, 400, 364, 391, 422, 117, 389, 461, 432, 131,
	477, 134, 437, 0, 177, 143, 0, 0, 424, 463,
	427, 454, 419, 447, 378, 436, 472, 406, 442, 473,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 441, 468, 402, 482, 445, 362,
	439, 0, 368, 371, 478, 466, 397, 398, 0, 0,
	0, 0, 0, 0, 0, 423, 428, 451, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 394, 0, 435,
	0, 0, 0, 375, 369, 0, 421, 0, 0, 0,
	377, 0, 395, 452, 0, 359, 457, 464, 418, 204,
	467, 415, 414, 162, 0, 109, 0, 183, 121, 407,
	132, 449, 480, 470, 425, 462, 392, 401, 111, 399,
	169, 156, 195, 434, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 367, 360, 396, 455, 458, 382, 444, 372, 403,
	450, 404, 426, 387, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 365, 0, 178,
	197, 214, 215, 366, 386, 465, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 443, 170, 108, 196, 176, 0, 381, 385, 379,
	380, 430, 431, 474, 475, 476, 453, 376, 0, 383,
	384, 0, 460, 126, 433, 92, 100, 133, 481, 211,
	0, 164, 119, 198, 0, 0, 409, 361, 413, 0,
	0, 0, 0, 0, 0, 0, 373, 374, 171, 417,
	412, 438, 440, 448, 456, 469, 459, 105, 420, 471,
	390, 408, 479, 410, 411, 446, 370, 429, 155, 405,
	388, 93, 393, 363, 400, 364, 391, 422, 117, 389,
	461, 432, 131, 477, 134, 437, 0, 177, 143, 0,
	0, 424, 463, 427, 454, 419, 447, 378, 436, 472,
	406, 442, 473, 0, 0, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 441, 468, 402,
	482, 445, 362, 439, 0, 368, 371, 478, 466, 397,
	398, 0, 0, 0, 0, 0, 0, 0, 423, 428,
	451, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	394, 0, 435, 0, 0, 0, 375, 369, 0, 421,
	0, 0, 0, 377, 0, 395, 452, 0, 359, 457,
	464, 418, 204, 467, 415, 414, 162, 0, 109, 0,
	183, 121, 407, 132, 449, 480, 470, 425, 462, 392,
	401, 111, 399, 169, 156, 195, 434, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 367, 360, 396, 455, 458, 382,
	444, 372, 403, 450, 404, 426, 387, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 0, 151, 124, 0, 0, 0,
	365, 0, 178, 197, 214, 215, 366, 386, 465, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 443, 170, 108, 196, 176, 0,
	381, 385, 379, 380, 430, 431, 474, 475, 476, 453,
	376, 0, 383, 384, 0, 460, 126, 433, 92, 100,
	133, 481, 211, 0, 164, 119, 198, 0, 0, 409,
	361, 413, 0, 0, 0, 0, 0, 0, 0, 373,
	374, 171, 417, 412, 438, 440, 448, 456, 155, 0,
	105, 93, 0, 0, 274, 0, 0, 0, 117, 271,
	0, 0, 131, 316, 134, 0, 0, 177, 143, 0,
	0, 0, 0, 307, 308, 0, 0, 0, 0, 0,
	0, 960, 0, 50, 0, 0, 272, 295, 293, 297,
	298, 299, 300, 0, 0, 106, 296, 301, 302, 303,
	961, 0, 0, 269, 286, 0, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 0, 0,
	0, 0, 328, 0, 285, 0, 0, 281, 282, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 326, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 330, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 304,
	317, 327, 323, 324, 321, 322, 320, 319, 318, 329,
	309, 310, 311, 312, 314, 0, 126, 313, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 893, 0, 274, 0, 0, 0, 117, 271,
	0, 171, 131, 316, 134, 0, 0, 177, 143, 325,
	105, 0, 0, 307, 308, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 272, 295, 293, 297,
	298, 299, 300, 0, 0, 106, 296, 301, 302, 303,
	0, 0, 0, 269, 286, 0, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 265, 0,
	0, 0, 328, 0, 285, 0, 0, 281, 282, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 326, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 330, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 304,
	317, 327, 323, 324, 321, 322, 320, 319, 318, 329,
	309, 310, 311, 312, 314, 0, 126, 313, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 0, 274, 0, 0, 0, 117, 271,
	0, 171, 131, 316, 134, 0, 0, 177, 143, 325,
	105, 0, 0, 307, 308, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 533, 272, 295, 293, 297,
	298, 299, 300, 0, 0, 106, 296, 301, 302, 303,
	0, 0, 0, 269, 286, 0, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 0, 0,
	0, 0, 328, 0, 285, 0, 0, 281, 282, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 326, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 330, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 304,
	317, 327, 323, 324, 321, 322, 320, 319, 318, 329,
	309, 310, 311, 312, 314, 0, 126, 313, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 0, 274, 0, 0, 0, 117, 271,
	0, 171, 131, 316, 134, 0, 0, 177, 143, 325,
	105, 0, 0, 307, 308, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 272, 295, 293, 297,
	298, 299, 300, 0, 0, 106, 296, 301, 302, 303,
	0, 0, 0, 269, 286, 0, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 265, 0,
	0, 0, 328, 0, 285, 0, 0, 281, 282, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 326, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 330, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 304,
	317, 327, 323, 324, 321, 322, 320, 319, 318, 329,
	309, 310, 311, 312, 314, 0, 126, 313, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 0, 0,
	23, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 155, 0, 0, 93, 0, 0, 274, 325,
	105, 0, 117, 271, 0, 0, 131, 316, 134, 0,
	0, 177, 143, 0, 0, 0, 0, 307, 308, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 295, 293, 297, 298, 299, 300, 0, 0, 106,
	296, 301, 302, 303, 0, 0, 0, 269, 286, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 0, 0, 0, 0, 328, 0, 285, 0,
	0, 281, 282, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 326,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 330, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 304, 317, 327, 323, 324, 321, 322,
	320, 319, 318, 329, 309, 310, 311, 312, 314, 0,
	126, 313, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 274, 0,
	0, 0, 117, 271, 0, 171, 131, 316, 134, 0,
	0, 177, 143, 325, 105, 0, 0, 307, 308, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 295, 293, 297, 298, 299, 300, 0, 0, 106,
	296, 301, 302, 303, 0, 0, 0, 269, 286, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 0, 0, 0, 0, 328, 0, 285, 0,
	0, 281, 282, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 326,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 330, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 304, 317, 327, 323, 324, 321, 322,
	320, 319, 318, 329, 309, 310, 311, 312, 314, 0,
	126, 313, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 316, 134, 0,
	0, 177, 143, 325, 105, 0, 0, 307, 308, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 295, 293, 297, 298, 299, 300, 0, 0, 106,
	296, 301, 302, 303, 0, 0, 0, 0, 286, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 0, 0, 0, 0, 328, 0, 285, 0,
	0, 281, 282, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 326,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	1928, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 330, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 304, 317, 327, 323, 324, 321, 322,
	320, 319, 318, 329, 309, 310, 311, 312, 314, 0,
	126, 313, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 274, 0,
	0, 0, 117, 0, 0, 171, 131, 316, 134, 0,
	0, 177, 143, 325, 105, 0, 0, 307, 308, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 295, 293, 297, 298, 299, 300, 0, 0, 106,
	296, 301, 302, 303, 0, 0, 0, 0, 286, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 0, 0, 0, 0, 328, 0, 285, 0,
	0, 281, 282, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 326,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 330, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 304, 317, 327, 323, 324, 321, 322,
	320, 319, 318, 329, 309, 310, 311, 312, 314, 0,
	126, 313, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 316, 134, 0,
	0, 177, 143, 325, 105, 0, 0, 307, 308, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 295, 293, 297, 298, 299, 300, 0, 0, 106,
	296, 301, 302, 303, 0, 0, 0, 0, 286, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 0, 0, 0, 0, 328, 0, 285, 0,
	0, 281, 282, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 326,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 330, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 304, 317, 327, 323, 324, 321, 322,
	320, 319, 318, 329, 309, 310, 311, 312, 314, 0,
	126, 313, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 325, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1400, 0, 0,
	272, 0, 1208, 1209, 1210, 0, 0, 0, 0, 106,
	1213, 1211, 302, 303, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 1215,
	1220, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 1217, 0, 1219, 1218, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1207, 0, 0,
	272, 0, 1208, 1209, 1210, 0, 0, 0, 0, 106,
	1213, 1211, 302, 303, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 1215,
	1220, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 1217, 0, 1219, 1218, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	272, 0, 1208, 1209, 1210, 0, 0, 0, 0, 106,
	1213, 1211, 302, 303, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 1215,
	1220, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 1217, 0, 1219, 1218, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	357, 295, 293, 297, 298, 299, 300, 0, 0, 106,
	296, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 737, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 722, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 738, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 1809, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 0, 764, 765, 160, 766, 767, 768, 770, 769,
	739, 740, 741, 745, 743, 742, 744, 716, 718, 202,
	714, 717, 723, 719, 720, 721, 735, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 736, 746,
	747, 748, 749, 750, 751, 752, 753, 0, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 715, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 555, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	357, 0, 557, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 552, 551, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 737, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 722, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 738, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 0, 764, 765, 160, 766, 767, 768, 770, 769,
	739, 740, 741, 745, 743, 742, 744, 716, 718, 202,
	714, 717, 723, 719, 720, 721, 735, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 736, 746,
	747, 748, 749, 750, 751, 752, 753, 0, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 715, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 679, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 681, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 23, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 0, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 117, 0, 171, 0, 131, 0, 134,
	0, 0, 177, 143, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 0,
	151, 124, 0, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 0, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 171, 131, 0, 134,
	0, 0, 177, 143, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1040, 0, 0, 0,
	0, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1041, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 0,
	151, 124, 0, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 23, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 0, 0, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 171, 0, 131, 0,
	134, 0, 0, 177, 143, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 151, 124, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 357, 0, 0, 827, 0, 0, 828, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 151, 124, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 700, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 357, 0, 699, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 151, 124, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 155, 0, 0, 93, 0, 679,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 681, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 677, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 151, 124, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 151, 124, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 1881, 117, 0, 171, 0, 131,
	0, 134, 0, 0, 177, 143, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 1377, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 1494, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 1377, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 1536, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 1535, 200, 149, 154, 152, 199,
	1537, 192, 142, 139, 0, 98, 190, 140, 138, 1538,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 889, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 681, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 357, 0, 557, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 787, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 657, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 340, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 0,
	0, 0, 0, 0, 0, 0, 0, 105,
}

var yyPact = [...]int{
	2606, -1000, -206, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1408, 1458, -1000, -1000, -1000, -1000, -1000, -1000, 1224,
	266, 352, 387, 139, 17767, 375, 2802, 18367, -1000, 144,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1142, -1000, -1000,
	-1000, -1000, -1000, 1400, 1406, 1159, 1370, 1289, -1000, 8450,
	353, 15967, 17467, 6231, -1000, 1005, -163, 358, 18067, 348,
	348, 18067, 18067, 18367, 348, -1000, -44, 369, 18367, -1000,
	18367, 347, 997, 347, 347, 347, 18367, -1000, 478, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 18367, 935, 1310, 287, 4899, 4899, 4899,
	4899, 256, 4899, -5, 1239, -1000, -1000, -1000, -1000, 4899,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	864, 1351, 9064, 9064, 1408, -1000, 1142, -1000, -1000, -1000,
	1317, -1000, -1000, 668, 1444, -1000, 11764, 477, -1000, 9064,
	90, 1050, -1000, -1000, 1050, -1000, -1000, 460, -1000, -1000,
	-1000, 9964, 9964, 9964, 9964, 9964, 9964, 9964, -1000, -1000,
	-1000, -1000, 67, -183, 835, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 475, -1000, 8764, 1050, 1050, 1050,
	1050, 1050, 1050, 1050, 1050, 9064, 1050, 1050, 1050, 1050,
	1050, 1050, 1050, 1050, 1050, 2204, 1050, 1050, 1050, 1050,
	-1000, 17167, 1102, 1173, -1000, -1000, -1000, 1364, 13266, 14166,
	18367, 1054, -1000, 1134, 5898, 20, -1000, -1000, -1000, 587,
	474, 13866, -1000, -1000, -1000, 1308, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1004, -1000, 12064, 367, -1000, -1000, 18367,
	1174, 932, 639, 926, 1238, 374, 1363, 18367, -1000, 16867,
	4899, 356, 18367, 1355, 1237, 18367, 920, 918, -1000, 7230,
	-1000, 4899, 4899, 4899, 4899, 4899, 4899, 4899, 4899, -1000,
	-1000, -1000, -1000, -1000, -1000, 4899, 4899, -1000, 26, -1000,
	18367, -1000, -1000, -1000, -1000, 1452, 504, 862, 470, 1135,
	-1000, 711, 1400, 864, 1289, 13566, 1251, -1000, -1000, 18367,
	-1000, 9064, 9064, 790, -1000, 16567, -1000, -1000, 5565, 529,
	9964, 786, 515, 9964, 9964, 9964, 9964, 9964, 9964, 9964,
	9964, 9964, 9964, 9964, 9964, 9964, 9964, 9964, 816, 2465,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 916, -1000,
	1142, 11164, 11164, 39, 39, 39, 39, 39, 39, 3519,
	-1000, -218, -1000, 157, 7850, -1000, 6564, 864, 992, 659,
	8764, 8450, 8450, 9064, 9064, 18667, 18667, 8450, 1366, 611,
	659, 18667, -1000, 864, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 105, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 8450, 8450, 8450, 8450, 280, 18367, -1000, 18667,
	15967, 15967, 15967, 15967, 15967, -1000, 1265, 1256, -1000, 1253,
	1250, 1259, 18367, -1000, 1002, 13266, 421, 1050, -1000, 16267,
	-1000, -1000, 280, 1099, 15967, 18367, -1000, -1000, 5232, 1134,
	20, 1131, -1000, -18, 4, 7550, 6564, 492, -1000, -1000,
	-1000, -1000, 4233, 809, 331, -126, 41, -1000, -1000, -1000,
	-1000, -1000, 1184, -1000, -1000, -1000, 1184, 274, 1184, 1184,
	1184, -1000, 1184, 1184, 96, 96, 96, 96, 96, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1223, 1222, -1000, 1184,
	1184, 1184, -1000, 1184, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1200, 282, 1200, 1185, 1185, -1000,
	-1000, 12965, 1362, -79, 914, 4899, 1354, 4899, 18367, 1429,
	18367, -1000, -1000, -1000, 12064, -1000, 1853, 18367, -1000, 18367,
	-1000, -1000, 18367, 4899, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 605,
	-1000, -1000, -1000, -1000, 1295, 9064, 9064, 6897, 9064, -1000,
	-1000, -1000, 1351, -1000, 1366, 1391, -1000, 1302, 1301, 8450,
	-1000, -1000, 529, 537, -1000, -1000, 706, -1000, -1000, -1000,
	-1000, 469, 1050, -1000, 441, -1000, -1000, -1000, -1000, 786,
	9964, 9964, 9964, 2079, 441, 2196, 2282, 715, 39, 52,
	52, 111, 111, 111, 111, 111, 148, 148, -1000, -1000,
	-1000, -1000, -1000, 1184, 1200, 282, 1200, 1185, 1185, -1000,
	-1000, 864, -1000, 842, -1000, -1000, 836, 100, -86, -1000,
	-1000, -1000, 864, 8450, 992, 1133, 11764, -1000, -1000, -1000,
	9064, -1000, 864, 989, 989, 652, 607, 1115, -1000, 451,
	1106, 989, 8450, 634, -1000, 9064, 864, -1000, -1000, 989,
	864, 989, 989, 1049, 1050, -1000, 1103, -1000, 585, 1173,
	1220, 1234, 1303, -1000, -1000, -1000, -1000, 1254, -1000, 1232,
	-1000, -1000, -1000, -1000, -76, 363, 362, 361, 18067, -1000,
	1415, 15967, 1086, -1000, -1000, 1131, 20, -20, -1000, -1000,
	-1000, -1000, 659, 578, -1000, -1000, 898, 1118, 3900, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1213, 787,
	18067, 319, 312, 384, 372, 897, -1000, -1000, -1000, 720,
	-1000, 18067, 1451, -1000, -1000, 307, -1000, 306, 632, 840,
	18367, 203, 1204, 10564, -1000, -223, -1000, 27, -1000, -1000,
	742, 96, 96, 1184, 96, 96, 96, -1000, -1000, 492,
	1306, 492, 492, 492, 492, 838, 838, -86, -86, -1000,
	-1000, -1000, 824, 1200, -1000, -1000, -1000, 818, -1000, 1209,
	18367, 18067, 1142, -1000, 6564, -1000, -1000, -1000, -1000, -1000,
	1361, 1071, -1000, -1000, -1000, -1000, 378, -1000, -1000, 1007,
	778, 473, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 276, 376, -1000, 4899, -1000, 609, 18367,
	18367, 1292, 659, 659, 444, -1000, -1000, 18367, -1000, -1000,
	-1000, -1000, 1093, -1000, -1000, -1000, 4566, 8450, -1000, 2079,
	441, 1888, -1000, 9964, 9964, -1000, 63, -1000, -183, -1000,
	-1000, 118, 115, -1000, 989, -1000, 8450, 659, -1000, -1000,
	-1000, 2042, 816, 2042, 9964, 9964, 6897, 9964, 9964, -69,
	1101, 594, -1000, 9064, 582, -1000, -1000, -1000, -1000, -1000,
	1231, 18667, 1050, -1000, 12665, 18067, 1408, 18667, 9064, 9064,
	-1000, -1000, 9064, 1194, -1000, 9064, -1000, -1000, -1000, -1000,
	1192, 1050, 1050, 1050, 965, -1000, 1408, 1086, -1000, -1000,
	-1000, -25, -14, -1000, 9064, -1000, 4233, -1000, 4233, 14767,
	-1000, 1443, 1393, 309, 33, -1000, 885, 880, -1000, 865,
	-1000, -1000, 59, -1000, -153, 107, 0, -1000, -1000, 1050,
	-1000, 1191, 1360, -1000, 1313, 791, -1000, 10264, -179, -1000,
	-1000, -183, -1000, -1000, -1000, 1050, -1000, 1190, 1188, -1000,
	1181, 1050, 422, -1000, -1000, -1000, 1023, 492, 492, 96,
	492, 492, 492, -1000, 495, -1000, -1000, -1000, -1000, 984,
	-1000, 981, -1000, -1000, 1116, -1000, 979, 18367, 18067, 1186,
	1230, -1000, 1114, -1000, 576, 1389, 248, 18367, 1429, 1429,
	-1000, 311, 18067, -1000, 18067, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 18067, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 18367, -1000, -1000, -1000, -1000,
	-1000, 18067, 337, -1000, -1000, 837, 9064, -1000, -1000, -1000,
	6564, -1000, 1415, 15967, -1000, -1000, 864, -1000, 9964, 441,
	441, -1000, 836, -1000, 40, 30, -1000, -1000, 864, 1184,
	1184, -1000, 1184, 1185, -1000, -1000, 1184, 133, 1184, 130,
	864, 864, 216, 1916, -1000, 183, 656, 1050, -52, -1000,
	659, 9064, -1000, 1332, 1038, 1075, -1000, -1000, 8150, 864,
	969, 414, 965, 1400, -1000, 659, 659, 659, 15067, 659,
	-195, 15067, 15067, 15067, 12364, 18067, 1400, -1000, -1000, -1000,
	-1000, 659, 3900, -1000, 963, -1000, 267, 1184, 416, 416,
	-162, 305, 298, 1050, -1000, -1000, -1000, -1000, -163, -1000,
	-1000, 632, -1000, 1181, 9064, 15067, 141, -1000, 1113, 1021,
	10864, -1000, 15667, -1000, 864, -1000, 827, -1000, 820, 1020,
	6564, -1000, -1000, -1000, 492, -1000, -1000, -1000, -1000, -1000,
	96, 832, 96, 774, -1000, 761, 1111, 1228, 15367, 18367,
	6564, 4233, 355, 1435, -1000, -1000, 1386, -1000, 1073, 18067,
	-1000, -1000, 327, -1000, 1179, -1000, -1000, -1000, -1000, 1344,
	18067, -1000, -1000, 659, 1412, 1105, -1000, 441, -1000, -1000,
	-1000, -1000, -1000, 270, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 9964, 9964, -1000, 9964, 9964, 9964, 864,
	829, 659, 294, -1000, 1050, -1000, -1000, 1077, 18067, 18067,
	-1000, -1000, 959, -1000, -1000, 949, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 944, 944, 944, 421, -1000, -1000, 899,
	14767, 1350, -1000, -1000, -1000, 781, -1000, -1000, 655, 234,
	694, -1000, 18067, -163, 9064, -1000, 1050, 672, 942, 9064,
	1177, 743, -1000, 1019, -1000, 100, -86, -1000, -1000, -1000,
	-1000, -1000, -1000, 1050, -1000, 492, -1000, 492, 1018, 993,
	15367, 18067, 18367, 985, 1104, -1000, 253, 1175, -1000, -1000,
	18067, -1000, -1000, -1000, -1000, -1000, 218, 2833, 1172, 1170,
	15067, 1050, 340, 1410, 1405, -1000, -1000, 269, 269, 269,
	269, 106, -1000, -1000, 1450, -1000, 1050, -1000, 1142, 410,
	-1000, 18067, -1000, -1000, -195, -1000, -1000, -1000, -76, 1211,
	2170, 168, -1000, 857, 575, 782, 574, 570, 553, 550,
	547, 546, 522, -1000, -1000, -1000, 1449, -1000, -1000, -1000,
	1436, 1166, -1000, 1158, 672, 9064, 243, 1227, 796, -1000,
	960, 945, -1000, -1000, -1000, -1000, 925, 1156, 1155, -171,
	742, 15367, 1008, -1000, 206, 2833, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1408, 18067, 18067, 18067, 18067,
	345, 9664, 9064, 14767, 14767, 939, 275, 284, -1000, 9064,
	9064, -1000, -1000, -1000, -1000, 864, 193, -94, 18667, 1075,
	864, 18067, -1000, -1000, -1000, -1000, 18067, -1000, -91, 2170,
	18067, -1000, 741, -1000, -1000, 719, 712, 719, 719, 719,
	719, 719, 416, 416, 18067, 14767, 243, 672, -1000, -63,
	1440, -107, 241, -1000, -1000, -171, 15367, 14767, 1415, 1153,
	906, -77, 18067, 9064, 2820, -1000, 1400, 1074, 11464, -1000,
	-1000, -1000, -1000, 18067, 1431, 1423, 1418, 1417, 2697, 90,
	541, 152, 924, 913, 1174, 911, -1000, 18067, 1150, 659,
	1046, -1000, 1288, -74, -100, 1045, -1000, -1000, 1050, 905,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 632, 632, 903, 893, -1000, 243, -1000, 416,
	416, -1000, -1000, -1000, 164, 819, 707, 687, 676, 22,
	-1000, 1402, 1415, 873, 889, 899, 15067, -171, -1000, -191,
	-1000, 659, -1000, -1000, 2833, 1351, 18067, 202, -1000, -1000,
	1341, -1000, -1000, -1000, -1000, -1000, 2833, 2833, 2833, -1000,
	304, -79, -1000, 275, 1300, 14767, -1000, 1269, -1000, 18067,
	-1000, 2170, -1000, -1000, 335, 899, -1000, -1000, -1000, 674,
	-1000, 660, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14466,
	899, 1415, 899, 1211, 872, 1415, 9064, -207, -1000, -1000,
	12064, 1376, 18067, 2550, -1000, 117, 2438, 188, -1000, 192,
	-1000, -1000, 259, 863, -84, 864, -1000, 18367, 1211, -1000,
	-1000, -1000, 398, 1211, 899, -1000, -1000, -1000, 899, 659,
	589, 1142, -1000, -1000, -1000, 542, 623, -1000, 161, -1000,
	255, -1000, -96, -1000, 1149, -1000, 6564, -1000, -1000, 1211,
	-1000, -1000, 344, 150, -1000, -1000, 1050, -102, 18067, -1000,
	-1000, -1000, 2833, 9364, -1000, 847, 1766, 269, 864, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1670, 7, 26, 1669, 1668, 1662, 1476, 1468, 1466,
	1464, 1661, 1656, 1655, 1653, 1651, 1650, 1649, 1648, 1647,
	1646, 1645, 1642, 1641, 1640, 1639, 1638, 1634, 426, 1633,
	1632, 1631, 109, 1630, 122, 1629, 1628, 91, 108, 80,
	88, 920, 1627, 57, 104, 133, 1625, 98, 1623, 1621,
	144, 1620, 105, 1619, 1618, 83, 1614, 1613, 34, 24,
	22, 47, 1612, 1611, 107, 71, 1610, 1609, 1607, 25,
	1606, 1605, 92, 15, 30, 39, 41, 1603, 53, 65,
	1602, 97, 1601, 1600, 1599, 1598, 19, 1597, 93, 32,
	27, 14, 1590, 37, 16, 101, 52, 48, 20, 116,
	100, 1588, 56, 103, 95, 1585, 1584, 831, 1583, 1581,
	1580, 1579, 1578, 1577, 624, 836, 1570, 1568, 1567, 67,
	0, 797, 4, 121, 1566, 76, 1565, 2151, 113, 106,
	42, 1564, 85, 329, 70, 1563, 1562, 77, 114, 96,
	111, 110, 1560, 112, 1559, 1558, 1557, 266, 49, 78,
	89, 1554, 1551, 1543, 90, 86, 50, 94, 99, 1540,
	1539, 1537, 1536, 44, 1532, 18, 33, 2, 102, 1530,
	1529, 1528, 1527, 58, 43, 1522, 36, 1521, 21, 51,
	5, 45, 3, 1520, 1519, 1518, 1, 1517, 40, 1516,
	10, 1515, 13, 1514, 1510, 1509, 75, 1508, 1507, 1506,
	28, 1505, 1503, 31, 17, 60, 46, 61, 84, 66,
	1502, 59, 11, 9, 6, 1498, 12, 1497, 1496, 1493,
	23, 29, 1492, 1491, 1488, 1487, 1483, 1482, 54, 1481,
	1480, 1809, 347, 1479, 1478, 1474, 1470, 504,
}

var yyR1 = [...]int{
	0, 229, 230, 230, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 233,
	233, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 217, 217, 216, 218, 218, 12, 12, 12, 12,
	12, 210, 210, 210, 210, 210, 13, 13, 213, 213,
	14, 14, 14, 100, 100, 104, 104, 104, 105, 105,
	105, 105, 135, 135, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 208, 208,
	208, 209, 209, 209, 211, 211, 212, 212, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 215, 215, 194,
	194, 194, 195, 195, 195, 195, 195, 195, 197, 197,
	198, 198, 125, 125, 192, 192, 191, 190, 190, 189,
	189, 188, 199, 199, 20, 170, 171, 171, 171, 171,
	171, 171, 171, 158, 139, 139, 139, 139, 139, 139,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 205, 205, 205, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 201, 201,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 148, 148, 148, 148, 148, 148,
	200, 200, 196, 196, 196, 196, 196, 196, 143, 143,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	142, 142, 142, 142, 142, 142, 142, 142, 144, 144,
	144, 144, 144, 144, 144, 144, 140, 140, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 146, 146, 146, 146, 146, 146, 146, 146, 157,
	157, 147, 147, 155, 155, 156, 156, 156, 154, 154,
	154, 151, 151, 152, 152, 153, 153, 153, 149, 149,
	149, 150, 150, 150, 160, 181, 181, 181, 183, 183,
	184, 184, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 169, 169, 207, 207, 180, 180, 180,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 168,
	168, 178, 178, 179, 179, 176, 176, 176, 177, 163,
	163, 163, 163, 163, 164, 165, 165, 165, 165, 161,
	162, 203, 203, 203, 204, 204, 166, 166, 167, 167,
	172, 172, 172, 173, 173, 173, 174, 174, 174, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 234, 234, 235, 235, 235, 235, 235,
	235, 235, 187, 185, 185, 186, 186, 17, 18, 18,
	18, 18, 18, 19, 19, 21, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 112,
	112, 109, 109, 110, 110, 111, 111, 111, 113, 113,
	113, 136, 136, 136, 23, 23, 25, 25, 26, 27,
	24, 24, 24, 24, 24, 236, 28, 29, 29, 30,
	30, 30, 34, 34, 34, 32, 32, 33, 33, 39,
	39, 38, 38, 40, 40, 40, 40, 124, 124, 124,
	123, 123, 42, 42, 43, 43, 44, 44, 45, 45,
	45, 220, 220, 219, 219, 221, 221, 221, 221, 221,
	221, 57, 57, 93, 93, 93, 96, 96, 46, 46,
	46, 46, 47, 47, 48, 48, 49, 49, 131, 131,
	130, 130, 130, 129, 129, 51, 51, 51, 53, 52,
	52, 52, 52, 54, 54, 56, 56, 55, 55, 58,
	58, 58, 58, 59, 59, 94, 94, 41, 41, 41,
	41, 41, 41, 41, 108, 108, 61, 61, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 71, 71,
	71, 71, 71, 71, 62, 62, 62, 62, 62, 62,
	62, 37, 37, 72, 72, 72, 78, 73, 73, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 69, 69, 69, 69, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 237, 237, 70, 70, 70, 70, 35, 35,
	35, 35, 35, 134, 134, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 138,
	138, 138, 138, 138, 138, 138, 138, 82, 82, 36,
	36, 80, 80, 81, 83, 83, 79, 79, 79, 222,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	66, 66, 66, 84, 84, 85, 85, 86, 86, 87,
	87, 88, 89, 89, 89, 90, 90, 90, 90, 91,
	91, 91, 63, 63, 63, 63, 63, 63, 92, 92,
	92, 92, 97, 97, 74, 74, 76, 76, 75, 77,
	98, 98, 102, 99, 99, 103, 103, 103, 103, 103,
	101, 101, 101, 126, 126, 126, 106, 106, 114, 114,
	115, 115, 107, 107, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 117, 117, 117, 118, 118, 121,
	121, 122, 122, 127, 127, 128, 128, 223, 223, 223,
	224, 224, 224, 225, 225, 226, 227, 227, 228, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 231, 232, 132, 133, 133,
	133,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 14, 13, 15, 13, 14,
	6, 5, 5, 5, 11, 11, 9, 5, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 1, 4, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 0, 1, 3, 3,
	3, 3, 3, 2, 3, 1, 1, 1, 1, 1,
	2, 2, 3, 2, 4, 4, 2, 2, 3, 2,
	3, 2, 7, 9, 3, 3, 6, 9, 9, 8,
	8, 5, 8, 7, 4, 2, 4, 6, 2, 1,
	1, 2, 1, 1, 1, 3, 3, 1, 1, 2,
	0, 4, 3, 4, 3, 3, 3, 3, 3, 3,
	3, 2, 4, 6, 2, 3, 2, 3, 1, 3,
	0, 2, 0, 3, 3, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 3, 2, 2, 2, 2, 1, 1, 1, 3,
	3, 2, 1, 2, 1, 1, 1, 1, 4, 4,
	4, 4, 4, 1, 5, 2, 2, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 3,
	3, 0, 1, 0, 1, 0, 2, 1, 0, 3,
	3, 0, 1, 2, 6, 0, 1, 4, 1, 2,
	1, 3, 2, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 1, 1, 0, 2, 5,
	2, 3, 3, 2, 3, 2, 2, 3, 4, 1,
	1, 1, 1, 1, 3, 3, 2, 2, 1, 2,
	5, 5, 8, 8, 13, 1, 1, 2, 2, 10,
	7, 0, 1, 1, 0, 3, 0, 1, 1, 3,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	11, 13, 13, 7, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 3,
	6, 4, 2, 4, 2, 2, 2, 2, 3, 1,
	1, 0, 1, 0, 1, 0, 2, 2, 0, 2,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 0, 4, 1, 3, 1, 1, 1, 1, 1,
	1, 4, 8, 1, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 0, 4, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 3, 3, 1,
	1, 1, 1, 2, 4, 5, 6, 4, 4, 4,
	6, 6, 6, 6, 8, 8, 6, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 1, 2, 1, 2, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 3,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 5, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 2,
	0, 2, 2, 0, 1, 4, 1, 3, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}

var yyChk = [...]int{
	-1000, -229, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	113, 114, 116, 115, 145, 117, 138, 49, 192, 193,
	195, 196, 26, 139, 140, 143, 144, -231, 8, 299,
	53, -230, 341, -86, 15, -30, 5, -28, -236, -28,
	-28, -28, -28, -28, -170, 53, -125, -199, 154, 291,
	119, 134, 152, 153, 120, 136, 71, -107, 122, 124,
	120, 120, 121, 122, 291, 119, 120, -55, -127, 56,
	-120, 161, 308, 21, 192, 205, 206, 197, 238, 226,
	309, 159, 223, 227, 277, 340, 65, 195, 286, 128,
	165, 141, 218, 221, 220, 212, 209, 28, 244, 315,
	211, 131, 245, 249, 256, 278, 306, 202, 203, 280,
	242, 32, 133, 310, 34, 149, 281, 247, 241, 236,
	240, 201, 235, 38, 215, 251, 250, 252, 276, 229,
	160, 255, 231, 213, 230, 18, 144, 147, 246, 248,
	210, 162, 126, 151, 314, 282, 208, 148, 163, 143,
	285, 331, 158, 196, 279, 204, 288, 37, 262, 222,
	199, 214, 200, 130, 193, 156, 233, 150, 216, 217,
	239, 198, 234, 194, 152, 145, 287, 263, 316, 232,
	228, 224, 225, 157, 122, 154, 155, 269, 270, 271,
	272, 312, 283, 219, 264, 265, 167, 168, 169, 170,
	171, 172, 173, 120, 107, 227, 113, 267, 121, 32,
	151, -136, 120, -109, 155, 269, 270, 271, 272, 56,
	279, 278, 273, -127, 194, -132, -132, -132, -132, -132,
	-2, -90, 17, 16, -5, -3, -231, 6, 21, 22,
	-34, 39, 40, -29, -40, 98, -41, -127, -60, 73,
	-65, 29, 56, -120, 24, -64, -61, -79, -222, -77,
	-78, 107, 108, 96, 97, 104, 74, 109, -69, -67,
	-68, -70, -225, 58, -121, 57, 66, 59, 60, 61,
	62, 67, 68, 69, 289, -75, -231, 43, 44, 300,
	301, 302, 303, 307, 304, 76, 33, 290, 298, 297,
	296, 294, 295, 292, 293, 339, 125, 291, 102, 299,
	253, -107, -43, -44, -45, -46, -57, -78, -231, -55,
	11, -50, -55, -99, -135, 194, -103, 279, 278, -122,
	289, -101, -121, -119, 277, 227, 276, 56, -120, 118,
	175, 320, 72, 23, 25, 260, 266, 174, 75, 107,
	16, 76, 181, 329, 330, 106, 300, 113, 47, 292,
	293, 290, 179, 302, 303, 291, 267, 186, 20, 29,
	10, 26, 139, 22, 100, 115, 176, 79, 80, 142,
	24, 140, 69, 182, 184, 19, 50, 132, 11, 319,
	13, 14, 333, 321, 125, 124, 91, 332, 121, 45,
	8, 109, 27, 88, 41, 137, 185, 43, 89, 17,
	294, 295, 31, 307, 146, 102, 48, 35, 334, 73,
	335, 67, 51, 284, 180, 71, 15, 46, 336, 134,
	183, 90, 116, 299, 44, 177, 337, 119, 178, 6,
	305, 30, 138, 42, 120, 268, 78, 123, 68, 5,
	136, 9, 49, 52, 296, 297, 298, 33, 77, 12,
	135, 311, 70, -171, -158, 56, -203, 329, 330, 122,
	-121, -115, 125, -115, -121, -121, -55, -115, 299, 120,
	-55, -55, -114, 125, 56, -114, -114, -114, -55, 110,
	-55, 56, 30, 291, 56, 151, 120, 152, 122, -133,
	-231, -122, -133, -133, -133, 156, 157, -133, -110, 274,
	51, -133, -232, 55, -91, 19, 31, -41, -127, -87,
	-88, -41, -86, -2, -28, 35, -32, 22, 64, 11,
	-124, 72, 71, 88, -123, 23, -121, 58, 110, -41,
	-62, 91, 73, 89, 90, 75, 93, 92, 103, 96,
	97, 98, 99, 100, 101, 102, 94, 95, 106, 339,
	81, 82, 83, 84, 85, 86, 87, -108, -231, -78,
	-231, 111, 112, -65, -65, -65, -65, -65, -65, -65,
	-226, 254, -196, 339, -231, 58, 110, -2, -73, -41,
	-231, -231, -231, -231, -231, -231, -231, -231, -231, -82,
	-41, -231, -237, -231, -237, -237, -237, -237, -237, -237,
	-237, -138, 107, 227, 141, 218, -141, -140, 233, 232,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	226, 309, -231, -231, -231, -231, -56, 27, -55, 30,
	54, -51, -53, -52, -54, 41, 45, 47, 42, 43,
	44, 48, -131, 23, -43, -231, -130, 147, -129, 23,
	-127, 58, -55, -50, -233, 54, 11, 52, 54, -99,
	194, -100, -104, 280, 282, 81, 110, -126, -121, 58,
	29, 30, 55, 54, -159, -139, -143, -140, -145, -144,
	-146, -121, -141, -142, 226, 309, 223, 227, 224, 229,
	230, 231, 107, 228, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 232, 244, 30, 141, 216,
	217, 218, 221, 220, 222, 219, 245, 246, 247, 248,
	249, 250, 251, 252, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 209, 211, 212, 213, 215,
	214, 121, -55, -192, 52, 56, 73, 56, 51, -208,
	51, 19, 174, 175, 23, -55, -55, 284, -133, 123,
	-55, 24, 51, -55, 56, 56, -128, -127, -119, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, -133, -112,
	268, 275, -55, 9, 91, 54, 18, 110, 54, -89,
	25, 26, -90, -232, -34, -66, -121, 59, 62, -33,
	42, -55, -41, -41, -71, 67, 73, 68, 69, -123,
	98, -128, -122, -119, -65, -72, -75, -78, 63, 91,
	89, 90, 75, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -134, 56,
	58, -143, -138, -141, 208, 209, 211, 212, 213, 215,
	214, 56, -64, -121, -64, -121, 342, 227, 217, 257,
	233, 242, -39, 22, -73, -38, -41, -40, -122, -232,
	54, -232, -2, -38, -38, -41, -41, -79, -121, -127,
	-79, -38, -32, -80, -81, 77, -79, -232, 225, -38,
	-39, -38, -38, -95, 147, -55, -98, -102, -79, -44,
	-45, -45, -44, -45, 41, 41, 41, 46, 41, 46,
	41, -52, -127, -232, -58, 49, 124, 50, -231, -129,
	-95, 52, -43, -55, -103, -100, 54, 281, 283, 284,
	51, 70, -41, -122, -150, 107, 106, -172, -173, -174,
	-122, 58, 59, -158, -160, -163, -161, -162, -175, -164,
	128, 126, 130, 131, 136, -168, 121, 137, 67, 73,
	-205, 128, 51, 260, 266, 126, 137, 136, 340, 65,
	129, 319, 321, 29, -153, 342, 254, -151, 263, -147,
	53, -147, -147, 225, -147, -147, -147, -147, -147, -149,
	227, -149, -149, -149, -149, 53, 53, -147, -147, -147,
	-147, -155, 53, 210, -155, -155, -156, 53, -156, -121,
	51, 191, 23, -190, 311, -191, 56, -133, 24, -133,
	-55, -211, -209, 8, 9, 10, -55, -139, -116, 118,
	115, 116, -187, 114, 260, 227, 65, 29, 15, 300,
	147, 316, 56, 148, -55, -55, -55, -133, -111, 11,
	91, 37, -41, -41, -128, -88, -91, -106, 19, 11,
	33, 33, -38, 67, 68, 69, 110, -231, -72, -65,
	-65, -65, -37, 142, 72, -232, -227, -228, 58, 225,
	-154, 311, 312, -232, -38, -232, 54, -41, -232, -232,
	-232, 54, 52, 23, 54, 11, 110, 54, 11, -232,
	-38, -83, -81, 79, -41, -232, -232, -232, -232, -232,
	-63, 30, 33, -2, -231, -231, -59, 54, 12, 81,
	-48, -47, 51, 52, -49, 51, -47, 41, 41, -220,
	311, 121, 121, 121, -96, -121, -59, -43, -59, -104,
	-105, 285, 282, 288, 81, 56, 54, -174, 81, 53,
	-204, 51, 73, -166, -121, 137, -168, -168, 56, -168,
	56, 121, 56, 67, 19, -121, 9, 137, 137, -204,
	58, -55, -201, 320, 16, 53, -206, 53, 58, 59,
	60, 67, -148, 66, -61, 255, -69, 290, 293, 292,
	256, -121, -127, 343, -152, 264, 59, -149, -149, -147,
	-149, -149, -149, -150, 30, -150, -150, -150, -150, -157,
	58, -157, -154, -154, 59, -155, 59, 51, 52, -55,
	-121, -2, -189, -188, -122, -194, 23, 51, 54, -208,
	-132, -125, 128, -235, 154, 127, 132, 131, 56, 126,
	130, 147, -193, 154, 127, 128, 132, 131, 56, 121,
	137, 126, 130, 147, 136, -117, -118, 123, 23, 121,
	137, 147, 118, -133, -113, 89, 12, -127, -127, 38,
	110, -55, -42, 11, 98, -122, -39, -37, 72, -65,
	-65, 343, 54, -196, 216, 216, -232, -40, -137, 107,
	223, 141, 218, 212, 242, 243, 229, 262, 216, 263,
	-134, -137, -65, -65, -122, -65, -65, 308, -86, 80,
	-41, 78, -97, 51, -98, -74, -76, -75, -231, -2,
	-92, -121, -96, -86, -102, -41, -41, -41, 53, -41,
	53, -231, -231, -231, -232, 54, -86, -59, 282, 286,
	287, -41, -173, -174, -179, -176, -121, 137, 10, 9,
	19, 132, 126, 340, 56, 56, 56, -203, 136, 331,
	-205, 340, -148, 256, -231, 53, 23, 29, 59, -206,
	53, -196, 339, -196, -231, -147, 53, -147, 53, 53,
	110, 55, -150, -150, -149, -150, -150, -150, 56, 107,
	55, 54, 55, 54, 55, 54, -55, -121, 53, 51,
	54, 81, -195, 19, 162, 163, -55, -209, -211, -234,
	121, 137, -121, -132, -121, -132, -121, -55, -132, -121,
	128, -163, 58, -41, -59, -43, -232, -65, -228, 265,
	265, -232, -147, -147, -147, -156, -147, 203, -147, 203,
	-232, -232, -232, 54, 19, -232, 54, 19, -231, -36,
	305, -41, 28, -97, 54, -232, -232, -232, 54, 110,
	-232, -90, -93, -121, 137, -219, -221, 333, 334, 335,
	336, 337, 338, -93, -93, -93, -130, -121, -90, 55,
	54, -147, -177, 258, -147, -165, 158, 159, 30, 160,
	-165, 331, 137, 137, -231, -203, -204, -41, -93, 53,
	321, 54, 55, -206, -121, 227, 217, 233, 242, -232,
	55, 55, 55, -122, -150, -149, 58, -149, 59, 59,
	53, 52, 51, -178, -179, -69, -121, -55, -188, -174,
	123, 21, 6, 8, 9, 10, 19, 23, -121, 136,
	53, 27, -121, -84, 13, -149, 56, -65, -65, -65,
	-65, -65, -232, 58, 137, -76, 33, -2, -231, -121,
	-121, 54, 55, 55, 54, -232, -232, -232, -58, -181,
	-183, 311, -182, 52, 133, 65, 167, 168, 169, 170,
	171, 172, 173, -176, -89, -204, 51, 67, 161, -204,
	51, -166, -121, -203, -41, -231, -232, 55, -41, 53,
	59, 55, -150, -150, 55, 55, -178, -121, -55, 55,
	53, 53, -167, -121, 176, -212, -214, -7, -9, -8,
	-11, -10, -12, -13, -14, -3, 20, 180, 181, 186,
	182, 135, 125, 53, 53, -93, -231, 126, -85, 14,
	16, -232, -232, -232, -232, -35, 91, 311, 9, -74,
	-2, 110, -121, -221, -220, -180, 51, -182, 311, 53,
	313, 56, -169, 81, 58, 81, 81, 81, 81, 81,
	81, 81, 9, 10, 53, 53, -232, -41, -200, 160,
	51, 55, -202, 55, 55, 55, 53, 53, -94, 332,
	-178, -197, 54, 52, 177, -214, -86, -217, -121, -216,
	-121, -121, -121, -210, 35, 183, 184, 185, -60, -65,
	-41, -60, -179, -179, 55, -185, -186, 147, 137, -41,
	-73, -232, 309, 48, 314, -98, -232, -121, -121, -184,
	-182, -121, 59, -207, 51, 70, 59, -207, -207, -207,
	-207, -207, -165, -165, -167, -179, -200, -232, 306, 10,
	9, 317, 318, 55, 193, 323, 324, 146, 325, 160,
	326, 327, -94, -178, -179, -59, 53, 55, -198, 311,
	-121, -41, -215, -214, 192, -90, 54, -218, -139, 178,
	-121, 11, 11, 11, 11, -214, 192, 78, 192, 55,
	55, -192, -232, 54, -121, 53, 38, 310, 315, -231,
	55, 54, -204, -204, 55, 55, -200, -165, -165, 311,
	59, 16, 59, 59, 59, 59, 324, 146, 326, 16,
	-59, 55, 55, -181, -93, -94, 340, -214, -91, -216,
	-121, 179, 27, -213, -214, -212, -213, -223, 187, 73,
	-190, -186, 33, -179, 38, -121, -182, 129, -181, 59,
	59, 328, -127, -181, -59, -181, -180, 55, -59, -41,
	341, 19, -121, 80, -214, 341, 80, -224, 188, 187,
	149, 55, 311, -232, -55, -180, 110, -180, -181, -181,
	80, -2, 80, 79, 190, 189, 150, 314, 53, -122,
	-180, 125, 192, -231, 315, -167, -213, -65, 146, 55,
	80, -232, -232,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 747, 0, 485, 485, 485, 485, 485, 485, 0,
	-2, 802, 0, 0, 0, 0, -2, 475, 476, 0,
	478, 479, 1097, 1097, 1097, 1097, 1097, 0, 33, 34,
	1095, 1, 3, 755, 0, 0, 489, 492, 487, 833,
	802, 0, 0, 0, 84, 146, 371, 0, 0, 800,
	800, 0, 0, 0, 800, 133, 0, 0, 0, 803,
	0, 798, 0, 798, 798, 798, 0, 434, 567, 823,
	824, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
	1092, 1093, 1094, 0, 0, 0, 0, 1098, 1098, 1098,
	1098, 0, 1098, 463, 452, 454, 455, 456, 457, 1098,
	472, 473, 462, 474, 477, 480, 481, 482, 483, 484,
	27, 759, 833, 833, 747, 29, 0, 485, 490, 491,
	495, 493, 494, 486, 0, 503, 507, 0, 577, 833,
	582, 584, -2, -2, 0, 619, 620, 621, 622, 623,
	624, 833, 833, 833, 833, 833, 833, 833, 649, 650,
	651, 652, 0, 222, 726, 733, 734, 735, 736, 737,
	738, 739, 586, 587, 0, 779, 833, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 682, 682, 682,
	682, 682, 682, 682, 682, 0, 0, 0, 0, 0,
	834, 0, 0, 514, 516, 517, 518, 548, 0, 550,
	0, 0, 41, 45, 0, 1065, 783, -2, -2, 0,
	0, 0, 821, 822, -2, 975, -2, 819, 820, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 0, 147, 0, 0, 372, 373, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 143, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 433, 0,
	435, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 444,
	1099, 1100, 445, 446, 447, 1098, 1098, 449, 0, 464,
	0, 458, 28, 1096, 22, 0, 0, 756, 0, 748,
	749, 752, 755, 27, 492, 0, 497, 496, 488, 0,
	504, 833, 833, 0, 508, 0, 510, 511, 0, 580,
	833, 0, 0, 833, 833, 833, 833, 833, 833, 833,
	833, 833, 833, 833, 833, 833, 833, 833, 0, 0,
	604, 605, 606, 607, 608, 609, 610, 583, 0, 597,
	0, 0, 0, 641, 642, 643, 644, 645, 646, 0,
	653, 0, 731, 0, -2, 732, 0, 27, 0, 617,
	833, 833, 833, 833, 833, 0, 0, 833, 495, 0,
	718, 0, 673, 0, 674, 675, 676, 677, 678, 679,
	680, 681, 709, 0, 711, 712, 713, 714, 715, 716,
	230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	256, 257, 833, -2, 833, 833, 43, 0, 566, 0,
	0, 0, 0, 0, 0, 555, 0, 0, 558, 0,
	0, 0, 0, 549, 0, 0, 569, 1029, 551, 0,
	553, 554, -2, 0, 0, 0, 39, 40, 0, 46,
	1065, 48, 73, 0, 0, 833, 0, 311, 793, 794,
	795, 791, 380, 0, 153, 305, 301, 155, 156, 157,
	158, 159, 291, 229, 256, 257, 291, 291, 291, 291,
	291, 263, 291, 291, 308, 308, 308, 308, 308, 272,
	273, 274, 275, 276, 277, 278, 990, 0, 248, 291,
	291, 291, 252, 291, 254, 255, 281, 282, 283, 284,
	285, 286, 287, 288, 230, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 293, 293, 293, 295, 295, 246,
	247, 0, 0, 137, 0, 1098, 0, 1098, 0, 0,
	0, 98, 99, 100, 0, 144, 0, 0, 400, 0,
	428, 799, 0, 1098, 431, 432, 568, 825, 826, 436,
	437, 438, 439, 440, 441, 442, 443, 448, 451, 465,
	459, 460, 453, 760, 0, 833, 833, 0, 833, 751,
	753, 754, 759, 30, 495, 0, 740, 0, 0, 833,
	498, 25, 578, 579, 581, 598, 0, 600, 602, 509,
	505, 0, 727, -2, 588, 589, 613, 614, 615, 0,
	833, 833, 833, 611, 593, 0, 625, 626, 627, 628,
	629, 630, 631, 632, 633, 634, 635, 636, 639, 693,
	694, 640, 648, 291, 293, 293, 293, 295, 295, 246,
	247, 0, 637, 0, 638, 647, 0, 0, 298, 225,
	226, 227, 0, 833, 0, 500, 507, 501, 729, 616,
	833, 778, 27, 0, 0, 0, 0, 0, 726, 0,
	0, 0, 833, 724, 721, 833, 0, 683, 710, 0,
	0, 0, 0, 0, 0, 565, 573, 780, 0, 515,
	544, 546, 0, 541, 556, 557, 559, 0, 561, 0,
	563, 564, 519, 520, 521, 0, 0, 0, 0, 552,
	573, 0, 573, 42, 784, 47, 0, 0, 76, 77,
	785, 786, 787, 0, 789, 312, 0, 145, 381, 383,
	386, 387, 388, 148, 149, 150, 151, 152, 0, 374,
	376, 0, 0, 0, 0, 0, 349, 350, 161, 0,
	163, 0, 0, 166, 167, 0, 169, 171, 374, 0,
	0, 0, 0, 0, 160, 0, 307, 303, 302, 228,
	0, 308, 308, 291, 308, 308, 308, 265, 266, 311,
	0, 311, 311, 311, 311, 0, 0, 298, 298, 251,
	253, 240, 0, 293, 242, 243, 244, 0, 245, 0,
	0, 0, 0, 91, 0, 135, 136, 92, 801, 93,
	119, 0, 104, 101, 102, 103, 0, 97, 1097, 132,
	0, 814, 401, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 0, 0, 427, 1098, 430, 468, 0,
	0, 0, 757, 758, 0, 750, 23, 0, 796, 797,
	741, 742, 512, 599, 601, 603, 0, -2, 590, 611,
	594, 0, 591, 833, 833, 585, 0, 836, 222, 223,
	224, 0, 0, 654, 0, 657, 833, 618, -2, 658,
	659, 0, 0, 0, 833, 833, 0, 833, 833, 0,
	747, 0, 722, 833, 0, 672, 684, 685, 686, 687,
	772, 0, 0, -2, 0, 0, 747, 0, 833, 833,
	538, 545, 833, 0, 539, 833, 540, 560, 562, 531,
	0, 0, 0, 0, 0, 536, 747, 573, 38, 74,
	75, 0, 0, 81, 833, 313, 0, 384, 0, 0,
	359, 0, 0, 0, 377, 340, 0, 0, 343, 0,
	345, -2, 371, 162, 0, 0, 0, 168, 170, 0,
	174, 175, 0, 198, 0, 0, 185, 0, 222, 189,
	190, 222, 192, 193, 194, 1023, 197, 291, 291, 218,
	996, 0, 0, 306, 154, 304, 0, 311, 311, 308,
	311, 311, 311, 267, 0, 268, 269, 270, 271, 0,
	289, 0, 249, 250, 0, 241, 0, 0, 0, 0,
	0, -2, 138, 139, 0, 122, 0, 0, 0, 0,
	389, 0, 0, 1097, 0, 415, 416, 417, 418, 419,
	420, 421, 1097, 0, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 412, 0, 1097, 815, 816, 817,
	818, 0, 0, 429, 450, 0, 833, 466, 467, 761,
	0, 24, 573, 0, 506, 728, 0, 592, 833, 612,
	595, 835, 0, 838, 0, 0, 655, 502, 0, 291,
	291, 698, 291, 295, 701, 702, 291, 704, 291, 707,
	0, 0, 0, 0, 727, 0, 0, 0, 719, 671,
	725, 833, 31, 0, 772, 762, 774, 776, 833, 27,
	0, 768, 0, 755, 781, 574, 782, 542, 0, 547,
	0, 0, 0, 0, 550, 0, 755, 37, 78, 79,
	80, 788, 382, 385, 0, 353, 291, 291, 0, 0,
	0, 0, 0, 0, 341, 342, 344, 347, 371, 184,
	164, 374, 165, 0, 833, 0, 0, 199, 0, 0,
	0, 188, 0, 191, 0, 214, 0, 216, 0, 0,
	0, 292, 258, 259, 311, 260, 261, 262, 309, 310,
	308, 0, 308, 0, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 121, 0, 105, 0, 0,
	413, 414, 0, 394, 0, 395, 397, 398, 399, 0,
	376, 393, 469, 470, 743, 513, 656, 596, 837, 299,
	300, 660, 695, 308, 699, 700, 703, 705, 706, 708,
	662, 661, 663, 833, 833, 666, 833, 833, 833, 0,
	0, 723, 0, 32, 0, 777, -2, 0, 0, 0,
	44, 35, 0, 533, 534, 0, 523, 525, 526, 527,
	528, 529, 530, 0, 0, 0, 569, 537, 36, 315,
	0, 752, 357, 358, 356, 374, 365, 366, 0, 0,
	374, 375, 376, 371, 833, 348, 0, 0, 0, 833,
	181, 0, 186, 0, 196, 975, 298, 226, 227, 195,
	215, 217, 219, 0, 264, 311, 290, 311, 0, 0,
	0, 0, 0, 0, 351, 352, 291, 0, 140, 141,
	0, 123, 124, 125, 126, 127, 0, 0, 0, 0,
	0, 0, 377, 745, 0, 696, 697, 0, 0, 0,
	0, 688, 670, 720, 0, 775, 0, -2, 0, 770,
	769, 0, 543, 522, 0, 570, 571, 572, 521, 337,
	316, 0, 318, 0, 333, 0, 0, 0, 0, 0,
	0, 0, 0, 354, 355, 360, 0, 367, 368, 361,
	0, 0, 377, 0, 0, 833, 220, 176, 0, 200,
	0, 0, 279, 280, 294, 297, 0, 0, 0, 575,
	1095, 0, 128, 378, 0, 96, 106, 108, 109, 110,
	111, 112, 113, 114, 115, 747, 0, 0, 0, 0,
	61, 833, 833, 0, 0, 0, 0, 0, 26, 833,
	833, 664, 665, 667, 668, 0, 0, 0, 0, 765,
	27, 0, 535, 524, 532, 314, 0, 319, 0, 0,
	0, 322, 0, 334, 324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 172, 0,
	0, 0, 0, 183, 187, 575, 0, 0, 573, 0,
	0, 130, 0, 833, 0, 107, 755, 49, 54, 51,
	56, 57, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 577, 0, 0, 134, 0, 423, 0, 0, 746,
	744, 669, 0, 0, 0, 773, -2, 771, 338, 0,
	320, 325, 323, 326, 335, 336, 327, 328, 329, 330,
	331, 332, 374, 374, 0, 0, 370, 220, 221, 0,
	0, 179, 180, 182, 0, 0, 0, 0, 0, 0,
	211, 0, 573, 0, 0, 315, 0, 575, 94, 0,
	379, 129, 95, 117, 0, 759, 0, 0, 53, 55,
	59, 62, 63, 64, 65, 66, 0, 0, 0, 390,
	827, 137, 422, 0, 0, 0, 689, 0, 692, 0,
	317, 0, 362, 363, 0, 315, 173, 177, 178, 0,
	202, 0, 204, 205, 206, 207, 208, 209, 210, 0,
	315, 573, 315, 337, 0, 573, 833, 0, 116, 52,
	0, 0, 0, 0, 68, 0, 0, 830, 828, 0,
	396, 424, 0, 0, 690, 0, 321, 0, 337, 201,
	203, 212, 0, 337, 315, 88, 86, 576, 315, 131,
	0, 0, 60, 67, 69, 0, 71, 392, 0, 829,
	0, 391, 0, 339, 0, 369, 0, 85, 89, 337,
	118, -2, 0, 0, 831, 832, 0, 0, 0, 213,
	87, 70, 0, 833, 691, 0, 0, 0, 0, 364,
	72, 425, 426,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 341,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 342, 3, 343, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:382
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:387
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:388
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:392
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:415
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:423
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:427
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:433
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:440
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:446
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:450
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:456
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:460
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:467
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:479
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:491
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:495
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:501
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:507
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:511
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:515
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:520
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:521
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:525
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:529
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:534
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:538
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:544
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:548
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:552
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:556
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:562
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:566
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:579
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:583
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:589
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:594
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:598
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:604
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:611
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:618
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:625
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:633
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:643
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:647
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:651
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:655
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:659
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:665
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:672
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:682
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:686
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:693
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:702
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:710
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:721
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:725
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:731
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:735
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:739
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:745
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:749
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:753
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:757
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:763
		{
			yyVAL.str = SessionStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:767
		{
			yyVAL.str = GlobalStr
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:773
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 85:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:778
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 86:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:798
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 87:
		yyDollar = yyS[yypt-15 : yypt+1]
//line parser.y:818
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[6].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[12].columns,
					Where:     NewWhere(WhereStr, yyDollar[13].expr),
					Options:   yyDollar[14].indexOptions,
					Partition: yyDollar[15].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 88:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:839
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 89:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:855
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[11].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:871
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:879
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:887
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:891
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:895
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 95:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:907
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 96:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:918
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:929
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:941
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:945
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:949
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:955
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:959
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:963
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:969
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:973
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:979
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:983
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:989
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1000
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1012
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1019
		{
			yyVAL.bytes = nil
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1023
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1027
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1032
		{
			yyVAL.bytes = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1036
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1040
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1044
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1048
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1052
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1057
		{
			yyVAL.expr = nil
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1061
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1066
		{
			yyVAL.expr = nil
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1070
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1075
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1079
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1084
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1088
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1094
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1099
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1104
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1110
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1115
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1121
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1126
		{
			yyVAL.bytes = nil
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1130
		{
			yyVAL.bytes = nil
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1136
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1143
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1149
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1153
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1158
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1162
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1166
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1170
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1174
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1180
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1186
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1197
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1203
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1215
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1220
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1225
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1230
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1235
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1240
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1245
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1250
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1255
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1260
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1265
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1270
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1279
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1289
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1294
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1299
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1306
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1313
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1321
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1326
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1332
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1338
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1344
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1350
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1357
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1361
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1365
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1371
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1375
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1379
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1383
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1387
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1391
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1395
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1399
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1403
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1407
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1413
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1417
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1422
		{
			yyVAL.sequence = &Sequence{}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1426
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1431
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1436
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1441
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1446
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1451
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1456
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1461
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1466
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1471
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1476
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1481
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 213:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1486
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1493
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1497
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1501
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1505
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1509
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1513
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1518
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1522
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1527
		{
			yyVAL.bytes = nil
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1538
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1543
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1553
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1557
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1569
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1573
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1577
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1581
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1585
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1597
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1603
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1609
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1627
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1661
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1665
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1681
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1685
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1689
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1693
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1701
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1705
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 280:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1810
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1815
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1820
		{
			yyVAL.optVal = nil
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1824
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1829
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 294:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1833
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1841
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1845
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1851
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1859
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1863
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1867
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1872
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1876
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1881
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1885
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1890
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1894
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1898
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1903
		{
			yyVAL.str = ""
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1907
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1911
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1916
		{
			yyVAL.str = ""
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1920
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1924
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1930
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1935
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1939
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1943
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1949
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1953
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1959
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1963
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1969
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1973
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1978
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1982
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1986
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1990
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1994
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1998
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2002
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2006
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2010
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2016
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2020
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2026
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2030
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2036
		{
			yyVAL.indexPartition = nil
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2040
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 339:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2044
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2050
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2054
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2058
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2062
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2066
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2070
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2074
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2078
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2082
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2088
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2092
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2098
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2103
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2109
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2113
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2119
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2124
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2128
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2138
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 360:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2143
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 361:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2150
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 362:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2157
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 363:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2164
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 364:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2173
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(String(yyDollar[10].tableName)),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2185
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2189
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2193
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2197
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 369:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2203
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2214
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2224
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2228
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2232
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2238
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2242
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2247
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2254
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2258
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2263
		{
			yyVAL.str = ""
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2267
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2271
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2279
		{
			yyVAL.str = yyDollar[1].str
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2283
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2287
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2293
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2297
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2301
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2307
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 390:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2311
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 391:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2325
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 392:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2339
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 393:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2358
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 394:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2367
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2371
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 396:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2375
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 397:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2388
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2398
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 399:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2403
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2408
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2412
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 422:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2444
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2450
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2454
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 425:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2460
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 426:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2464
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2470
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2476
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 429:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2484
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 430:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2489
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2497
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2501
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2507
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2511
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2516
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2522
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2526
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2530
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2535
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2539
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2543
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2547
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2551
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2555
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2559
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2563
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2567
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2571
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2575
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2579
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2589
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2593
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2597
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2601
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2605
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2609
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2613
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2623
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2629
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2633
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2639
		{
			yyVAL.str = ""
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2643
		{
			yyVAL.str = "extended "
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2649
		{
			yyVAL.str = ""
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2653
		{
			yyVAL.str = "full "
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2659
		{
			yyVAL.str = ""
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2663
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2667
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2673
		{
			yyVAL.showFilter = nil
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2677
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2681
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2687
		{
			yyVAL.str = ""
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2691
		{
			yyVAL.str = SessionStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2695
		{
			yyVAL.str = GlobalStr
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2701
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2705
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2711
		{
			yyVAL.statement = &Begin{}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2715
		{
			yyVAL.statement = &Begin{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2721
		{
			yyVAL.statement = &Commit{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2727
		{
			yyVAL.statement = &Rollback{}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2733
		{
			yyVAL.statement = &OtherRead{}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2737
		{
			yyVAL.statement = &OtherRead{}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2741
		{
			yyVAL.statement = &OtherRead{}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2745
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2749
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2754
		{
			setAllowComments(yylex, true)
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2758
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2764
		{
			yyVAL.bytes2 = nil
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2768
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2774
		{
			yyVAL.str = UnionStr
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2778
		{
			yyVAL.str = UnionAllStr
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2782
		{
			yyVAL.str = UnionDistinctStr
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2787
		{
			yyVAL.str = ""
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2791
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2795
		{
			yyVAL.str = SQLCacheStr
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2800
		{
			yyVAL.str = ""
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2804
		{
			yyVAL.str = DistinctStr
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2809
		{
			yyVAL.str = ""
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2813
		{
			yyVAL.str = StraightJoinHint
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2818
		{
			yyVAL.selectExprs = nil
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2822
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2828
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2832
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2838
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2842
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2846
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2850
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2855
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2859
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2863
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2870
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2875
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2879
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2885
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2889
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2899
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2903
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2907
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2912
		{
			yyVAL.strs = []string{}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2916
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2922
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2926
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2932
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2936
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2940
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2944
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2948
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2952
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2958
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 532:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2962
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2968
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2973
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2977
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2983
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2987
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3000
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3004
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3008
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3012
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3018
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3020
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3024
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3026
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3030
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3032
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3035
		{
			yyVAL.empty = struct{}{}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3037
		{
			yyVAL.empty = struct{}{}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3040
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3044
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3048
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3055
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3061
		{
			yyVAL.str = JoinStr
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3065
		{
			yyVAL.str = JoinStr
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3069
		{
			yyVAL.str = JoinStr
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3075
		{
			yyVAL.str = StraightJoinStr
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3081
		{
			yyVAL.str = LeftJoinStr
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3085
		{
			yyVAL.str = LeftJoinStr
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3089
		{
			yyVAL.str = RightJoinStr
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3093
		{
			yyVAL.str = RightJoinStr
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3099
		{
			yyVAL.str = NaturalJoinStr
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3103
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3113
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3117
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3123
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3127
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3132
		{
			yyVAL.indexHints = nil
		}
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3136
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3140
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3144
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3149
		{
			yyVAL.expr = nil
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3153
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3158
		{
			yyVAL.columns = nil
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3162
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3168
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3172
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3176
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3180
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3184
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3188
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3192
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3198
		{
			yyVAL.str = ""
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3202
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3208
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3212
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3218
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3222
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3226
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3230
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3234
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3238
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3242
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3246
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 596:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3250
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3254
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3260
		{
			yyVAL.str = IsNullStr
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3264
		{
			yyVAL.str = IsNotNullStr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3268
		{
			yyVAL.str = IsTrueStr
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3272
		{
			yyVAL.str = IsNotTrueStr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3276
		{
			yyVAL.str = IsFalseStr
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3280
		{
			yyVAL.str = IsNotFalseStr
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3286
		{
			yyVAL.str = EqualStr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3290
		{
			yyVAL.str = LessThanStr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3294
		{
			yyVAL.str = GreaterThanStr
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3298
		{
			yyVAL.str = LessEqualStr
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3302
		{
			yyVAL.str = GreaterEqualStr
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3306
		{
			yyVAL.str = NotEqualStr
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3310
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3315
		{
			yyVAL.expr = nil
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3319
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3325
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3329
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3333
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3339
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3345
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3349
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3355
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3359
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3363
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3367
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3371
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3375
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3379
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3383
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3387
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3391
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3395
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3399
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3403
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3407
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3411
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3415
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3419
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3423
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3427
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3431
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3435
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3439
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3443
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3447
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3451
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3459
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3473
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3477
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3481
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3489
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3497
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3507
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 655:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3511
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 656:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3515
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3519
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3529
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3533
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 660:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3537
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 661:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3541
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 662:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3545
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 663:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3549
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 664:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3553
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 665:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3557
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 666:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3561
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 667:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3565
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 668:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3569
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 669:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3573
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 670:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3577
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3581
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3585
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3595
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3599
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3603
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3607
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3612
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3617
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3622
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3627
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3631
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3645
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3649
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3653
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3657
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 688:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3663
		{
			yyVAL.str = ""
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3667
		{
			yyVAL.str = BooleanModeStr
		}
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3671
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 691:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3675
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3679
		{
			yyVAL.str = QueryExpansionStr
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3685
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3689
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3695
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3699
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3703
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3707
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3711
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3715
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3721
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3725
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3729
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3733
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3737
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3741
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3745
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3749
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3755
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3759
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3763
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3767
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3771
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3775
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3779
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3783
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3788
		{
			yyVAL.expr = nil
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3792
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3797
		{
			yyVAL.str = string("")
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3801
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3807
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3811
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 723:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3817
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3822
		{
			yyVAL.expr = nil
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3826
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3832
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3836
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 728:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3840
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3846
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3852
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3856
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3861
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3866
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3870
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3874
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3878
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3882
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3886
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3890
		{
			yyVAL.expr = &NullVal{}
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3896
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3905
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3909
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3914
		{
			yyVAL.exprs = nil
		}
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3918
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3923
		{
			yyVAL.expr = nil
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3927
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3932
		{
			yyVAL.orderBy = nil
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3936
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3942
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3946
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3952
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3957
		{
			yyVAL.str = AscScr
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3961
		{
			yyVAL.str = AscScr
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3965
		{
			yyVAL.str = DescScr
		}
	case 755:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3970
		{
			yyVAL.limit = nil
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3974
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 757:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3978
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 758:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3982
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3987
		{
			yyVAL.str = ""
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3991
		{
			yyVAL.str = ForUpdateStr
		}
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3995
		{
			yyVAL.str = ShareModeStr
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4008
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4012
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4016
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 765:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4021
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 766:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4025
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 767:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4029
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4036
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4040
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4044
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 771:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4048
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4053
		{
			yyVAL.updateExprs = nil
		}
	case 773:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4057
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4063
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4067
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4073
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4077
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4083
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4089
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4099
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4103
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4109
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4115
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4119
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4125
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4129
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4133
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 788:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4138
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4142
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4149
		{
			yyVAL.bytes = []byte("charset")
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4156
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4160
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4164
		{
			yyVAL.expr = &Default{}
		}
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4173
		{
			yyVAL.byt = 0
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4175
		{
			yyVAL.byt = 1
		}
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4178
		{
			yyVAL.empty = struct{}{}
		}
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4180
		{
			yyVAL.empty = struct{}{}
		}
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4183
		{
			yyVAL.str = ""
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4185
		{
			yyVAL.str = IgnoreStr
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4189
		{
			yyVAL.empty = struct{}{}
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4191
		{
			yyVAL.empty = struct{}{}
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4193
		{
			yyVAL.empty = struct{}{}
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4195
		{
			yyVAL.empty = struct{}{}
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4197
		{
			yyVAL.empty = struct{}{}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4199
		{
			yyVAL.empty = struct{}{}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4201
		{
			yyVAL.empty = struct{}{}
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4203
		{
			yyVAL.empty = struct{}{}
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4205
		{
			yyVAL.empty = struct{}{}
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4207
		{
			yyVAL.empty = struct{}{}
		}
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4210
		{
			yyVAL.empty = struct{}{}
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4212
		{
			yyVAL.empty = struct{}{}
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4214
		{
			yyVAL.empty = struct{}{}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4218
		{
			yyVAL.empty = struct{}{}
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4220
		{
			yyVAL.empty = struct{}{}
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4224
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4228
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4235
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4241
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4245
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4252
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4258
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4262
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4266
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4272
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4276
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4280
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4286
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4290
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 835:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4297
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4304
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 837:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4308
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4315
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4597
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4606
		{
			decNesting(yylex)
		}
	case 1097:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4611
		{
			forceEOF(yylex)
		}
	case 1098:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4616
		{
			forceEOF(yylex)
		}
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4620
		{
			forceEOF(yylex)
		}
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4624
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
