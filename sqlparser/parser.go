// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	newQualifierColName  *NewQualifierColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
	blockStatement       []Statement
	localVariable        *LocalVariable
	localVariables       []*LocalVariable
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const REFERENCES = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const POLICY = 57459
const WHILE = 57460
const UNIQUE = 57461
const KEY = 57462
const SHOW = 57463
const DESCRIBE = 57464
const EXPLAIN = 57465
const DATE = 57466
const ESCAPE = 57467
const REPAIR = 57468
const OPTIMIZE = 57469
const TRUNCATE = 57470
const MAXVALUE = 57471
const PARTITION = 57472
const REORGANIZE = 57473
const LESS = 57474
const THAN = 57475
const PROCEDURE = 57476
const TRIGGER = 57477
const VINDEX = 57478
const VINDEXES = 57479
const STATUS = 57480
const VARIABLES = 57481
const RESTRICT = 57482
const CASCADE = 57483
const NO = 57484
const ACTION = 57485
const PERMISSIVE = 57486
const RESTRICTIVE = 57487
const PUBLIC = 57488
const CURRENT_USER = 57489
const SESSION_USER = 57490
const PAD_INDEX = 57491
const FILLFACTOR = 57492
const IGNORE_DUP_KEY = 57493
const STATISTICS_NORECOMPUTE = 57494
const STATISTICS_INCREMENTAL = 57495
const ALLOW_ROW_LOCKS = 57496
const ALLOW_PAGE_LOCKS = 57497
const BEFORE = 57498
const AFTER = 57499
const EACH = 57500
const ROW = 57501
const SCROLL = 57502
const CURSOR = 57503
const OPEN = 57504
const CLOSE = 57505
const FETCH = 57506
const PRIOR = 57507
const FIRST = 57508
const LAST = 57509
const DEALLOCATE = 57510
const BEGIN = 57511
const START = 57512
const TRANSACTION = 57513
const COMMIT = 57514
const ROLLBACK = 57515
const BIT = 57516
const TINYINT = 57517
const SMALLINT = 57518
const SMALLSERIAL = 57519
const MEDIUMINT = 57520
const INT = 57521
const INTEGER = 57522
const SERIAL = 57523
const BIGINT = 57524
const BIGSERIAL = 57525
const INTNUM = 57526
const REAL = 57527
const DOUBLE = 57528
const PRECISION = 57529
const FLOAT_TYPE = 57530
const DECIMAL = 57531
const NUMERIC = 57532
const SMALLMONEY = 57533
const MONEY = 57534
const TIME = 57535
const TIMESTAMP = 57536
const DATETIME = 57537
const YEAR = 57538
const DATETIMEOFFSET = 57539
const DATETIME2 = 57540
const SMALLDATETIME = 57541
const CHAR = 57542
const VARCHAR = 57543
const VARYING = 57544
const BOOL = 57545
const CHARACTER = 57546
const VARBINARY = 57547
const NCHAR = 57548
const NVARCHAR = 57549
const NTEXT = 57550
const UUID = 57551
const TEXT = 57552
const TINYTEXT = 57553
const MEDIUMTEXT = 57554
const LONGTEXT = 57555
const CITEXT = 57556
const BLOB = 57557
const TINYBLOB = 57558
const MEDIUMBLOB = 57559
const LONGBLOB = 57560
const JSON = 57561
const JSONB = 57562
const ENUM = 57563
const GEOMETRY = 57564
const POINT = 57565
const LINESTRING = 57566
const POLYGON = 57567
const GEOMETRYCOLLECTION = 57568
const MULTIPOINT = 57569
const MULTILINESTRING = 57570
const MULTIPOLYGON = 57571
const ARRAY = 57572
const NOW = 57573
const GETDATE = 57574
const BPCHAR = 57575
const NULLX = 57576
const AUTO_INCREMENT = 57577
const APPROXNUM = 57578
const SIGNED = 57579
const UNSIGNED = 57580
const ZEROFILL = 57581
const ZONE = 57582
const AUTOINCREMENT = 57583
const DATABASES = 57584
const TABLES = 57585
const VITESS_KEYSPACES = 57586
const VITESS_SHARDS = 57587
const VITESS_TABLETS = 57588
const VSCHEMA_TABLES = 57589
const EXTENDED = 57590
const FULL = 57591
const PROCESSLIST = 57592
const NAMES = 57593
const CHARSET = 57594
const GLOBAL = 57595
const SESSION = 57596
const ISOLATION = 57597
const LEVEL = 57598
const READ = 57599
const WRITE = 57600
const ONLY = 57601
const REPEATABLE = 57602
const COMMITTED = 57603
const UNCOMMITTED = 57604
const SERIALIZABLE = 57605
const NEW = 57606
const CURRENT_TIMESTAMP = 57607
const DATABASE = 57608
const CURRENT_DATE = 57609
const CURRENT_TIME = 57610
const LOCALTIME = 57611
const LOCALTIMESTAMP = 57612
const UTC_DATE = 57613
const UTC_TIME = 57614
const UTC_TIMESTAMP = 57615
const REPLACE = 57616
const CONVERT = 57617
const CAST = 57618
const SUBSTR = 57619
const SUBSTRING = 57620
const GROUP_CONCAT = 57621
const SEPARATOR = 57622
const INHERIT = 57623
const MATCH = 57624
const AGAINST = 57625
const BOOLEAN = 57626
const LANGUAGE = 57627
const WITH = 57628
const WITHOUT = 57629
const PARSER = 57630
const QUERY = 57631
const EXPANSION = 57632
const UNUSED = 57633
const VIRTUAL = 57634
const GENERATED = 57635
const ALWAYS = 57636
const IDENTITY = 57637
const SEQUENCE = 57638
const INCREMENT = 57639
const MINVALUE = 57640
const CACHE = 57641
const CYCLE = 57642
const OWNED = 57643
const NONE = 57644
const CLUSTERED = 57645
const NONCLUSTERED = 57646
const REPLICATION = 57647
const INCLUDE = 57648
const HOLDLOCK = 57649
const NOLOCK = 57650
const NOWAIT = 57651
const PAGLOCK = 57652
const ROWLOCK = 57653
const TABLELOCK = 57654
const TYPECAST = 57655
const CHECK = 57656

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	122, 136,
	-2, 126,
	-1, 36,
	155, 450,
	156, 450,
	-2, 440,
	-1, 271,
	110, 796,
	-2, 792,
	-1, 272,
	110, 797,
	-2, 793,
	-1, 344,
	81, 1007,
	-2, 81,
	-1, 345,
	81, 958,
	-2, 82,
	-1, 351,
	81, 937,
	-2, 763,
	-1, 353,
	81, 981,
	-2, 765,
	-1, 672,
	52, 41,
	54, 41,
	-2, 43,
	-1, 819,
	110, 799,
	-2, 795,
	-1, 1064,
	5, 28,
	-2, 595,
	-1, 1089,
	5, 27,
	-2, 736,
	-1, 1193,
	5, 27,
	-2, 87,
	-1, 1414,
	5, 28,
	-2, 737,
	-1, 1507,
	5, 27,
	-2, 739,
	-1, 1666,
	5, 28,
	-2, 740,
	-1, 1793,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 15610

var yyAct = [...]int{
	272, 1757, 1560, 1519, 21, 269, 1602, 1656, 1092, 1641,
	998, 1522, 530, 750, 1420, 599, 1441, 250, 1105, 276,
	884, 1126, 1281, 53, 1424, 267, 1184, 1129, 1758, 902,
	274, 303, 1311, 483, 795, 89, 927, 922, 89, 598,
	3, 1282, 1195, 1278, 275, 1151, 666, 664, 993, 244,
	1007, 1006, 933, 1157, 926, 947, 885, 1110, 1254, 852,
	254, 517, 89, 89, 355, 1056, 844, 66, 1181, 355,
	756, 872, 355, 355, 1673, 988, 855, 279, 89, 350,
	89, 942, 682, 821, 1097, 536, 89, 249, 481, 343,
	681, 668, 881, 245, 246, 247, 248, 653, 542, 259,
	1710, 701, 697, 1038, 622, 550, 330, 340, 338, 329,
	1165, 963, 1310, 565, 566, 567, 568, 569, 570, 571,
	564, 564, 960, 574, 574, 346, 331, 52, 1751, 1336,
	854, 1699, 558, 1447, 561, 1324, 263, 484, 485, 334,
	576, 577, 578, 579, 580, 581, 582, 574, 559, 560,
	557, 563, 562, 572, 573, 565, 566, 567, 568, 569,
	570, 571, 564, 1404, 529, 574, 1688, 1405, 976, 1593,
	563, 562, 572, 573, 565, 566, 567, 568, 569, 570,
	571, 564, 1801, 1323, 574, 562, 572, 573, 565, 566,
	567, 568, 569, 570, 571, 564, 534, 962, 574, 1728,
	1149, 563, 562, 572, 573, 565, 566, 567, 568, 569,
	570, 571, 564, 1454, 1744, 574, 567, 568, 569, 570,
	571, 564, 1796, 89, 574, 1664, 1607, 355, 355, 355,
	355, 87, 355, 1606, 242, 1185, 1186, 1737, 1785, 355,
	563, 562, 572, 573, 565, 566, 567, 568, 569, 570,
	571, 564, 999, 1703, 574, 1106, 266, 1727, 87, 87,
	1401, 529, 1273, 1663, 1687, 1408, 355, 1425, 1426, 1427,
	1428, 1429, 1430, 494, 87, 1304, 87, 538, 1689, 1402,
	529, 915, 87, 1305, 1306, 525, 589, 590, 591, 592,
	593, 594, 595, 1167, 683, 539, 684, 1164, 563, 562,
	572, 573, 565, 566, 567, 568, 569, 570, 571, 564,
	1118, 1473, 574, 1117, 1472, 515, 1119, 563, 562, 572,
	573, 565, 566, 567, 568, 569, 570, 571, 564, 89,
	1161, 574, 1163, 1162, 786, 965, 89, 89, 89, 916,
	917, 787, 355, 84, 80, 81, 82, 575, 575, 355,
	977, 585, 563, 562, 572, 573, 565, 566, 567, 568,
	569, 570, 571, 564, 1496, 967, 574, 484, 485, 1693,
	1249, 575, 1551, 876, 1356, 1355, 1397, 989, 301, 1395,
	243, 1594, 1695, 1743, 1799, 1745, 1719, 1755, 1636, 575,
	563, 562, 572, 573, 565, 566, 567, 568, 569, 570,
	571, 564, 1646, 346, 574, 758, 1562, 1538, 575, 510,
	1690, 1366, 1367, 334, 1625, 1795, 521, 522, 1783, 87,
	1657, 1232, 575, 882, 1326, 627, 628, 563, 562, 572,
	573, 565, 566, 567, 568, 569, 570, 571, 564, 575,
	1658, 574, 349, 1504, 1449, 1317, 673, 487, 575, 679,
	491, 492, 1372, 563, 562, 572, 573, 565, 566, 567,
	568, 569, 570, 571, 564, 1448, 613, 574, 1373, 1143,
	943, 1142, 1455, 512, 1444, 514, 1131, 1057, 575, 1767,
	1381, 1736, 1584, 1255, 1318, 1607, 944, 89, 758, 499,
	489, 77, 78, 78, 89, 1148, 89, 355, 1481, 89,
	765, 486, 89, 1109, 511, 513, 89, 83, 355, 355,
	355, 355, 355, 355, 355, 355, 1662, 1257, 1108, 1136,
	757, 1107, 355, 355, 748, 87, 495, 89, 990, 977,
	222, 970, 87, 670, 87, 79, 575, 1691, 1692, 1694,
	1696, 1697, 355, 518, 519, 520, 89, 523, 1233, 1647,
	1648, 1649, 355, 1789, 527, 575, 798, 587, 588, 759,
	760, 1598, 820, 1417, 1134, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	1241, 1072, 1259, 695, 943, 774, 1264, 1050, 1258, 822,
	575, 793, 686, 1256, 597, 57, 355, 554, 355, 1262,
	944, 1442, 1443, 1445, 505, 349, 349, 349, 349, 772,
	349, 790, 1260, 1261, 903, 905, 818, 349, 849, 850,
	59, 60, 61, 62, 63, 549, 865, 868, 575, 943,
	1263, 1265, 874, 1350, 819, 823, 509, 924, 923, 1033,
	800, 860, 759, 760, 552, 944, 1460, 1618, 89, 1237,
	1617, 89, 89, 89, 89, 89, 1459, 815, 817, 856,
	1616, 1615, 1462, 89, 1614, 575, 89, 1613, 1612, 886,
	89, 1463, 547, 1610, 1363, 89, 89, 627, 628, 355,
	847, 1794, 1120, 87, 1351, 1461, 1095, 355, 549, 904,
	87, 575, 87, 355, 685, 87, 1275, 873, 87, 796,
	797, 1770, 773, 878, 873, 860, 1079, 1128, 870, 572,
	573, 565, 566, 567, 568, 569, 570, 571, 564, 1034,
	349, 574, 910, 87, 548, 547, 1236, 688, 334, 334,
	334, 334, 334, 861, 862, 753, 1047, 1048, 1049, 869,
	346, 549, 87, 334, 1537, 548, 547, 544, 921, 355,
	1540, 773, 334, 355, 928, 355, 89, 887, 89, 899,
	890, 907, 549, 1229, 89, 908, 89, 50, 912, 89,
	355, 913, 1128, 877, 1536, 879, 880, 824, 888, 889,
	1127, 891, 931, 615, 616, 617, 618, 619, 620, 621,
	1769, 528, 828, 266, 995, 1068, 1128, 1067, 1674, 266,
	266, 1742, 1128, 867, 867, 266, 826, 827, 825, 867,
	1139, 1040, 764, 1741, 548, 547, 1740, 1675, 991, 992,
	1069, 498, 1738, 775, 776, 777, 778, 779, 780, 781,
	782, 549, 1053, 1054, 1055, 1676, 1672, 783, 784, 266,
	266, 266, 266, 792, 87, 1549, 867, 87, 87, 87,
	87, 87, 540, 548, 547, 818, 1611, 822, 1138, 900,
	1277, 1230, 87, 1228, 76, 1739, 670, 1475, 548, 547,
	549, 87, 87, 819, 75, 349, 488, 1231, 529, 791,
	1039, 978, 979, 980, 981, 549, 349, 349, 349, 349,
	349, 349, 349, 349, 548, 547, 548, 547, 1466, 1474,
	349, 349, 1168, 823, 501, 502, 503, 355, 1465, 1052,
	89, 549, 1168, 549, 1332, 1190, 845, 1112, 846, 1114,
	802, 1089, 70, 73, 1188, 328, 1168, 355, 1503, 1523,
	552, 1470, 1383, 349, 1182, 1608, 1046, 71, 355, 74,
	1145, 1321, 1525, 1078, 1320, 575, 1319, 490, 1137, 355,
	493, 1121, 87, 1001, 87, 72, 68, 1113, 89, 848,
	87, 771, 87, 1123, 770, 87, 811, 813, 814, 1634,
	1806, 529, 812, 754, 851, 1102, 349, 1144, 1511, 1791,
	1438, 1784, 1438, 1750, 1061, 866, 866, 334, 928, 752,
	773, 866, 1438, 1749, 1438, 1735, 1629, 1115, 1634, 1734,
	355, 1076, 266, 1731, 1730, 1159, 1723, 529, 1438, 1720,
	1524, 507, 1187, 500, 1175, 482, 1177, 1178, 1179, 1180,
	1628, 1132, 1133, 1135, 482, 1511, 1654, 1626, 866, 1438,
	1630, 355, 1511, 1546, 89, 89, 1556, 1193, 1511, 529,
	1514, 1513, 89, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	266, 355, 1183, 1511, 1512, 1438, 1437, 349, 1301, 529,
	676, 1196, 1202, 1250, 1251, 349, 1189, 266, 1002, 1555,
	1004, 349, 1416, 529, 1359, 1358, 1268, 1269, 1550, 1271,
	1272, 1203, 1201, 1353, 1354, 1031, 69, 1093, 1219, 943,
	1467, 355, 355, 1635, 938, 1634, 937, 23, 939, 940,
	1274, 677, 1523, 675, 941, 944, 87, 886, 1280, 1353,
	1352, 1247, 1246, 886, 1457, 1525, 1289, 1062, 529, 1248,
	1283, 1087, 1303, 355, 1088, 355, 355, 996, 1267, 1279,
	1285, 349, 1093, 349, 1270, 1266, 1302, 1169, 1170, 1253,
	1172, 1173, 1174, 23, 50, 1488, 650, 529, 349, 1288,
	1290, 1343, 819, 1220, 1146, 858, 529, 1094, 1222, 1215,
	1216, 1309, 1223, 1218, 1217, 693, 692, 1094, 1225, 1221,
	1506, 1322, 349, 858, 54, 1199, 1200, 1308, 1200, 1224,
	1521, 1244, 1074, 1524, 928, 1214, 928, 1708, 23, 1071,
	50, 50, 89, 355, 1412, 1327, 1325, 1159, 1333, 650,
	89, 909, 649, 675, 650, 1456, 355, 1344, 1345, 1093,
	1347, 1348, 1349, 1062, 1362, 355, 1526, 1527, 1528, 1529,
	1530, 1531, 1532, 1357, 1062, 1073, 650, 89, 1477, 1476,
	1238, 1239, 1070, 355, 966, 50, 256, 1122, 87, 914,
	1062, 678, 355, 794, 1797, 89, 1748, 1725, 266, 1632,
	1631, 1369, 1385, 1370, 1374, 1388, 1622, 1621, 256, 266,
	48, 26, 27, 1376, 655, 658, 659, 660, 656, 773,
	657, 661, 1574, 1581, 1098, 1099, 751, 1379, 1548, 1490,
	967, 994, 28, 50, 867, 1111, 1382, 1342, 1341, 1339,
	867, 1329, 1386, 1296, 1294, 355, 1191, 1192, 355, 355,
	355, 89, 355, 1246, 989, 349, 1150, 1419, 1393, 355,
	1125, 983, 1431, 1432, 1433, 982, 1130, 1098, 1099, 1764,
	1436, 65, 334, 1209, 1411, 1603, 1478, 1140, 1279, 1101,
	355, 799, 1446, 292, 291, 294, 295, 296, 297, 768,
	1346, 755, 293, 298, 1453, 1123, 1234, 1434, 1451, 526,
	896, 894, 1104, 1605, 806, 897, 895, 1450, 898, 1103,
	659, 660, 893, 355, 355, 892, 260, 261, 1726, 1240,
	928, 1035, 355, 543, 1762, 1045, 1044, 1580, 349, 1159,
	1458, 1331, 355, 531, 1468, 1176, 541, 1579, 87, 691,
	857, 859, 508, 1210, 1206, 532, 87, 1211, 1208, 1207,
	1480, 1410, 1756, 74, 1491, 1479, 875, 1497, 1498, 349,
	1499, 1500, 1501, 1003, 1212, 796, 797, 355, 355, 767,
	1205, 1330, 1198, 87, 1196, 928, 997, 663, 543, 349,
	1778, 1575, 1576, 1578, 257, 258, 1487, 1577, 1718, 355,
	1043, 87, 1365, 1316, 1283, 251, 1746, 265, 1042, 355,
	1587, 349, 252, 54, 1505, 1507, 901, 1586, 1483, 1494,
	1484, 1485, 1486, 1535, 1518, 1094, 866, 1716, 1539, 1287,
	1111, 1533, 866, 1482, 1534, 1715, 1541, 355, 355, 89,
	1714, 1713, 355, 1543, 545, 1547, 1620, 1552, 1008, 1009,
	1010, 355, 58, 1573, 1315, 1314, 1619, 670, 1595, 1141,
	789, 349, 56, 349, 1312, 1582, 1204, 1553, 1371, 1554,
	1569, 8, 355, 1566, 7, 1567, 6, 1564, 1565, 5,
	674, 1469, 51, 1471, 655, 658, 659, 660, 656, 1596,
	657, 661, 1604, 1, 277, 1423, 1709, 1601, 1283, 1600,
	1639, 1563, 1645, 49, 1627, 1147, 1624, 67, 1597, 1702,
	1633, 1335, 1364, 1197, 1213, 1000, 1194, 1016, 1655, 1669,
	1495, 1520, 935, 925, 480, 64, 1609, 936, 1573, 934,
	932, 1361, 694, 961, 1166, 355, 355, 355, 355, 964,
	700, 698, 355, 699, 1375, 1651, 1651, 696, 702, 1557,
	230, 341, 1637, 1377, 662, 687, 546, 1638, 1227, 355,
	1226, 304, 47, 1660, 355, 1650, 1652, 1012, 355, 1235,
	785, 1380, 1032, 524, 232, 886, 1665, 583, 1670, 1041,
	349, 1116, 355, 355, 1684, 348, 1698, 1286, 535, 1585,
	1493, 1077, 355, 355, 610, 355, 1682, 1683, 871, 278,
	1059, 1573, 810, 290, 1060, 287, 355, 336, 289, 47,
	288, 801, 1064, 1065, 1066, 1573, 1707, 255, 355, 1086,
	556, 1075, 333, 335, 646, 1706, 1081, 654, 1721, 1082,
	1083, 1084, 1085, 1421, 652, 87, 1421, 1421, 1421, 1717,
	1435, 651, 86, 1100, 1096, 332, 1243, 349, 1407, 1677,
	1678, 1679, 1680, 1681, 1653, 1592, 805, 25, 55, 533,
	537, 262, 19, 18, 1732, 1733, 17, 1747, 1421, 355,
	339, 20, 16, 15, 14, 29, 555, 13, 1753, 12,
	1752, 1759, 11, 1573, 1573, 496, 355, 497, 10, 9,
	355, 1761, 1760, 504, 1572, 1685, 1571, 1570, 1568, 1768,
	4, 349, 349, 1766, 1700, 1701, 253, 89, 22, 355,
	1489, 1773, 600, 2, 1776, 0, 0, 355, 1775, 0,
	1492, 611, 1573, 1774, 1573, 0, 0, 0, 89, 0,
	0, 0, 0, 0, 0, 1788, 0, 0, 0, 1792,
	1790, 0, 0, 0, 0, 0, 1781, 0, 1781, 0,
	355, 0, 867, 0, 0, 1509, 1510, 0, 355, 0,
	1802, 1803, 0, 0, 1573, 0, 1804, 0, 1573, 1334,
	0, 0, 0, 0, 1153, 1154, 1155, 1312, 1793, 0,
	0, 0, 1158, 1156, 299, 300, 0, 1542, 516, 516,
	516, 516, 1781, 516, 0, 0, 0, 0, 1763, 0,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1798, 0, 1252, 0, 1312, 1558, 47, 0, 0,
	1561, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	506, 1152, 584, 0, 0, 586, 1153, 1154, 1155, 0,
	0, 0, 0, 0, 1158, 1156, 299, 300, 0, 0,
	1599, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 596, 0, 0, 601, 602, 603, 604,
	605, 606, 607, 608, 609, 0, 612, 614, 614, 614,
	614, 614, 614, 614, 614, 0, 642, 643, 644, 645,
	0, 0, 0, 0, 0, 960, 0, 665, 968, 969,
	971, 972, 973, 1772, 974, 975, 0, 0, 0, 0,
	0, 0, 0, 1640, 1642, 1643, 1644, 949, 0, 0,
	1312, 984, 985, 986, 87, 987, 0, 0, 0, 0,
	0, 956, 0, 945, 866, 0, 648, 1667, 0, 946,
	0, 0, 1668, 0, 0, 672, 1671, 0, 256, 0,
	48, 26, 27, 0, 0, 808, 809, 0, 0, 0,
	1561, 1312, 1574, 0, 1160, 1164, 0, 0, 0, 0,
	1312, 1312, 28, 1704, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 1712, 48, 26, 27, 0, 0,
	0, 0, 952, 0, 948, 957, 1724, 1574, 1161, 1387,
	1163, 1162, 954, 953, 0, 0, 1389, 28, 0, 600,
	0, 0, 863, 864, 0, 0, 0, 0, 1398, 1399,
	1400, 0, 1807, 1403, 0, 0, 1160, 1164, 0, 0,
	0, 0, 0, 0, 0, 0, 1413, 1414, 1415, 0,
	1418, 1022, 0, 0, 0, 0, 0, 1754, 0, 0,
	0, 0, 0, 0, 0, 1021, 0, 1782, 516, 0,
	1161, 0, 1163, 1162, 1312, 0, 0, 1580, 1765, 516,
	516, 516, 516, 516, 516, 516, 516, 1579, 0, 0,
	0, 0, 1026, 516, 516, 0, 0, 1421, 0, 1464,
	0, 1020, 0, 920, 749, 1779, 0, 0, 0, 0,
	0, 761, 1580, 762, 0, 0, 766, 0, 0, 769,
	0, 0, 1579, 0, 0, 0, 0, 0, 950, 0,
	0, 1575, 1576, 1578, 951, 0, 0, 1577, 349, 0,
	0, 0, 0, 0, 788, 0, 1561, 0, 0, 0,
	1017, 1014, 1015, 0, 1013, 0, 0, 0, 47, 0,
	0, 0, 0, 807, 0, 0, 1575, 1576, 1578, 1502,
	0, 0, 1577, 601, 0, 1171, 0, 0, 0, 0,
	0, 0, 0, 1024, 1027, 0, 958, 0, 959, 0,
	0, 0, 0, 1515, 1516, 1517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 955, 0, 1036,
	1037, 0, 537, 0, 1545, 0, 0, 0, 0, 0,
	0, 0, 335, 335, 335, 335, 335, 0, 0, 623,
	0, 0, 0, 0, 0, 0, 0, 665, 0, 906,
	0, 0, 0, 49, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1019, 0, 1588,
	1589, 1590, 1591, 625, 0, 883, 0, 0, 256, 0,
	48, 26, 27, 0, 1058, 0, 1063, 0, 49, 0,
	0, 0, 1574, 0, 0, 0, 0, 0, 1018, 0,
	0, 1080, 28, 911, 563, 562, 572, 573, 565, 566,
	567, 568, 569, 570, 571, 564, 0, 0, 574, 0,
	0, 0, 0, 630, 631, 632, 633, 634, 635, 636,
	637, 638, 639, 0, 516, 0, 516, 0, 1023, 0,
	0, 0, 0, 0, 626, 0, 0, 0, 0, 0,
	0, 516, 640, 624, 1025, 0, 0, 0, 0, 629,
	0, 0, 0, 0, 1661, 0, 0, 0, 0, 1666,
	0, 0, 0, 0, 0, 0, 1338, 1340, 23, 24,
	48, 26, 27, 1005, 0, 1011, 0, 0, 0, 0,
	0, 1028, 0, 1029, 0, 1686, 1030, 1580, 42, 0,
	1051, 0, 28, 0, 0, 0, 0, 1579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 37, 0, 724, 0, 50, 0, 1722, 0, 0,
	0, 0, 0, 641, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1575, 1576, 1578, 0, 0, 0, 1577, 1153, 1154,
	1155, 0, 0, 1090, 1091, 0, 1158, 1156, 299, 300,
	1390, 1391, 0, 1392, 0, 0, 0, 1394, 0, 1396,
	0, 0, 0, 0, 0, 30, 31, 33, 32, 35,
	0, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	709, 0, 0, 0, 0, 0, 0, 1276, 0, 0,
	36, 43, 44, 0, 0, 45, 46, 34, 0, 0,
	0, 0, 1291, 1292, 0, 0, 1293, 1439, 1440, 1295,
	0, 0, 0, 0, 725, 0, 0, 1786, 0, 0,
	0, 0, 575, 0, 0, 0, 0, 0, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 38, 39,
	0, 40, 41, 49, 0, 0, 0, 0, 0, 0,
	1711, 0, 0, 0, 0, 0, 1808, 1809, 0, 47,
	0, 0, 724, 0, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 0, 741, 742, 0, 743, 744,
	745, 747, 746, 726, 727, 728, 732, 730, 729, 731,
	703, 705, 516, 640, 704, 710, 706, 707, 708, 722,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 723, 733, 734, 735, 736, 737, 738, 739, 740,
	0, 0, 0, 0, 0, 0, 0, 0, 1160, 1164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 709,
	0, 0, 0, 49, 0, 1384, 0, 0, 0, 1242,
	1284, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1161, 0, 1163, 1162, 0, 0, 0, 1297,
	1298, 1299, 0, 725, 641, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1409, 0, 0, 0, 0,
	0, 0, 600, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 630, 631, 632, 633, 634, 635, 636,
	637, 638, 639, 0, 741, 742, 1452, 743, 744, 745,
	747, 746, 726, 727, 728, 732, 730, 729, 731, 703,
	705, 0, 640, 704, 710, 706, 707, 708, 722, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	723, 733, 734, 735, 736, 737, 738, 739, 740, 0,
	256, 0, 48, 26, 27, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 1574, 0, 0, 0, 0, 1360,
	0, 0, 0, 0, 28, 0, 335, 1368, 0, 0,
	0, 0, 0, 238, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 641, 1378, 1406, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1780, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 223, 0, 0, 0, 0, 0,
	225, 0, 0, 0, 0, 0, 0, 231, 227, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1580,
	0, 0, 0, 0, 0, 0, 0, 0, 229, 1579,
	0, 233, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1623, 1575, 1576, 1578, 0, 0, 0, 1577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1284, 0, 0, 1508, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1659, 600, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1544, 0, 0, 226, 0, 234, 235,
	236, 237, 241, 0, 0, 0, 0, 240, 239, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1705, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1583, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 1284, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1777,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1729, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 466, 456, 0, 417, 468, 387, 405, 476, 407,
	408, 443, 367, 426, 154, 402, 385, 92, 390, 360,
	397, 361, 388, 419, 116, 386, 458, 429, 130, 474,
	133, 434, 0, 176, 142, 0, 0, 421, 460, 424,
	451, 416, 444, 375, 433, 469, 403, 439, 470, 0,
	0, 0, 354, 0, 929, 930, 0, 0, 0, 0,
	0, 105, 0, 438, 465, 399, 479, 442, 359, 436,
	0, 365, 368, 475, 463, 394, 395, 1124, 0, 0,
	0, 0, 0, 0, 420, 425, 448, 413, 0, 0,
	47, 0, 0, 0, 0, 0, 391, 0, 432, 0,
	0, 0, 372, 366, 0, 418, 0, 1800, 0, 374,
	0, 392, 449, 0, 356, 454, 461, 415, 203, 464,
	412, 411, 161, 0, 108, 1787, 182, 120, 404, 131,
	446, 477, 467, 422, 459, 389, 398, 110, 396, 168,
	155, 194, 431, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 215, 216, 217, 218, 219, 220, 221, 364,
	357, 393, 452, 455, 379, 441, 369, 400, 447, 401,
	423, 384, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 212,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 362, 0,
	177, 196, 213, 214, 363, 383, 462, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 211, 440, 169, 107, 195, 175, 0, 378, 382,
	376, 377, 427, 428, 471, 472, 473, 450, 373, 0,
	380, 381, 0, 457, 125, 430, 91, 99, 132, 478,
	210, 0, 163, 118, 197, 0, 406, 358, 410, 0,
	0, 0, 0, 0, 0, 0, 370, 371, 170, 414,
	409, 435, 437, 445, 453, 466, 456, 104, 417, 468,
	387, 405, 476, 407, 408, 443, 367, 426, 154, 402,
	385, 92, 390, 360, 397, 361, 388, 419, 116, 386,
	458, 429, 130, 474, 133, 434, 0, 176, 142, 0,
	0, 421, 460, 424, 451, 416, 444, 375, 433, 469,
	403, 439, 470, 0, 0, 0, 354, 0, 929, 930,
	0, 0, 0, 0, 0, 105, 0, 438, 465, 399,
	479, 442, 359, 436, 0, 365, 368, 475, 463, 394,
	395, 0, 0, 0, 0, 0, 0, 0, 420, 425,
	448, 413, 0, 0, 0, 0, 0, 0, 0, 0,
	391, 0, 432, 0, 0, 0, 372, 366, 0, 418,
	0, 0, 0, 374, 0, 392, 449, 0, 356, 454,
	461, 415, 203, 464, 412, 411, 161, 0, 108, 0,
	182, 120, 404, 131, 446, 477, 467, 422, 459, 389,
	398, 110, 396, 168, 155, 194, 431, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 215, 216, 217, 218,
	219, 220, 221, 364, 357, 393, 452, 455, 379, 441,
	369, 400, 447, 401, 423, 384, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 212, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 362, 0, 177, 196, 213, 214, 363, 383,
	462, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 211, 440, 169, 107, 195,
	175, 0, 378, 382, 376, 377, 427, 428, 471, 472,
	473, 450, 373, 0, 380, 381, 0, 457, 125, 430,
	91, 99, 132, 478, 210, 0, 163, 118, 197, 0,
	406, 358, 410, 0, 0, 0, 0, 0, 0, 0,
	370, 371, 170, 414, 409, 435, 437, 445, 453, 466,
	456, 104, 417, 468, 387, 405, 476, 407, 408, 443,
	367, 426, 154, 402, 385, 92, 390, 360, 397, 361,
	388, 419, 116, 386, 458, 429, 130, 474, 133, 434,
	0, 176, 142, 0, 0, 421, 460, 424, 451, 416,
	444, 375, 433, 469, 403, 439, 470, 0, 0, 0,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 438, 465, 399, 479, 442, 359, 436, 0, 365,
	368, 475, 463, 394, 395, 0, 0, 0, 0, 0,
	0, 0, 420, 425, 448, 413, 0, 0, 0, 0,
	0, 0, 1245, 0, 391, 0, 432, 0, 0, 0,
	372, 366, 0, 418, 0, 0, 0, 374, 0, 392,
	449, 0, 356, 454, 461, 415, 203, 464, 412, 411,
	161, 0, 108, 0, 182, 120, 404, 131, 446, 477,
	467, 422, 459, 389, 398, 110, 396, 168, 155, 194,
	431, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	215, 216, 217, 218, 219, 220, 221, 364, 357, 393,
	452, 455, 379, 441, 369, 400, 447, 401, 423, 384,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 212, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 362, 0, 177, 196,
	213, 214, 363, 383, 462, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 211,
	440, 169, 107, 195, 175, 0, 378, 382, 376, 377,
	427, 428, 471, 472, 473, 450, 373, 0, 380, 381,
	0, 457, 125, 430, 91, 99, 132, 478, 210, 0,
	163, 118, 197, 0, 406, 358, 410, 0, 0, 0,
	0, 0, 0, 0, 370, 371, 170, 414, 409, 435,
	437, 445, 453, 466, 456, 104, 417, 468, 387, 405,
	476, 407, 408, 443, 367, 426, 154, 402, 385, 92,
	390, 360, 397, 361, 388, 419, 116, 386, 458, 429,
	130, 474, 133, 434, 0, 176, 142, 0, 0, 421,
	460, 424, 451, 416, 444, 375, 433, 469, 403, 439,
	470, 50, 0, 0, 354, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 438, 465, 399, 479, 442,
	359, 436, 0, 365, 368, 475, 463, 394, 395, 0,
	0, 0, 0, 0, 0, 0, 420, 425, 448, 413,
	0, 0, 0, 0, 0, 0, 0, 0, 391, 0,
	432, 0, 0, 0, 372, 366, 0, 418, 0, 0,
	0, 374, 0, 392, 449, 0, 356, 454, 461, 415,
	203, 464, 412, 411, 161, 0, 108, 0, 182, 120,
	404, 131, 446, 477, 467, 422, 459, 389, 398, 110,
	396, 168, 155, 194, 431, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 215, 216, 217, 218, 219, 220,
	221, 364, 357, 393, 452, 455, 379, 441, 369, 400,
	447, 401, 423, 384, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 212, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	362, 0, 177, 196, 213, 214, 363, 383, 462, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 211, 440, 169, 107, 195, 175, 0,
	378, 382, 376, 377, 427, 428, 471, 472, 473, 450,
	373, 0, 380, 381, 0, 457, 125, 430, 91, 99,
	132, 478, 210, 0, 163, 118, 197, 0, 406, 358,
	410, 0, 0, 0, 0, 0, 0, 0, 370, 371,
	170, 414, 409, 435, 437, 445, 453, 466, 456, 104,
	417, 468, 387, 405, 476, 407, 408, 443, 367, 426,
	154, 402, 385, 92, 390, 360, 397, 361, 388, 419,
	116, 386, 458, 429, 130, 474, 133, 434, 0, 176,
	142, 0, 0, 421, 460, 424, 451, 416, 444, 375,
	433, 469, 403, 439, 470, 0, 0, 0, 354, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 438,
	465, 399, 479, 442, 359, 436, 0, 365, 368, 475,
	463, 394, 395, 0, 0, 0, 0, 0, 0, 0,
	420, 425, 448, 413, 0, 0, 0, 0, 0, 0,
	0, 0, 391, 0, 432, 0, 0, 0, 372, 366,
	0, 418, 0, 0, 0, 374, 0, 392, 449, 0,
	356, 454, 461, 415, 203, 464, 412, 411, 161, 0,
	108, 0, 182, 120, 404, 131, 446, 477, 467, 422,
	459, 389, 398, 110, 396, 168, 155, 194, 431, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 215, 216,
	217, 218, 219, 220, 221, 364, 357, 393, 452, 455,
	379, 441, 369, 400, 447, 401, 423, 384, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 212, 113, 112, 178, 101,
	200, 201, 98, 352, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 362, 0, 177, 196, 213, 214,
	363, 383, 462, 206, 207, 208, 209, 0, 0, 0,
	353, 351, 124, 173, 128, 135, 164, 211, 440, 169,
	107, 195, 175, 347, 378, 382, 376, 377, 427, 428,
	471, 472, 473, 450, 373, 0, 380, 381, 0, 457,
	125, 430, 91, 99, 132, 478, 210, 0, 163, 118,
	197, 0, 406, 358, 410, 0, 0, 0, 0, 0,
	0, 0, 370, 371, 170, 414, 409, 435, 437, 445,
	453, 466, 456, 104, 417, 468, 387, 405, 476, 407,
	408, 443, 367, 426, 154, 402, 385, 92, 390, 360,
	397, 361, 388, 419, 116, 386, 458, 429, 130, 474,
	133, 434, 0, 176, 142, 0, 0, 421, 460, 424,
	451, 416, 444, 375, 433, 469, 403, 439, 470, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 438, 465, 399, 479, 442, 359, 436,
	0, 365, 368, 475, 463, 394, 395, 0, 0, 0,
	0, 0, 0, 0, 420, 425, 448, 413, 0, 0,
	0, 0, 0, 0, 816, 0, 391, 0, 432, 0,
	0, 0, 372, 366, 0, 418, 0, 0, 0, 374,
	0, 392, 449, 0, 356, 454, 461, 415, 203, 464,
	412, 411, 161, 0, 108, 0, 182, 120, 404, 131,
	446, 477, 467, 422, 459, 389, 398, 110, 396, 168,
	155, 194, 431, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 215, 216, 217, 218, 219, 220, 221, 364,
	357, 393, 452, 455, 379, 441, 369, 400, 447, 401,
	423, 384, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 212,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 362, 0,
	177, 196, 213, 214, 363, 383, 462, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 211, 440, 169, 107, 195, 175, 0, 378, 382,
	376, 377, 427, 428, 471, 472, 473, 450, 373, 0,
	380, 381, 0, 457, 125, 430, 91, 99, 132, 478,
	210, 0, 163, 118, 197, 0, 406, 358, 410, 0,
	0, 0, 0, 0, 0, 0, 370, 371, 170, 414,
	409, 435, 437, 445, 453, 466, 456, 104, 417, 468,
	387, 405, 476, 407, 408, 443, 367, 426, 154, 402,
	385, 92, 390, 360, 397, 361, 388, 419, 116, 386,
	458, 429, 130, 474, 133, 434, 0, 176, 142, 0,
	0, 421, 460, 424, 451, 416, 444, 375, 433, 469,
	403, 439, 470, 0, 0, 0, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 438, 465, 399,
	479, 442, 359, 436, 0, 365, 368, 475, 463, 394,
	395, 0, 0, 0, 0, 0, 0, 0, 420, 425,
	448, 413, 0, 0, 0, 0, 0, 0, 0, 0,
	391, 0, 432, 0, 0, 0, 372, 366, 0, 418,
	0, 0, 0, 374, 0, 392, 449, 0, 356, 454,
	461, 415, 203, 464, 412, 411, 161, 0, 108, 0,
	182, 120, 404, 131, 446, 477, 467, 422, 459, 389,
	398, 110, 396, 168, 155, 194, 431, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 215, 216, 217, 218,
	219, 220, 221, 364, 357, 393, 452, 455, 379, 441,
	369, 400, 447, 401, 423, 384, 93, 183, 680, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 212, 113, 112, 178, 101, 200, 201,
	98, 352, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 362, 0, 177, 196, 213, 214, 363, 383,
	462, 206, 207, 208, 209, 0, 0, 0, 353, 351,
	124, 173, 128, 135, 164, 211, 440, 169, 107, 195,
	175, 347, 378, 382, 376, 377, 427, 428, 471, 472,
	473, 450, 373, 0, 380, 381, 0, 457, 125, 430,
	91, 99, 132, 478, 210, 0, 163, 118, 197, 0,
	406, 358, 410, 0, 0, 0, 0, 0, 0, 0,
	370, 371, 170, 414, 409, 435, 437, 445, 453, 466,
	456, 104, 417, 468, 387, 405, 476, 407, 408, 443,
	367, 426, 154, 402, 385, 92, 390, 360, 397, 361,
	388, 419, 116, 386, 458, 429, 130, 474, 133, 434,
	0, 176, 142, 0, 0, 421, 460, 424, 451, 416,
	444, 375, 433, 469, 403, 439, 470, 0, 0, 0,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 438, 465, 399, 479, 442, 359, 436, 0, 365,
	368, 475, 463, 394, 395, 0, 0, 0, 0, 0,
	0, 0, 420, 425, 448, 413, 0, 0, 0, 0,
	0, 0, 0, 0, 391, 0, 432, 0, 0, 0,
	372, 366, 0, 418, 0, 0, 0, 374, 0, 392,
	449, 0, 356, 454, 461, 415, 203, 464, 412, 411,
	161, 0, 108, 0, 182, 120, 404, 131, 446, 477,
	467, 422, 459, 389, 398, 110, 396, 168, 155, 194,
	431, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	215, 216, 217, 218, 219, 220, 221, 364, 357, 393,
	452, 455, 379, 441, 369, 400, 447, 401, 423, 384,
	93, 183, 342, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 212, 113, 112,
	178, 101, 200, 201, 98, 352, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 362, 0, 177, 196,
	213, 214, 363, 383, 462, 206, 207, 208, 209, 0,
	0, 0, 353, 351, 345, 344, 128, 135, 164, 211,
	440, 169, 107, 195, 175, 347, 378, 382, 376, 377,
	427, 428, 471, 472, 473, 450, 373, 0, 380, 381,
	0, 457, 125, 430, 91, 99, 132, 478, 210, 0,
	163, 118, 197, 0, 406, 358, 410, 0, 0, 0,
	0, 0, 0, 0, 370, 371, 170, 414, 409, 435,
	437, 445, 453, 466, 456, 104, 417, 468, 387, 405,
	476, 407, 408, 443, 367, 426, 154, 402, 385, 92,
	390, 360, 397, 361, 388, 419, 116, 386, 458, 429,
	130, 474, 133, 434, 0, 176, 142, 0, 0, 421,
	460, 424, 451, 416, 444, 375, 433, 469, 403, 439,
	470, 0, 0, 0, 354, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 438, 465, 399, 479, 442,
	359, 436, 0, 365, 368, 475, 463, 394, 395, 0,
	0, 0, 0, 0, 0, 0, 420, 425, 448, 413,
	0, 0, 0, 0, 0, 0, 0, 0, 391, 0,
	432, 0, 0, 0, 372, 366, 0, 418, 0, 0,
	0, 374, 0, 392, 449, 0, 356, 454, 461, 415,
	203, 464, 412, 411, 161, 0, 108, 0, 182, 120,
	404, 131, 446, 477, 467, 422, 459, 389, 398, 110,
	396, 168, 155, 194, 431, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 215, 216, 217, 218, 219, 220,
	221, 364, 357, 393, 452, 455, 379, 441, 369, 400,
	447, 401, 423, 384, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 212, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	362, 0, 177, 196, 213, 214, 363, 383, 462, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 211, 440, 169, 107, 195, 175, 0,
	378, 382, 376, 377, 427, 428, 471, 472, 473, 450,
	373, 0, 380, 381, 0, 457, 125, 430, 91, 99,
	132, 478, 210, 0, 163, 118, 197, 0, 406, 358,
	410, 0, 0, 0, 0, 0, 0, 0, 370, 371,
	170, 414, 409, 435, 437, 445, 453, 466, 456, 104,
	417, 468, 387, 405, 476, 407, 408, 443, 367, 426,
	154, 402, 385, 92, 390, 360, 397, 361, 388, 419,
	116, 386, 458, 429, 130, 474, 133, 434, 0, 176,
	142, 0, 0, 421, 460, 424, 451, 416, 444, 375,
	433, 469, 403, 439, 470, 0, 0, 0, 271, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 438,
	465, 399, 479, 442, 359, 436, 0, 365, 368, 475,
	463, 394, 395, 0, 0, 0, 0, 0, 0, 0,
	420, 425, 448, 413, 0, 0, 0, 0, 0, 0,
	0, 0, 391, 0, 432, 0, 0, 0, 372, 366,
	0, 418, 0, 0, 0, 374, 0, 392, 449, 0,
	356, 454, 461, 415, 203, 464, 412, 411, 161, 0,
	108, 0, 182, 120, 404, 131, 446, 477, 467, 422,
	459, 389, 398, 110, 396, 168, 155, 194, 431, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 215, 216,
	217, 218, 219, 220, 221, 364, 357, 393, 452, 455,
	379, 441, 369, 400, 447, 401, 423, 384, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 212, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 362, 0, 177, 196, 213, 214,
	363, 383, 462, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 211, 440, 169,
	107, 195, 175, 0, 378, 382, 376, 377, 427, 428,
	471, 472, 473, 450, 373, 0, 380, 381, 0, 457,
	125, 430, 91, 99, 132, 478, 210, 0, 163, 118,
	197, 0, 406, 358, 410, 0, 0, 0, 0, 0,
	0, 0, 370, 371, 170, 414, 409, 435, 437, 445,
	453, 466, 456, 104, 417, 468, 387, 405, 476, 407,
	408, 443, 367, 426, 154, 402, 385, 92, 390, 360,
	397, 361, 388, 419, 116, 386, 458, 429, 130, 474,
	133, 434, 0, 176, 142, 0, 0, 421, 460, 424,
	451, 416, 444, 375, 433, 469, 403, 439, 470, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 438, 465, 399, 479, 442, 359, 436,
	0, 365, 368, 475, 463, 394, 395, 0, 0, 0,
	0, 0, 0, 0, 420, 425, 448, 413, 0, 0,
	0, 0, 0, 0, 0, 0, 391, 0, 432, 0,
	0, 0, 372, 366, 0, 418, 0, 0, 0, 374,
	0, 392, 449, 0, 356, 454, 461, 415, 203, 464,
	412, 411, 161, 0, 108, 0, 182, 120, 404, 131,
	446, 477, 467, 422, 459, 389, 398, 110, 396, 168,
	155, 194, 431, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 215, 216, 217, 218, 219, 220, 221, 364,
	357, 393, 452, 455, 379, 441, 369, 400, 447, 401,
	423, 384, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 212,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 362, 0,
	177, 196, 213, 214, 363, 383, 462, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 211, 440, 169, 107, 195, 175, 0, 378, 382,
	376, 377, 427, 428, 471, 472, 473, 450, 373, 0,
	380, 381, 0, 457, 125, 430, 91, 99, 132, 478,
	210, 0, 163, 118, 197, 0, 406, 358, 410, 0,
	0, 0, 0, 0, 0, 0, 370, 371, 170, 414,
	409, 435, 437, 445, 453, 154, 0, 104, 92, 0,
	0, 273, 0, 0, 0, 116, 270, 0, 0, 130,
	314, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	305, 306, 0, 0, 0, 0, 0, 0, 918, 0,
	50, 0, 0, 271, 292, 291, 294, 295, 296, 297,
	0, 0, 105, 293, 298, 299, 300, 919, 0, 0,
	268, 285, 0, 313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 0, 0, 0, 0, 326,
	0, 284, 0, 0, 280, 281, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 324, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 215, 216, 217, 218, 219, 220, 221,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	212, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 213, 214, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 211, 0, 169, 107, 195, 175, 302, 315,
	325, 321, 322, 319, 320, 318, 317, 316, 327, 307,
	308, 309, 310, 312, 0, 125, 311, 91, 99, 132,
	0, 210, 0, 163, 118, 197, 154, 0, 0, 92,
	853, 0, 273, 0, 0, 0, 116, 270, 0, 170,
	130, 314, 133, 0, 0, 176, 142, 323, 104, 0,
	0, 305, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 271, 292, 291, 294, 295, 296,
	297, 0, 0, 105, 293, 298, 299, 300, 0, 0,
	0, 268, 285, 0, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 264, 0, 0, 0,
	326, 0, 284, 0, 0, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 324, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 215, 216, 217, 218, 219, 220,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 212, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 213, 214, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 211, 0, 169, 107, 195, 175, 302,
	315, 325, 321, 322, 319, 320, 318, 317, 316, 327,
	307, 308, 309, 310, 312, 0, 125, 311, 91, 99,
	132, 0, 210, 0, 163, 118, 197, 154, 0, 0,
	92, 0, 0, 273, 0, 0, 0, 116, 270, 0,
	170, 130, 314, 133, 0, 0, 176, 142, 323, 104,
	0, 0, 305, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 529, 271, 292, 291, 294, 295,
	296, 297, 0, 0, 105, 293, 298, 299, 300, 0,
	0, 0, 268, 285, 0, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 0, 0, 0,
	0, 326, 0, 284, 0, 0, 280, 281, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 324, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 215, 216, 217, 218, 219,
	220, 221, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 212, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 213, 214, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 211, 0, 169, 107, 195, 175,
	302, 315, 325, 321, 322, 319, 320, 318, 317, 316,
	327, 307, 308, 309, 310, 312, 0, 125, 311, 91,
	99, 132, 0, 210, 0, 163, 118, 197, 154, 0,
	0, 92, 0, 0, 273, 0, 0, 0, 116, 270,
	0, 170, 130, 314, 133, 0, 0, 176, 142, 323,
	104, 0, 0, 305, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 271, 292, 291, 294,
	295, 296, 297, 0, 0, 105, 293, 298, 299, 300,
	0, 0, 0, 268, 285, 0, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 264, 0,
	0, 0, 326, 0, 284, 0, 0, 280, 281, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 324, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 215, 216, 217, 218,
	219, 220, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 212, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 213, 214, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 211, 0, 169, 107, 195,
	175, 302, 315, 325, 321, 322, 319, 320, 318, 317,
	316, 327, 307, 308, 309, 310, 312, 23, 125, 311,
	91, 99, 132, 0, 210, 0, 163, 118, 197, 154,
	0, 0, 92, 0, 0, 273, 0, 0, 0, 116,
	270, 0, 170, 130, 314, 133, 0, 0, 176, 142,
	323, 104, 0, 0, 305, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 271, 292, 291,
	294, 295, 296, 297, 0, 0, 105, 293, 298, 299,
	300, 0, 0, 0, 268, 285, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 0,
	0, 0, 0, 326, 0, 284, 0, 0, 280, 281,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 324, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 215, 216, 217,
	218, 219, 220, 221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 212, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 213, 214, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 211, 0, 169, 107,
	195, 175, 302, 315, 325, 321, 322, 319, 320, 318,
	317, 316, 327, 307, 308, 309, 310, 312, 0, 125,
	311, 91, 99, 132, 0, 210, 0, 163, 118, 197,
	154, 0, 0, 92, 0, 0, 273, 0, 0, 0,
	116, 270, 0, 170, 130, 314, 133, 0, 0, 176,
	142, 323, 104, 0, 0, 305, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 271, 292,
	291, 294, 295, 296, 297, 0, 0, 105, 293, 298,
	299, 300, 0, 0, 0, 268, 285, 0, 313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	0, 0, 0, 0, 326, 0, 284, 0, 0, 280,
	281, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 324, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 215, 216,
	217, 218, 219, 220, 221, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 212, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 213, 214,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 211, 0, 169,
	107, 195, 175, 302, 315, 325, 321, 322, 319, 320,
	318, 317, 316, 327, 307, 308, 309, 310, 312, 0,
	125, 311, 91, 99, 132, 0, 210, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 170, 130, 314, 133, 0, 0,
	176, 142, 323, 104, 0, 0, 305, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 271,
	292, 291, 294, 295, 296, 297, 0, 0, 105, 293,
	298, 299, 300, 0, 0, 0, 0, 285, 0, 313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 0, 0, 0, 0, 326, 0, 284, 0, 0,
	280, 281, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 324, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 1805,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 215,
	216, 217, 218, 219, 220, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 212, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 213,
	214, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 211, 0,
	169, 107, 195, 175, 302, 315, 325, 321, 322, 319,
	320, 318, 317, 316, 327, 307, 308, 309, 310, 312,
	0, 125, 311, 91, 99, 132, 0, 210, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 273, 0,
	0, 0, 116, 0, 0, 170, 130, 314, 133, 0,
	0, 176, 142, 323, 104, 0, 0, 305, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	271, 292, 291, 294, 295, 296, 297, 0, 0, 105,
	293, 298, 299, 300, 0, 0, 0, 0, 285, 0,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 0, 0, 0, 0, 326, 0, 284, 0,
	0, 280, 281, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 324,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	215, 216, 217, 218, 219, 220, 221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 212, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	213, 214, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 211,
	0, 169, 107, 195, 175, 302, 315, 325, 321, 322,
	319, 320, 318, 317, 316, 327, 307, 308, 309, 310,
	312, 0, 125, 311, 91, 99, 132, 0, 210, 0,
	163, 118, 197, 154, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 170, 130, 314, 133,
	0, 0, 176, 142, 323, 104, 0, 0, 305, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 271, 292, 291, 294, 295, 296, 297, 0, 0,
	105, 293, 298, 299, 300, 0, 0, 0, 0, 285,
	0, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 0, 0, 0, 0, 326, 0, 284,
	0, 0, 280, 281, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	324, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 168, 155,
	194, 0, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 215, 216, 217, 218, 219, 220, 221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 212, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 213, 214, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	211, 0, 169, 107, 195, 175, 302, 315, 325, 321,
	322, 319, 320, 318, 317, 316, 327, 307, 308, 309,
	310, 312, 0, 125, 311, 91, 99, 132, 0, 210,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 170, 130, 0,
	133, 0, 0, 176, 142, 323, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 563, 562,
	572, 573, 565, 566, 567, 568, 569, 570, 571, 564,
	0, 0, 574, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 215, 216, 217, 218, 219, 220, 221, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 212,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 213, 214, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 211, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 0,
	210, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	551, 0, 0, 0, 0, 116, 0, 0, 170, 130,
	0, 133, 0, 0, 176, 142, 575, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 354, 0, 553, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 548, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 215, 216, 217, 218, 219, 220, 221,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	212, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 213, 214, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 211, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 91, 99, 132,
	0, 210, 0, 163, 118, 197, 154, 0, 0, 92,
	0, 669, 0, 0, 0, 0, 116, 0, 0, 170,
	130, 0, 133, 0, 0, 176, 142, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 671, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 215, 216, 217, 218, 219, 220,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 212, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 213, 214, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 211, 0, 169, 107, 195, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 23, 125, 0, 91, 99,
	132, 0, 210, 0, 163, 118, 197, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	170, 130, 0, 133, 0, 0, 176, 142, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 354, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 215, 216, 217, 218, 219,
	220, 221, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 212, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 213, 214, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 211, 0, 169, 107, 195, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 23, 125, 0, 91,
	99, 132, 0, 210, 0, 163, 118, 197, 154, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 170, 130, 0, 133, 0, 0, 176, 142, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 215, 216, 217, 218,
	219, 220, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 212, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 213, 214, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 211, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 0, 210, 0, 163, 118, 197, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 170, 130, 0, 133, 0, 0, 176, 142,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 354, 0, 0,
	803, 0, 0, 804, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 215, 216, 217,
	218, 219, 220, 221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 212, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 213, 214, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 211, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 91, 99, 132, 0, 210, 0, 163, 118, 197,
	154, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	116, 690, 0, 170, 130, 0, 133, 0, 0, 176,
	142, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 354, 0,
	689, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 215, 216,
	217, 218, 219, 220, 221, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 212, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 213, 214,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 211, 0, 169,
	107, 195, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 0, 210, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 669, 0, 0, 0,
	0, 116, 0, 0, 170, 130, 0, 133, 0, 0,
	176, 142, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 671, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	667, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 215,
	216, 217, 218, 219, 220, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 212, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 213,
	214, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 211, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 0, 210, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 170, 130, 0, 133, 0,
	0, 176, 142, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 1422, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	215, 216, 217, 218, 219, 220, 221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 212, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	213, 214, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 211,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 0, 210, 0,
	163, 118, 197, 154, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 170, 130, 0, 133,
	0, 0, 176, 142, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 168, 155,
	194, 0, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 215, 216, 217, 218, 219, 220, 221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 212, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 213, 214, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	211, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 0, 210,
	0, 163, 118, 197, 0, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 1771, 116, 0, 170, 0, 130,
	0, 133, 0, 0, 176, 142, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 354, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 1313, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 215, 216, 217, 218, 219, 220, 221,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	212, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 213, 214, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 211, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 91, 99, 132,
	0, 210, 0, 163, 118, 197, 154, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 170,
	130, 0, 133, 0, 0, 176, 142, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 215, 216, 217, 218, 219, 220,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 212, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 213, 214, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 211, 0, 169, 107, 195, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 0, 210, 0, 163, 118, 197, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	170, 130, 0, 133, 0, 0, 176, 142, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 671, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 215, 216, 217, 218, 219,
	220, 221, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 212, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 213, 214, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 211, 0, 169, 107, 195, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 91,
	99, 132, 0, 210, 0, 163, 118, 197, 154, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 170, 130, 0, 133, 0, 0, 176, 142, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 354, 0, 553, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 215, 216, 217, 218,
	219, 220, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 212, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 213, 214, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 211, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 0, 210, 0, 163, 118, 197, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 170, 130, 0, 133, 0, 0, 176, 142,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 215, 216, 217,
	218, 219, 220, 221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 212, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 213, 214, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 211, 763, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 91, 99, 132, 0, 210, 0, 163, 118, 197,
	154, 0, 0, 92, 0, 0, 0, 0, 0, 647,
	116, 0, 0, 170, 130, 0, 133, 0, 0, 176,
	142, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 215, 216,
	217, 218, 219, 220, 221, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 212, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 213, 214,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 211, 0, 169,
	107, 195, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 337, 210, 0, 163, 118,
	197, 0, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 0, 133, 0,
	0, 176, 142, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	215, 216, 217, 218, 219, 220, 221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 212, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	213, 214, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 211,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 0, 210, 0,
	163, 118, 197, 154, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 170, 130, 0, 133,
	0, 0, 176, 142, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 168, 155,
	194, 0, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 215, 216, 217, 218, 219, 220, 221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 212, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 213, 214, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	211, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 0, 210,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 170, 130, 0,
	133, 0, 0, 176, 142, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 215, 216, 217, 218, 219, 220, 221, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 212,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 213, 214, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 211, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 0,
	210, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 170, 130,
	0, 133, 0, 0, 176, 142, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 215, 216, 217, 218, 219, 220, 221,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	212, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 213, 214, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 211, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 91, 99, 132,
	0, 210, 0, 163, 118, 197, 154, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 170,
	130, 0, 133, 0, 0, 176, 142, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 215, 216, 217, 218, 219, 220,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 212, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 213, 214, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 211, 0, 169, 107, 195, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 0, 210, 0, 163, 118, 197, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 104,
}

var yyPact = [...]int{
	2392, -1000, -205, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1438, 1497, -1000, -1000, -1000, -1000, -1000, -1000, 1268,
	803, 369, 415, 224, 14405, 410, 2797, 14987, -1000, 192,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1182, -1000, -1000,
	-1000, -1000, -1000, 1428, 1436, 1230, 1413, 1327, -1000, 7710,
	368, 12658, 14114, 5554, -1000, 959, -183, 379, 14696, 365,
	365, 14696, 14696, 365, -1000, -18, 406, 14987, -1000, 14987,
	364, 957, 364, 364, 364, 14987, -1000, 494, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14987, 955, 1362, 353, 4258, 4258, 4258, 4258,
	261, 4258, 19, 1298, -1000, -1000, -1000, -1000, 4258, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 916,
	1364, 8292, 8292, 1438, -1000, 1182, -1000, -1000, -1000, 1351,
	-1000, -1000, 683, 1473, -1000, 9747, 487, -1000, 8292, 59,
	1138, -1000, -1000, 1138, -1000, -1000, 446, -1000, -1000, -1000,
	9165, 9165, 9165, 9165, 9165, 9165, 9165, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1138, 484, -1000, 8001, 1138, 1138, 1138, 1138, 1138,
	1138, 1138, 1138, 8292, 1138, 1138, 1138, 1138, 1138, 1138,
	1138, 1138, 1138, 2152, 1138, 1138, 1138, 1138, 13822, 1172,
	1483, -1000, -1000, -1000, 1404, 10620, 11493, 14987, 1049, -1000,
	1187, 5230, 22, -1000, -1000, -1000, 613, 482, 11202, -1000,
	-1000, -1000, 1359, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1111, -1000, 2572, 403, -1000, -1000, 14987, 1224, 933, 662,
	917, 1290, 469, 14987, -1000, 13531, 4258, 377, 14987, 1395,
	1288, 14987, 908, 905, -1000, 6526, -1000, 4258, 4258, 4258,
	4258, 4258, 4258, 4258, 4258, -1000, -1000, -1000, -1000, -1000,
	-1000, 4258, 4258, -1000, 74, -1000, 14987, -1000, -1000, -1000,
	-1000, 1491, 520, 825, 481, 1189, -1000, 674, 1428, 916,
	1327, 10911, 1312, -1000, -1000, 14987, -1000, 8292, 8292, 899,
	-1000, 13240, -1000, -1000, 4906, 537, 9165, 714, 717, 9165,
	9165, 9165, 9165, 9165, 9165, 9165, 9165, 9165, 9165, 9165,
	9165, 9165, 9165, 9165, 860, 2152, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 903, -1000, 1182, 1276, 1276, 41,
	41, 41, 41, 41, 41, 9456, 7128, 5878, 916, 1101,
	653, 8001, 7710, 7710, 8292, 8292, 15278, 15278, 7710, 1406,
	620, 653, 15278, -1000, 916, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 154, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 7710, 7710, 7710, 7710, 276, 14987, -1000, 15278,
	12658, 12658, 12658, 12658, 12658, -1000, 1324, 1321, -1000, 1310,
	1309, 1317, 14987, -1000, 1092, 10620, 565, 1138, -1000, 12949,
	-1000, -1000, 276, 1149, 12658, 14987, -1000, -1000, 4582, 1187,
	22, 1185, -1000, 8, 64, 6837, 5878, 531, -1000, -1000,
	-1000, -1000, 3610, 968, 1906, -136, 80, -1000, -1000, -1000,
	-1000, 1227, -1000, 1227, 312, 1227, 1227, 1227, -1000, 1227,
	1227, 129, 129, 129, 129, 129, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1262, 1258, -1000, 1227, 1227, 1227, -1000,
	1227, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1251, 324, 1251, 1228, 1228, -1000, -1000, 14696, 1403,
	-51, 897, 4258, 1389, 4258, 14987, 1480, 14987, -1000, -1000,
	-1000, -1000, 2066, 14987, -1000, 14987, -1000, -1000, 14987, 4258,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 628, -1000, -1000, -1000, -1000,
	1334, 8292, 8292, 6202, 8292, -1000, -1000, -1000, 1364, -1000,
	1406, 1429, -1000, 1343, 1342, 7710, -1000, -1000, 537, 600,
	-1000, -1000, 669, -1000, -1000, -1000, -1000, 477, 1138, -1000,
	361, -1000, -1000, -1000, -1000, 714, 9165, 9165, 9165, 335,
	361, 2232, 615, 92, 41, 118, 118, 18, 18, 18,
	18, 18, 17, 17, -1000, -1000, -1000, -1000, 916, -1000,
	-1000, -1000, 916, 7710, 1186, -1000, -1000, -1000, 8292, -1000,
	916, 1063, 1063, 743, 797, 1178, -1000, 471, 1171, 1063,
	7710, 627, -1000, 8292, 916, -1000, -1000, 1063, 916, 1063,
	1063, 1091, 1138, -1000, 1155, -1000, 605, 1483, 1266, 1278,
	1223, -1000, -1000, -1000, -1000, 1318, -1000, 1311, -1000, -1000,
	-1000, -1000, -48, 400, 397, 382, 14696, -1000, 1453, 12658,
	1145, -1000, -1000, 1185, 22, 36, -1000, -1000, -1000, -1000,
	653, 601, -1000, -1000, 895, 1183, 3286, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1257, 729, 14696, 339, 349,
	508, 463, 892, -1000, -1000, -1000, 791, -1000, 14696, 1490,
	-1000, -1000, 334, -1000, 332, 634, 882, 14987, 184, 1253,
	1818, -1000, -224, -1000, 37, -1000, -1000, 867, 129, 129,
	1227, 129, 129, 129, -1000, -1000, 531, 1355, 531, 531,
	531, 531, 876, 876, -68, -68, -1000, -1000, -1000, 865,
	1251, -1000, -1000, -1000, 856, -1000, 1245, 1182, -1000, 5878,
	-1000, -1000, -1000, -1000, -1000, 1399, 1124, -1000, -1000, -1000,
	-1000, 386, -1000, 1267, 1032, 740, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 274, 430, -1000,
	4258, -1000, 637, 14987, 14987, 1331, 653, 653, 470, -1000,
	-1000, 14987, -1000, -1000, -1000, -1000, 1170, -1000, -1000, -1000,
	3934, 7710, -1000, 335, 361, 298, -1000, 9165, 9165, -1000,
	-1000, 1063, 7710, 653, -1000, -1000, -1000, 376, 860, 376,
	9165, 9165, 6202, 9165, 9165, -38, 1159, 616, -1000, 8292,
	782, -1000, -1000, -1000, -1000, -1000, 1277, 15278, 1138, -1000,
	10329, 14696, 1438, 15278, 8292, 8292, -1000, -1000, 8292, 1241,
	-1000, 8292, -1000, -1000, -1000, -1000, 1240, 1138, 1138, 1138,
	1004, -1000, 1438, 1145, -1000, -1000, -1000, 1, 5, -1000,
	8292, -1000, 3610, -1000, 3610, 12367, -1000, 1485, 1424, 313,
	358, -1000, 890, 888, -1000, 885, -1000, 47, -1000, -187,
	93, 48, -1000, -1000, 1138, -1000, 1238, 1398, -1000, 1352,
	855, -1000, 1756, -201, -1000, -1000, -1000, -1000, -1000, -1000,
	1138, 1236, 1235, -1000, 1234, -1000, -1000, -1000, 1096, 531,
	531, 129, 531, 531, 531, -1000, 577, -1000, -1000, -1000,
	-1000, 1055, -1000, 1029, -1000, 165, 164, -1000, 1169, -1000,
	1020, 14987, 14696, -1000, 1160, -1000, 593, 1423, 250, 14987,
	1480, 1480, -1000, 331, -1000, 14696, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14696, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 14987, -1000, -1000, -1000,
	-1000, -1000, 14696, 352, -1000, -1000, 874, 8292, -1000, -1000,
	-1000, 5878, -1000, 1453, 12658, -1000, -1000, 916, -1000, 9165,
	361, 361, -1000, -1000, 916, 1227, 1227, -1000, 1227, 1228,
	-1000, -1000, 1227, 182, 1227, 179, 916, 916, 206, 260,
	-1000, 109, 148, 1138, -32, -1000, 653, 8292, -1000, 1373,
	1078, 1140, -1000, -1000, 7419, 916, 1018, 453, 1004, 1428,
	-1000, 653, 653, 653, 11784, 653, -57, 11784, 11784, 11784,
	10038, 14696, 1428, -1000, -1000, -1000, -1000, 653, 3286, -1000,
	1001, -1000, 1227, 1227, 444, 444, -189, 328, 307, -1000,
	-1000, -1000, -1000, -183, -1000, -1000, 634, -1000, 8292, 11784,
	160, -1000, 1151, 1059, 2420, -1000, 435, 916, -1000, 853,
	-1000, 843, 1035, -1000, -1000, -1000, 531, -1000, -1000, -1000,
	-1000, -1000, 129, 873, 129, 57, 54, 840, -1000, 808,
	1176, 1275, 5878, 3610, 375, 1452, -1000, -1000, 1417, -1000,
	1122, 14696, -1000, -1000, -1000, 1226, -1000, -1000, -1000, -1000,
	1377, 14696, -1000, -1000, 653, 1446, 1150, -1000, 361, -1000,
	-1000, 308, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 9165, 9165, -1000, 9165, 9165, 9165, 916, 870, 653,
	306, -1000, 1138, -1000, -1000, 1137, 14696, 14696, -1000, -1000,
	999, -1000, -1000, 986, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 984, 984, 984, 565, -1000, -1000, 877, 12367, 1390,
	-1000, 723, -1000, -1000, 677, 247, 699, -1000, 14696, -183,
	-1000, 1138, 823, 978, 1276, 1225, 786, -1000, 1023, 153,
	-68, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 531,
	-1000, 531, -1000, -1000, 1014, 981, 12367, 14696, 14987, -1000,
	-1000, 14696, -1000, -1000, -1000, -1000, -1000, 231, 2292, 1220,
	11784, 1138, 356, 1443, 1434, -1000, -1000, 225, 225, 225,
	225, 78, -1000, -1000, 1489, -1000, 1138, -1000, 1182, 451,
	-1000, 14696, -1000, -1000, -57, -1000, -1000, -1000, -48, 1274,
	1050, 180, -1000, 879, 592, 798, 587, 586, 583, 580,
	579, 569, 566, -1000, -1000, -1000, 1487, -1000, -1000, -1000,
	1476, 1204, -1000, 1203, 8292, 255, -1000, 972, -1000, 965,
	941, -1000, -1000, -1000, -1000, -1000, -1000, 975, 1197, 1196,
	1041, -1000, 212, 2292, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1438, 14696, 14696, 14696, 14696, 367, 8874,
	8874, 12367, 971, 273, 303, -1000, 8292, 8292, -1000, -1000,
	-1000, -1000, 916, 215, -81, 15278, 1140, 916, 14696, -1000,
	-1000, -1000, -1000, 14696, -1000, -79, 1050, 14696, -1000, 777,
	-1000, -1000, 747, 776, 747, 747, 747, 747, 747, 444,
	444, 14696, 12367, 823, -1000, -34, -143, 223, -1000, -1000,
	-192, 12367, 12367, -50, 14696, 8292, 2292, -1000, 1428, 1133,
	2413, -1000, -1000, -1000, -1000, 14696, 1470, 1469, 1464, 1456,
	1252, 59, 200, 954, 1224, 952, -1000, 14696, 1194, 653,
	1119, -1000, 1330, -45, -108, 1033, -1000, -1000, 1138, 949,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 634, 634, 944, 940, -1000, -1000, -1000, -1000,
	178, 806, 757, 754, 742, 68, -1000, 1430, 1453, 1193,
	938, 928, -1000, -203, -1000, 653, -1000, 1364, 14696, 209,
	-1000, -1000, 1375, -1000, -1000, -1000, -1000, -1000, 2292, 2292,
	-1000, -51, -1000, 273, 1341, 12367, -1000, 1281, -1000, 14696,
	-1000, 1050, -1000, -1000, 350, 877, 731, -1000, 642, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12075, 877, 11784, 1453,
	877, 8292, -1000, -1000, 2572, 1411, 14696, 2814, -1000, 2017,
	-1000, -1000, 269, 926, -65, 916, -1000, 14987, 1274, -1000,
	-1000, -1000, 443, 1274, 924, 877, -1000, 653, 1182, -1000,
	-1000, -1000, 602, 265, -1000, -84, -1000, 1191, -1000, 5878,
	-1000, -1000, -1000, -1000, 198, 1138, -125, 14696, -1000, 2292,
	8583, -1000, 915, 1982, 225, 916, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1753, 39, 4, 1748, 1746, 1740, 1518, 1515, 1513,
	1510, 1738, 1737, 1736, 1734, 1729, 1728, 1722, 1719, 1717,
	1715, 1714, 1713, 1712, 1711, 1706, 1703, 1702, 595, 1701,
	1698, 1697, 98, 1696, 99, 1695, 1688, 65, 130, 59,
	76, 1447, 1686, 47, 106, 126, 1685, 84, 1684, 1683,
	108, 1681, 97, 1674, 1667, 1647, 1664, 1662, 29, 8,
	25, 44, 1660, 1659, 30, 5, 1651, 1650, 1648, 1645,
	1643, 1642, 83, 15, 22, 31, 41, 1639, 77, 19,
	1638, 71, 1634, 1631, 1630, 1629, 23, 1628, 85, 34,
	17, 12, 1627, 14, 1626, 92, 57, 43, 20, 107,
	90, 1625, 56, 89, 82, 1621, 1619, 864, 1617, 1614,
	1613, 1612, 1610, 1609, 821, 876, 1607, 1600, 1598, 79,
	0, 378, 61, 105, 1596, 67, 1595, 196, 103, 91,
	46, 1594, 49, 315, 66, 1591, 1590, 58, 104, 100,
	102, 101, 1588, 1587, 1583, 1581, 1580, 1234, 53, 168,
	37, 1579, 1574, 1573, 26, 75, 48, 68, 88, 1572,
	1570, 1569, 52, 1567, 16, 27, 2, 81, 1566, 1565,
	1564, 1563, 54, 36, 1562, 32, 112, 6, 3, 11,
	1561, 1559, 1558, 7, 1557, 42, 1556, 10, 1555, 13,
	1554, 1553, 1552, 1551, 1550, 1549, 1547, 1546, 1545, 1544,
	33, 21, 55, 45, 74, 70, 50, 1542, 51, 1541,
	1, 28, 9, 1540, 1536, 1535, 18, 24, 1534, 1533,
	1522, 1601, 791, 1520, 1508, 1506, 1492, 466,
}

var yyR1 = [...]int{
	0, 219, 220, 220, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 223,
	223, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 213, 213, 212, 214, 214, 12, 12, 12, 12,
	12, 207, 207, 207, 207, 207, 13, 13, 210, 210,
	14, 14, 100, 100, 104, 104, 104, 105, 105, 105,
	105, 135, 135, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 205, 205, 205, 206, 206, 206,
	208, 208, 209, 209, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 191, 191, 191, 192, 192, 192, 192,
	192, 192, 194, 194, 195, 195, 125, 125, 189, 189,
	188, 187, 187, 186, 186, 185, 196, 196, 20, 169,
	170, 170, 170, 170, 170, 158, 139, 139, 139, 139,
	139, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 202, 202, 202, 203, 203, 203, 203,
	203, 203, 203, 203, 198, 198, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	148, 148, 148, 148, 148, 148, 197, 197, 193, 193,
	193, 193, 193, 193, 143, 143, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 142, 142, 142, 142,
	142, 142, 142, 142, 144, 144, 144, 144, 144, 144,
	144, 144, 140, 140, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 146, 146, 146,
	146, 146, 146, 146, 146, 157, 157, 147, 147, 155,
	155, 156, 156, 156, 154, 154, 154, 151, 151, 152,
	152, 153, 153, 153, 149, 149, 149, 150, 150, 150,
	160, 178, 178, 178, 180, 180, 181, 181, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 168,
	168, 204, 204, 177, 177, 177, 174, 174, 174, 174,
	174, 174, 174, 174, 167, 167, 176, 176, 175, 175,
	162, 162, 162, 162, 162, 163, 164, 164, 164, 164,
	161, 200, 200, 200, 201, 201, 165, 165, 166, 166,
	171, 171, 171, 172, 172, 172, 173, 173, 173, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 224, 224, 225, 225, 225, 225, 225, 225,
	225, 184, 182, 182, 183, 183, 17, 18, 18, 18,
	18, 18, 19, 19, 21, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 112, 112,
	109, 109, 110, 110, 111, 111, 111, 113, 113, 113,
	136, 136, 136, 23, 23, 25, 25, 26, 27, 24,
	24, 24, 24, 24, 226, 28, 29, 29, 30, 30,
	30, 34, 34, 34, 32, 32, 33, 33, 39, 39,
	38, 38, 40, 40, 40, 40, 124, 124, 124, 123,
	123, 42, 42, 43, 43, 44, 44, 45, 45, 45,
	216, 216, 215, 215, 217, 217, 217, 217, 217, 217,
	57, 57, 93, 93, 93, 96, 96, 46, 46, 46,
	46, 47, 47, 48, 48, 49, 49, 131, 131, 130,
	130, 130, 129, 129, 51, 51, 51, 53, 52, 52,
	52, 52, 54, 54, 56, 56, 55, 55, 58, 58,
	58, 58, 59, 59, 94, 94, 41, 41, 41, 41,
	41, 41, 41, 108, 108, 61, 61, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 71, 71, 71,
	71, 71, 71, 62, 62, 62, 62, 62, 62, 62,
	37, 37, 72, 72, 72, 78, 73, 73, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 69, 69, 69, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 227, 227,
	70, 70, 70, 70, 35, 35, 35, 35, 35, 134,
	134, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 138, 138, 138, 138, 138,
	138, 138, 82, 82, 36, 36, 80, 80, 81, 83,
	83, 79, 79, 79, 218, 64, 64, 64, 64, 64,
	64, 64, 64, 66, 66, 66, 84, 84, 85, 85,
	86, 86, 87, 87, 88, 89, 89, 89, 90, 90,
	90, 90, 91, 91, 91, 63, 63, 63, 63, 63,
	63, 92, 92, 92, 92, 97, 97, 74, 74, 76,
	76, 75, 77, 98, 98, 102, 99, 99, 103, 103,
	103, 103, 103, 101, 101, 101, 126, 126, 126, 106,
	106, 114, 114, 115, 115, 107, 107, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 117, 117, 117,
	118, 118, 121, 121, 122, 122, 127, 127, 128, 128,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 221, 222, 132, 133,
	133, 133,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	5, 9, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 14, 13, 14, 6, 5, 5,
	5, 11, 11, 9, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 0, 2, 2, 0, 2, 2, 2,
	2, 2, 0, 2, 0, 3, 0, 1, 0, 2,
	1, 0, 2, 1, 3, 3, 0, 2, 4, 4,
	1, 3, 3, 3, 3, 2, 3, 1, 1, 1,
	1, 2, 2, 3, 2, 4, 4, 2, 2, 3,
	2, 3, 2, 7, 8, 3, 3, 6, 8, 5,
	8, 7, 4, 2, 4, 6, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 2, 0, 4, 3, 4,
	3, 3, 3, 3, 3, 3, 3, 2, 4, 6,
	2, 3, 2, 3, 1, 3, 0, 2, 0, 3,
	3, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 2,
	2, 2, 1, 1, 1, 3, 3, 2, 1, 2,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 1,
	5, 2, 2, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 3, 3, 0, 1, 0,
	1, 0, 2, 1, 0, 3, 3, 0, 1, 2,
	6, 0, 1, 4, 1, 2, 1, 3, 2, 3,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 1, 1, 0, 2, 5, 2, 3, 3, 2,
	3, 2, 3, 4, 1, 1, 1, 3, 3, 2,
	2, 5, 5, 8, 8, 13, 1, 1, 2, 2,
	10, 0, 1, 1, 0, 3, 0, 1, 1, 3,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	11, 13, 7, 7, 7, 12, 7, 7, 7, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 3, 3, 3, 3, 4, 3, 6,
	4, 2, 4, 2, 2, 2, 2, 3, 1, 1,
	0, 1, 0, 1, 0, 2, 2, 0, 2, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	0, 4, 1, 3, 1, 1, 1, 1, 1, 1,
	4, 8, 1, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 0, 2, 0, 4, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 3, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 6,
	8, 8, 6, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 1, 2,
	1, 2, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 5, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}

var yyChk = [...]int{
	-1000, -219, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	113, 114, 116, 115, 145, 117, 138, 49, 186, 187,
	189, 190, 26, 139, 140, 143, 144, -221, 8, 291,
	53, -220, 332, -86, 15, -30, 5, -28, -226, -28,
	-28, -28, -28, -28, -169, 53, -125, -196, 153, 283,
	119, 134, 152, 120, 136, 71, -107, 122, 124, 120,
	120, 121, 122, 283, 119, 120, -55, -127, 56, -120,
	160, 300, 21, 186, 199, 200, 191, 232, 220, 301,
	158, 217, 221, 269, 331, 65, 189, 278, 128, 164,
	141, 212, 215, 214, 206, 203, 28, 238, 307, 205,
	131, 239, 243, 249, 270, 298, 196, 197, 272, 236,
	32, 133, 302, 34, 149, 273, 241, 235, 230, 234,
	195, 229, 38, 209, 245, 244, 246, 268, 223, 159,
	248, 225, 207, 224, 18, 144, 147, 240, 242, 204,
	161, 126, 151, 306, 274, 202, 148, 162, 143, 277,
	322, 157, 190, 271, 198, 280, 37, 254, 216, 193,
	208, 194, 130, 187, 155, 227, 150, 210, 211, 233,
	192, 228, 188, 152, 145, 279, 255, 308, 226, 222,
	218, 219, 156, 122, 153, 154, 261, 262, 263, 264,
	304, 275, 213, 256, 257, 166, 167, 168, 169, 170,
	171, 172, 120, 107, 221, 113, 259, 121, 32, 151,
	-136, 120, -109, 154, 261, 262, 263, 264, 56, 271,
	270, 265, -127, 188, -132, -132, -132, -132, -132, -2,
	-90, 17, 16, -5, -3, -221, 6, 21, 22, -34,
	39, 40, -29, -40, 98, -41, -127, -60, 73, -65,
	29, 56, -120, 24, -64, -61, -79, -218, -77, -78,
	107, 108, 96, 97, 104, 74, 109, -69, -67, -68,
	-70, 58, 57, 66, 59, 60, 61, 62, 67, 68,
	69, -121, 281, -75, -221, 43, 44, 292, 293, 294,
	295, 299, 296, 76, 33, 282, 290, 289, 288, 286,
	287, 284, 285, 330, 125, 283, 102, 291, -107, -43,
	-44, -45, -46, -57, -78, -221, -55, 11, -50, -55,
	-99, -135, 188, -103, 271, 270, -122, 281, -101, -121,
	-119, 269, 221, 268, 56, -120, 118, 174, 311, 72,
	23, 25, 252, 258, 173, 75, 107, 16, 76, 180,
	320, 321, 106, 292, 113, 47, 284, 285, 282, 178,
	294, 295, 283, 259, 185, 20, 29, 10, 26, 139,
	22, 100, 115, 175, 79, 80, 142, 24, 140, 69,
	181, 183, 19, 50, 132, 11, 310, 13, 14, 324,
	312, 125, 124, 91, 323, 121, 45, 8, 109, 27,
	88, 41, 137, 184, 43, 89, 17, 286, 287, 31,
	299, 146, 102, 48, 35, 325, 73, 326, 67, 51,
	276, 179, 71, 15, 46, 327, 134, 182, 90, 116,
	291, 44, 176, 328, 119, 177, 6, 297, 30, 138,
	42, 120, 260, 78, 123, 68, 5, 136, 9, 49,
	52, 288, 289, 290, 33, 77, 12, 135, 303, 70,
	-170, -158, 56, -200, 320, 321, 122, -121, -115, 125,
	-115, -121, -121, -115, 291, 120, -55, -55, -114, 125,
	56, -114, -114, -114, -55, 110, -55, 56, 30, 283,
	56, 151, 120, 152, 122, -133, -221, -122, -133, -133,
	-133, 155, 156, -133, -110, 266, 51, -133, -222, 55,
	-91, 19, 31, -41, -127, -87, -88, -41, -86, -2,
	-28, 35, -32, 22, 64, 11, -124, 72, 71, 88,
	-123, 23, -121, 58, 110, -41, -62, 91, 73, 89,
	90, 75, 93, 92, 103, 96, 97, 98, 99, 100,
	101, 102, 94, 95, 106, 330, 81, 82, 83, 84,
	85, 86, 87, -108, -221, -78, -221, 111, 112, -65,
	-65, -65, -65, -65, -65, -65, -221, 110, -2, -73,
	-41, -221, -221, -221, -221, -221, -221, -221, -221, -221,
	-82, -41, -221, -227, -221, -227, -227, -227, -227, -227,
	-227, -227, -138, 107, 221, 141, 212, -141, -140, 227,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
	220, 301, -221, -221, -221, -221, -56, 27, -55, 30,
	54, -51, -53, -52, -54, 41, 45, 47, 42, 43,
	44, 48, -131, 23, -43, -221, -130, 147, -129, 23,
	-127, 58, -55, -50, -223, 54, 11, 52, 54, -99,
	188, -100, -104, 272, 274, 81, 110, -126, -121, 58,
	29, 30, 55, 54, -159, -139, -143, -140, -145, -144,
	-146, -141, -142, 217, 221, 218, 223, 224, 225, 107,
	222, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	236, 237, 226, 238, 30, 141, 210, 211, 212, 215,
	214, 216, 213, 239, 240, 241, 242, 243, 244, 245,
	246, 202, 203, 205, 206, 207, 209, 208, 121, -55,
	-189, 52, 56, 73, 56, 51, -205, 51, 19, 173,
	174, -55, -55, 276, -133, 123, -55, 24, 51, -55,
	56, 56, -128, -127, -119, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -112, 260, 267, -55, 9,
	91, 54, 18, 110, 54, -89, 25, 26, -90, -222,
	-34, -66, -121, 59, 62, -33, 42, -55, -41, -41,
	-71, 67, 73, 68, 69, -123, 98, -128, -122, -119,
	-65, -72, -75, -78, 63, 91, 89, 90, 75, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -134, 56, 58, -138, 56, -64,
	-64, -121, -39, 22, -38, -40, -122, -222, 54, -222,
	-2, -38, -38, -41, -41, -79, -121, -127, -79, -38,
	-32, -80, -81, 77, -79, -222, 219, -38, -39, -38,
	-38, -95, 147, -55, -98, -102, -79, -44, -45, -45,
	-44, -45, 41, 41, 41, 46, 41, 46, 41, -52,
	-127, -222, -58, 49, 124, 50, -221, -129, -95, 52,
	-43, -55, -103, -100, 54, 273, 275, 276, 51, 70,
	-41, -122, -150, 107, 106, -171, -172, -173, -122, 58,
	59, -158, -160, -162, -161, -174, -163, 128, 126, 130,
	131, 136, -167, 121, 137, 67, 73, -202, 128, 51,
	252, 258, 126, 137, 136, 331, 65, 129, 310, 312,
	29, -153, 333, 247, -151, 255, -147, 53, -147, -147,
	219, -147, -147, -147, -147, -147, -149, 221, -149, -149,
	-149, -149, 53, 53, -147, -147, -147, -147, -155, 53,
	204, -155, -155, -156, 53, -156, -121, 23, -187, 303,
	-188, 56, -133, 24, -133, -55, -208, -206, 8, 9,
	10, -55, -116, 118, 115, 116, -184, 114, 252, 221,
	65, 29, 15, 292, 147, 308, 56, 148, -55, -55,
	-55, -133, -111, 11, 91, 37, -41, -41, -128, -88,
	-91, -106, 19, 11, 33, 33, -38, 67, 68, 69,
	110, -221, -72, -65, -65, -65, -37, 142, 72, -222,
	-222, -38, 54, -41, -222, -222, -222, 54, 52, 23,
	54, 11, 110, 54, 11, -222, -38, -83, -81, 79,
	-41, -222, -222, -222, -222, -222, -63, 30, 33, -2,
	-221, -221, -59, 54, 12, 81, -48, -47, 51, 52,
	-49, 51, -47, 41, 41, -216, 303, 121, 121, 121,
	-96, -121, -59, -43, -59, -104, -105, 277, 274, 280,
	81, 56, 54, -173, 81, 53, -201, 51, 73, -165,
	-121, 137, -167, -167, 56, -167, 56, 56, 67, 19,
	-121, 9, 137, 137, -201, 58, -127, -198, 311, 16,
	53, -203, 53, 58, 59, 60, 67, -148, 66, -61,
	248, 282, 285, 284, 249, 334, -152, 256, 59, -149,
	-149, -147, -149, -149, -149, -150, 30, -150, -150, -150,
	-150, -157, 58, -157, -154, 303, 304, -154, 59, -155,
	59, 51, 52, -2, -186, -185, -122, -191, 23, 51,
	54, -205, -132, -125, -225, 153, 127, 132, 131, 56,
	126, 130, 147, -190, 153, 127, 128, 132, 131, 56,
	121, 137, 126, 130, 147, 136, -117, -118, 123, 23,
	121, 137, 147, 118, -133, -113, 89, 12, -127, -127,
	38, 110, -55, -42, 11, 98, -122, -39, -37, 72,
	-65, -65, -222, -40, -137, 107, 217, 141, 212, 206,
	236, 237, 223, 254, 210, 255, -134, -137, -65, -65,
	-122, -65, -65, 300, -86, 80, -41, 78, -97, 51,
	-98, -74, -76, -75, -221, -2, -92, -121, -96, -86,
	-102, -41, -41, -41, 53, -41, 53, -221, -221, -221,
	-222, 54, -86, -59, 274, 278, 279, -41, -172, -173,
	-176, -175, -121, 137, 10, 9, 19, 132, 126, 56,
	56, 56, -200, 136, 322, -202, 331, -148, -221, 53,
	23, 29, 59, -203, 53, -193, 330, -221, -147, 53,
	-147, 53, 53, 55, -150, -150, -149, -150, -150, -150,
	56, 107, 55, 54, 55, 210, 210, 54, 55, 54,
	-55, -121, 54, 81, -192, 19, 161, 162, -55, -206,
	-208, -224, 121, 137, -132, -121, -132, -121, -55, -132,
	-121, 128, -162, 58, -41, -59, -43, -222, -65, -222,
	-147, -147, -147, -156, -147, 197, -147, 197, -222, -222,
	-222, 54, 19, -222, 54, 19, -221, -36, 297, -41,
	28, -97, 54, -222, -222, -222, 54, 110, -222, -90,
	-93, -121, 137, -215, -217, 324, 325, 326, 327, 328,
	329, -93, -93, -93, -130, -121, -90, 55, 54, -147,
	-147, -164, 157, 158, 30, 159, -164, 322, 137, 137,
	-200, -201, -41, -93, 53, 312, 54, 55, -203, 221,
	211, 250, 227, 236, -222, 55, 55, 55, -150, -149,
	58, -149, 257, 257, 59, 59, 53, 52, 51, -185,
	-173, 123, 21, 6, 8, 9, 10, 19, 23, -121,
	53, 27, -121, -84, 13, -149, 56, -65, -65, -65,
	-65, -65, -222, 58, 137, -76, 33, -2, -221, -121,
	-121, 54, 55, 55, 54, -222, -222, -222, -58, -178,
	-180, 303, -179, 52, 133, 65, 166, 167, 168, 169,
	170, 171, 172, -175, -89, -201, 51, 67, 160, -201,
	51, -165, -121, -200, -221, -222, 55, -64, 53, 59,
	55, 219, -154, -150, -150, 55, 55, -176, -121, -55,
	-166, -121, 175, -209, -211, -7, -9, -8, -11, -10,
	-12, -13, -14, -3, 20, 179, 180, 185, 181, 135,
	125, 53, -93, -221, 126, -85, 14, 16, -222, -222,
	-222, -222, -35, 91, 303, 9, -74, -2, 110, -121,
	-217, -216, -177, 51, -179, 303, 53, 305, 56, -168,
	81, 58, 81, 81, 81, 81, 81, 81, 81, 9,
	10, 53, 53, -41, -197, 159, 55, -199, 55, 55,
	55, 53, 53, -194, 54, 52, 176, -211, -86, -213,
	-121, -212, -121, -121, -121, -207, 35, 182, 183, 184,
	-60, -65, -60, -176, 55, -182, -183, 147, 137, -41,
	-73, -222, 301, 48, 306, -98, -222, -121, -121, -181,
	-179, -121, 59, -204, 51, 70, 59, -204, -204, -204,
	-204, -204, -164, -164, -166, -176, -222, 298, 309, 55,
	187, 314, 315, 146, 316, 159, 317, 318, -94, 323,
	-176, -176, -195, 303, -121, -41, -211, -90, 54, -214,
	-139, 177, -121, 11, 11, 11, 11, -211, 186, 186,
	55, -189, -222, 54, -121, 53, 38, 302, 307, -221,
	55, 54, -201, -201, 55, 55, 303, 59, 16, 59,
	59, 59, 59, 315, 146, 317, 16, -59, 53, 55,
	55, 331, -91, -212, -121, 178, 27, -210, -211, -210,
	-187, -183, 33, -176, 38, -121, -179, 129, -178, 59,
	59, 319, -127, -178, -93, -59, -178, -41, 19, -121,
	80, -211, 80, 149, 55, 303, -222, -55, -177, 110,
	-177, 55, -178, -2, 79, 150, 306, 53, -122, 186,
	-221, 307, -166, -210, -65, 146, 55, 80, -222, -222,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 720, 0, 464, 464, 464, 464, 464, 464, 0,
	-2, 775, 0, 0, 0, 0, -2, 454, 455, 0,
	457, 458, 1058, 1058, 1058, 1058, 1058, 0, 33, 34,
	1056, 1, 3, 728, 0, 0, 468, 471, 466, 0,
	775, 0, 0, 0, 83, 0, 351, 0, 0, 773,
	773, 0, 0, 773, 127, 0, 0, 0, 776, 0,
	771, 0, 771, 771, 771, 0, 413, 546, 796, 797,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 0, 0, 0, 0, 1059, 1059, 1059, 1059,
	0, 1059, 442, 431, 433, 434, 435, 436, 1059, 451,
	452, 441, 453, 456, 459, 460, 461, 462, 463, 27,
	732, 0, 0, 720, 29, 0, 464, 469, 470, 474,
	472, 473, 465, 0, 482, 486, 0, 556, 0, 561,
	563, -2, -2, 0, 598, 599, 600, 601, 602, 603,
	0, 0, 0, 0, 0, 0, 0, 627, 628, 629,
	630, 705, 706, 707, 708, 709, 710, 711, 712, 565,
	566, 701, 0, 752, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 692, 0, 658, 658, 658, 658, 658,
	658, 658, 658, 0, 0, 0, 0, 0, 0, 0,
	493, 495, 496, 497, 527, 0, 529, 0, 0, 41,
	45, 0, 1026, 756, -2, -2, 0, 0, 0, 794,
	795, -2, 936, -2, 792, 793, 800, 801, 802, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	0, 140, 0, 0, 352, 353, 0, 128, 0, 0,
	0, 0, 0, 0, 137, 0, 1059, 0, 0, 0,
	0, 0, 0, 0, 412, 0, 414, 1059, 1059, 1059,
	1059, 1059, 1059, 1059, 1059, 423, 1060, 1061, 424, 425,
	426, 1059, 1059, 428, 0, 443, 0, 437, 28, 1057,
	22, 0, 0, 729, 0, 721, 722, 725, 728, 27,
	471, 0, 476, 475, 467, 0, 483, 0, 0, 0,
	487, 0, 489, 490, 0, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 584, 585, 586,
	587, 588, 589, 562, 0, 576, 0, 0, 0, 619,
	620, 621, 622, 623, 624, 0, 478, 0, 27, 0,
	596, 0, 0, 0, 0, 0, 0, 0, 0, 474,
	0, 693, 0, 649, 0, 650, 651, 652, 653, 654,
	655, 656, 657, 685, 0, 687, 688, 689, 690, 691,
	216, 217, 218, 219, 220, 221, 222, 223, 224, 225,
	242, 243, 0, 478, 0, 0, 43, 0, 545, 0,
	0, 0, 0, 0, 0, 534, 0, 0, 537, 0,
	0, 0, 0, 528, 0, 0, 548, 990, 530, 0,
	532, 533, -2, 0, 0, 0, 39, 40, 0, 46,
	1026, 48, 72, 0, 0, 0, 0, 297, 766, 767,
	768, 764, 360, 0, 145, 291, 287, 147, 148, 149,
	150, 277, 215, 277, 277, 277, 277, 277, 249, 277,
	277, 294, 294, 294, 294, 294, 258, 259, 260, 261,
	262, 263, 264, 0, 0, 234, 277, 277, 277, 238,
	277, 240, 241, 267, 268, 269, 270, 271, 272, 273,
	274, 279, 279, 279, 281, 281, 232, 233, 0, 0,
	131, 0, 1059, 0, 1059, 0, 0, 0, 94, 95,
	96, 138, 0, 0, 379, 0, 407, 772, 0, 1059,
	410, 411, 547, 798, 799, 415, 416, 417, 418, 419,
	420, 421, 422, 427, 430, 444, 438, 439, 432, 733,
	0, 0, 0, 0, 0, 724, 726, 727, 732, 30,
	474, 0, 713, 0, 0, 0, 477, 25, 557, 558,
	560, 577, 0, 579, 581, 488, 484, 0, 702, -2,
	567, 568, 592, 593, 594, 0, 0, 0, 0, 590,
	572, 0, 604, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 618, 669, 670, 626, 0, 616,
	617, 625, 0, 0, 479, 480, 704, 595, 0, 751,
	27, 0, 0, 0, 0, 0, 701, 0, 0, 0,
	0, 699, 696, 0, 0, 659, 686, 0, 0, 0,
	0, 0, 0, 544, 552, 753, 0, 494, 523, 525,
	0, 520, 535, 536, 538, 0, 540, 0, 542, 543,
	498, 499, 500, 0, 0, 0, 0, 531, 552, 0,
	552, 42, 757, 47, 0, 0, 75, 76, 758, 759,
	760, 0, 762, 298, 0, 139, 361, 363, 366, 367,
	368, 141, 142, 143, 144, 0, 354, 356, 0, 0,
	0, 0, 0, 334, 335, 152, 0, 154, 0, 0,
	157, 158, 0, 160, 162, 354, 0, 0, 0, 0,
	0, 151, 0, 293, 289, 288, 214, 0, 294, 294,
	277, 294, 294, 294, 251, 252, 297, 0, 297, 297,
	297, 297, 0, 0, 284, 284, 237, 239, 226, 0,
	279, 228, 229, 230, 0, 231, 0, 0, 88, 0,
	129, 130, 89, 774, 90, 113, 0, 100, 97, 98,
	99, 0, 1058, 126, 0, 787, 380, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 0, 0, 406,
	1059, 409, 447, 0, 0, 0, 730, 731, 0, 723,
	23, 0, 769, 770, 714, 715, 491, 578, 580, 582,
	0, 478, 569, 590, 573, 0, 570, 0, 0, 564,
	631, 0, 0, 597, -2, 634, 635, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 720, 0, 697, 0,
	0, 648, 660, 661, 662, 663, 745, 0, 0, -2,
	0, 0, 720, 0, 0, 0, 517, 524, 0, 0,
	518, 0, 519, 539, 541, 510, 0, 0, 0, 0,
	0, 515, 720, 552, 38, 73, 74, 0, 0, 80,
	0, 299, 0, 364, 0, 0, 340, 0, 0, 0,
	357, 326, 0, 0, 329, 0, 331, 351, 153, 0,
	0, 0, 159, 161, 0, 165, 166, 0, 184, 0,
	0, 173, 0, 208, 177, 178, 179, 180, 181, 182,
	0, 277, 277, 204, 0, 292, 146, 290, 0, 297,
	297, 294, 297, 297, 297, 253, 0, 254, 255, 256,
	257, 0, 275, 0, 235, 0, 0, 236, 0, 227,
	0, 0, 0, -2, 132, 133, 0, 116, 0, 0,
	0, 0, 369, 0, 1058, 0, 394, 395, 396, 397,
	398, 399, 400, 1058, 0, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 0, 1058, 788, 789,
	790, 791, 0, 0, 408, 429, 0, 0, 445, 446,
	734, 0, 24, 552, 0, 485, 703, 0, 571, 0,
	591, 574, 632, 481, 0, 277, 277, 674, 277, 281,
	677, 678, 277, 680, 277, 683, 0, 0, 0, 0,
	702, 0, 0, 0, 694, 647, 700, 0, 31, 0,
	745, 735, 747, 749, 0, 27, 0, 741, 0, 728,
	754, 553, 755, 521, 0, 526, 0, 0, 0, 0,
	529, 0, 728, 37, 77, 78, 79, 761, 362, 365,
	0, 336, 277, 277, 0, 0, 0, 0, 0, 327,
	328, 330, 332, 351, 172, 155, 354, 156, 0, 0,
	0, 185, 0, 0, 0, 176, 0, 0, 200, 0,
	202, 0, 0, 278, 244, 245, 297, 246, 247, 248,
	295, 296, 294, 0, 294, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 114, 115, 0, 101,
	0, 0, 392, 393, 373, 0, 374, 376, 377, 378,
	0, 356, 372, 448, 449, 716, 492, 633, 575, 636,
	671, 294, 675, 676, 679, 681, 682, 684, 638, 637,
	639, 0, 0, 642, 0, 0, 0, 0, 0, 698,
	0, 32, 0, 750, -2, 0, 0, 0, 44, 35,
	0, 512, 513, 0, 502, 504, 505, 506, 507, 508,
	509, 0, 0, 0, 548, 516, 36, 301, 0, 725,
	339, 354, 346, 347, 0, 0, 354, 355, 356, 351,
	333, 0, 0, 0, 0, 169, 0, 174, 0, 0,
	284, 211, 212, 213, 183, 201, 203, 205, 250, 297,
	276, 297, 285, 286, 0, 0, 0, 0, 0, 134,
	135, 0, 117, 118, 119, 120, 121, 0, 0, 0,
	0, 0, 357, 718, 0, 672, 673, 0, 0, 0,
	0, 664, 646, 695, 0, 748, 0, -2, 0, 743,
	742, 0, 522, 501, 0, 549, 550, 551, 500, 323,
	302, 0, 304, 0, 319, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 338, 341, 0, 348, 349, 342,
	0, 0, 357, 0, 0, 206, 167, 0, 186, 0,
	0, 209, 210, 265, 266, 280, 283, 0, 0, 0,
	122, 358, 0, 93, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 720, 0, 0, 0, 0, 61, 0,
	0, 0, 0, 0, 0, 26, 0, 0, 640, 641,
	643, 644, 0, 0, 0, 0, 738, 27, 0, 514,
	503, 511, 300, 0, 305, 0, 0, 0, 308, 0,
	320, 310, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 163, 0, 0, 0, 171, 175,
	554, 0, 0, 124, 0, 0, 0, 103, 728, 49,
	54, 51, 56, 57, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 402, 0, 0, 719,
	717, 645, 0, 0, 0, 746, -2, 744, 324, 0,
	306, 311, 309, 312, 321, 322, 313, 314, 315, 316,
	317, 318, 354, 354, 0, 0, 164, 207, 168, 170,
	0, 0, 0, 0, 0, 0, 197, 0, 552, 0,
	0, 0, 91, 0, 359, 123, 92, 732, 0, 0,
	53, 55, 59, 62, 63, 64, 65, 66, 0, 0,
	370, 131, 401, 0, 0, 0, 665, 0, 668, 0,
	303, 0, 343, 344, 0, 301, 0, 188, 0, 190,
	191, 192, 193, 194, 195, 196, 0, 301, 0, 552,
	301, 0, 112, 52, 0, 0, 0, 0, 68, 0,
	375, 403, 0, 0, 666, 0, 307, 0, 323, 187,
	189, 198, 0, 323, 0, 301, 85, 125, 0, 60,
	67, 69, 70, 0, 371, 0, 325, 0, 350, 0,
	84, 555, 86, -2, 0, 0, 0, 0, 199, 0,
	0, 667, 0, 0, 0, 0, 345, 71, 404, 405,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 332,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 333, 3, 334, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:364
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:369
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:370
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:374
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:397
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:405
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:409
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:415
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:422
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:428
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:432
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:438
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:442
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:449
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:461
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:473
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:477
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:483
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:489
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:493
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:497
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:502
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:503
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:507
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:511
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:516
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:520
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:526
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:530
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:534
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:538
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:544
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:548
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:561
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:565
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:571
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:576
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:580
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:586
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:593
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:600
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:607
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:615
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:625
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:629
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:633
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:637
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:641
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:647
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:654
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:664
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:668
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:674
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:682
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:693
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:697
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:703
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:707
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:711
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:717
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:721
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:725
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:729
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:735
		{
			yyVAL.str = SessionStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:739
		{
			yyVAL.str = GlobalStr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:745
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 84:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:750
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 85:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:770
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 86:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:786
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:801
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:809
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:817
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:821
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:825
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 92:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:836
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:846
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:858
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:862
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:866
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:872
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:876
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:880
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:886
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:890
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:896
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:900
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:906
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:917
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:926
		{
			yyVAL.bytes = nil
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:930
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:934
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:939
		{
			yyVAL.bytes = nil
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:943
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:947
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:951
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:955
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:959
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:964
		{
			yyVAL.expr = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:968
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:973
		{
			yyVAL.expr = nil
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:977
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:982
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:986
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:991
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:995
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1001
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1006
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1011
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1017
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1022
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1028
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1033
		{
			yyVAL.bytes = nil
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1037
		{
			yyVAL.bytes = nil
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1043
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1050
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1057
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1062
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1066
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1070
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1074
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1080
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1085
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1096
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1108
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1113
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1118
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1123
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1128
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1133
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1138
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1143
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1148
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1153
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1158
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1163
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[5].expr), NotForReplication: bool(yyDollar[3].boolVal)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[7].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1169
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[7].expr), ConstraintName: yyDollar[3].colIdent, NotForReplication: bool(yyDollar[5].boolVal)}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1174
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1179
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1184
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1191
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1197
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1203
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1209
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1215
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1222
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1226
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 175:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1230
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1236
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1240
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1244
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1248
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1252
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1256
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1260
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1264
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1270
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1274
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1279
		{
			yyVAL.sequence = &Sequence{}
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1283
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1288
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1293
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1298
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1303
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1308
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1313
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1318
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1323
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1328
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1333
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1338
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1343
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1350
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1354
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1358
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1362
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1366
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1370
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1375
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1379
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1384
		{
			yyVAL.bytes = nil
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1395
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1400
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1406
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1410
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1414
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1418
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1422
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1426
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1430
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1434
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1438
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1442
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1448
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1454
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1460
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1466
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1472
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1478
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1484
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1488
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1494
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1498
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1502
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1506
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1510
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1514
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1518
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1522
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1528
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1532
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1538
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1542
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1546
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1550
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1570
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1578
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1590
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1594
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1598
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1602
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 266:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1627
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1661
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1667
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1672
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1677
		{
			yyVAL.optVal = nil
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1681
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1686
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1690
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1698
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1702
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 283:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1708
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1716
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1720
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1724
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1729
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1733
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1738
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1742
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1747
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1751
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1755
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1760
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1764
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1768
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1773
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1777
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1781
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1787
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1792
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1796
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1800
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1806
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1810
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1816
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1820
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1826
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1830
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1835
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1839
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1843
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1847
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1851
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1855
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1859
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1863
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1867
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1873
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1877
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1883
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1887
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1893
		{
			yyVAL.indexPartition = nil
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1897
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 325:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1901
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1907
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1911
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1915
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1919
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1923
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1927
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1931
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1935
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1941
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1945
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1951
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1955
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1961
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1966
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1972
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1977
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1984
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 343:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1991
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 344:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1998
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 345:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2007
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2019
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2023
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2027
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2031
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 350:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2037
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2048
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2052
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2056
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2062
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2066
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2071
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2078
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2082
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2087
		{
			yyVAL.str = ""
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2091
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2095
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2103
		{
			yyVAL.str = yyDollar[1].str
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2107
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2111
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2117
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2121
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2125
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2131
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 370:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2135
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 371:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2149
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 372:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2163
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 373:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2172
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 374:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2176
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 375:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2180
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 376:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2193
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2203
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 378:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2208
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2213
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2217
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 401:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2249
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2255
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2259
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 404:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2265
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 405:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2269
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2275
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2281
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 408:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2289
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2294
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2302
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2306
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2312
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2316
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2321
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2327
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2331
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2335
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2340
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2344
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2348
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2352
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2356
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2360
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2364
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2368
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2372
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2376
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2380
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2384
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2394
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2398
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2402
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2406
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2414
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2418
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2428
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2434
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2438
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2444
		{
			yyVAL.str = ""
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2448
		{
			yyVAL.str = "extended "
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2454
		{
			yyVAL.str = ""
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2458
		{
			yyVAL.str = "full "
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2464
		{
			yyVAL.str = ""
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2468
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2472
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2478
		{
			yyVAL.showFilter = nil
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2482
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2486
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2492
		{
			yyVAL.str = ""
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2496
		{
			yyVAL.str = SessionStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2500
		{
			yyVAL.str = GlobalStr
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2506
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2510
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2516
		{
			yyVAL.statement = &Begin{}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2520
		{
			yyVAL.statement = &Begin{}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2526
		{
			yyVAL.statement = &Commit{}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2532
		{
			yyVAL.statement = &Rollback{}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2538
		{
			yyVAL.statement = &OtherRead{}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2542
		{
			yyVAL.statement = &OtherRead{}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2546
		{
			yyVAL.statement = &OtherRead{}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2550
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2554
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2559
		{
			setAllowComments(yylex, true)
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2563
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2569
		{
			yyVAL.bytes2 = nil
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2573
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2579
		{
			yyVAL.str = UnionStr
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2583
		{
			yyVAL.str = UnionAllStr
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2587
		{
			yyVAL.str = UnionDistinctStr
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2592
		{
			yyVAL.str = ""
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2596
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2600
		{
			yyVAL.str = SQLCacheStr
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2605
		{
			yyVAL.str = ""
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2609
		{
			yyVAL.str = DistinctStr
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2614
		{
			yyVAL.str = ""
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2618
		{
			yyVAL.str = StraightJoinHint
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2623
		{
			yyVAL.selectExprs = nil
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2627
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2633
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2637
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2643
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2647
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2651
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2655
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2660
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2664
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2668
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2675
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2680
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2684
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2690
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2694
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2704
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2708
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2712
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2717
		{
			yyVAL.strs = []string{}
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2721
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2727
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2731
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2737
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2741
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2745
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2749
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2753
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2757
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2763
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 511:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2767
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2773
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2778
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2782
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2788
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2792
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2805
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2809
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2813
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2817
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2823
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2825
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2829
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2831
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2835
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2837
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2840
		{
			yyVAL.empty = struct{}{}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2842
		{
			yyVAL.empty = struct{}{}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2845
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2849
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2853
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2860
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2866
		{
			yyVAL.str = JoinStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2870
		{
			yyVAL.str = JoinStr
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2874
		{
			yyVAL.str = JoinStr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2880
		{
			yyVAL.str = StraightJoinStr
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2886
		{
			yyVAL.str = LeftJoinStr
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2890
		{
			yyVAL.str = LeftJoinStr
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2894
		{
			yyVAL.str = RightJoinStr
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2898
		{
			yyVAL.str = RightJoinStr
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2904
		{
			yyVAL.str = NaturalJoinStr
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2908
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2918
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2922
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2928
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2932
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2937
		{
			yyVAL.indexHints = nil
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2941
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2945
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2949
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2954
		{
			yyVAL.expr = nil
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2958
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2963
		{
			yyVAL.columns = nil
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2967
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2973
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2977
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2981
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2985
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2989
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2993
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2997
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3003
		{
			yyVAL.str = ""
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3007
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3013
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3017
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3023
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3027
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3031
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3035
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3039
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3043
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3047
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3051
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 575:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3055
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3059
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3065
		{
			yyVAL.str = IsNullStr
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3069
		{
			yyVAL.str = IsNotNullStr
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3073
		{
			yyVAL.str = IsTrueStr
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3077
		{
			yyVAL.str = IsNotTrueStr
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3081
		{
			yyVAL.str = IsFalseStr
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3085
		{
			yyVAL.str = IsNotFalseStr
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3091
		{
			yyVAL.str = EqualStr
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3095
		{
			yyVAL.str = LessThanStr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3099
		{
			yyVAL.str = GreaterThanStr
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3103
		{
			yyVAL.str = LessEqualStr
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3107
		{
			yyVAL.str = GreaterEqualStr
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3111
		{
			yyVAL.str = NotEqualStr
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3115
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3120
		{
			yyVAL.expr = nil
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3124
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3130
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3134
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3138
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3144
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3150
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3154
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3160
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3164
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3168
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3172
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3176
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3180
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3184
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3188
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3192
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3196
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3200
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3204
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3208
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3212
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3216
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3220
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3224
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3228
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3232
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3236
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3240
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3244
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3248
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3252
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3260
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3274
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3278
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3282
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3290
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3304
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 632:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3308
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 633:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3312
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3322
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3326
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 636:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3330
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 637:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3334
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 638:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3338
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 639:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3342
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 640:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3346
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 641:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3350
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 642:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3354
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 643:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3358
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 644:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3362
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 645:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3366
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 646:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3370
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 647:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3374
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3378
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3388
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3392
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3396
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3400
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3405
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3410
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3415
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3420
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3424
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3438
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3442
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3446
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3450
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3456
		{
			yyVAL.str = ""
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3460
		{
			yyVAL.str = BooleanModeStr
		}
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3464
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 667:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3468
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3472
		{
			yyVAL.str = QueryExpansionStr
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3478
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3482
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3488
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3492
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3496
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3500
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3504
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3508
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3514
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3518
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3522
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3526
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3530
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3534
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3538
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3542
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3548
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3552
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3556
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3560
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3564
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3568
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3572
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3577
		{
			yyVAL.expr = nil
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3581
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3586
		{
			yyVAL.str = string("")
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3590
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3596
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3600
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 698:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3606
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3611
		{
			yyVAL.expr = nil
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3615
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3621
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3625
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 703:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3629
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3635
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3641
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3645
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3649
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3653
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3657
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3661
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3665
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3669
		{
			yyVAL.expr = &NullVal{}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3675
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3684
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3688
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3693
		{
			yyVAL.exprs = nil
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3697
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3702
		{
			yyVAL.expr = nil
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3706
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3711
		{
			yyVAL.orderBy = nil
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3715
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3721
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3725
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3731
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3736
		{
			yyVAL.str = AscScr
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3740
		{
			yyVAL.str = AscScr
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3744
		{
			yyVAL.str = DescScr
		}
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3749
		{
			yyVAL.limit = nil
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3753
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3757
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3761
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3766
		{
			yyVAL.str = ""
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3770
		{
			yyVAL.str = ForUpdateStr
		}
	case 734:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3774
		{
			yyVAL.str = ShareModeStr
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3787
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3791
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3795
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 738:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3800
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3804
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 740:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3808
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3815
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3819
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3823
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 744:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3827
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3832
		{
			yyVAL.updateExprs = nil
		}
	case 746:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3836
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3842
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3846
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3852
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3856
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3862
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3868
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3878
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3882
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3888
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3894
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3898
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3904
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3908
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3912
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 761:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3917
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3921
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3928
		{
			yyVAL.bytes = []byte("charset")
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3935
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3939
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3943
		{
			yyVAL.expr = &Default{}
		}
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3952
		{
			yyVAL.byt = 0
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3954
		{
			yyVAL.byt = 1
		}
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3957
		{
			yyVAL.empty = struct{}{}
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3959
		{
			yyVAL.empty = struct{}{}
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3962
		{
			yyVAL.str = ""
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3964
		{
			yyVAL.str = IgnoreStr
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3968
		{
			yyVAL.empty = struct{}{}
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3970
		{
			yyVAL.empty = struct{}{}
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3972
		{
			yyVAL.empty = struct{}{}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3974
		{
			yyVAL.empty = struct{}{}
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3976
		{
			yyVAL.empty = struct{}{}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3978
		{
			yyVAL.empty = struct{}{}
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3980
		{
			yyVAL.empty = struct{}{}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3982
		{
			yyVAL.empty = struct{}{}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3984
		{
			yyVAL.empty = struct{}{}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3986
		{
			yyVAL.empty = struct{}{}
		}
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3989
		{
			yyVAL.empty = struct{}{}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3991
		{
			yyVAL.empty = struct{}{}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3993
		{
			yyVAL.empty = struct{}{}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3997
		{
			yyVAL.empty = struct{}{}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3999
		{
			yyVAL.empty = struct{}{}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4003
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4007
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4014
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4020
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4024
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4031
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4313
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4322
		{
			decNesting(yylex)
		}
	case 1058:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4327
		{
			forceEOF(yylex)
		}
	case 1059:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4332
		{
			forceEOF(yylex)
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4336
		{
			forceEOF(yylex)
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4340
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
