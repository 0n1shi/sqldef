// Code generated by goyacc -o sqlparser/parser.go sqlparser/parser.y. DO NOT EDIT.

//line sqlparser/parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sqlparser/parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sqlparser/parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
	triggerBody          []Statement
	declareDefinition    *DeclareDefinition
	declareDefinitions   []*DeclareDefinition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const REFERENCES = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const POLICY = 57459
const UNIQUE = 57460
const KEY = 57461
const SHOW = 57462
const DESCRIBE = 57463
const EXPLAIN = 57464
const DATE = 57465
const ESCAPE = 57466
const REPAIR = 57467
const OPTIMIZE = 57468
const TRUNCATE = 57469
const MAXVALUE = 57470
const PARTITION = 57471
const REORGANIZE = 57472
const LESS = 57473
const THAN = 57474
const PROCEDURE = 57475
const TRIGGER = 57476
const VINDEX = 57477
const VINDEXES = 57478
const STATUS = 57479
const VARIABLES = 57480
const RESTRICT = 57481
const CASCADE = 57482
const NO = 57483
const ACTION = 57484
const PERMISSIVE = 57485
const RESTRICTIVE = 57486
const PUBLIC = 57487
const CURRENT_USER = 57488
const SESSION_USER = 57489
const PAD_INDEX = 57490
const FILLFACTOR = 57491
const IGNORE_DUP_KEY = 57492
const STATISTICS_NORECOMPUTE = 57493
const STATISTICS_INCREMENTAL = 57494
const ALLOW_ROW_LOCKS = 57495
const ALLOW_PAGE_LOCKS = 57496
const BEFORE = 57497
const AFTER = 57498
const EACH = 57499
const ROW = 57500
const BEGIN = 57501
const START = 57502
const TRANSACTION = 57503
const COMMIT = 57504
const ROLLBACK = 57505
const BIT = 57506
const TINYINT = 57507
const SMALLINT = 57508
const SMALLSERIAL = 57509
const MEDIUMINT = 57510
const INT = 57511
const INTEGER = 57512
const SERIAL = 57513
const BIGINT = 57514
const BIGSERIAL = 57515
const INTNUM = 57516
const REAL = 57517
const DOUBLE = 57518
const PRECISION = 57519
const FLOAT_TYPE = 57520
const DECIMAL = 57521
const NUMERIC = 57522
const SMALLMONEY = 57523
const MONEY = 57524
const TIME = 57525
const TIMESTAMP = 57526
const DATETIME = 57527
const YEAR = 57528
const DATETIMEOFFSET = 57529
const DATETIME2 = 57530
const SMALLDATETIME = 57531
const CHAR = 57532
const VARCHAR = 57533
const VARYING = 57534
const BOOL = 57535
const CHARACTER = 57536
const VARBINARY = 57537
const NCHAR = 57538
const NVARCHAR = 57539
const NTEXT = 57540
const UUID = 57541
const TEXT = 57542
const TINYTEXT = 57543
const MEDIUMTEXT = 57544
const LONGTEXT = 57545
const CITEXT = 57546
const BLOB = 57547
const TINYBLOB = 57548
const MEDIUMBLOB = 57549
const LONGBLOB = 57550
const JSON = 57551
const JSONB = 57552
const ENUM = 57553
const GEOMETRY = 57554
const POINT = 57555
const LINESTRING = 57556
const POLYGON = 57557
const GEOMETRYCOLLECTION = 57558
const MULTIPOINT = 57559
const MULTILINESTRING = 57560
const MULTIPOLYGON = 57561
const ARRAY = 57562
const NOW = 57563
const GETDATE = 57564
const BPCHAR = 57565
const NULLX = 57566
const AUTO_INCREMENT = 57567
const APPROXNUM = 57568
const SIGNED = 57569
const UNSIGNED = 57570
const ZEROFILL = 57571
const ZONE = 57572
const AUTOINCREMENT = 57573
const DATABASES = 57574
const TABLES = 57575
const VITESS_KEYSPACES = 57576
const VITESS_SHARDS = 57577
const VITESS_TABLETS = 57578
const VSCHEMA_TABLES = 57579
const EXTENDED = 57580
const FULL = 57581
const PROCESSLIST = 57582
const NAMES = 57583
const CHARSET = 57584
const GLOBAL = 57585
const SESSION = 57586
const ISOLATION = 57587
const LEVEL = 57588
const READ = 57589
const WRITE = 57590
const ONLY = 57591
const REPEATABLE = 57592
const COMMITTED = 57593
const UNCOMMITTED = 57594
const SERIALIZABLE = 57595
const CURRENT_TIMESTAMP = 57596
const DATABASE = 57597
const CURRENT_DATE = 57598
const CURRENT_TIME = 57599
const LOCALTIME = 57600
const LOCALTIMESTAMP = 57601
const UTC_DATE = 57602
const UTC_TIME = 57603
const UTC_TIMESTAMP = 57604
const REPLACE = 57605
const CONVERT = 57606
const CAST = 57607
const SUBSTR = 57608
const SUBSTRING = 57609
const GROUP_CONCAT = 57610
const SEPARATOR = 57611
const INHERIT = 57612
const MATCH = 57613
const AGAINST = 57614
const BOOLEAN = 57615
const LANGUAGE = 57616
const WITH = 57617
const WITHOUT = 57618
const PARSER = 57619
const QUERY = 57620
const EXPANSION = 57621
const UNUSED = 57622
const GENERATED = 57623
const ALWAYS = 57624
const IDENTITY = 57625
const SEQUENCE = 57626
const INCREMENT = 57627
const MINVALUE = 57628
const CACHE = 57629
const CYCLE = 57630
const OWNED = 57631
const NONE = 57632
const CLUSTERED = 57633
const NONCLUSTERED = 57634
const REPLICATION = 57635
const INCLUDE = 57636
const TYPECAST = 57637
const CHECK = 57638

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	122, 109,
	-2, 99,
	-1, 36,
	154, 421,
	155, 421,
	-2, 411,
	-1, 272,
	110, 754,
	-2, 750,
	-1, 273,
	110, 755,
	-2, 751,
	-1, 343,
	81, 949,
	-2, 62,
	-1, 344,
	81, 900,
	-2, 63,
	-1, 349,
	81, 879,
	-2, 721,
	-1, 351,
	81, 923,
	-2, 723,
	-1, 653,
	52, 41,
	54, 41,
	-2, 43,
	-1, 798,
	110, 757,
	-2, 753,
	-1, 1040,
	5, 28,
	-2, 556,
	-1, 1065,
	5, 27,
	-2, 695,
	-1, 1166,
	5, 27,
	-2, 68,
	-1, 1383,
	5, 28,
	-2, 696,
	-1, 1466,
	5, 27,
	-2, 698,
	-1, 1596,
	5, 28,
	-2, 699,
}

const yyPrivate = 57344

const yyLast = 14481

var yyAct = [...]int{
	273, 1545, 1476, 1586, 1479, 1581, 975, 730, 608, 302,
	1603, 675, 1068, 580, 1099, 1280, 1520, 609, 277, 1402,
	862, 1102, 1516, 1157, 1253, 774, 1389, 1281, 465, 880,
	1254, 1168, 953, 276, 904, 89, 899, 1124, 89, 1250,
	645, 983, 499, 970, 251, 647, 910, 245, 924, 1130,
	903, 1226, 831, 348, 53, 863, 1084, 1032, 823, 66,
	736, 1154, 89, 89, 353, 834, 663, 579, 3, 353,
	1073, 270, 353, 353, 833, 335, 800, 512, 89, 965,
	89, 919, 850, 518, 662, 859, 89, 342, 634, 463,
	649, 246, 247, 248, 249, 524, 603, 275, 339, 337,
	1014, 594, 328, 1138, 532, 260, 345, 940, 937, 52,
	86, 1669, 1306, 937, 1628, 250, 1408, 1293, 330, 549,
	550, 551, 552, 553, 546, 264, 279, 556, 556, 1294,
	546, 1415, 329, 556, 1662, 926, 466, 467, 338, 1704,
	1646, 1700, 1594, 1550, 1549, 1158, 1159, 1655, 1691, 933,
	976, 922, 1122, 478, 540, 479, 543, 923, 1632, 1645,
	1593, 486, 558, 559, 560, 561, 562, 563, 564, 1245,
	541, 542, 539, 545, 544, 554, 555, 547, 548, 549,
	550, 551, 552, 553, 546, 939, 1617, 556, 333, 1538,
	545, 544, 554, 555, 547, 548, 549, 550, 551, 552,
	553, 546, 1377, 476, 556, 1373, 511, 1137, 1092, 1275,
	929, 1091, 925, 934, 1093, 893, 301, 1276, 1277, 931,
	930, 894, 895, 664, 89, 665, 507, 765, 353, 353,
	353, 353, 1432, 353, 766, 1431, 492, 1140, 942, 1134,
	353, 1136, 1135, 545, 544, 554, 555, 547, 548, 549,
	550, 551, 552, 553, 546, 954, 1455, 556, 547, 548,
	549, 550, 551, 552, 553, 546, 1507, 353, 556, 1618,
	48, 26, 27, 1370, 511, 854, 1326, 1325, 244, 1366,
	347, 1364, 1525, 1578, 944, 469, 737, 1518, 473, 474,
	466, 467, 1661, 1495, 1663, 1568, 497, 738, 739, 488,
	494, 966, 496, 1699, 84, 80, 81, 82, 1689, 520,
	1587, 545, 544, 554, 555, 547, 548, 549, 550, 551,
	552, 553, 546, 511, 521, 556, 927, 1204, 89, 860,
	493, 495, 928, 557, 557, 89, 89, 89, 1405, 557,
	1588, 353, 1336, 1337, 503, 504, 1463, 353, 1410, 1409,
	57, 1116, 571, 572, 573, 574, 575, 576, 577, 1622,
	545, 544, 554, 555, 547, 548, 549, 550, 551, 552,
	553, 546, 1624, 1115, 556, 59, 60, 61, 62, 63,
	1654, 1341, 935, 345, 936, 1550, 1104, 1201, 1109, 1287,
	1539, 1619, 1296, 557, 1678, 1107, 1342, 932, 920, 1420,
	1350, 567, 1592, 629, 1529, 881, 883, 738, 739, 1419,
	557, 954, 653, 921, 1288, 1422, 481, 596, 597, 598,
	599, 600, 601, 602, 544, 554, 555, 547, 548, 549,
	550, 551, 552, 553, 546, 1121, 654, 556, 1421, 660,
	947, 471, 967, 78, 347, 347, 347, 347, 77, 347,
	78, 1440, 491, 920, 1480, 468, 347, 83, 744, 1083,
	920, 333, 1082, 557, 1403, 1404, 1406, 1482, 921, 89,
	1081, 728, 477, 681, 557, 921, 89, 223, 89, 353,
	882, 89, 677, 534, 89, 1202, 79, 1200, 89, 1205,
	353, 353, 353, 353, 353, 353, 353, 353, 569, 570,
	1203, 1695, 1543, 1386, 353, 353, 1213, 1048, 1026, 89,
	772, 536, 1009, 487, 901, 900, 1620, 1621, 1623, 1625,
	1626, 464, 769, 1320, 353, 500, 501, 502, 89, 505,
	531, 557, 807, 1561, 353, 1481, 509, 530, 529, 1560,
	1559, 753, 49, 1558, 729, 529, 805, 806, 804, 801,
	1557, 740, 1556, 741, 531, 1555, 745, 347, 1553, 748,
	1333, 531, 1209, 668, 1071, 777, 666, 1483, 1484, 1485,
	1486, 1487, 1488, 1489, 1321, 1247, 851, 1497, 353, 797,
	557, 851, 75, 1055, 767, 1101, 920, 733, 751, 1493,
	798, 915, 1010, 914, 1494, 916, 917, 526, 1656, 1101,
	918, 921, 1681, 786, 1045, 1680, 843, 846, 522, 1191,
	799, 1101, 852, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 779, 89,
	70, 73, 89, 89, 89, 89, 89, 796, 794, 1208,
	1551, 1657, 1604, 557, 89, 71, 74, 89, 470, 864,
	838, 89, 530, 529, 826, 1112, 89, 89, 839, 840,
	353, 1605, 72, 68, 847, 1660, 802, 828, 829, 531,
	1659, 775, 776, 353, 1192, 530, 529, 856, 1658, 1194,
	1187, 1188, 1249, 1195, 1190, 1189, 848, 480, 1197, 1193,
	1606, 1602, 531, 1425, 1478, 347, 888, 1141, 855, 1196,
	857, 858, 345, 1111, 861, 1186, 347, 347, 347, 347,
	347, 347, 347, 347, 838, 905, 76, 530, 529, 472,
	347, 347, 475, 1505, 1434, 955, 956, 957, 958, 353,
	1433, 877, 889, 353, 531, 353, 89, 1302, 89, 886,
	781, 885, 1163, 89, 1100, 89, 891, 890, 89, 353,
	534, 866, 867, 347, 869, 1161, 1141, 1374, 333, 333,
	333, 333, 333, 908, 865, 510, 1101, 868, 1554, 972,
	483, 484, 485, 333, 50, 743, 1044, 327, 1043, 790,
	792, 793, 333, 69, 803, 791, 754, 755, 756, 757,
	758, 759, 760, 761, 830, 530, 529, 1023, 1024, 1025,
	762, 763, 968, 969, 844, 844, 824, 1462, 825, 1429,
	844, 982, 531, 987, 801, 797, 1181, 1424, 1004, 1352,
	1005, 1141, 1155, 1006, 1118, 511, 798, 1576, 1708, 1571,
	545, 544, 554, 555, 547, 548, 549, 550, 551, 552,
	553, 546, 1470, 1697, 556, 1399, 1690, 844, 1399, 1668,
	1399, 1667, 1399, 1653, 1570, 1016, 1291, 1015, 1290, 1022,
	771, 545, 544, 554, 555, 547, 548, 549, 550, 551,
	552, 553, 546, 1576, 1652, 556, 347, 1029, 1030, 1031,
	1289, 1028, 1649, 1648, 1512, 353, 1182, 1178, 89, 347,
	1183, 1180, 1179, 1641, 511, 74, 770, 1399, 1638, 1086,
	511, 1088, 1470, 1584, 353, 1110, 1184, 1037, 1399, 1572,
	1033, 1094, 1177, 530, 529, 353, 530, 529, 1470, 1503,
	1470, 511, 1511, 1052, 1470, 1471, 353, 1065, 1087, 978,
	531, 802, 1054, 531, 827, 89, 1399, 1398, 1096, 1078,
	1272, 511, 1385, 511, 1506, 973, 905, 1117, 750, 347,
	749, 347, 292, 291, 294, 295, 296, 297, 734, 1089,
	732, 293, 298, 1329, 1328, 347, 1323, 1324, 1323, 1322,
	1426, 1132, 1038, 511, 631, 511, 1417, 353, 1142, 1143,
	489, 1145, 1146, 1147, 836, 511, 1160, 673, 672, 347,
	1148, 657, 1150, 1151, 1152, 1153, 23, 482, 1105, 1106,
	1108, 464, 1577, 21, 1576, 1251, 1313, 353, 1069, 1069,
	89, 89, 998, 54, 333, 887, 630, 656, 89, 1169,
	1063, 1070, 1156, 1064, 23, 836, 997, 353, 1070, 979,
	1216, 981, 658, 1050, 656, 1047, 1174, 1636, 1381, 23,
	631, 631, 1166, 50, 50, 1007, 1416, 1162, 1173, 1175,
	557, 1465, 1038, 1002, 636, 639, 640, 641, 637, 255,
	638, 642, 996, 631, 1074, 1075, 1332, 353, 353, 1218,
	1069, 50, 731, 1038, 1255, 1327, 1049, 1095, 1046, 892,
	1219, 557, 864, 1038, 1252, 659, 50, 1220, 864, 1436,
	1435, 1242, 773, 1214, 1701, 1666, 353, 1239, 353, 353,
	1274, 1085, 798, 1238, 1225, 1222, 1223, 1246, 785, 1643,
	1574, 993, 990, 991, 1573, 989, 1565, 1564, 1240, 1241,
	347, 1243, 1244, 1261, 1260, 1262, 1526, 1221, 1504, 257,
	943, 1103, 1279, 1449, 1257, 944, 971, 1312, 905, 1292,
	905, 1273, 1113, 1000, 1003, 1311, 1278, 545, 544, 554,
	555, 547, 548, 549, 550, 551, 552, 553, 546, 1132,
	1309, 556, 1295, 1303, 1297, 89, 353, 1299, 636, 639,
	640, 641, 637, 89, 638, 642, 50, 1316, 353, 1314,
	1315, 1266, 1317, 1318, 1319, 1164, 1165, 353, 966, 1123,
	1098, 1074, 1075, 347, 960, 959, 65, 1546, 1437, 89,
	1251, 1172, 266, 1077, 747, 353, 735, 508, 995, 876,
	1080, 640, 641, 874, 353, 1339, 872, 89, 875, 1079,
	871, 873, 870, 347, 1343, 261, 262, 1675, 1354, 1644,
	1212, 1011, 525, 1345, 1673, 1021, 1020, 513, 1149, 994,
	1330, 671, 490, 347, 1301, 523, 1450, 1348, 1338, 514,
	1379, 980, 1351, 1126, 1127, 1128, 1218, 1355, 775, 776,
	746, 1131, 1129, 299, 300, 347, 1447, 353, 1300, 353,
	353, 353, 89, 353, 1347, 1362, 1171, 1227, 999, 353,
	844, 974, 644, 1259, 1085, 525, 844, 778, 258, 259,
	1019, 1446, 1380, 1357, 1001, 1392, 1393, 1394, 1018, 1335,
	353, 1286, 252, 1206, 1664, 1407, 1388, 1532, 253, 54,
	1229, 1412, 347, 1096, 347, 1282, 1531, 1395, 1397, 1453,
	1070, 905, 1411, 1285, 1284, 1442, 1414, 1443, 1444, 1445,
	984, 985, 986, 353, 353, 527, 1563, 1562, 1132, 1540,
	1441, 353, 1418, 333, 1114, 835, 837, 768, 56, 1522,
	7, 353, 58, 1427, 1176, 1428, 1340, 1430, 1523, 6,
	655, 853, 1521, 5, 1438, 51, 1231, 557, 1439, 1,
	1236, 1580, 1230, 1519, 1569, 1169, 905, 1228, 1120, 1567,
	67, 1631, 1331, 1234, 1575, 1305, 353, 353, 1334, 1170,
	1185, 1255, 977, 1454, 1344, 1167, 1232, 1233, 992, 1585,
	353, 303, 47, 1346, 1599, 1477, 912, 902, 462, 64,
	353, 879, 1464, 1552, 1235, 1237, 913, 1492, 911, 909,
	674, 1349, 1496, 938, 1139, 1475, 1491, 1490, 941, 680,
	347, 1498, 678, 1133, 1137, 679, 353, 353, 89, 1500,
	676, 353, 1456, 1457, 1508, 1458, 1459, 1460, 682, 47,
	353, 1513, 1466, 231, 340, 515, 519, 256, 643, 667,
	528, 1199, 1198, 334, 988, 1509, 1134, 1510, 1136, 1135,
	1207, 353, 537, 764, 1008, 1255, 1527, 506, 233, 565,
	1017, 1090, 1547, 1390, 346, 1390, 1390, 1390, 1627, 1396,
	1541, 1258, 517, 1530, 1452, 347, 554, 555, 547, 548,
	549, 550, 551, 552, 553, 546, 581, 1053, 556, 591,
	849, 278, 789, 1515, 290, 592, 1390, 287, 289, 288,
	780, 1062, 538, 268, 332, 627, 353, 353, 635, 633,
	632, 1076, 1072, 331, 1215, 1542, 1579, 1376, 1537, 784,
	25, 55, 1583, 263, 353, 19, 1590, 353, 18, 347,
	347, 353, 17, 20, 1600, 16, 15, 1448, 14, 864,
	29, 1595, 13, 12, 11, 353, 353, 1451, 1607, 1608,
	1609, 1610, 1611, 10, 353, 353, 9, 353, 1524, 8,
	4, 1615, 1612, 1613, 254, 22, 2, 1614, 353, 1629,
	1630, 681, 1639, 1035, 1637, 1635, 0, 1036, 0, 0,
	677, 0, 1468, 1469, 1040, 1041, 1042, 0, 0, 0,
	0, 0, 516, 1051, 0, 0, 1282, 0, 1057, 0,
	0, 1058, 1059, 1060, 1061, 0, 1499, 1650, 1651, 498,
	498, 498, 498, 0, 498, 0, 0, 353, 0, 0,
	1665, 498, 1670, 0, 353, 1672, 1671, 87, 353, 0,
	243, 0, 1282, 1514, 1677, 0, 1679, 1517, 47, 1674,
	0, 0, 0, 0, 0, 89, 1390, 353, 1684, 0,
	0, 1687, 267, 566, 87, 87, 568, 0, 0, 89,
	1686, 1694, 0, 0, 0, 0, 1696, 1544, 0, 1698,
	87, 0, 87, 1685, 0, 0, 353, 0, 87, 0,
	0, 0, 353, 578, 0, 582, 583, 584, 585, 586,
	587, 588, 589, 590, 557, 593, 595, 595, 595, 595,
	595, 595, 595, 595, 1705, 623, 624, 625, 626, 0,
	0, 0, 787, 788, 0, 0, 646, 0, 1702, 0,
	0, 0, 1582, 1282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1693, 0, 0, 844, 0, 1480,
	1597, 0, 0, 1598, 0, 0, 0, 1601, 0, 0,
	0, 0, 1482, 0, 0, 1706, 0, 0, 0, 0,
	0, 1517, 1282, 0, 0, 581, 0, 0, 841, 842,
	1282, 1282, 1304, 1633, 0, 0, 0, 1126, 1127, 1128,
	0, 0, 0, 1224, 1642, 1131, 1129, 299, 300, 0,
	0, 0, 0, 0, 945, 946, 948, 949, 950, 0,
	951, 952, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 961, 962, 963,
	1481, 964, 0, 0, 0, 0, 1371, 0, 0, 0,
	1271, 0, 0, 1582, 0, 0, 0, 0, 0, 0,
	1282, 0, 0, 0, 1676, 0, 0, 0, 0, 898,
	0, 0, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 0,
	498, 0, 0, 1390, 0, 0, 0, 0, 0, 0,
	0, 498, 498, 498, 498, 498, 498, 498, 498, 0,
	0, 0, 0, 0, 0, 498, 498, 0, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 0, 1517, 545,
	544, 554, 555, 547, 548, 549, 550, 551, 552, 553,
	546, 1034, 0, 556, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 87, 651, 87,
	0, 545, 544, 554, 555, 547, 548, 549, 550, 551,
	552, 553, 546, 0, 0, 556, 0, 0, 0, 0,
	47, 0, 0, 1012, 1013, 0, 519, 1133, 1137, 0,
	0, 0, 0, 0, 582, 1356, 0, 0, 0, 0,
	0, 0, 1358, 0, 0, 0, 0, 0, 0, 1548,
	0, 0, 0, 0, 1367, 1368, 1369, 0, 0, 1372,
	1134, 0, 1136, 1135, 0, 0, 0, 0, 0, 0,
	0, 0, 1382, 1383, 1384, 0, 1387, 0, 0, 0,
	0, 0, 0, 334, 334, 334, 334, 334, 0, 1039,
	0, 0, 0, 0, 0, 0, 0, 0, 646, 0,
	884, 0, 0, 0, 1056, 0, 0, 334, 545, 544,
	554, 555, 547, 548, 549, 550, 551, 552, 553, 546,
	0, 0, 556, 1423, 0, 0, 0, 0, 1144, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 87, 0,
	87, 0, 0, 87, 0, 0, 87, 0, 0, 0,
	752, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 498, 0, 498, 0, 0, 557,
	87, 0, 1461, 0, 0, 0, 0, 0, 1125, 752,
	498, 0, 0, 1126, 1127, 1128, 0, 0, 1472, 1473,
	1474, 1131, 1129, 299, 300, 0, 0, 0, 0, 0,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 267, 267, 0, 1027,
	845, 845, 267, 0, 0, 0, 845, 23, 24, 48,
	26, 27, 0, 0, 0, 0, 604, 0, 0, 0,
	0, 0, 1533, 1534, 1535, 1536, 0, 42, 0, 0,
	0, 28, 0, 0, 0, 0, 267, 267, 267, 267,
	0, 87, 0, 845, 87, 87, 87, 87, 87, 606,
	37, 0, 0, 0, 50, 0, 878, 0, 1248, 87,
	0, 1066, 1067, 651, 0, 1308, 1310, 0, 87, 87,
	0, 0, 0, 1263, 1264, 0, 0, 1265, 557, 0,
	1267, 0, 0, 0, 0, 0, 0, 0, 0, 334,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	0, 0, 0, 1591, 0, 0, 0, 0, 1596, 0,
	0, 607, 0, 0, 30, 31, 33, 32, 35, 621,
	605, 0, 0, 0, 0, 0, 610, 0, 0, 0,
	0, 0, 1616, 1133, 1137, 0, 0, 0, 36, 43,
	44, 0, 0, 45, 46, 34, 0, 0, 87, 0,
	87, 1640, 0, 0, 0, 87, 0, 87, 1359, 1360,
	87, 1361, 0, 0, 0, 1363, 1134, 1365, 1136, 1135,
	0, 0, 0, 0, 0, 0, 47, 38, 39, 0,
	40, 41, 0, 0, 0, 752, 704, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 622,
	0, 0, 0, 0, 0, 0, 0, 0, 498, 0,
	0, 0, 1353, 1400, 1401, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1692, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 1378, 0, 0, 0, 0, 0, 0, 581,
	0, 267, 0, 689, 0, 0, 1256, 0, 47, 0,
	0, 0, 1709, 1710, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 1268, 1269, 1270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 705, 0, 0, 0,
	87, 1413, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1307, 0, 611, 612, 613,
	614, 615, 616, 617, 618, 619, 620, 1119, 721, 722,
	0, 723, 724, 725, 727, 726, 706, 707, 708, 712,
	710, 709, 711, 683, 685, 0, 621, 684, 690, 686,
	687, 688, 702, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 703, 713, 714, 715, 716, 717,
	718, 719, 720, 0, 0, 0, 229, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 334, 0,
	239, 0, 1210, 1211, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 0, 0, 0, 0, 0, 622, 1375, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 0, 0, 845, 226, 0, 0,
	0, 0, 845, 0, 232, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 230, 0, 0, 234, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1589, 581, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 0, 87, 0, 0,
	1634, 0, 0, 1256, 0, 87, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 227, 1501, 235, 236, 237, 238, 242,
	0, 0, 0, 0, 241, 240, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1528, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1256, 0, 47,
	0, 0, 1688, 0, 0, 0, 0, 154, 0, 0,
	92, 0, 0, 274, 651, 0, 0, 116, 271, 0,
	0, 130, 313, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 304, 305, 0, 0, 0, 0, 0, 0,
	896, 0, 50, 0, 0, 272, 292, 291, 294, 295,
	296, 297, 0, 0, 105, 293, 298, 299, 300, 897,
	0, 0, 269, 285, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 0, 0, 0,
	0, 325, 0, 284, 0, 0, 280, 281, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 323, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 110,
	1647, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	87, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 1703, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 0, 169, 107, 195, 175,
	314, 324, 320, 321, 318, 319, 317, 316, 315, 326,
	306, 307, 308, 309, 311, 0, 125, 310, 91, 99,
	132, 210, 211, 845, 163, 118, 197, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 322, 104, 0, 0, 0, 0, 0, 0, 450,
	440, 0, 409, 452, 382, 398, 460, 400, 401, 431,
	365, 417, 154, 395, 380, 92, 385, 358, 392, 359,
	383, 411, 116, 381, 442, 420, 130, 458, 133, 425,
	0, 176, 142, 0, 0, 413, 444, 415, 437, 408,
	432, 372, 424, 453, 396, 428, 454, 0, 0, 0,
	352, 0, 906, 907, 0, 0, 0, 0, 0, 105,
	0, 427, 449, 394, 461, 430, 357, 426, 0, 363,
	366, 459, 447, 389, 390, 1097, 0, 0, 0, 0,
	0, 0, 412, 416, 434, 405, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 0, 423, 1683, 0, 0,
	369, 364, 0, 410, 0, 0, 0, 371, 0, 387,
	435, 87, 354, 439, 445, 407, 203, 448, 404, 403,
	161, 0, 108, 0, 182, 120, 397, 131, 433, 451,
	414, 443, 384, 393, 110, 391, 168, 155, 194, 422,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 362, 355, 388, 438,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 360, 0, 177, 196,
	214, 215, 361, 379, 446, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	429, 169, 107, 195, 175, 375, 378, 373, 374, 418,
	419, 455, 456, 457, 436, 370, 0, 376, 377, 0,
	441, 125, 421, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 399, 356, 402, 0, 0, 0, 0, 0,
	0, 0, 367, 368, 170, 406, 0, 104, 450, 440,
	0, 409, 452, 382, 398, 460, 400, 401, 431, 365,
	417, 154, 395, 380, 92, 385, 358, 392, 359, 383,
	411, 116, 381, 442, 420, 130, 458, 133, 425, 0,
	176, 142, 0, 0, 413, 444, 415, 437, 408, 432,
	372, 424, 453, 396, 428, 454, 0, 0, 0, 352,
	0, 906, 907, 0, 0, 0, 0, 0, 105, 0,
	427, 449, 394, 461, 430, 357, 426, 0, 363, 366,
	459, 447, 389, 390, 0, 0, 0, 0, 0, 0,
	0, 412, 416, 434, 405, 0, 0, 0, 0, 0,
	0, 0, 0, 386, 0, 423, 0, 0, 0, 369,
	364, 0, 410, 0, 0, 0, 371, 0, 387, 435,
	0, 354, 439, 445, 407, 203, 448, 404, 403, 161,
	0, 108, 0, 182, 120, 397, 131, 433, 451, 414,
	443, 384, 393, 110, 391, 168, 155, 194, 422, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 362, 355, 388, 438, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 360, 0, 177, 196, 214,
	215, 361, 379, 446, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 429,
	169, 107, 195, 175, 375, 378, 373, 374, 418, 419,
	455, 456, 457, 436, 370, 0, 376, 377, 0, 441,
	125, 421, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 399, 356, 402, 0, 0, 0, 0, 0, 0,
	0, 367, 368, 170, 406, 0, 104, 450, 440, 0,
	409, 452, 382, 398, 460, 400, 401, 431, 365, 417,
	154, 395, 380, 92, 385, 358, 392, 359, 383, 411,
	116, 381, 442, 420, 130, 458, 133, 425, 0, 176,
	142, 0, 0, 413, 444, 415, 437, 408, 432, 372,
	424, 453, 396, 428, 454, 0, 0, 0, 352, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 427,
	449, 394, 461, 430, 357, 426, 0, 363, 366, 459,
	447, 389, 390, 0, 0, 0, 0, 0, 0, 0,
	412, 416, 434, 405, 0, 0, 0, 0, 0, 0,
	1217, 0, 386, 0, 423, 0, 0, 0, 369, 364,
	0, 410, 0, 0, 0, 371, 0, 387, 435, 0,
	354, 439, 445, 407, 203, 448, 404, 403, 161, 0,
	108, 0, 182, 120, 397, 131, 433, 451, 414, 443,
	384, 393, 110, 391, 168, 155, 194, 422, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 362, 355, 388, 438, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 360, 0, 177, 196, 214, 215,
	361, 379, 446, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 429, 169,
	107, 195, 175, 375, 378, 373, 374, 418, 419, 455,
	456, 457, 436, 370, 0, 376, 377, 0, 441, 125,
	421, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	399, 356, 402, 0, 0, 0, 0, 0, 0, 0,
	367, 368, 170, 406, 0, 104, 450, 440, 0, 409,
	452, 382, 398, 460, 400, 401, 431, 365, 417, 154,
	395, 380, 92, 385, 358, 392, 359, 383, 411, 116,
	381, 442, 420, 130, 458, 133, 425, 0, 176, 142,
	0, 0, 413, 444, 415, 437, 408, 432, 372, 424,
	453, 396, 428, 454, 50, 0, 0, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 427, 449,
	394, 461, 430, 357, 426, 0, 363, 366, 459, 447,
	389, 390, 0, 0, 0, 0, 0, 0, 0, 412,
	416, 434, 405, 0, 0, 0, 0, 0, 0, 0,
	0, 386, 0, 423, 0, 0, 0, 369, 364, 0,
	410, 0, 0, 0, 371, 0, 387, 435, 0, 354,
	439, 445, 407, 203, 448, 404, 403, 161, 0, 108,
	0, 182, 120, 397, 131, 433, 451, 414, 443, 384,
	393, 110, 391, 168, 155, 194, 422, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 362, 355, 388, 438, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 360, 0, 177, 196, 214, 215, 361,
	379, 446, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 429, 169, 107,
	195, 175, 375, 378, 373, 374, 418, 419, 455, 456,
	457, 436, 370, 0, 376, 377, 0, 441, 125, 421,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 399,
	356, 402, 0, 0, 0, 0, 0, 0, 0, 367,
	368, 170, 406, 0, 104, 450, 440, 0, 409, 452,
	382, 398, 460, 400, 401, 431, 365, 417, 154, 395,
	380, 92, 385, 358, 392, 359, 383, 411, 116, 381,
	442, 420, 130, 458, 133, 425, 0, 176, 142, 0,
	0, 413, 444, 415, 437, 408, 432, 372, 424, 453,
	396, 428, 454, 0, 0, 0, 272, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 427, 449, 394,
	461, 430, 357, 426, 0, 363, 366, 459, 447, 389,
	390, 0, 0, 0, 0, 0, 0, 0, 412, 416,
	434, 405, 0, 0, 0, 0, 0, 0, 795, 0,
	386, 0, 423, 0, 0, 0, 369, 364, 0, 410,
	0, 0, 0, 371, 0, 387, 435, 0, 354, 439,
	445, 407, 203, 448, 404, 403, 161, 0, 108, 0,
	182, 120, 397, 131, 433, 451, 414, 443, 384, 393,
	110, 391, 168, 155, 194, 422, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 362, 355, 388, 438, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 360, 0, 177, 196, 214, 215, 361, 379,
	446, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 429, 169, 107, 195,
	175, 375, 378, 373, 374, 418, 419, 455, 456, 457,
	436, 370, 0, 376, 377, 0, 441, 125, 421, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 399, 356,
	402, 0, 0, 0, 0, 0, 0, 0, 367, 368,
	170, 406, 0, 104, 450, 440, 0, 409, 452, 382,
	398, 460, 400, 401, 431, 365, 417, 154, 395, 380,
	92, 385, 358, 392, 359, 383, 411, 116, 381, 442,
	420, 130, 458, 133, 425, 0, 176, 142, 0, 0,
	413, 444, 415, 437, 408, 432, 372, 424, 453, 396,
	428, 454, 0, 0, 0, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 427, 449, 394, 461,
	430, 357, 426, 0, 363, 366, 459, 447, 389, 390,
	0, 0, 0, 0, 0, 0, 0, 412, 416, 434,
	405, 0, 0, 0, 0, 0, 0, 0, 0, 386,
	0, 423, 0, 0, 0, 369, 364, 0, 410, 0,
	0, 0, 371, 0, 387, 435, 0, 354, 439, 445,
	407, 203, 448, 404, 403, 161, 0, 108, 0, 182,
	120, 397, 131, 433, 451, 414, 443, 384, 393, 110,
	391, 168, 155, 194, 422, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 362, 355, 388, 438, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 360, 0, 177, 196, 214, 215, 361, 379, 446,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 429, 169, 107, 195, 175,
	375, 378, 373, 374, 418, 419, 455, 456, 457, 436,
	370, 0, 376, 377, 0, 441, 125, 421, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 399, 356, 402,
	0, 0, 0, 0, 0, 0, 0, 367, 368, 170,
	406, 0, 104, 450, 440, 0, 409, 452, 382, 398,
	460, 400, 401, 431, 365, 417, 154, 395, 380, 92,
	385, 358, 392, 359, 383, 411, 116, 381, 442, 420,
	130, 458, 133, 425, 0, 176, 142, 0, 0, 413,
	444, 415, 437, 408, 432, 372, 424, 453, 396, 428,
	454, 0, 0, 0, 272, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 427, 449, 394, 461, 430,
	357, 426, 0, 363, 366, 459, 447, 389, 390, 0,
	0, 0, 0, 0, 0, 0, 412, 416, 434, 405,
	0, 0, 0, 0, 0, 0, 0, 0, 386, 0,
	423, 0, 0, 0, 369, 364, 0, 410, 0, 0,
	0, 371, 0, 387, 435, 0, 354, 439, 445, 407,
	203, 448, 404, 403, 161, 0, 108, 0, 182, 120,
	397, 131, 433, 451, 414, 443, 384, 393, 110, 391,
	168, 155, 194, 422, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	362, 355, 388, 438, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	360, 0, 177, 196, 214, 215, 361, 379, 446, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 429, 169, 107, 195, 175, 375,
	378, 373, 374, 418, 419, 455, 456, 457, 436, 370,
	0, 376, 377, 0, 441, 125, 421, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 399, 356, 402, 0,
	0, 0, 0, 0, 0, 0, 367, 368, 170, 406,
	0, 104, 450, 440, 0, 409, 452, 382, 398, 460,
	400, 401, 431, 365, 417, 154, 395, 380, 92, 385,
	358, 392, 359, 383, 411, 116, 381, 442, 420, 130,
	458, 133, 425, 0, 176, 142, 0, 0, 413, 444,
	415, 437, 408, 432, 372, 424, 453, 396, 428, 454,
	0, 0, 0, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 427, 449, 394, 461, 430, 357,
	426, 0, 363, 366, 459, 447, 389, 390, 0, 0,
	0, 0, 0, 0, 0, 412, 416, 434, 405, 0,
	0, 0, 0, 0, 0, 0, 0, 386, 0, 423,
	0, 0, 0, 369, 364, 0, 410, 0, 0, 0,
	371, 0, 387, 435, 0, 354, 439, 445, 407, 203,
	448, 404, 403, 161, 0, 108, 0, 182, 120, 397,
	131, 433, 451, 414, 443, 384, 393, 110, 391, 168,
	155, 194, 422, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 362,
	355, 388, 438, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 350, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 360,
	0, 177, 196, 214, 215, 361, 379, 446, 206, 207,
	208, 209, 0, 0, 0, 351, 349, 124, 173, 128,
	135, 164, 212, 429, 169, 107, 195, 175, 375, 378,
	373, 374, 418, 419, 455, 456, 457, 436, 370, 0,
	376, 377, 0, 441, 125, 421, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 399, 356, 402, 0, 0,
	0, 0, 0, 0, 0, 367, 368, 170, 406, 0,
	104, 450, 440, 0, 409, 452, 382, 398, 460, 400,
	401, 431, 365, 417, 154, 395, 380, 92, 385, 358,
	392, 359, 383, 411, 116, 381, 442, 420, 130, 458,
	133, 425, 0, 176, 142, 0, 0, 413, 444, 415,
	437, 408, 432, 372, 424, 453, 396, 428, 454, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 427, 449, 394, 461, 430, 357, 426,
	0, 363, 366, 459, 447, 389, 390, 0, 0, 0,
	0, 0, 0, 0, 412, 416, 434, 405, 0, 0,
	0, 0, 0, 0, 0, 0, 386, 0, 423, 0,
	0, 0, 369, 364, 0, 410, 0, 0, 0, 371,
	0, 387, 435, 0, 354, 439, 445, 407, 203, 448,
	404, 403, 161, 0, 108, 0, 182, 120, 397, 131,
	433, 451, 414, 443, 384, 393, 110, 391, 168, 155,
	194, 422, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	388, 438, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 360, 0,
	177, 196, 214, 215, 361, 379, 446, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 429, 169, 107, 195, 175, 375, 378, 373,
	374, 418, 419, 455, 456, 457, 436, 370, 0, 376,
	377, 0, 441, 125, 421, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 399, 356, 402, 0, 0, 0,
	0, 0, 0, 0, 367, 368, 170, 406, 0, 104,
	450, 440, 0, 409, 452, 382, 398, 460, 400, 401,
	431, 365, 417, 154, 395, 380, 92, 385, 358, 392,
	359, 383, 411, 116, 381, 442, 420, 130, 458, 133,
	425, 0, 176, 142, 0, 0, 413, 444, 415, 437,
	408, 432, 372, 424, 453, 396, 428, 454, 0, 0,
	0, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 427, 449, 394, 461, 430, 357, 426, 0,
	363, 366, 459, 447, 389, 390, 0, 0, 0, 0,
	0, 0, 0, 412, 416, 434, 405, 0, 0, 0,
	0, 0, 0, 0, 0, 386, 0, 423, 0, 0,
	0, 369, 364, 0, 410, 0, 0, 0, 371, 0,
	387, 435, 0, 354, 439, 445, 407, 203, 448, 404,
	403, 161, 0, 108, 0, 182, 120, 397, 131, 433,
	451, 414, 443, 384, 393, 110, 391, 168, 155, 194,
	422, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 362, 355, 388,
	438, 93, 183, 661, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 350, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 379, 446, 206, 207, 208, 209,
	0, 0, 0, 351, 349, 124, 173, 128, 135, 164,
	212, 429, 169, 107, 195, 175, 375, 378, 373, 374,
	418, 419, 455, 456, 457, 436, 370, 0, 376, 377,
	0, 441, 125, 421, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 399, 356, 402, 0, 0, 0, 0,
	0, 0, 0, 367, 368, 170, 406, 0, 104, 450,
	440, 0, 409, 452, 382, 398, 460, 400, 401, 431,
	365, 417, 154, 395, 380, 92, 385, 358, 392, 359,
	383, 411, 116, 381, 442, 420, 130, 458, 133, 425,
	0, 176, 142, 0, 0, 413, 444, 415, 437, 408,
	432, 372, 424, 453, 396, 428, 454, 0, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 427, 449, 394, 461, 430, 357, 426, 0, 363,
	366, 459, 447, 389, 390, 0, 0, 0, 0, 0,
	0, 0, 412, 416, 434, 405, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 0, 423, 0, 0, 0,
	369, 364, 0, 410, 0, 0, 0, 371, 0, 387,
	435, 0, 354, 439, 445, 407, 203, 448, 404, 403,
	161, 0, 108, 0, 182, 120, 397, 131, 433, 451,
	414, 443, 384, 393, 110, 391, 168, 155, 194, 422,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 362, 355, 388, 438,
	93, 183, 341, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 350, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 360, 0, 177, 196,
	214, 215, 361, 379, 446, 206, 207, 208, 209, 0,
	0, 0, 351, 349, 344, 343, 128, 135, 164, 212,
	429, 169, 107, 195, 175, 375, 378, 373, 374, 418,
	419, 455, 456, 457, 436, 370, 0, 376, 377, 0,
	441, 125, 421, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 399, 356, 402, 0, 0, 0, 0, 0,
	0, 0, 367, 368, 170, 406, 154, 104, 0, 92,
	832, 0, 274, 0, 0, 0, 116, 271, 0, 0,
	130, 313, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 272, 292, 291, 294, 295, 296,
	297, 0, 0, 105, 293, 298, 299, 300, 0, 0,
	0, 269, 285, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 265, 0, 0, 0,
	325, 0, 284, 0, 0, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 323, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 314,
	324, 320, 321, 318, 319, 317, 316, 315, 326, 306,
	307, 308, 309, 311, 0, 125, 310, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 92, 0, 170, 274,
	322, 104, 0, 116, 271, 0, 0, 130, 313, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 304, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	511, 272, 292, 291, 294, 295, 296, 297, 0, 0,
	105, 293, 298, 299, 300, 0, 0, 0, 269, 285,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 0, 0, 0, 0, 325, 0, 284,
	0, 0, 280, 281, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	323, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 314, 324, 320, 321,
	318, 319, 317, 316, 315, 326, 306, 307, 308, 309,
	311, 0, 125, 310, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 92, 0, 170, 274, 322, 104, 0,
	116, 271, 0, 0, 130, 313, 133, 0, 0, 176,
	142, 0, 0, 0, 0, 304, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 292,
	291, 294, 295, 296, 297, 0, 0, 105, 293, 298,
	299, 300, 0, 0, 0, 269, 285, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	265, 0, 0, 0, 325, 0, 284, 0, 0, 280,
	281, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 323, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 214, 215,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 0, 169,
	107, 195, 175, 314, 324, 320, 321, 318, 319, 317,
	316, 315, 326, 306, 307, 308, 309, 311, 0, 125,
	310, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 154, 322, 104, 92, 0, 0, 274,
	0, 0, 0, 116, 271, 0, 0, 130, 313, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 304, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 272, 292, 291, 294, 295, 296, 297, 0, 0,
	105, 293, 298, 299, 300, 0, 0, 0, 269, 285,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 0, 0, 0, 0, 325, 0, 284,
	0, 0, 280, 281, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	323, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 314, 324, 320, 321,
	318, 319, 317, 316, 315, 326, 306, 307, 308, 309,
	311, 0, 125, 310, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 92, 0, 170, 274, 322, 104, 0,
	116, 271, 0, 0, 130, 313, 133, 0, 0, 176,
	142, 0, 0, 0, 0, 304, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 292,
	291, 294, 295, 296, 297, 0, 0, 105, 293, 298,
	299, 300, 0, 0, 0, 269, 285, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	0, 0, 0, 0, 325, 0, 284, 0, 0, 280,
	281, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 323, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 214, 215,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 0, 169,
	107, 195, 175, 314, 324, 320, 321, 318, 319, 317,
	316, 315, 326, 306, 307, 308, 309, 311, 0, 125,
	310, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	0, 0, 0, 154, 0, 0, 92, 0, 0, 0,
	0, 0, 170, 116, 322, 104, 0, 130, 313, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 304, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 272, 292, 291, 294, 295, 296, 297, 0, 0,
	105, 293, 298, 299, 300, 0, 0, 0, 0, 285,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 0, 0, 0, 0, 325, 0, 284,
	0, 0, 280, 281, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	323, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	1707, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 314, 324, 320, 321,
	318, 319, 317, 316, 315, 326, 306, 307, 308, 309,
	311, 0, 125, 310, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 0, 0, 154, 0, 0, 92,
	0, 0, 0, 0, 0, 170, 116, 322, 104, 0,
	130, 313, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 272, 292, 291, 294, 295, 296,
	297, 0, 0, 105, 293, 298, 299, 300, 0, 0,
	0, 0, 285, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 0, 0, 0, 0,
	325, 0, 284, 0, 0, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 323, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 314,
	324, 320, 321, 318, 319, 317, 316, 315, 326, 306,
	307, 308, 309, 311, 0, 125, 310, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 0, 0, 0, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 170, 116,
	322, 104, 0, 130, 0, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 545, 544, 554, 555, 547, 548, 549,
	550, 551, 552, 553, 546, 0, 0, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	0, 0, 154, 0, 0, 92, 0, 533, 0, 0,
	0, 170, 116, 557, 104, 0, 130, 0, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 535, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 530, 529, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 650, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 652, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	23, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	23, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 0, 782, 0, 0, 783, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 670, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 669, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 650, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 652, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	648, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	1391, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 1682, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	1283, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 652, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 535, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	742, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 628, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 336, 163,
	118, 197, 0, 0, 0, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 170, 116, 0, 104, 0, 130,
	0, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 116, 0, 170, 0, 130,
	104, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 116, 0, 170, 0, 130,
	104, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 116, 0, 170, 0, 130,
	104, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 116, 0, 170, 0, 130,
	104, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 170, 0, 0,
	104,
}

var yyPact = [...]int{
	2201, -1000, -205, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1294, 1343, -1000, -1000, -1000, -1000, -1000, -1000, 1143,
	511, 326, 366, 185, 13327, 357, 2564, 13887, -1000, 100,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1033, -1000, -1000,
	-1000, -1000, -1000, 1285, 1292, 1123, 1267, 1186, -1000, 7132,
	319, 11644, 13047, 6264, -1000, 945, -172, 333, 13607, 316,
	316, 13607, 13607, 316, -1000, -77, 352, 13887, -1000, 13887,
	291, 941, 291, 291, 291, 13887, -1000, 403, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 13887, 924, 1212, 180, 4101, 4101, 4101,
	4101, 190, 4101, -30, 1156, -1000, -1000, -1000, -1000, 4101,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	770, 1218, 7712, 7712, 1294, -1000, 1033, -1000, -1000, -1000,
	1210, -1000, -1000, 533, 1324, -1000, 8844, 401, -1000, 7712,
	81, 991, -1000, -1000, 991, -1000, -1000, 387, -1000, -1000,
	8278, 8278, 8278, 8278, 8278, 8278, 8278, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 991, -1000, 7425, 991, 991, 991, 991, 991, 991,
	991, 991, 7712, 991, 991, 991, 991, 991, 991, 991,
	991, 991, 2109, 991, 991, 991, 991, 12764, 986, 1127,
	-1000, -1000, -1000, 1259, 9684, 10524, 13887, 980, -1000, 1031,
	5955, -39, -1000, -1000, -1000, 485, 10244, -1000, -1000, -1000,
	1211, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 933, -1000, 2356, 350, -1000, -1000, 13887, 1020,
	904, 514, 902, 1155, 235, 13887, -1000, 12484, 4101, 335,
	13887, 1236, 1153, 13887, 894, 892, -1000, 5646, -1000, 4101,
	4101, 4101, 4101, 4101, 4101, 4101, 4101, -1000, -1000, -1000,
	-1000, -1000, -1000, 4101, 4101, -1000, -23, -1000, 13887, -1000,
	-1000, -1000, -1000, 1338, 431, 842, 400, 1038, -1000, 646,
	1285, 770, 1186, 9964, 1066, -1000, -1000, 13887, -1000, 7712,
	7712, 712, -1000, 12204, -1000, -1000, 4410, 442, 8278, 721,
	457, 8278, 8278, 8278, 8278, 8278, 8278, 8278, 8278, 8278,
	8278, 8278, 8278, 8278, 8278, 8278, 750, 2109, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 878, -1000, 1033, 895,
	895, 22, 22, 22, 22, 22, 22, 8561, 6558, 770,
	930, 466, 7425, 7132, 7132, 7712, 7712, 14167, 14167, 7132,
	1263, 499, 466, 14167, -1000, 770, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 66, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7132, 7132, 7132, 7132, 183, 13887, -1000,
	14167, 11644, 11644, 11644, 11644, 11644, -1000, 1181, 1179, -1000,
	1175, 1172, 1168, 13887, -1000, 920, 9684, 356, 991, -1000,
	11924, -1000, -1000, 183, 963, 11644, 13887, -1000, -1000, 5337,
	1031, -39, 1025, -1000, -48, -44, 2859, 408, -1000, -1000,
	-1000, -1000, 3483, 465, 84, -130, -7, -1000, -1000, -1000,
	-1000, 1082, -1000, 1082, 231, 1082, 1082, 1082, -1000, 1082,
	1082, 44, 44, 44, 44, 44, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1142, 1141, -1000, 1082, 1082, 1082, -1000,
	1082, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1135, 248, 1135, 1083, 1083, -1000, -1000, 13607, 1258,
	-142, 873, 4101, 1227, 4101, 13887, 1322, 13887, -1000, -1000,
	-1000, 997, 13887, -1000, 13887, -1000, -1000, 13887, 4101, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 501, -1000, -1000, -1000, -1000, 1194,
	7712, 7712, 5028, 7712, -1000, -1000, -1000, 1218, -1000, 1263,
	1279, -1000, 1203, 1202, 7132, -1000, -1000, 442, 473, -1000,
	-1000, 730, -1000, -1000, -1000, -1000, 398, 991, -1000, 1966,
	-1000, -1000, -1000, -1000, 721, 8278, 8278, 8278, 769, 1966,
	1859, 1402, 331, 22, 21, 21, 27, 27, 27, 27,
	27, 162, 162, -1000, -1000, -1000, -1000, 770, -1000, -1000,
	-1000, 770, 7132, 1029, -1000, -1000, 7712, -1000, 770, 918,
	918, 724, 581, 1024, -1000, 397, 1022, 918, 7132, 504,
	-1000, 7712, 770, -1000, -1000, 918, 770, 918, 918, 990,
	991, -1000, 1016, -1000, 483, 1127, 1140, 1152, 1013, -1000,
	-1000, -1000, -1000, 1178, -1000, 1169, -1000, -1000, -1000, -1000,
	-1000, 349, 341, 338, 13607, -1000, 1308, 11644, 1009, -1000,
	-1000, 1025, -39, -56, -1000, -1000, -1000, -1000, 466, -1000,
	-1000, 855, 1023, 3174, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1137, 693, 13607, 250, 277, 339, 332, 849,
	-1000, -1000, -1000, 636, -1000, 13607, 1335, -1000, -1000, 237,
	-1000, 215, 512, 766, 13887, 136, 1136, 2095, -1000, -213,
	-1000, -9, -1000, -1000, 697, 44, 44, 1082, 44, 44,
	44, -1000, -1000, 408, 1208, 408, 408, 408, 408, 764,
	764, -147, -147, -1000, -1000, -1000, 696, 1135, -1000, -1000,
	-1000, 683, -1000, 1134, 1033, -1000, 4719, -1000, -1000, -1000,
	-1000, -1000, 1253, 1150, -1000, -1000, -1000, 125, -1000, 760,
	553, 364, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 181, 371, -1000, 4101, -1000, 550, 13887,
	13887, 1192, 466, 466, 396, -1000, -1000, 13887, -1000, -1000,
	-1000, -1000, 1019, -1000, -1000, -1000, 3792, 7132, -1000, 769,
	1966, 1055, -1000, 8278, 8278, -1000, -1000, 918, 7132, 466,
	-1000, -1000, -1000, 1170, 750, 1170, 8278, 8278, 5028, 8278,
	8278, -120, 998, 495, -1000, 7712, 604, -1000, -1000, -1000,
	-1000, -1000, 1149, 14167, 991, -1000, 9404, 13607, 1294, 14167,
	7712, 7712, -1000, -1000, 7712, 1128, -1000, 7712, -1000, -1000,
	-1000, 991, 991, 991, 886, -1000, 1294, 1009, -1000, -1000,
	-1000, -55, -51, -1000, -1000, 3483, -1000, 3483, 11364, -1000,
	1314, 1282, 257, 288, -1000, 824, 802, -1000, 800, -1000,
	-18, -1000, -181, 79, -32, -1000, -1000, 991, -1000, 1114,
	1245, -1000, 1215, 678, -1000, 1739, -200, -1000, -1000, -1000,
	-1000, -1000, -1000, 991, 1107, 1092, -1000, 1084, -1000, -1000,
	-1000, 951, 408, 408, 44, 408, 408, 408, -1000, 467,
	-1000, -1000, -1000, -1000, 914, -1000, 912, -1000, 77, 76,
	-1000, 1021, -1000, 909, 13887, 13607, -1000, 1012, -1000, 479,
	1280, 182, 13887, 1322, -1000, 260, -1000, 13607, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 13607, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13887, -1000,
	-1000, -1000, -1000, -1000, 13607, 272, -1000, -1000, 761, 7712,
	-1000, -1000, -1000, 4719, -1000, 1308, 11644, -1000, -1000, 770,
	-1000, 8278, 1966, 1966, -1000, -1000, 770, 1082, 1082, -1000,
	1082, 1083, -1000, -1000, 1082, 94, 1082, 92, 770, 770,
	219, 1827, -1000, 151, 738, 991, -84, -1000, 466, 7712,
	-1000, 1222, 954, 984, -1000, -1000, 6845, 770, 888, 393,
	886, 1285, -1000, 466, 466, 466, 10804, 466, 10804, 10804,
	10804, 9124, 13607, 1285, -1000, -1000, -1000, -1000, 3174, -1000,
	882, -1000, 1082, 1082, 308, 308, -194, 213, 212, -1000,
	-1000, -1000, -1000, -172, -1000, -1000, 512, -1000, 7712, 10804,
	-169, -1000, 992, 921, 1195, -1000, 198, 770, -1000, 762,
	-1000, 638, 915, -1000, -1000, -1000, 408, -1000, -1000, -1000,
	-1000, -1000, 44, 751, 44, -12, -15, 671, -1000, 665,
	1037, 1147, 4719, 3483, 328, 1319, -1000, -1000, 1272, 1243,
	13607, -1000, -1000, -1000, 1080, -1000, -1000, -1000, -1000, 1219,
	13607, -1000, -1000, 466, 1306, 987, -1000, 1966, -1000, -1000,
	200, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	8278, 8278, -1000, 8278, 8278, 8278, 770, 749, 466, 210,
	-1000, 991, -1000, -1000, 1018, 13607, 13607, -1000, -1000, 870,
	-1000, -1000, 866, 866, 866, 356, -1000, -1000, 402, 11364,
	1233, -1000, 538, -1000, -1000, 527, 134, 526, -1000, 13607,
	-172, -1000, 991, 845, 864, 1075, 664, -1000, 889, 57,
	-147, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 408, -1000,
	408, -1000, -1000, 867, 829, 11364, 13607, 13887, -1000, -1000,
	13607, -1000, -1000, -1000, -1000, -1000, 113, 262, 1073, 10804,
	991, 278, 1302, 1291, -1000, -1000, 268, 268, 268, 268,
	98, -1000, -1000, 1330, -1000, 991, -1000, 1033, 392, -1000,
	13607, -1000, -1000, -1000, -1000, -1000, 1146, 1707, 91, -1000,
	584, 477, 710, 474, 471, 469, 462, 459, 458, 452,
	-1000, -1000, -1000, 1328, -1000, -1000, -1000, 1326, 1064, -1000,
	1063, 7712, 137, -1000, -1000, 799, 774, -1000, -1000, -1000,
	-1000, -1000, -1000, 854, 1061, 1057, 950, -1000, 108, 262,
	-1000, -1000, -1000, -1000, -1000, 13607, 11364, 848, 164, 204,
	-1000, 7712, 7712, -1000, -1000, -1000, -1000, 770, 112, -153,
	14167, 984, 770, 13607, -1000, -1000, 13607, -1000, -151, 1707,
	13607, -1000, 632, -1000, -1000, 591, 631, 591, 591, 591,
	591, 591, 308, 308, 13607, 11364, 845, -1000, -101, 214,
	-1000, -1000, -197, 11364, 11364, -134, 13607, 7712, 262, -1000,
	983, -1000, 2356, 843, 1020, 839, -1000, 13607, 1056, 466,
	971, -1000, 1191, -132, -156, 955, -1000, -1000, 991, 828,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 512, 512, 819, 798, -1000, -1000, -1000, 88,
	582, 619, 611, 606, -11, -1000, 1288, 1308, 1042, 796,
	794, -1000, -202, -1000, 466, -1000, 13607, -1000, -1000, -142,
	-1000, 164, 1201, 11364, -1000, 1189, -1000, 13607, -1000, 1707,
	-1000, -1000, 265, 402, 546, -1000, 543, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11084, 402, 10804, 1308, 402, 7712,
	-1000, -1000, -1000, 160, 791, -144, 770, -1000, 13887, 1146,
	-1000, -1000, -1000, 391, 1146, 788, 402, -1000, 466, 154,
	-1000, -154, -1000, 1041, -1000, 4719, -1000, -1000, -1000, 991,
	-157, 13607, -1000, 7995, -1000, 773, 268, 770, -1000, -1000,
	-1000,
}

var yyPgo = [...]int{
	0, 1586, 67, 1003, 1585, 1584, 1580, 1362, 1358, 1349,
	1579, 1578, 1576, 1573, 1564, 1563, 1562, 1560, 1558, 1556,
	1555, 1553, 1552, 1548, 1545, 350, 1543, 1541, 1540, 95,
	1539, 105, 1538, 1537, 57, 74, 52, 65, 1202, 1534,
	40, 132, 118, 1533, 70, 1532, 1531, 99, 1530, 88,
	1529, 1528, 75, 1525, 1524, 29, 12, 1523, 33, 1522,
	1521, 97, 71, 1520, 1519, 1518, 1517, 1514, 1512, 76,
	13, 24, 9, 30, 1511, 126, 18, 1510, 82, 1509,
	1507, 1494, 1493, 54, 1492, 83, 25, 44, 77, 1491,
	26, 1488, 85, 56, 39, 20, 98, 84, 1484, 55,
	87, 66, 1481, 1480, 716, 1479, 1478, 1477, 1474, 1473,
	1470, 687, 648, 1464, 1462, 1461, 53, 0, 216, 42,
	104, 1460, 59, 1459, 1612, 100, 90, 45, 1458, 47,
	296, 58, 1454, 1453, 51, 96, 11, 17, 8, 1448,
	1440, 1435, 1432, 1429, 1130, 49, 32, 36, 1428, 1424,
	1423, 23, 79, 43, 61, 89, 1420, 1419, 1418, 46,
	1416, 19, 21, 22, 81, 1413, 1409, 1408, 1407, 50,
	34, 1406, 27, 15, 1, 2, 4, 1405, 1404, 1399,
	3, 1398, 31, 1395, 6, 1392, 7, 1390, 1389, 1388,
	1385, 1384, 1381, 1380, 1379, 1378, 1374, 28, 14, 48,
	37, 10, 60, 41, 1373, 16, 5, 1371, 1369, 1365,
	1401, 765, 1360, 1356, 1354, 1352, 101,
}

var yyR1 = [...]int{
	0, 208, 209, 209, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 28, 28, 8, 9, 9, 9, 212,
	212, 47, 47, 92, 92, 10, 10, 10, 10, 11,
	207, 207, 206, 97, 97, 101, 101, 101, 102, 102,
	102, 102, 132, 132, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 202, 202, 203, 203, 203,
	204, 204, 205, 205, 205, 205, 188, 188, 188, 189,
	189, 189, 189, 189, 189, 191, 191, 192, 192, 122,
	122, 186, 186, 185, 184, 184, 183, 183, 182, 193,
	193, 17, 166, 167, 167, 167, 167, 167, 155, 136,
	136, 136, 136, 136, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 199, 199, 199, 200, 200,
	200, 200, 200, 200, 200, 200, 195, 195, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 145, 145, 145, 145, 145, 145, 194, 194,
	190, 190, 190, 190, 190, 140, 140, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 139, 139, 139,
	139, 139, 139, 139, 139, 141, 141, 141, 141, 141,
	141, 141, 141, 137, 137, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 143, 143,
	143, 143, 143, 143, 143, 143, 154, 154, 144, 144,
	152, 152, 153, 153, 153, 151, 151, 151, 148, 148,
	149, 149, 150, 150, 150, 146, 146, 146, 147, 147,
	147, 157, 175, 175, 175, 177, 177, 178, 178, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	165, 165, 201, 201, 174, 174, 174, 171, 171, 171,
	171, 171, 171, 171, 171, 164, 164, 173, 173, 172,
	172, 159, 159, 159, 159, 159, 160, 161, 161, 161,
	161, 158, 197, 197, 197, 198, 198, 162, 162, 163,
	163, 168, 168, 168, 169, 169, 169, 170, 170, 170,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 213, 213, 214, 214, 214, 214, 214,
	214, 214, 181, 179, 179, 180, 180, 14, 15, 15,
	15, 15, 15, 16, 16, 18, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 109,
	109, 106, 106, 107, 107, 108, 108, 108, 110, 110,
	110, 133, 133, 133, 20, 20, 22, 22, 23, 24,
	21, 21, 21, 21, 21, 215, 25, 26, 26, 27,
	27, 27, 31, 31, 31, 29, 29, 30, 30, 36,
	36, 35, 35, 37, 37, 37, 37, 121, 121, 121,
	120, 120, 39, 39, 40, 40, 41, 41, 42, 42,
	42, 54, 54, 90, 90, 90, 93, 93, 43, 43,
	43, 43, 44, 44, 45, 45, 46, 46, 128, 128,
	127, 127, 127, 126, 126, 48, 48, 48, 50, 49,
	49, 49, 49, 51, 51, 53, 53, 52, 52, 55,
	55, 55, 55, 56, 56, 91, 91, 38, 38, 38,
	38, 38, 38, 38, 105, 105, 58, 58, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 68, 68,
	68, 68, 68, 68, 59, 59, 59, 59, 59, 59,
	59, 34, 34, 69, 69, 69, 75, 70, 70, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 66, 66, 66, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 216, 216,
	67, 67, 67, 67, 32, 32, 32, 32, 32, 131,
	131, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 135, 135, 135, 135, 135,
	135, 135, 79, 79, 33, 33, 77, 77, 78, 80,
	80, 76, 76, 76, 61, 61, 61, 61, 61, 61,
	61, 61, 63, 63, 63, 81, 81, 82, 82, 83,
	83, 84, 84, 85, 86, 86, 86, 87, 87, 87,
	87, 88, 88, 88, 60, 60, 60, 60, 60, 60,
	89, 89, 89, 89, 94, 94, 71, 71, 73, 73,
	72, 74, 95, 95, 99, 96, 96, 100, 100, 100,
	100, 98, 98, 98, 123, 123, 123, 103, 103, 111,
	111, 112, 112, 104, 104, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 114, 114, 114, 115, 115,
	118, 118, 119, 119, 124, 124, 125, 125, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 210,
	211, 129, 130, 130, 130,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	1, 3, 2, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 14, 13, 14, 6, 5,
	5, 5, 11, 11, 9, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 1, 1, 0, 2, 2, 0,
	2, 2, 2, 2, 2, 0, 2, 0, 3, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 0,
	2, 4, 4, 1, 3, 3, 3, 3, 2, 3,
	1, 1, 1, 1, 2, 2, 3, 2, 4, 4,
	2, 2, 3, 2, 3, 2, 7, 8, 3, 3,
	6, 5, 8, 7, 4, 2, 4, 6, 2, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 0, 4,
	3, 4, 3, 3, 3, 3, 3, 3, 3, 2,
	4, 6, 2, 3, 2, 3, 1, 3, 0, 2,
	0, 3, 3, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 3, 2,
	2, 2, 2, 1, 1, 1, 3, 3, 2, 1,
	2, 1, 1, 1, 1, 4, 4, 4, 4, 4,
	1, 5, 2, 2, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 3, 3, 0, 1,
	0, 1, 0, 2, 1, 0, 3, 3, 0, 1,
	2, 6, 0, 1, 4, 1, 2, 1, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 1, 1, 0, 2, 5, 2, 3, 3,
	2, 3, 2, 3, 4, 1, 1, 1, 3, 3,
	2, 2, 5, 5, 8, 8, 13, 1, 1, 2,
	2, 10, 0, 1, 1, 0, 3, 0, 1, 1,
	3, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	6, 11, 13, 7, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 3,
	6, 4, 2, 4, 2, 2, 2, 2, 3, 1,
	1, 0, 1, 0, 1, 0, 2, 2, 0, 2,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 7, 1, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 0, 4, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 3, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 6,
	8, 8, 6, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 1, 2,
	1, 2, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -208, -1, -2, -6, -7, -8, -9, -10, -12,
	-13, -14, -15, -16, -18, -19, -20, -22, -23, -24,
	-21, -3, -4, 6, 7, -28, 9, 10, 30, -17,
	113, 114, 116, 115, 144, 117, 137, 49, 176, 177,
	179, 180, 26, 138, 139, 142, 143, -210, 8, 280,
	53, -209, 314, -83, 15, -27, 5, -25, -215, -25,
	-25, -25, -25, -25, -166, 53, -122, -193, 152, 272,
	119, 134, 151, 120, 135, 71, -104, 122, 124, 120,
	120, 121, 122, 272, 119, 120, -52, -124, 56, -117,
	159, 289, 21, 176, 189, 190, 181, 222, 210, 290,
	157, 207, 211, 259, 313, 65, 179, 268, 128, 163,
	140, 202, 205, 204, 196, 193, 28, 228, 296, 195,
	131, 229, 233, 239, 260, 287, 186, 187, 262, 226,
	32, 133, 291, 34, 148, 263, 231, 225, 220, 224,
	185, 219, 38, 199, 235, 234, 236, 258, 213, 158,
	238, 215, 197, 214, 18, 143, 146, 230, 232, 194,
	160, 126, 150, 295, 264, 192, 147, 161, 142, 267,
	310, 156, 180, 261, 188, 270, 37, 244, 206, 183,
	198, 184, 130, 177, 154, 217, 149, 200, 201, 223,
	182, 218, 178, 151, 144, 269, 245, 297, 216, 212,
	208, 209, 155, 122, 152, 153, 251, 252, 253, 254,
	292, 293, 265, 203, 246, 247, 165, 166, 167, 168,
	169, 170, 171, 120, 107, 211, 113, 249, 121, 32,
	150, -133, 120, -106, 153, 251, 252, 253, 254, 56,
	261, 260, 255, -124, 178, -129, -129, -129, -129, -129,
	-2, -87, 17, 16, -5, -3, -210, 6, 21, 22,
	-31, 39, 40, -26, -37, 98, -38, -124, -57, 73,
	-62, 29, 56, -117, 24, -61, -58, -76, -74, -75,
	107, 108, 96, 97, 104, 74, 109, -66, -64, -65,
	-67, 58, 57, 66, 59, 60, 61, 62, 67, 68,
	69, -118, -72, -210, 43, 44, 281, 282, 283, 284,
	288, 285, 76, 33, 271, 279, 278, 277, 275, 276,
	273, 274, 312, 125, 272, 102, 280, -104, -40, -41,
	-42, -43, -54, -75, -210, -52, 11, -47, -52, -96,
	-132, 178, -100, 261, 260, -119, -98, -118, -116, 259,
	211, 258, 56, -117, 118, 173, 299, 72, 23, 25,
	242, 248, 172, 75, 107, 16, 76, 308, 309, 106,
	281, 113, 47, 273, 274, 271, 283, 284, 272, 249,
	20, 29, 10, 26, 138, 22, 100, 115, 174, 79,
	80, 141, 24, 139, 69, 19, 50, 132, 11, 298,
	13, 14, 300, 125, 124, 91, 311, 121, 45, 8,
	109, 27, 88, 41, 136, 43, 89, 17, 275, 276,
	31, 288, 145, 102, 48, 35, 73, 67, 51, 266,
	71, 15, 46, 134, 90, 116, 280, 44, 175, 119,
	6, 286, 30, 137, 42, 120, 250, 78, 123, 68,
	5, 135, 9, 49, 52, 277, 278, 279, 33, 77,
	12, 70, -167, -155, 56, -197, 308, 309, 122, -118,
	-112, 125, -112, -118, -118, -112, 280, 120, -52, -52,
	-111, 125, 56, -111, -111, -111, -52, 110, -52, 56,
	30, 272, 56, 150, 120, 151, 122, -130, -210, -119,
	-130, -130, -130, 154, 155, -130, -107, 256, 51, -130,
	-211, 55, -88, 19, 31, -38, -124, -84, -85, -38,
	-83, -2, -25, 35, -29, 22, 64, 11, -121, 72,
	71, 88, -120, 23, -118, 58, 110, -38, -59, 91,
	73, 89, 90, 75, 93, 92, 103, 96, 97, 98,
	99, 100, 101, 102, 94, 95, 106, 312, 81, 82,
	83, 84, 85, 86, 87, -105, -210, -75, -210, 111,
	112, -62, -62, -62, -62, -62, -62, -62, -210, -2,
	-70, -38, -210, -210, -210, -210, -210, -210, -210, -210,
	-210, -79, -38, -210, -216, -210, -216, -216, -216, -216,
	-216, -216, -216, -135, 107, 211, 140, 202, -138, -137,
	217, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 210, 290, -210, -210, -210, -210, -53, 27, -52,
	30, 54, -48, -50, -49, -51, 41, 45, 47, 42,
	43, 44, 48, -128, 23, -40, -210, -127, 146, -126,
	23, -124, 58, -52, -47, -212, 54, 11, 52, 54,
	-96, 178, -97, -101, 262, 264, 81, -123, -118, 58,
	29, 30, 55, 54, -156, -136, -140, -137, -142, -141,
	-143, -138, -139, 207, 211, 208, 213, 214, 215, 107,
	212, 217, 218, 219, 220, 221, 222, 223, 224, 225,
	226, 227, 216, 228, 30, 140, 200, 201, 202, 205,
	204, 206, 203, 229, 230, 231, 232, 233, 234, 235,
	236, 192, 193, 195, 196, 197, 199, 198, 121, -52,
	-186, 52, 56, 73, 56, 51, -202, 51, 172, 173,
	-52, -52, 266, -130, 123, -52, 24, 51, -52, 56,
	56, -125, -124, -116, -130, -130, -130, -130, -130, -130,
	-130, -130, -130, -130, -109, 250, 257, -52, 9, 91,
	54, 18, 110, 54, -86, 25, 26, -87, -211, -31,
	-63, -118, 59, 62, -30, 42, -52, -38, -38, -68,
	67, 73, 68, 69, -120, 98, -125, -119, -116, -62,
	-69, -72, -75, 63, 91, 89, 90, 75, -62, -62,
	-62, -62, -62, -62, -62, -62, -62, -62, -62, -62,
	-62, -62, -62, -131, 56, 58, -135, 56, -61, -61,
	-118, -36, 22, -35, -37, -211, 54, -211, -2, -35,
	-35, -38, -38, -76, -118, -124, -76, -35, -29, -77,
	-78, 77, -76, -211, 209, -35, -36, -35, -35, -92,
	146, -52, -95, -99, -76, -41, -42, -42, -41, -42,
	41, 41, 41, 46, 41, 46, 41, -49, -124, -211,
	-55, 49, 124, 50, -210, -126, -92, 52, -40, -52,
	-100, -97, 54, 263, 265, 266, 51, 70, -38, -147,
	107, 106, -168, -169, -170, -119, 58, 59, -155, -157,
	-159, -158, -171, -160, 128, 126, 130, 131, 135, -164,
	121, 136, 67, 73, -199, 128, 51, 242, 248, 126,
	136, 135, 313, 65, 129, 298, 300, 29, -150, 315,
	237, -148, 245, -144, 53, -144, -144, 209, -144, -144,
	-144, -144, -144, -146, 211, -146, -146, -146, -146, 53,
	53, -144, -144, -144, -144, -152, 53, 194, -152, -152,
	-153, 53, -153, -118, 23, -184, 292, -185, 56, -130,
	24, -130, -52, -203, 8, 9, 10, -52, -113, 118,
	115, 116, -181, 114, 242, 211, 65, 29, 15, 281,
	146, 297, 56, 147, -52, -52, -52, -130, -108, 11,
	91, 37, -38, -38, -125, -85, -88, -103, 19, 11,
	33, 33, -35, 67, 68, 69, 110, -210, -69, -62,
	-62, -62, -34, 141, 72, -211, -211, -35, 54, -38,
	-211, -211, -211, 54, 52, 23, 54, 11, 110, 54,
	11, -211, -35, -80, -78, 79, -38, -211, -211, -211,
	-211, -211, -60, 30, 33, -2, -210, -210, -56, 54,
	12, 81, -45, -44, 51, 52, -46, 51, -44, 41,
	41, 121, 121, 121, -93, -118, -56, -40, -56, -101,
	-102, 267, 264, 270, 56, 54, -170, 81, 53, -198,
	51, 73, -162, -118, 136, -164, -164, 56, -164, 56,
	56, 67, 19, -118, 9, 136, 136, -198, 58, -124,
	-195, 299, 16, 53, -200, 53, 58, 59, 60, 67,
	-145, 66, -58, 238, 271, 274, 273, 239, 316, -149,
	246, 59, -146, -146, -144, -146, -146, -146, -147, 30,
	-147, -147, -147, -147, -154, 58, -154, -151, 292, 293,
	-151, 59, -152, 59, 51, 52, -2, -183, -182, -119,
	-188, 23, 51, -202, -129, -122, -214, 152, 127, 132,
	131, 56, 126, 130, 146, -187, 152, 127, 128, 132,
	131, 56, 121, 136, 126, 130, 146, 135, -114, -115,
	123, 23, 121, 136, 146, 118, -130, -110, 89, 12,
	-124, -124, 38, 110, -52, -39, 11, 98, -119, -36,
	-34, 72, -62, -62, -211, -37, -134, 107, 207, 140,
	202, 196, 226, 227, 213, 244, 200, 245, -131, -134,
	-62, -62, -119, -62, -62, 289, -83, 80, -38, 78,
	-94, 51, -95, -71, -73, -72, -210, -2, -89, -118,
	-93, -83, -99, -38, -38, -38, 53, -38, -210, -210,
	-210, -211, 54, -83, -56, 264, 268, 269, -169, -170,
	-173, -172, -118, 136, 10, 9, 19, 132, 126, 56,
	56, 56, -197, 135, 310, -199, 313, -145, -210, 53,
	23, 29, 59, -200, 53, -190, 312, -210, -144, 53,
	-144, 53, 53, 55, -147, -147, -146, -147, -147, -147,
	56, 107, 55, 54, 55, 200, 200, 54, 55, 54,
	-52, -118, 54, 81, -189, 19, 160, 161, -52, -203,
	-213, 121, 136, -129, -118, -129, -118, -52, -129, -118,
	128, -159, 58, -38, -56, -40, -211, -62, -211, -144,
	-144, -144, -153, -144, 187, -144, 187, -211, -211, -211,
	54, 19, -211, 54, 19, -210, -33, 286, -38, 28,
	-94, 54, -211, -211, -211, 54, 110, -211, -87, -90,
	-118, 136, -90, -90, -90, -127, -118, -87, 55, 54,
	-144, -144, -161, 156, 157, 30, 158, -161, 310, 136,
	136, -197, -198, -38, -90, 300, 54, 55, -200, 211,
	201, 240, 217, -211, 55, 55, 55, -147, -146, 58,
	-146, 247, 247, 59, 59, 53, 52, 51, -182, -170,
	123, 21, 6, 8, 9, 10, 19, 23, -118, 53,
	27, -118, -81, 13, -146, 56, -62, -62, -62, -62,
	-62, -211, 58, 136, -73, 33, -2, -210, -118, -118,
	54, 55, -211, -211, -211, -55, -175, -177, 292, -176,
	52, 133, 65, 165, 166, 167, 168, 169, 170, 171,
	-172, -86, -198, 51, 67, 159, -198, 51, -162, -118,
	-197, -210, -211, 55, 53, 59, 55, 209, -151, -147,
	-147, 55, 55, -173, -118, -52, -163, -118, 174, -204,
	-205, -7, -9, -8, -11, 20, 53, -90, -210, 126,
	-82, 14, 16, -211, -211, -211, -211, -32, 91, 292,
	9, -71, -2, 110, -118, -174, 51, -176, 292, 53,
	294, 56, -165, 81, 58, 81, 81, 81, 81, 81,
	81, 81, 9, 10, 53, 53, -38, -194, 158, -196,
	55, 55, 55, 53, 53, -191, 54, 52, 175, -205,
	-207, -206, -118, -173, 55, -179, -180, 146, 136, -38,
	-70, -211, 290, 48, 295, -95, -211, -118, -118, -178,
	-176, -118, 59, -201, 51, 70, 59, -201, -201, -201,
	-201, -201, -161, -161, -163, -173, -211, 287, 55, 177,
	302, 303, 145, 304, 158, 305, 306, -91, 311, -173,
	-173, -192, 292, -118, -38, -205, 54, -136, 55, -186,
	-211, 54, -118, 53, 38, 291, 296, -210, 55, 54,
	-198, -198, 55, 55, 292, 59, 16, 59, 59, 59,
	59, 303, 145, 305, 16, -56, 53, 55, 55, 313,
	-206, -184, -180, 33, -173, 38, -118, -176, 129, -175,
	59, 59, 307, -124, -175, -90, -56, -175, -38, 148,
	55, 292, -211, -52, -174, 110, -174, 55, -175, 149,
	295, 53, -119, -210, 296, -163, -62, 145, 55, -211,
	-211,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 679, 0, 435, 435, 435, 435, 435, 435, 0,
	-2, 733, 0, 0, 0, 0, -2, 425, 426, 0,
	428, 429, 1001, 1001, 1001, 1001, 1001, 0, 33, 34,
	999, 1, 3, 687, 0, 0, 439, 442, 437, 0,
	733, 0, 0, 0, 64, 0, 322, 0, 0, 731,
	731, 0, 0, 731, 100, 0, 0, 0, 734, 0,
	729, 0, 729, 729, 729, 0, 384, 507, 754, 755,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 0, 0, 0, 0, 1002, 1002, 1002,
	1002, 0, 1002, 413, 402, 404, 405, 406, 407, 1002,
	422, 423, 412, 424, 427, 430, 431, 432, 433, 434,
	27, 691, 0, 0, 679, 29, 0, 435, 440, 441,
	445, 443, 444, 436, 0, 453, 457, 0, 517, 0,
	522, 524, -2, -2, 0, 559, 560, 561, 562, 563,
	0, 0, 0, 0, 0, 0, 0, 587, 588, 589,
	590, 664, 665, 666, 667, 668, 669, 670, 671, 526,
	527, 661, 711, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 652, 0, 618, 618, 618, 618, 618, 618,
	618, 618, 0, 0, 0, 0, 0, 0, 0, 464,
	466, 467, 468, 488, 0, 490, 0, 0, 41, 45,
	0, 968, 715, -2, -2, 0, 0, 752, 753, -2,
	878, -2, 750, 751, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 0, 113, 0, 0, 323, 324, 0, 101,
	0, 0, 0, 0, 0, 0, 110, 0, 1002, 0,
	0, 0, 0, 0, 0, 0, 383, 0, 385, 1002,
	1002, 1002, 1002, 1002, 1002, 1002, 1002, 394, 1003, 1004,
	395, 396, 397, 1002, 1002, 399, 0, 414, 0, 408,
	28, 1000, 22, 0, 0, 688, 0, 680, 681, 684,
	687, 27, 442, 0, 447, 446, 438, 0, 454, 0,
	0, 0, 458, 0, 460, 461, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 544, 545,
	546, 547, 548, 549, 550, 523, 0, 537, 0, 0,
	0, 579, 580, 581, 582, 583, 584, 0, 449, 27,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	445, 0, 653, 0, 609, 0, 610, 611, 612, 613,
	614, 615, 616, 617, 645, 0, 647, 648, 649, 650,
	651, 187, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 213, 214, 0, 449, 0, 0, 43, 0, 506,
	0, 0, 0, 0, 0, 0, 495, 0, 0, 498,
	0, 0, 0, 0, 489, 0, 0, 509, 932, 491,
	0, 493, 494, -2, 0, 0, 0, 39, 40, 0,
	46, 968, 48, 53, 0, 0, 0, 268, 724, 725,
	726, 722, 331, 0, 118, 262, 258, 120, 121, 122,
	123, 248, 186, 248, 248, 248, 248, 248, 220, 248,
	248, 265, 265, 265, 265, 265, 229, 230, 231, 232,
	233, 234, 235, 0, 0, 205, 248, 248, 248, 209,
	248, 211, 212, 238, 239, 240, 241, 242, 243, 244,
	245, 250, 250, 250, 252, 252, 203, 204, 0, 0,
	104, 0, 1002, 0, 1002, 0, 0, 0, 75, 76,
	111, 0, 0, 350, 0, 378, 730, 0, 1002, 381,
	382, 508, 756, 757, 386, 387, 388, 389, 390, 391,
	392, 393, 398, 401, 415, 409, 410, 403, 692, 0,
	0, 0, 0, 0, 683, 685, 686, 691, 30, 445,
	0, 672, 0, 0, 0, 448, 25, 518, 519, 521,
	538, 0, 540, 542, 459, 455, 0, 662, -2, 528,
	529, 553, 554, 555, 0, 0, 0, 0, 551, 533,
	0, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 578, 629, 630, 586, 0, 576, 577,
	585, 0, 0, 450, 451, 556, 0, 710, 27, 0,
	0, 0, 0, 0, 661, 0, 0, 0, 0, 659,
	656, 0, 0, 619, 646, 0, 0, 0, 0, 0,
	0, 505, 513, 712, 0, 465, 484, 486, 0, 481,
	496, 497, 499, 0, 501, 0, 503, 504, 469, 470,
	471, 0, 0, 0, 0, 492, 513, 0, 513, 42,
	716, 47, 0, 0, 56, 57, 717, 718, 719, 720,
	269, 0, 112, 332, 334, 337, 338, 339, 114, 115,
	116, 117, 0, 325, 327, 0, 0, 0, 0, 0,
	305, 306, 125, 0, 127, 0, 0, 130, 131, 0,
	133, 135, 325, 0, 0, 0, 0, 0, 124, 0,
	264, 260, 259, 185, 0, 265, 265, 248, 265, 265,
	265, 222, 223, 268, 0, 268, 268, 268, 268, 0,
	0, 255, 255, 208, 210, 197, 0, 250, 199, 200,
	201, 0, 202, 0, 0, 69, 0, 102, 103, 70,
	732, 71, 86, 0, 77, 78, 79, 0, 1001, 99,
	0, 745, 351, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 0, 0, 377, 1002, 380, 418, 0,
	0, 0, 689, 690, 0, 682, 23, 0, 727, 728,
	673, 674, 462, 539, 541, 543, 0, 449, 530, 551,
	534, 0, 531, 0, 0, 525, 591, 0, 0, 558,
	-2, 594, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 679, 0, 657, 0, 0, 608, 620, 621,
	622, 623, 704, 0, 0, -2, 0, 0, 679, 0,
	0, 0, 478, 485, 0, 0, 479, 0, 480, 500,
	502, 0, 0, 0, 0, 476, 679, 513, 38, 54,
	55, 0, 0, 61, 270, 0, 335, 0, 0, 311,
	0, 0, 0, 328, 297, 0, 0, 300, 0, 302,
	322, 126, 0, 0, 0, 132, 134, 0, 138, 139,
	0, 156, 0, 0, 145, 0, 180, 149, 150, 151,
	152, 153, 154, 0, 248, 248, 176, 0, 263, 119,
	261, 0, 268, 268, 265, 268, 268, 268, 224, 0,
	225, 226, 227, 228, 0, 246, 0, 206, 0, 0,
	207, 0, 198, 0, 0, 0, -2, 105, 106, 0,
	89, 0, 0, 0, 340, 0, 1001, 0, 365, 366,
	367, 368, 369, 370, 371, 1001, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 360, 361, 362, 0, 1001,
	746, 747, 748, 749, 0, 0, 379, 400, 0, 0,
	416, 417, 693, 0, 24, 513, 0, 456, 663, 0,
	532, 0, 552, 535, 592, 452, 0, 248, 248, 634,
	248, 252, 637, 638, 248, 640, 248, 643, 0, 0,
	0, 0, 662, 0, 0, 0, 654, 607, 660, 0,
	31, 0, 704, 694, 706, 708, 0, 27, 0, 700,
	0, 687, 713, 514, 714, 482, 0, 487, 0, 0,
	0, 490, 0, 687, 37, 58, 59, 60, 333, 336,
	0, 307, 248, 248, 0, 0, 0, 0, 0, 298,
	299, 301, 303, 322, 144, 128, 325, 129, 0, 0,
	0, 157, 0, 0, 0, 148, 0, 0, 172, 0,
	174, 0, 0, 249, 215, 216, 268, 217, 218, 219,
	266, 267, 265, 0, 265, 0, 0, 0, 253, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 0, 0,
	0, 363, 364, 344, 0, 345, 347, 348, 349, 0,
	327, 343, 419, 420, 675, 463, 593, 536, 596, 631,
	265, 635, 636, 639, 641, 642, 644, 598, 597, 599,
	0, 0, 602, 0, 0, 0, 0, 0, 658, 0,
	32, 0, 709, -2, 0, 0, 0, 44, 35, 0,
	473, 474, 0, 0, 0, 509, 477, 36, 272, 0,
	684, 310, 325, 317, 318, 0, 0, 325, 326, 327,
	322, 304, 0, 0, 0, 141, 0, 146, 0, 0,
	255, 183, 184, 155, 173, 175, 177, 221, 268, 247,
	268, 256, 257, 0, 0, 0, 0, 0, 107, 108,
	0, 90, 91, 92, 93, 94, 0, 0, 0, 0,
	0, 328, 677, 0, 632, 633, 0, 0, 0, 0,
	624, 606, 655, 0, 707, 0, -2, 0, 702, 701,
	0, 483, 510, 511, 512, 472, 294, 273, 0, 275,
	0, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	308, 309, 312, 0, 319, 320, 313, 0, 0, 328,
	0, 0, 178, 140, 158, 0, 0, 181, 182, 236,
	237, 251, 254, 0, 0, 0, 95, 329, 0, 74,
	80, 82, 83, 84, 85, 0, 0, 0, 0, 0,
	26, 0, 0, 600, 601, 603, 604, 0, 0, 0,
	0, 697, 27, 0, 475, 271, 0, 276, 0, 0,
	0, 279, 0, 291, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	143, 147, 515, 0, 0, 97, 0, 0, 0, 81,
	49, 50, 0, 0, 101, 0, 373, 0, 0, 678,
	676, 605, 0, 0, 0, 705, -2, 703, 295, 0,
	277, 282, 280, 283, 292, 293, 284, 285, 286, 287,
	288, 289, 325, 325, 0, 0, 137, 179, 142, 0,
	0, 0, 0, 0, 0, 169, 0, 513, 0, 0,
	0, 72, 0, 330, 96, 73, 0, 52, 341, 104,
	372, 0, 0, 0, 625, 0, 628, 0, 274, 0,
	314, 315, 0, 272, 0, 160, 0, 162, 163, 164,
	165, 166, 167, 168, 0, 272, 0, 513, 272, 0,
	51, 346, 374, 0, 0, 626, 0, 278, 0, 294,
	159, 161, 170, 0, 294, 0, 272, 66, 98, 0,
	342, 0, 296, 0, 321, 0, 65, 516, 67, 0,
	0, 0, 171, 0, 627, 0, 0, 0, 316, 375,
	376,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 314,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 315, 3, 316, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:353
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:358
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:359
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:363
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:386
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:394
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:398
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:404
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:411
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:417
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:421
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:427
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:431
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:438
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:450
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:462
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:466
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:472
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:478
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:482
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:486
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:491
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:492
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:496
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:500
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:505
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:509
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:515
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:519
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:523
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:527
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:533
		{
			yyVAL.statement = &Declare{Definitions: yyDollar[2].declareDefinitions}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:539
		{
			yyVAL.declareDefinitions = []*DeclareDefinition{yyDollar[1].declareDefinition}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:543
		{
			yyVAL.declareDefinitions = append(yyVAL.declareDefinitions, yyDollar[3].declareDefinition)
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:549
		{
			yyVAL.declareDefinition = &DeclareDefinition{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:555
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:559
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:565
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:569
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:573
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:579
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:583
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:587
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:591
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:597
		{
			yyVAL.str = SessionStr
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:601
		{
			yyVAL.str = GlobalStr
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:607
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 65:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:612
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 66:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:632
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 67:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:648
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 68:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:663
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:671
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:679
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:683
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:687
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 73:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:698
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].str,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:708
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].str,
				Body:      yyDollar[9].triggerBody,
			}}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:720
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:724
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:730
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:734
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:738
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:744
		{
			yyVAL.triggerBody = []Statement{yyDollar[1].statement}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:748
		{
			yyVAL.triggerBody = append(yyVAL.triggerBody, yyDollar[2].statement)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:754
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:762
		{
			yyVAL.bytes = nil
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:766
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:770
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:775
		{
			yyVAL.bytes = nil
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:779
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:783
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:787
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:791
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:795
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:800
		{
			yyVAL.expr = nil
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:804
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:809
		{
			yyVAL.expr = nil
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:813
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:818
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:822
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:827
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:831
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:837
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:842
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:847
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:853
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:858
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:864
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:869
		{
			yyVAL.bytes = nil
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:873
		{
			yyVAL.bytes = nil
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:879
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:886
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:893
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:898
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:902
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:906
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:910
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:916
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:921
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:932
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:944
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:949
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:954
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:959
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:964
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:969
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:974
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:979
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:984
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:989
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:994
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:999
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[5].expr), NotForReplication: bool(yyDollar[3].boolVal)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[7].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 137:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1005
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[7].expr), ConstraintName: yyDollar[3].colIdent, NotForReplication: bool(yyDollar[5].boolVal)}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1010
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1015
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1020
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1026
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 142:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1032
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 143:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1038
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1044
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1051
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1055
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1059
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1065
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1069
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1073
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1077
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1081
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1085
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1089
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1093
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1099
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1103
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1108
		{
			yyVAL.sequence = &Sequence{}
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1112
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1117
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1122
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1127
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1132
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1137
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1142
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1147
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1152
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1157
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1162
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1167
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 171:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1172
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1179
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1183
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1187
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1191
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1195
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1199
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1204
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1208
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1213
		{
			yyVAL.bytes = nil
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1223
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1228
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1234
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1238
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1242
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1246
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1250
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1254
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1258
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1262
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1266
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1270
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1276
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1282
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1288
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1294
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1300
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1306
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1312
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1316
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1322
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1326
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1330
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1334
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1338
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1342
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1346
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1350
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1356
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1360
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1366
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1370
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1374
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1378
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1382
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1386
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1390
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1394
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1398
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1402
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1406
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1410
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1414
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1418
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1422
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1426
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1430
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1434
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1438
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1442
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1446
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1450
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 237:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1455
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1461
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1465
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1469
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1473
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1477
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1481
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1485
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1489
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1495
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1500
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1505
		{
			yyVAL.optVal = nil
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1509
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1514
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1518
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1526
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1530
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1536
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1544
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1548
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1552
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1557
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1561
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1566
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1570
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1575
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1579
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1583
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1588
		{
			yyVAL.str = ""
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1592
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1596
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1601
		{
			yyVAL.str = ""
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1605
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1609
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1615
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1620
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1624
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1628
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1634
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1638
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1644
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1648
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1654
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1658
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1663
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1667
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1671
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1675
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1679
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1683
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1687
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1691
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1695
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1701
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1705
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1711
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1715
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1721
		{
			yyVAL.indexPartition = nil
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1725
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1729
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1735
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1739
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1743
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1747
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1751
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1755
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1759
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1763
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1769
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1773
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1779
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1783
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1789
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1794
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1800
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 312:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1805
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1812
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 314:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1819
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 315:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1826
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 316:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1835
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1847
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1851
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1855
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1859
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 321:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:1865
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1876
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1880
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1884
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1890
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1894
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1899
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1906
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1910
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1915
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1919
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1923
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1931
		{
			yyVAL.str = yyDollar[1].str
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1935
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1939
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1945
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1949
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1953
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1959
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 341:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:1963
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 342:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1977
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 343:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1991
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 344:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2000
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 345:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2004
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 346:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:2008
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 347:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2021
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 348:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2031
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 349:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2036
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2041
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2045
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 372:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2077
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2083
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2087
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 375:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2093
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 376:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2097
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2103
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2109
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 379:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2117
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2122
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2130
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2134
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2140
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2144
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2149
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2155
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2159
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2163
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2168
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2172
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2176
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2180
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2184
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2188
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2192
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2196
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2200
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2204
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2208
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 400:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2212
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2222
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2226
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2230
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2234
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2238
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2242
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2246
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2256
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2262
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2266
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2272
		{
			yyVAL.str = ""
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2276
		{
			yyVAL.str = "extended "
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2282
		{
			yyVAL.str = ""
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2286
		{
			yyVAL.str = "full "
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2292
		{
			yyVAL.str = ""
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2296
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2300
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2306
		{
			yyVAL.showFilter = nil
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2310
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2314
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2320
		{
			yyVAL.str = ""
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2324
		{
			yyVAL.str = SessionStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2328
		{
			yyVAL.str = GlobalStr
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2334
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2338
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2344
		{
			yyVAL.statement = &Begin{}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2348
		{
			yyVAL.statement = &Begin{}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2354
		{
			yyVAL.statement = &Commit{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2360
		{
			yyVAL.statement = &Rollback{}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2366
		{
			yyVAL.statement = &OtherRead{}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2370
		{
			yyVAL.statement = &OtherRead{}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2374
		{
			yyVAL.statement = &OtherRead{}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2378
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2382
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2387
		{
			setAllowComments(yylex, true)
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2391
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2397
		{
			yyVAL.bytes2 = nil
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2401
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2407
		{
			yyVAL.str = UnionStr
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2411
		{
			yyVAL.str = UnionAllStr
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2415
		{
			yyVAL.str = UnionDistinctStr
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2420
		{
			yyVAL.str = ""
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2424
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2428
		{
			yyVAL.str = SQLCacheStr
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2433
		{
			yyVAL.str = ""
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2437
		{
			yyVAL.str = DistinctStr
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2442
		{
			yyVAL.str = ""
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2446
		{
			yyVAL.str = StraightJoinHint
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2451
		{
			yyVAL.selectExprs = nil
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2455
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2461
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2465
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2471
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2475
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2479
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 456:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2483
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2488
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2492
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2496
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2503
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2508
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2512
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2518
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2522
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2532
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2536
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2540
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2546
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 472:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2550
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2556
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2561
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2565
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2571
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2575
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2588
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2592
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2596
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2600
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2606
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2608
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2612
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2614
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2618
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2620
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2623
		{
			yyVAL.empty = struct{}{}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2625
		{
			yyVAL.empty = struct{}{}
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2628
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2632
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2636
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2643
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2649
		{
			yyVAL.str = JoinStr
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2653
		{
			yyVAL.str = JoinStr
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2657
		{
			yyVAL.str = JoinStr
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2663
		{
			yyVAL.str = StraightJoinStr
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2669
		{
			yyVAL.str = LeftJoinStr
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2673
		{
			yyVAL.str = LeftJoinStr
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2677
		{
			yyVAL.str = RightJoinStr
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2681
		{
			yyVAL.str = RightJoinStr
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2687
		{
			yyVAL.str = NaturalJoinStr
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2691
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2701
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2705
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2711
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2715
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2720
		{
			yyVAL.indexHints = nil
		}
	case 510:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2724
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 511:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2728
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2732
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2737
		{
			yyVAL.expr = nil
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2741
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2746
		{
			yyVAL.columns = nil
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2750
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2756
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2760
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2764
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2768
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2772
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2776
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2780
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2786
		{
			yyVAL.str = ""
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2790
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2796
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2800
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2806
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2810
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2814
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2818
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 532:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2822
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2826
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2830
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2834
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 536:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2838
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2842
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2848
		{
			yyVAL.str = IsNullStr
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2852
		{
			yyVAL.str = IsNotNullStr
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2856
		{
			yyVAL.str = IsTrueStr
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2860
		{
			yyVAL.str = IsNotTrueStr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2864
		{
			yyVAL.str = IsFalseStr
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2868
		{
			yyVAL.str = IsNotFalseStr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2874
		{
			yyVAL.str = EqualStr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2878
		{
			yyVAL.str = LessThanStr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2882
		{
			yyVAL.str = GreaterThanStr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2886
		{
			yyVAL.str = LessEqualStr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2890
		{
			yyVAL.str = GreaterEqualStr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2894
		{
			yyVAL.str = NotEqualStr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2898
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2903
		{
			yyVAL.expr = nil
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2907
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2913
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2917
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2921
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2927
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2933
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2937
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2943
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2947
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2951
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2955
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2959
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2963
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2967
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2971
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2975
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2979
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2983
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2987
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2991
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2995
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2999
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3003
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3007
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3011
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3015
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3019
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3023
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3027
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3031
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3039
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3053
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3057
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3061
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3069
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3083
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3087
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 593:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3091
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3101
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3105
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 596:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3109
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 597:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3113
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 598:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3117
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 599:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3121
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 600:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3125
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 601:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3129
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 602:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3133
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 603:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3137
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 604:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3141
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 605:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:3145
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 606:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3149
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3153
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3157
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3167
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3171
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3175
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3179
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3184
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3189
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3194
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3199
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3203
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3217
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3221
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3225
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3229
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3235
		{
			yyVAL.str = ""
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3239
		{
			yyVAL.str = BooleanModeStr
		}
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3243
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 627:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3247
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3251
		{
			yyVAL.str = QueryExpansionStr
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3257
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3261
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3267
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3271
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3275
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3279
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3283
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3287
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3293
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3297
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3301
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3305
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3309
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3313
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3317
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3321
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3327
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3331
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3335
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3339
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3343
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3347
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3351
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3356
		{
			yyVAL.expr = nil
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3360
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3365
		{
			yyVAL.str = string("")
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3369
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3375
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3379
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3385
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3390
		{
			yyVAL.expr = nil
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3394
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3400
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3404
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 663:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3408
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3414
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3418
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3422
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3426
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3430
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3434
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3438
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3442
		{
			yyVAL.expr = &NullVal{}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3448
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3457
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3461
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3466
		{
			yyVAL.exprs = nil
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3470
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3475
		{
			yyVAL.expr = nil
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3479
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3484
		{
			yyVAL.orderBy = nil
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3488
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3494
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3498
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3504
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 684:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3509
		{
			yyVAL.str = AscScr
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3513
		{
			yyVAL.str = AscScr
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3517
		{
			yyVAL.str = DescScr
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3522
		{
			yyVAL.limit = nil
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3526
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 689:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3530
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3534
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3539
		{
			yyVAL.str = ""
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3543
		{
			yyVAL.str = ForUpdateStr
		}
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3547
		{
			yyVAL.str = ShareModeStr
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3560
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3564
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3568
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 697:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3573
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 698:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3577
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 699:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3581
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3588
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3592
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3596
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 703:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3600
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3605
		{
			yyVAL.updateExprs = nil
		}
	case 705:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3609
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3615
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3619
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3625
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3629
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3635
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3641
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3651
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3655
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3661
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3667
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3671
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3677
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3681
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3685
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3689
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3696
		{
			yyVAL.bytes = []byte("charset")
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3703
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3707
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3711
		{
			yyVAL.expr = &Default{}
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3720
		{
			yyVAL.byt = 0
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3722
		{
			yyVAL.byt = 1
		}
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3725
		{
			yyVAL.empty = struct{}{}
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3727
		{
			yyVAL.empty = struct{}{}
		}
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3730
		{
			yyVAL.str = ""
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3732
		{
			yyVAL.str = IgnoreStr
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3736
		{
			yyVAL.empty = struct{}{}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3738
		{
			yyVAL.empty = struct{}{}
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3740
		{
			yyVAL.empty = struct{}{}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3742
		{
			yyVAL.empty = struct{}{}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3744
		{
			yyVAL.empty = struct{}{}
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3746
		{
			yyVAL.empty = struct{}{}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3748
		{
			yyVAL.empty = struct{}{}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3750
		{
			yyVAL.empty = struct{}{}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3752
		{
			yyVAL.empty = struct{}{}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3754
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3757
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3759
		{
			yyVAL.empty = struct{}{}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3761
		{
			yyVAL.empty = struct{}{}
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3765
		{
			yyVAL.empty = struct{}{}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3767
		{
			yyVAL.empty = struct{}{}
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3771
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3775
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3782
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3788
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3792
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3799
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4066
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4075
		{
			decNesting(yylex)
		}
	case 1001:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:4080
		{
			forceEOF(yylex)
		}
	case 1002:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:4085
		{
			forceEOF(yylex)
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4089
		{
			forceEOF(yylex)
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4093
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
