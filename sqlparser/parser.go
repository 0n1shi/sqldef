// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const POLICY = 57457
const UNIQUE = 57458
const KEY = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const STATUS = 57477
const VARIABLES = 57478
const RESTRICT = 57479
const CASCADE = 57480
const NO = 57481
const ACTION = 57482
const PERMISSIVE = 57483
const RESTRICTIVE = 57484
const PUBLIC = 57485
const CURRENT_USER = 57486
const SESSION_USER = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const SMALLSERIAL = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const SERIAL = 57500
const BIGINT = 57501
const BIGSERIAL = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const PRECISION = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const VARYING = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const UUID = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const CITEXT = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const JSONB = 57532
const ENUM = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const ARRAY = 57542
const NOW = 57543
const NULLX = 57544
const AUTO_INCREMENT = 57545
const APPROXNUM = 57546
const SIGNED = 57547
const UNSIGNED = 57548
const ZEROFILL = 57549
const ZONE = 57550
const AUTOINCREMENT = 57551
const DATABASES = 57552
const TABLES = 57553
const VITESS_KEYSPACES = 57554
const VITESS_SHARDS = 57555
const VITESS_TABLETS = 57556
const VSCHEMA_TABLES = 57557
const EXTENDED = 57558
const FULL = 57559
const PROCESSLIST = 57560
const NAMES = 57561
const CHARSET = 57562
const GLOBAL = 57563
const SESSION = 57564
const ISOLATION = 57565
const LEVEL = 57566
const READ = 57567
const WRITE = 57568
const ONLY = 57569
const REPEATABLE = 57570
const COMMITTED = 57571
const UNCOMMITTED = 57572
const SERIALIZABLE = 57573
const CURRENT_TIMESTAMP = 57574
const DATABASE = 57575
const CURRENT_DATE = 57576
const CURRENT_TIME = 57577
const LOCALTIME = 57578
const LOCALTIMESTAMP = 57579
const UTC_DATE = 57580
const UTC_TIME = 57581
const UTC_TIMESTAMP = 57582
const REPLACE = 57583
const CONVERT = 57584
const CAST = 57585
const SUBSTR = 57586
const SUBSTRING = 57587
const GROUP_CONCAT = 57588
const SEPARATOR = 57589
const INHERIT = 57590
const MATCH = 57591
const AGAINST = 57592
const BOOLEAN = 57593
const LANGUAGE = 57594
const WITH = 57595
const WITHOUT = 57596
const PARSER = 57597
const QUERY = 57598
const EXPANSION = 57599
const UNUSED = 57600
const TYPECAST = 57601
const CHECK = 57602

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	120, 92,
	-2, 82,
	-1, 36,
	152, 341,
	153, 341,
	-2, 331,
	-1, 255,
	108, 671,
	-2, 667,
	-1, 256,
	108, 672,
	-2, 668,
	-1, 326,
	79, 847,
	-2, 58,
	-1, 327,
	79, 802,
	-2, 59,
	-1, 332,
	79, 784,
	-2, 638,
	-1, 334,
	79, 824,
	-2, 640,
	-1, 621,
	51, 41,
	53, 41,
	-2, 43,
	-1, 754,
	108, 674,
	-2, 670,
	-1, 984,
	5, 28,
	-2, 474,
	-1, 1009,
	5, 27,
	-2, 613,
	-1, 1095,
	5, 27,
	-2, 64,
	-1, 1292,
	5, 28,
	-2, 614,
	-1, 1361,
	5, 27,
	-2, 616,
	-1, 1448,
	5, 28,
	-2, 617,
}

const yyPrivate = 57344

const yyLast = 12723

var yyAct = [...]int{
	256, 818, 1397, 1438, 1207, 1310, 924, 690, 548, 1372,
	1180, 1044, 260, 1086, 1208, 836, 1181, 1012, 918, 547,
	3, 902, 859, 234, 615, 1177, 1097, 1058, 865, 613,
	779, 858, 819, 1028, 1153, 88, 787, 913, 88, 790,
	976, 285, 854, 66, 259, 806, 1083, 53, 480, 228,
	756, 815, 631, 1017, 331, 434, 874, 492, 325, 286,
	47, 602, 88, 88, 336, 1298, 571, 233, 630, 336,
	258, 486, 336, 617, 789, 312, 500, 88, 958, 88,
	467, 243, 322, 320, 562, 88, 1069, 262, 52, 576,
	577, 311, 1473, 229, 230, 231, 232, 524, 1218, 247,
	1489, 517, 518, 519, 520, 521, 514, 47, 313, 524,
	1470, 1486, 1446, 1423, 1483, 239, 1087, 1088, 925, 891,
	1459, 317, 1411, 513, 512, 522, 523, 515, 516, 517,
	518, 519, 520, 521, 514, 514, 1469, 524, 524, 1172,
	1428, 1286, 444, 1062, 328, 83, 79, 80, 81, 316,
	508, 1445, 511, 1282, 479, 1203, 1204, 1202, 526, 527,
	528, 529, 530, 531, 532, 849, 509, 510, 507, 513,
	512, 522, 523, 515, 516, 517, 518, 519, 520, 521,
	514, 890, 721, 524, 894, 850, 851, 1279, 479, 722,
	513, 512, 522, 523, 515, 516, 517, 518, 519, 520,
	521, 514, 1036, 475, 524, 1035, 1329, 88, 1037, 1328,
	1071, 336, 336, 336, 336, 632, 336, 633, 893, 903,
	1385, 810, 1236, 336, 513, 512, 522, 523, 515, 516,
	517, 518, 519, 520, 521, 514, 1350, 57, 524, 512,
	522, 523, 515, 516, 517, 518, 519, 520, 521, 514,
	336, 1319, 524, 1235, 895, 1275, 1273, 227, 1318, 489,
	1247, 1248, 59, 60, 61, 62, 63, 1380, 914, 525,
	466, 466, 466, 466, 253, 466, 1388, 1485, 82, 471,
	472, 525, 466, 1481, 1439, 488, 522, 523, 515, 516,
	517, 518, 519, 520, 521, 514, 1131, 816, 524, 47,
	1440, 1051, 1313, 1412, 1358, 1317, 1250, 875, 1316, 525,
	525, 88, 1065, 1064, 534, 1049, 1373, 536, 88, 88,
	88, 1251, 876, 1046, 336, 1212, 1479, 1259, 1402, 1375,
	336, 1213, 515, 516, 517, 518, 519, 520, 521, 514,
	449, 1283, 524, 1128, 546, 535, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 525, 561, 563, 563, 563,
	563, 563, 563, 563, 563, 875, 591, 592, 593, 594,
	440, 76, 1444, 77, 903, 77, 525, 614, 1337, 875,
	876, 1027, 700, 564, 565, 566, 567, 568, 569, 570,
	1054, 1055, 1056, 898, 876, 437, 1374, 915, 1059, 1057,
	282, 283, 1026, 622, 328, 316, 628, 1025, 436, 445,
	525, 206, 513, 512, 522, 523, 515, 516, 517, 518,
	519, 520, 521, 514, 525, 78, 524, 1311, 1312, 1314,
	1132, 837, 839, 537, 538, 284, 1416, 336, 88, 1295,
	1129, 1230, 1127, 479, 88, 1140, 88, 336, 992, 88,
	970, 728, 88, 504, 455, 1130, 88, 725, 336, 336,
	336, 336, 336, 336, 336, 336, 856, 855, 499, 953,
	525, 448, 336, 336, 1421, 1136, 1244, 88, 490, 513,
	512, 522, 523, 515, 516, 517, 518, 519, 520, 521,
	514, 1231, 336, 524, 498, 497, 88, 1015, 634, 330,
	497, 1176, 336, 807, 438, 838, 466, 442, 693, 1174,
	709, 499, 733, 74, 525, 439, 499, 466, 466, 466,
	466, 466, 466, 466, 466, 649, 645, 1379, 498, 497,
	1053, 466, 466, 494, 707, 1376, 1450, 1331, 539, 540,
	541, 542, 543, 544, 545, 499, 336, 954, 1330, 757,
	1135, 1061, 75, 451, 452, 453, 807, 50, 999, 754,
	1321, 70, 72, 1419, 1072, 763, 435, 759, 799, 802,
	794, 988, 735, 987, 808, 1092, 71, 73, 750, 761,
	762, 760, 1062, 752, 1090, 753, 441, 1072, 443, 498,
	497, 780, 782, 781, 68, 758, 47, 88, 525, 1422,
	88, 88, 88, 88, 88, 1357, 499, 1326, 784, 785,
	550, 820, 88, 310, 1261, 88, 804, 1084, 1067, 88,
	967, 968, 969, 1216, 88, 88, 795, 796, 336, 812,
	875, 1215, 803, 1214, 794, 870, 1052, 869, 1038, 871,
	872, 336, 1433, 1493, 873, 876, 330, 330, 330, 330,
	460, 330, 927, 844, 1280, 1365, 1482, 479, 330, 317,
	317, 317, 317, 317, 21, 525, 811, 783, 813, 814,
	1433, 1471, 833, 842, 614, 821, 840, 706, 824, 904,
	905, 906, 907, 317, 705, 502, 846, 316, 316, 316,
	316, 316, 841, 336, 69, 336, 88, 863, 847, 88,
	694, 88, 316, 989, 88, 336, 920, 692, 328, 822,
	823, 316, 825, 462, 457, 464, 731, 732, 1465, 479,
	238, 860, 916, 917, 450, 513, 512, 522, 523, 515,
	516, 517, 518, 519, 520, 521, 514, 318, 435, 524,
	1434, 479, 1433, 461, 463, 1393, 1365, 1462, 1365, 1457,
	498, 497, 466, 1392, 466, 1178, 498, 497, 1013, 330,
	1225, 498, 497, 1013, 466, 636, 843, 499, 624, 746,
	748, 749, 85, 499, 747, 727, 1365, 1456, 499, 1308,
	1455, 755, 960, 754, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 792,
	321, 959, 757, 1365, 1436, 1365, 1394, 1365, 1389, 753,
	726, 972, 1290, 971, 446, 966, 447, 1365, 479, 1365,
	1366, 599, 454, 1308, 1307, 1243, 498, 497, 1199, 479,
	1294, 479, 1239, 1238, 1237, 1009, 896, 897, 899, 900,
	901, 336, 1014, 499, 88, 459, 1233, 1234, 758, 1233,
	1232, 998, 982, 479, 599, 479, 910, 911, 912, 336,
	1030, 1014, 1032, 981, 23, 792, 479, 641, 640, 1039,
	336, 54, 688, 1031, 625, 1010, 1011, 848, 1022, 996,
	598, 1040, 330, 599, 1241, 1240, 23, 1007, 982, 88,
	1008, 1108, 1143, 330, 330, 330, 330, 330, 330, 330,
	330, 1033, 1013, 317, 599, 627, 23, 330, 330, 982,
	50, 525, 1360, 729, 626, 994, 624, 991, 1073, 1074,
	50, 1076, 88, 336, 1060, 1089, 336, 737, 1047, 1048,
	1050, 316, 50, 691, 982, 1487, 1467, 502, 1426, 860,
	330, 240, 1399, 1095, 456, 1077, 1066, 1079, 1080, 1081,
	1082, 336, 50, 1091, 88, 88, 1085, 993, 1381, 990,
	1109, 1105, 88, 478, 1110, 1107, 1106, 1396, 1395, 73,
	1384, 336, 604, 607, 608, 609, 605, 1102, 606, 610,
	1111, 786, 1101, 47, 1378, 1344, 1104, 50, 895, 919,
	1224, 800, 800, 1221, 1193, 914, 1042, 800, 1018, 1019,
	921, 922, 741, 909, 908, 65, 1098, 1242, 1146, 1179,
	466, 336, 336, 1178, 1147, 1043, 1021, 703, 695, 1165,
	820, 476, 1152, 830, 1166, 1024, 820, 828, 831, 1023,
	1184, 827, 829, 826, 800, 1478, 973, 974, 975, 1468,
	336, 1139, 336, 336, 1173, 1187, 1189, 754, 597, 1201,
	1182, 1145, 832, 955, 608, 609, 493, 621, 244, 245,
	1188, 1476, 965, 330, 1206, 964, 481, 1154, 1183, 491,
	47, 1205, 1078, 1169, 639, 458, 330, 482, 1200, 929,
	1288, 1345, 702, 1075, 1100, 1195, 1196, 1197, 923, 612,
	493, 1222, 604, 607, 608, 609, 605, 1228, 606, 610,
	1156, 1246, 1018, 1019, 1339, 336, 1340, 1341, 1342, 241,
	242, 235, 1405, 236, 336, 963, 1226, 1227, 1338, 1229,
	860, 1219, 860, 962, 54, 1404, 88, 1348, 330, 1014,
	330, 495, 336, 275, 274, 277, 278, 279, 280, 1425,
	330, 336, 276, 281, 88, 1158, 1424, 1163, 1413, 1157,
	1063, 1155, 724, 1252, 1211, 1210, 56, 1161, 58, 1103,
	1263, 1260, 1254, 1249, 330, 623, 51, 1, 1159, 1160,
	1387, 67, 1458, 1264, 1432, 689, 1257, 1271, 1217, 1245,
	1099, 696, 1112, 697, 1162, 1164, 701, 926, 1096, 704,
	936, 1437, 1371, 867, 336, 857, 336, 336, 336, 88,
	336, 433, 64, 317, 1420, 1289, 336, 868, 866, 1118,
	864, 642, 1297, 889, 723, 1070, 892, 1315, 648, 646,
	647, 1145, 644, 1304, 1306, 336, 650, 643, 1040, 214,
	323, 316, 1284, 742, 611, 635, 496, 1126, 1125, 932,
	1134, 336, 336, 88, 336, 336, 720, 1220, 952, 474,
	336, 216, 1149, 1150, 1325, 249, 1327, 533, 961, 1034,
	336, 1301, 1302, 1303, 329, 1167, 1168, 1336, 1170, 1171,
	1335, 1324, 1185, 1119, 730, 485, 1029, 1403, 1121, 1114,
	1115, 1347, 1122, 1117, 1116, 997, 860, 1124, 1120, 559,
	1323, 1349, 805, 261, 330, 336, 336, 745, 1123, 273,
	270, 272, 271, 736, 1113, 1045, 1332, 1359, 1006, 336,
	506, 251, 315, 1361, 595, 603, 601, 336, 600, 1020,
	1370, 1016, 314, 1377, 1098, 860, 1142, 1285, 1382, 1410,
	740, 25, 1182, 1386, 817, 55, 246, 19, 336, 1268,
	1269, 18, 1270, 17, 20, 336, 1272, 16, 1274, 15,
	1183, 14, 29, 1362, 13, 12, 11, 10, 1094, 9,
	8, 330, 845, 7, 6, 5, 336, 4, 1390, 237,
	1391, 1414, 22, 2, 0, 0, 0, 0, 0, 0,
	0, 1418, 1415, 0, 0, 336, 330, 0, 0, 1427,
	0, 0, 0, 0, 1309, 0, 336, 336, 0, 0,
	336, 0, 1182, 0, 484, 1401, 330, 0, 0, 0,
	1400, 0, 1429, 0, 1442, 1447, 0, 336, 0, 0,
	1183, 0, 47, 1266, 336, 0, 820, 336, 330, 1454,
	1452, 1453, 0, 931, 336, 0, 948, 0, 949, 86,
	336, 950, 226, 800, 1463, 0, 1186, 1029, 0, 800,
	0, 0, 0, 734, 0, 0, 0, 0, 0, 0,
	0, 1430, 1431, 0, 250, 1435, 86, 86, 336, 1475,
	1474, 0, 0, 0, 1472, 330, 1148, 330, 1209, 0,
	88, 86, 0, 86, 0, 0, 0, 0, 336, 86,
	1490, 483, 487, 0, 0, 0, 513, 512, 522, 523,
	515, 516, 517, 518, 519, 520, 521, 514, 505, 0,
	524, 791, 793, 0, 513, 512, 522, 523, 515, 516,
	517, 518, 519, 520, 521, 514, 0, 809, 524, 0,
	0, 0, 0, 1477, 0, 0, 0, 0, 0, 0,
	1253, 0, 549, 0, 0, 1488, 0, 0, 0, 1255,
	0, 560, 0, 0, 1351, 1352, 0, 1353, 1354, 1355,
	0, 0, 978, 977, 0, 0, 0, 1258, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 835, 0, 0,
	465, 0, 513, 512, 522, 523, 515, 516, 517, 518,
	519, 520, 521, 514, 0, 0, 524, 0, 513, 512,
	522, 523, 515, 516, 517, 518, 519, 520, 521, 514,
	0, 86, 524, 942, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 941, 0, 0, 1299,
	879, 1299, 1299, 1299, 0, 1305, 0, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 880, 946, 0, 0, 0, 0, 0, 1093,
	1299, 0, 940, 0, 0, 0, 887, 0, 877, 0,
	0, 0, 0, 878, 0, 0, 1299, 1333, 0, 330,
	330, 0, 525, 0, 0, 1343, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 0, 0, 0, 1141,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	937, 934, 935, 0, 933, 86, 0, 0, 0, 0,
	0, 0, 86, 619, 86, 0, 883, 0, 0, 888,
	1363, 1364, 0, 0, 0, 885, 884, 0, 0, 0,
	0, 0, 944, 947, 1209, 0, 0, 979, 0, 0,
	0, 980, 1383, 743, 744, 0, 0, 0, 984, 985,
	986, 0, 0, 1491, 0, 0, 0, 995, 525, 0,
	0, 0, 1001, 1398, 0, 1002, 1003, 1004, 1005, 0,
	1299, 0, 0, 0, 525, 0, 0, 0, 0, 0,
	0, 939, 468, 469, 470, 0, 473, 0, 0, 0,
	0, 1417, 0, 477, 0, 0, 549, 0, 0, 797,
	798, 0, 0, 0, 0, 0, 0, 0, 938, 0,
	1209, 0, 881, 0, 0, 0, 0, 0, 882, 0,
	0, 1299, 1299, 0, 0, 1299, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 572, 86, 800,
	86, 0, 1449, 86, 0, 0, 86, 943, 0, 1451,
	708, 0, 1398, 1256, 0, 0, 0, 0, 0, 1460,
	0, 0, 0, 945, 0, 1466, 0, 0, 0, 886,
	574, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	853, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 1299, 0, 0, 0, 0, 0, 708,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 588,
	0, 0, 0, 1398, 0, 0, 0, 0, 0, 575,
	0, 0, 0, 0, 589, 573, 0, 0, 0, 578,
	0, 0, 0, 0, 0, 1151, 0, 0, 0, 0,
	0, 250, 0, 0, 0, 0, 250, 250, 0, 0,
	801, 801, 250, 0, 0, 0, 801, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1334, 0, 956, 957, 0, 487, 0, 0, 0, 0,
	0, 0, 1198, 0, 0, 0, 250, 250, 250, 250,
	0, 86, 0, 801, 86, 86, 86, 86, 86, 0,
	590, 0, 0, 0, 0, 0, 834, 0, 0, 86,
	0, 0, 0, 619, 0, 0, 0, 699, 86, 86,
	0, 23, 24, 48, 26, 27, 0, 0, 710, 711,
	712, 713, 714, 715, 716, 717, 0, 0, 983, 0,
	42, 0, 718, 719, 28, 0, 0, 0, 0, 0,
	0, 0, 0, 1000, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 37, 0, 0, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 86, 0, 86, 0, 0, 86, 0,
	1265, 0, 0, 0, 222, 0, 0, 1267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1276,
	1277, 1278, 0, 708, 1281, 0, 30, 31, 33, 32,
	35, 0, 0, 0, 0, 250, 0, 1291, 1292, 1293,
	0, 1296, 0, 0, 0, 0, 0, 0, 0, 0,
	36, 43, 44, 0, 207, 45, 46, 34, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 215, 211, 0,
	0, 0, 0, 1320, 0, 0, 0, 1322, 38, 39,
	0, 40, 41, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 0, 250,
	217, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 1356,
	0, 0, 208, 0, 0, 1175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1367, 1368, 1369, 0, 0,
	1190, 1191, 0, 928, 1192, 930, 0, 1194, 0, 0,
	0, 0, 0, 49, 0, 951, 210, 0, 218, 219,
	220, 221, 225, 1068, 0, 0, 0, 224, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1406, 1407, 1408, 1409, 669,
	0, 0, 1223, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1137, 1138,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 1443, 0, 250, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 0, 250, 0, 0,
	0, 0, 1262, 0, 0, 654, 0, 708, 0, 0,
	0, 1464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 801, 0, 0, 0, 0, 0, 801, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 670, 0,
	0, 0, 1287, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1494, 1495, 0, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 588, 0, 683,
	684, 0, 685, 686, 687, 671, 672, 673, 674, 651,
	653, 0, 589, 652, 655, 0, 667, 656, 657, 658,
	659, 660, 661, 662, 663, 664, 665, 666, 668, 675,
	676, 677, 678, 679, 680, 681, 682, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 1133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 619, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1441, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 422, 412, 1480,
	382, 424, 359, 374, 432, 375, 376, 404, 345, 390,
	147, 371, 91, 362, 339, 368, 340, 360, 384, 113,
	358, 414, 393, 126, 430, 129, 398, 0, 168, 138,
	0, 0, 386, 416, 388, 410, 381, 405, 350, 397,
	425, 372, 401, 426, 0, 0, 0, 335, 0, 861,
	862, 0, 0, 0, 0, 0, 104, 0, 400, 421,
	370, 403, 338, 399, 0, 343, 346, 431, 419, 365,
	366, 1041, 0, 0, 0, 0, 0, 0, 385, 389,
	407, 379, 0, 0, 0, 0, 0, 0, 801, 0,
	363, 0, 396, 0, 0, 0, 347, 344, 0, 383,
	0, 0, 0, 349, 0, 364, 408, 0, 337, 411,
	417, 380, 193, 420, 378, 377, 154, 0, 107, 0,
	172, 117, 373, 127, 406, 423, 387, 415, 361, 369,
	109, 367, 161, 148, 184, 395, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 86, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 341, 0, 169, 186, 204, 205, 342, 357,
	418, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 402, 162, 106, 185,
	167, 353, 356, 351, 352, 391, 392, 427, 428, 429,
	409, 348, 0, 354, 355, 0, 413, 121, 394, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 0, 103,
	422, 412, 0, 382, 424, 359, 374, 432, 375, 376,
	404, 345, 390, 147, 371, 91, 362, 339, 368, 340,
	360, 384, 113, 358, 414, 393, 126, 430, 129, 398,
	0, 168, 138, 0, 0, 386, 416, 388, 410, 381,
	405, 350, 397, 425, 372, 401, 426, 0, 0, 0,
	335, 0, 861, 862, 0, 0, 0, 0, 0, 104,
	0, 400, 421, 370, 403, 338, 399, 0, 343, 346,
	431, 419, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 385, 389, 407, 379, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 0, 396, 0, 0, 0, 347,
	344, 0, 383, 0, 0, 0, 349, 0, 364, 408,
	0, 337, 411, 417, 380, 193, 420, 378, 377, 154,
	0, 107, 0, 172, 117, 373, 127, 406, 423, 387,
	415, 361, 369, 109, 367, 161, 148, 184, 395, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 341, 0, 169, 186, 204,
	205, 342, 357, 418, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 402,
	162, 106, 185, 167, 353, 356, 351, 352, 391, 392,
	427, 428, 429, 409, 348, 0, 354, 355, 0, 413,
	121, 394, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 103, 422, 412, 0, 382, 424, 359, 374,
	432, 375, 376, 404, 345, 390, 147, 371, 91, 362,
	339, 368, 340, 360, 384, 113, 358, 414, 393, 126,
	430, 129, 398, 0, 168, 138, 0, 0, 386, 416,
	388, 410, 381, 405, 350, 397, 425, 372, 401, 426,
	0, 0, 0, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 400, 421, 370, 403, 338, 399,
	0, 343, 346, 431, 419, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 385, 389, 407, 379, 0, 0,
	0, 0, 0, 0, 1144, 0, 363, 0, 396, 0,
	0, 0, 347, 344, 0, 383, 0, 0, 0, 349,
	0, 364, 408, 0, 337, 411, 417, 380, 193, 420,
	378, 377, 154, 0, 107, 0, 172, 117, 373, 127,
	406, 423, 387, 415, 361, 369, 109, 367, 161, 148,
	184, 395, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 341, 0,
	169, 186, 204, 205, 342, 357, 418, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 402, 162, 106, 185, 167, 353, 356, 351,
	352, 391, 392, 427, 428, 429, 409, 348, 0, 354,
	355, 0, 413, 121, 394, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 0, 103, 422, 412, 0, 382,
	424, 359, 374, 432, 375, 376, 404, 345, 390, 147,
	371, 91, 362, 339, 368, 340, 360, 384, 113, 358,
	414, 393, 126, 430, 129, 398, 0, 168, 138, 0,
	0, 386, 416, 388, 410, 381, 405, 350, 397, 425,
	372, 401, 426, 50, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 400, 421, 370,
	403, 338, 399, 0, 343, 346, 431, 419, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 385, 389, 407,
	379, 0, 0, 0, 0, 0, 0, 0, 0, 363,
	0, 396, 0, 0, 0, 347, 344, 0, 383, 0,
	0, 0, 349, 0, 364, 408, 0, 337, 411, 417,
	380, 193, 420, 378, 377, 154, 0, 107, 0, 172,
	117, 373, 127, 406, 423, 387, 415, 361, 369, 109,
	367, 161, 148, 184, 395, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 341, 0, 169, 186, 204, 205, 342, 357, 418,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 402, 162, 106, 185, 167,
	353, 356, 351, 352, 391, 392, 427, 428, 429, 409,
	348, 0, 354, 355, 0, 413, 121, 394, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 0, 103, 422,
	412, 0, 382, 424, 359, 374, 432, 375, 376, 404,
	345, 390, 147, 371, 91, 362, 339, 368, 340, 360,
	384, 113, 358, 414, 393, 126, 430, 129, 398, 0,
	168, 138, 0, 0, 386, 416, 388, 410, 381, 405,
	350, 397, 425, 372, 401, 426, 0, 0, 0, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	400, 421, 370, 403, 338, 399, 0, 343, 346, 431,
	419, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	385, 389, 407, 379, 0, 0, 0, 0, 0, 0,
	751, 0, 363, 0, 396, 0, 0, 0, 347, 344,
	0, 383, 0, 0, 0, 349, 0, 364, 408, 0,
	337, 411, 417, 380, 193, 420, 378, 377, 154, 0,
	107, 0, 172, 117, 373, 127, 406, 423, 387, 415,
	361, 369, 109, 367, 161, 148, 184, 395, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 341, 0, 169, 186, 204, 205,
	342, 357, 418, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 402, 162,
	106, 185, 167, 353, 356, 351, 352, 391, 392, 427,
	428, 429, 409, 348, 0, 354, 355, 0, 413, 121,
	394, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	0, 103, 422, 412, 0, 382, 424, 359, 374, 432,
	375, 376, 404, 345, 390, 147, 371, 91, 362, 339,
	368, 340, 360, 384, 113, 358, 414, 393, 126, 430,
	129, 398, 0, 168, 138, 0, 0, 386, 416, 388,
	410, 381, 405, 350, 397, 425, 372, 401, 426, 0,
	0, 0, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 400, 421, 370, 403, 338, 399, 0,
	343, 346, 431, 419, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 385, 389, 407, 379, 0, 0, 0,
	0, 0, 0, 0, 0, 363, 0, 396, 0, 0,
	0, 347, 344, 0, 383, 0, 0, 0, 349, 0,
	364, 408, 0, 337, 411, 417, 380, 193, 420, 378,
	377, 154, 0, 107, 0, 172, 117, 373, 127, 406,
	423, 387, 415, 361, 369, 109, 367, 161, 148, 184,
	395, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 341, 0, 169,
	186, 204, 205, 342, 357, 418, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 402, 162, 106, 185, 167, 353, 356, 351, 352,
	391, 392, 427, 428, 429, 409, 348, 0, 354, 355,
	0, 413, 121, 394, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 0, 103, 422, 412, 0, 382, 424,
	359, 374, 432, 375, 376, 404, 345, 390, 147, 371,
	91, 362, 339, 368, 340, 360, 384, 113, 358, 414,
	393, 126, 430, 129, 398, 0, 168, 138, 0, 0,
	386, 416, 388, 410, 381, 405, 350, 397, 425, 372,
	401, 426, 0, 0, 0, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 400, 421, 370, 403,
	338, 399, 0, 343, 346, 431, 419, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 385, 389, 407, 379,
	0, 0, 0, 0, 0, 0, 0, 0, 363, 0,
	396, 0, 0, 0, 347, 344, 0, 383, 0, 0,
	0, 349, 0, 364, 408, 0, 337, 411, 417, 380,
	193, 420, 378, 377, 154, 0, 107, 0, 172, 117,
	373, 127, 406, 423, 387, 415, 361, 369, 109, 367,
	161, 148, 184, 395, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	341, 0, 169, 186, 204, 205, 342, 357, 418, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 402, 162, 106, 185, 167, 353,
	356, 351, 352, 391, 392, 427, 428, 429, 409, 348,
	0, 354, 355, 0, 413, 121, 394, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 0, 103, 422, 412,
	0, 382, 424, 359, 374, 432, 375, 376, 404, 345,
	390, 147, 371, 91, 362, 339, 368, 340, 360, 384,
	113, 358, 414, 393, 126, 430, 129, 398, 0, 168,
	138, 0, 0, 386, 416, 388, 410, 381, 405, 350,
	397, 425, 372, 401, 426, 0, 0, 0, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 400,
	421, 370, 403, 338, 399, 0, 343, 346, 431, 419,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 385,
	389, 407, 379, 0, 0, 0, 0, 0, 0, 0,
	0, 363, 0, 396, 0, 0, 0, 347, 344, 0,
	383, 0, 0, 0, 349, 0, 364, 408, 0, 337,
	411, 417, 380, 193, 420, 378, 377, 154, 0, 107,
	0, 172, 117, 373, 127, 406, 423, 387, 415, 361,
	369, 109, 367, 161, 148, 184, 395, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 333, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 341, 0, 169, 186, 204, 205, 342,
	357, 418, 196, 197, 198, 199, 0, 0, 0, 334,
	332, 120, 165, 124, 131, 157, 202, 402, 162, 106,
	185, 167, 353, 356, 351, 352, 391, 392, 427, 428,
	429, 409, 348, 0, 354, 355, 0, 413, 121, 394,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	103, 422, 412, 0, 382, 424, 359, 374, 432, 375,
	376, 404, 345, 390, 147, 371, 91, 362, 339, 368,
	340, 360, 384, 113, 358, 414, 393, 126, 430, 129,
	398, 0, 168, 138, 0, 0, 386, 416, 388, 410,
	381, 405, 350, 397, 425, 372, 401, 426, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 400, 421, 370, 403, 338, 399, 0, 343,
	346, 431, 419, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 385, 389, 407, 379, 0, 0, 0, 0,
	0, 0, 0, 0, 363, 0, 396, 0, 0, 0,
	347, 344, 0, 383, 0, 0, 0, 349, 0, 364,
	408, 0, 337, 411, 417, 380, 193, 420, 378, 377,
	154, 0, 107, 0, 172, 117, 373, 127, 406, 423,
	387, 415, 361, 369, 109, 367, 161, 148, 184, 395,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 341, 0, 169, 186,
	204, 205, 342, 357, 418, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	402, 162, 106, 185, 167, 353, 356, 351, 352, 391,
	392, 427, 428, 429, 409, 348, 0, 354, 355, 0,
	413, 121, 394, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 0, 103, 422, 412, 0, 382, 424, 359,
	374, 432, 375, 376, 404, 345, 390, 147, 371, 91,
	362, 339, 368, 340, 360, 384, 113, 358, 414, 393,
	126, 430, 129, 398, 0, 168, 138, 0, 0, 386,
	416, 388, 410, 381, 405, 350, 397, 425, 372, 401,
	426, 0, 0, 0, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 400, 421, 370, 403, 338,
	399, 0, 343, 346, 431, 419, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 385, 389, 407, 379, 0,
	0, 0, 0, 0, 0, 0, 0, 363, 0, 396,
	0, 0, 0, 347, 344, 0, 383, 0, 0, 0,
	349, 0, 364, 408, 0, 337, 411, 417, 380, 193,
	420, 378, 377, 154, 0, 107, 0, 172, 117, 373,
	127, 406, 423, 387, 415, 361, 369, 109, 367, 161,
	148, 184, 395, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 629, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 333, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 341,
	0, 169, 186, 204, 205, 342, 357, 418, 196, 197,
	198, 199, 0, 0, 0, 334, 332, 120, 165, 124,
	131, 157, 202, 402, 162, 106, 185, 167, 353, 356,
	351, 352, 391, 392, 427, 428, 429, 409, 348, 0,
	354, 355, 0, 413, 121, 394, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 0, 103, 422, 412, 0,
	382, 424, 359, 374, 432, 375, 376, 404, 345, 390,
	147, 371, 91, 362, 339, 368, 340, 360, 384, 113,
	358, 414, 393, 126, 430, 129, 398, 0, 168, 138,
	0, 0, 386, 416, 388, 410, 381, 405, 350, 397,
	425, 372, 401, 426, 0, 0, 0, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 400, 421,
	370, 403, 338, 399, 0, 343, 346, 431, 419, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 385, 389,
	407, 379, 0, 0, 0, 0, 0, 0, 0, 0,
	363, 0, 396, 0, 0, 0, 347, 344, 0, 383,
	0, 0, 0, 349, 0, 364, 408, 0, 337, 411,
	417, 380, 193, 420, 378, 377, 154, 0, 107, 0,
	172, 117, 373, 127, 406, 423, 387, 415, 361, 369,
	109, 367, 161, 148, 184, 395, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 324, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 333, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 341, 0, 169, 186, 204, 205, 342, 357,
	418, 196, 197, 198, 199, 0, 0, 0, 334, 332,
	327, 326, 124, 131, 157, 202, 402, 162, 106, 185,
	167, 353, 356, 351, 352, 391, 392, 427, 428, 429,
	409, 348, 0, 354, 355, 0, 413, 121, 394, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 147, 103,
	91, 788, 0, 257, 0, 0, 0, 113, 254, 0,
	0, 126, 296, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 255, 275, 274, 277, 278,
	279, 280, 0, 0, 104, 276, 281, 282, 283, 0,
	0, 252, 268, 0, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 266, 248, 0, 0, 0,
	308, 0, 267, 0, 0, 263, 264, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 306, 154, 0, 107, 0, 172, 117,
	0, 127, 0, 0, 0, 0, 0, 0, 109, 0,
	161, 148, 184, 0, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 297,
	307, 303, 304, 301, 302, 300, 299, 298, 309, 289,
	290, 291, 292, 294, 0, 121, 293, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 305, 103, 147, 0,
	91, 0, 0, 257, 0, 0, 0, 113, 254, 0,
	0, 126, 296, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 479, 255, 275, 274, 277, 278,
	279, 280, 0, 0, 104, 276, 281, 282, 283, 0,
	0, 252, 268, 0, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 266, 0, 0, 0, 0,
	308, 0, 267, 0, 0, 263, 264, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 306, 154, 0, 107, 0, 172, 117,
	0, 127, 0, 0, 0, 0, 0, 0, 109, 0,
	161, 148, 184, 0, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 297,
	307, 303, 304, 301, 302, 300, 299, 298, 309, 289,
	290, 291, 292, 294, 0, 121, 293, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 305, 103, 147, 0,
	91, 0, 0, 257, 0, 0, 0, 113, 254, 0,
	0, 126, 296, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 255, 275, 274, 277, 278,
	279, 280, 0, 0, 104, 276, 281, 282, 283, 0,
	0, 252, 268, 0, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 266, 248, 0, 0, 0,
	308, 0, 267, 0, 0, 263, 264, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 306, 154, 0, 107, 0, 172, 117,
	0, 127, 0, 0, 0, 0, 0, 0, 109, 0,
	161, 148, 184, 0, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 297,
	307, 303, 304, 301, 302, 300, 299, 298, 309, 289,
	290, 291, 292, 294, 0, 121, 293, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 305, 103, 147, 0,
	91, 0, 0, 257, 0, 0, 0, 113, 254, 0,
	0, 126, 296, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 287, 288, 0, 0, 0, 0, 0, 0,
	852, 0, 50, 0, 0, 255, 275, 274, 277, 278,
	279, 280, 0, 0, 104, 276, 281, 282, 283, 0,
	0, 252, 268, 0, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 266, 0, 0, 0, 0,
	308, 0, 267, 0, 0, 263, 264, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 306, 154, 0, 107, 0, 172, 117,
	0, 127, 0, 0, 0, 0, 0, 0, 109, 0,
	161, 148, 184, 0, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 297,
	307, 303, 304, 301, 302, 300, 299, 298, 309, 289,
	290, 291, 292, 294, 0, 121, 293, 90, 98, 128,
	200, 201, 23, 156, 115, 187, 305, 103, 0, 0,
	0, 0, 0, 0, 147, 0, 91, 0, 0, 257,
	0, 0, 0, 113, 254, 0, 0, 126, 296, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 255, 275, 274, 277, 278, 279, 280, 0, 0,
	104, 276, 281, 282, 283, 0, 0, 252, 268, 0,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 266, 0, 0, 0, 0, 308, 0, 267, 0,
	0, 263, 264, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 306,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 297, 307, 303, 304, 301,
	302, 300, 299, 298, 309, 289, 290, 291, 292, 294,
	0, 121, 293, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 305, 103, 147, 0, 91, 0, 0, 257,
	0, 0, 0, 113, 254, 0, 0, 126, 296, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 255, 275, 274, 277, 278, 279, 280, 0, 0,
	104, 276, 281, 282, 283, 0, 0, 252, 268, 0,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 266, 0, 0, 0, 0, 308, 0, 267, 0,
	0, 263, 264, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 306,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 297, 307, 303, 304, 301,
	302, 300, 299, 298, 309, 289, 290, 291, 292, 294,
	0, 121, 293, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 305, 103, 147, 0, 91, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 126, 296, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 255, 275, 274, 277, 278, 279, 280, 0, 0,
	104, 276, 281, 282, 283, 0, 0, 0, 268, 0,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 266, 0, 0, 0, 0, 308, 0, 267, 0,
	0, 263, 264, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 306,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 1492,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 297, 307, 303, 304, 301,
	302, 300, 299, 298, 309, 289, 290, 291, 292, 294,
	0, 121, 293, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 305, 103, 147, 0, 91, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 126, 296, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 255, 275, 274, 277, 278, 279, 280, 0, 0,
	104, 276, 281, 282, 283, 0, 0, 0, 268, 0,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 266, 0, 0, 0, 0, 308, 0, 267, 0,
	0, 263, 264, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 306,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 297, 307, 303, 304, 301,
	302, 300, 299, 298, 309, 289, 290, 291, 292, 294,
	0, 121, 293, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 305, 103, 147, 0, 91, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 513, 512, 522, 523,
	515, 516, 517, 518, 519, 520, 521, 514, 0, 0,
	524, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 525, 103, 147, 0, 91, 0, 501, 0,
	0, 0, 0, 113, 0, 0, 0, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 0, 503, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 498, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 147, 103, 91, 0, 618, 0, 0, 0,
	0, 113, 0, 0, 0, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 620, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 23, 121,
	0, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	147, 103, 91, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 126, 0, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 169, 186, 204, 205, 0, 0,
	0, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 0, 162, 106, 185,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 23, 121, 0, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 147, 103,
	91, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 126, 0, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 154, 0, 107, 0, 172, 117,
	0, 127, 0, 0, 0, 0, 0, 0, 109, 0,
	161, 148, 184, 0, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 147, 103, 91, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 126,
	0, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 335, 0, 0, 738, 0, 0, 739,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 154, 0, 107, 0, 172, 117, 0, 127,
	0, 0, 0, 0, 0, 0, 109, 0, 161, 148,
	184, 0, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 147, 103, 91, 0, 0, 0,
	0, 0, 0, 113, 638, 0, 0, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 0, 637, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 147, 103, 91, 0, 618, 0, 0, 0,
	0, 113, 0, 0, 0, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 620, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 616, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	147, 103, 91, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 126, 0, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 1300, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 169, 186, 204, 205, 0, 0,
	0, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 0, 162, 106, 185,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 147, 103,
	91, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 126, 0, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 154, 0, 107, 0, 172, 117,
	0, 127, 0, 0, 0, 0, 0, 0, 109, 0,
	161, 148, 184, 0, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 147, 103, 91, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 126,
	0, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 620, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 154, 0, 107, 0, 172, 117, 0, 127,
	0, 0, 0, 0, 0, 0, 109, 0, 161, 148,
	184, 0, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 147, 103, 91, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 0, 503, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 147, 103, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 698, 162,
	106, 185, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	147, 103, 91, 0, 0, 0, 0, 0, 596, 113,
	0, 0, 0, 126, 0, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 169, 186, 204, 205, 0, 0,
	0, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 0, 162, 106, 185,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 90,
	98, 128, 200, 201, 319, 156, 115, 187, 0, 103,
	0, 147, 0, 91, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 126, 0, 129, 0, 0, 168,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 147,
	103, 91, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 126, 0, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 193, 0, 0, 0, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 147, 103, 91,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	126, 0, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 0, 162, 106, 185, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 147, 103, 91, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 147, 103, 91, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 126, 0, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 103,
}

var yyPact = [...]int{
	2025, -1000, -190, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1109, 1151, -1000, -1000, -1000, -1000, -1000, -1000, 953,
	444, 251, 307, 28, 11671, 293, 2059, 12187, -1000, 92,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 900, -1000, -1000,
	-1000, -1000, -1000, 1094, 1097, 935, 1089, 1020, -1000, 6230,
	253, 10120, 11413, 5452, -1000, 683, 289, 275, 11929, 247,
	247, 11929, 247, -1000, -116, 291, 12187, -1000, 12187, 217,
	669, 217, 217, 217, 12187, -1000, 346, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12187, 659, 1046, 595,
	3541, 3541, 3541, 3541, 127, 3541, -31, 971, -1000, -1000,
	-1000, -1000, 3541, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 603, 1047, 7016, 7016, 1109, -1000, 900,
	-1000, -1000, -1000, 1035, -1000, -1000, 470, 1120, -1000, 8056,
	345, -1000, 7016, 79, 868, -1000, -1000, 868, -1000, -1000,
	324, -1000, -1000, 7536, 7536, 7536, 7536, 7536, 7536, 7536,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 868, -1000, 6756, 868, 868, 868,
	868, 868, 868, 868, 868, 7016, 868, 868, 868, 868,
	868, 868, 868, 868, 868, 1742, 868, 868, 868, 868,
	11152, 851, 932, -1000, -1000, -1000, 1067, 8830, 9604, 12187,
	863, -1000, 852, 5179, -25, -1000, -1000, -1000, 419, 9346,
	-1000, -1000, -1000, 1045, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 814, -1000, 2290, 11929, 12187, 882, 652,
	437, 645, 968, 12187, -1000, 10894, 3541, 261, 12187, 1059,
	967, 12187, 629, 622, -1000, 4906, -1000, 3541, 3541, 3541,
	3541, 3541, 3541, 3541, 3541, -1000, -1000, -1000, -1000, -1000,
	-1000, 3541, 3541, -1000, -46, -1000, 12187, -1000, -1000, -1000,
	-1000, 1143, 368, 757, 343, 860, -1000, 692, 1094, 603,
	1020, 9088, 961, -1000, -1000, 12187, -1000, 7016, 7016, 703,
	-1000, 10636, -1000, -1000, 3814, 382, 7536, 505, 492, 7536,
	7536, 7536, 7536, 7536, 7536, 7536, 7536, 7536, 7536, 7536,
	7536, 7536, 7536, 7536, 536, 1742, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 612, -1000, 900, 1077, 1077, -7,
	-7, -7, -7, -7, -7, 7796, 5710, 603, 812, 459,
	6756, 6230, 6230, 7016, 7016, 12445, 12445, 6230, 1069, 428,
	459, 12445, -1000, 603, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 30, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6230, 6230, 6230, 6230, 153, 12187, -1000, 12445, 10120,
	10120, 10120, 10120, 10120, -1000, 993, 991, -1000, 987, 983,
	1012, 12187, -1000, 801, 8830, 383, 868, -1000, 10378, -1000,
	-1000, 153, 715, 10120, 12187, -1000, -1000, 4633, 852, -25,
	824, -1000, -76, -58, 6490, 362, -1000, -1000, -1000, -1000,
	2995, 511, 1602, -98, -5, -1000, -1000, -1000, -1000, 936,
	-1000, 936, 202, 936, 936, 936, 26, 26, 26, 26,
	26, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 952, 951,
	-1000, 936, 936, 936, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 943, 216, 943, 937, 937, 950, 1066,
	-152, 597, 3541, 1056, 3541, 12187, -1000, 1598, 12187, -1000,
	12187, -1000, -1000, 12187, 3541, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	458, -1000, -1000, -1000, -1000, 1017, 7016, 7016, 4360, 7016,
	-1000, -1000, -1000, 1047, -1000, 1069, 1104, -1000, 1033, 1030,
	6230, -1000, -1000, 382, 430, -1000, -1000, 554, -1000, -1000,
	-1000, -1000, 342, 868, -1000, 1508, -1000, -1000, -1000, -1000,
	505, 7536, 7536, 7536, 1424, 1508, 1492, 194, 148, -7,
	5, 5, 34, 34, 34, 34, 34, 238, 238, -1000,
	-1000, -1000, -1000, 603, -1000, -1000, -1000, 603, 6230, 835,
	-1000, -1000, 7016, -1000, 603, 799, 799, 520, 681, 906,
	-1000, 340, 904, 799, 6230, 481, -1000, 7016, 603, -1000,
	-1000, 799, 603, 799, 799, 858, 868, -1000, 849, -1000,
	418, 932, 948, 966, 1052, -1000, -1000, -1000, -1000, 989,
	-1000, 985, -1000, -1000, -1000, -1000, -1000, 288, 283, 262,
	11929, -1000, 1117, 10120, 830, -1000, -1000, 824, -25, -40,
	-1000, -1000, -1000, 459, -1000, -1000, 583, 816, 2722, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 944, 965, 11929,
	189, 188, 260, 246, 581, -1000, -1000, -1000, 464, 333,
	1141, -1000, -1000, 179, -1000, 178, 868, 561, 12187, -1000,
	-194, -1000, -14, -1000, -1000, 529, 26, 26, 936, 26,
	-1000, -1000, 362, 1043, 362, 362, 362, 362, 560, 560,
	-154, -154, -1000, -1000, 526, 943, -1000, -1000, -1000, 517,
	-1000, 12187, 11929, 900, -1000, 4087, -1000, -1000, -1000, -1000,
	-1000, 1062, -1000, 836, 1154, 321, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 152, 314, -1000,
	3541, -1000, 463, 12187, 12187, 1004, 459, 459, 337, -1000,
	-1000, 12187, -1000, -1000, -1000, -1000, 881, -1000, -1000, -1000,
	3268, 6230, -1000, 1424, 1508, 1406, -1000, 7536, 7536, -1000,
	-1000, 799, 6230, 459, -1000, -1000, -1000, 962, 536, 962,
	7536, 7536, 4360, 7536, 7536, -128, 856, 431, -1000, 7016,
	425, -1000, -1000, -1000, -1000, -1000, 963, 12445, 868, -1000,
	8572, 11929, 1109, 12445, 7016, 7016, -1000, -1000, 7016, 942,
	-1000, 7016, -1000, -1000, -1000, 868, 868, 868, 775, -1000,
	1109, 830, -1000, -1000, -1000, -85, -91, -1000, -1000, 2995,
	-1000, 2995, 11929, 1145, 195, 207, -1000, 578, 576, -1000,
	568, -1000, -1000, -1000, -178, -1000, -1000, -1000, -1000, -1000,
	-1000, 868, 941, -106, -1000, -1000, 7016, -1000, 938, -1000,
	-1000, -1000, 706, 362, 362, 26, 362, -1000, 386, -1000,
	-1000, -1000, -1000, 796, -1000, 793, -1000, 68, 37, -1000,
	781, -1000, 779, 833, 957, -1000, 772, -1000, 397, 1082,
	102, -1000, 187, -1000, 11929, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11929, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 12187, -1000, -1000, -1000, -1000,
	-1000, 11929, 201, -1000, -1000, 557, 7016, -1000, -1000, -1000,
	4087, -1000, 1117, 10120, -1000, -1000, 603, -1000, 7536, 1508,
	1508, -1000, -1000, 603, 936, 936, -1000, 936, 937, -1000,
	-1000, 936, 82, 936, 81, 603, 603, 134, 635, -1000,
	100, 322, 868, -123, -1000, 459, 7016, -1000, 1053, 705,
	759, -1000, -1000, 5970, 603, 777, 331, 775, 1094, -1000,
	459, 459, 459, 9862, 459, 9862, 9862, 9862, 8314, 11929,
	1094, -1000, -1000, -1000, -1000, 2722, -1000, 770, -1000, 936,
	273, 273, 174, 171, -1000, -1000, -1000, -1000, 65, 603,
	-1000, 506, -1000, 687, 9862, -1000, -1000, -1000, 362, -1000,
	-1000, -1000, 26, 550, 26, -16, -19, 490, -1000, 479,
	9862, 11929, 12187, 4087, 2995, 257, 1098, -1000, -1000, 11929,
	-1000, -1000, -1000, 933, -1000, -1000, -1000, -1000, 1055, 11929,
	-1000, -1000, 459, 1114, 768, -1000, 1508, -1000, -1000, 181,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7536,
	7536, -1000, 7536, 7536, 7536, 603, 548, 459, 170, -1000,
	868, -1000, -1000, 880, 11929, 11929, -1000, -1000, 766, -1000,
	-1000, 764, 764, 764, 383, -1000, -1000, 265, 11929, -1000,
	934, -1000, -1000, 461, 110, 908, 11929, 918, 29, -154,
	-1000, -1000, 120, 754, -1000, 362, -1000, 362, -1000, -1000,
	699, 691, 752, 916, 915, -1000, -1000, 11929, -1000, -1000,
	-1000, -1000, -1000, 890, 9862, 868, 204, 1111, 1096, -1000,
	-1000, 389, 389, 389, 389, 33, -1000, -1000, 1139, -1000,
	868, -1000, 900, 328, -1000, 11929, -1000, -1000, -1000, -1000,
	-1000, 265, -1000, 508, 395, 542, -159, -1000, 1137, -1000,
	-1000, 1129, 886, -1000, 11929, -1000, -1000, -1000, -125, -1000,
	-1000, -1000, -1000, -1000, 1117, 9862, 9862, 689, -1000, 9862,
	750, 140, 166, -1000, 7016, 7016, -1000, -1000, -1000, -1000,
	603, 104, -161, 12445, 759, 603, 11929, -1000, -1000, -1000,
	478, -1000, -1000, 11929, 273, 273, 11929, 726, -1000, -1000,
	723, 695, -150, 11929, 7016, 693, 882, 665, -1000, 11929,
	884, 459, 746, -1000, 1002, -133, -164, 710, -1000, -1000,
	-1000, -1000, -1000, -1000, 617, -1000, 1117, -1000, -1000, -185,
	-1000, 459, -1000, -152, -1000, 140, 1029, 9862, -1000, 998,
	-1000, 199, -1000, 7016, -1000, -1000, 137, 602, -156, 12187,
	459, 130, -1000, -162, 883, 868, -174, 11929, 7276, -1000,
	589, 389, 603, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1373, 19, 664, 1372, 1369, 1367, 1365, 1364, 1363,
	1360, 1359, 1357, 1356, 1355, 1354, 1352, 1351, 1349, 1347,
	1344, 1343, 1341, 1337, 237, 1336, 1335, 1331, 57, 1330,
	81, 1329, 1327, 40, 74, 36, 39, 1255, 1326, 29,
	75, 108, 1322, 53, 1321, 1319, 83, 1318, 61, 1316,
	1315, 737, 1314, 1312, 15, 17, 1311, 44, 1310, 1308,
	70, 274, 1303, 1302, 1301, 1300, 1299, 1297, 50, 8,
	10, 41, 16, 1293, 87, 12, 1292, 45, 1289, 1285,
	1281, 1277, 47, 1275, 71, 1274, 23, 48, 1272, 65,
	51, 33, 25, 1, 82, 68, 1264, 32, 58, 52,
	1259, 1258, 552, 1257, 1251, 1249, 1248, 1246, 1240, 471,
	515, 1239, 1238, 1237, 54, 0, 435, 80, 76, 1236,
	43, 1235, 1404, 78, 73, 24, 1234, 49, 1580, 30,
	1230, 1229, 34, 66, 1227, 90, 89, 1226, 1222, 1220,
	1219, 1218, 184, 27, 21, 42, 1216, 1215, 1213, 13,
	37, 18, 46, 55, 1211, 1210, 1208, 28, 1207, 5,
	11, 2, 56, 1204, 1202, 1201, 1195, 31, 22, 1193,
	14, 4, 9, 1192, 1191, 3, 1190, 26, 1188, 6,
	1187, 7, 1182, 1180, 1179, 1178, 1174, 1172, 1171, 1170,
	1167, 1166, 59, 963, 1165, 1163, 1159, 1158, 84,
}

var yyR1 = [...]int{
	0, 190, 191, 191, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 194,
	194, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 183,
	183, 183, 184, 184, 184, 184, 184, 184, 186, 186,
	187, 187, 120, 120, 181, 181, 180, 179, 179, 178,
	178, 177, 188, 188, 16, 164, 165, 165, 165, 165,
	165, 153, 134, 134, 134, 134, 134, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 143,
	143, 189, 189, 185, 185, 185, 138, 138, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 137, 137,
	137, 137, 137, 137, 139, 139, 139, 139, 139, 135,
	135, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 141, 141, 141, 141, 141, 141, 141, 141, 152,
	152, 142, 142, 150, 150, 151, 151, 151, 149, 149,
	149, 146, 146, 147, 147, 148, 148, 148, 144, 144,
	144, 145, 145, 145, 155, 155, 173, 173, 172, 172,
	172, 172, 163, 163, 169, 169, 169, 169, 169, 169,
	169, 162, 162, 171, 171, 170, 157, 157, 157, 157,
	157, 158, 159, 159, 159, 159, 156, 160, 160, 161,
	161, 166, 166, 166, 167, 167, 167, 168, 168, 168,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 195, 195, 196, 196, 196, 196, 196,
	196, 196, 176, 174, 174, 175, 175, 13, 14, 14,
	14, 14, 14, 15, 15, 17, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 107,
	107, 104, 104, 105, 105, 106, 106, 106, 108, 108,
	108, 131, 131, 131, 19, 19, 21, 21, 22, 23,
	20, 20, 20, 20, 20, 197, 24, 25, 25, 26,
	26, 26, 30, 30, 30, 28, 28, 29, 29, 35,
	35, 34, 34, 36, 36, 36, 36, 119, 119, 119,
	118, 118, 38, 38, 39, 39, 40, 40, 41, 41,
	41, 53, 53, 89, 89, 89, 91, 91, 42, 42,
	42, 42, 43, 43, 44, 44, 45, 45, 126, 126,
	125, 125, 125, 124, 124, 47, 47, 47, 49, 48,
	48, 48, 48, 50, 50, 52, 52, 51, 51, 54,
	54, 54, 54, 55, 55, 37, 37, 37, 37, 37,
	37, 37, 103, 103, 57, 57, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 67, 67, 67, 67,
	67, 67, 58, 58, 58, 58, 58, 58, 58, 33,
	33, 68, 68, 68, 74, 69, 69, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 65,
	65, 65, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 198, 198, 66, 66,
	66, 66, 31, 31, 31, 31, 31, 129, 129, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 133, 133, 133, 133, 133, 133, 133,
	78, 78, 32, 32, 76, 76, 77, 79, 79, 75,
	75, 75, 60, 60, 60, 60, 60, 60, 60, 60,
	62, 62, 62, 80, 80, 81, 81, 82, 82, 83,
	83, 84, 85, 85, 85, 86, 86, 86, 86, 87,
	87, 87, 59, 59, 59, 59, 59, 59, 88, 88,
	88, 88, 92, 92, 70, 70, 72, 72, 71, 73,
	93, 93, 97, 94, 94, 98, 98, 98, 96, 96,
	96, 121, 121, 121, 101, 101, 109, 109, 110, 110,
	102, 102, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 112, 112, 112, 113, 113, 116, 116, 117,
	117, 122, 122, 123, 123, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 192, 193,
	127, 128, 128, 128,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 6, 5, 5, 5, 11, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 1, 3, 3, 3,
	3, 2, 3, 1, 1, 1, 1, 2, 2, 3,
	4, 3, 3, 3, 3, 3, 4, 2, 2, 3,
	2, 3, 2, 6, 3, 3, 5, 3, 6, 2,
	3, 0, 2, 0, 3, 3, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
	2, 2, 2, 2, 1, 3, 3, 2, 1, 1,
	1, 4, 4, 4, 5, 2, 2, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 3,
	3, 0, 1, 0, 1, 0, 2, 1, 0, 3,
	3, 0, 1, 2, 5, 4, 1, 2, 2, 3,
	2, 3, 0, 1, 2, 3, 3, 2, 3, 2,
	2, 1, 1, 1, 3, 2, 1, 4, 4, 7,
	7, 13, 1, 1, 2, 2, 7, 0, 1, 1,
	3, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	6, 11, 13, 7, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 3,
	6, 4, 2, 4, 2, 2, 2, 2, 3, 1,
	1, 0, 1, 0, 1, 0, 2, 2, 0, 2,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 7, 1, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 3, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 6, 8, 8,
	6, 8, 8, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 1, 2, 1, 2,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -190, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 142, 115, 135, 48, 163, 164,
	166, 167, 25, 136, 137, 140, 141, -192, 8, 258,
	52, -191, 278, -82, 15, -26, 5, -24, -197, -24,
	-24, -24, -24, -24, -164, 52, -120, -188, 150, 250,
	117, 132, 118, 133, 69, -102, 120, 122, 118, 118,
	119, 120, 250, 117, 118, -51, -122, 55, -115, 157,
	267, 20, 163, 176, 177, 168, 202, 192, 268, 155,
	189, 193, 237, 277, 64, 166, 246, 126, 161, 138,
	187, 183, 180, 27, 208, 274, 182, 129, 209, 213,
	238, 265, 173, 174, 240, 206, 31, 131, 269, 33,
	146, 241, 211, 205, 200, 204, 172, 199, 37, 215,
	214, 216, 236, 195, 156, 218, 184, 18, 141, 144,
	210, 212, 181, 158, 124, 148, 273, 242, 179, 145,
	159, 140, 245, 154, 167, 239, 175, 248, 36, 222,
	170, 171, 128, 164, 152, 197, 147, 185, 186, 203,
	169, 198, 165, 149, 142, 247, 223, 275, 196, 194,
	190, 191, 153, 120, 150, 151, 229, 230, 231, 232,
	270, 271, 243, 188, 224, 225, 118, 105, 193, 111,
	227, 119, 31, 148, -131, 118, -104, 151, 229, 230,
	231, 232, 55, 239, 238, 233, -122, 165, -127, -127,
	-127, -127, -127, -2, -86, 17, 16, -5, -3, -192,
	6, 20, 21, -30, 38, 39, -25, -36, 96, -37,
	-122, -56, 71, -61, 28, 55, -115, 23, -60, -57,
	-75, -73, -74, 105, 106, 94, 95, 102, 72, 107,
	-65, -63, -64, -66, 57, 56, 65, 58, 59, 60,
	61, 66, 67, 68, -116, -71, -192, 42, 43, 259,
	260, 261, 262, 266, 263, 74, 32, 249, 257, 256,
	255, 253, 254, 251, 252, 276, 123, 250, 100, 258,
	-102, -39, -40, -41, -42, -53, -74, -192, -51, 11,
	-46, -51, -94, -130, 165, -98, 239, 238, -117, -96,
	-116, -114, 237, 193, 236, 55, -115, 116, 70, 22,
	24, 220, 226, 73, 105, 16, 74, 104, 259, 111,
	46, 251, 252, 249, 261, 262, 250, 227, 28, 10,
	25, 136, 21, 98, 113, 77, 78, 139, 23, 137,
	68, 19, 49, 130, 11, 13, 14, 123, 122, 89,
	119, 44, 8, 107, 26, 86, 40, 134, 42, 87,
	17, 253, 254, 30, 266, 143, 100, 47, 34, 71,
	66, 50, 244, 69, 15, 45, 132, 88, 114, 258,
	43, 117, 6, 264, 29, 135, 41, 118, 228, 76,
	121, 67, 5, 133, 9, 48, 51, 255, 256, 257,
	32, 75, 12, -165, -153, 55, 119, 120, -116, -110,
	123, -110, -116, -110, 258, 118, -51, -51, -109, 123,
	55, -109, -109, -109, -51, 108, -51, 55, 29, 250,
	55, 148, 118, 149, 120, -128, -192, -117, -128, -128,
	-128, 152, 153, -128, -105, 234, 50, -128, -193, 54,
	-87, 19, 30, -37, -122, -83, -84, -37, -82, -2,
	-24, 34, -28, 21, 63, 11, -119, 70, 69, 86,
	-118, 22, -116, 57, 108, -37, -58, 89, 71, 87,
	88, 73, 91, 90, 101, 94, 95, 96, 97, 98,
	99, 100, 92, 93, 104, 276, 79, 80, 81, 82,
	83, 84, 85, -103, -192, -74, -192, 109, 110, -61,
	-61, -61, -61, -61, -61, -61, -192, -2, -69, -37,
	-192, -192, -192, -192, -192, -192, -192, -192, -192, -78,
	-37, -192, -198, -192, -198, -198, -198, -198, -198, -198,
	-198, -133, 105, 193, 138, 187, -136, -135, 197, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 192,
	268, -192, -192, -192, -192, -52, 26, -51, 29, 53,
	-47, -49, -48, -50, 40, 44, 46, 41, 42, 43,
	47, -126, 22, -39, -192, -125, 144, -124, 22, -122,
	57, -51, -46, -194, 53, 11, 51, 53, -94, 165,
	-95, -99, 240, 242, 79, -121, -116, 57, 28, 29,
	54, 53, -154, -134, -138, -135, -140, -139, -141, -136,
	-137, 189, 193, 190, 105, 194, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 207, 196, 208, 29,
	138, 185, 186, 187, 188, 209, 210, 211, 212, 213,
	214, 215, 216, 179, 180, 182, 183, 184, -116, -51,
	-181, 51, 55, 71, 55, 50, -51, -51, 244, -128,
	121, -51, 23, 50, -51, 55, 55, -123, -122, -114,
	-128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
	-107, 228, 235, -51, 9, 89, 53, 18, 108, 53,
	-85, 24, 25, -86, -193, -30, -62, -116, 58, 61,
	-29, 41, -51, -37, -37, -67, 66, 71, 67, 68,
	-118, 96, -123, -117, -114, -61, -68, -71, -74, 62,
	89, 87, 88, 73, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -129,
	55, 57, -133, 55, -60, -60, -116, -35, 21, -34,
	-36, -193, 53, -193, -2, -34, -34, -37, -37, -75,
	-116, -122, -75, -34, -28, -76, -77, 75, -75, -193,
	191, -34, -35, -34, -34, -90, 144, -51, -93, -97,
	-75, -40, -41, -41, -40, -41, 40, 40, 40, 45,
	40, 45, 40, -48, -122, -193, -54, 48, 122, 49,
	-192, -124, -90, 51, -39, -51, -98, -95, 53, 241,
	243, 244, 50, -37, -145, 105, 104, -166, -167, -168,
	-117, 57, 58, -153, -155, -157, -156, -169, -158, 126,
	124, 128, 129, 133, -162, 119, 134, 66, 71, 28,
	50, 220, 226, 124, 134, 133, 277, 64, 127, -148,
	279, 217, -146, 223, -142, 52, -142, -142, 191, -142,
	-142, -142, -144, 193, -144, -144, -144, -144, 52, 52,
	-142, -142, -142, -150, 52, 181, -150, -150, -151, 52,
	-151, 50, 51, 22, -179, 270, -180, 55, -128, 23,
	-128, -51, -111, 116, 113, 114, -176, 112, 220, 193,
	64, 28, 15, 259, 144, 275, 55, 145, -51, -51,
	-51, -128, -106, 11, 89, 36, -37, -37, -123, -84,
	-87, -101, 19, 11, 32, 32, -34, 66, 67, 68,
	108, -192, -68, -61, -61, -61, -33, 139, 70, -193,
	-193, -34, 53, -37, -193, -193, -193, 53, 51, 22,
	53, 11, 108, 53, 11, -193, -34, -79, -77, 77,
	-37, -193, -193, -193, -193, -193, -59, 29, 32, -2,
	-192, -192, -55, 53, 12, 79, -44, -43, 50, 51,
	-45, 50, -43, 40, 40, 119, 119, 119, -91, -116,
	-55, -39, -55, -99, -100, 245, 242, 248, 55, 53,
	-168, 79, 52, 50, -160, -116, 134, -162, -162, 55,
	-162, 55, 55, 66, 57, 58, 59, 66, -143, 65,
	-57, 218, 249, 9, 134, 134, -192, 57, -122, 280,
	-147, 224, 58, -144, -144, -142, -144, -145, 29, -145,
	-145, -145, -145, -152, 57, -152, -149, 270, 271, -149,
	58, -150, 58, -51, -116, -2, -178, -177, -117, -183,
	22, -127, -120, -196, 150, 125, 130, 129, 55, 124,
	128, 144, -182, 150, 125, 126, 130, 129, 55, 119,
	134, 124, 128, 144, 133, -112, -113, 121, 22, 119,
	134, 144, 116, -128, -108, 87, 12, -122, -122, 37,
	108, -51, -38, 11, 96, -117, -35, -33, 70, -61,
	-61, -193, -36, -132, 105, 189, 138, 187, 183, 206,
	207, 195, 222, 185, 223, -129, -132, -61, -61, -117,
	-61, -61, 267, -82, 78, -37, 76, -92, 50, -93,
	-70, -72, -71, -192, -2, -88, -116, -91, -82, -97,
	-37, -37, -37, 52, -37, -192, -192, -192, -193, 53,
	-82, -55, 242, 246, 247, -167, -168, -171, -170, -116,
	10, 9, 130, 124, 55, 55, 55, -185, 276, -192,
	-142, 52, -143, -37, 52, 54, -145, -145, -144, -145,
	55, 105, 54, 53, 54, 185, 185, 53, 54, 53,
	52, 51, 50, 53, 79, -184, 19, 158, 159, -195,
	119, 134, -127, -116, -127, -116, -51, -127, -116, 126,
	-157, 57, -37, -55, -39, -193, -61, -193, -142, -142,
	-142, -151, -142, 174, -142, 174, -193, -193, -193, 53,
	19, -193, 53, 19, -192, -32, 264, -37, 27, -92,
	53, -193, -193, -193, 53, 108, -193, -86, -89, -116,
	134, -89, -89, -89, -125, -116, -86, 54, 53, -142,
	-159, 154, 155, 29, 156, -159, 134, 134, 193, 186,
	-193, 54, -193, -89, -145, -144, 57, -144, 225, 225,
	58, 58, -89, -116, -51, -177, -168, 121, 20, 6,
	8, 9, 10, -116, 52, 26, -116, -80, 13, -144,
	55, -61, -61, -61, -61, -61, -193, 57, 134, -72,
	32, -2, -192, -116, -116, 53, 54, -193, -193, -193,
	-54, -173, -172, 51, 131, 64, 270, -170, 50, 66,
	157, 50, -160, -116, 52, 191, -149, -189, 156, 54,
	-145, -145, 54, 54, 54, 52, 52, -161, -116, 52,
	-89, -192, 124, -81, 14, 16, -193, -193, -193, -193,
	-31, 89, 270, 9, -70, -2, 108, -116, -172, 55,
	-163, 79, 57, 272, 9, 10, 52, -171, 265, -55,
	-89, -89, -186, 53, 51, -89, 54, -174, -175, 144,
	134, -37, -69, -193, 268, 47, 273, -93, -193, -116,
	58, -116, -159, -159, -161, 54, 54, 54, -187, 270,
	-116, -37, 54, -181, -193, 53, -116, 52, 37, 269,
	274, 54, -55, 277, -179, -175, 32, -89, 37, 127,
	-37, 146, 54, 270, -51, 147, 273, 52, -192, 274,
	-161, -61, 143, 54, -193, -193,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 597, 0, 355, 355, 355, 355, 355, 355, 0,
	-2, 650, 0, 0, 0, 0, -2, 345, 346, 0,
	348, 349, 890, 890, 890, 890, 890, 0, 33, 34,
	888, 1, 3, 605, 0, 0, 359, 362, 357, 0,
	650, 0, 0, 0, 60, 0, 0, 0, 0, 648,
	648, 0, 648, 83, 0, 0, 0, 651, 0, 646,
	0, 646, 646, 646, 0, 304, 427, 671, 672, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 0, 0, 0, 0,
	891, 891, 891, 891, 0, 891, 333, 322, 324, 325,
	326, 327, 891, 342, 343, 332, 344, 347, 350, 351,
	352, 353, 354, 27, 609, 0, 0, 597, 29, 0,
	355, 360, 361, 365, 363, 364, 356, 0, 373, 377,
	0, 435, 0, 440, 442, -2, -2, 0, 477, 478,
	479, 480, 481, 0, 0, 0, 0, 0, 0, 0,
	505, 506, 507, 508, 582, 583, 584, 585, 586, 587,
	588, 589, 444, 445, 579, 629, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 570, 0, 536, 536, 536,
	536, 536, 536, 536, 536, 0, 0, 0, 0, 0,
	0, 0, 384, 386, 387, 388, 408, 0, 410, 0,
	0, 41, 45, 0, 864, 633, -2, -2, 0, 0,
	669, 670, -2, 783, -2, 667, 668, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 0, 96, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 93, 0, 891, 0, 0, 0,
	0, 0, 0, 0, 303, 0, 305, 891, 891, 891,
	891, 891, 891, 891, 891, 314, 892, 893, 315, 316,
	317, 891, 891, 319, 0, 334, 0, 328, 28, 889,
	22, 0, 0, 606, 0, 598, 599, 602, 605, 27,
	362, 0, 367, 366, 358, 0, 374, 0, 0, 0,
	378, 0, 380, 381, 0, 438, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 462, 463, 464, 465,
	466, 467, 468, 441, 0, 455, 0, 0, 0, 497,
	498, 499, 500, 501, 502, 0, 369, 27, 0, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 0,
	571, 0, 527, 0, 528, 529, 530, 531, 532, 533,
	534, 535, 563, 0, 565, 566, 567, 568, 569, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 159,
	160, 0, 369, 0, 0, 43, 0, 426, 0, 0,
	0, 0, 0, 0, 415, 0, 0, 418, 0, 0,
	0, 0, 409, 0, 0, 429, 831, 411, 0, 413,
	414, -2, 0, 0, 0, 39, 40, 0, 46, 864,
	48, 49, 0, 0, 0, 211, 641, 642, 643, 639,
	251, 0, 101, 205, 201, 103, 104, 105, 106, 191,
	137, 191, 191, 191, 191, 191, 208, 208, 208, 208,
	208, 172, 173, 174, 175, 176, 177, 178, 0, 0,
	154, 191, 191, 191, 158, 181, 182, 183, 184, 185,
	186, 187, 188, 193, 193, 193, 195, 195, 0, 0,
	87, 0, 891, 0, 891, 0, 94, 0, 0, 270,
	0, 298, 647, 0, 891, 301, 302, 428, 673, 674,
	306, 307, 308, 309, 310, 311, 312, 313, 318, 321,
	335, 329, 330, 323, 610, 0, 0, 0, 0, 0,
	601, 603, 604, 609, 30, 365, 0, 590, 0, 0,
	0, 368, 25, 436, 437, 439, 456, 0, 458, 460,
	379, 375, 0, 580, -2, 446, 447, 471, 472, 473,
	0, 0, 0, 0, 469, 451, 0, 482, 483, 484,
	485, 486, 487, 488, 489, 490, 491, 492, 493, 496,
	547, 548, 504, 0, 494, 495, 503, 0, 0, 370,
	371, 474, 0, 628, 27, 0, 0, 0, 0, 0,
	579, 0, 0, 0, 0, 577, 574, 0, 0, 537,
	564, 0, 0, 0, 0, 0, 0, 425, 433, 630,
	0, 385, 404, 406, 0, 401, 416, 417, 419, 0,
	421, 0, 423, 424, 389, 390, 391, 0, 0, 0,
	0, 412, 433, 0, 433, 42, 634, 47, 0, 0,
	52, 53, 635, 636, 637, 212, 0, 95, 252, 254,
	257, 258, 259, 97, 98, 99, 100, 0, 236, 247,
	0, 0, 0, 0, 0, 231, 232, 108, 0, 0,
	0, 117, 118, 0, 120, 122, 0, 0, 0, 107,
	0, 207, 203, 202, 136, 0, 208, 208, 191, 208,
	165, 166, 211, 0, 211, 211, 211, 211, 0, 0,
	198, 198, 157, 148, 0, 193, 150, 151, 152, 0,
	153, 0, 0, 0, 65, 0, 85, 86, 66, 649,
	67, 69, 890, 82, 0, 662, 271, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 661, 0, 0, 297,
	891, 300, 338, 0, 0, 0, 607, 608, 0, 600,
	23, 0, 644, 645, 591, 592, 382, 457, 459, 461,
	0, 369, 448, 469, 452, 0, 449, 0, 0, 443,
	509, 0, 0, 476, -2, 512, 513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 597, 0, 575, 0,
	0, 526, 538, 539, 540, 541, 622, 0, 0, -2,
	0, 0, 597, 0, 0, 0, 398, 405, 0, 0,
	399, 0, 400, 420, 422, 0, 0, 0, 0, 396,
	597, 433, 38, 50, 51, 0, 0, 57, 213, 0,
	255, 0, 0, 0, 0, 248, 224, 0, 0, 227,
	0, 229, 230, 109, 133, 111, 112, 113, 114, 115,
	125, 0, 191, 0, 119, 121, 0, 124, 127, 206,
	102, 204, 0, 211, 211, 208, 211, 167, 0, 168,
	169, 170, 171, 0, 189, 0, 155, 0, 0, 156,
	0, 149, 0, 0, 0, -2, 88, 89, 0, 72,
	0, 260, 0, 890, 0, 285, 286, 287, 288, 289,
	290, 291, 890, 0, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 282, 0, 890, 663, 664, 665,
	666, 0, 0, 299, 320, 0, 0, 336, 337, 611,
	0, 24, 433, 0, 376, 581, 0, 450, 0, 470,
	453, 510, 372, 0, 191, 191, 552, 191, 195, 555,
	556, 191, 558, 191, 561, 0, 0, 0, 0, 580,
	0, 0, 0, 572, 525, 578, 0, 31, 0, 622,
	612, 624, 626, 0, 27, 0, 618, 0, 605, 631,
	434, 632, 402, 0, 407, 0, 0, 0, 410, 0,
	605, 37, 54, 55, 56, 253, 256, 0, 233, 191,
	0, 0, 0, 0, 225, 226, 228, 110, 0, 0,
	129, 0, 116, 0, 0, 192, 161, 162, 211, 163,
	209, 210, 208, 0, 208, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 0, 0, 70, 71, 0,
	283, 284, 264, 0, 265, 267, 268, 269, 0, 247,
	263, 339, 340, 593, 383, 511, 454, 514, 549, 208,
	553, 554, 557, 559, 560, 562, 516, 515, 517, 0,
	0, 520, 0, 0, 0, 0, 0, 576, 0, 32,
	0, 627, -2, 0, 0, 0, 44, 35, 0, 393,
	394, 0, 0, 0, 429, 397, 36, 215, 0, 235,
	237, 242, 243, 0, 0, 238, 247, 0, 0, 198,
	126, 130, 131, 0, 164, 211, 190, 211, 199, 200,
	0, 0, 0, 0, 0, 90, 91, 0, 73, 74,
	75, 76, 77, 0, 0, 0, 248, 595, 0, 550,
	551, 0, 0, 0, 0, 542, 524, 573, 0, 625,
	0, -2, 0, 620, 619, 0, 403, 430, 431, 432,
	392, 214, 216, 0, 222, 0, 0, 234, 0, 244,
	245, 0, 0, 248, 0, 134, 135, 123, 0, 128,
	179, 180, 194, 197, 433, 0, 0, 78, 249, 0,
	0, 0, 0, 26, 0, 0, 518, 519, 521, 522,
	0, 0, 0, 0, 615, 27, 0, 395, 217, 218,
	0, 223, 220, 0, 0, 0, 0, 0, 132, 61,
	0, 0, 80, 0, 0, 0, 84, 0, 293, 0,
	0, 596, 594, 523, 0, 0, 0, 623, -2, 621,
	219, 221, 239, 240, 0, 246, 433, 62, 68, 0,
	250, 79, 261, 87, 292, 0, 0, 0, 543, 0,
	546, 0, 63, 0, 266, 294, 0, 0, 544, 0,
	81, 0, 262, 0, 0, 0, 0, 0, 0, 545,
	0, 0, 0, 241, 295, 296,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 278,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 279, 3, 280, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:319
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:324
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:325
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:329
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:352
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:360
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:364
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:370
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:377
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:383
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:387
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:393
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:397
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:404
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:416
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:428
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:432
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:438
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:444
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:448
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:452
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:457
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:458
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:462
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:466
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:471
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:475
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:481
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:485
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:489
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:493
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:499
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:503
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:509
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:513
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:517
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:523
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:527
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:531
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:535
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:541
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:545
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:551
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:556
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:572
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:587
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:602
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:610
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:618
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:622
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:626
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:638
		{
			yyVAL.bytes = nil
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:642
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:646
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:651
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:655
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:659
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:663
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:667
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:671
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:676
		{
			yyVAL.expr = nil
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:680
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:685
		{
			yyVAL.expr = nil
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:689
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:694
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:698
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:703
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:707
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:713
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:718
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:723
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:729
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:734
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:740
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:745
		{
			yyVAL.bytes = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:749
		{
			yyVAL.bytes = nil
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:755
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:762
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:769
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:774
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:778
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:782
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:786
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:792
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:797
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:808
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:819
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:824
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:829
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:834
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:839
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:844
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:849
		{
			yyDollar[1].columnType.Default = yyDollar[3].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:854
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:859
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:864
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:869
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:874
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:879
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:884
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:889
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:894
		{
			yyDollar[1].columnType.Check = NewWhere(WhereStr, yyDollar[4].expr)
			yyDollar[1].columnType.CheckNoInherit = yyDollar[6].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:900
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:905
		{
			yyDollar[1].columnType.Default = NewBoolSQLVal(bool(yyDollar[3].boolVal))
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:910
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:915
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:920
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:928
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:932
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:937
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:941
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:946
		{
			yyVAL.bytes = nil
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:954
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:959
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1001
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1013
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1019
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1031
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1037
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1045
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1049
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1053
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1057
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1061
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1077
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1081
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1085
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1089
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1093
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1097
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1101
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1105
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1109
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1113
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1117
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1121
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1125
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1129
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1133
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1137
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1141
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1145
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1149
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1160
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1164
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1168
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1172
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1176
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1180
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1184
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1188
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1194
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1199
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1204
		{
			yyVAL.optVal = nil
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1208
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1213
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1217
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1225
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1229
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 197:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1235
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1243
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1247
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1251
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1256
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1260
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1265
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1269
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1274
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1278
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1282
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1287
		{
			yyVAL.str = ""
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1291
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1295
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1300
		{
			yyVAL.str = ""
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1304
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1308
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1314
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1318
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1324
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1328
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1334
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1338
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1343
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1347
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1353
		{
			yyVAL.str = ""
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1357
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1363
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1367
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1371
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1375
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1379
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1383
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1387
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1393
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1397
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1403
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1407
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1413
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1420
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1426
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 239:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1432
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1438
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 241:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1446
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1458
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1462
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1466
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1470
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 246:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1476
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:    &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true},
				Columns: yyDollar[6].indexColumns,
			}
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1484
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1491
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1495
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1500
		{
			yyVAL.str = ""
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1504
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1508
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1516
		{
			yyVAL.str = yyDollar[1].str
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1520
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1524
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1530
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1534
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1538
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1544
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 261:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1548
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 262:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1562
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 263:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1576
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 264:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1585
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 265:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1589
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1593
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 267:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1606
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 268:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1616
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1621
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1626
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 271:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1630
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 292:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1662
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1668
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1672
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 295:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1678
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 296:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1682
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1688
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1694
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 299:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1702
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1707
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1715
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1719
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1725
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1729
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1734
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1740
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1744
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1748
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1753
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1757
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1761
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1765
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1769
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1773
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1777
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1781
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1785
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1789
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1793
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1797
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1807
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1811
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1815
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1819
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1823
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1827
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1831
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1841
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1847
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1851
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1857
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1861
		{
			yyVAL.str = "extended "
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1867
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1871
		{
			yyVAL.str = "full "
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1877
		{
			yyVAL.str = ""
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1881
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1885
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1891
		{
			yyVAL.showFilter = nil
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1895
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1899
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1905
		{
			yyVAL.str = ""
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1909
		{
			yyVAL.str = SessionStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1913
		{
			yyVAL.str = GlobalStr
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1919
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1923
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1929
		{
			yyVAL.statement = &Begin{}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1933
		{
			yyVAL.statement = &Begin{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1939
		{
			yyVAL.statement = &Commit{}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1945
		{
			yyVAL.statement = &Rollback{}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1951
		{
			yyVAL.statement = &OtherRead{}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1955
		{
			yyVAL.statement = &OtherRead{}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1959
		{
			yyVAL.statement = &OtherRead{}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1963
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1967
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1972
		{
			setAllowComments(yylex, true)
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1976
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1982
		{
			yyVAL.bytes2 = nil
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1986
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1992
		{
			yyVAL.str = UnionStr
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1996
		{
			yyVAL.str = UnionAllStr
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2000
		{
			yyVAL.str = UnionDistinctStr
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2005
		{
			yyVAL.str = ""
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2009
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2013
		{
			yyVAL.str = SQLCacheStr
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2018
		{
			yyVAL.str = ""
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2022
		{
			yyVAL.str = DistinctStr
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2027
		{
			yyVAL.str = ""
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2031
		{
			yyVAL.str = StraightJoinHint
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2036
		{
			yyVAL.selectExprs = nil
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2040
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2046
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2050
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2056
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2060
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2064
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 376:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2068
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2073
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2077
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2081
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2088
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2093
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2097
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2103
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2107
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2117
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2121
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2125
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2131
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 392:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2135
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2141
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2146
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2150
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2156
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2160
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2173
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2177
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2181
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2185
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2191
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2193
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2197
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2199
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2203
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2205
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2208
		{
			yyVAL.empty = struct{}{}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2210
		{
			yyVAL.empty = struct{}{}
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2213
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2217
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2221
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2228
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2234
		{
			yyVAL.str = JoinStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2238
		{
			yyVAL.str = JoinStr
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2242
		{
			yyVAL.str = JoinStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2248
		{
			yyVAL.str = StraightJoinStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2254
		{
			yyVAL.str = LeftJoinStr
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2258
		{
			yyVAL.str = LeftJoinStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2262
		{
			yyVAL.str = RightJoinStr
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2266
		{
			yyVAL.str = RightJoinStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2272
		{
			yyVAL.str = NaturalJoinStr
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2276
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2286
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2290
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2296
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2300
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2305
		{
			yyVAL.indexHints = nil
		}
	case 430:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2309
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 431:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2313
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 432:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2317
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2322
		{
			yyVAL.expr = nil
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2326
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2332
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2336
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2340
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2344
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2348
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2352
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2356
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2362
		{
			yyVAL.str = ""
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2366
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2372
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2376
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2382
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2386
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2390
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2394
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2398
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2402
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2406
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2410
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 454:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2414
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2418
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2424
		{
			yyVAL.str = IsNullStr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2428
		{
			yyVAL.str = IsNotNullStr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2432
		{
			yyVAL.str = IsTrueStr
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2436
		{
			yyVAL.str = IsNotTrueStr
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2440
		{
			yyVAL.str = IsFalseStr
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2444
		{
			yyVAL.str = IsNotFalseStr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2450
		{
			yyVAL.str = EqualStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2454
		{
			yyVAL.str = LessThanStr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2458
		{
			yyVAL.str = GreaterThanStr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2462
		{
			yyVAL.str = LessEqualStr
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2466
		{
			yyVAL.str = GreaterEqualStr
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2470
		{
			yyVAL.str = NotEqualStr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2474
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2479
		{
			yyVAL.expr = nil
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2483
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2489
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2493
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2497
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2503
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2509
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2513
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2519
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2523
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2527
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2531
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2535
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2539
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2543
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2547
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2551
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2555
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2559
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2563
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2567
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2571
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2575
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2579
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2583
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2587
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2591
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2595
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2599
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2603
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2607
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2615
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2629
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2633
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2637
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2645
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2659
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 510:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2663
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 511:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2667
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2677
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2681
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 514:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2685
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 515:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2689
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 516:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2693
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 517:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2697
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 518:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2701
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 519:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2705
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 520:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2709
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 521:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2713
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 522:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2717
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 523:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2721
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 524:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2725
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 525:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2729
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2733
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2743
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2747
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2751
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2755
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2760
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2765
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2770
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2775
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2779
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2793
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2797
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2801
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2805
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2811
		{
			yyVAL.str = ""
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2815
		{
			yyVAL.str = BooleanModeStr
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2819
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 545:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2823
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2827
		{
			yyVAL.str = QueryExpansionStr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2833
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2837
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2843
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2847
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2851
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2855
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2859
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2863
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2869
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2873
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2877
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2881
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2885
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2889
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2893
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2897
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2903
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2907
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2911
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2915
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2919
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2923
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2927
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2932
		{
			yyVAL.expr = nil
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2936
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2941
		{
			yyVAL.str = string("")
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2945
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2951
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2955
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2961
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2966
		{
			yyVAL.expr = nil
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2970
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2976
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2980
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2984
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2990
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2994
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2998
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3002
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3006
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3010
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3014
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3018
		{
			yyVAL.expr = &NullVal{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3024
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3033
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3037
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3042
		{
			yyVAL.exprs = nil
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3046
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3051
		{
			yyVAL.expr = nil
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3055
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3060
		{
			yyVAL.orderBy = nil
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3064
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3070
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3074
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3080
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3085
		{
			yyVAL.str = AscScr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3089
		{
			yyVAL.str = AscScr
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3093
		{
			yyVAL.str = DescScr
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3098
		{
			yyVAL.limit = nil
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3102
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3106
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3110
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3115
		{
			yyVAL.str = ""
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3119
		{
			yyVAL.str = ForUpdateStr
		}
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3123
		{
			yyVAL.str = ShareModeStr
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3136
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3140
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3144
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3149
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3153
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 617:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3157
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3164
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3168
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3172
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 621:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3176
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3181
		{
			yyVAL.updateExprs = nil
		}
	case 623:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3185
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3191
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3195
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3201
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3205
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3211
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3217
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3227
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3231
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3237
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3243
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3247
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3253
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3257
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3261
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3268
		{
			yyVAL.bytes = []byte("charset")
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3275
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3279
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3283
		{
			yyVAL.expr = &Default{}
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3292
		{
			yyVAL.byt = 0
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3294
		{
			yyVAL.byt = 1
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3297
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3299
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3302
		{
			yyVAL.str = ""
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3304
		{
			yyVAL.str = IgnoreStr
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3308
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3310
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3312
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3314
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3316
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3318
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3320
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3322
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3324
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3326
		{
			yyVAL.empty = struct{}{}
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3329
		{
			yyVAL.empty = struct{}{}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3331
		{
			yyVAL.empty = struct{}{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3333
		{
			yyVAL.empty = struct{}{}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3337
		{
			yyVAL.empty = struct{}{}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3339
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3343
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3347
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3354
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3360
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3364
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3371
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3610
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3619
		{
			decNesting(yylex)
		}
	case 890:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3624
		{
			forceEOF(yylex)
		}
	case 891:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3629
		{
			forceEOF(yylex)
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3633
		{
			forceEOF(yylex)
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3637
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
