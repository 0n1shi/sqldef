// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	newQualifierColName  *NewQualifierColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
	blockStatement       []Statement
	localVariable        *LocalVariable
	localVariables       []*LocalVariable
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const REFERENCES = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const POLICY = 57459
const WHILE = 57460
const UNIQUE = 57461
const KEY = 57462
const SHOW = 57463
const DESCRIBE = 57464
const EXPLAIN = 57465
const DATE = 57466
const ESCAPE = 57467
const REPAIR = 57468
const OPTIMIZE = 57469
const TRUNCATE = 57470
const MAXVALUE = 57471
const PARTITION = 57472
const REORGANIZE = 57473
const LESS = 57474
const THAN = 57475
const PROCEDURE = 57476
const TRIGGER = 57477
const VINDEX = 57478
const VINDEXES = 57479
const STATUS = 57480
const VARIABLES = 57481
const RESTRICT = 57482
const CASCADE = 57483
const NO = 57484
const ACTION = 57485
const PERMISSIVE = 57486
const RESTRICTIVE = 57487
const PUBLIC = 57488
const CURRENT_USER = 57489
const SESSION_USER = 57490
const PAD_INDEX = 57491
const FILLFACTOR = 57492
const IGNORE_DUP_KEY = 57493
const STATISTICS_NORECOMPUTE = 57494
const STATISTICS_INCREMENTAL = 57495
const ALLOW_ROW_LOCKS = 57496
const ALLOW_PAGE_LOCKS = 57497
const BEFORE = 57498
const AFTER = 57499
const EACH = 57500
const ROW = 57501
const SCROLL = 57502
const CURSOR = 57503
const OPEN = 57504
const CLOSE = 57505
const FETCH = 57506
const PRIOR = 57507
const FIRST = 57508
const LAST = 57509
const DEALLOCATE = 57510
const BEGIN = 57511
const START = 57512
const TRANSACTION = 57513
const COMMIT = 57514
const ROLLBACK = 57515
const BIT = 57516
const TINYINT = 57517
const SMALLINT = 57518
const SMALLSERIAL = 57519
const MEDIUMINT = 57520
const INT = 57521
const INTEGER = 57522
const SERIAL = 57523
const BIGINT = 57524
const BIGSERIAL = 57525
const INTNUM = 57526
const REAL = 57527
const DOUBLE = 57528
const PRECISION = 57529
const FLOAT_TYPE = 57530
const DECIMAL = 57531
const NUMERIC = 57532
const SMALLMONEY = 57533
const MONEY = 57534
const TIME = 57535
const TIMESTAMP = 57536
const DATETIME = 57537
const YEAR = 57538
const DATETIMEOFFSET = 57539
const DATETIME2 = 57540
const SMALLDATETIME = 57541
const CHAR = 57542
const VARCHAR = 57543
const VARYING = 57544
const BOOL = 57545
const CHARACTER = 57546
const VARBINARY = 57547
const NCHAR = 57548
const NVARCHAR = 57549
const NTEXT = 57550
const UUID = 57551
const TEXT = 57552
const TINYTEXT = 57553
const MEDIUMTEXT = 57554
const LONGTEXT = 57555
const CITEXT = 57556
const BLOB = 57557
const TINYBLOB = 57558
const MEDIUMBLOB = 57559
const LONGBLOB = 57560
const JSON = 57561
const JSONB = 57562
const ENUM = 57563
const GEOMETRY = 57564
const POINT = 57565
const LINESTRING = 57566
const POLYGON = 57567
const GEOMETRYCOLLECTION = 57568
const MULTIPOINT = 57569
const MULTILINESTRING = 57570
const MULTIPOLYGON = 57571
const ARRAY = 57572
const NOW = 57573
const GETDATE = 57574
const BPCHAR = 57575
const NULLX = 57576
const AUTO_INCREMENT = 57577
const APPROXNUM = 57578
const SIGNED = 57579
const UNSIGNED = 57580
const ZEROFILL = 57581
const ZONE = 57582
const AUTOINCREMENT = 57583
const DATABASES = 57584
const TABLES = 57585
const VITESS_KEYSPACES = 57586
const VITESS_SHARDS = 57587
const VITESS_TABLETS = 57588
const VSCHEMA_TABLES = 57589
const EXTENDED = 57590
const FULL = 57591
const PROCESSLIST = 57592
const NAMES = 57593
const CHARSET = 57594
const GLOBAL = 57595
const SESSION = 57596
const ISOLATION = 57597
const LEVEL = 57598
const READ = 57599
const WRITE = 57600
const ONLY = 57601
const REPEATABLE = 57602
const COMMITTED = 57603
const UNCOMMITTED = 57604
const SERIALIZABLE = 57605
const NEW = 57606
const CURRENT_TIMESTAMP = 57607
const DATABASE = 57608
const CURRENT_DATE = 57609
const CURRENT_TIME = 57610
const LOCALTIME = 57611
const LOCALTIMESTAMP = 57612
const UTC_DATE = 57613
const UTC_TIME = 57614
const UTC_TIMESTAMP = 57615
const REPLACE = 57616
const CONVERT = 57617
const CAST = 57618
const SUBSTR = 57619
const SUBSTRING = 57620
const GROUP_CONCAT = 57621
const SEPARATOR = 57622
const INHERIT = 57623
const MATCH = 57624
const AGAINST = 57625
const BOOLEAN = 57626
const LANGUAGE = 57627
const WITH = 57628
const WITHOUT = 57629
const PARSER = 57630
const QUERY = 57631
const EXPANSION = 57632
const UNUSED = 57633
const VIRTUAL = 57634
const GENERATED = 57635
const ALWAYS = 57636
const IDENTITY = 57637
const SEQUENCE = 57638
const INCREMENT = 57639
const MINVALUE = 57640
const CACHE = 57641
const CYCLE = 57642
const OWNED = 57643
const NONE = 57644
const CLUSTERED = 57645
const NONCLUSTERED = 57646
const REPLICATION = 57647
const INCLUDE = 57648
const HOLDLOCK = 57649
const NOLOCK = 57650
const NOWAIT = 57651
const PAGLOCK = 57652
const ROWLOCK = 57653
const TABLELOCK = 57654
const TYPECAST = 57655
const CHECK = 57656

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	122, 138,
	-2, 128,
	-1, 36,
	155, 452,
	156, 452,
	-2, 442,
	-1, 271,
	110, 798,
	-2, 794,
	-1, 272,
	110, 799,
	-2, 795,
	-1, 344,
	81, 1009,
	-2, 81,
	-1, 345,
	81, 960,
	-2, 82,
	-1, 351,
	81, 939,
	-2, 765,
	-1, 353,
	81, 983,
	-2, 767,
	-1, 672,
	52, 41,
	54, 41,
	-2, 43,
	-1, 819,
	110, 801,
	-2, 797,
	-1, 1064,
	5, 28,
	-2, 597,
	-1, 1089,
	5, 27,
	-2, 738,
	-1, 1193,
	5, 27,
	-2, 87,
	-1, 1414,
	5, 28,
	-2, 739,
	-1, 1507,
	5, 27,
	-2, 741,
	-1, 1666,
	5, 28,
	-2, 742,
	-1, 1798,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 15816

var yyAct = [...]int{
	272, 1760, 1560, 1519, 1522, 1092, 598, 3, 1420, 1602,
	1656, 998, 530, 1641, 1126, 1310, 750, 884, 599, 1441,
	267, 276, 1424, 250, 1761, 517, 1673, 1105, 1281, 53,
	483, 303, 1184, 795, 922, 89, 1129, 1311, 89, 902,
	1282, 1195, 927, 1151, 275, 993, 666, 1278, 244, 664,
	933, 1007, 21, 1006, 249, 926, 1157, 885, 947, 350,
	1110, 1254, 89, 89, 355, 844, 855, 1056, 66, 355,
	1181, 976, 355, 355, 756, 852, 682, 279, 89, 872,
	89, 1097, 821, 536, 481, 653, 89, 942, 343, 346,
	330, 681, 245, 246, 247, 248, 966, 542, 668, 259,
	881, 274, 701, 1038, 697, 622, 340, 550, 254, 1712,
	1165, 329, 338, 963, 1781, 960, 988, 854, 564, 52,
	1753, 574, 331, 336, 574, 1336, 263, 562, 572, 573,
	565, 566, 567, 568, 569, 570, 571, 564, 1699, 334,
	574, 1425, 1426, 1427, 1428, 1429, 1430, 1323, 484, 485,
	1149, 1447, 1324, 1746, 558, 1454, 561, 1688, 86, 1806,
	1730, 1801, 576, 577, 578, 579, 580, 581, 582, 1664,
	559, 560, 557, 563, 562, 572, 573, 565, 566, 567,
	568, 569, 570, 571, 564, 1607, 339, 574, 1185, 1186,
	1606, 1789, 999, 724, 1703, 1106, 1729, 1273, 1687, 962,
	1408, 496, 1739, 497, 1404, 529, 494, 1663, 1304, 504,
	1593, 563, 562, 572, 573, 565, 566, 567, 568, 569,
	570, 571, 564, 89, 1164, 574, 915, 355, 355, 355,
	355, 525, 355, 567, 568, 569, 570, 571, 564, 355,
	1473, 574, 563, 562, 572, 573, 565, 566, 567, 568,
	569, 570, 571, 564, 1401, 529, 574, 1161, 1118, 1163,
	1162, 1117, 539, 1472, 1119, 613, 355, 1305, 1306, 683,
	709, 684, 529, 977, 269, 916, 917, 786, 1167, 84,
	80, 81, 82, 538, 787, 965, 1496, 1551, 876, 1356,
	1355, 1397, 563, 562, 572, 573, 565, 566, 567, 568,
	569, 570, 571, 564, 725, 1395, 574, 1804, 243, 563,
	562, 572, 573, 565, 566, 567, 568, 569, 570, 571,
	564, 1636, 1745, 574, 1747, 1721, 967, 1758, 989, 89,
	1562, 484, 485, 1538, 758, 1646, 89, 89, 89, 1523,
	1713, 1800, 355, 1366, 1367, 575, 506, 1625, 575, 355,
	758, 585, 1525, 1787, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 575, 741, 742, 346, 743, 744,
	745, 747, 746, 726, 727, 728, 732, 730, 729, 731,
	703, 705, 757, 640, 704, 710, 706, 707, 708, 722,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 723, 733, 734, 735, 736, 737, 738, 739, 740,
	1249, 575, 1657, 334, 1455, 1232, 1444, 1326, 521, 522,
	1524, 882, 1594, 1658, 1317, 1504, 627, 1449, 628, 510,
	563, 562, 572, 573, 565, 566, 567, 568, 569, 570,
	571, 564, 1607, 83, 574, 1148, 1738, 1372, 679, 575,
	673, 977, 648, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1662, 672, 1448, 1373, 641, 575, 1143, 301, 1770, 572,
	573, 565, 566, 567, 568, 569, 570, 571, 564, 990,
	575, 574, 1647, 1648, 1649, 1523, 1142, 89, 759, 760,
	1131, 57, 970, 512, 89, 514, 89, 355, 1525, 89,
	1381, 499, 89, 1584, 759, 760, 89, 1318, 355, 355,
	355, 355, 355, 355, 355, 355, 59, 60, 61, 62,
	63, 943, 355, 355, 511, 513, 1136, 89, 489, 78,
	575, 349, 1229, 1689, 1481, 765, 487, 944, 486, 491,
	492, 1109, 355, 1442, 1443, 1445, 89, 575, 495, 77,
	1134, 78, 355, 1108, 222, 589, 590, 591, 592, 593,
	594, 595, 798, 903, 905, 774, 1524, 563, 562, 572,
	573, 565, 566, 567, 568, 569, 570, 571, 564, 1107,
	818, 574, 615, 616, 617, 618, 619, 620, 621, 822,
	1521, 943, 695, 748, 79, 1233, 355, 1033, 355, 1526,
	1527, 1528, 1529, 1530, 1531, 1532, 1793, 944, 860, 772,
	749, 587, 588, 1598, 819, 943, 1417, 761, 1241, 762,
	1072, 1050, 766, 856, 1693, 769, 793, 686, 865, 868,
	1230, 944, 1228, 597, 874, 823, 554, 1695, 904, 505,
	800, 924, 923, 790, 548, 547, 1231, 549, 89, 1350,
	788, 89, 89, 89, 89, 89, 509, 1618, 817, 815,
	1617, 549, 1069, 89, 1616, 1690, 89, 547, 575, 807,
	89, 886, 860, 1237, 1797, 89, 89, 1034, 627, 355,
	628, 847, 1615, 549, 1614, 548, 547, 355, 1613, 849,
	850, 1612, 1277, 355, 349, 349, 349, 349, 1460, 349,
	1351, 828, 549, 1610, 346, 575, 349, 870, 1459, 1363,
	548, 547, 921, 1120, 1462, 826, 827, 825, 928, 878,
	861, 862, 1095, 1463, 910, 685, 869, 549, 334, 334,
	334, 334, 334, 552, 796, 797, 1605, 1461, 1275, 1799,
	873, 887, 1079, 334, 890, 873, 488, 899, 540, 355,
	1236, 1128, 334, 355, 1540, 355, 89, 753, 89, 1537,
	877, 1536, 879, 880, 89, 544, 89, 912, 907, 89,
	355, 883, 913, 908, 888, 889, 1128, 891, 931, 498,
	548, 547, 1773, 1128, 978, 979, 980, 981, 50, 1674,
	1772, 995, 1691, 1692, 1694, 1696, 1697, 549, 824, 911,
	968, 969, 971, 972, 973, 575, 974, 975, 1675, 349,
	482, 1040, 811, 813, 814, 76, 688, 490, 812, 818,
	493, 1744, 1139, 984, 985, 986, 1743, 987, 1742, 1740,
	1068, 820, 1067, 960, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 548,
	547, 1127, 1466, 819, 1465, 949, 1168, 822, 1168, 991,
	992, 1676, 501, 502, 503, 1672, 549, 1549, 1475, 956,
	1138, 945, 1741, 1128, 1474, 943, 328, 946, 1039, 1005,
	938, 1011, 937, 792, 939, 940, 1332, 1028, 1089, 1029,
	941, 944, 1030, 1190, 565, 566, 567, 568, 569, 570,
	571, 564, 1188, 823, 574, 1168, 1611, 355, 1052, 529,
	89, 1047, 1048, 1049, 1112, 845, 1114, 846, 1503, 791,
	1470, 1383, 1182, 1046, 1145, 548, 547, 355, 1634, 1811,
	952, 1608, 948, 957, 1511, 1795, 548, 547, 355, 1321,
	954, 953, 549, 1438, 1788, 529, 1153, 1154, 1155, 355,
	1320, 1078, 928, 549, 1158, 1156, 299, 300, 89, 1113,
	1438, 1752, 1438, 1751, 349, 528, 1438, 1737, 1629, 1123,
	1144, 1061, 1102, 1634, 1736, 349, 349, 349, 349, 349,
	349, 349, 349, 1733, 1732, 1725, 529, 334, 1076, 349,
	349, 1115, 292, 291, 294, 295, 296, 297, 1438, 1722,
	355, 293, 298, 1319, 1193, 1159, 1511, 1654, 1628, 802,
	1137, 1175, 1121, 1177, 1178, 1179, 1180, 1001, 1187, 552,
	1438, 1630, 349, 1511, 1546, 1196, 848, 1132, 1133, 1135,
	771, 355, 1511, 529, 89, 89, 1514, 1513, 1511, 1512,
	1169, 1170, 89, 1172, 1173, 1174, 1438, 1437, 1301, 529,
	1556, 355, 1416, 529, 1183, 256, 950, 48, 26, 27,
	770, 1202, 951, 851, 754, 349, 23, 1171, 752, 1574,
	1359, 1358, 1353, 1354, 866, 866, 1246, 1353, 1352, 28,
	866, 507, 1203, 1062, 529, 1555, 1201, 650, 529, 1550,
	1087, 355, 355, 1088, 858, 529, 1467, 1285, 1270, 693,
	692, 1053, 1054, 1055, 676, 1280, 1274, 1189, 500, 886,
	482, 1457, 23, 50, 958, 886, 959, 866, 1488, 1303,
	1283, 1248, 1289, 355, 1343, 355, 355, 1247, 575, 1253,
	1279, 1267, 819, 1093, 1266, 955, 1160, 1164, 1635, 1506,
	1634, 1094, 1302, 54, 1244, 677, 349, 675, 928, 1200,
	928, 1290, 1288, 1199, 349, 909, 1200, 675, 1074, 50,
	349, 1094, 649, 23, 1093, 1242, 858, 1309, 1322, 1710,
	1161, 1022, 1163, 1162, 1580, 75, 1071, 1412, 1308, 650,
	1456, 1362, 1062, 650, 1579, 1021, 650, 1062, 1477, 1476,
	751, 1357, 89, 355, 1122, 914, 1333, 1159, 1327, 1325,
	89, 1073, 1062, 1093, 1344, 1345, 355, 1347, 1348, 1349,
	50, 50, 1026, 678, 794, 355, 996, 256, 1603, 1070,
	349, 1020, 349, 70, 73, 1802, 1750, 89, 1575, 1576,
	1578, 1727, 1632, 355, 1577, 1720, 1631, 349, 71, 1622,
	74, 1621, 355, 1346, 1581, 89, 1548, 1490, 967, 1385,
	994, 1342, 1369, 1374, 1341, 1370, 72, 68, 1338, 1340,
	1339, 349, 1376, 1329, 50, 1296, 1294, 1246, 1191, 1192,
	1017, 1014, 1015, 989, 1013, 1150, 1379, 1125, 983, 655,
	658, 659, 660, 656, 1382, 657, 661, 1098, 1099, 1098,
	1099, 806, 982, 65, 1386, 355, 1478, 1279, 355, 355,
	355, 89, 355, 1024, 1027, 1393, 1431, 1432, 1433, 355,
	1101, 768, 755, 1419, 526, 1360, 896, 1104, 1103, 894,
	893, 897, 334, 1368, 895, 892, 1436, 1767, 1411, 1728,
	355, 1240, 1250, 1251, 928, 1446, 260, 261, 1453, 1035,
	49, 1451, 1765, 543, 1045, 1268, 1269, 1434, 1271, 1272,
	1378, 1123, 1390, 1391, 1450, 1392, 541, 531, 1044, 1394,
	1176, 1396, 691, 355, 355, 898, 508, 659, 660, 532,
	1331, 1410, 355, 1759, 1111, 796, 797, 1019, 1458, 1159,
	1491, 1468, 355, 1003, 767, 1330, 1198, 69, 1196, 928,
	1626, 997, 663, 543, 349, 655, 658, 659, 660, 656,
	1782, 657, 661, 1487, 1479, 1130, 1480, 1043, 1018, 1439,
	1440, 257, 258, 1365, 1316, 1042, 1140, 355, 355, 251,
	1748, 1587, 1507, 1255, 1469, 252, 1471, 563, 562, 572,
	573, 565, 566, 567, 568, 569, 570, 571, 564, 355,
	54, 574, 1586, 1483, 1283, 1484, 1485, 1486, 1023, 355,
	1718, 1494, 1094, 1505, 1717, 1716, 1535, 1257, 1482, 1715,
	545, 1539, 1620, 1495, 1025, 1315, 1314, 349, 1008, 1009,
	1010, 1619, 1595, 1534, 1518, 1141, 1533, 355, 355, 89,
	1543, 789, 355, 56, 58, 1541, 1569, 8, 1566, 7,
	1204, 355, 1557, 1552, 1567, 6, 1565, 5, 349, 1582,
	1371, 674, 51, 1, 1553, 799, 1554, 277, 1423, 1711,
	1639, 1706, 355, 1564, 1563, 1597, 1645, 1627, 349, 1147,
	1624, 67, 1259, 1702, 1388, 1604, 1264, 1633, 1258, 1335,
	1364, 1197, 1213, 1256, 1000, 1596, 1194, 1600, 1283, 1262,
	349, 1573, 1016, 1655, 1669, 1520, 1601, 935, 925, 480,
	64, 1609, 1260, 1261, 936, 866, 934, 932, 1287, 1111,
	694, 866, 961, 1166, 857, 859, 964, 700, 698, 699,
	1263, 1265, 696, 702, 230, 355, 355, 355, 355, 341,
	875, 662, 355, 687, 546, 1227, 1226, 1012, 1637, 1235,
	349, 785, 349, 1312, 1032, 524, 232, 1653, 583, 355,
	1650, 1652, 1559, 1638, 355, 1041, 1660, 1116, 355, 348,
	1698, 1670, 1286, 1665, 535, 1585, 1573, 886, 1493, 1077,
	610, 871, 355, 355, 1684, 278, 810, 290, 287, 289,
	901, 288, 355, 355, 801, 355, 1086, 556, 1685, 1682,
	1683, 1677, 1678, 1679, 1680, 1681, 355, 1700, 1701, 333,
	646, 654, 652, 651, 1100, 1096, 332, 1243, 355, 1407,
	1361, 1707, 1709, 1592, 805, 575, 25, 55, 262, 19,
	18, 1723, 17, 1375, 20, 1719, 1497, 1498, 16, 1499,
	1500, 1501, 1377, 15, 14, 29, 13, 12, 11, 1573,
	10, 9, 304, 47, 1572, 1571, 1570, 1734, 1735, 1568,
	1380, 4, 253, 1573, 1749, 22, 2, 0, 0, 349,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1755, 1762, 1756, 0, 0, 0, 355, 1547,
	0, 0, 355, 1754, 0, 1763, 1764, 0, 1769, 0,
	47, 1771, 0, 1766, 0, 0, 0, 0, 255, 89,
	0, 355, 0, 1776, 335, 0, 1779, 1778, 0, 1777,
	355, 1573, 1421, 0, 0, 1421, 1421, 1421, 0, 1435,
	0, 89, 0, 1573, 1573, 0, 349, 0, 0, 0,
	0, 1792, 1796, 0, 0, 1785, 1794, 1785, 0, 1798,
	0, 0, 0, 0, 355, 1405, 0, 1421, 256, 0,
	48, 26, 27, 355, 265, 1807, 1808, 0, 0, 0,
	0, 0, 1574, 1573, 1059, 1573, 0, 0, 1060, 1803,
	0, 0, 28, 0, 0, 0, 1064, 1065, 1066, 534,
	349, 349, 0, 1785, 0, 1075, 0, 0, 0, 1489,
	1081, 0, 0, 1082, 1083, 1084, 1085, 0, 0, 1492,
	0, 0, 0, 0, 1651, 1651, 0, 1573, 0, 1402,
	0, 1573, 0, 0, 87, 0, 0, 242, 563, 562,
	572, 573, 565, 566, 567, 568, 569, 570, 571, 564,
	0, 0, 574, 0, 1509, 1510, 0, 0, 0, 266,
	0, 87, 87, 0, 1791, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1312, 87, 0, 87,
	0, 0, 0, 0, 0, 87, 1542, 1580, 0, 516,
	516, 516, 516, 0, 516, 0, 0, 1579, 0, 0,
	0, 516, 563, 562, 572, 573, 565, 566, 567, 568,
	569, 570, 571, 564, 1312, 1558, 574, 0, 47, 1561,
	0, 0, 0, 0, 0, 0, 0, 0, 1421, 0,
	0, 0, 0, 584, 0, 0, 586, 0, 0, 0,
	0, 1575, 1576, 1578, 0, 0, 0, 1577, 1708, 1599,
	0, 563, 562, 572, 573, 565, 566, 567, 568, 569,
	570, 571, 564, 0, 596, 574, 0, 601, 602, 603,
	604, 605, 606, 607, 608, 609, 0, 612, 614, 614,
	614, 614, 614, 614, 614, 614, 515, 642, 643, 644,
	645, 0, 0, 0, 0, 0, 0, 1252, 665, 0,
	0, 1057, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1640, 1642, 1643, 1644, 0, 0, 0, 1312,
	0, 0, 87, 0, 0, 0, 533, 537, 0, 623,
	0, 0, 0, 866, 0, 0, 1667, 0, 0, 0,
	0, 1668, 0, 555, 0, 1671, 1300, 0, 0, 0,
	1809, 1334, 0, 49, 0, 0, 1153, 1154, 1155, 1561,
	1312, 0, 0, 625, 1158, 1156, 299, 300, 0, 1312,
	1312, 0, 1704, 0, 0, 0, 575, 1058, 0, 600,
	0, 0, 0, 1714, 0, 0, 0, 0, 611, 0,
	0, 0, 0, 0, 0, 1726, 0, 563, 562, 572,
	573, 565, 566, 567, 568, 569, 570, 571, 564, 0,
	0, 574, 0, 630, 631, 632, 633, 634, 635, 636,
	637, 638, 639, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 626, 87, 670, 87, 0, 0,
	575, 0, 640, 624, 0, 0, 0, 0, 1757, 629,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 516,
	0, 0, 1219, 0, 0, 1312, 0, 0, 0, 1768,
	516, 516, 516, 516, 516, 516, 516, 516, 0, 0,
	1209, 0, 0, 1387, 516, 516, 0, 0, 1421, 575,
	1389, 0, 0, 0, 0, 0, 0, 1783, 0, 0,
	0, 0, 1398, 1399, 1400, 0, 0, 1403, 0, 0,
	0, 0, 0, 0, 518, 519, 520, 0, 523, 0,
	1413, 1414, 1415, 641, 1418, 527, 0, 1220, 0, 0,
	0, 349, 1222, 1215, 1216, 0, 1223, 1218, 1217, 0,
	1561, 0, 1225, 1221, 0, 0, 1160, 1164, 0, 47,
	1210, 1206, 0, 1224, 1211, 1208, 1207, 0, 0, 1214,
	74, 0, 0, 0, 601, 0, 0, 0, 0, 0,
	0, 1212, 0, 1464, 0, 0, 0, 1205, 0, 0,
	1161, 0, 1163, 1162, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 87, 0, 87, 0, 0, 87, 0,
	0, 87, 0, 0, 0, 773, 0, 0, 0, 0,
	0, 0, 0, 335, 335, 335, 335, 335, 0, 0,
	0, 0, 808, 809, 0, 0, 87, 0, 665, 0,
	906, 0, 0, 0, 0, 575, 0, 335, 0, 0,
	0, 0, 0, 1502, 0, 87, 0, 256, 0, 48,
	26, 27, 0, 0, 773, 0, 0, 0, 0, 0,
	0, 1574, 0, 0, 0, 0, 0, 1515, 1516, 1517,
	0, 28, 0, 0, 0, 0, 600, 0, 0, 863,
	864, 0, 0, 0, 0, 0, 0, 0, 1545, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 266, 266, 0, 0, 867, 867, 266, 0,
	0, 0, 867, 0, 0, 516, 0, 516, 0, 0,
	0, 1812, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 1588, 1589, 1590, 1591, 0, 0, 0,
	0, 0, 266, 266, 266, 266, 0, 87, 0, 867,
	87, 87, 87, 87, 87, 0, 0, 0, 0, 0,
	920, 0, 900, 0, 0, 87, 1580, 0, 0, 670,
	0, 0, 0, 0, 87, 87, 1579, 0, 0, 0,
	0, 1051, 0, 764, 0, 0, 0, 0, 256, 0,
	48, 26, 27, 0, 775, 776, 777, 778, 779, 780,
	781, 782, 1574, 23, 24, 48, 26, 27, 783, 784,
	0, 0, 28, 0, 0, 256, 0, 48, 26, 27,
	1575, 1576, 1578, 42, 0, 0, 1577, 28, 1661, 1574,
	0, 0, 0, 1666, 0, 0, 0, 0, 0, 28,
	0, 0, 0, 0, 1090, 1091, 37, 0, 0, 0,
	50, 0, 0, 0, 0, 87, 0, 87, 0, 1686,
	0, 0, 1786, 87, 0, 87, 1036, 1037, 87, 537,
	1152, 0, 335, 0, 0, 1153, 1154, 1155, 0, 0,
	0, 0, 0, 1158, 1156, 299, 300, 0, 0, 1784,
	0, 1724, 0, 773, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 1580, 0, 0,
	30, 31, 33, 32, 35, 0, 0, 1579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 49, 1063, 1580, 36, 43, 44, 0, 0,
	45, 46, 34, 0, 1579, 0, 0, 0, 1080, 0,
	0, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	47, 1575, 1576, 1578, 0, 0, 0, 1577, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 38, 39, 0, 40, 41, 1575, 1576,
	1578, 0, 0, 516, 1577, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1790, 0, 0, 0, 0, 87,
	256, 0, 48, 26, 27, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1574, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 28, 0, 0, 0, 0, 1002,
	0, 1004, 0, 0, 0, 1813, 1814, 724, 0, 0,
	0, 1284, 0, 47, 0, 0, 1031, 1146, 0, 0,
	0, 0, 0, 0, 0, 1160, 1164, 0, 0, 0,
	1297, 1298, 1299, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1161,
	49, 1163, 1162, 0, 0, 0, 0, 1328, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 709, 0, 0, 0, 0, 1580,
	0, 0, 0, 1238, 1239, 0, 0, 0, 0, 1579,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 1276, 0, 0, 0, 725, 0,
	0, 0, 266, 0, 0, 0, 0, 0, 0, 1291,
	1292, 0, 773, 1293, 0, 0, 1295, 0, 0, 0,
	0, 0, 0, 1575, 1576, 1578, 0, 867, 0, 1577,
	0, 0, 0, 867, 228, 1307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 238, 741,
	742, 0, 743, 744, 745, 747, 746, 726, 727, 728,
	732, 730, 729, 731, 703, 705, 1406, 640, 704, 710,
	706, 707, 708, 722, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 723, 733, 734, 735, 736,
	737, 738, 739, 740, 0, 0, 0, 0, 0, 223,
	0, 0, 0, 0, 0, 225, 0, 0, 0, 0,
	0, 0, 231, 227, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 49, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1384, 229, 0, 0, 233, 1234, 641, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 1409, 0, 0, 0, 0, 0, 0, 600,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1284, 0, 0, 1508, 0,
	0, 0, 0, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	670, 0, 0, 1452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1544, 0, 0, 0, 0, 0,
	0, 226, 0, 234, 235, 236, 237, 241, 0, 0,
	0, 0, 240, 239, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1583, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1284,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1623,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1731, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1659, 600, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1705, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1805, 0, 0, 0, 466, 456, 0,
	417, 468, 387, 405, 476, 407, 408, 443, 367, 426,
	154, 402, 385, 92, 390, 360, 397, 361, 388, 419,
	116, 386, 458, 429, 130, 474, 133, 434, 0, 176,
	142, 0, 0, 421, 460, 424, 451, 416, 444, 375,
	433, 469, 403, 439, 470, 0, 0, 0, 354, 0,
	929, 930, 0, 0, 0, 0, 0, 105, 1780, 438,
	465, 399, 479, 442, 359, 436, 0, 365, 368, 475,
	463, 394, 395, 1124, 0, 0, 0, 0, 1775, 0,
	420, 425, 448, 413, 0, 0, 0, 0, 0, 0,
	0, 0, 391, 0, 432, 0, 0, 0, 372, 366,
	87, 418, 0, 0, 0, 374, 0, 392, 449, 0,
	356, 454, 461, 415, 203, 464, 412, 411, 161, 0,
	108, 0, 182, 120, 404, 131, 446, 477, 467, 422,
	459, 389, 398, 110, 396, 168, 155, 194, 431, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 215, 216,
	217, 218, 219, 220, 221, 364, 357, 393, 452, 455,
	379, 441, 369, 400, 447, 401, 423, 384, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 212, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 362, 0, 177, 196, 213, 214,
	363, 383, 462, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 211, 440, 169,
	107, 195, 175, 0, 378, 382, 376, 377, 427, 428,
	471, 472, 473, 450, 373, 0, 380, 381, 0, 457,
	125, 430, 91, 99, 132, 478, 210, 0, 163, 118,
	197, 0, 406, 358, 410, 0, 0, 0, 0, 0,
	0, 0, 370, 371, 170, 414, 409, 435, 437, 445,
	453, 466, 456, 104, 417, 468, 387, 405, 476, 407,
	408, 443, 367, 426, 154, 402, 385, 92, 390, 360,
	397, 361, 388, 419, 116, 386, 458, 429, 130, 474,
	133, 434, 0, 176, 142, 0, 0, 421, 460, 424,
	451, 416, 444, 375, 433, 469, 403, 439, 470, 0,
	0, 0, 354, 0, 929, 930, 0, 0, 0, 0,
	0, 105, 0, 438, 465, 399, 479, 442, 359, 436,
	0, 365, 368, 475, 463, 394, 395, 0, 0, 0,
	0, 0, 0, 0, 420, 425, 448, 413, 0, 0,
	0, 0, 0, 0, 0, 0, 391, 0, 432, 0,
	0, 0, 372, 366, 0, 418, 0, 0, 0, 374,
	0, 392, 449, 0, 356, 454, 461, 415, 203, 464,
	412, 411, 161, 0, 108, 0, 182, 120, 404, 131,
	446, 477, 467, 422, 459, 389, 398, 110, 396, 168,
	155, 194, 431, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 215, 216, 217, 218, 219, 220, 221, 364,
	357, 393, 452, 455, 379, 441, 369, 400, 447, 401,
	423, 384, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 212,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 362, 0,
	177, 196, 213, 214, 363, 383, 462, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 211, 440, 169, 107, 195, 175, 0, 378, 382,
	376, 377, 427, 428, 471, 472, 473, 450, 373, 0,
	380, 381, 0, 457, 125, 430, 91, 99, 132, 478,
	210, 0, 163, 118, 197, 0, 406, 358, 410, 0,
	0, 0, 0, 0, 0, 0, 370, 371, 170, 414,
	409, 435, 437, 445, 453, 466, 456, 104, 417, 468,
	387, 405, 476, 407, 408, 443, 367, 426, 154, 402,
	385, 92, 390, 360, 397, 361, 388, 419, 116, 386,
	458, 429, 130, 474, 133, 434, 0, 176, 142, 0,
	0, 421, 460, 424, 451, 416, 444, 375, 433, 469,
	403, 439, 470, 0, 0, 0, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 438, 465, 399,
	479, 442, 359, 436, 0, 365, 368, 475, 463, 394,
	395, 0, 0, 0, 0, 0, 0, 0, 420, 425,
	448, 413, 0, 0, 0, 0, 0, 0, 1245, 0,
	391, 0, 432, 0, 0, 0, 372, 366, 0, 418,
	0, 0, 0, 374, 0, 392, 449, 0, 356, 454,
	461, 415, 203, 464, 412, 411, 161, 0, 108, 0,
	182, 120, 404, 131, 446, 477, 467, 422, 459, 389,
	398, 110, 396, 168, 155, 194, 431, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 215, 216, 217, 218,
	219, 220, 221, 364, 357, 393, 452, 455, 379, 441,
	369, 400, 447, 401, 423, 384, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 212, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 362, 0, 177, 196, 213, 214, 363, 383,
	462, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 211, 440, 169, 107, 195,
	175, 0, 378, 382, 376, 377, 427, 428, 471, 472,
	473, 450, 373, 0, 380, 381, 0, 457, 125, 430,
	91, 99, 132, 478, 210, 0, 163, 118, 197, 0,
	406, 358, 410, 0, 0, 0, 0, 0, 0, 0,
	370, 371, 170, 414, 409, 435, 437, 445, 453, 466,
	456, 104, 417, 468, 387, 405, 476, 407, 408, 443,
	367, 426, 154, 402, 385, 92, 390, 360, 397, 361,
	388, 419, 116, 386, 458, 429, 130, 474, 133, 434,
	0, 176, 142, 0, 0, 421, 460, 424, 451, 416,
	444, 375, 433, 469, 403, 439, 470, 50, 0, 0,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 438, 465, 399, 479, 442, 359, 436, 0, 365,
	368, 475, 463, 394, 395, 0, 0, 0, 0, 0,
	0, 0, 420, 425, 448, 413, 0, 0, 0, 0,
	0, 0, 0, 0, 391, 0, 432, 0, 0, 0,
	372, 366, 0, 418, 0, 0, 0, 374, 0, 392,
	449, 0, 356, 454, 461, 415, 203, 464, 412, 411,
	161, 0, 108, 0, 182, 120, 404, 131, 446, 477,
	467, 422, 459, 389, 398, 110, 396, 168, 155, 194,
	431, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	215, 216, 217, 218, 219, 220, 221, 364, 357, 393,
	452, 455, 379, 441, 369, 400, 447, 401, 423, 384,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 212, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 362, 0, 177, 196,
	213, 214, 363, 383, 462, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 211,
	440, 169, 107, 195, 175, 0, 378, 382, 376, 377,
	427, 428, 471, 472, 473, 450, 373, 0, 380, 381,
	0, 457, 125, 430, 91, 99, 132, 478, 210, 0,
	163, 118, 197, 0, 406, 358, 410, 0, 0, 0,
	0, 0, 0, 0, 370, 371, 170, 414, 409, 435,
	437, 445, 453, 466, 456, 104, 417, 468, 387, 405,
	476, 407, 408, 443, 367, 426, 154, 402, 385, 92,
	390, 360, 397, 361, 388, 419, 116, 386, 458, 429,
	130, 474, 133, 434, 0, 176, 142, 0, 0, 421,
	460, 424, 451, 416, 444, 375, 433, 469, 403, 439,
	470, 0, 0, 0, 354, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 438, 465, 399, 479, 442,
	359, 436, 0, 365, 368, 475, 463, 394, 395, 0,
	0, 0, 0, 0, 0, 0, 420, 425, 448, 413,
	0, 0, 0, 0, 0, 0, 0, 0, 391, 0,
	432, 0, 0, 0, 372, 366, 0, 418, 0, 0,
	0, 374, 0, 392, 449, 0, 356, 454, 461, 415,
	203, 464, 412, 411, 161, 0, 108, 0, 182, 120,
	404, 131, 446, 477, 467, 422, 459, 389, 398, 110,
	396, 168, 155, 194, 431, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 215, 216, 217, 218, 219, 220,
	221, 364, 357, 393, 452, 455, 379, 441, 369, 400,
	447, 401, 423, 384, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 212, 113, 112, 178, 101, 200, 201, 98, 352,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	362, 0, 177, 196, 213, 214, 363, 383, 462, 206,
	207, 208, 209, 0, 0, 0, 353, 351, 124, 173,
	128, 135, 164, 211, 440, 169, 107, 195, 175, 347,
	378, 382, 376, 377, 427, 428, 471, 472, 473, 450,
	373, 0, 380, 381, 0, 457, 125, 430, 91, 99,
	132, 478, 210, 0, 163, 118, 197, 0, 406, 358,
	410, 0, 0, 0, 0, 0, 0, 0, 370, 371,
	170, 414, 409, 435, 437, 445, 453, 466, 456, 104,
	417, 468, 387, 405, 476, 407, 408, 443, 367, 426,
	154, 402, 385, 92, 390, 360, 397, 361, 388, 419,
	116, 386, 458, 429, 130, 474, 133, 434, 0, 176,
	142, 0, 0, 421, 460, 424, 451, 416, 444, 375,
	433, 469, 403, 439, 470, 0, 0, 0, 271, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 438,
	465, 399, 479, 442, 359, 436, 0, 365, 368, 475,
	463, 394, 395, 0, 0, 0, 0, 0, 0, 0,
	420, 425, 448, 413, 0, 0, 0, 0, 0, 0,
	816, 0, 391, 0, 432, 0, 0, 0, 372, 366,
	0, 418, 0, 0, 0, 374, 0, 392, 449, 0,
	356, 454, 461, 415, 203, 464, 412, 411, 161, 0,
	108, 0, 182, 120, 404, 131, 446, 477, 467, 422,
	459, 389, 398, 110, 396, 168, 155, 194, 431, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 215, 216,
	217, 218, 219, 220, 221, 364, 357, 393, 452, 455,
	379, 441, 369, 400, 447, 401, 423, 384, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 212, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 362, 0, 177, 196, 213, 214,
	363, 383, 462, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 211, 440, 169,
	107, 195, 175, 0, 378, 382, 376, 377, 427, 428,
	471, 472, 473, 450, 373, 0, 380, 381, 0, 457,
	125, 430, 91, 99, 132, 478, 210, 0, 163, 118,
	197, 0, 406, 358, 410, 0, 0, 0, 0, 0,
	0, 0, 370, 371, 170, 414, 409, 435, 437, 445,
	453, 466, 456, 104, 417, 468, 387, 405, 476, 407,
	408, 443, 367, 426, 154, 402, 385, 92, 390, 360,
	397, 361, 388, 419, 116, 386, 458, 429, 130, 474,
	133, 434, 0, 176, 142, 0, 0, 421, 460, 424,
	451, 416, 444, 375, 433, 469, 403, 439, 470, 0,
	0, 0, 354, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 438, 465, 399, 479, 442, 359, 436,
	0, 365, 368, 475, 463, 394, 395, 0, 0, 0,
	0, 0, 0, 0, 420, 425, 448, 413, 0, 0,
	0, 0, 0, 0, 0, 0, 391, 0, 432, 0,
	0, 0, 372, 366, 0, 418, 0, 0, 0, 374,
	0, 392, 449, 0, 356, 454, 461, 415, 203, 464,
	412, 411, 161, 0, 108, 0, 182, 120, 404, 131,
	446, 477, 467, 422, 459, 389, 398, 110, 396, 168,
	155, 194, 431, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 215, 216, 217, 218, 219, 220, 221, 364,
	357, 393, 452, 455, 379, 441, 369, 400, 447, 401,
	423, 384, 93, 183, 680, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 212,
	113, 112, 178, 101, 200, 201, 98, 352, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 362, 0,
	177, 196, 213, 214, 363, 383, 462, 206, 207, 208,
	209, 0, 0, 0, 353, 351, 124, 173, 128, 135,
	164, 211, 440, 169, 107, 195, 175, 347, 378, 382,
	376, 377, 427, 428, 471, 472, 473, 450, 373, 0,
	380, 381, 0, 457, 125, 430, 91, 99, 132, 478,
	210, 0, 163, 118, 197, 0, 406, 358, 410, 0,
	0, 0, 0, 0, 0, 0, 370, 371, 170, 414,
	409, 435, 437, 445, 453, 466, 456, 104, 417, 468,
	387, 405, 476, 407, 408, 443, 367, 426, 154, 402,
	385, 92, 390, 360, 397, 361, 388, 419, 116, 386,
	458, 429, 130, 474, 133, 434, 0, 176, 142, 0,
	0, 421, 460, 424, 451, 416, 444, 375, 433, 469,
	403, 439, 470, 0, 0, 0, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 438, 465, 399,
	479, 442, 359, 436, 0, 365, 368, 475, 463, 394,
	395, 0, 0, 0, 0, 0, 0, 0, 420, 425,
	448, 413, 0, 0, 0, 0, 0, 0, 0, 0,
	391, 0, 432, 0, 0, 0, 372, 366, 0, 418,
	0, 0, 0, 374, 0, 392, 449, 0, 356, 454,
	461, 415, 203, 464, 412, 411, 161, 0, 108, 0,
	182, 120, 404, 131, 446, 477, 467, 422, 459, 389,
	398, 110, 396, 168, 155, 194, 431, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 215, 216, 217, 218,
	219, 220, 221, 364, 357, 393, 452, 455, 379, 441,
	369, 400, 447, 401, 423, 384, 93, 183, 342, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 212, 113, 112, 178, 101, 200, 201,
	98, 352, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 362, 0, 177, 196, 213, 214, 363, 383,
	462, 206, 207, 208, 209, 0, 0, 0, 353, 351,
	345, 344, 128, 135, 164, 211, 440, 169, 107, 195,
	175, 347, 378, 382, 376, 377, 427, 428, 471, 472,
	473, 450, 373, 0, 380, 381, 0, 457, 125, 430,
	91, 99, 132, 478, 210, 0, 163, 118, 197, 0,
	406, 358, 410, 0, 0, 0, 0, 0, 0, 0,
	370, 371, 170, 414, 409, 435, 437, 445, 453, 466,
	456, 104, 417, 468, 387, 405, 476, 407, 408, 443,
	367, 426, 154, 402, 385, 92, 390, 360, 397, 361,
	388, 419, 116, 386, 458, 429, 130, 474, 133, 434,
	0, 176, 142, 0, 0, 421, 460, 424, 451, 416,
	444, 375, 433, 469, 403, 439, 470, 0, 0, 0,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 438, 465, 399, 479, 442, 359, 436, 0, 365,
	368, 475, 463, 394, 395, 0, 0, 0, 0, 0,
	0, 0, 420, 425, 448, 413, 0, 0, 0, 0,
	0, 0, 0, 0, 391, 0, 432, 0, 0, 0,
	372, 366, 0, 418, 0, 0, 0, 374, 0, 392,
	449, 0, 356, 454, 461, 415, 203, 464, 412, 411,
	161, 0, 108, 0, 182, 120, 404, 131, 446, 477,
	467, 422, 459, 389, 398, 110, 396, 168, 155, 194,
	431, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	215, 216, 217, 218, 219, 220, 221, 364, 357, 393,
	452, 455, 379, 441, 369, 400, 447, 401, 423, 384,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 212, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 362, 0, 177, 196,
	213, 214, 363, 383, 462, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 211,
	440, 169, 107, 195, 175, 0, 378, 382, 376, 377,
	427, 428, 471, 472, 473, 450, 373, 0, 380, 381,
	0, 457, 125, 430, 91, 99, 132, 478, 210, 0,
	163, 118, 197, 0, 406, 358, 410, 0, 0, 0,
	0, 0, 0, 0, 370, 371, 170, 414, 409, 435,
	437, 445, 453, 466, 456, 104, 417, 468, 387, 405,
	476, 407, 408, 443, 367, 426, 154, 402, 385, 92,
	390, 360, 397, 361, 388, 419, 116, 386, 458, 429,
	130, 474, 133, 434, 0, 176, 142, 0, 0, 421,
	460, 424, 451, 416, 444, 375, 433, 469, 403, 439,
	470, 0, 0, 0, 271, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 438, 465, 399, 479, 442,
	359, 436, 0, 365, 368, 475, 463, 394, 395, 0,
	0, 0, 0, 0, 0, 0, 420, 425, 448, 413,
	0, 0, 0, 0, 0, 0, 0, 0, 391, 0,
	432, 0, 0, 0, 372, 366, 0, 418, 0, 0,
	0, 374, 0, 392, 449, 0, 356, 454, 461, 415,
	203, 464, 412, 411, 161, 0, 108, 0, 182, 120,
	404, 131, 446, 477, 467, 422, 459, 389, 398, 110,
	396, 168, 155, 194, 431, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 215, 216, 217, 218, 219, 220,
	221, 364, 357, 393, 452, 455, 379, 441, 369, 400,
	447, 401, 423, 384, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 212, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	362, 0, 177, 196, 213, 214, 363, 383, 462, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 211, 440, 169, 107, 195, 175, 0,
	378, 382, 376, 377, 427, 428, 471, 472, 473, 450,
	373, 0, 380, 381, 0, 457, 125, 430, 91, 99,
	132, 478, 210, 0, 163, 118, 197, 0, 406, 358,
	410, 0, 0, 0, 0, 0, 0, 0, 370, 371,
	170, 414, 409, 435, 437, 445, 453, 466, 456, 104,
	417, 468, 387, 405, 476, 407, 408, 443, 367, 426,
	154, 402, 385, 92, 390, 360, 397, 361, 388, 419,
	116, 386, 458, 429, 130, 474, 133, 434, 0, 176,
	142, 0, 0, 421, 460, 424, 451, 416, 444, 375,
	433, 469, 403, 439, 470, 0, 0, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 438,
	465, 399, 479, 442, 359, 436, 0, 365, 368, 475,
	463, 394, 395, 0, 0, 0, 0, 0, 0, 0,
	420, 425, 448, 413, 0, 0, 0, 0, 0, 0,
	0, 0, 391, 0, 432, 0, 0, 0, 372, 366,
	0, 418, 0, 0, 0, 374, 0, 392, 449, 0,
	356, 454, 461, 415, 203, 464, 412, 411, 161, 0,
	108, 0, 182, 120, 404, 131, 446, 477, 467, 422,
	459, 389, 398, 110, 396, 168, 155, 194, 431, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 215, 216,
	217, 218, 219, 220, 221, 364, 357, 393, 452, 455,
	379, 441, 369, 400, 447, 401, 423, 384, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 212, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 362, 0, 177, 196, 213, 214,
	363, 383, 462, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 211, 440, 169,
	107, 195, 175, 0, 378, 382, 376, 377, 427, 428,
	471, 472, 473, 450, 373, 0, 380, 381, 0, 457,
	125, 430, 91, 99, 132, 478, 210, 0, 163, 118,
	197, 0, 406, 358, 410, 0, 0, 0, 0, 0,
	0, 0, 370, 371, 170, 414, 409, 435, 437, 445,
	453, 154, 0, 104, 92, 0, 0, 273, 0, 0,
	0, 116, 270, 0, 0, 130, 314, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 305, 306, 0, 0,
	0, 0, 0, 0, 918, 0, 50, 0, 0, 271,
	292, 291, 294, 295, 296, 297, 0, 0, 105, 293,
	298, 299, 300, 919, 0, 0, 268, 285, 0, 313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 0, 0, 0, 0, 326, 0, 284, 0, 0,
	280, 281, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 324, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 215,
	216, 217, 218, 219, 220, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 212, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 213,
	214, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 211, 0,
	169, 107, 195, 175, 302, 315, 325, 321, 322, 319,
	320, 318, 317, 316, 327, 307, 308, 309, 310, 312,
	0, 125, 311, 91, 99, 132, 0, 210, 0, 163,
	118, 197, 154, 0, 0, 92, 853, 0, 273, 0,
	0, 0, 116, 270, 0, 170, 130, 314, 133, 0,
	0, 176, 142, 323, 104, 0, 0, 305, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	271, 292, 291, 294, 295, 296, 297, 0, 0, 105,
	293, 298, 299, 300, 0, 0, 0, 268, 285, 0,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 264, 0, 0, 0, 326, 0, 284, 0,
	0, 280, 281, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 324,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	215, 216, 217, 218, 219, 220, 221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 212, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	213, 214, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 211,
	0, 169, 107, 195, 175, 302, 315, 325, 321, 322,
	319, 320, 318, 317, 316, 327, 307, 308, 309, 310,
	312, 0, 125, 311, 91, 99, 132, 0, 210, 0,
	163, 118, 197, 154, 0, 0, 92, 0, 0, 273,
	0, 0, 0, 116, 270, 0, 170, 130, 314, 133,
	0, 0, 176, 142, 323, 104, 0, 0, 305, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	529, 271, 292, 291, 294, 295, 296, 297, 0, 0,
	105, 293, 298, 299, 300, 0, 0, 0, 268, 285,
	0, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 0, 0, 0, 0, 326, 0, 284,
	0, 0, 280, 281, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	324, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 168, 155,
	194, 0, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 215, 216, 217, 218, 219, 220, 221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 212, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 213, 214, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	211, 0, 169, 107, 195, 175, 302, 315, 325, 321,
	322, 319, 320, 318, 317, 316, 327, 307, 308, 309,
	310, 312, 0, 125, 311, 91, 99, 132, 0, 210,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	273, 0, 0, 0, 116, 270, 0, 170, 130, 314,
	133, 0, 0, 176, 142, 323, 104, 0, 0, 305,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 271, 292, 291, 294, 295, 296, 297, 0,
	0, 105, 293, 298, 299, 300, 0, 0, 0, 268,
	285, 0, 313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 283, 264, 0, 0, 0, 326, 0,
	284, 0, 0, 280, 281, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 324, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 215, 216, 217, 218, 219, 220, 221, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 212,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 213, 214, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 211, 0, 169, 107, 195, 175, 302, 315, 325,
	321, 322, 319, 320, 318, 317, 316, 327, 307, 308,
	309, 310, 312, 23, 125, 311, 91, 99, 132, 0,
	210, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	0, 273, 0, 0, 0, 116, 270, 0, 170, 130,
	314, 133, 0, 0, 176, 142, 323, 104, 0, 0,
	305, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 271, 292, 291, 294, 295, 296, 297,
	0, 0, 105, 293, 298, 299, 300, 0, 0, 0,
	268, 285, 0, 313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 0, 0, 0, 0, 326,
	0, 284, 0, 0, 280, 281, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 324, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 215, 216, 217, 218, 219, 220, 221,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	212, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 213, 214, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 211, 0, 169, 107, 195, 175, 302, 315,
	325, 321, 322, 319, 320, 318, 317, 316, 327, 307,
	308, 309, 310, 312, 0, 125, 311, 91, 99, 132,
	0, 210, 0, 163, 118, 197, 154, 0, 0, 92,
	0, 0, 273, 0, 0, 0, 116, 270, 0, 170,
	130, 314, 133, 0, 0, 176, 142, 323, 104, 0,
	0, 305, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 271, 292, 291, 294, 295, 296,
	297, 0, 0, 105, 293, 298, 299, 300, 0, 0,
	0, 268, 285, 0, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 0, 0, 0, 0,
	326, 0, 284, 0, 0, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 324, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 215, 216, 217, 218, 219, 220,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 212, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 213, 214, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 211, 0, 169, 107, 195, 175, 302,
	315, 325, 321, 322, 319, 320, 318, 317, 316, 327,
	307, 308, 309, 310, 312, 0, 125, 311, 91, 99,
	132, 0, 210, 0, 163, 118, 197, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	170, 130, 314, 133, 0, 0, 176, 142, 323, 104,
	0, 0, 305, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 271, 292, 291, 294, 295,
	296, 297, 0, 0, 105, 293, 298, 299, 300, 0,
	0, 0, 0, 285, 0, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 0, 0, 0,
	0, 326, 0, 284, 0, 0, 280, 281, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 324, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 1810, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 215, 216, 217, 218, 219,
	220, 221, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 212, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 213, 214, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 211, 0, 169, 107, 195, 175,
	302, 315, 325, 321, 322, 319, 320, 318, 317, 316,
	327, 307, 308, 309, 310, 312, 0, 125, 311, 91,
	99, 132, 0, 210, 0, 163, 118, 197, 154, 0,
	0, 92, 0, 0, 273, 0, 0, 0, 116, 0,
	0, 170, 130, 314, 133, 0, 0, 176, 142, 323,
	104, 0, 0, 305, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 271, 292, 291, 294,
	295, 296, 297, 0, 0, 105, 293, 298, 299, 300,
	0, 0, 0, 0, 285, 0, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 0, 0,
	0, 0, 326, 0, 284, 0, 0, 280, 281, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 324, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 215, 216, 217, 218,
	219, 220, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 212, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 213, 214, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 211, 0, 169, 107, 195,
	175, 302, 315, 325, 321, 322, 319, 320, 318, 317,
	316, 327, 307, 308, 309, 310, 312, 0, 125, 311,
	91, 99, 132, 0, 210, 0, 163, 118, 197, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 170, 130, 314, 133, 0, 0, 176, 142,
	323, 104, 0, 0, 305, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 271, 292, 291,
	294, 295, 296, 297, 0, 0, 105, 293, 298, 299,
	300, 0, 0, 0, 0, 285, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 0,
	0, 0, 0, 326, 0, 284, 0, 0, 280, 281,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 324, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 215, 216, 217,
	218, 219, 220, 221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 212, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 213, 214, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 211, 0, 169, 107,
	195, 175, 302, 315, 325, 321, 322, 319, 320, 318,
	317, 316, 327, 307, 308, 309, 310, 312, 0, 125,
	311, 91, 99, 132, 0, 210, 0, 163, 118, 197,
	154, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 170, 130, 0, 133, 0, 0, 176,
	142, 323, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 354, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 563, 562, 572, 573, 565, 566,
	567, 568, 569, 570, 571, 564, 0, 0, 574, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 215, 216,
	217, 218, 219, 220, 221, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 212, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 213, 214,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 211, 0, 169,
	107, 195, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 0, 210, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 551, 0, 0, 0,
	0, 116, 0, 0, 170, 130, 0, 133, 0, 0,
	176, 142, 575, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 354,
	0, 553, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 548, 547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 215,
	216, 217, 218, 219, 220, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 212, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 213,
	214, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 211, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 0, 210, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 669, 0, 0,
	0, 0, 116, 0, 0, 170, 130, 0, 133, 0,
	0, 176, 142, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 671, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	215, 216, 217, 218, 219, 220, 221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 212, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	213, 214, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 211,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 23, 125, 0, 91, 99, 132, 0, 210, 0,
	163, 118, 197, 154, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 170, 130, 0, 133,
	0, 0, 176, 142, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 354, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 168, 155,
	194, 0, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 215, 216, 217, 218, 219, 220, 221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 212, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 213, 214, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	211, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 23, 125, 0, 91, 99, 132, 0, 210,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 170, 130, 0,
	133, 0, 0, 176, 142, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 215, 216, 217, 218, 219, 220, 221, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 212,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 213, 214, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 211, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 0,
	210, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 170, 130,
	0, 133, 0, 0, 176, 142, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 354, 0, 0, 803, 0, 0, 804,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 215, 216, 217, 218, 219, 220, 221,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	212, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 213, 214, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 211, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 91, 99, 132,
	0, 210, 0, 163, 118, 197, 154, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 116, 690, 0, 170,
	130, 0, 133, 0, 0, 176, 142, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 354, 0, 689, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 215, 216, 217, 218, 219, 220,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 212, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 213, 214, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 211, 0, 169, 107, 195, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 0, 210, 0, 163, 118, 197, 154, 0, 0,
	92, 0, 669, 0, 0, 0, 0, 116, 0, 0,
	170, 130, 0, 133, 0, 0, 176, 142, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 671, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 667, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 215, 216, 217, 218, 219,
	220, 221, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 212, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 213, 214, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 211, 0, 169, 107, 195, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 91,
	99, 132, 0, 210, 0, 163, 118, 197, 154, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 170, 130, 0, 133, 0, 0, 176, 142, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 1422, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 215, 216, 217, 218,
	219, 220, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 212, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 213, 214, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 211, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 0, 210, 0, 163, 118, 197, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 170, 130, 0, 133, 0, 0, 176, 142,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 215, 216, 217,
	218, 219, 220, 221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 212, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 213, 214, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 211, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 91, 99, 132, 0, 210, 0, 163, 118, 197,
	0, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	1774, 116, 0, 170, 0, 130, 0, 133, 0, 0,
	176, 142, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	1313, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 215,
	216, 217, 218, 219, 220, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 212, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 213,
	214, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 211, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 0, 210, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 170, 130, 0, 133, 0,
	0, 176, 142, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	215, 216, 217, 218, 219, 220, 221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 212, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	213, 214, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 211,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 0, 210, 0,
	163, 118, 197, 154, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 170, 130, 0, 133,
	0, 0, 176, 142, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 671, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 168, 155,
	194, 0, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 215, 216, 217, 218, 219, 220, 221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 212, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 213, 214, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	211, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 0, 210,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 170, 130, 0,
	133, 0, 0, 176, 142, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 0, 553, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 215, 216, 217, 218, 219, 220, 221, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 212,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 213, 214, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 211, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 0,
	210, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 170, 130,
	0, 133, 0, 0, 176, 142, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 215, 216, 217, 218, 219, 220, 221,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	212, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 213, 214, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 211, 763, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 91, 99, 132,
	0, 210, 0, 163, 118, 197, 154, 0, 0, 92,
	0, 0, 0, 0, 0, 647, 116, 0, 0, 170,
	130, 0, 133, 0, 0, 176, 142, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 215, 216, 217, 218, 219, 220,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 212, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 213, 214, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 211, 0, 169, 107, 195, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 337, 210, 0, 163, 118, 197, 0, 154, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 116, 0,
	170, 0, 130, 0, 133, 0, 0, 176, 142, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 215, 216, 217, 218,
	219, 220, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 212, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 213, 214, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 211, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 0, 210, 0, 163, 118, 197, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 170, 130, 0, 133, 0, 0, 176, 142,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 215, 216, 217,
	218, 219, 220, 221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 212, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 213, 214, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 211, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 91, 99, 132, 0, 210, 0, 163, 118, 197,
	154, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 170, 130, 0, 133, 0, 0, 176,
	142, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 354, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 215, 216,
	217, 218, 219, 220, 221, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 212, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 213, 214,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 211, 0, 169,
	107, 195, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 0, 210, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 170, 130, 0, 133, 0, 0,
	176, 142, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 215,
	216, 217, 218, 219, 220, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 212, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 213,
	214, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 211, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 0, 210, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 170, 130, 0, 133, 0,
	0, 176, 142, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	215, 216, 217, 218, 219, 220, 221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 212, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	213, 214, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 211,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 0, 210, 0,
	163, 118, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 104,
}

var yyPact = [...]int{
	2527, -1000, -213, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1425, 1478, -1000, -1000, -1000, -1000, -1000, -1000, 1240,
	1104, 427, 474, 160, 14611, 434, 2892, 15193, -1000, 120,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1157, -1000, -1000,
	-1000, -1000, -1000, 1402, 1409, 1211, 1390, 1297, -1000, 7916,
	405, 12864, 14320, 5760, -1000, 1054, -172, 416, 14902, 403,
	403, 14902, 14902, 403, -1000, -85, 428, 15193, -1000, 15193,
	376, 1052, 376, 376, 376, 15193, -1000, 529, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 15193, 1025, 1336, 373, 4464, 4464, 4464, 4464,
	263, 4464, -35, 1263, -1000, -1000, -1000, -1000, 4464, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 890,
	1338, 8498, 8498, 1425, -1000, 1157, -1000, -1000, -1000, 1321,
	-1000, -1000, 701, 1449, -1000, 9953, 526, -1000, 8498, 81,
	1158, -1000, -1000, 1158, -1000, -1000, 500, -1000, -1000, -1000,
	9371, 9371, 9371, 9371, 9371, 9371, 9371, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1158, 523, -1000, 8207, 1158, 1158, 1158, 1158, 1158,
	1158, 1158, 1158, 8498, 1158, 1158, 1158, 1158, 1158, 1158,
	1158, 1158, 1158, 1952, 1158, 1158, 1158, 1158, 14028, 1132,
	1354, -1000, -1000, -1000, 1369, 10826, 11699, 15193, 1093, -1000,
	1159, 5436, -3, -1000, -1000, -1000, 644, 517, 11408, -1000,
	-1000, -1000, 1332, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1045, -1000, 2747, 472, -1000, -1000, 15193, 1138, 1012, 684,
	1008, 1261, 331, 15193, -1000, 13737, 4464, 412, 15193, 1360,
	1260, 15193, 1004, 974, -1000, 6732, -1000, 4464, 4464, 4464,
	4464, 4464, 4464, 4464, 4464, -1000, -1000, -1000, -1000, -1000,
	-1000, 4464, 4464, -1000, 17, -1000, 15193, -1000, -1000, -1000,
	-1000, 1472, 552, 865, 516, 1160, -1000, 709, 1402, 890,
	1297, 11117, 1249, -1000, -1000, 15193, -1000, 8498, 8498, 745,
	-1000, 13446, -1000, -1000, 5112, 559, 9371, 735, 626, 9371,
	9371, 9371, 9371, 9371, 9371, 9371, 9371, 9371, 9371, 9371,
	9371, 9371, 9371, 9371, 859, 1952, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 970, -1000, 1157, 935, 935, 18,
	18, 18, 18, 18, 18, 9662, 7334, 6084, 890, 1040,
	573, 8207, 7916, 7916, 8498, 8498, 15484, 15484, 7916, 1371,
	668, 573, 15484, -1000, 890, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 69, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 7916, 7916, 7916, 7916, 274, 15193, -1000, 15484,
	12864, 12864, 12864, 12864, 12864, -1000, 1284, 1279, -1000, 1278,
	1275, 1324, 15193, -1000, 1033, 10826, 514, 1158, -1000, 13155,
	-1000, -1000, 274, 1103, 12864, 15193, -1000, -1000, 4788, 1159,
	-3, 1141, -1000, -47, 0, 7043, 6084, 535, -1000, -1000,
	-1000, -1000, 3816, 754, 804, -134, 30, -1000, -1000, -1000,
	-1000, 1195, -1000, 1195, 273, 1195, 1195, 1195, -1000, 1195,
	1195, 52, 52, 52, 52, 52, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1239, 1225, -1000, 1195, 1195, 1195, -1000,
	1195, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1220, 275, 1220, 1197, 1197, -1000, -1000, 14902, 1368,
	-111, 961, 4464, 1359, 4464, 15193, 1460, 15193, -1000, -1000,
	-1000, -1000, 1156, 15193, -1000, 15193, -1000, -1000, 15193, 4464,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 586, -1000, -1000, -1000, -1000,
	1302, 8498, 8498, 6408, 8498, -1000, -1000, -1000, 1338, -1000,
	1371, 1396, -1000, 1325, 1311, 7916, -1000, -1000, 559, 595,
	-1000, -1000, 844, -1000, -1000, -1000, -1000, 511, 1158, -1000,
	475, -1000, -1000, -1000, -1000, 735, 9371, 9371, 9371, 1889,
	475, 2035, 375, 34, 18, 135, 135, 15, 15, 15,
	15, 15, 798, 798, -1000, -1000, -1000, -1000, 890, -1000,
	-1000, -1000, 890, 7916, 1148, -1000, -1000, -1000, 8498, -1000,
	890, 1029, 1029, 778, 639, 1165, -1000, 510, 1147, 1029,
	7916, 663, -1000, 8498, 890, -1000, -1000, 1029, 890, 1029,
	1029, 1060, 1158, -1000, 1149, -1000, 641, 1354, 1236, 1259,
	1238, -1000, -1000, -1000, -1000, 1277, -1000, 1276, -1000, -1000,
	-1000, -1000, -108, 458, 432, 420, 14902, -1000, 1440, 12864,
	1129, -1000, -1000, 1141, -3, -16, -1000, -1000, -1000, -1000,
	573, 632, -1000, -1000, 956, 1140, 3492, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1224, 800, 14902, 353, 400,
	494, 470, 954, -1000, -1000, -1000, 803, -1000, 14902, 1466,
	-1000, -1000, 349, -1000, 329, 678, 866, 15193, 134, 1222,
	2547, -1000, -224, -1000, 22, -1000, -1000, 846, 52, 52,
	1195, 52, 52, 52, -1000, -1000, 535, 1330, 535, 535,
	535, 535, 864, 864, -115, -115, -1000, -1000, -1000, 843,
	1220, -1000, -1000, -1000, 834, -1000, 1217, 1157, -1000, 6084,
	-1000, -1000, -1000, -1000, -1000, 1363, 1102, -1000, -1000, -1000,
	-1000, 315, -1000, 2154, 2136, 509, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 268, 477, -1000,
	4464, -1000, 661, 15193, 15193, 1293, 573, 573, 508, -1000,
	-1000, 15193, -1000, -1000, -1000, -1000, 1133, -1000, -1000, -1000,
	4140, 7916, -1000, 1889, 475, 338, -1000, 9371, 9371, -1000,
	-1000, 1029, 7916, 573, -1000, -1000, -1000, 1316, 859, 1316,
	9371, 9371, 6408, 9371, 9371, -103, 1128, 658, -1000, 8498,
	614, -1000, -1000, -1000, -1000, -1000, 1246, 15484, 1158, -1000,
	10535, 14902, 1425, 15484, 8498, 8498, -1000, -1000, 8498, 1213,
	-1000, 8498, -1000, -1000, -1000, -1000, 1212, 1158, 1158, 1158,
	994, -1000, 1425, 1129, -1000, -1000, -1000, -66, -11, -1000,
	8498, -1000, 3816, -1000, 3816, 12573, -1000, 1456, 1395, 292,
	381, -1000, 947, 894, -1000, 883, -1000, 11, -1000, -170,
	86, -25, -1000, -1000, 1158, -1000, 1210, 1362, -1000, 1341,
	827, -1000, 2028, -205, -1000, -1000, -1000, -1000, -1000, -1000,
	1158, 1207, 1201, -1000, 1198, -1000, -1000, -1000, 1069, 535,
	535, 52, 535, 535, 535, -1000, 593, -1000, -1000, -1000,
	-1000, 1023, -1000, 1018, -1000, 80, 79, -1000, 1137, -1000,
	1016, 15193, 14902, -1000, 1127, -1000, 628, 1394, 182, 15193,
	1460, 1460, -1000, 326, -1000, 14902, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14902, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15193, -1000, -1000, -1000,
	-1000, -1000, 14902, 372, -1000, -1000, 863, 8498, -1000, -1000,
	-1000, 6084, -1000, 1440, 12864, -1000, -1000, 890, -1000, 9371,
	475, 475, -1000, -1000, 890, 1195, 1195, -1000, 1195, 1197,
	-1000, -1000, 1195, 108, 1195, 94, 890, 890, 200, 1840,
	-1000, 150, 1776, 1158, -97, -1000, 573, 8498, -1000, 1343,
	1079, 1123, -1000, -1000, 7625, 890, 998, 506, 994, 1402,
	-1000, 573, 573, 573, 11990, 573, -183, 11990, 11990, 11990,
	10244, 14902, 1402, -1000, -1000, -1000, -1000, 573, 3492, -1000,
	992, -1000, 1195, 1195, 386, 386, -171, 325, 290, -1000,
	-1000, -1000, -1000, -172, -1000, -1000, 678, -1000, 8498, 11990,
	102, -1000, 1126, 1056, 888, -1000, 487, 890, -1000, 799,
	-1000, 797, 1041, -1000, -1000, -1000, 535, -1000, -1000, -1000,
	-1000, -1000, 52, 862, 52, 6, -17, 815, -1000, 809,
	1136, 1245, 6084, 3816, 411, 1437, -1000, -1000, 1384, -1000,
	1095, 14902, -1000, -1000, -1000, 1194, -1000, -1000, -1000, -1000,
	1353, 14902, -1000, -1000, 573, 1438, 1125, -1000, 475, -1000,
	-1000, 230, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 9371, 9371, -1000, 9371, 9371, 9371, 890, 860, 573,
	288, -1000, 1158, -1000, -1000, 1106, 14902, 14902, -1000, -1000,
	984, -1000, -1000, 982, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 978, 978, 978, 514, -1000, -1000, 287, 12573, 1350,
	-1000, 710, -1000, -1000, 692, 173, 703, -1000, 14902, -172,
	-1000, 1158, 854, 969, 9371, 1193, 808, -1000, 1034, 68,
	-115, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 535,
	-1000, 535, -1000, -1000, 1030, 995, 12573, 14902, 15193, -1000,
	-1000, 14902, -1000, -1000, -1000, -1000, -1000, 155, 2734, 1191,
	11990, 1158, 377, 1428, 1405, -1000, -1000, 217, 217, 217,
	217, 119, -1000, -1000, 1463, -1000, 1158, -1000, 1157, 503,
	-1000, 14902, -1000, -1000, -183, -1000, -1000, -1000, -108, 1167,
	433, 137, -1000, 875, 622, 848, 610, 607, 603, 601,
	583, 579, 576, -1000, -1000, -1000, 1462, -1000, -1000, -1000,
	1452, 1188, -1000, 1186, 8498, 188, -1000, 1335, -1000, 953,
	913, -1000, -1000, -1000, -1000, -1000, -1000, 966, 1183, 1179,
	1086, -1000, 145, 2734, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1425, 14902, 14902, 14902, 14902, 300, 9080,
	9080, 12573, 952, 265, 286, -1000, 8498, 8498, -1000, -1000,
	-1000, -1000, 890, 159, -137, 15484, 1123, 890, 14902, -1000,
	-1000, -1000, -1000, 14902, -1000, -120, 433, 14902, -1000, 806,
	-1000, -1000, 738, 802, 738, 738, 738, 738, 738, 386,
	386, 14902, 12573, 854, -1000, -100, -152, 478, -1000, -1000,
	-185, 12573, 12573, -109, 14902, 8498, 1792, -1000, 1402, 1115,
	163, -1000, -1000, -1000, -1000, 14902, 1448, 1444, 1443, 1439,
	1049, 81, 139, 944, 1138, 931, -1000, 14902, 1178, 573,
	1112, -1000, 1291, -106, -147, 1110, -1000, -1000, 1158, 929,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 678, 678, 919, 912, -1000, -1000, -1000, -1000,
	143, 813, 769, 767, 762, 7, -1000, 1404, 1440, 1173,
	908, 906, -1000, -211, -1000, 573, -1000, -1000, 2734, 1338,
	14902, 149, -1000, -1000, 1346, -1000, -1000, -1000, -1000, -1000,
	2734, 2734, -1000, -111, -1000, 265, 1309, 12573, -1000, 1289,
	-1000, 14902, -1000, 433, -1000, -1000, 339, 287, 731, -1000,
	723, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12281, 287,
	11990, 1440, 287, 8498, -218, -1000, -1000, 2747, 1381, 14902,
	2539, -1000, 2512, -1000, -1000, 204, 889, -112, 890, -1000,
	15193, 1167, -1000, -1000, -1000, 496, 1167, 880, 287, -1000,
	573, 594, 1157, -1000, -1000, -1000, 660, 191, -1000, -145,
	-1000, 1172, -1000, 6084, -1000, -1000, -1000, -1000, -1000, 121,
	1158, -148, 14902, -1000, 2734, 8789, -1000, 874, 2371, 217,
	890, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1706, 6, 52, 1705, 1702, 1701, 1496, 1494, 1488,
	1486, 1699, 1696, 1695, 1694, 1691, 1690, 1688, 1687, 1686,
	1685, 1684, 1683, 1678, 1674, 1672, 1670, 1669, 491, 1668,
	1667, 1666, 97, 1664, 99, 1663, 1659, 67, 117, 75,
	66, 1804, 1657, 49, 90, 122, 1656, 81, 1655, 1654,
	112, 1653, 85, 1652, 1651, 123, 1650, 1649, 39, 5,
	20, 44, 1637, 1636, 101, 274, 1634, 1631, 1629, 1628,
	1627, 1626, 82, 18, 28, 31, 40, 1625, 77, 21,
	1621, 79, 1620, 1619, 1618, 1615, 29, 1614, 83, 33,
	23, 12, 1612, 8, 1610, 100, 60, 47, 17, 106,
	91, 1609, 57, 88, 76, 1607, 1605, 815, 1598, 1596,
	1595, 1594, 1591, 1589, 779, 746, 1587, 1586, 1585, 59,
	0, 467, 25, 107, 1584, 68, 1583, 1829, 103, 98,
	46, 1581, 48, 2016, 65, 1579, 1574, 61, 105, 109,
	104, 102, 1573, 1572, 1569, 1568, 1567, 96, 56, 71,
	34, 1566, 1563, 1562, 32, 116, 45, 70, 84, 1560,
	1557, 1556, 50, 1554, 19, 36, 2, 87, 1551, 1550,
	1549, 1548, 55, 42, 1547, 37, 15, 9, 3, 4,
	1545, 1544, 1543, 10, 1542, 41, 1536, 11, 1534, 16,
	1532, 1531, 1530, 1529, 1527, 1523, 1521, 1520, 1519, 1517,
	30, 14, 58, 43, 26, 74, 51, 1516, 53, 1514,
	1, 24, 1511, 13, 1510, 1509, 1508, 27, 22, 1507,
	1503, 1502, 1692, 965, 1501, 1500, 1490, 1484, 265,
}

var yyR1 = [...]int{
	0, 220, 221, 221, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 224,
	224, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 214, 214, 213, 215, 215, 12, 12, 12, 12,
	12, 207, 207, 207, 207, 207, 13, 13, 210, 210,
	14, 14, 100, 100, 104, 104, 104, 105, 105, 105,
	105, 135, 135, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 205, 205, 205, 206, 206, 206,
	208, 208, 209, 209, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 212, 212, 191, 191, 191, 192, 192,
	192, 192, 192, 192, 194, 194, 195, 195, 125, 125,
	189, 189, 188, 187, 187, 186, 186, 185, 196, 196,
	20, 169, 170, 170, 170, 170, 170, 158, 139, 139,
	139, 139, 139, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 202, 202, 202, 203, 203,
	203, 203, 203, 203, 203, 203, 198, 198, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 148, 148, 148, 148, 148, 148, 197, 197,
	193, 193, 193, 193, 193, 193, 143, 143, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 142, 142,
	142, 142, 142, 142, 142, 142, 144, 144, 144, 144,
	144, 144, 144, 144, 140, 140, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 146,
	146, 146, 146, 146, 146, 146, 146, 157, 157, 147,
	147, 155, 155, 156, 156, 156, 154, 154, 154, 151,
	151, 152, 152, 153, 153, 153, 149, 149, 149, 150,
	150, 150, 160, 178, 178, 178, 180, 180, 181, 181,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 168, 168, 204, 204, 177, 177, 177, 174, 174,
	174, 174, 174, 174, 174, 174, 167, 167, 176, 176,
	175, 175, 162, 162, 162, 162, 162, 163, 164, 164,
	164, 164, 161, 200, 200, 200, 201, 201, 165, 165,
	166, 166, 171, 171, 171, 172, 172, 172, 173, 173,
	173, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 225, 225, 226, 226, 226, 226,
	226, 226, 226, 184, 182, 182, 183, 183, 17, 18,
	18, 18, 18, 18, 19, 19, 21, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	112, 112, 109, 109, 110, 110, 111, 111, 111, 113,
	113, 113, 136, 136, 136, 23, 23, 25, 25, 26,
	27, 24, 24, 24, 24, 24, 227, 28, 29, 29,
	30, 30, 30, 34, 34, 34, 32, 32, 33, 33,
	39, 39, 38, 38, 40, 40, 40, 40, 124, 124,
	124, 123, 123, 42, 42, 43, 43, 44, 44, 45,
	45, 45, 217, 217, 216, 216, 218, 218, 218, 218,
	218, 218, 57, 57, 93, 93, 93, 96, 96, 46,
	46, 46, 46, 47, 47, 48, 48, 49, 49, 131,
	131, 130, 130, 130, 129, 129, 51, 51, 51, 53,
	52, 52, 52, 52, 54, 54, 56, 56, 55, 55,
	58, 58, 58, 58, 59, 59, 94, 94, 41, 41,
	41, 41, 41, 41, 41, 108, 108, 61, 61, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 71,
	71, 71, 71, 71, 71, 62, 62, 62, 62, 62,
	62, 62, 37, 37, 72, 72, 72, 78, 73, 73,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 69, 69, 69, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	228, 228, 70, 70, 70, 70, 35, 35, 35, 35,
	35, 134, 134, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 138, 138, 138,
	138, 138, 138, 138, 82, 82, 36, 36, 80, 80,
	81, 83, 83, 79, 79, 79, 219, 64, 64, 64,
	64, 64, 64, 64, 64, 66, 66, 66, 84, 84,
	85, 85, 86, 86, 87, 87, 88, 89, 89, 89,
	90, 90, 90, 90, 91, 91, 91, 63, 63, 63,
	63, 63, 63, 92, 92, 92, 92, 97, 97, 74,
	74, 76, 76, 75, 77, 98, 98, 102, 99, 99,
	103, 103, 103, 103, 103, 101, 101, 101, 126, 126,
	126, 106, 106, 114, 114, 115, 115, 107, 107, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 117,
	117, 117, 118, 118, 121, 121, 122, 122, 127, 127,
	128, 128, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 222, 223,
	132, 133, 133, 133,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	5, 9, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 14, 13, 14, 6, 5, 5,
	5, 11, 11, 9, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 1, 4, 0, 2, 2, 0, 2,
	2, 2, 2, 2, 0, 2, 0, 3, 0, 1,
	0, 2, 1, 0, 2, 1, 3, 3, 0, 2,
	4, 4, 1, 3, 3, 3, 3, 2, 3, 1,
	1, 1, 1, 2, 2, 3, 2, 4, 4, 2,
	2, 3, 2, 3, 2, 7, 8, 3, 3, 6,
	8, 5, 8, 7, 4, 2, 4, 6, 2, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 0, 4,
	3, 4, 3, 3, 3, 3, 3, 3, 3, 2,
	4, 6, 2, 3, 2, 3, 1, 3, 0, 2,
	0, 3, 3, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
	2, 2, 2, 2, 1, 1, 1, 3, 3, 2,
	1, 2, 1, 1, 1, 1, 4, 4, 4, 4,
	4, 1, 5, 2, 2, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 3, 3, 0,
	1, 0, 1, 0, 2, 1, 0, 3, 3, 0,
	1, 2, 6, 0, 1, 4, 1, 2, 1, 3,
	2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 1, 1, 0, 2, 5, 2, 3,
	3, 2, 3, 2, 3, 4, 1, 1, 1, 3,
	3, 2, 2, 5, 5, 8, 8, 13, 1, 1,
	2, 2, 10, 0, 1, 1, 0, 3, 0, 1,
	1, 3, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 11, 13, 7, 7, 7, 12, 7, 7,
	7, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 6, 4, 2, 4, 2, 2, 2, 2, 3,
	1, 1, 0, 1, 0, 1, 0, 2, 2, 0,
	2, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 0, 4, 1, 3, 1, 1, 1, 1,
	1, 1, 4, 8, 1, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	0, 5, 5, 5, 0, 2, 0, 4, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 3, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 6, 8, 8, 6, 8, 8, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	1, 2, 1, 2, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 5, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -220, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	113, 114, 116, 115, 145, 117, 138, 49, 186, 187,
	189, 190, 26, 139, 140, 143, 144, -222, 8, 291,
	53, -221, 332, -86, 15, -30, 5, -28, -227, -28,
	-28, -28, -28, -28, -169, 53, -125, -196, 153, 283,
	119, 134, 152, 120, 136, 71, -107, 122, 124, 120,
	120, 121, 122, 283, 119, 120, -55, -127, 56, -120,
	160, 300, 21, 186, 199, 200, 191, 232, 220, 301,
	158, 217, 221, 269, 331, 65, 189, 278, 128, 164,
	141, 212, 215, 214, 206, 203, 28, 238, 307, 205,
	131, 239, 243, 249, 270, 298, 196, 197, 272, 236,
	32, 133, 302, 34, 149, 273, 241, 235, 230, 234,
	195, 229, 38, 209, 245, 244, 246, 268, 223, 159,
	248, 225, 207, 224, 18, 144, 147, 240, 242, 204,
	161, 126, 151, 306, 274, 202, 148, 162, 143, 277,
	322, 157, 190, 271, 198, 280, 37, 254, 216, 193,
	208, 194, 130, 187, 155, 227, 150, 210, 211, 233,
	192, 228, 188, 152, 145, 279, 255, 308, 226, 222,
	218, 219, 156, 122, 153, 154, 261, 262, 263, 264,
	304, 275, 213, 256, 257, 166, 167, 168, 169, 170,
	171, 172, 120, 107, 221, 113, 259, 121, 32, 151,
	-136, 120, -109, 154, 261, 262, 263, 264, 56, 271,
	270, 265, -127, 188, -132, -132, -132, -132, -132, -2,
	-90, 17, 16, -5, -3, -222, 6, 21, 22, -34,
	39, 40, -29, -40, 98, -41, -127, -60, 73, -65,
	29, 56, -120, 24, -64, -61, -79, -219, -77, -78,
	107, 108, 96, 97, 104, 74, 109, -69, -67, -68,
	-70, 58, 57, 66, 59, 60, 61, 62, 67, 68,
	69, -121, 281, -75, -222, 43, 44, 292, 293, 294,
	295, 299, 296, 76, 33, 282, 290, 289, 288, 286,
	287, 284, 285, 330, 125, 283, 102, 291, -107, -43,
	-44, -45, -46, -57, -78, -222, -55, 11, -50, -55,
	-99, -135, 188, -103, 271, 270, -122, 281, -101, -121,
	-119, 269, 221, 268, 56, -120, 118, 174, 311, 72,
	23, 25, 252, 258, 173, 75, 107, 16, 76, 180,
	320, 321, 106, 292, 113, 47, 284, 285, 282, 178,
	294, 295, 283, 259, 185, 20, 29, 10, 26, 139,
	22, 100, 115, 175, 79, 80, 142, 24, 140, 69,
	181, 183, 19, 50, 132, 11, 310, 13, 14, 324,
	312, 125, 124, 91, 323, 121, 45, 8, 109, 27,
	88, 41, 137, 184, 43, 89, 17, 286, 287, 31,
	299, 146, 102, 48, 35, 325, 73, 326, 67, 51,
	276, 179, 71, 15, 46, 327, 134, 182, 90, 116,
	291, 44, 176, 328, 119, 177, 6, 297, 30, 138,
	42, 120, 260, 78, 123, 68, 5, 136, 9, 49,
	52, 288, 289, 290, 33, 77, 12, 135, 303, 70,
	-170, -158, 56, -200, 320, 321, 122, -121, -115, 125,
	-115, -121, -121, -115, 291, 120, -55, -55, -114, 125,
	56, -114, -114, -114, -55, 110, -55, 56, 30, 283,
	56, 151, 120, 152, 122, -133, -222, -122, -133, -133,
	-133, 155, 156, -133, -110, 266, 51, -133, -223, 55,
	-91, 19, 31, -41, -127, -87, -88, -41, -86, -2,
	-28, 35, -32, 22, 64, 11, -124, 72, 71, 88,
	-123, 23, -121, 58, 110, -41, -62, 91, 73, 89,
	90, 75, 93, 92, 103, 96, 97, 98, 99, 100,
	101, 102, 94, 95, 106, 330, 81, 82, 83, 84,
	85, 86, 87, -108, -222, -78, -222, 111, 112, -65,
	-65, -65, -65, -65, -65, -65, -222, 110, -2, -73,
	-41, -222, -222, -222, -222, -222, -222, -222, -222, -222,
	-82, -41, -222, -228, -222, -228, -228, -228, -228, -228,
	-228, -228, -138, 107, 221, 141, 212, -141, -140, 227,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
	220, 301, -222, -222, -222, -222, -56, 27, -55, 30,
	54, -51, -53, -52, -54, 41, 45, 47, 42, 43,
	44, 48, -131, 23, -43, -222, -130, 147, -129, 23,
	-127, 58, -55, -50, -224, 54, 11, 52, 54, -99,
	188, -100, -104, 272, 274, 81, 110, -126, -121, 58,
	29, 30, 55, 54, -159, -139, -143, -140, -145, -144,
	-146, -141, -142, 217, 221, 218, 223, 224, 225, 107,
	222, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	236, 237, 226, 238, 30, 141, 210, 211, 212, 215,
	214, 216, 213, 239, 240, 241, 242, 243, 244, 245,
	246, 202, 203, 205, 206, 207, 209, 208, 121, -55,
	-189, 52, 56, 73, 56, 51, -205, 51, 19, 173,
	174, -55, -55, 276, -133, 123, -55, 24, 51, -55,
	56, 56, -128, -127, -119, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -112, 260, 267, -55, 9,
	91, 54, 18, 110, 54, -89, 25, 26, -90, -223,
	-34, -66, -121, 59, 62, -33, 42, -55, -41, -41,
	-71, 67, 73, 68, 69, -123, 98, -128, -122, -119,
	-65, -72, -75, -78, 63, 91, 89, 90, 75, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -134, 56, 58, -138, 56, -64,
	-64, -121, -39, 22, -38, -40, -122, -223, 54, -223,
	-2, -38, -38, -41, -41, -79, -121, -127, -79, -38,
	-32, -80, -81, 77, -79, -223, 219, -38, -39, -38,
	-38, -95, 147, -55, -98, -102, -79, -44, -45, -45,
	-44, -45, 41, 41, 41, 46, 41, 46, 41, -52,
	-127, -223, -58, 49, 124, 50, -222, -129, -95, 52,
	-43, -55, -103, -100, 54, 273, 275, 276, 51, 70,
	-41, -122, -150, 107, 106, -171, -172, -173, -122, 58,
	59, -158, -160, -162, -161, -174, -163, 128, 126, 130,
	131, 136, -167, 121, 137, 67, 73, -202, 128, 51,
	252, 258, 126, 137, 136, 331, 65, 129, 310, 312,
	29, -153, 333, 247, -151, 255, -147, 53, -147, -147,
	219, -147, -147, -147, -147, -147, -149, 221, -149, -149,
	-149, -149, 53, 53, -147, -147, -147, -147, -155, 53,
	204, -155, -155, -156, 53, -156, -121, 23, -187, 303,
	-188, 56, -133, 24, -133, -55, -208, -206, 8, 9,
	10, -55, -116, 118, 115, 116, -184, 114, 252, 221,
	65, 29, 15, 292, 147, 308, 56, 148, -55, -55,
	-55, -133, -111, 11, 91, 37, -41, -41, -128, -88,
	-91, -106, 19, 11, 33, 33, -38, 67, 68, 69,
	110, -222, -72, -65, -65, -65, -37, 142, 72, -223,
	-223, -38, 54, -41, -223, -223, -223, 54, 52, 23,
	54, 11, 110, 54, 11, -223, -38, -83, -81, 79,
	-41, -223, -223, -223, -223, -223, -63, 30, 33, -2,
	-222, -222, -59, 54, 12, 81, -48, -47, 51, 52,
	-49, 51, -47, 41, 41, -217, 303, 121, 121, 121,
	-96, -121, -59, -43, -59, -104, -105, 277, 274, 280,
	81, 56, 54, -173, 81, 53, -201, 51, 73, -165,
	-121, 137, -167, -167, 56, -167, 56, 56, 67, 19,
	-121, 9, 137, 137, -201, 58, -127, -198, 311, 16,
	53, -203, 53, 58, 59, 60, 67, -148, 66, -61,
	248, 282, 285, 284, 249, 334, -152, 256, 59, -149,
	-149, -147, -149, -149, -149, -150, 30, -150, -150, -150,
	-150, -157, 58, -157, -154, 303, 304, -154, 59, -155,
	59, 51, 52, -2, -186, -185, -122, -191, 23, 51,
	54, -205, -132, -125, -226, 153, 127, 132, 131, 56,
	126, 130, 147, -190, 153, 127, 128, 132, 131, 56,
	121, 137, 126, 130, 147, 136, -117, -118, 123, 23,
	121, 137, 147, 118, -133, -113, 89, 12, -127, -127,
	38, 110, -55, -42, 11, 98, -122, -39, -37, 72,
	-65, -65, -223, -40, -137, 107, 217, 141, 212, 206,
	236, 237, 223, 254, 210, 255, -134, -137, -65, -65,
	-122, -65, -65, 300, -86, 80, -41, 78, -97, 51,
	-98, -74, -76, -75, -222, -2, -92, -121, -96, -86,
	-102, -41, -41, -41, 53, -41, 53, -222, -222, -222,
	-223, 54, -86, -59, 274, 278, 279, -41, -172, -173,
	-176, -175, -121, 137, 10, 9, 19, 132, 126, 56,
	56, 56, -200, 136, 322, -202, 331, -148, -222, 53,
	23, 29, 59, -203, 53, -193, 330, -222, -147, 53,
	-147, 53, 53, 55, -150, -150, -149, -150, -150, -150,
	56, 107, 55, 54, 55, 210, 210, 54, 55, 54,
	-55, -121, 54, 81, -192, 19, 161, 162, -55, -206,
	-208, -225, 121, 137, -132, -121, -132, -121, -55, -132,
	-121, 128, -162, 58, -41, -59, -43, -223, -65, -223,
	-147, -147, -147, -156, -147, 197, -147, 197, -223, -223,
	-223, 54, 19, -223, 54, 19, -222, -36, 297, -41,
	28, -97, 54, -223, -223, -223, 54, 110, -223, -90,
	-93, -121, 137, -216, -218, 324, 325, 326, 327, 328,
	329, -93, -93, -93, -130, -121, -90, 55, 54, -147,
	-147, -164, 157, 158, 30, 159, -164, 322, 137, 137,
	-200, -201, -41, -93, 53, 312, 54, 55, -203, 221,
	211, 250, 227, 236, -223, 55, 55, 55, -150, -149,
	58, -149, 257, 257, 59, 59, 53, 52, 51, -185,
	-173, 123, 21, 6, 8, 9, 10, 19, 23, -121,
	53, 27, -121, -84, 13, -149, 56, -65, -65, -65,
	-65, -65, -223, 58, 137, -76, 33, -2, -222, -121,
	-121, 54, 55, 55, 54, -223, -223, -223, -58, -178,
	-180, 303, -179, 52, 133, 65, 166, 167, 168, 169,
	170, 171, 172, -175, -89, -201, 51, 67, 160, -201,
	51, -165, -121, -200, -222, -223, 55, -65, 53, 59,
	55, 219, -154, -150, -150, 55, 55, -176, -121, -55,
	-166, -121, 175, -209, -211, -7, -9, -8, -11, -10,
	-12, -13, -14, -3, 20, 179, 180, 185, 181, 135,
	125, 53, -93, -222, 126, -85, 14, 16, -223, -223,
	-223, -223, -35, 91, 303, 9, -74, -2, 110, -121,
	-218, -217, -177, 51, -179, 303, 53, 305, 56, -168,
	81, 58, 81, 81, 81, 81, 81, 81, 81, 9,
	10, 53, 53, -41, -197, 159, 55, -199, 55, 55,
	55, 53, 53, -194, 54, 52, 176, -211, -86, -214,
	-121, -213, -121, -121, -121, -207, 35, 182, 183, 184,
	-60, -65, -60, -176, 55, -182, -183, 147, 137, -41,
	-73, -223, 301, 48, 306, -98, -223, -121, -121, -181,
	-179, -121, 59, -204, 51, 70, 59, -204, -204, -204,
	-204, -204, -164, -164, -166, -176, -223, 298, 309, 55,
	187, 314, 315, 146, 316, 159, 317, 318, -94, 323,
	-176, -176, -195, 303, -121, -41, -212, -211, 186, -90,
	54, -215, -139, 177, -121, 11, 11, 11, 11, -211,
	186, 186, 55, -189, -223, 54, -121, 53, 38, 302,
	307, -222, 55, 54, -201, -201, 55, 55, 303, 59,
	16, 59, 59, 59, 59, 315, 146, 317, 16, -59,
	53, 55, 55, 331, -211, -91, -213, -121, 178, 27,
	-210, -211, -210, -187, -183, 33, -176, 38, -121, -179,
	129, -178, 59, 59, 319, -127, -178, -93, -59, -178,
	-41, 332, 19, -121, 80, -211, 80, 149, 55, 303,
	-223, -55, -177, 110, -177, 55, -178, 80, -2, 79,
	150, 306, 53, -122, 186, -222, 307, -166, -210, -65,
	146, 55, 80, -223, -223,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 722, 0, 466, 466, 466, 466, 466, 466, 0,
	-2, 777, 0, 0, 0, 0, -2, 456, 457, 0,
	459, 460, 1060, 1060, 1060, 1060, 1060, 0, 33, 34,
	1058, 1, 3, 730, 0, 0, 470, 473, 468, 0,
	777, 0, 0, 0, 83, 0, 353, 0, 0, 775,
	775, 0, 0, 775, 129, 0, 0, 0, 778, 0,
	773, 0, 773, 773, 773, 0, 415, 548, 798, 799,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 0, 0, 0, 0, 1061, 1061, 1061, 1061,
	0, 1061, 444, 433, 435, 436, 437, 438, 1061, 453,
	454, 443, 455, 458, 461, 462, 463, 464, 465, 27,
	734, 0, 0, 722, 29, 0, 466, 471, 472, 476,
	474, 475, 467, 0, 484, 488, 0, 558, 0, 563,
	565, -2, -2, 0, 600, 601, 602, 603, 604, 605,
	0, 0, 0, 0, 0, 0, 0, 629, 630, 631,
	632, 707, 708, 709, 710, 711, 712, 713, 714, 567,
	568, 703, 0, 754, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 694, 0, 660, 660, 660, 660, 660,
	660, 660, 660, 0, 0, 0, 0, 0, 0, 0,
	495, 497, 498, 499, 529, 0, 531, 0, 0, 41,
	45, 0, 1028, 758, -2, -2, 0, 0, 0, 796,
	797, -2, 938, -2, 794, 795, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	0, 142, 0, 0, 354, 355, 0, 130, 0, 0,
	0, 0, 0, 0, 139, 0, 1061, 0, 0, 0,
	0, 0, 0, 0, 414, 0, 416, 1061, 1061, 1061,
	1061, 1061, 1061, 1061, 1061, 425, 1062, 1063, 426, 427,
	428, 1061, 1061, 430, 0, 445, 0, 439, 28, 1059,
	22, 0, 0, 731, 0, 723, 724, 727, 730, 27,
	473, 0, 478, 477, 469, 0, 485, 0, 0, 0,
	489, 0, 491, 492, 0, 561, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 585, 586, 587, 588,
	589, 590, 591, 564, 0, 578, 0, 0, 0, 621,
	622, 623, 624, 625, 626, 0, 480, 0, 27, 0,
	598, 0, 0, 0, 0, 0, 0, 0, 0, 476,
	0, 695, 0, 651, 0, 652, 653, 654, 655, 656,
	657, 658, 659, 687, 0, 689, 690, 691, 692, 693,
	218, 219, 220, 221, 222, 223, 224, 225, 226, 227,
	244, 245, 0, 480, 0, 0, 43, 0, 547, 0,
	0, 0, 0, 0, 0, 536, 0, 0, 539, 0,
	0, 0, 0, 530, 0, 0, 550, 992, 532, 0,
	534, 535, -2, 0, 0, 0, 39, 40, 0, 46,
	1028, 48, 72, 0, 0, 0, 0, 299, 768, 769,
	770, 766, 362, 0, 147, 293, 289, 149, 150, 151,
	152, 279, 217, 279, 279, 279, 279, 279, 251, 279,
	279, 296, 296, 296, 296, 296, 260, 261, 262, 263,
	264, 265, 266, 0, 0, 236, 279, 279, 279, 240,
	279, 242, 243, 269, 270, 271, 272, 273, 274, 275,
	276, 281, 281, 281, 283, 283, 234, 235, 0, 0,
	133, 0, 1061, 0, 1061, 0, 0, 0, 94, 95,
	96, 140, 0, 0, 381, 0, 409, 774, 0, 1061,
	412, 413, 549, 800, 801, 417, 418, 419, 420, 421,
	422, 423, 424, 429, 432, 446, 440, 441, 434, 735,
	0, 0, 0, 0, 0, 726, 728, 729, 734, 30,
	476, 0, 715, 0, 0, 0, 479, 25, 559, 560,
	562, 579, 0, 581, 583, 490, 486, 0, 704, -2,
	569, 570, 594, 595, 596, 0, 0, 0, 0, 592,
	574, 0, 606, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 620, 671, 672, 628, 0, 618,
	619, 627, 0, 0, 481, 482, 706, 597, 0, 753,
	27, 0, 0, 0, 0, 0, 703, 0, 0, 0,
	0, 701, 698, 0, 0, 661, 688, 0, 0, 0,
	0, 0, 0, 546, 554, 755, 0, 496, 525, 527,
	0, 522, 537, 538, 540, 0, 542, 0, 544, 545,
	500, 501, 502, 0, 0, 0, 0, 533, 554, 0,
	554, 42, 759, 47, 0, 0, 75, 76, 760, 761,
	762, 0, 764, 300, 0, 141, 363, 365, 368, 369,
	370, 143, 144, 145, 146, 0, 356, 358, 0, 0,
	0, 0, 0, 336, 337, 154, 0, 156, 0, 0,
	159, 160, 0, 162, 164, 356, 0, 0, 0, 0,
	0, 153, 0, 295, 291, 290, 216, 0, 296, 296,
	279, 296, 296, 296, 253, 254, 299, 0, 299, 299,
	299, 299, 0, 0, 286, 286, 239, 241, 228, 0,
	281, 230, 231, 232, 0, 233, 0, 0, 88, 0,
	131, 132, 89, 776, 90, 115, 0, 100, 97, 98,
	99, 0, 1060, 128, 0, 789, 382, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 0, 0, 408,
	1061, 411, 449, 0, 0, 0, 732, 733, 0, 725,
	23, 0, 771, 772, 716, 717, 493, 580, 582, 584,
	0, 480, 571, 592, 575, 0, 572, 0, 0, 566,
	633, 0, 0, 599, -2, 636, 637, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 722, 0, 699, 0,
	0, 650, 662, 663, 664, 665, 747, 0, 0, -2,
	0, 0, 722, 0, 0, 0, 519, 526, 0, 0,
	520, 0, 521, 541, 543, 512, 0, 0, 0, 0,
	0, 517, 722, 554, 38, 73, 74, 0, 0, 80,
	0, 301, 0, 366, 0, 0, 342, 0, 0, 0,
	359, 328, 0, 0, 331, 0, 333, 353, 155, 0,
	0, 0, 161, 163, 0, 167, 168, 0, 186, 0,
	0, 175, 0, 210, 179, 180, 181, 182, 183, 184,
	0, 279, 279, 206, 0, 294, 148, 292, 0, 299,
	299, 296, 299, 299, 299, 255, 0, 256, 257, 258,
	259, 0, 277, 0, 237, 0, 0, 238, 0, 229,
	0, 0, 0, -2, 134, 135, 0, 118, 0, 0,
	0, 0, 371, 0, 1060, 0, 396, 397, 398, 399,
	400, 401, 402, 1060, 0, 383, 384, 385, 386, 387,
	388, 389, 390, 391, 392, 393, 0, 1060, 790, 791,
	792, 793, 0, 0, 410, 431, 0, 0, 447, 448,
	736, 0, 24, 554, 0, 487, 705, 0, 573, 0,
	593, 576, 634, 483, 0, 279, 279, 676, 279, 283,
	679, 680, 279, 682, 279, 685, 0, 0, 0, 0,
	704, 0, 0, 0, 696, 649, 702, 0, 31, 0,
	747, 737, 749, 751, 0, 27, 0, 743, 0, 730,
	756, 555, 757, 523, 0, 528, 0, 0, 0, 0,
	531, 0, 730, 37, 77, 78, 79, 763, 364, 367,
	0, 338, 279, 279, 0, 0, 0, 0, 0, 329,
	330, 332, 334, 353, 174, 157, 356, 158, 0, 0,
	0, 187, 0, 0, 0, 178, 0, 0, 202, 0,
	204, 0, 0, 280, 246, 247, 299, 248, 249, 250,
	297, 298, 296, 0, 296, 0, 0, 0, 284, 0,
	0, 0, 0, 0, 0, 0, 116, 117, 0, 101,
	0, 0, 394, 395, 375, 0, 376, 378, 379, 380,
	0, 358, 374, 450, 451, 718, 494, 635, 577, 638,
	673, 296, 677, 678, 681, 683, 684, 686, 640, 639,
	641, 0, 0, 644, 0, 0, 0, 0, 0, 700,
	0, 32, 0, 752, -2, 0, 0, 0, 44, 35,
	0, 514, 515, 0, 504, 506, 507, 508, 509, 510,
	511, 0, 0, 0, 550, 518, 36, 303, 0, 727,
	341, 356, 348, 349, 0, 0, 356, 357, 358, 353,
	335, 0, 0, 0, 0, 171, 0, 176, 0, 0,
	286, 213, 214, 215, 185, 203, 205, 207, 252, 299,
	278, 299, 287, 288, 0, 0, 0, 0, 0, 136,
	137, 0, 119, 120, 121, 122, 123, 0, 0, 0,
	0, 0, 359, 720, 0, 674, 675, 0, 0, 0,
	0, 666, 648, 697, 0, 750, 0, -2, 0, 745,
	744, 0, 524, 503, 0, 551, 552, 553, 502, 325,
	304, 0, 306, 0, 321, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 340, 343, 0, 350, 351, 344,
	0, 0, 359, 0, 0, 208, 169, 0, 188, 0,
	0, 211, 212, 267, 268, 282, 285, 0, 0, 0,
	124, 360, 0, 93, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 722, 0, 0, 0, 0, 61, 0,
	0, 0, 0, 0, 0, 26, 0, 0, 642, 643,
	645, 646, 0, 0, 0, 0, 740, 27, 0, 516,
	505, 513, 302, 0, 307, 0, 0, 0, 310, 0,
	322, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 0, 0, 0, 173, 177,
	556, 0, 0, 126, 0, 0, 0, 103, 730, 49,
	54, 51, 56, 57, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 0, 404, 0, 0, 721,
	719, 647, 0, 0, 0, 748, -2, 746, 326, 0,
	308, 313, 311, 314, 323, 324, 315, 316, 317, 318,
	319, 320, 356, 356, 0, 0, 166, 209, 170, 172,
	0, 0, 0, 0, 0, 0, 199, 0, 554, 0,
	0, 0, 91, 0, 361, 125, 92, 113, 0, 734,
	0, 0, 53, 55, 59, 62, 63, 64, 65, 66,
	0, 0, 372, 133, 403, 0, 0, 0, 667, 0,
	670, 0, 305, 0, 345, 346, 0, 303, 0, 190,
	0, 192, 193, 194, 195, 196, 197, 198, 0, 303,
	0, 554, 303, 0, 0, 112, 52, 0, 0, 0,
	0, 68, 0, 377, 405, 0, 0, 668, 0, 309,
	0, 325, 189, 191, 200, 0, 325, 0, 303, 85,
	127, 0, 0, 60, 67, 69, 70, 0, 373, 0,
	327, 0, 352, 0, 84, 557, 86, 114, -2, 0,
	0, 0, 0, 201, 0, 0, 669, 0, 0, 0,
	0, 347, 71, 406, 407,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 332,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 333, 3, 334, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:364
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:369
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:370
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:374
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:397
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:405
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:409
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:415
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:422
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:428
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:432
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:438
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:442
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:449
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:461
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:473
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:477
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:483
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:489
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:493
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:497
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:502
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:503
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:507
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:511
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:516
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:520
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:526
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:530
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:534
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:538
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:544
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:548
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:561
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:565
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:571
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:576
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:580
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:586
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:593
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:600
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:607
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:615
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:625
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:629
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:633
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:637
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:641
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:647
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:654
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:664
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:668
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:674
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:682
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:693
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:697
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:703
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:707
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:711
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:717
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:721
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:725
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:729
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:735
		{
			yyVAL.str = SessionStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:739
		{
			yyVAL.str = GlobalStr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:745
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 84:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:750
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 85:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:770
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 86:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:786
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:801
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:809
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:817
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:821
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:825
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 92:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:837
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:848
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:860
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:864
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:868
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:874
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:878
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:882
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:888
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:892
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:898
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:902
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:908
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:919
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:931
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:938
		{
			yyVAL.bytes = nil
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:942
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:946
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:951
		{
			yyVAL.bytes = nil
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:955
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:959
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:963
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:967
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:971
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:976
		{
			yyVAL.expr = nil
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:980
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:985
		{
			yyVAL.expr = nil
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:989
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:994
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:998
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1003
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1007
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1013
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1018
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1023
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1029
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1034
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1040
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1045
		{
			yyVAL.bytes = nil
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1049
		{
			yyVAL.bytes = nil
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1055
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1062
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1069
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1074
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1078
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1082
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1086
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1092
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1097
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1108
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1120
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1125
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1130
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1135
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1140
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1145
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1150
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1155
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1160
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1165
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1170
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1175
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[5].expr), NotForReplication: bool(yyDollar[3].boolVal)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[7].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1181
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[7].expr), ConstraintName: yyDollar[3].colIdent, NotForReplication: bool(yyDollar[5].boolVal)}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1186
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1191
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1196
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1203
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1209
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1215
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1221
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1227
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1234
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1238
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1242
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1248
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1252
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1256
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1260
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1264
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1268
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1272
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1276
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1282
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1286
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1291
		{
			yyVAL.sequence = &Sequence{}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1295
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1300
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1305
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1310
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1315
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1320
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1325
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1330
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1335
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1340
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1345
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1350
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 201:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1355
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1362
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1366
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1370
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1374
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1378
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1382
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1387
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1391
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1396
		{
			yyVAL.bytes = nil
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1407
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1412
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1418
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1422
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1426
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1430
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1434
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1438
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1442
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1446
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1450
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1454
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1460
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1466
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1472
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1478
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1484
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1496
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1500
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1506
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1510
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1514
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1518
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1522
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1526
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1530
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1534
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1540
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1544
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1550
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1570
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1578
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1590
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1594
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1598
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1602
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1639
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1661
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1665
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1669
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1673
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1679
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1684
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1689
		{
			yyVAL.optVal = nil
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1693
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1698
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1702
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1710
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1714
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1720
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1728
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1732
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1736
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1741
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1745
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1750
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1754
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1759
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1763
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1767
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1772
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1776
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1780
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1785
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1789
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1793
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 302:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1799
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1804
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1808
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1812
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1818
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1822
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1828
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1832
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1838
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1842
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1847
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1851
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1855
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1859
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1863
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1867
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1871
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1875
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1879
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1885
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1889
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1895
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1899
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1905
		{
			yyVAL.indexPartition = nil
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1909
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1913
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1919
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1923
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1927
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1931
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1935
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1939
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1943
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1947
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1953
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1957
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1963
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1967
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1973
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1978
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1984
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 343:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1989
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1996
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 345:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2003
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 346:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2010
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 347:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2019
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2031
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2035
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2039
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2043
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 352:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2049
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2060
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2064
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2068
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2074
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2078
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2083
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2090
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2094
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2099
		{
			yyVAL.str = ""
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2103
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2107
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2115
		{
			yyVAL.str = yyDollar[1].str
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2119
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2123
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2129
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2133
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2137
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 371:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2143
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 372:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2147
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 373:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2161
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 374:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2175
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2184
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 376:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2188
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 377:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2192
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 378:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2205
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 379:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2215
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 380:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2220
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2225
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2229
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 403:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2261
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2267
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2271
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 406:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2277
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 407:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2281
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2287
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2293
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 410:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2301
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2306
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2314
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2318
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2324
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2328
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2333
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2339
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2343
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2347
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2352
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2356
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2360
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2364
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2368
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2372
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2376
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2380
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2384
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2388
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2392
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2396
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2406
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2414
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2418
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2422
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2426
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2430
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2440
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2446
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2450
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2456
		{
			yyVAL.str = ""
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2460
		{
			yyVAL.str = "extended "
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2466
		{
			yyVAL.str = ""
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2470
		{
			yyVAL.str = "full "
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2476
		{
			yyVAL.str = ""
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2480
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2484
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2490
		{
			yyVAL.showFilter = nil
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2494
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2498
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2504
		{
			yyVAL.str = ""
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2508
		{
			yyVAL.str = SessionStr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2512
		{
			yyVAL.str = GlobalStr
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2518
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2522
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2528
		{
			yyVAL.statement = &Begin{}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2532
		{
			yyVAL.statement = &Begin{}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2538
		{
			yyVAL.statement = &Commit{}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2544
		{
			yyVAL.statement = &Rollback{}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2550
		{
			yyVAL.statement = &OtherRead{}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2554
		{
			yyVAL.statement = &OtherRead{}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2558
		{
			yyVAL.statement = &OtherRead{}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2562
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2566
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2571
		{
			setAllowComments(yylex, true)
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2575
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2581
		{
			yyVAL.bytes2 = nil
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2585
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2591
		{
			yyVAL.str = UnionStr
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2595
		{
			yyVAL.str = UnionAllStr
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2599
		{
			yyVAL.str = UnionDistinctStr
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2604
		{
			yyVAL.str = ""
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2608
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2612
		{
			yyVAL.str = SQLCacheStr
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2617
		{
			yyVAL.str = ""
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2621
		{
			yyVAL.str = DistinctStr
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2626
		{
			yyVAL.str = ""
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2630
		{
			yyVAL.str = StraightJoinHint
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2635
		{
			yyVAL.selectExprs = nil
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2639
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2645
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2649
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2655
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2659
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2663
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 487:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2667
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2672
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2676
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2680
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2687
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2692
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2696
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2702
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2706
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2716
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2720
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2724
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2729
		{
			yyVAL.strs = []string{}
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2733
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2739
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2743
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2749
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2753
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2757
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2761
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2765
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2769
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2775
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 513:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2779
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2785
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2790
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2794
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2800
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2804
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2817
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2821
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2825
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2829
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2835
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2837
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2841
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2843
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2847
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2849
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2852
		{
			yyVAL.empty = struct{}{}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2854
		{
			yyVAL.empty = struct{}{}
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2857
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2861
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2865
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2872
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2878
		{
			yyVAL.str = JoinStr
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2882
		{
			yyVAL.str = JoinStr
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2886
		{
			yyVAL.str = JoinStr
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2892
		{
			yyVAL.str = StraightJoinStr
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2898
		{
			yyVAL.str = LeftJoinStr
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2902
		{
			yyVAL.str = LeftJoinStr
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2906
		{
			yyVAL.str = RightJoinStr
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2910
		{
			yyVAL.str = RightJoinStr
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2916
		{
			yyVAL.str = NaturalJoinStr
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2920
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2930
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2934
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2940
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2944
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2949
		{
			yyVAL.indexHints = nil
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2953
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2957
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 553:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2961
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2966
		{
			yyVAL.expr = nil
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2970
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2975
		{
			yyVAL.columns = nil
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2979
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2985
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2989
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2993
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2997
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3001
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3005
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3009
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3015
		{
			yyVAL.str = ""
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3019
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3025
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3029
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3035
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3039
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3043
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3047
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3051
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3055
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3059
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 576:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3063
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 577:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3067
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3071
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3077
		{
			yyVAL.str = IsNullStr
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3081
		{
			yyVAL.str = IsNotNullStr
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3085
		{
			yyVAL.str = IsTrueStr
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3089
		{
			yyVAL.str = IsNotTrueStr
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3093
		{
			yyVAL.str = IsFalseStr
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3097
		{
			yyVAL.str = IsNotFalseStr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3103
		{
			yyVAL.str = EqualStr
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3107
		{
			yyVAL.str = LessThanStr
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3111
		{
			yyVAL.str = GreaterThanStr
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3115
		{
			yyVAL.str = LessEqualStr
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3119
		{
			yyVAL.str = GreaterEqualStr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3123
		{
			yyVAL.str = NotEqualStr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3127
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3132
		{
			yyVAL.expr = nil
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3136
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3142
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3146
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3150
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3156
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3162
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3166
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3172
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3176
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3180
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3184
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3188
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3192
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3196
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3200
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3204
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3208
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3212
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3216
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3220
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3224
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3228
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3232
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3236
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3240
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3244
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3248
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3252
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3256
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3260
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3264
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3272
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3286
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3290
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3294
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3302
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3316
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 634:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3320
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 635:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3324
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3334
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3338
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 638:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3342
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 639:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3346
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 640:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3350
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 641:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3354
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 642:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3358
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 643:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3362
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 644:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3366
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 645:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3370
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 646:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3374
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 647:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3378
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 648:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3382
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3386
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3390
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3400
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3404
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3408
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3412
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3417
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3422
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3427
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3432
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3436
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3450
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3454
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3458
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 665:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3462
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3468
		{
			yyVAL.str = ""
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3472
		{
			yyVAL.str = BooleanModeStr
		}
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3476
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 669:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3480
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3484
		{
			yyVAL.str = QueryExpansionStr
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3490
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3494
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3500
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3504
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3508
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3512
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3516
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3520
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3526
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3530
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3534
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3538
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3542
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3546
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3550
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3554
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3560
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3564
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3568
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3572
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3576
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3580
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3584
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3589
		{
			yyVAL.expr = nil
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3593
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3598
		{
			yyVAL.str = string("")
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3602
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3608
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3612
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 700:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3618
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3623
		{
			yyVAL.expr = nil
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3627
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3633
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3637
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 705:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3641
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3647
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3653
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3657
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3661
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3665
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3669
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3673
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3677
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3681
		{
			yyVAL.expr = &NullVal{}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3687
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3696
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3700
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3705
		{
			yyVAL.exprs = nil
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3709
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3714
		{
			yyVAL.expr = nil
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3718
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3723
		{
			yyVAL.orderBy = nil
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3727
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3733
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3737
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3743
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3748
		{
			yyVAL.str = AscScr
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3752
		{
			yyVAL.str = AscScr
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3756
		{
			yyVAL.str = DescScr
		}
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3761
		{
			yyVAL.limit = nil
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3765
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 732:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3769
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 733:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3773
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3778
		{
			yyVAL.str = ""
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3782
		{
			yyVAL.str = ForUpdateStr
		}
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3786
		{
			yyVAL.str = ShareModeStr
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3799
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3803
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3807
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 740:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3812
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3816
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 742:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3820
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3827
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3831
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3835
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 746:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3839
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3844
		{
			yyVAL.updateExprs = nil
		}
	case 748:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3848
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3854
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3858
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3864
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3868
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3874
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3880
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3890
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3894
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3900
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3906
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3910
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3916
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3920
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3924
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 763:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3929
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3933
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3940
		{
			yyVAL.bytes = []byte("charset")
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3947
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3951
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3955
		{
			yyVAL.expr = &Default{}
		}
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3964
		{
			yyVAL.byt = 0
		}
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3966
		{
			yyVAL.byt = 1
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3969
		{
			yyVAL.empty = struct{}{}
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3971
		{
			yyVAL.empty = struct{}{}
		}
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3974
		{
			yyVAL.str = ""
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3976
		{
			yyVAL.str = IgnoreStr
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3980
		{
			yyVAL.empty = struct{}{}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3982
		{
			yyVAL.empty = struct{}{}
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3984
		{
			yyVAL.empty = struct{}{}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3986
		{
			yyVAL.empty = struct{}{}
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3988
		{
			yyVAL.empty = struct{}{}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3990
		{
			yyVAL.empty = struct{}{}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3992
		{
			yyVAL.empty = struct{}{}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3994
		{
			yyVAL.empty = struct{}{}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3996
		{
			yyVAL.empty = struct{}{}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3998
		{
			yyVAL.empty = struct{}{}
		}
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4001
		{
			yyVAL.empty = struct{}{}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4003
		{
			yyVAL.empty = struct{}{}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4005
		{
			yyVAL.empty = struct{}{}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4009
		{
			yyVAL.empty = struct{}{}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4011
		{
			yyVAL.empty = struct{}{}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4015
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4019
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4026
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4032
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4036
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4043
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4325
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4334
		{
			decNesting(yylex)
		}
	case 1060:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4339
		{
			forceEOF(yylex)
		}
	case 1061:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4344
		{
			forceEOF(yylex)
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4348
		{
			forceEOF(yylex)
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4352
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
