// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const POLICY = 57457
const UNIQUE = 57458
const KEY = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const STATUS = 57477
const VARIABLES = 57478
const RESTRICT = 57479
const CASCADE = 57480
const NO = 57481
const ACTION = 57482
const PERMISSIVE = 57483
const RESTRICTIVE = 57484
const PUBLIC = 57485
const CURRENT_USER = 57486
const SESSION_USER = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const SMALLSERIAL = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const SERIAL = 57500
const BIGINT = 57501
const BIGSERIAL = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const PRECISION = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const VARYING = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const UUID = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const JSONB = 57531
const ENUM = 57532
const GEOMETRY = 57533
const POINT = 57534
const LINESTRING = 57535
const POLYGON = 57536
const GEOMETRYCOLLECTION = 57537
const MULTIPOINT = 57538
const MULTILINESTRING = 57539
const MULTIPOLYGON = 57540
const ARRAY = 57541
const NOW = 57542
const NULLX = 57543
const AUTO_INCREMENT = 57544
const APPROXNUM = 57545
const SIGNED = 57546
const UNSIGNED = 57547
const ZEROFILL = 57548
const ZONE = 57549
const DATABASES = 57550
const TABLES = 57551
const VITESS_KEYSPACES = 57552
const VITESS_SHARDS = 57553
const VITESS_TABLETS = 57554
const VSCHEMA_TABLES = 57555
const EXTENDED = 57556
const FULL = 57557
const PROCESSLIST = 57558
const NAMES = 57559
const CHARSET = 57560
const GLOBAL = 57561
const SESSION = 57562
const ISOLATION = 57563
const LEVEL = 57564
const READ = 57565
const WRITE = 57566
const ONLY = 57567
const REPEATABLE = 57568
const COMMITTED = 57569
const UNCOMMITTED = 57570
const SERIALIZABLE = 57571
const CURRENT_TIMESTAMP = 57572
const DATABASE = 57573
const CURRENT_DATE = 57574
const CURRENT_TIME = 57575
const LOCALTIME = 57576
const LOCALTIMESTAMP = 57577
const UTC_DATE = 57578
const UTC_TIME = 57579
const UTC_TIMESTAMP = 57580
const REPLACE = 57581
const CONVERT = 57582
const CAST = 57583
const SUBSTR = 57584
const SUBSTRING = 57585
const GROUP_CONCAT = 57586
const SEPARATOR = 57587
const MATCH = 57588
const AGAINST = 57589
const BOOLEAN = 57590
const LANGUAGE = 57591
const WITH = 57592
const WITHOUT = 57593
const PARSER = 57594
const QUERY = 57595
const EXPANSION = 57596
const UNUSED = 57597
const TYPECAST = 57598
const CHECK = 57599

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	152, 328,
	153, 328,
	-2, 318,
	-1, 253,
	108, 657,
	-2, 653,
	-1, 254,
	108, 658,
	-2, 654,
	-1, 324,
	79, 830,
	-2, 58,
	-1, 325,
	79, 786,
	-2, 59,
	-1, 330,
	79, 769,
	-2, 624,
	-1, 332,
	79, 807,
	-2, 626,
	-1, 599,
	51, 41,
	53, 41,
	-2, 43,
	-1, 752,
	108, 660,
	-2, 656,
	-1, 976,
	5, 28,
	-2, 461,
	-1, 1001,
	5, 27,
	-2, 599,
	-1, 1276,
	5, 28,
	-2, 600,
	-1, 1340,
	5, 27,
	-2, 602,
	-1, 1419,
	5, 28,
	-2, 603,
}

const yyPrivate = 57344

const yyLast = 12188

var yyAct = [...]int{

	254, 1409, 915, 251, 680, 814, 1370, 1282, 258, 545,
	1293, 1351, 1168, 1004, 1043, 1196, 832, 855, 854, 1169,
	1085, 1165, 593, 232, 283, 909, 1020, 861, 329, 1141,
	815, 777, 850, 968, 787, 88, 1074, 53, 88, 591,
	66, 257, 784, 904, 868, 609, 226, 1071, 1009, 754,
	803, 477, 483, 608, 431, 811, 595, 323, 260, 489,
	498, 580, 88, 88, 334, 256, 310, 241, 88, 320,
	334, 318, 894, 334, 949, 1058, 52, 88, 559, 88,
	494, 1443, 1205, 1463, 883, 88, 1440, 886, 496, 1459,
	227, 228, 229, 230, 245, 1417, 496, 544, 3, 786,
	933, 309, 316, 1396, 1455, 721, 722, 916, 717, 1075,
	1076, 1429, 1439, 932, 1416, 1160, 247, 311, 1270, 435,
	314, 1384, 511, 510, 520, 521, 513, 514, 515, 516,
	517, 518, 519, 512, 1208, 1190, 522, 85, 845, 980,
	937, 979, 981, 716, 882, 231, 476, 1191, 1192, 931,
	495, 494, 610, 1352, 611, 495, 494, 495, 494, 495,
	494, 495, 494, 846, 847, 319, 1354, 496, 495, 494,
	434, 472, 496, 282, 496, 1164, 496, 1028, 496, 443,
	1027, 444, 1308, 1029, 1307, 496, 1060, 451, 885, 495,
	494, 68, 83, 79, 80, 81, 711, 928, 925, 926,
	1329, 924, 895, 712, 1300, 88, 496, 887, 1362, 334,
	334, 334, 334, 961, 334, 1220, 1219, 1259, 905, 457,
	1257, 334, 568, 225, 1231, 1232, 1359, 1458, 1453, 935,
	938, 468, 469, 1353, 1411, 1410, 1041, 328, 1119, 71,
	73, 812, 67, 436, 1116, 1337, 440, 1234, 334, 1046,
	1047, 1048, 741, 1299, 72, 74, 1203, 1052, 1050, 280,
	281, 870, 1235, 57, 1056, 536, 537, 538, 539, 540,
	541, 542, 69, 485, 1055, 497, 871, 1296, 930, 1450,
	1036, 1039, 459, 497, 461, 743, 1243, 1375, 59, 60,
	61, 62, 63, 446, 833, 835, 438, 77, 1316, 1385,
	870, 690, 679, 76, 929, 77, 1019, 453, 1018, 88,
	1017, 442, 458, 460, 532, 871, 88, 88, 88, 433,
	204, 745, 334, 82, 78, 1120, 534, 535, 334, 1389,
	1394, 1279, 1415, 1128, 744, 486, 984, 962, 895, 746,
	742, 1117, 934, 1115, 747, 870, 890, 906, 718, 502,
	480, 484, 452, 432, 497, 1214, 1118, 936, 522, 497,
	871, 497, 944, 497, 715, 497, 1124, 503, 834, 1355,
	70, 1228, 497, 1007, 314, 561, 562, 563, 564, 565,
	566, 567, 328, 328, 328, 328, 612, 328, 1162, 600,
	804, 606, 761, 497, 328, 852, 851, 512, 683, 1358,
	522, 546, 1294, 1295, 1297, 1215, 759, 760, 758, 1053,
	557, 575, 456, 804, 445, 991, 437, 870, 1045, 50,
	599, 500, 864, 491, 869, 75, 865, 866, 1395, 757,
	874, 867, 871, 1421, 334, 334, 958, 959, 960, 1051,
	945, 1123, 88, 88, 334, 1310, 88, 1309, 778, 88,
	779, 1336, 875, 88, 1080, 334, 334, 334, 334, 334,
	334, 334, 334, 1078, 1061, 1305, 880, 1245, 872, 334,
	334, 1072, 1057, 873, 88, 515, 516, 517, 518, 519,
	512, 699, 1392, 522, 1404, 1467, 308, 1202, 439, 334,
	441, 1344, 1454, 88, 21, 328, 448, 449, 450, 1201,
	334, 614, 487, 1404, 1441, 736, 738, 739, 753, 723,
	737, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 877, 697, 1435, 476,
	755, 752, 1344, 1432, 476, 879, 878, 273, 272, 275,
	276, 277, 278, 334, 686, 687, 274, 279, 691, 1200,
	236, 694, 1344, 1427, 1366, 725, 1344, 1426, 1365, 464,
	748, 796, 799, 1042, 756, 1344, 1407, 805, 1344, 1367,
	1344, 476, 1344, 1345, 1209, 88, 713, 750, 88, 88,
	88, 88, 88, 1291, 1290, 816, 1187, 476, 1278, 476,
	88, 1223, 1222, 88, 1030, 732, 918, 88, 1217, 1218,
	781, 782, 88, 88, 1217, 1216, 334, 677, 328, 974,
	476, 733, 734, 808, 780, 801, 696, 328, 695, 334,
	684, 876, 682, 326, 577, 476, 789, 476, 328, 328,
	328, 328, 328, 328, 328, 328, 314, 314, 314, 314,
	314, 840, 328, 328, 817, 791, 454, 820, 792, 793,
	829, 314, 23, 837, 800, 838, 619, 618, 23, 447,
	314, 843, 727, 842, 546, 432, 603, 794, 795, 807,
	1005, 809, 810, 500, 859, 999, 328, 813, 1000, 1405,
	88, 1404, 1106, 334, 1339, 334, 88, 1006, 789, 88,
	791, 88, 54, 1131, 88, 334, 818, 819, 50, 821,
	1166, 1006, 911, 1005, 50, 841, 604, 839, 602, 602,
	896, 897, 898, 576, 1274, 577, 783, 907, 908, 888,
	889, 891, 892, 893, 986, 1142, 797, 797, 577, 849,
	974, 983, 797, 1227, 23, 974, 1221, 577, 901, 902,
	903, 1031, 1005, 1225, 1224, 50, 1107, 752, 844, 1096,
	797, 1109, 1102, 1103, 974, 1110, 1105, 1104, 1144, 605,
	1112, 1108, 719, 965, 966, 967, 985, 238, 1460, 1437,
	1399, 1111, 950, 982, 1372, 951, 1369, 1101, 1368, 328,
	50, 1323, 914, 755, 887, 910, 1181, 905, 922, 1034,
	900, 939, 328, 940, 1010, 1011, 941, 912, 913, 731,
	899, 65, 681, 1146, 1360, 1151, 1357, 1145, 964, 1143,
	1226, 1449, 1166, 50, 1035, 1149, 1013, 756, 1097, 1093,
	693, 685, 1098, 1095, 1094, 1147, 1148, 74, 473, 828,
	957, 586, 587, 947, 948, 1016, 484, 334, 1099, 1015,
	88, 1150, 1152, 826, 1092, 824, 823, 822, 827, 1438,
	825, 1127, 1022, 990, 1024, 334, 328, 946, 328, 582,
	585, 586, 587, 583, 490, 584, 588, 1067, 328, 1014,
	334, 1447, 1032, 242, 243, 478, 956, 488, 955, 1023,
	617, 326, 455, 920, 1272, 973, 479, 1324, 692, 1088,
	1025, 1318, 328, 1319, 1320, 1321, 590, 475, 314, 239,
	240, 988, 490, 1230, 233, 1317, 975, 1378, 234, 1001,
	1037, 1038, 1040, 88, 334, 334, 1049, 334, 954, 54,
	1377, 992, 1327, 1006, 1199, 1198, 953, 1066, 492, 1068,
	1069, 1070, 1398, 1397, 1386, 1054, 714, 56, 58, 1077,
	1091, 1233, 334, 601, 51, 88, 88, 1, 1073, 1428,
	1079, 1403, 1204, 88, 1229, 1087, 1100, 917, 1084, 927,
	1408, 1062, 1063, 334, 1065, 1090, 1350, 1195, 862, 853,
	1089, 430, 64, 1137, 1138, 1393, 863, 860, 1064, 620,
	881, 1059, 884, 626, 624, 625, 1155, 1156, 622, 1158,
	1159, 513, 514, 515, 516, 517, 518, 519, 512, 1135,
	628, 522, 627, 334, 334, 1167, 1134, 623, 816, 1140,
	1021, 1154, 1153, 752, 816, 1081, 621, 740, 212, 321,
	589, 613, 493, 1114, 1113, 1170, 1161, 923, 328, 1122,
	1175, 710, 334, 943, 334, 334, 1177, 1189, 471, 214,
	530, 952, 1176, 1044, 1026, 327, 1173, 720, 482, 1376,
	1193, 1194, 1326, 989, 556, 1129, 802, 259, 735, 271,
	1188, 268, 751, 511, 510, 520, 521, 513, 514, 515,
	516, 517, 518, 519, 512, 270, 269, 522, 726, 998,
	504, 249, 313, 573, 581, 579, 578, 1082, 328, 1012,
	328, 1008, 312, 334, 1130, 1210, 1211, 1269, 1213, 1383,
	1172, 730, 334, 25, 55, 244, 19, 18, 1163, 17,
	20, 16, 969, 15, 88, 328, 14, 29, 13, 12,
	334, 11, 10, 1178, 1179, 9, 8, 1180, 7, 334,
	1182, 6, 88, 5, 4, 235, 328, 1212, 1236, 1206,
	1250, 22, 2, 0, 1247, 0, 0, 1238, 1244, 582,
	585, 586, 587, 583, 0, 584, 588, 0, 328, 1010,
	1011, 1241, 0, 0, 0, 326, 0, 0, 0, 0,
	0, 1248, 1255, 797, 0, 0, 1174, 1021, 856, 797,
	0, 0, 334, 0, 334, 334, 334, 88, 334, 1273,
	314, 1284, 1285, 1286, 334, 0, 0, 0, 0, 0,
	1281, 0, 0, 0, 0, 328, 0, 328, 1197, 1287,
	1298, 1032, 1289, 1266, 476, 0, 1240, 0, 0, 0,
	0, 0, 0, 0, 0, 334, 334, 88, 334, 334,
	1252, 1253, 1311, 1254, 334, 0, 0, 1256, 0, 1258,
	0, 1246, 0, 0, 334, 1303, 1315, 0, 1314, 0,
	511, 510, 520, 521, 513, 514, 515, 516, 517, 518,
	519, 512, 0, 0, 522, 0, 1237, 1330, 1331, 0,
	1332, 1333, 1334, 0, 0, 1239, 0, 0, 751, 334,
	334, 1271, 0, 0, 0, 1292, 0, 0, 546, 1304,
	0, 1306, 334, 1242, 1338, 0, 1302, 0, 0, 1170,
	334, 0, 328, 462, 1349, 0, 0, 1356, 0, 0,
	0, 0, 0, 0, 1361, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 334, 0, 1328, 0, 0, 1313,
	0, 1373, 0, 0, 0, 0, 0, 1363, 0, 1364,
	0, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 1387, 0, 0, 1283, 0, 1283, 1283, 1283,
	0, 1288, 1391, 0, 1170, 284, 47, 328, 0, 334,
	334, 0, 0, 334, 0, 1340, 1401, 1402, 0, 0,
	1406, 1400, 0, 0, 724, 0, 0, 0, 1413, 0,
	334, 0, 1418, 0, 0, 816, 0, 334, 1283, 1312,
	334, 328, 328, 0, 0, 334, 1425, 1322, 1423, 1424,
	0, 334, 1433, 47, 856, 0, 0, 1325, 0, 0,
	0, 237, 0, 0, 481, 0, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 1446, 334, 1388,
	1442, 0, 788, 790, 0, 1448, 0, 0, 0, 0,
	0, 88, 1342, 1343, 0, 0, 0, 0, 806, 86,
	0, 334, 224, 0, 0, 1197, 1465, 1464, 0, 0,
	0, 0, 0, 1044, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 86, 86, 0, 831,
	1371, 476, 86, 0, 1412, 546, 0, 1283, 0, 0,
	0, 86, 0, 86, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 465, 466, 467, 0, 470, 1390, 0,
	0, 210, 1133, 0, 474, 0, 0, 511, 510, 520,
	521, 513, 514, 515, 516, 517, 518, 519, 512, 0,
	0, 522, 1283, 1283, 1157, 220, 1283, 0, 1444, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	797, 0, 0, 1420, 0, 0, 0, 0, 1457, 0,
	1422, 0, 0, 1371, 463, 463, 463, 463, 1430, 463,
	0, 0, 0, 0, 1436, 0, 463, 0, 0, 0,
	0, 856, 0, 856, 0, 205, 0, 0, 0, 0,
	0, 207, 0, 47, 0, 0, 0, 0, 213, 209,
	0, 1283, 0, 0, 0, 0, 0, 0, 531, 0,
	0, 533, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 1371, 0, 0, 0, 211, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 543, 0,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 0,
	558, 560, 560, 560, 560, 560, 560, 560, 560, 0,
	569, 570, 571, 572, 0, 0, 0, 0, 971, 0,
	0, 592, 972, 206, 0, 0, 0, 0, 1133, 976,
	977, 978, 0, 0, 0, 0, 0, 0, 987, 0,
	0, 0, 0, 993, 1267, 994, 995, 996, 997, 0,
	0, 0, 0, 0, 0, 208, 0, 216, 217, 218,
	219, 223, 0, 0, 0, 0, 222, 221, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 678, 0,
	86, 597, 86, 0, 0, 0, 0, 689, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 700, 701,
	702, 703, 704, 705, 706, 707, 0, 0, 0, 0,
	0, 0, 708, 709, 0, 511, 510, 520, 521, 513,
	514, 515, 516, 517, 518, 519, 512, 1086, 856, 522,
	0, 0, 0, 0, 0, 23, 24, 48, 26, 27,
	463, 0, 0, 0, 0, 1263, 476, 1264, 0, 463,
	0, 0, 0, 0, 42, 0, 0, 0, 28, 0,
	463, 463, 463, 463, 463, 463, 463, 463, 0, 0,
	0, 0, 0, 0, 463, 463, 0, 37, 0, 0,
	0, 50, 511, 510, 520, 521, 513, 514, 515, 516,
	517, 518, 519, 512, 0, 0, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 86, 0, 0,
	86, 1139, 0, 86, 0, 0, 0, 698, 511, 510,
	520, 521, 513, 514, 515, 516, 517, 518, 519, 512,
	0, 0, 522, 0, 0, 0, 0, 0, 86, 47,
	30, 31, 33, 32, 35, 0, 0, 0, 0, 0,
	0, 0, 0, 547, 0, 0, 0, 86, 1186, 0,
	0, 0, 0, 0, 36, 43, 44, 698, 0, 45,
	46, 34, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 315, 315, 315, 315, 0, 0,
	0, 0, 38, 39, 0, 40, 41, 0, 592, 0,
	836, 0, 0, 0, 0, 0, 0, 315, 248, 0,
	0, 0, 0, 248, 248, 0, 0, 798, 798, 248,
	0, 0, 0, 798, 0, 0, 919, 0, 921, 0,
	0, 0, 0, 0, 248, 248, 248, 248, 942, 86,
	0, 798, 86, 86, 86, 86, 86, 0, 0, 0,
	0, 0, 0, 0, 830, 0, 0, 86, 0, 0,
	0, 597, 0, 0, 0, 0, 86, 86, 0, 0,
	0, 0, 1249, 0, 0, 0, 0, 0, 0, 1251,
	0, 0, 0, 0, 0, 49, 0, 0, 463, 0,
	463, 1260, 1261, 1262, 0, 0, 1265, 0, 0, 0,
	463, 0, 0, 0, 0, 0, 506, 0, 509, 1275,
	1276, 1277, 0, 1280, 523, 524, 525, 526, 527, 528,
	529, 0, 507, 508, 505, 511, 510, 520, 521, 513,
	514, 515, 516, 517, 518, 519, 512, 0, 0, 522,
	1136, 0, 0, 0, 86, 1301, 0, 0, 0, 0,
	86, 0, 0, 86, 0, 86, 0, 963, 86, 0,
	511, 510, 520, 521, 513, 514, 515, 516, 517, 518,
	519, 512, 0, 0, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 698, 510, 520, 521, 513, 514, 515,
	516, 517, 518, 519, 512, 248, 0, 522, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 1335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1002, 1003, 0,
	0, 0, 1346, 1347, 1348, 511, 510, 520, 521, 513,
	514, 515, 516, 517, 518, 519, 512, 0, 0, 522,
	0, 0, 0, 0, 0, 315, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 1379, 1380,
	1381, 1382, 511, 510, 520, 521, 513, 514, 515, 516,
	517, 518, 519, 512, 0, 1121, 522, 520, 521, 513,
	514, 515, 516, 517, 518, 519, 512, 0, 0, 522,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	463, 1414, 0, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1461, 0, 0, 0, 0,
	0, 0, 0, 1468, 1469, 0, 1171, 0, 47, 1125,
	1126, 634, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 1183, 1184, 1185, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 649, 0, 0, 0, 0, 698,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1207,
	0, 0, 0, 0, 798, 0, 0, 0, 0, 0,
	798, 0, 0, 0, 662, 663, 664, 665, 666, 667,
	668, 669, 670, 671, 0, 672, 673, 0, 674, 675,
	676, 650, 651, 652, 653, 631, 633, 0, 629, 632,
	635, 0, 646, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 647, 654, 655, 656, 657, 658, 659,
	660, 661, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1268, 0, 0, 0,
	0, 630, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 597, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1171, 0, 0, 1341, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1374, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1171, 0, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	419, 409, 0, 379, 421, 356, 371, 429, 372, 373,
	401, 342, 387, 145, 368, 91, 359, 337, 365, 338,
	357, 381, 112, 355, 411, 390, 124, 427, 127, 395,
	0, 166, 136, 0, 0, 383, 413, 385, 407, 378,
	402, 347, 394, 422, 369, 398, 423, 0, 0, 0,
	333, 1431, 857, 858, 0, 0, 0, 0, 0, 104,
	0, 397, 418, 367, 400, 336, 396, 0, 340, 343,
	428, 416, 362, 363, 1033, 0, 0, 0, 0, 0,
	0, 382, 386, 404, 376, 0, 0, 0, 0, 1451,
	0, 798, 0, 360, 0, 393, 0, 0, 0, 344,
	341, 0, 380, 0, 1462, 0, 346, 0, 361, 405,
	0, 335, 408, 414, 377, 191, 417, 375, 374, 152,
	0, 107, 0, 170, 116, 370, 125, 403, 420, 384,
	412, 358, 366, 108, 364, 159, 146, 182, 392, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 86, 0, 0, 92, 171,
	180, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 101, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 339, 0, 167, 184, 202, 203,
	354, 415, 194, 195, 196, 197, 0, 0, 0, 140,
	102, 119, 163, 122, 129, 155, 200, 399, 160, 106,
	183, 165, 350, 353, 348, 349, 388, 389, 424, 425,
	426, 406, 345, 0, 351, 352, 0, 410, 391, 90,
	98, 126, 198, 199, 0, 154, 114, 185, 0, 103,
	419, 409, 0, 379, 421, 356, 371, 429, 372, 373,
	401, 342, 387, 145, 368, 91, 359, 337, 365, 338,
	357, 381, 112, 355, 411, 390, 124, 427, 127, 395,
	0, 166, 136, 0, 0, 383, 413, 385, 407, 378,
	402, 347, 394, 422, 369, 398, 423, 0, 0, 0,
	333, 0, 857, 858, 0, 0, 0, 0, 0, 104,
	0, 397, 418, 367, 400, 336, 396, 0, 340, 343,
	428, 416, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 382, 386, 404, 376, 0, 0, 0, 0, 0,
	0, 0, 0, 360, 0, 393, 0, 0, 0, 344,
	341, 0, 380, 0, 0, 0, 346, 0, 361, 405,
	0, 335, 408, 414, 377, 191, 417, 375, 374, 152,
	0, 107, 0, 170, 116, 370, 125, 403, 420, 384,
	412, 358, 366, 108, 364, 159, 146, 182, 392, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 0, 0, 0, 92, 171,
	180, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 101, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 339, 0, 167, 184, 202, 203,
	354, 415, 194, 195, 196, 197, 0, 0, 0, 140,
	102, 119, 163, 122, 129, 155, 200, 399, 160, 106,
	183, 165, 350, 353, 348, 349, 388, 389, 424, 425,
	426, 406, 345, 0, 351, 352, 0, 410, 391, 90,
	98, 126, 198, 199, 0, 154, 114, 185, 0, 103,
	419, 409, 0, 379, 421, 356, 371, 429, 372, 373,
	401, 342, 387, 145, 368, 91, 359, 337, 365, 338,
	357, 381, 112, 355, 411, 390, 124, 427, 127, 395,
	0, 166, 136, 0, 0, 383, 413, 385, 407, 378,
	402, 347, 394, 422, 369, 398, 423, 0, 0, 0,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 397, 418, 367, 400, 336, 396, 0, 340, 343,
	428, 416, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 382, 386, 404, 376, 0, 0, 0, 0, 0,
	0, 1132, 0, 360, 0, 393, 0, 0, 0, 344,
	341, 0, 380, 0, 0, 0, 346, 0, 361, 405,
	0, 335, 408, 414, 377, 191, 417, 375, 374, 152,
	0, 107, 0, 170, 116, 370, 125, 403, 420, 384,
	412, 358, 366, 108, 364, 159, 146, 182, 392, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 0, 0, 0, 92, 171,
	180, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 101, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 339, 0, 167, 184, 202, 203,
	354, 415, 194, 195, 196, 197, 0, 0, 0, 140,
	102, 119, 163, 122, 129, 155, 200, 399, 160, 106,
	183, 165, 350, 353, 348, 349, 388, 389, 424, 425,
	426, 406, 345, 0, 351, 352, 0, 410, 391, 90,
	98, 126, 198, 199, 0, 154, 114, 185, 0, 103,
	419, 409, 0, 379, 421, 356, 371, 429, 372, 373,
	401, 342, 387, 145, 368, 91, 359, 337, 365, 338,
	357, 381, 112, 355, 411, 390, 124, 427, 127, 395,
	0, 166, 136, 0, 0, 383, 413, 385, 407, 378,
	402, 347, 394, 422, 369, 398, 423, 50, 0, 0,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 397, 418, 367, 400, 336, 396, 0, 340, 343,
	428, 416, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 382, 386, 404, 376, 0, 0, 0, 0, 0,
	0, 0, 0, 360, 0, 393, 0, 0, 0, 344,
	341, 0, 380, 0, 0, 0, 346, 0, 361, 405,
	0, 335, 408, 414, 377, 191, 417, 375, 374, 152,
	0, 107, 0, 170, 116, 370, 125, 403, 420, 384,
	412, 358, 366, 108, 364, 159, 146, 182, 392, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 0, 0, 0, 92, 171,
	180, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 101, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 339, 0, 167, 184, 202, 203,
	354, 415, 194, 195, 196, 197, 0, 0, 0, 140,
	102, 119, 163, 122, 129, 155, 200, 399, 160, 106,
	183, 165, 350, 353, 348, 349, 388, 389, 424, 425,
	426, 406, 345, 0, 351, 352, 0, 410, 391, 90,
	98, 126, 198, 199, 0, 154, 114, 185, 0, 103,
	419, 409, 0, 379, 421, 356, 371, 429, 372, 373,
	401, 342, 387, 145, 368, 91, 359, 337, 365, 338,
	357, 381, 112, 355, 411, 390, 124, 427, 127, 395,
	0, 166, 136, 0, 0, 383, 413, 385, 407, 378,
	402, 347, 394, 422, 369, 398, 423, 0, 0, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 397, 418, 367, 400, 336, 396, 0, 340, 343,
	428, 416, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 382, 386, 404, 376, 0, 0, 0, 0, 0,
	0, 749, 0, 360, 0, 393, 0, 0, 0, 344,
	341, 0, 380, 0, 0, 0, 346, 0, 361, 405,
	0, 335, 408, 414, 377, 191, 417, 375, 374, 152,
	0, 107, 0, 170, 116, 370, 125, 403, 420, 384,
	412, 358, 366, 108, 364, 159, 146, 182, 392, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 0, 0, 0, 92, 171,
	180, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 101, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 339, 0, 167, 184, 202, 203,
	354, 415, 194, 195, 196, 197, 0, 0, 0, 140,
	102, 119, 163, 122, 129, 155, 200, 399, 160, 106,
	183, 165, 350, 353, 348, 349, 388, 389, 424, 425,
	426, 406, 345, 0, 351, 352, 0, 410, 391, 90,
	98, 126, 198, 199, 0, 154, 114, 185, 0, 103,
	419, 409, 0, 379, 421, 356, 371, 429, 372, 373,
	401, 342, 387, 145, 368, 91, 359, 337, 365, 338,
	357, 381, 112, 355, 411, 390, 124, 427, 127, 395,
	0, 166, 136, 0, 0, 383, 413, 385, 407, 378,
	402, 347, 394, 422, 369, 398, 423, 0, 0, 0,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 397, 418, 367, 400, 336, 396, 0, 340, 343,
	428, 416, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 382, 386, 404, 376, 0, 0, 0, 0, 0,
	0, 0, 0, 360, 0, 393, 0, 0, 0, 344,
	341, 0, 380, 0, 0, 0, 346, 0, 361, 405,
	0, 335, 408, 414, 377, 191, 417, 375, 374, 152,
	0, 107, 0, 170, 116, 370, 125, 403, 420, 384,
	412, 358, 366, 108, 364, 159, 146, 182, 392, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 0, 0, 0, 92, 171,
	180, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 101, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 339, 0, 167, 184, 202, 203,
	354, 415, 194, 195, 196, 197, 0, 0, 0, 140,
	102, 119, 163, 122, 129, 155, 200, 399, 160, 106,
	183, 165, 350, 353, 348, 349, 388, 389, 424, 425,
	426, 406, 345, 0, 351, 352, 0, 410, 391, 90,
	98, 126, 198, 199, 0, 154, 114, 185, 0, 103,
	419, 409, 0, 379, 421, 356, 371, 429, 372, 373,
	401, 342, 387, 145, 368, 91, 359, 337, 365, 338,
	357, 381, 112, 355, 411, 390, 124, 427, 127, 395,
	0, 166, 136, 0, 0, 383, 413, 385, 407, 378,
	402, 347, 394, 422, 369, 398, 423, 0, 0, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 397, 418, 367, 400, 336, 396, 0, 340, 343,
	428, 416, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 382, 386, 404, 376, 0, 0, 0, 0, 0,
	0, 0, 0, 360, 0, 393, 0, 0, 0, 344,
	341, 0, 380, 0, 0, 0, 346, 0, 361, 405,
	0, 335, 408, 414, 377, 191, 417, 375, 374, 152,
	0, 107, 0, 170, 116, 370, 125, 403, 420, 384,
	412, 358, 366, 108, 364, 159, 146, 182, 392, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 0, 0, 0, 92, 171,
	180, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 101, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 339, 0, 167, 184, 202, 203,
	354, 415, 194, 195, 196, 197, 0, 0, 0, 140,
	102, 119, 163, 122, 129, 155, 200, 399, 160, 106,
	183, 165, 350, 353, 348, 349, 388, 389, 424, 425,
	426, 406, 345, 0, 351, 352, 0, 410, 391, 90,
	98, 126, 198, 199, 0, 154, 114, 185, 0, 103,
	419, 409, 0, 379, 421, 356, 371, 429, 372, 373,
	401, 342, 387, 145, 368, 91, 359, 337, 365, 338,
	357, 381, 112, 355, 411, 390, 124, 427, 127, 395,
	0, 166, 136, 0, 0, 383, 413, 385, 407, 378,
	402, 347, 394, 422, 369, 398, 423, 0, 0, 0,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 397, 418, 367, 400, 336, 396, 0, 340, 343,
	428, 416, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 382, 386, 404, 376, 0, 0, 0, 0, 0,
	0, 0, 0, 360, 0, 393, 0, 0, 0, 344,
	341, 0, 380, 0, 0, 0, 346, 0, 361, 405,
	0, 335, 408, 414, 377, 191, 417, 375, 374, 152,
	0, 107, 0, 170, 116, 370, 125, 403, 420, 384,
	412, 358, 366, 108, 364, 159, 146, 182, 392, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 0, 0, 0, 92, 171,
	180, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 331, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 339, 0, 167, 184, 202, 203,
	354, 415, 194, 195, 196, 197, 0, 0, 0, 332,
	330, 119, 163, 122, 129, 155, 200, 399, 160, 106,
	183, 165, 350, 353, 348, 349, 388, 389, 424, 425,
	426, 406, 345, 0, 351, 352, 0, 410, 391, 90,
	98, 126, 198, 199, 0, 154, 114, 185, 0, 103,
	419, 409, 0, 379, 421, 356, 371, 429, 372, 373,
	401, 342, 387, 145, 368, 91, 359, 337, 365, 338,
	357, 381, 112, 355, 411, 390, 124, 427, 127, 395,
	0, 166, 136, 0, 0, 383, 413, 385, 407, 378,
	402, 347, 394, 422, 369, 398, 423, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 397, 418, 367, 400, 336, 396, 0, 340, 343,
	428, 416, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 382, 386, 404, 376, 0, 0, 0, 0, 0,
	0, 0, 0, 360, 0, 393, 0, 0, 0, 344,
	341, 0, 380, 0, 0, 0, 346, 0, 361, 405,
	0, 335, 408, 414, 377, 191, 417, 375, 374, 152,
	0, 107, 0, 170, 116, 370, 125, 403, 420, 384,
	412, 358, 366, 108, 364, 159, 146, 182, 392, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 0, 0, 0, 92, 171,
	180, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 101, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 339, 0, 167, 184, 202, 203,
	354, 415, 194, 195, 196, 197, 0, 0, 0, 140,
	102, 119, 163, 122, 129, 155, 200, 399, 160, 106,
	183, 165, 350, 353, 348, 349, 388, 389, 424, 425,
	426, 406, 345, 0, 351, 352, 0, 410, 391, 90,
	98, 126, 198, 199, 0, 154, 114, 185, 0, 103,
	419, 409, 0, 379, 421, 356, 371, 429, 372, 373,
	401, 342, 387, 145, 368, 91, 359, 337, 365, 338,
	357, 381, 112, 355, 411, 390, 124, 427, 127, 395,
	0, 166, 136, 0, 0, 383, 413, 385, 407, 378,
	402, 347, 394, 422, 369, 398, 423, 0, 0, 0,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 397, 418, 367, 400, 336, 396, 0, 340, 343,
	428, 416, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 382, 386, 404, 376, 0, 0, 0, 0, 0,
	0, 0, 0, 360, 0, 393, 0, 0, 0, 344,
	341, 0, 380, 0, 0, 0, 346, 0, 361, 405,
	0, 335, 408, 414, 377, 191, 417, 375, 374, 152,
	0, 107, 0, 170, 116, 370, 125, 403, 420, 384,
	412, 358, 366, 108, 364, 159, 146, 182, 392, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 0, 0, 0, 92, 171,
	607, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 331, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 339, 0, 167, 184, 202, 203,
	354, 415, 194, 195, 196, 197, 0, 0, 0, 332,
	330, 119, 163, 122, 129, 155, 200, 399, 160, 106,
	183, 165, 350, 353, 348, 349, 388, 389, 424, 425,
	426, 406, 345, 0, 351, 352, 0, 410, 391, 90,
	98, 126, 198, 199, 0, 154, 114, 185, 0, 103,
	419, 409, 0, 379, 421, 356, 371, 429, 372, 373,
	401, 342, 387, 145, 368, 91, 359, 337, 365, 338,
	357, 381, 112, 355, 411, 390, 124, 427, 127, 395,
	0, 166, 136, 0, 0, 383, 413, 385, 407, 378,
	402, 347, 394, 422, 369, 398, 423, 0, 0, 0,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 397, 418, 367, 400, 336, 396, 0, 340, 343,
	428, 416, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 382, 386, 404, 376, 0, 0, 0, 0, 0,
	0, 0, 0, 360, 0, 393, 0, 0, 0, 344,
	341, 0, 380, 0, 0, 0, 346, 0, 361, 405,
	0, 335, 408, 414, 377, 191, 417, 375, 374, 152,
	0, 107, 0, 170, 116, 370, 125, 403, 420, 384,
	412, 358, 366, 108, 364, 159, 146, 182, 392, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 0, 0, 0, 92, 171,
	322, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 331, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 339, 0, 167, 184, 202, 203,
	354, 415, 194, 195, 196, 197, 0, 0, 0, 332,
	330, 325, 324, 122, 129, 155, 200, 399, 160, 106,
	183, 165, 350, 353, 348, 349, 388, 389, 424, 425,
	426, 406, 345, 0, 351, 352, 0, 410, 391, 90,
	98, 126, 198, 199, 0, 154, 114, 185, 145, 103,
	91, 785, 0, 255, 0, 0, 0, 112, 252, 0,
	0, 124, 294, 127, 0, 0, 166, 136, 0, 0,
	0, 0, 285, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 253, 273, 272, 275, 276,
	277, 278, 0, 0, 104, 274, 279, 280, 281, 0,
	0, 250, 266, 0, 293, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 246, 0, 0, 0,
	306, 0, 265, 0, 0, 261, 262, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 304, 152, 0, 107, 0, 170, 116,
	0, 125, 0, 0, 0, 0, 0, 0, 108, 0,
	159, 146, 182, 0, 147, 157, 128, 174, 153, 181,
	192, 193, 172, 190, 161, 99, 142, 89, 151, 158,
	0, 0, 0, 92, 171, 180, 105, 162, 95, 178,
	168, 169, 134, 120, 121, 164, 93, 94, 0, 156,
	111, 150, 115, 110, 144, 175, 176, 109, 201, 100,
	188, 189, 97, 101, 187, 141, 186, 173, 179, 135,
	132, 96, 177, 133, 131, 123, 0, 113, 117, 148,
	130, 149, 118, 138, 137, 139, 0, 143, 0, 0,
	0, 167, 184, 202, 203, 0, 0, 194, 195, 196,
	197, 0, 0, 0, 140, 102, 119, 163, 122, 129,
	155, 200, 0, 160, 106, 183, 165, 295, 305, 301,
	302, 299, 300, 298, 297, 296, 307, 287, 288, 289,
	290, 292, 0, 291, 90, 98, 126, 198, 199, 0,
	154, 114, 185, 303, 103, 145, 0, 91, 0, 0,
	255, 0, 0, 0, 112, 252, 0, 0, 124, 294,
	127, 0, 0, 166, 136, 0, 0, 0, 0, 285,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 476, 253, 273, 272, 275, 276, 277, 278, 0,
	0, 104, 274, 279, 280, 281, 0, 0, 250, 266,
	0, 293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 0, 0, 0, 0, 306, 0, 265,
	0, 0, 261, 262, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	304, 152, 0, 107, 0, 170, 116, 0, 125, 0,
	0, 0, 0, 0, 0, 108, 0, 159, 146, 182,
	0, 147, 157, 128, 174, 153, 181, 192, 193, 172,
	190, 161, 99, 142, 89, 151, 158, 0, 0, 0,
	92, 171, 180, 105, 162, 95, 178, 168, 169, 134,
	120, 121, 164, 93, 94, 0, 156, 111, 150, 115,
	110, 144, 175, 176, 109, 201, 100, 188, 189, 97,
	101, 187, 141, 186, 173, 179, 135, 132, 96, 177,
	133, 131, 123, 0, 113, 117, 148, 130, 149, 118,
	138, 137, 139, 0, 143, 0, 0, 0, 167, 184,
	202, 203, 0, 0, 194, 195, 196, 197, 0, 0,
	0, 140, 102, 119, 163, 122, 129, 155, 200, 0,
	160, 106, 183, 165, 295, 305, 301, 302, 299, 300,
	298, 297, 296, 307, 287, 288, 289, 290, 292, 0,
	291, 90, 98, 126, 198, 199, 0, 154, 114, 185,
	303, 103, 145, 0, 91, 0, 0, 255, 0, 0,
	0, 112, 252, 0, 0, 124, 294, 127, 0, 0,
	166, 136, 0, 0, 0, 0, 285, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 253,
	273, 272, 275, 276, 277, 278, 0, 0, 104, 274,
	279, 280, 281, 0, 0, 250, 266, 0, 293, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	246, 0, 0, 0, 306, 0, 265, 0, 0, 261,
	262, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 304, 152, 0,
	107, 0, 170, 116, 0, 125, 0, 0, 0, 0,
	0, 0, 108, 0, 159, 146, 182, 0, 147, 157,
	128, 174, 153, 181, 192, 193, 172, 190, 161, 99,
	142, 89, 151, 158, 0, 0, 0, 92, 171, 180,
	105, 162, 95, 178, 168, 169, 134, 120, 121, 164,
	93, 94, 0, 156, 111, 150, 115, 110, 144, 175,
	176, 109, 201, 100, 188, 189, 97, 101, 187, 141,
	186, 173, 179, 135, 132, 96, 177, 133, 131, 123,
	0, 113, 117, 148, 130, 149, 118, 138, 137, 139,
	0, 143, 0, 0, 0, 167, 184, 202, 203, 0,
	0, 194, 195, 196, 197, 0, 0, 0, 140, 102,
	119, 163, 122, 129, 155, 200, 0, 160, 106, 183,
	165, 295, 305, 301, 302, 299, 300, 298, 297, 296,
	307, 287, 288, 289, 290, 292, 0, 291, 90, 98,
	126, 198, 199, 0, 154, 114, 185, 303, 103, 145,
	0, 91, 0, 0, 255, 0, 0, 0, 112, 252,
	0, 0, 124, 294, 127, 0, 0, 166, 136, 0,
	0, 0, 0, 285, 286, 0, 0, 0, 0, 0,
	0, 848, 0, 50, 0, 0, 253, 273, 272, 275,
	276, 277, 278, 0, 0, 104, 274, 279, 280, 281,
	0, 0, 250, 266, 0, 293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 0, 0, 0,
	0, 306, 0, 265, 0, 0, 261, 262, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 304, 152, 0, 107, 0, 170,
	116, 0, 125, 0, 0, 0, 0, 0, 0, 108,
	0, 159, 146, 182, 0, 147, 157, 128, 174, 153,
	181, 192, 193, 172, 190, 161, 99, 142, 89, 151,
	158, 0, 0, 0, 92, 171, 180, 105, 162, 95,
	178, 168, 169, 134, 120, 121, 164, 93, 94, 0,
	156, 111, 150, 115, 110, 144, 175, 176, 109, 201,
	100, 188, 189, 97, 101, 187, 141, 186, 173, 179,
	135, 132, 96, 177, 133, 131, 123, 0, 113, 117,
	148, 130, 149, 118, 138, 137, 139, 0, 143, 0,
	0, 0, 167, 184, 202, 203, 0, 0, 194, 195,
	196, 197, 0, 0, 0, 140, 102, 119, 163, 122,
	129, 155, 200, 0, 160, 106, 183, 165, 295, 305,
	301, 302, 299, 300, 298, 297, 296, 307, 287, 288,
	289, 290, 292, 0, 291, 90, 98, 126, 198, 199,
	23, 154, 114, 185, 303, 103, 0, 0, 0, 0,
	0, 0, 145, 0, 91, 0, 0, 255, 0, 0,
	0, 112, 252, 0, 0, 124, 294, 127, 0, 0,
	166, 136, 0, 0, 0, 0, 285, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 253,
	273, 272, 275, 276, 277, 278, 0, 0, 104, 274,
	279, 280, 281, 0, 0, 250, 266, 0, 293, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	0, 0, 0, 0, 306, 0, 265, 0, 0, 261,
	262, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 304, 152, 0,
	107, 0, 170, 116, 0, 125, 0, 0, 0, 0,
	0, 0, 108, 0, 159, 146, 182, 0, 147, 157,
	128, 174, 153, 181, 192, 193, 172, 190, 161, 99,
	142, 89, 151, 158, 0, 0, 0, 92, 171, 180,
	105, 162, 95, 178, 168, 169, 134, 120, 121, 164,
	93, 94, 0, 156, 111, 150, 115, 110, 144, 175,
	176, 109, 201, 100, 188, 189, 97, 101, 187, 141,
	186, 173, 179, 135, 132, 96, 177, 133, 131, 123,
	0, 113, 117, 148, 130, 149, 118, 138, 137, 139,
	0, 143, 0, 0, 0, 167, 184, 202, 203, 0,
	0, 194, 195, 196, 197, 0, 0, 0, 140, 102,
	119, 163, 122, 129, 155, 200, 0, 160, 106, 183,
	165, 295, 305, 301, 302, 299, 300, 298, 297, 296,
	307, 287, 288, 289, 290, 292, 0, 291, 90, 98,
	126, 198, 199, 0, 154, 114, 185, 303, 103, 145,
	0, 91, 0, 0, 255, 0, 0, 0, 112, 252,
	0, 0, 124, 294, 127, 0, 0, 166, 136, 0,
	0, 0, 0, 285, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 253, 273, 272, 275,
	276, 277, 278, 0, 0, 104, 274, 279, 280, 281,
	0, 0, 250, 266, 0, 293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 0, 0, 0,
	0, 306, 0, 265, 0, 0, 261, 262, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 304, 152, 0, 107, 0, 170,
	116, 0, 125, 0, 0, 0, 0, 0, 0, 108,
	0, 159, 146, 182, 0, 147, 157, 128, 174, 153,
	181, 192, 193, 172, 190, 161, 99, 142, 89, 151,
	158, 0, 0, 0, 92, 171, 180, 105, 162, 95,
	178, 168, 169, 134, 120, 121, 164, 93, 94, 0,
	156, 111, 150, 115, 110, 144, 175, 176, 109, 201,
	100, 188, 189, 97, 101, 187, 141, 186, 173, 179,
	135, 132, 96, 177, 133, 131, 123, 0, 113, 117,
	148, 130, 149, 118, 138, 137, 139, 0, 143, 0,
	0, 0, 167, 184, 202, 203, 0, 0, 194, 195,
	196, 197, 0, 0, 0, 140, 102, 119, 163, 122,
	129, 155, 200, 0, 160, 106, 183, 165, 295, 305,
	301, 302, 299, 300, 298, 297, 296, 307, 287, 288,
	289, 290, 292, 0, 291, 90, 98, 126, 198, 199,
	0, 154, 114, 185, 303, 103, 145, 0, 91, 0,
	0, 0, 0, 0, 0, 112, 0, 0, 0, 124,
	294, 127, 0, 0, 166, 136, 0, 0, 0, 0,
	285, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 253, 273, 272, 275, 276, 277, 278,
	0, 0, 104, 274, 279, 280, 281, 0, 0, 0,
	266, 0, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 0, 0, 0, 0, 306, 0,
	265, 0, 0, 261, 262, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 304, 152, 0, 107, 0, 170, 116, 0, 125,
	0, 0, 0, 0, 0, 0, 108, 0, 159, 146,
	182, 1466, 147, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 180, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 101, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 0, 0, 167,
	184, 202, 203, 0, 0, 194, 195, 196, 197, 0,
	0, 0, 140, 102, 119, 163, 122, 129, 155, 200,
	0, 160, 106, 183, 165, 295, 305, 301, 302, 299,
	300, 298, 297, 296, 307, 287, 288, 289, 290, 292,
	0, 291, 90, 98, 126, 198, 199, 0, 154, 114,
	185, 303, 103, 145, 0, 91, 0, 0, 0, 0,
	0, 0, 112, 0, 0, 0, 124, 294, 127, 0,
	0, 166, 136, 0, 0, 0, 0, 285, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	253, 273, 272, 275, 276, 277, 278, 0, 0, 104,
	274, 279, 280, 281, 0, 0, 0, 266, 0, 293,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 0, 0, 0, 0, 306, 0, 265, 0, 0,
	261, 262, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 304, 152,
	0, 107, 0, 170, 116, 0, 125, 0, 0, 0,
	0, 0, 0, 108, 0, 159, 146, 182, 0, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 0, 0, 0, 92, 171,
	180, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 101, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 0, 0, 167, 184, 202, 203,
	0, 0, 194, 195, 196, 197, 0, 0, 0, 140,
	102, 119, 163, 122, 129, 155, 200, 0, 160, 106,
	183, 165, 295, 305, 301, 302, 299, 300, 298, 297,
	296, 307, 287, 288, 289, 290, 292, 0, 291, 90,
	98, 126, 198, 199, 0, 154, 114, 185, 303, 103,
	145, 0, 91, 0, 0, 0, 0, 0, 0, 112,
	0, 0, 0, 124, 0, 127, 0, 0, 166, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 333, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 511, 510, 520, 521, 513, 514, 515, 516,
	517, 518, 519, 512, 0, 0, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 0, 152, 0, 107, 0,
	170, 116, 0, 125, 0, 0, 0, 0, 0, 0,
	108, 0, 159, 146, 182, 0, 147, 157, 128, 174,
	153, 181, 192, 193, 172, 190, 161, 99, 142, 89,
	151, 158, 0, 0, 0, 92, 171, 180, 105, 162,
	95, 178, 168, 169, 134, 120, 121, 164, 93, 94,
	0, 156, 111, 150, 115, 110, 144, 175, 176, 109,
	201, 100, 188, 189, 97, 101, 187, 141, 186, 173,
	179, 135, 132, 96, 177, 133, 131, 123, 0, 113,
	117, 148, 130, 149, 118, 138, 137, 139, 0, 143,
	0, 0, 0, 167, 184, 202, 203, 0, 0, 194,
	195, 196, 197, 0, 0, 0, 140, 102, 119, 163,
	122, 129, 155, 200, 0, 160, 106, 183, 165, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 98, 126, 198,
	199, 0, 154, 114, 185, 145, 103, 91, 0, 499,
	0, 0, 0, 0, 112, 0, 0, 0, 124, 0,
	127, 0, 0, 166, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 333, 0, 501, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 495, 494, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 152, 0, 107, 0, 170, 116, 0, 125, 0,
	0, 0, 0, 0, 0, 108, 0, 159, 146, 182,
	0, 147, 157, 128, 174, 153, 181, 192, 193, 172,
	190, 161, 99, 142, 89, 151, 158, 0, 0, 0,
	92, 171, 180, 105, 162, 95, 178, 168, 169, 134,
	120, 121, 164, 93, 94, 0, 156, 111, 150, 115,
	110, 144, 175, 176, 109, 201, 100, 188, 189, 97,
	101, 187, 141, 186, 173, 179, 135, 132, 96, 177,
	133, 131, 123, 0, 113, 117, 148, 130, 149, 118,
	138, 137, 139, 0, 143, 0, 0, 0, 167, 184,
	202, 203, 0, 0, 194, 195, 196, 197, 0, 0,
	0, 140, 102, 119, 163, 122, 129, 155, 200, 0,
	160, 106, 183, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 98, 126, 198, 199, 0, 154, 114, 185,
	497, 103, 145, 0, 91, 0, 596, 0, 0, 0,
	0, 112, 0, 0, 0, 124, 0, 127, 0, 0,
	166, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 598, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 152, 0,
	107, 0, 170, 116, 0, 125, 0, 0, 0, 0,
	0, 0, 108, 0, 159, 146, 182, 0, 147, 157,
	128, 174, 153, 181, 192, 193, 172, 190, 161, 99,
	142, 89, 151, 158, 0, 0, 0, 92, 171, 180,
	105, 162, 95, 178, 168, 169, 134, 120, 121, 164,
	93, 94, 0, 156, 111, 150, 115, 110, 144, 175,
	176, 109, 201, 100, 188, 189, 97, 101, 187, 141,
	186, 173, 179, 135, 132, 96, 177, 133, 131, 123,
	0, 113, 117, 148, 130, 149, 118, 138, 137, 139,
	0, 143, 0, 0, 0, 167, 184, 202, 203, 0,
	0, 194, 195, 196, 197, 0, 0, 0, 140, 102,
	119, 163, 122, 129, 155, 200, 0, 160, 106, 183,
	165, 0, 23, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 0, 91, 0, 90, 98,
	126, 198, 199, 112, 154, 114, 185, 124, 103, 127,
	0, 0, 166, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	152, 0, 107, 0, 170, 116, 0, 125, 0, 0,
	0, 0, 0, 0, 108, 0, 159, 146, 182, 0,
	147, 157, 128, 174, 153, 181, 192, 193, 172, 190,
	161, 99, 142, 89, 151, 158, 0, 0, 0, 92,
	171, 180, 105, 162, 95, 178, 168, 169, 134, 120,
	121, 164, 93, 94, 0, 156, 111, 150, 115, 110,
	144, 175, 176, 109, 201, 100, 188, 189, 97, 101,
	187, 141, 186, 173, 179, 135, 132, 96, 177, 133,
	131, 123, 0, 113, 117, 148, 130, 149, 118, 138,
	137, 139, 0, 143, 0, 0, 0, 167, 184, 202,
	203, 0, 0, 194, 195, 196, 197, 0, 0, 0,
	140, 102, 119, 163, 122, 129, 155, 200, 0, 160,
	106, 183, 165, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 0, 91, 0,
	90, 98, 126, 198, 199, 112, 154, 114, 185, 124,
	103, 127, 0, 0, 166, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 0, 152, 0, 107, 0, 170, 116, 0, 125,
	0, 0, 0, 0, 0, 0, 108, 0, 159, 146,
	182, 0, 147, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 180, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 101, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 0, 0, 167,
	184, 202, 203, 0, 0, 194, 195, 196, 197, 0,
	0, 0, 140, 102, 119, 163, 122, 129, 155, 200,
	0, 160, 106, 183, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 145, 0,
	91, 0, 90, 98, 126, 198, 199, 112, 154, 114,
	185, 124, 103, 127, 0, 0, 166, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 0, 0, 728, 0,
	0, 729, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 152, 0, 107, 0, 170, 116,
	0, 125, 0, 0, 0, 0, 0, 0, 108, 0,
	159, 146, 182, 0, 147, 157, 128, 174, 153, 181,
	192, 193, 172, 190, 161, 99, 142, 89, 151, 158,
	0, 0, 0, 92, 171, 180, 105, 162, 95, 178,
	168, 169, 134, 120, 121, 164, 93, 94, 0, 156,
	111, 150, 115, 110, 144, 175, 176, 109, 201, 100,
	188, 189, 97, 101, 187, 141, 186, 173, 179, 135,
	132, 96, 177, 133, 131, 123, 0, 113, 117, 148,
	130, 149, 118, 138, 137, 139, 0, 143, 0, 0,
	0, 167, 184, 202, 203, 0, 0, 194, 195, 196,
	197, 0, 0, 0, 140, 102, 119, 163, 122, 129,
	155, 200, 0, 160, 106, 183, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 98, 126, 198, 199, 0,
	154, 114, 185, 145, 103, 91, 0, 0, 0, 0,
	0, 0, 112, 616, 0, 0, 124, 0, 127, 0,
	0, 166, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	333, 0, 615, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 152,
	0, 107, 0, 170, 116, 0, 125, 0, 0, 0,
	0, 0, 0, 108, 0, 159, 146, 182, 0, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 0, 0, 0, 92, 171,
	180, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 101, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 0, 0, 167, 184, 202, 203,
	0, 0, 194, 195, 196, 197, 0, 0, 0, 140,
	102, 119, 163, 122, 129, 155, 200, 0, 160, 106,
	183, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	98, 126, 198, 199, 0, 154, 114, 185, 145, 103,
	91, 0, 596, 0, 0, 0, 0, 112, 0, 0,
	0, 124, 0, 127, 0, 0, 166, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 598, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 152, 0, 107, 0, 170, 116,
	0, 125, 0, 0, 0, 0, 0, 0, 108, 0,
	159, 146, 182, 0, 594, 157, 128, 174, 153, 181,
	192, 193, 172, 190, 161, 99, 142, 89, 151, 158,
	0, 0, 0, 92, 171, 180, 105, 162, 95, 178,
	168, 169, 134, 120, 121, 164, 93, 94, 0, 156,
	111, 150, 115, 110, 144, 175, 176, 109, 201, 100,
	188, 189, 97, 101, 187, 141, 186, 173, 179, 135,
	132, 96, 177, 133, 131, 123, 0, 113, 117, 148,
	130, 149, 118, 138, 137, 139, 0, 143, 0, 0,
	0, 167, 184, 202, 203, 0, 0, 194, 195, 196,
	197, 0, 0, 0, 140, 102, 119, 163, 122, 129,
	155, 200, 0, 160, 106, 183, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	145, 0, 91, 0, 90, 98, 126, 198, 199, 112,
	154, 114, 185, 124, 103, 127, 0, 0, 166, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 0, 152, 0, 107, 0,
	170, 116, 0, 125, 0, 0, 0, 0, 0, 0,
	108, 0, 159, 146, 182, 0, 147, 157, 128, 174,
	153, 181, 192, 193, 172, 190, 161, 99, 142, 89,
	151, 158, 0, 0, 0, 92, 171, 180, 105, 162,
	95, 178, 168, 169, 134, 120, 121, 164, 93, 94,
	0, 156, 111, 150, 115, 110, 144, 175, 176, 109,
	201, 100, 188, 189, 97, 101, 187, 141, 186, 173,
	179, 135, 132, 96, 177, 133, 131, 123, 0, 113,
	117, 148, 130, 149, 118, 138, 137, 139, 0, 143,
	0, 0, 0, 167, 184, 202, 203, 0, 0, 194,
	195, 196, 197, 0, 0, 0, 140, 102, 119, 163,
	122, 129, 155, 200, 0, 160, 106, 183, 165, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 145, 0, 91, 0, 90, 98, 126, 198,
	199, 112, 154, 114, 185, 124, 103, 127, 0, 0,
	166, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 598, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 152, 0,
	107, 0, 170, 116, 0, 125, 0, 0, 0, 0,
	0, 0, 108, 0, 159, 146, 182, 0, 147, 157,
	128, 174, 153, 181, 192, 193, 172, 190, 161, 99,
	142, 89, 151, 158, 0, 0, 0, 92, 171, 180,
	105, 162, 95, 178, 168, 169, 134, 120, 121, 164,
	93, 94, 0, 156, 111, 150, 115, 110, 144, 175,
	176, 109, 201, 100, 188, 189, 97, 101, 187, 141,
	186, 173, 179, 135, 132, 96, 177, 133, 131, 123,
	0, 113, 117, 148, 130, 149, 118, 138, 137, 139,
	0, 143, 0, 0, 0, 167, 184, 202, 203, 0,
	0, 194, 195, 196, 197, 0, 0, 0, 140, 102,
	119, 163, 122, 129, 155, 200, 0, 160, 106, 183,
	165, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 0, 91, 0, 90, 98,
	126, 198, 199, 112, 154, 114, 185, 124, 103, 127,
	0, 0, 166, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 501, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	152, 0, 107, 0, 170, 116, 0, 125, 0, 0,
	0, 0, 0, 0, 108, 0, 159, 146, 182, 0,
	147, 157, 128, 174, 153, 181, 192, 193, 172, 190,
	161, 99, 142, 89, 151, 158, 0, 0, 0, 92,
	171, 180, 105, 162, 95, 178, 168, 169, 134, 120,
	121, 164, 93, 94, 0, 156, 111, 150, 115, 110,
	144, 175, 176, 109, 201, 100, 188, 189, 97, 101,
	187, 141, 186, 173, 179, 135, 132, 96, 177, 133,
	131, 123, 0, 113, 117, 148, 130, 149, 118, 138,
	137, 139, 0, 143, 0, 0, 0, 167, 184, 202,
	203, 0, 0, 194, 195, 196, 197, 0, 0, 0,
	140, 102, 119, 163, 122, 129, 155, 200, 0, 160,
	106, 183, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 0, 91, 0,
	90, 98, 126, 198, 199, 112, 154, 114, 185, 124,
	103, 127, 0, 0, 166, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 0, 152, 0, 107, 0, 170, 116, 0, 125,
	0, 0, 0, 0, 0, 0, 108, 0, 159, 146,
	182, 0, 147, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 180, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 101, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 0, 0, 167,
	184, 202, 203, 0, 0, 194, 195, 196, 197, 0,
	0, 0, 140, 102, 119, 163, 122, 129, 155, 200,
	688, 160, 106, 183, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 98, 126, 198, 199, 0, 154, 114,
	185, 145, 103, 91, 0, 0, 0, 0, 0, 574,
	112, 0, 0, 0, 124, 0, 127, 0, 0, 166,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 152, 0, 107,
	0, 170, 116, 0, 125, 0, 0, 0, 0, 0,
	0, 108, 0, 159, 146, 182, 0, 147, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 180, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 101, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 0, 0, 167, 184, 202, 203, 0, 0,
	194, 195, 196, 197, 0, 0, 0, 140, 102, 119,
	163, 122, 129, 155, 200, 0, 160, 106, 183, 165,
	0, 0, 0, 0, 0, 0, 317, 0, 0, 0,
	0, 0, 0, 145, 0, 91, 0, 90, 98, 126,
	198, 199, 112, 154, 114, 185, 124, 103, 127, 0,
	0, 166, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 152,
	0, 107, 0, 170, 116, 0, 125, 0, 0, 0,
	0, 0, 0, 108, 0, 159, 146, 182, 0, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 0, 0, 0, 92, 171,
	180, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 101, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 0, 0, 167, 184, 202, 203,
	0, 0, 194, 195, 196, 197, 0, 0, 0, 140,
	102, 119, 163, 122, 129, 155, 200, 0, 160, 106,
	183, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 145, 0, 91, 0, 90,
	98, 126, 198, 199, 112, 154, 114, 185, 124, 103,
	127, 0, 0, 166, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 191, 0, 0,
	0, 152, 0, 107, 0, 170, 116, 0, 125, 0,
	0, 0, 0, 0, 0, 108, 0, 159, 146, 182,
	0, 147, 157, 128, 174, 153, 181, 192, 193, 172,
	190, 161, 99, 142, 89, 151, 158, 0, 0, 0,
	92, 171, 180, 105, 162, 95, 178, 168, 169, 134,
	120, 121, 164, 93, 94, 0, 156, 111, 150, 115,
	110, 144, 175, 176, 109, 201, 100, 188, 189, 97,
	101, 187, 141, 186, 173, 179, 135, 132, 96, 177,
	133, 131, 123, 0, 113, 117, 148, 130, 149, 118,
	138, 137, 139, 0, 143, 0, 0, 0, 167, 184,
	202, 203, 0, 0, 194, 195, 196, 197, 0, 0,
	0, 140, 102, 119, 163, 122, 129, 155, 200, 0,
	160, 106, 183, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 145, 0, 91,
	0, 90, 98, 126, 198, 199, 112, 154, 114, 185,
	124, 103, 127, 0, 0, 166, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 152, 0, 107, 0, 170, 116, 0,
	125, 0, 0, 0, 0, 0, 0, 108, 0, 159,
	146, 182, 0, 147, 157, 128, 174, 153, 181, 192,
	193, 172, 190, 161, 99, 142, 89, 151, 158, 0,
	0, 0, 92, 171, 180, 105, 162, 95, 178, 168,
	169, 134, 120, 121, 164, 93, 94, 0, 156, 111,
	150, 115, 110, 144, 175, 176, 109, 201, 100, 188,
	189, 97, 101, 187, 141, 186, 173, 179, 135, 132,
	96, 177, 133, 131, 123, 0, 113, 117, 148, 130,
	149, 118, 138, 137, 139, 0, 143, 0, 0, 0,
	167, 184, 202, 203, 0, 0, 194, 195, 196, 197,
	0, 0, 0, 140, 102, 119, 163, 122, 129, 155,
	200, 0, 160, 106, 183, 165, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 145,
	0, 91, 0, 90, 98, 126, 198, 199, 112, 154,
	114, 185, 124, 103, 127, 0, 0, 166, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 152, 0, 107, 0, 170,
	116, 0, 125, 0, 0, 0, 0, 0, 0, 108,
	0, 159, 146, 182, 0, 147, 157, 128, 174, 153,
	181, 192, 193, 172, 190, 161, 99, 142, 89, 151,
	158, 0, 0, 0, 92, 171, 180, 105, 162, 95,
	178, 168, 169, 134, 120, 121, 164, 93, 94, 0,
	156, 111, 150, 115, 110, 144, 175, 176, 109, 201,
	100, 188, 189, 97, 101, 187, 141, 186, 173, 179,
	135, 132, 96, 177, 133, 131, 123, 0, 113, 117,
	148, 130, 149, 118, 138, 137, 139, 0, 143, 0,
	0, 0, 167, 184, 202, 203, 0, 0, 194, 195,
	196, 197, 0, 0, 0, 140, 102, 119, 163, 122,
	129, 155, 200, 0, 160, 106, 183, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 0, 91, 0, 90, 98, 126, 198, 199,
	112, 154, 114, 185, 124, 103, 127, 0, 0, 166,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 152, 0, 107,
	0, 170, 116, 0, 125, 0, 0, 0, 0, 0,
	0, 108, 0, 159, 146, 182, 0, 147, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 180, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 101, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 0, 0, 167, 184, 202, 203, 0, 0,
	194, 195, 196, 197, 0, 0, 0, 140, 102, 119,
	163, 122, 129, 155, 200, 0, 160, 106, 183, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 98, 126,
	198, 199, 0, 154, 114, 185, 0, 103,
}
var yyPact = [...]int{

	1789, -1000, -199, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 904, 932, -1000, -1000, -1000, -1000, -1000, -1000, 749,
	122, 183, 206, 75, 11187, 202, 1490, 11671, -1000, 58,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 728, -1000, -1000,
	-1000, -1000, -1000, 887, 892, 761, 879, 835, -1000, 6184,
	175, 9722, 10945, 5415, -1000, 610, 200, 11671, -137, 11429,
	173, 173, 11429, 173, -1000, 193, 11671, -1000, 11671, 170,
	604, 170, 170, 170, 11671, -1000, 244, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11671, 591, 853, 164, 3525, 3525,
	3525, 3525, 79, 3525, -61, 778, -1000, -1000, -1000, -1000,
	3525, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 480, 856, 6961, 6961, 904, -1000, 728, -1000, -1000,
	-1000, 843, -1000, -1000, 360, 917, -1000, 7987, 241, -1000,
	6961, 1995, 693, -1000, -1000, 693, -1000, -1000, 217, -1000,
	-1000, 7475, 7475, 7475, 7475, 7475, 7475, 7475, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 693, -1000, 6704, 693, 693, 693, 693, 693,
	693, 693, 693, 6961, 693, 693, 693, 693, 693, 693,
	693, 693, 693, 48, 693, 693, 693, 693, 10703, 684,
	819, -1000, -1000, -1000, 874, 8728, 9480, 11671, 655, -1000,
	706, 5145, -86, -1000, -1000, -1000, 307, 9225, -1000, -1000,
	-1000, 851, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	603, -1000, 2266, 11429, 3525, 182, 751, 567, 327, 565,
	771, 11671, 10448, 3525, 180, 11671, 865, 770, 11671, 563,
	561, -1000, 4875, -1000, 3525, 3525, 3525, 3525, 3525, 3525,
	3525, 3525, -1000, -1000, -1000, -1000, -1000, -1000, 3525, 3525,
	-1000, -30, -1000, 11671, -1000, -1000, -1000, -1000, 927, 275,
	90, 240, 709, -1000, 81, 887, 480, 835, 8970, 758,
	-1000, -1000, 11671, -1000, 6961, 6961, 439, 147, -1000, 10206,
	-1000, -1000, 3795, 2, 7475, 367, 319, 7475, 7475, 7475,
	7475, 7475, 7475, 7475, 7475, 7475, 7475, 7475, 7475, 7475,
	7475, 7475, 393, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 559, -1000, 728, 481, 481, 254, 254, 254, 254,
	254, 254, 7732, 5670, 480, 573, 86, 6704, 6184, 6184,
	6961, 6961, 11913, 11913, 6184, 881, 315, 86, 11913, -1000,
	480, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6184,
	6184, 6184, 6184, 97, 11671, -1000, 11913, 9722, 9722, 9722,
	9722, 9722, -1000, 807, 806, -1000, 805, 803, 789, 11671,
	-1000, 571, 8728, 246, 693, -1000, 9964, -1000, -1000, 97,
	656, 9722, 11671, -1000, -1000, 4605, 706, -86, 695, -1000,
	-101, -78, 6441, 291, -1000, -1000, -1000, -1000, 2985, 298,
	402, -132, -34, -1000, -1000, -1000, -1000, 732, -1000, -1000,
	-1000, 732, 155, 732, 732, 732, 9, 9, 9, 9,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 748, 738, -1000,
	732, 732, 732, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 735, 166, 735, 733, 733, 747, -1000, 11671,
	-160, 541, 3525, 860, 3525, 11671, -1000, 85, 11671, -1000,
	11671, -1000, -1000, 11671, 3525, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	351, -1000, -1000, -1000, -1000, 821, 6961, 6961, 4335, 6961,
	-1000, -1000, -1000, 856, -1000, 881, 907, -1000, 846, 844,
	6184, -1000, -1000, 2, 10, -1000, -1000, 370, -1000, -1000,
	-1000, -1000, 22, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	229, 693, -1000, 2142, -1000, -1000, -1000, -1000, 367, 7475,
	7475, 7475, 973, 2142, 2095, 2155, 2053, 254, 379, 379,
	296, 296, 296, 296, 296, 897, 897, -1000, -1000, -1000,
	480, -1000, -1000, -1000, 480, 6184, 701, -1000, -1000, 6961,
	-1000, 480, 556, 556, 88, 120, 720, -1000, 228, 713,
	556, 6184, 338, -1000, 6961, 480, -1000, 556, 480, 556,
	556, 646, 693, -1000, 689, -1000, 294, 819, 744, 766,
	1109, -1000, -1000, -1000, -1000, 799, -1000, 795, -1000, -1000,
	-1000, -1000, -1000, 191, 189, 187, 11429, -1000, 911, 9722,
	675, -1000, -1000, 695, -86, -63, -1000, -1000, -1000, 86,
	-1000, -1000, 539, 688, 2715, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 737, 764, 146, 142, 226, 181, 508, 11429,
	-1000, -1000, -1000, 352, 192, 926, -1000, 140, -1000, 130,
	415, -1000, -202, -1000, -37, -1000, -1000, 406, 9, 9,
	732, 9, -1000, -1000, 291, 838, 291, 291, 291, 414,
	414, -158, -158, -1000, -1000, 405, 735, -1000, -1000, -1000,
	396, -1000, 11671, 11429, 3525, -1000, 4065, -1000, -1000, -1000,
	-1000, -1000, 867, -1000, 694, 627, 222, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 94, 209,
	-1000, 3525, -1000, 354, 11671, 11671, 814, 86, 86, 225,
	-1000, -1000, 11671, -1000, -1000, -1000, -1000, 682, -1000, -1000,
	-1000, -1000, 3255, 6184, -1000, 973, 2142, 2030, -1000, 7475,
	7475, -1000, -1000, 556, 6184, 86, -1000, -1000, -1000, 620,
	393, 620, 7475, 7475, 4335, 7475, 7475, -149, 677, 310,
	-1000, 6961, 99, -1000, -1000, -1000, -1000, -1000, 762, 11913,
	693, -1000, 8486, 11429, 904, 11913, 6961, 6961, -1000, -1000,
	6961, 734, -1000, 6961, -1000, -1000, -1000, 693, 693, 693,
	533, -1000, 904, 675, -1000, -1000, -1000, -105, -97, -1000,
	-1000, 2985, -1000, 2985, 11429, 915, -1000, 494, 444, -1000,
	432, -1000, -1000, 126, -1000, -1000, -191, -1000, -1000, -1000,
	-1000, 732, -1000, 693, -113, -1000, -1000, -1000, -1000, -1000,
	-1000, 520, 291, 291, 9, 291, -1000, 300, -1000, -1000,
	-1000, 551, -1000, 545, -1000, 31, 30, -1000, 683, -1000,
	538, 692, 760, -1000, 680, -1000, 292, 884, 66, -1000,
	128, -1000, 11429, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 11429, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11671, -1000, -1000, -1000, -1000, -1000, 11429,
	160, -1000, -1000, 410, 6961, -1000, -1000, -1000, 4065, -1000,
	911, 9722, -1000, -1000, 480, -1000, 7475, 2142, 2142, -1000,
	-1000, 480, 732, 732, -1000, 732, 733, -1000, -1000, 732,
	46, 732, 43, 480, 480, 1752, 1788, -1000, 1160, 1685,
	693, -144, -1000, 86, 6961, -1000, 857, 650, 661, -1000,
	-1000, 5927, 480, 535, 223, 533, 887, -1000, 86, 86,
	86, 11429, 86, 11429, 11429, 11429, 8244, 11429, 887, -1000,
	-1000, -1000, -1000, 2715, -1000, 530, -1000, 732, 248, 248,
	-1000, -1000, -1000, 119, -1000, 11, -1000, 480, 732, -1000,
	-1000, -1000, 291, -1000, -1000, -1000, 9, 408, 9, -40,
	-42, 389, -1000, 387, 11429, 11429, 11671, 4065, 2985, 177,
	885, -1000, -1000, 11429, -1000, -1000, -1000, 729, -1000, -1000,
	-1000, -1000, 861, 11429, -1000, -1000, 86, 909, 662, -1000,
	2142, -1000, -1000, 145, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7475, 7475, -1000, 7475, 7475, 7475, 480,
	394, 86, 111, -1000, 693, -1000, -1000, 652, 11429, 11429,
	-1000, -1000, 519, -1000, 517, 517, 517, 246, -1000, -1000,
	102, 11429, -1000, 756, -1000, -1000, 333, 69, 754, 11429,
	17, -1000, -1000, -1000, 291, -1000, 291, -1000, -1000, 504,
	500, 515, 726, 724, -1000, -1000, 11429, -1000, -1000, -1000,
	-1000, -1000, 722, 11429, 693, 163, 906, 891, -1000, -1000,
	1437, 1437, 1437, 1437, 32, -1000, -1000, 925, -1000, 693,
	-1000, 728, 221, -1000, 11429, -1000, -1000, -1000, -1000, -1000,
	102, -1000, 427, 251, 371, -166, -1000, 924, -1000, -1000,
	922, 718, -1000, -1000, -1000, -1000, -1000, 911, 11429, 11429,
	628, -1000, 11429, 512, 91, 100, -1000, 6961, 6961, -1000,
	-1000, -1000, -1000, 480, 67, -175, 11913, 661, 480, 11429,
	-1000, -1000, -1000, 375, -1000, -1000, 11429, 248, 248, 11429,
	-1000, 503, 499, -156, 11429, 693, 479, 751, 475, -1000,
	11429, 717, 86, 635, -1000, 812, -154, -185, 617, -1000,
	-1000, -1000, -1000, -1000, -1000, 450, 911, -1000, -1000, -193,
	-1000, 6961, -1000, -160, -1000, 91, 839, 11429, -1000, 774,
	-1000, 152, -1000, 693, 92, -1000, -1000, 82, 438, -163,
	11671, 6961, -1000, 80, -1000, -181, 716, 92, 693, -188,
	11429, -1000, 7218, -1000, 431, 1437, 480, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1142, 97, 494, 1141, 1135, 1134, 1133, 1131, 1128,
	1126, 1125, 1122, 1121, 1119, 1118, 1117, 1116, 1113, 1111,
	1110, 1109, 1107, 1106, 263, 1105, 1104, 1103, 59, 1101,
	67, 1099, 1097, 33, 99, 42, 34, 116, 1094, 39,
	66, 117, 1092, 48, 1091, 1089, 71, 1086, 61, 1085,
	1084, 102, 1083, 1082, 16, 13, 1081, 41, 1080, 1079,
	65, 3, 1078, 1076, 1075, 1061, 1059, 1058, 49, 9,
	12, 24, 19, 1057, 58, 8, 1056, 50, 1054, 1053,
	1052, 1049, 37, 1048, 52, 1047, 23, 51, 1046, 7,
	55, 26, 21, 5, 69, 53, 1045, 30, 57, 45,
	1044, 1041, 425, 1040, 1039, 1038, 1033, 1031, 1029, 414,
	416, 1027, 1024, 1023, 28, 0, 173, 559, 60, 1022,
	40, 1021, 1424, 74, 56, 22, 1020, 46, 1303, 31,
	1019, 1018, 29, 1017, 1016, 1007, 1002, 1000, 988, 985,
	984, 983, 87, 72, 32, 982, 981, 980, 36, 43,
	25, 47, 54, 979, 977, 27, 976, 10, 14, 6,
	44, 975, 972, 971, 969, 18, 17, 968, 15, 967,
	11, 966, 960, 1, 959, 20, 958, 2, 957, 4,
	956, 955, 954, 952, 951, 949, 947, 944, 1365, 897,
	943, 941, 940, 938, 78,
}
var yyR1 = [...]int{

	0, 186, 187, 187, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 190,
	190, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	181, 181, 181, 182, 182, 182, 182, 182, 182, 184,
	184, 185, 185, 120, 120, 179, 179, 178, 177, 177,
	176, 176, 175, 16, 162, 163, 163, 163, 163, 152,
	134, 134, 134, 134, 134, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 183, 183, 138, 138, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 137, 137, 137,
	137, 137, 137, 139, 139, 139, 139, 139, 135, 135,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 141,
	141, 141, 141, 141, 141, 141, 141, 151, 151, 142,
	142, 149, 149, 150, 150, 150, 148, 148, 148, 145,
	145, 146, 146, 147, 147, 147, 143, 143, 143, 144,
	144, 144, 154, 154, 171, 171, 170, 170, 170, 170,
	161, 161, 167, 167, 167, 167, 167, 167, 167, 160,
	160, 169, 169, 168, 155, 155, 155, 155, 155, 156,
	157, 157, 157, 157, 158, 158, 159, 159, 164, 164,
	164, 165, 165, 165, 166, 166, 166, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	191, 191, 192, 192, 192, 192, 192, 192, 192, 174,
	172, 172, 173, 173, 13, 14, 14, 14, 14, 14,
	15, 15, 17, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 107, 107, 104, 104,
	105, 105, 106, 106, 106, 108, 108, 108, 131, 131,
	131, 19, 19, 21, 21, 22, 23, 20, 20, 20,
	20, 20, 193, 24, 25, 25, 26, 26, 26, 30,
	30, 30, 28, 28, 29, 29, 35, 35, 34, 34,
	36, 36, 36, 36, 119, 119, 119, 118, 118, 38,
	38, 39, 39, 40, 40, 41, 41, 41, 53, 53,
	89, 89, 91, 91, 42, 42, 42, 42, 43, 43,
	44, 44, 45, 45, 126, 126, 125, 125, 125, 124,
	124, 47, 47, 47, 49, 48, 48, 48, 48, 50,
	50, 52, 52, 51, 51, 54, 54, 54, 54, 55,
	55, 37, 37, 37, 37, 37, 37, 37, 37, 103,
	103, 57, 57, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 67, 67, 67, 67, 67, 67, 58,
	58, 58, 58, 58, 58, 58, 33, 33, 68, 68,
	68, 74, 69, 69, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 65, 65, 65, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 194, 194, 66, 66, 66, 66, 31, 31,
	31, 31, 31, 129, 129, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 133,
	133, 133, 133, 133, 133, 133, 78, 78, 32, 32,
	76, 76, 77, 79, 79, 75, 75, 75, 60, 60,
	60, 60, 60, 60, 60, 60, 62, 62, 62, 80,
	80, 81, 81, 82, 82, 83, 83, 84, 85, 85,
	85, 86, 86, 86, 86, 87, 87, 87, 59, 59,
	59, 59, 59, 59, 88, 88, 88, 88, 92, 92,
	70, 70, 72, 72, 71, 73, 93, 93, 97, 94,
	94, 98, 98, 98, 96, 96, 96, 121, 121, 121,
	101, 101, 109, 109, 110, 110, 102, 102, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 112, 112,
	112, 113, 113, 116, 116, 117, 117, 122, 122, 123,
	123, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 188, 189, 127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 4, 6, 5, 5, 5, 11,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	4, 0, 5, 0, 1, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 1, 3, 3, 3, 2,
	3, 1, 1, 1, 1, 2, 2, 3, 4, 3,
	3, 3, 3, 4, 3, 5, 5, 2, 3, 2,
	3, 2, 3, 0, 3, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 3, 2,
	2, 2, 2, 1, 3, 3, 2, 1, 1, 1,
	4, 4, 4, 5, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 3, 3, 0,
	1, 0, 1, 0, 2, 1, 0, 3, 3, 0,
	1, 2, 5, 4, 1, 2, 2, 3, 2, 3,
	0, 1, 2, 3, 3, 2, 3, 2, 2, 1,
	1, 1, 3, 2, 1, 4, 4, 7, 7, 13,
	1, 1, 2, 2, 0, 1, 1, 3, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 11, 13,
	7, 7, 7, 12, 7, 7, 7, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 5, 4, 6, 5, 4, 4,
	3, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 3, 3, 3, 3, 4, 3, 6, 4, 2,
	4, 2, 2, 2, 2, 3, 1, 1, 0, 1,
	0, 1, 0, 2, 2, 0, 2, 2, 0, 1,
	1, 2, 1, 1, 2, 1, 1, 2, 2, 2,
	2, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 3, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 6, 8, 8, 6, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 1, 2, 1, 2, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -186, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 142, 115, 135, 48, 163, 164,
	166, 167, 25, 136, 137, 140, 141, -188, 8, 256,
	52, -187, 275, -82, 15, -26, 5, -24, -193, -24,
	-24, -24, -24, -24, -162, 52, -120, 120, 69, 150,
	248, 117, 132, 118, 133, -102, 120, 122, 118, 118,
	119, 120, 248, 117, 118, -51, -122, 55, -115, 157,
	264, 20, 163, 176, 177, 168, 201, 192, 265, 155,
	189, 193, 235, 274, 64, 166, 244, 126, 138, 187,
	183, 180, 27, 207, 271, 182, 129, 208, 212, 236,
	173, 174, 238, 205, 31, 131, 266, 33, 146, 239,
	210, 204, 200, 203, 172, 199, 37, 214, 213, 215,
	234, 195, 156, 217, 184, 18, 141, 144, 209, 211,
	181, 158, 124, 148, 270, 240, 179, 145, 159, 140,
	243, 154, 167, 237, 175, 246, 36, 221, 170, 171,
	128, 164, 152, 197, 147, 185, 186, 202, 169, 198,
	165, 149, 142, 245, 222, 272, 196, 194, 190, 191,
	153, 120, 150, 151, 227, 228, 229, 230, 267, 268,
	241, 188, 223, 224, 118, 105, 193, 111, 225, 119,
	31, 148, -131, 118, -104, 151, 227, 228, 229, 230,
	55, 237, 236, 231, -122, 165, -127, -127, -127, -127,
	-127, -2, -86, 17, 16, -5, -3, -188, 6, 20,
	21, -30, 38, 39, -25, -36, 96, -37, -122, -56,
	71, -61, 28, 55, -115, 23, -60, -57, -75, -73,
	-74, 105, 106, 94, 95, 102, 72, 107, -65, -63,
	-64, -66, 57, 56, 65, 58, 59, 60, 61, 66,
	67, 68, -116, -71, -188, 42, 43, 257, 258, 259,
	260, 263, 261, 74, 32, 247, 255, 254, 253, 251,
	252, 249, 250, 273, 123, 248, 100, 256, -102, -39,
	-40, -41, -42, -53, -74, -188, -51, 11, -46, -51,
	-94, -130, 165, -98, 237, 236, -117, -96, -116, -114,
	235, 193, 234, 55, -115, 116, 70, 22, 24, 219,
	73, 105, 16, 74, 104, 257, 111, 46, 249, 250,
	247, 259, 260, 248, 225, 28, 10, 25, 136, 21,
	98, 113, 77, 78, 139, 23, 137, 68, 19, 49,
	130, 11, 13, 14, 123, 122, 89, 119, 44, 8,
	107, 26, 86, 40, 134, 42, 87, 17, 251, 252,
	30, 263, 143, 100, 47, 34, 71, 66, 50, 242,
	69, 15, 45, 132, 88, 114, 256, 43, 117, 6,
	262, 29, 135, 41, 118, 226, 76, 121, 67, 5,
	133, 9, 48, 51, 253, 254, 255, 32, 75, 12,
	-163, -152, 55, 119, -51, 256, -116, -110, 123, -110,
	-116, -110, 118, -51, -51, -109, 123, 55, -109, -109,
	-109, -51, 108, -51, 55, 29, 248, 55, 148, 118,
	149, 120, -128, -188, -117, -128, -128, -128, 152, 153,
	-128, -105, 232, 50, -128, -189, 54, -87, 19, 30,
	-37, -122, -83, -84, -37, -82, -2, -24, 34, -28,
	21, 63, 11, -119, 70, 69, 86, 273, -118, 22,
	-116, 57, 108, -37, -58, 89, 71, 87, 88, 73,
	91, 90, 101, 94, 95, 96, 97, 98, 99, 100,
	92, 93, 104, 79, 80, 81, 82, 83, 84, 85,
	-103, -188, -74, -188, 109, 110, -61, -61, -61, -61,
	-61, -61, -61, -188, -2, -69, -37, -188, -188, -188,
	-188, -188, -188, -188, -188, -188, -78, -37, -188, -194,
	-188, -194, -194, -194, -194, -194, -194, -194, 174, -188,
	-188, -188, -188, -52, 26, -51, 29, 53, -47, -49,
	-48, -50, 40, 44, 46, 41, 42, 43, 47, -126,
	22, -39, -188, -125, 144, -124, 22, -122, 57, -51,
	-46, -190, 53, 11, 51, 53, -94, 165, -95, -99,
	238, 240, 79, -121, -116, 57, 28, 29, 54, 53,
	-153, -134, -138, -135, -140, -139, -141, -136, -137, 192,
	265, 189, 193, 190, 105, 194, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 196, 207, 29, 138,
	185, 186, 187, 188, 208, 209, 210, 211, 212, 213,
	214, 215, 168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 179, 180, 182, 183, 184, -116, -128, 120,
	-179, 51, 55, 71, 55, 50, -51, -51, 242, -128,
	121, -51, 23, 50, -51, 55, 55, -123, -122, -114,
	-128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
	-107, 226, 233, -51, 9, 89, 53, 18, 108, 53,
	-85, 24, 25, -86, -189, -30, -62, -116, 58, 61,
	-29, 41, -51, -37, -37, -67, 66, 71, 67, 68,
	-133, 105, 193, 138, 187, 174, 192, 197, -118, 96,
	-123, -117, -114, -61, -68, -71, -74, 62, 89, 87,
	88, 73, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -129, 55, 57,
	55, -60, -60, -116, -35, 21, -34, -36, -189, 53,
	-189, -2, -34, -34, -37, -37, -75, -116, -122, -75,
	-34, -28, -76, -77, 75, -75, -189, -34, -35, -34,
	-34, -90, 144, -51, -93, -97, -75, -40, -41, -41,
	-40, -41, 40, 40, 40, 45, 40, 45, 40, -48,
	-122, -189, -54, 48, 122, 49, -188, -124, -90, 51,
	-39, -51, -98, -95, 53, 239, 241, 242, 50, -37,
	-144, 105, 104, -164, -165, -166, -117, 57, 58, -152,
	-154, -155, -167, -156, 124, 128, 129, 133, -160, 126,
	119, 134, 66, 71, 28, 50, 219, 124, 134, 133,
	64, -147, 276, 216, -145, 222, -142, 52, -142, -142,
	191, -142, -142, -142, -143, 193, -143, -143, -143, 52,
	52, -142, -142, -142, -149, 52, 181, -149, -149, -150,
	52, -150, 50, 51, -51, -177, 267, -178, 55, -128,
	23, -128, -51, -111, 116, 113, 114, -174, 112, 219,
	193, 64, 28, 15, 257, 144, 272, 55, 145, -51,
	-51, -51, -128, -106, 11, 89, 36, -37, -37, -123,
	-84, -87, -101, 19, 11, 32, 32, -34, 66, 67,
	68, 191, 108, -188, -68, -61, -61, -61, -33, 139,
	70, -189, -189, -34, 53, -37, -189, -189, -189, 53,
	51, 22, 53, 11, 108, 53, 11, -189, -34, -79,
	-77, 77, -37, -189, -189, -189, -189, -189, -59, 29,
	32, -2, -188, -188, -55, 53, 12, 79, -44, -43,
	50, 51, -45, 50, -43, 40, 40, 119, 119, 119,
	-91, -116, -55, -39, -55, -99, -100, 243, 240, 246,
	55, 53, -166, 79, 52, 50, 134, -160, -160, 55,
	-160, 55, 55, -158, -116, 66, 57, 58, 59, -57,
	66, 247, 65, 217, 9, 134, 134, 57, 277, -146,
	223, 58, -143, -143, -142, -143, -144, 29, -144, -144,
	-144, -151, 57, -151, -148, 267, 268, -148, 58, -149,
	58, -51, -116, -128, -176, -175, -117, -181, 22, -127,
	-120, -192, 150, 125, 130, 129, 55, 124, 128, 144,
	-180, 150, 125, 126, 130, 129, 55, 119, 134, 124,
	128, 144, 133, -112, -113, 121, 22, 119, 134, 144,
	116, -128, -108, 87, 12, -122, -122, 37, 108, -51,
	-38, 11, 96, -117, -35, -33, 70, -61, -61, -189,
	-36, -132, 105, 189, 138, 187, 183, 205, 206, 195,
	221, 185, 222, -129, -132, -61, -61, -117, -61, -61,
	264, -82, 78, -37, 76, -92, 50, -93, -70, -72,
	-71, -188, -2, -88, -116, -91, -82, -97, -37, -37,
	-37, 52, -37, -188, -188, -188, -189, 53, -82, -55,
	240, 244, 245, -165, -166, -169, -168, -116, 10, 9,
	55, 55, 55, 130, -183, 273, -142, -188, 247, 54,
	-144, -144, -143, -144, 55, 105, 54, 53, 54, 185,
	185, 53, 54, 53, 52, 51, 50, 53, 79, -182,
	19, 158, 159, -191, 119, 134, -127, -116, -127, -116,
	-51, -127, -116, 126, -155, 57, -37, -55, -39, -189,
	-61, -189, -142, -142, -142, -150, -142, 174, -142, 174,
	-189, -189, -189, 53, 19, -189, 53, 19, -188, -32,
	262, -37, 27, -92, 53, -189, -189, -189, 53, 108,
	-189, -86, -89, -116, -89, -89, -89, -125, -116, -86,
	54, 53, -142, -157, 154, 155, 29, 156, -157, 134,
	193, -189, -142, -144, -143, 57, -143, 224, 224, 58,
	58, -89, -116, -51, -175, -166, 121, 20, 6, 8,
	9, 10, -116, 52, 26, -116, -80, 13, -143, 55,
	-61, -61, -61, -61, -61, -189, 57, 134, -72, 32,
	-2, -188, -116, -116, 53, 54, -189, -189, -189, -54,
	-171, -170, 51, 131, 64, 267, -168, 50, 66, 157,
	50, -158, 191, -144, -144, 54, 54, 54, 52, 52,
	-159, -116, 52, -89, -188, 124, -81, 14, 16, -189,
	-189, -189, -189, -31, 89, 267, 9, -70, -2, 108,
	-116, -170, 55, -161, 79, 57, 269, 9, 10, 52,
	-55, -89, -89, -184, 53, 51, -89, 54, -172, -173,
	144, 134, -37, -69, -189, 265, 47, 270, -93, -189,
	-116, 58, -116, -157, -157, -159, 54, 54, -185, 267,
	-116, -188, 54, -179, -189, 53, -116, 52, 37, 266,
	271, 54, -55, 274, -37, -177, -173, 32, -89, 37,
	127, -188, -189, 146, 54, 267, -51, -37, 147, 270,
	52, -189, -188, 271, -159, -61, 143, 54, -189, -189,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 583, 0, 342, 342, 342, 342, 342, 342, 0,
	83, 636, 0, 0, 0, 0, -2, 332, 333, 0,
	335, 336, 873, 873, 873, 873, 873, 0, 33, 34,
	871, 1, 3, 591, 0, 0, 346, 349, 344, 0,
	636, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	634, 634, 0, 634, 84, 0, 0, 637, 0, 632,
	0, 632, 632, 632, 0, 291, 413, 657, 658, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 0, 0, 0, 0, 874, 874,
	874, 874, 0, 874, 320, 309, 311, 312, 313, 314,
	874, 329, 330, 319, 331, 334, 337, 338, 339, 340,
	341, 27, 595, 0, 0, 583, 29, 0, 342, 347,
	348, 352, 350, 351, 343, 0, 360, 364, 0, 421,
	0, 426, 429, -2, -2, 0, 464, 465, 466, 467,
	468, 0, 0, 0, 0, 0, 0, 0, 491, 492,
	493, 494, 568, 569, 570, 571, 572, 573, 574, 575,
	431, 432, 565, 615, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 556, 0, 522, 522, 522, 522, 522,
	522, 522, 522, 0, 0, 0, 0, 0, 0, 0,
	371, 373, 374, 375, 394, 0, 396, 0, 0, 41,
	45, 0, 847, 619, -2, -2, 0, 0, 655, 656,
	-2, 768, -2, 653, 654, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	0, 95, 0, 0, 874, 0, 85, 0, 0, 0,
	0, 0, 0, 874, 0, 0, 0, 0, 0, 0,
	0, 290, 0, 292, 874, 874, 874, 874, 874, 874,
	874, 874, 301, 875, 876, 302, 303, 304, 874, 874,
	306, 0, 321, 0, 315, 28, 872, 22, 0, 0,
	592, 0, 584, 585, 588, 591, 27, 349, 0, 354,
	353, 345, 0, 361, 0, 0, 0, 0, 365, 0,
	367, 368, 0, 424, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 449, 450, 451, 452, 453, 454, 455,
	427, 0, 442, 0, 0, 0, 484, 485, 486, 487,
	488, 489, 0, 356, 27, 0, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 352, 0, 557, 0, 513,
	0, 514, 515, 516, 517, 518, 519, 520, 521, 0,
	356, 0, 0, 43, 0, 412, 0, 0, 0, 0,
	0, 0, 401, 0, 0, 404, 0, 0, 0, 0,
	395, 0, 0, 415, 814, 397, 0, 399, 400, -2,
	0, 0, 0, 39, 40, 0, 46, 847, 48, 49,
	0, 0, 0, 199, 627, 628, 629, 625, 238, 0,
	99, 193, 189, 101, 102, 103, 104, 179, 126, 148,
	149, 179, 179, 179, 179, 179, 196, 196, 196, 196,
	160, 161, 162, 163, 164, 165, 166, 0, 0, 143,
	179, 179, 179, 147, 169, 170, 171, 172, 173, 174,
	175, 176, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 181, 181, 181, 183, 183, 0, 64, 0,
	88, 0, 874, 0, 874, 0, 93, 0, 0, 257,
	0, 285, 633, 0, 874, 288, 289, 414, 659, 660,
	293, 294, 295, 296, 297, 298, 299, 300, 305, 308,
	322, 316, 317, 310, 596, 0, 0, 0, 0, 0,
	587, 589, 590, 595, 30, 352, 0, 576, 0, 0,
	0, 355, 25, 422, 423, 425, 443, 0, 445, 447,
	428, 549, 0, 551, 552, 553, 554, 555, 366, 362,
	0, 566, -2, 433, 434, 458, 459, 460, 0, 0,
	0, 0, 456, 438, 0, 469, 470, 471, 472, 473,
	474, 475, 476, 477, 478, 479, 480, 483, 533, 534,
	0, 481, 482, 490, 0, 0, 357, 358, 461, 0,
	614, 27, 0, 0, 0, 0, 0, 565, 0, 0,
	0, 0, 563, 560, 0, 0, 523, 0, 0, 0,
	0, 0, 0, 411, 419, 616, 0, 372, 390, 392,
	0, 387, 402, 403, 405, 0, 407, 0, 409, 410,
	376, 377, 378, 0, 0, 0, 0, 398, 419, 0,
	419, 42, 620, 47, 0, 0, 52, 53, 621, 622,
	623, 200, 0, 94, 239, 241, 244, 245, 246, 96,
	97, 98, 0, 224, 0, 0, 0, 0, 0, 234,
	219, 220, 106, 0, 0, 0, 117, 0, 119, 121,
	0, 105, 0, 195, 191, 190, 125, 0, 196, 196,
	179, 196, 154, 155, 199, 0, 199, 199, 199, 0,
	0, 186, 186, 146, 137, 0, 181, 139, 140, 141,
	0, 142, 0, 0, 874, 66, 0, 86, 87, 67,
	635, 68, 70, 873, 83, 0, 648, 258, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 647, 0, 0,
	284, 874, 287, 325, 0, 0, 0, 593, 594, 0,
	586, 23, 0, 630, 631, 577, 578, 369, 444, 446,
	448, 550, 0, 356, 435, 456, 439, 0, 436, 0,
	0, 430, 495, 0, 0, 463, -2, 498, 499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 0,
	561, 0, 0, 512, 524, 525, 526, 527, 608, 0,
	0, -2, 0, 0, 583, 0, 0, 0, 384, 391,
	0, 0, 385, 0, 386, 406, 408, 0, 0, 0,
	0, 382, 583, 419, 38, 50, 51, 0, 0, 57,
	201, 0, 242, 0, 0, 0, 212, 0, 0, 215,
	0, 217, 218, 0, 235, 107, 123, 109, 110, 111,
	112, 179, 114, 0, 0, 118, 120, 122, 194, 100,
	192, 0, 199, 199, 196, 199, 156, 0, 157, 158,
	159, 0, 177, 0, 144, 0, 0, 145, 0, 138,
	0, 0, 0, 65, 89, 90, 0, 73, 0, 247,
	0, 873, 0, 272, 273, 274, 275, 276, 277, 278,
	873, 0, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 873, 649, 650, 651, 652, 0,
	0, 286, 307, 0, 0, 323, 324, 597, 0, 24,
	419, 0, 363, 567, 0, 437, 0, 457, 440, 496,
	359, 0, 179, 179, 538, 179, 183, 541, 542, 179,
	544, 179, 547, 0, 0, 0, 0, 566, 0, 0,
	0, 558, 511, 564, 0, 31, 0, 608, 598, 610,
	612, 0, 27, 0, 604, 0, 591, 617, 420, 618,
	388, 0, 393, 0, 0, 0, 396, 0, 591, 37,
	54, 55, 56, 240, 243, 0, 221, 179, 0, 0,
	213, 214, 216, 0, 108, 0, 113, 0, 179, 180,
	150, 151, 199, 152, 197, 198, 196, 0, 196, 0,
	0, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 72, 0, 270, 271, 251, 0, 252, 254,
	255, 256, 0, 234, 250, 326, 327, 579, 370, 497,
	441, 500, 535, 196, 539, 540, 543, 545, 546, 548,
	502, 501, 503, 0, 0, 506, 0, 0, 0, 0,
	0, 562, 0, 32, 0, 613, -2, 0, 0, 0,
	44, 35, 0, 380, 0, 0, 0, 415, 383, 36,
	203, 0, 223, 225, 230, 231, 0, 0, 226, 234,
	0, 115, 116, 153, 199, 178, 199, 187, 188, 0,
	0, 0, 0, 0, 91, 92, 0, 74, 75, 76,
	77, 78, 0, 0, 0, 235, 581, 0, 536, 537,
	0, 0, 0, 0, 528, 510, 559, 0, 611, 0,
	-2, 0, 606, 605, 0, 389, 416, 417, 418, 379,
	202, 204, 0, 210, 0, 0, 222, 0, 232, 233,
	0, 0, 124, 167, 168, 182, 185, 419, 0, 0,
	79, 236, 0, 0, 0, 0, 26, 0, 0, 504,
	505, 507, 508, 0, 0, 0, 0, 601, 27, 0,
	381, 205, 206, 0, 211, 208, 0, 0, 0, 0,
	61, 0, 0, 81, 0, 0, 0, 85, 0, 280,
	0, 0, 582, 580, 509, 0, 0, 0, 609, -2,
	607, 207, 209, 227, 228, 0, 419, 62, 69, 0,
	237, 0, 248, 88, 279, 0, 0, 0, 529, 0,
	532, 0, 63, 0, 0, 253, 281, 0, 0, 530,
	0, 0, 80, 0, 249, 0, 0, 0, 0, 0,
	0, 82, 0, 531, 0, 0, 0, 229, 282, 283,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 275,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 276, 3, 277, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:316
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:321
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:322
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:326
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:349
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:357
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:361
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:367
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:374
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:380
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:384
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:390
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:394
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:401
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:413
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:425
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:429
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:435
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:441
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:445
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:449
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:454
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:455
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:459
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:463
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:468
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:472
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:478
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:482
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:486
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:490
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:496
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:500
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:506
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:510
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:520
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:524
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:528
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:532
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:538
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:542
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:548
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:553
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:569
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:584
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:599
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:603
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:607
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:615
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:619
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:623
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:635
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:642
		{
			yyVAL.bytes = nil
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:652
		{
			yyVAL.expr = nil
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:656
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:661
		{
			yyVAL.expr = nil
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:665
		{
			yyVAL.expr = yyDollar[4].expr
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:670
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:674
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:679
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:683
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:689
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:694
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:699
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:705
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:710
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:716
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:722
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:729
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:736
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:741
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:745
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:749
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:755
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:760
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:771
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:782
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:787
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:792
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:797
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:802
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:807
		{
			yyDollar[1].columnType.Default = NewBoolSQLVal(bool(yyDollar[3].boolVal))
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:812
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:817
		{
			yyDollar[1].columnType.Default = NewValArgWithOpt(yyDollar[3].bytes, yyDollar[4].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:822
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:827
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:832
		{
			yyDollar[1].columnType.OnUpdate = NewValArgWithOpt(yyDollar[4].bytes, yyDollar[5].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:837
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:842
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:847
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:852
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:857
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:862
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:868
		{
			yyVAL.bytes = nil
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:872
		{
			yyVAL.bytes = nil
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:878
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:883
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1001
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1005
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1009
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1013
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1017
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1029
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1033
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1037
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1041
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1045
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1049
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1053
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1057
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1061
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1065
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1069
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 168:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1074
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1080
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1084
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1088
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1092
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1096
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1100
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1104
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1108
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1114
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1119
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1124
		{
			yyVAL.optVal = nil
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1128
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1133
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1137
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1145
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1149
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 185:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1155
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1163
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1167
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1171
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1176
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1180
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1185
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1189
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1194
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1198
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1202
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1207
		{
			yyVAL.str = ""
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1211
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1215
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1220
		{
			yyVAL.str = ""
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1224
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1228
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1234
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1238
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1244
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1248
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1254
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1258
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1263
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1267
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1273
		{
			yyVAL.str = ""
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1277
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1283
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1287
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1291
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1295
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1299
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1303
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1307
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1313
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1317
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1323
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1327
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1333
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1340
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1346
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1352
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1358
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 229:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1366
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1378
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1382
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1386
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1390
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1395
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1402
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1406
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1411
		{
			yyVAL.str = ""
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1415
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1419
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1427
		{
			yyVAL.str = yyDollar[1].str
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1431
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1435
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1441
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1445
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1449
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1455
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 248:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1459
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 249:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1473
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 250:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1487
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 251:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1496
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 252:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1500
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1504
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1517
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 255:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1527
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1532
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1537
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1541
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 279:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1573
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1579
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1583
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 282:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1589
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 283:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1593
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1599
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1605
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 286:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1613
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1618
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1626
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1630
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1636
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1640
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1645
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1651
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1655
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1659
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1664
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1668
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1672
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1676
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1680
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1684
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1688
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1692
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1696
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1700
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1704
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1708
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1718
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1722
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1726
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1730
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1734
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1738
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1742
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1752
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1758
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1762
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1768
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1772
		{
			yyVAL.str = "extended "
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1778
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1782
		{
			yyVAL.str = "full "
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1788
		{
			yyVAL.str = ""
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1792
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1796
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1802
		{
			yyVAL.showFilter = nil
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1806
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1810
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1816
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1820
		{
			yyVAL.str = SessionStr
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1824
		{
			yyVAL.str = GlobalStr
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1830
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1834
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1840
		{
			yyVAL.statement = &Begin{}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1844
		{
			yyVAL.statement = &Begin{}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1850
		{
			yyVAL.statement = &Commit{}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1856
		{
			yyVAL.statement = &Rollback{}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1862
		{
			yyVAL.statement = &OtherRead{}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1866
		{
			yyVAL.statement = &OtherRead{}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1870
		{
			yyVAL.statement = &OtherRead{}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1874
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1878
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1883
		{
			setAllowComments(yylex, true)
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1887
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1893
		{
			yyVAL.bytes2 = nil
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1897
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1903
		{
			yyVAL.str = UnionStr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1907
		{
			yyVAL.str = UnionAllStr
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1911
		{
			yyVAL.str = UnionDistinctStr
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1916
		{
			yyVAL.str = ""
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1920
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1924
		{
			yyVAL.str = SQLCacheStr
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1929
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1933
		{
			yyVAL.str = DistinctStr
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1938
		{
			yyVAL.str = ""
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1942
		{
			yyVAL.str = StraightJoinHint
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1947
		{
			yyVAL.selectExprs = nil
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1951
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1957
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1961
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1967
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1971
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1975
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 363:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1979
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1984
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1988
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1992
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1999
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2004
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2008
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2014
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2018
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2028
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2032
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2036
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2042
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 379:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2046
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2052
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2056
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2062
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2066
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2079
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2083
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2087
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2091
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2097
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2099
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2103
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2105
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2109
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2111
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2114
		{
			yyVAL.empty = struct{}{}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2116
		{
			yyVAL.empty = struct{}{}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2119
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2123
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2127
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2134
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2140
		{
			yyVAL.str = JoinStr
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2144
		{
			yyVAL.str = JoinStr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2148
		{
			yyVAL.str = JoinStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2154
		{
			yyVAL.str = StraightJoinStr
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2160
		{
			yyVAL.str = LeftJoinStr
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2164
		{
			yyVAL.str = LeftJoinStr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2168
		{
			yyVAL.str = RightJoinStr
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2172
		{
			yyVAL.str = RightJoinStr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2178
		{
			yyVAL.str = NaturalJoinStr
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2182
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2192
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2196
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2202
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2206
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2211
		{
			yyVAL.indexHints = nil
		}
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2215
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2219
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2223
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2228
		{
			yyVAL.expr = nil
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2232
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2238
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2242
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2246
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2250
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2254
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2258
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2262
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2266
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2272
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2276
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2282
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2286
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2292
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2296
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2300
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2304
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2308
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2312
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2316
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2320
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 441:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2324
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2328
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2334
		{
			yyVAL.str = IsNullStr
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2338
		{
			yyVAL.str = IsNotNullStr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2342
		{
			yyVAL.str = IsTrueStr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2346
		{
			yyVAL.str = IsNotTrueStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2350
		{
			yyVAL.str = IsFalseStr
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2354
		{
			yyVAL.str = IsNotFalseStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2360
		{
			yyVAL.str = EqualStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2364
		{
			yyVAL.str = LessThanStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2368
		{
			yyVAL.str = GreaterThanStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2372
		{
			yyVAL.str = LessEqualStr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2376
		{
			yyVAL.str = GreaterEqualStr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2380
		{
			yyVAL.str = NotEqualStr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2384
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2389
		{
			yyVAL.expr = nil
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2393
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2399
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2403
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2407
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2413
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2419
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2423
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2429
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2433
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2437
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2441
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2445
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2449
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2453
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2457
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2461
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2465
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2469
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2473
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2477
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2481
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2485
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2489
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2493
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2497
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2501
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2505
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2509
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2513
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2517
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2525
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2539
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2543
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2547
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2565
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2569
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2573
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2583
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2587
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 500:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2591
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 501:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2595
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 502:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2599
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 503:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2603
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 504:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2607
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 505:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2611
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 506:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2615
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 507:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2619
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 508:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2623
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 509:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2627
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 510:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2631
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 511:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2635
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2639
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2649
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2653
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2657
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2661
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2666
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2671
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2676
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2681
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2685
		{
			yyVAL.expr = &ConvertExpr{Type: &ConvertType{Type: string(yyDollar[2].bytes)}}
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2699
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2703
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2707
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2711
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2717
		{
			yyVAL.str = ""
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2721
		{
			yyVAL.str = BooleanModeStr
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2725
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 531:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2729
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2733
		{
			yyVAL.str = QueryExpansionStr
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2739
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2743
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2749
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2753
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2757
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2761
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2765
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2769
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2775
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2779
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2783
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2787
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2791
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2795
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2799
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2803
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2809
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2813
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2817
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2821
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2825
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2829
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2833
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2838
		{
			yyVAL.expr = nil
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2842
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2847
		{
			yyVAL.str = string("")
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2851
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2857
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2861
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2867
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2872
		{
			yyVAL.expr = nil
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2876
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2882
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2886
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 567:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2890
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2896
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2900
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2904
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2908
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2912
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2916
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2920
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2924
		{
			yyVAL.expr = &NullVal{}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2930
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2939
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2943
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2948
		{
			yyVAL.exprs = nil
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2952
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2957
		{
			yyVAL.expr = nil
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2961
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2966
		{
			yyVAL.orderBy = nil
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2970
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2976
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2980
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2986
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2991
		{
			yyVAL.str = AscScr
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2995
		{
			yyVAL.str = AscScr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2999
		{
			yyVAL.str = DescScr
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3004
		{
			yyVAL.limit = nil
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3008
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3012
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3016
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3021
		{
			yyVAL.str = ""
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3025
		{
			yyVAL.str = ForUpdateStr
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3029
		{
			yyVAL.str = ShareModeStr
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3042
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3046
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3050
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3055
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3059
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 603:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3063
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3070
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3074
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3078
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3082
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3087
		{
			yyVAL.updateExprs = nil
		}
	case 609:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3091
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3097
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3101
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3107
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3111
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3117
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3123
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3133
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3137
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3143
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3149
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3153
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3159
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3163
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3167
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3174
		{
			yyVAL.bytes = []byte("charset")
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3181
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3185
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3189
		{
			yyVAL.expr = &Default{}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3198
		{
			yyVAL.byt = 0
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3200
		{
			yyVAL.byt = 1
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3203
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3205
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3208
		{
			yyVAL.str = ""
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3210
		{
			yyVAL.str = IgnoreStr
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3214
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3216
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3218
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3220
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3222
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3224
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3226
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3228
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3230
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3232
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3235
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3237
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3239
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3243
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3245
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3249
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3253
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3260
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3266
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3270
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3277
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3513
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3522
		{
			decNesting(yylex)
		}
	case 873:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3527
		{
			forceEOF(yylex)
		}
	case 874:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3532
		{
			forceEOF(yylex)
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3536
		{
			forceEOF(yylex)
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3540
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
