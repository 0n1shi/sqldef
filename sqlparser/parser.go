// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const POLICY = 57457
const UNIQUE = 57458
const KEY = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const STATUS = 57477
const VARIABLES = 57478
const RESTRICT = 57479
const CASCADE = 57480
const NO = 57481
const ACTION = 57482
const PERMISSIVE = 57483
const RESTRICTIVE = 57484
const PUBLIC = 57485
const CURRENT_USER = 57486
const SESSION_USER = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const SMALLSERIAL = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const SERIAL = 57500
const BIGINT = 57501
const BIGSERIAL = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const PRECISION = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const VARYING = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const UUID = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const JSONB = 57531
const ENUM = 57532
const GEOMETRY = 57533
const POINT = 57534
const LINESTRING = 57535
const POLYGON = 57536
const GEOMETRYCOLLECTION = 57537
const MULTIPOINT = 57538
const MULTILINESTRING = 57539
const MULTIPOLYGON = 57540
const ARRAY = 57541
const NOW = 57542
const NULLX = 57543
const AUTO_INCREMENT = 57544
const APPROXNUM = 57545
const SIGNED = 57546
const UNSIGNED = 57547
const ZEROFILL = 57548
const ZONE = 57549
const DATABASES = 57550
const TABLES = 57551
const VITESS_KEYSPACES = 57552
const VITESS_SHARDS = 57553
const VITESS_TABLETS = 57554
const VSCHEMA_TABLES = 57555
const EXTENDED = 57556
const FULL = 57557
const PROCESSLIST = 57558
const NAMES = 57559
const CHARSET = 57560
const GLOBAL = 57561
const SESSION = 57562
const ISOLATION = 57563
const LEVEL = 57564
const READ = 57565
const WRITE = 57566
const ONLY = 57567
const REPEATABLE = 57568
const COMMITTED = 57569
const UNCOMMITTED = 57570
const SERIALIZABLE = 57571
const CURRENT_TIMESTAMP = 57572
const DATABASE = 57573
const CURRENT_DATE = 57574
const CURRENT_TIME = 57575
const LOCALTIME = 57576
const LOCALTIMESTAMP = 57577
const UTC_DATE = 57578
const UTC_TIME = 57579
const UTC_TIMESTAMP = 57580
const REPLACE = 57581
const CONVERT = 57582
const CAST = 57583
const SUBSTR = 57584
const SUBSTRING = 57585
const GROUP_CONCAT = 57586
const SEPARATOR = 57587
const MATCH = 57588
const AGAINST = 57589
const BOOLEAN = 57590
const LANGUAGE = 57591
const WITH = 57592
const WITHOUT = 57593
const PARSER = 57594
const QUERY = 57595
const EXPANSION = 57596
const UNUSED = 57597
const TYPECAST = 57598

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"TYPECAST",
	"';'",
	"'['",
	"']'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	152, 324,
	153, 324,
	-2, 314,
	-1, 252,
	108, 652,
	-2, 648,
	-1, 253,
	108, 653,
	-2, 649,
	-1, 323,
	79, 824,
	-2, 58,
	-1, 324,
	79, 780,
	-2, 59,
	-1, 329,
	79, 764,
	-2, 619,
	-1, 331,
	79, 801,
	-2, 621,
	-1, 597,
	51, 41,
	53, 41,
	-2, 43,
	-1, 750,
	108, 655,
	-2, 651,
	-1, 971,
	5, 28,
	-2, 457,
	-1, 996,
	5, 27,
	-2, 594,
	-1, 1273,
	5, 28,
	-2, 595,
	-1, 1337,
	5, 27,
	-2, 597,
	-1, 1415,
	5, 28,
	-2, 598,
}

const yyPrivate = 57344

const yyLast = 12227

var yyAct = [...]int{

	253, 1405, 1367, 999, 678, 1279, 910, 257, 809, 543,
	1348, 542, 3, 1038, 1165, 282, 1193, 1290, 827, 1166,
	1080, 850, 231, 845, 1162, 589, 904, 856, 849, 259,
	315, 591, 1015, 53, 810, 88, 225, 1136, 88, 889,
	782, 779, 607, 963, 1069, 66, 1004, 1066, 328, 256,
	798, 899, 752, 476, 430, 482, 606, 322, 578, 230,
	488, 309, 88, 88, 333, 85, 863, 806, 88, 593,
	333, 497, 944, 333, 240, 319, 317, 88, 1053, 88,
	226, 227, 228, 229, 495, 88, 878, 308, 557, 246,
	310, 313, 928, 318, 493, 976, 52, 1202, 433, 255,
	244, 715, 719, 720, 1453, 927, 1434, 442, 1450, 443,
	495, 975, 1413, 974, 1393, 450, 1381, 510, 509, 519,
	520, 512, 513, 514, 515, 516, 517, 518, 511, 494,
	493, 1447, 932, 1070, 1071, 911, 714, 494, 493, 250,
	475, 926, 494, 493, 1161, 877, 495, 494, 493, 1433,
	781, 1412, 494, 493, 495, 494, 493, 494, 493, 495,
	1349, 1157, 1267, 434, 495, 1023, 1205, 1187, 1022, 495,
	456, 1024, 495, 1351, 495, 840, 1041, 1042, 1043, 68,
	83, 79, 80, 81, 1047, 1045, 279, 280, 471, 923,
	920, 921, 709, 919, 1188, 1189, 841, 842, 608, 710,
	609, 1305, 1304, 1055, 88, 880, 890, 1326, 333, 333,
	333, 333, 1297, 333, 882, 209, 1359, 956, 1217, 1216,
	333, 930, 933, 900, 57, 1256, 1254, 71, 73, 566,
	67, 224, 1356, 458, 452, 460, 1449, 1228, 1229, 219,
	1350, 1445, 72, 74, 467, 468, 1406, 333, 485, 59,
	60, 61, 62, 63, 1231, 1114, 807, 865, 1111, 1407,
	69, 1036, 1334, 457, 459, 1296, 1051, 1050, 484, 1232,
	925, 496, 866, 1031, 1200, 1443, 1240, 1372, 445, 437,
	76, 77, 77, 677, 530, 1313, 828, 830, 688, 204,
	463, 1014, 1013, 1012, 1382, 206, 924, 496, 1293, 432,
	1034, 281, 212, 208, 441, 203, 78, 1115, 88, 532,
	533, 82, 1386, 1276, 511, 88, 88, 88, 1123, 979,
	957, 333, 479, 483, 716, 865, 501, 333, 451, 713,
	881, 1391, 210, 496, 929, 214, 1048, 1225, 573, 502,
	866, 496, 1211, 1119, 313, 890, 496, 597, 739, 931,
	939, 496, 901, 885, 325, 1112, 496, 1110, 70, 496,
	829, 496, 1002, 455, 865, 327, 1046, 847, 846, 1411,
	1113, 435, 610, 544, 439, 1159, 1352, 205, 799, 866,
	986, 741, 555, 759, 559, 560, 561, 562, 563, 564,
	565, 799, 1212, 598, 681, 1355, 604, 757, 758, 756,
	534, 535, 536, 537, 538, 539, 540, 1091, 1040, 207,
	490, 215, 216, 217, 218, 222, 50, 743, 1118, 436,
	221, 220, 444, 1291, 1292, 1294, 755, 869, 940, 75,
	742, 1417, 1307, 333, 333, 744, 740, 953, 954, 955,
	745, 88, 88, 333, 1306, 88, 1075, 1073, 88, 870,
	1056, 1149, 88, 1150, 333, 333, 333, 333, 333, 333,
	333, 333, 486, 875, 1392, 867, 431, 1333, 333, 333,
	868, 684, 685, 88, 1302, 689, 1092, 1088, 692, 1242,
	1093, 1090, 1089, 1067, 1052, 74, 21, 1389, 333, 1199,
	307, 438, 88, 440, 1401, 1457, 1094, 1341, 1446, 333,
	697, 1198, 1087, 711, 447, 448, 449, 721, 1197, 327,
	327, 327, 327, 1037, 327, 1401, 1435, 1429, 475, 475,
	753, 327, 730, 872, 695, 1025, 734, 736, 737, 913,
	865, 735, 874, 873, 754, 859, 775, 864, 694, 860,
	861, 333, 235, 693, 862, 866, 1341, 1426, 499, 682,
	750, 514, 515, 516, 517, 518, 511, 786, 791, 794,
	680, 723, 1341, 1423, 800, 1341, 1422, 1341, 1403, 1363,
	746, 1341, 1364, 88, 748, 453, 88, 88, 88, 88,
	88, 446, 811, 731, 732, 1341, 475, 1362, 88, 1341,
	1342, 88, 1288, 1287, 601, 88, 1184, 475, 1275, 475,
	88, 88, 786, 808, 333, 313, 313, 313, 313, 313,
	803, 325, 1220, 1219, 796, 1214, 1215, 333, 871, 431,
	313, 1206, 327, 1214, 1213, 835, 969, 475, 612, 313,
	1000, 836, 776, 777, 602, 544, 600, 812, 789, 790,
	815, 575, 475, 751, 1126, 824, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 837, 838, 1137, 832, 833, 1001, 813, 814, 1400,
	816, 1401, 854, 784, 475, 891, 892, 893, 88, 617,
	616, 333, 1163, 333, 88, 1000, 969, 88, 574, 88,
	23, 784, 88, 333, 1271, 54, 1139, 787, 788, 1001,
	844, 906, 575, 795, 981, 1224, 978, 575, 909, 834,
	1218, 600, 575, 994, 917, 1026, 995, 934, 802, 935,
	804, 805, 936, 902, 903, 512, 513, 514, 515, 516,
	517, 518, 511, 969, 675, 327, 50, 23, 839, 969,
	1000, 1141, 23, 1146, 327, 1140, 980, 1138, 977, 1222,
	1221, 1101, 603, 1144, 717, 327, 327, 327, 327, 327,
	327, 327, 327, 1142, 1143, 750, 237, 50, 1336, 327,
	327, 1451, 753, 945, 1431, 946, 1396, 1369, 1366, 1145,
	1147, 1365, 1320, 50, 882, 905, 754, 1178, 50, 725,
	900, 1029, 749, 1005, 1006, 580, 583, 584, 585, 581,
	499, 582, 586, 327, 942, 943, 895, 483, 894, 959,
	65, 1357, 50, 907, 908, 1102, 679, 1354, 996, 1223,
	1104, 1097, 1098, 1163, 1105, 1100, 1099, 1030, 1008, 1107,
	1103, 691, 333, 683, 472, 88, 821, 1017, 819, 1019,
	1106, 822, 778, 820, 729, 1011, 1096, 1010, 985, 818,
	333, 817, 792, 792, 823, 1442, 584, 585, 792, 1432,
	1018, 1122, 1009, 1440, 313, 333, 241, 242, 941, 951,
	950, 1027, 1062, 615, 970, 454, 792, 489, 1269, 952,
	477, 1321, 1020, 272, 271, 274, 275, 276, 277, 987,
	487, 478, 273, 278, 325, 915, 690, 960, 961, 962,
	1315, 1083, 1316, 1317, 1318, 327, 588, 851, 88, 333,
	333, 489, 333, 1061, 1314, 1063, 1064, 1065, 327, 1044,
	238, 239, 949, 1057, 1058, 1227, 1060, 1032, 1033, 1035,
	948, 968, 232, 1375, 233, 54, 1374, 333, 1076, 1324,
	88, 88, 1072, 1068, 1001, 1196, 1195, 983, 88, 491,
	1395, 1394, 1383, 1074, 56, 1084, 58, 1049, 333, 712,
	883, 884, 886, 887, 888, 1085, 510, 509, 519, 520,
	512, 513, 514, 515, 516, 517, 518, 511, 1124, 896,
	897, 898, 327, 1086, 327, 580, 583, 584, 585, 581,
	1230, 582, 586, 599, 327, 1005, 1006, 51, 333, 333,
	1129, 475, 811, 1164, 1130, 474, 1, 749, 811, 1169,
	1135, 1167, 1201, 1226, 1151, 964, 1082, 1158, 327, 1263,
	475, 1095, 1186, 912, 1079, 922, 1404, 333, 750, 333,
	333, 1172, 1347, 1173, 1192, 1174, 857, 510, 509, 519,
	520, 512, 513, 514, 515, 516, 517, 518, 511, 848,
	1191, 1185, 429, 64, 1390, 1190, 510, 509, 519, 520,
	512, 513, 514, 515, 516, 517, 518, 511, 858, 855,
	618, 876, 1054, 879, 624, 622, 1160, 623, 620, 626,
	625, 1207, 1208, 621, 1210, 619, 738, 211, 333, 320,
	1148, 1175, 1176, 587, 611, 1177, 492, 333, 1179, 1209,
	1109, 1108, 918, 1117, 1132, 1133, 708, 938, 470, 88,
	213, 528, 947, 1021, 326, 333, 1170, 1152, 1153, 718,
	1155, 1156, 481, 1233, 333, 1373, 1323, 88, 984, 1244,
	554, 797, 1235, 1016, 258, 733, 270, 267, 269, 1237,
	851, 268, 724, 1241, 993, 503, 1238, 248, 312, 571,
	579, 327, 1245, 577, 576, 1007, 313, 1003, 311, 1125,
	1266, 1380, 728, 25, 55, 243, 1039, 19, 1252, 18,
	17, 20, 16, 461, 15, 14, 29, 13, 12, 333,
	11, 333, 333, 333, 88, 333, 1281, 1282, 1283, 1270,
	10, 333, 9, 8, 7, 6, 1278, 5, 4, 234,
	22, 2, 1081, 0, 0, 0, 0, 0, 1286, 1243,
	1077, 327, 1027, 327, 1295, 1284, 1059, 0, 0, 0,
	0, 0, 333, 333, 88, 333, 333, 1308, 0, 0,
	0, 333, 0, 1300, 0, 0, 0, 0, 327, 0,
	0, 333, 0, 0, 0, 1311, 0, 1312, 1128, 0,
	0, 1268, 0, 1301, 1310, 1303, 0, 0, 544, 327,
	519, 520, 512, 513, 514, 515, 516, 517, 518, 511,
	1154, 1247, 0, 0, 0, 0, 333, 333, 0, 0,
	0, 327, 0, 0, 0, 0, 1337, 1167, 0, 333,
	1325, 1335, 0, 0, 0, 0, 792, 333, 0, 1171,
	1016, 0, 792, 1346, 0, 1353, 0, 0, 0, 0,
	1358, 0, 0, 0, 333, 0, 0, 851, 0, 851,
	0, 333, 0, 0, 0, 1360, 1370, 1361, 327, 0,
	327, 1194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 333, 0, 0, 0, 0, 0, 0, 0,
	1385, 1384, 1167, 0, 0, 0, 0, 0, 1388, 0,
	0, 0, 0, 0, 0, 0, 333, 333, 1397, 0,
	333, 1398, 1399, 0, 0, 1402, 0, 1203, 0, 0,
	0, 0, 464, 465, 466, 1409, 469, 333, 0, 1234,
	0, 811, 1414, 473, 333, 0, 0, 333, 1236, 1421,
	1327, 1328, 333, 1329, 1330, 1331, 0, 333, 1427, 0,
	480, 0, 1419, 1420, 1128, 0, 1239, 0, 0, 0,
	0, 0, 0, 0, 0, 327, 1436, 0, 0, 0,
	0, 1439, 333, 0, 1438, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 88, 86, 0, 0, 223, 0,
	283, 47, 333, 0, 1454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1408, 544, 0, 0, 1249, 1250,
	247, 1251, 86, 86, 1448, 1253, 0, 1255, 86, 1264,
	1280, 851, 1280, 1280, 1280, 0, 1285, 86, 0, 86,
	0, 722, 327, 0, 0, 86, 0, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 0, 0,
	0, 0, 314, 0, 1437, 1081, 851, 0, 0, 0,
	0, 0, 0, 1280, 1309, 1289, 327, 327, 1260, 475,
	0, 0, 1319, 0, 0, 0, 1299, 0, 0, 0,
	0, 0, 1322, 0, 0, 0, 0, 0, 783, 785,
	510, 509, 519, 520, 512, 513, 514, 515, 516, 517,
	518, 511, 0, 0, 801, 510, 509, 519, 520, 512,
	513, 514, 515, 516, 517, 518, 511, 1339, 1340, 509,
	519, 520, 512, 513, 514, 515, 516, 517, 518, 511,
	1194, 0, 1455, 0, 0, 826, 0, 0, 1039, 0,
	0, 1261, 0, 0, 0, 0, 0, 676, 0, 0,
	0, 0, 0, 0, 86, 1368, 687, 0, 0, 0,
	0, 0, 1280, 0, 1131, 0, 0, 698, 699, 700,
	701, 702, 703, 704, 705, 0, 0, 0, 0, 0,
	0, 706, 707, 1387, 510, 509, 519, 520, 512, 513,
	514, 515, 516, 517, 518, 511, 0, 0, 462, 462,
	462, 462, 0, 462, 0, 0, 0, 1280, 1280, 0,
	462, 1280, 510, 509, 519, 520, 512, 513, 514, 515,
	516, 517, 518, 511, 0, 792, 0, 47, 1416, 0,
	0, 0, 0, 0, 0, 1418, 0, 0, 1368, 0,
	0, 0, 529, 1425, 0, 531, 0, 0, 1430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 86, 595, 86, 0, 0,
	0, 0, 541, 1280, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 0, 556, 558, 558, 558, 558, 558,
	558, 558, 558, 1368, 567, 568, 569, 570, 0, 0,
	0, 0, 0, 0, 0, 590, 510, 509, 519, 520,
	512, 513, 514, 515, 516, 517, 518, 511, 0, 0,
	0, 966, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 971, 972, 973, 0, 0, 0, 0, 0,
	965, 982, 0, 0, 0, 0, 988, 0, 989, 990,
	991, 992, 0, 0, 0, 23, 24, 48, 26, 27,
	510, 509, 519, 520, 512, 513, 514, 515, 516, 517,
	518, 511, 0, 0, 42, 0, 0, 0, 28, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 86, 0, 914, 86, 916, 37, 86, 0,
	0, 50, 696, 0, 0, 0, 937, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 462, 462, 462, 462, 462, 462,
	462, 462, 696, 0, 0, 0, 0, 0, 462, 462,
	30, 31, 33, 32, 35, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 43, 44, 0, 0, 45,
	46, 34, 247, 0, 0, 0, 0, 247, 247, 0,
	0, 793, 793, 247, 0, 0, 0, 793, 0, 0,
	0, 0, 38, 39, 1134, 40, 41, 0, 247, 247,
	247, 247, 47, 86, 0, 793, 86, 86, 86, 86,
	86, 0, 0, 0, 0, 0, 545, 0, 825, 0,
	0, 86, 0, 0, 0, 595, 0, 0, 0, 0,
	86, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1183, 0, 0, 0, 0, 314, 314, 314, 314,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 831, 0, 0, 0, 0, 0, 0,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1078, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 86, 0, 0, 86, 0, 86,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	1116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 696, 0, 0,
	0, 462, 0, 462, 0, 1246, 0, 0, 0, 247,
	0, 0, 1248, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1257, 0, 0, 1258, 1259, 0,
	0, 1262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1272, 1273, 1274, 0, 1277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 247, 0, 0, 0, 0, 0, 0, 0, 0,
	958, 0, 0, 505, 0, 508, 0, 247, 0, 0,
	1298, 521, 522, 523, 524, 525, 526, 527, 0, 506,
	507, 504, 510, 509, 519, 520, 512, 513, 514, 515,
	516, 517, 518, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 997, 998, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 1343, 1344, 1345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1376, 1377, 1378, 1379, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1120, 1121, 0, 0, 0, 0, 0, 0, 86, 0,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 1410, 462, 0, 0,
	696, 1415, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 793, 0, 0, 0, 0,
	1428, 793, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 646, 1444, 0, 0, 1168, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 1459, 1180, 1181, 1182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 632, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 647, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	0, 660, 661, 662, 663, 664, 665, 666, 667, 668,
	669, 0, 670, 671, 595, 672, 673, 674, 648, 649,
	650, 651, 629, 631, 0, 627, 630, 633, 1265, 644,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	645, 652, 653, 654, 655, 656, 657, 658, 659, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1168, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1371, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1168, 0, 47,
	0, 0, 0, 0, 793, 0, 418, 408, 0, 378,
	420, 355, 370, 428, 371, 372, 400, 341, 386, 144,
	367, 91, 358, 336, 364, 337, 356, 380, 111, 354,
	410, 389, 123, 426, 126, 394, 0, 165, 135, 0,
	0, 382, 412, 384, 406, 377, 401, 346, 393, 421,
	368, 397, 422, 0, 0, 0, 332, 0, 852, 853,
	0, 1424, 0, 0, 86, 103, 0, 396, 417, 366,
	399, 335, 395, 0, 339, 342, 427, 415, 361, 362,
	1028, 0, 0, 0, 0, 0, 0, 381, 385, 403,
	375, 0, 0, 0, 0, 0, 0, 0, 0, 359,
	0, 392, 0, 0, 0, 343, 340, 0, 379, 0,
	1452, 0, 345, 0, 360, 404, 0, 334, 407, 413,
	376, 190, 416, 374, 373, 151, 0, 106, 0, 169,
	115, 369, 124, 402, 419, 383, 411, 357, 365, 107,
	363, 158, 145, 181, 391, 146, 156, 127, 173, 152,
	180, 191, 192, 171, 189, 160, 99, 141, 89, 150,
	157, 0, 0, 0, 92, 170, 179, 104, 161, 95,
	177, 167, 168, 133, 119, 120, 163, 93, 94, 0,
	155, 110, 149, 114, 109, 143, 174, 175, 108, 200,
	100, 187, 188, 97, 101, 186, 140, 185, 172, 178,
	134, 131, 96, 176, 132, 130, 122, 0, 112, 116,
	147, 129, 148, 117, 137, 136, 138, 0, 142, 0,
	338, 0, 166, 183, 201, 202, 353, 414, 193, 194,
	195, 196, 0, 0, 0, 139, 102, 118, 162, 121,
	128, 154, 199, 398, 159, 105, 182, 164, 349, 352,
	347, 348, 387, 388, 423, 424, 425, 405, 344, 0,
	350, 351, 0, 409, 390, 90, 98, 125, 197, 198,
	0, 153, 113, 184, 418, 408, 0, 378, 420, 355,
	370, 428, 371, 372, 400, 341, 386, 144, 367, 91,
	358, 336, 364, 337, 356, 380, 111, 354, 410, 389,
	123, 426, 126, 394, 0, 165, 135, 0, 0, 382,
	412, 384, 406, 377, 401, 346, 393, 421, 368, 397,
	422, 0, 0, 0, 332, 0, 852, 853, 0, 0,
	0, 0, 0, 103, 0, 396, 417, 366, 399, 335,
	395, 0, 339, 342, 427, 415, 361, 362, 0, 0,
	0, 0, 0, 0, 0, 381, 385, 403, 375, 0,
	0, 0, 0, 0, 0, 0, 0, 359, 0, 392,
	0, 0, 0, 343, 340, 0, 379, 0, 0, 0,
	345, 0, 360, 404, 0, 334, 407, 413, 376, 190,
	416, 374, 373, 151, 0, 106, 0, 169, 115, 369,
	124, 402, 419, 383, 411, 357, 365, 107, 363, 158,
	145, 181, 391, 146, 156, 127, 173, 152, 180, 191,
	192, 171, 189, 160, 99, 141, 89, 150, 157, 0,
	0, 0, 92, 170, 179, 104, 161, 95, 177, 167,
	168, 133, 119, 120, 163, 93, 94, 0, 155, 110,
	149, 114, 109, 143, 174, 175, 108, 200, 100, 187,
	188, 97, 101, 186, 140, 185, 172, 178, 134, 131,
	96, 176, 132, 130, 122, 0, 112, 116, 147, 129,
	148, 117, 137, 136, 138, 0, 142, 0, 338, 0,
	166, 183, 201, 202, 353, 414, 193, 194, 195, 196,
	0, 0, 0, 139, 102, 118, 162, 121, 128, 154,
	199, 398, 159, 105, 182, 164, 349, 352, 347, 348,
	387, 388, 423, 424, 425, 405, 344, 0, 350, 351,
	0, 409, 390, 90, 98, 125, 197, 198, 0, 153,
	113, 184, 418, 408, 0, 378, 420, 355, 370, 428,
	371, 372, 400, 341, 386, 144, 367, 91, 358, 336,
	364, 337, 356, 380, 111, 354, 410, 389, 123, 426,
	126, 394, 0, 165, 135, 0, 0, 382, 412, 384,
	406, 377, 401, 346, 393, 421, 368, 397, 422, 0,
	0, 0, 332, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 396, 417, 366, 399, 335, 395, 0,
	339, 342, 427, 415, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 381, 385, 403, 375, 0, 0, 0,
	0, 0, 0, 1127, 0, 359, 0, 392, 0, 0,
	0, 343, 340, 0, 379, 0, 0, 0, 345, 0,
	360, 404, 0, 334, 407, 413, 376, 190, 416, 374,
	373, 151, 0, 106, 0, 169, 115, 369, 124, 402,
	419, 383, 411, 357, 365, 107, 363, 158, 145, 181,
	391, 146, 156, 127, 173, 152, 180, 191, 192, 171,
	189, 160, 99, 141, 89, 150, 157, 0, 0, 0,
	92, 170, 179, 104, 161, 95, 177, 167, 168, 133,
	119, 120, 163, 93, 94, 0, 155, 110, 149, 114,
	109, 143, 174, 175, 108, 200, 100, 187, 188, 97,
	101, 186, 140, 185, 172, 178, 134, 131, 96, 176,
	132, 130, 122, 0, 112, 116, 147, 129, 148, 117,
	137, 136, 138, 0, 142, 0, 338, 0, 166, 183,
	201, 202, 353, 414, 193, 194, 195, 196, 0, 0,
	0, 139, 102, 118, 162, 121, 128, 154, 199, 398,
	159, 105, 182, 164, 349, 352, 347, 348, 387, 388,
	423, 424, 425, 405, 344, 0, 350, 351, 0, 409,
	390, 90, 98, 125, 197, 198, 0, 153, 113, 184,
	418, 408, 0, 378, 420, 355, 370, 428, 371, 372,
	400, 341, 386, 144, 367, 91, 358, 336, 364, 337,
	356, 380, 111, 354, 410, 389, 123, 426, 126, 394,
	0, 165, 135, 0, 0, 382, 412, 384, 406, 377,
	401, 346, 393, 421, 368, 397, 422, 50, 0, 0,
	332, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 396, 417, 366, 399, 335, 395, 0, 339, 342,
	427, 415, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 381, 385, 403, 375, 0, 0, 0, 0, 0,
	0, 0, 0, 359, 0, 392, 0, 0, 0, 343,
	340, 0, 379, 0, 0, 0, 345, 0, 360, 404,
	0, 334, 407, 413, 376, 190, 416, 374, 373, 151,
	0, 106, 0, 169, 115, 369, 124, 402, 419, 383,
	411, 357, 365, 107, 363, 158, 145, 181, 391, 146,
	156, 127, 173, 152, 180, 191, 192, 171, 189, 160,
	99, 141, 89, 150, 157, 0, 0, 0, 92, 170,
	179, 104, 161, 95, 177, 167, 168, 133, 119, 120,
	163, 93, 94, 0, 155, 110, 149, 114, 109, 143,
	174, 175, 108, 200, 100, 187, 188, 97, 101, 186,
	140, 185, 172, 178, 134, 131, 96, 176, 132, 130,
	122, 0, 112, 116, 147, 129, 148, 117, 137, 136,
	138, 0, 142, 0, 338, 0, 166, 183, 201, 202,
	353, 414, 193, 194, 195, 196, 0, 0, 0, 139,
	102, 118, 162, 121, 128, 154, 199, 398, 159, 105,
	182, 164, 349, 352, 347, 348, 387, 388, 423, 424,
	425, 405, 344, 0, 350, 351, 0, 409, 390, 90,
	98, 125, 197, 198, 0, 153, 113, 184, 418, 408,
	0, 378, 420, 355, 370, 428, 371, 372, 400, 341,
	386, 144, 367, 91, 358, 336, 364, 337, 356, 380,
	111, 354, 410, 389, 123, 426, 126, 394, 0, 165,
	135, 0, 0, 382, 412, 384, 406, 377, 401, 346,
	393, 421, 368, 397, 422, 0, 0, 0, 252, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 396,
	417, 366, 399, 335, 395, 0, 339, 342, 427, 415,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 381,
	385, 403, 375, 0, 0, 0, 0, 0, 0, 747,
	0, 359, 0, 392, 0, 0, 0, 343, 340, 0,
	379, 0, 0, 0, 345, 0, 360, 404, 0, 334,
	407, 413, 376, 190, 416, 374, 373, 151, 0, 106,
	0, 169, 115, 369, 124, 402, 419, 383, 411, 357,
	365, 107, 363, 158, 145, 181, 391, 146, 156, 127,
	173, 152, 180, 191, 192, 171, 189, 160, 99, 141,
	89, 150, 157, 0, 0, 0, 92, 170, 179, 104,
	161, 95, 177, 167, 168, 133, 119, 120, 163, 93,
	94, 0, 155, 110, 149, 114, 109, 143, 174, 175,
	108, 200, 100, 187, 188, 97, 101, 186, 140, 185,
	172, 178, 134, 131, 96, 176, 132, 130, 122, 0,
	112, 116, 147, 129, 148, 117, 137, 136, 138, 0,
	142, 0, 338, 0, 166, 183, 201, 202, 353, 414,
	193, 194, 195, 196, 0, 0, 0, 139, 102, 118,
	162, 121, 128, 154, 199, 398, 159, 105, 182, 164,
	349, 352, 347, 348, 387, 388, 423, 424, 425, 405,
	344, 0, 350, 351, 0, 409, 390, 90, 98, 125,
	197, 198, 0, 153, 113, 184, 418, 408, 0, 378,
	420, 355, 370, 428, 371, 372, 400, 341, 386, 144,
	367, 91, 358, 336, 364, 337, 356, 380, 111, 354,
	410, 389, 123, 426, 126, 394, 0, 165, 135, 0,
	0, 382, 412, 384, 406, 377, 401, 346, 393, 421,
	368, 397, 422, 0, 0, 0, 332, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 396, 417, 366,
	399, 335, 395, 0, 339, 342, 427, 415, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 381, 385, 403,
	375, 0, 0, 0, 0, 0, 0, 0, 0, 359,
	0, 392, 0, 0, 0, 343, 340, 0, 379, 0,
	0, 0, 345, 0, 360, 404, 0, 334, 407, 413,
	376, 190, 416, 374, 373, 151, 0, 106, 0, 169,
	115, 369, 124, 402, 419, 383, 411, 357, 365, 107,
	363, 158, 145, 181, 391, 146, 156, 127, 173, 152,
	180, 191, 192, 171, 189, 160, 99, 141, 89, 150,
	157, 0, 0, 0, 92, 170, 179, 104, 161, 95,
	177, 167, 168, 133, 119, 120, 163, 93, 94, 0,
	155, 110, 149, 114, 109, 143, 174, 175, 108, 200,
	100, 187, 188, 97, 101, 186, 140, 185, 172, 178,
	134, 131, 96, 176, 132, 130, 122, 0, 112, 116,
	147, 129, 148, 117, 137, 136, 138, 0, 142, 0,
	338, 0, 166, 183, 201, 202, 353, 414, 193, 194,
	195, 196, 0, 0, 0, 139, 102, 118, 162, 121,
	128, 154, 199, 398, 159, 105, 182, 164, 349, 352,
	347, 348, 387, 388, 423, 424, 425, 405, 344, 0,
	350, 351, 0, 409, 390, 90, 98, 125, 197, 198,
	0, 153, 113, 184, 418, 408, 0, 378, 420, 355,
	370, 428, 371, 372, 400, 341, 386, 144, 367, 91,
	358, 336, 364, 337, 356, 380, 111, 354, 410, 389,
	123, 426, 126, 394, 0, 165, 135, 0, 0, 382,
	412, 384, 406, 377, 401, 346, 393, 421, 368, 397,
	422, 0, 0, 0, 252, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 396, 417, 366, 399, 335,
	395, 0, 339, 342, 427, 415, 361, 362, 0, 0,
	0, 0, 0, 0, 0, 381, 385, 403, 375, 0,
	0, 0, 0, 0, 0, 0, 0, 359, 0, 392,
	0, 0, 0, 343, 340, 0, 379, 0, 0, 0,
	345, 0, 360, 404, 0, 334, 407, 413, 376, 190,
	416, 374, 373, 151, 0, 106, 0, 169, 115, 369,
	124, 402, 419, 383, 411, 357, 365, 107, 363, 158,
	145, 181, 391, 146, 156, 127, 173, 152, 180, 191,
	192, 171, 189, 160, 99, 141, 89, 150, 157, 0,
	0, 0, 92, 170, 179, 104, 161, 95, 177, 167,
	168, 133, 119, 120, 163, 93, 94, 0, 155, 110,
	149, 114, 109, 143, 174, 175, 108, 200, 100, 187,
	188, 97, 101, 186, 140, 185, 172, 178, 134, 131,
	96, 176, 132, 130, 122, 0, 112, 116, 147, 129,
	148, 117, 137, 136, 138, 0, 142, 0, 338, 0,
	166, 183, 201, 202, 353, 414, 193, 194, 195, 196,
	0, 0, 0, 139, 102, 118, 162, 121, 128, 154,
	199, 398, 159, 105, 182, 164, 349, 352, 347, 348,
	387, 388, 423, 424, 425, 405, 344, 0, 350, 351,
	0, 409, 390, 90, 98, 125, 197, 198, 0, 153,
	113, 184, 418, 408, 0, 378, 420, 355, 370, 428,
	371, 372, 400, 341, 386, 144, 367, 91, 358, 336,
	364, 337, 356, 380, 111, 354, 410, 389, 123, 426,
	126, 394, 0, 165, 135, 0, 0, 382, 412, 384,
	406, 377, 401, 346, 393, 421, 368, 397, 422, 0,
	0, 0, 332, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 396, 417, 366, 399, 335, 395, 0,
	339, 342, 427, 415, 361, 362, 0, 0, 0, 0,
	0, 0, 0, 381, 385, 403, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 359, 0, 392, 0, 0,
	0, 343, 340, 0, 379, 0, 0, 0, 345, 0,
	360, 404, 0, 334, 407, 413, 376, 190, 416, 374,
	373, 151, 0, 106, 0, 169, 115, 369, 124, 402,
	419, 383, 411, 357, 365, 107, 363, 158, 145, 181,
	391, 146, 156, 127, 173, 152, 180, 191, 192, 171,
	189, 160, 99, 141, 89, 150, 157, 0, 0, 0,
	92, 170, 179, 104, 161, 95, 177, 167, 168, 133,
	119, 120, 163, 93, 94, 0, 155, 110, 149, 114,
	109, 143, 174, 175, 108, 200, 100, 187, 188, 97,
	330, 186, 140, 185, 172, 178, 134, 131, 96, 176,
	132, 130, 122, 0, 112, 116, 147, 129, 148, 117,
	137, 136, 138, 0, 142, 0, 338, 0, 166, 183,
	201, 202, 353, 414, 193, 194, 195, 196, 0, 0,
	0, 331, 329, 118, 162, 121, 128, 154, 199, 398,
	159, 105, 182, 164, 349, 352, 347, 348, 387, 388,
	423, 424, 425, 405, 344, 0, 350, 351, 0, 409,
	390, 90, 98, 125, 197, 198, 0, 153, 113, 184,
	418, 408, 0, 378, 420, 355, 370, 428, 371, 372,
	400, 341, 386, 144, 367, 91, 358, 336, 364, 337,
	356, 380, 111, 354, 410, 389, 123, 426, 126, 394,
	0, 165, 135, 0, 0, 382, 412, 384, 406, 377,
	401, 346, 393, 421, 368, 397, 422, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 396, 417, 366, 399, 335, 395, 0, 339, 342,
	427, 415, 361, 362, 0, 0, 0, 0, 0, 0,
	0, 381, 385, 403, 375, 0, 0, 0, 0, 0,
	0, 0, 0, 359, 0, 392, 0, 0, 0, 343,
	340, 0, 379, 0, 0, 0, 345, 0, 360, 404,
	0, 334, 407, 413, 376, 190, 416, 374, 373, 151,
	0, 106, 0, 169, 115, 369, 124, 402, 419, 383,
	411, 357, 365, 107, 363, 158, 145, 181, 391, 146,
	156, 127, 173, 152, 180, 191, 192, 171, 189, 160,
	99, 141, 89, 150, 157, 0, 0, 0, 92, 170,
	179, 104, 161, 95, 177, 167, 168, 133, 119, 120,
	163, 93, 94, 0, 155, 110, 149, 114, 109, 143,
	174, 175, 108, 200, 100, 187, 188, 97, 101, 186,
	140, 185, 172, 178, 134, 131, 96, 176, 132, 130,
	122, 0, 112, 116, 147, 129, 148, 117, 137, 136,
	138, 0, 142, 0, 338, 0, 166, 183, 201, 202,
	353, 414, 193, 194, 195, 196, 0, 0, 0, 139,
	102, 118, 162, 121, 128, 154, 199, 398, 159, 105,
	182, 164, 349, 352, 347, 348, 387, 388, 423, 424,
	425, 405, 344, 0, 350, 351, 0, 409, 390, 90,
	98, 125, 197, 198, 0, 153, 113, 184, 418, 408,
	0, 378, 420, 355, 370, 428, 371, 372, 400, 341,
	386, 144, 367, 91, 358, 336, 364, 337, 356, 380,
	111, 354, 410, 389, 123, 426, 126, 394, 0, 165,
	135, 0, 0, 382, 412, 384, 406, 377, 401, 346,
	393, 421, 368, 397, 422, 0, 0, 0, 332, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 396,
	417, 366, 399, 335, 395, 0, 339, 342, 427, 415,
	361, 362, 0, 0, 0, 0, 0, 0, 0, 381,
	385, 403, 375, 0, 0, 0, 0, 0, 0, 0,
	0, 359, 0, 392, 0, 0, 0, 343, 340, 0,
	379, 0, 0, 0, 345, 0, 360, 404, 0, 334,
	407, 413, 376, 190, 416, 374, 373, 151, 0, 106,
	0, 169, 115, 369, 124, 402, 419, 383, 411, 357,
	365, 107, 363, 158, 145, 181, 391, 146, 156, 127,
	173, 152, 180, 191, 192, 171, 189, 160, 99, 141,
	89, 150, 157, 0, 0, 0, 92, 170, 605, 104,
	161, 95, 177, 167, 168, 133, 119, 120, 163, 93,
	94, 0, 155, 110, 149, 114, 109, 143, 174, 175,
	108, 200, 100, 187, 188, 97, 330, 186, 140, 185,
	172, 178, 134, 131, 96, 176, 132, 130, 122, 0,
	112, 116, 147, 129, 148, 117, 137, 136, 138, 0,
	142, 0, 338, 0, 166, 183, 201, 202, 353, 414,
	193, 194, 195, 196, 0, 0, 0, 331, 329, 118,
	162, 121, 128, 154, 199, 398, 159, 105, 182, 164,
	349, 352, 347, 348, 387, 388, 423, 424, 425, 405,
	344, 0, 350, 351, 0, 409, 390, 90, 98, 125,
	197, 198, 0, 153, 113, 184, 418, 408, 0, 378,
	420, 355, 370, 428, 371, 372, 400, 341, 386, 144,
	367, 91, 358, 336, 364, 337, 356, 380, 111, 354,
	410, 389, 123, 426, 126, 394, 0, 165, 135, 0,
	0, 382, 412, 384, 406, 377, 401, 346, 393, 421,
	368, 397, 422, 0, 0, 0, 332, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 396, 417, 366,
	399, 335, 395, 0, 339, 342, 427, 415, 361, 362,
	0, 0, 0, 0, 0, 0, 0, 381, 385, 403,
	375, 0, 0, 0, 0, 0, 0, 0, 0, 359,
	0, 392, 0, 0, 0, 343, 340, 0, 379, 0,
	0, 0, 345, 0, 360, 404, 0, 334, 407, 413,
	376, 190, 416, 374, 373, 151, 0, 106, 0, 169,
	115, 369, 124, 402, 419, 383, 411, 357, 365, 107,
	363, 158, 145, 181, 391, 146, 156, 127, 173, 152,
	180, 191, 192, 171, 189, 160, 99, 141, 89, 150,
	157, 0, 0, 0, 92, 170, 321, 104, 161, 95,
	177, 167, 168, 133, 119, 120, 163, 93, 94, 0,
	155, 110, 149, 114, 109, 143, 174, 175, 108, 200,
	100, 187, 188, 97, 330, 186, 140, 185, 172, 178,
	134, 131, 96, 176, 132, 130, 122, 0, 112, 116,
	147, 129, 148, 117, 137, 136, 138, 0, 142, 0,
	338, 0, 166, 183, 201, 202, 353, 414, 193, 194,
	195, 196, 0, 0, 0, 331, 329, 324, 323, 121,
	128, 154, 199, 398, 159, 105, 182, 164, 349, 352,
	347, 348, 387, 388, 423, 424, 425, 405, 344, 0,
	350, 351, 0, 409, 390, 90, 98, 125, 197, 198,
	0, 153, 113, 184, 144, 0, 91, 780, 0, 254,
	0, 0, 0, 111, 251, 0, 0, 123, 293, 126,
	0, 0, 165, 135, 0, 0, 0, 0, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 252, 272, 271, 274, 275, 276, 277, 0, 0,
	103, 273, 278, 279, 280, 0, 0, 249, 265, 0,
	292, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 245, 0, 0, 0, 305, 0, 264, 0,
	0, 260, 261, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 303,
	151, 0, 106, 0, 169, 115, 0, 124, 0, 0,
	0, 0, 0, 0, 107, 0, 158, 145, 181, 0,
	146, 156, 127, 173, 152, 180, 191, 192, 171, 189,
	160, 99, 141, 89, 150, 157, 0, 0, 0, 92,
	170, 179, 104, 161, 95, 177, 167, 168, 133, 119,
	120, 163, 93, 94, 0, 155, 110, 149, 114, 109,
	143, 174, 175, 108, 200, 100, 187, 188, 97, 101,
	186, 140, 185, 172, 178, 134, 131, 96, 176, 132,
	130, 122, 0, 112, 116, 147, 129, 148, 117, 137,
	136, 138, 0, 142, 0, 0, 0, 166, 183, 201,
	202, 0, 0, 193, 194, 195, 196, 0, 0, 0,
	139, 102, 118, 162, 121, 128, 154, 199, 0, 159,
	105, 182, 164, 294, 304, 300, 301, 298, 299, 297,
	296, 295, 306, 286, 287, 288, 289, 291, 0, 290,
	90, 98, 125, 197, 198, 0, 153, 113, 184, 302,
	144, 0, 91, 0, 0, 254, 0, 0, 0, 111,
	251, 0, 0, 123, 293, 126, 0, 0, 165, 135,
	0, 0, 0, 0, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 475, 252, 272, 271,
	274, 275, 276, 277, 0, 0, 103, 273, 278, 279,
	280, 0, 0, 249, 265, 0, 292, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 0, 0,
	0, 0, 305, 0, 264, 0, 0, 260, 261, 266,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 303, 151, 0, 106, 0,
	169, 115, 0, 124, 0, 0, 0, 0, 0, 0,
	107, 0, 158, 145, 181, 0, 146, 156, 127, 173,
	152, 180, 191, 192, 171, 189, 160, 99, 141, 89,
	150, 157, 0, 0, 0, 92, 170, 179, 104, 161,
	95, 177, 167, 168, 133, 119, 120, 163, 93, 94,
	0, 155, 110, 149, 114, 109, 143, 174, 175, 108,
	200, 100, 187, 188, 97, 101, 186, 140, 185, 172,
	178, 134, 131, 96, 176, 132, 130, 122, 0, 112,
	116, 147, 129, 148, 117, 137, 136, 138, 0, 142,
	0, 0, 0, 166, 183, 201, 202, 0, 0, 193,
	194, 195, 196, 0, 0, 0, 139, 102, 118, 162,
	121, 128, 154, 199, 0, 159, 105, 182, 164, 294,
	304, 300, 301, 298, 299, 297, 296, 295, 306, 286,
	287, 288, 289, 291, 0, 290, 90, 98, 125, 197,
	198, 0, 153, 113, 184, 302, 144, 0, 91, 0,
	0, 254, 0, 0, 0, 111, 251, 0, 0, 123,
	293, 126, 0, 0, 165, 135, 0, 0, 0, 0,
	284, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 252, 272, 271, 274, 275, 276, 277,
	0, 0, 103, 273, 278, 279, 280, 0, 0, 249,
	265, 0, 292, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 245, 0, 0, 0, 305, 0,
	264, 0, 0, 260, 261, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 303, 151, 0, 106, 0, 169, 115, 0, 124,
	0, 0, 0, 0, 0, 0, 107, 0, 158, 145,
	181, 0, 146, 156, 127, 173, 152, 180, 191, 192,
	171, 189, 160, 99, 141, 89, 150, 157, 0, 0,
	0, 92, 170, 179, 104, 161, 95, 177, 167, 168,
	133, 119, 120, 163, 93, 94, 0, 155, 110, 149,
	114, 109, 143, 174, 175, 108, 200, 100, 187, 188,
	97, 101, 186, 140, 185, 172, 178, 134, 131, 96,
	176, 132, 130, 122, 0, 112, 116, 147, 129, 148,
	117, 137, 136, 138, 0, 142, 0, 0, 0, 166,
	183, 201, 202, 0, 0, 193, 194, 195, 196, 0,
	0, 0, 139, 102, 118, 162, 121, 128, 154, 199,
	0, 159, 105, 182, 164, 294, 304, 300, 301, 298,
	299, 297, 296, 295, 306, 286, 287, 288, 289, 291,
	0, 290, 90, 98, 125, 197, 198, 0, 153, 113,
	184, 302, 144, 0, 91, 0, 0, 254, 0, 0,
	0, 111, 251, 0, 0, 123, 293, 126, 0, 0,
	165, 135, 0, 0, 0, 0, 284, 285, 0, 0,
	0, 0, 0, 0, 843, 0, 50, 0, 0, 252,
	272, 271, 274, 275, 276, 277, 0, 0, 103, 273,
	278, 279, 280, 0, 0, 249, 265, 0, 292, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	0, 0, 0, 0, 305, 0, 264, 0, 0, 260,
	261, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 0, 0, 303, 151, 0,
	106, 0, 169, 115, 0, 124, 0, 0, 0, 0,
	0, 0, 107, 0, 158, 145, 181, 0, 146, 156,
	127, 173, 152, 180, 191, 192, 171, 189, 160, 99,
	141, 89, 150, 157, 0, 0, 0, 92, 170, 179,
	104, 161, 95, 177, 167, 168, 133, 119, 120, 163,
	93, 94, 0, 155, 110, 149, 114, 109, 143, 174,
	175, 108, 200, 100, 187, 188, 97, 101, 186, 140,
	185, 172, 178, 134, 131, 96, 176, 132, 130, 122,
	0, 112, 116, 147, 129, 148, 117, 137, 136, 138,
	0, 142, 0, 0, 0, 166, 183, 201, 202, 0,
	0, 193, 194, 195, 196, 0, 0, 0, 139, 102,
	118, 162, 121, 128, 154, 199, 0, 159, 105, 182,
	164, 294, 304, 300, 301, 298, 299, 297, 296, 295,
	306, 286, 287, 288, 289, 291, 23, 290, 90, 98,
	125, 197, 198, 0, 153, 113, 184, 302, 144, 0,
	91, 0, 0, 254, 0, 0, 0, 111, 251, 0,
	0, 123, 293, 126, 0, 0, 165, 135, 0, 0,
	0, 0, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 252, 272, 271, 274, 275,
	276, 277, 0, 0, 103, 273, 278, 279, 280, 0,
	0, 249, 265, 0, 292, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 0, 0, 0, 0,
	305, 0, 264, 0, 0, 260, 261, 266, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 303, 151, 0, 106, 0, 169, 115,
	0, 124, 0, 0, 0, 0, 0, 0, 107, 0,
	158, 145, 181, 0, 146, 156, 127, 173, 152, 180,
	191, 192, 171, 189, 160, 99, 141, 89, 150, 157,
	0, 0, 0, 92, 170, 179, 104, 161, 95, 177,
	167, 168, 133, 119, 120, 163, 93, 94, 0, 155,
	110, 149, 114, 109, 143, 174, 175, 108, 200, 100,
	187, 188, 97, 101, 186, 140, 185, 172, 178, 134,
	131, 96, 176, 132, 130, 122, 0, 112, 116, 147,
	129, 148, 117, 137, 136, 138, 0, 142, 0, 0,
	0, 166, 183, 201, 202, 0, 0, 193, 194, 195,
	196, 0, 0, 0, 139, 102, 118, 162, 121, 128,
	154, 199, 0, 159, 105, 182, 164, 294, 304, 300,
	301, 298, 299, 297, 296, 295, 306, 286, 287, 288,
	289, 291, 0, 290, 90, 98, 125, 197, 198, 0,
	153, 113, 184, 302, 144, 0, 91, 0, 0, 254,
	0, 0, 0, 111, 251, 0, 0, 123, 293, 126,
	0, 0, 165, 135, 0, 0, 0, 0, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 252, 272, 271, 274, 275, 276, 277, 0, 0,
	103, 273, 278, 279, 280, 0, 0, 249, 265, 0,
	292, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 0, 0, 0, 0, 305, 0, 264, 0,
	0, 260, 261, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 303,
	151, 0, 106, 0, 169, 115, 0, 124, 0, 0,
	0, 0, 0, 0, 107, 0, 158, 145, 181, 0,
	146, 156, 127, 173, 152, 180, 191, 192, 171, 189,
	160, 99, 141, 89, 150, 157, 0, 0, 0, 92,
	170, 179, 104, 161, 95, 177, 167, 168, 133, 119,
	120, 163, 93, 94, 0, 155, 110, 149, 114, 109,
	143, 174, 175, 108, 200, 100, 187, 188, 97, 101,
	186, 140, 185, 172, 178, 134, 131, 96, 176, 132,
	130, 122, 0, 112, 116, 147, 129, 148, 117, 137,
	136, 138, 0, 142, 0, 0, 0, 166, 183, 201,
	202, 0, 0, 193, 194, 195, 196, 0, 0, 0,
	139, 102, 118, 162, 121, 128, 154, 199, 0, 159,
	105, 182, 164, 294, 304, 300, 301, 298, 299, 297,
	296, 295, 306, 286, 287, 288, 289, 291, 0, 290,
	90, 98, 125, 197, 198, 0, 153, 113, 184, 302,
	144, 0, 91, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 123, 293, 126, 0, 0, 165, 135,
	0, 0, 0, 0, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 252, 272, 271,
	274, 275, 276, 277, 0, 0, 103, 273, 278, 279,
	280, 0, 0, 0, 265, 0, 292, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 0, 0,
	0, 0, 305, 0, 264, 0, 0, 260, 261, 266,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 303, 151, 0, 106, 0,
	169, 115, 0, 124, 0, 0, 0, 0, 0, 0,
	107, 0, 158, 145, 181, 1456, 146, 156, 127, 173,
	152, 180, 191, 192, 171, 189, 160, 99, 141, 89,
	150, 157, 0, 0, 0, 92, 170, 179, 104, 161,
	95, 177, 167, 168, 133, 119, 120, 163, 93, 94,
	0, 155, 110, 149, 114, 109, 143, 174, 175, 108,
	200, 100, 187, 188, 97, 101, 186, 140, 185, 172,
	178, 134, 131, 96, 176, 132, 130, 122, 0, 112,
	116, 147, 129, 148, 117, 137, 136, 138, 0, 142,
	0, 0, 0, 166, 183, 201, 202, 0, 0, 193,
	194, 195, 196, 0, 0, 0, 139, 102, 118, 162,
	121, 128, 154, 199, 0, 159, 105, 182, 164, 294,
	304, 300, 301, 298, 299, 297, 296, 295, 306, 286,
	287, 288, 289, 291, 0, 290, 90, 98, 125, 197,
	198, 0, 153, 113, 184, 302, 144, 0, 91, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 123,
	293, 126, 0, 0, 165, 135, 0, 0, 0, 0,
	284, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 252, 272, 271, 274, 275, 276, 277,
	0, 0, 103, 273, 278, 279, 280, 0, 0, 0,
	265, 0, 292, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 0, 0, 0, 0, 305, 0,
	264, 0, 0, 260, 261, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 303, 151, 0, 106, 0, 169, 115, 0, 124,
	0, 0, 0, 0, 0, 0, 107, 0, 158, 145,
	181, 0, 146, 156, 127, 173, 152, 180, 191, 192,
	171, 189, 160, 99, 141, 89, 150, 157, 0, 0,
	0, 92, 170, 179, 104, 161, 95, 177, 167, 168,
	133, 119, 120, 163, 93, 94, 0, 155, 110, 149,
	114, 109, 143, 174, 175, 108, 200, 100, 187, 188,
	97, 101, 186, 140, 185, 172, 178, 134, 131, 96,
	176, 132, 130, 122, 0, 112, 116, 147, 129, 148,
	117, 137, 136, 138, 0, 142, 0, 0, 0, 166,
	183, 201, 202, 0, 0, 193, 194, 195, 196, 0,
	0, 0, 139, 102, 118, 162, 121, 128, 154, 199,
	0, 159, 105, 182, 164, 294, 304, 300, 301, 298,
	299, 297, 296, 295, 306, 286, 287, 288, 289, 291,
	0, 290, 90, 98, 125, 197, 198, 0, 153, 113,
	184, 302, 144, 0, 91, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 123, 0, 126, 0, 0,
	165, 135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 510, 509, 519, 520, 512, 513,
	514, 515, 516, 517, 518, 511, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 0, 0, 0, 151, 0,
	106, 0, 169, 115, 0, 124, 0, 0, 0, 0,
	0, 0, 107, 0, 158, 145, 181, 0, 146, 156,
	127, 173, 152, 180, 191, 192, 171, 189, 160, 99,
	141, 89, 150, 157, 0, 0, 0, 92, 170, 179,
	104, 161, 95, 177, 167, 168, 133, 119, 120, 163,
	93, 94, 0, 155, 110, 149, 114, 109, 143, 174,
	175, 108, 200, 100, 187, 188, 97, 101, 186, 140,
	185, 172, 178, 134, 131, 96, 176, 132, 130, 122,
	0, 112, 116, 147, 129, 148, 117, 137, 136, 138,
	0, 142, 0, 0, 0, 166, 183, 201, 202, 0,
	0, 193, 194, 195, 196, 0, 0, 0, 139, 102,
	118, 162, 121, 128, 154, 199, 0, 159, 105, 182,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 98,
	125, 197, 198, 0, 153, 113, 184, 144, 0, 91,
	0, 498, 0, 0, 0, 0, 111, 0, 0, 0,
	123, 0, 126, 0, 0, 165, 135, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 332, 0, 500, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 151, 0, 106, 0, 169, 115, 0,
	124, 0, 0, 0, 0, 0, 0, 107, 0, 158,
	145, 181, 0, 146, 156, 127, 173, 152, 180, 191,
	192, 171, 189, 160, 99, 141, 89, 150, 157, 0,
	0, 0, 92, 170, 179, 104, 161, 95, 177, 167,
	168, 133, 119, 120, 163, 93, 94, 0, 155, 110,
	149, 114, 109, 143, 174, 175, 108, 200, 100, 187,
	188, 97, 101, 186, 140, 185, 172, 178, 134, 131,
	96, 176, 132, 130, 122, 0, 112, 116, 147, 129,
	148, 117, 137, 136, 138, 0, 142, 0, 0, 0,
	166, 183, 201, 202, 0, 0, 193, 194, 195, 196,
	0, 0, 0, 139, 102, 118, 162, 121, 128, 154,
	199, 0, 159, 105, 182, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 98, 125, 197, 198, 0, 153,
	113, 184, 496, 144, 0, 91, 0, 594, 0, 0,
	0, 0, 111, 0, 0, 0, 123, 0, 126, 0,
	0, 165, 135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 596, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 0, 151,
	0, 106, 0, 169, 115, 0, 124, 0, 0, 0,
	0, 0, 0, 107, 0, 158, 145, 181, 0, 146,
	156, 127, 173, 152, 180, 191, 192, 171, 189, 160,
	99, 141, 89, 150, 157, 0, 0, 0, 92, 170,
	179, 104, 161, 95, 177, 167, 168, 133, 119, 120,
	163, 93, 94, 0, 155, 110, 149, 114, 109, 143,
	174, 175, 108, 200, 100, 187, 188, 97, 101, 186,
	140, 185, 172, 178, 134, 131, 96, 176, 132, 130,
	122, 0, 112, 116, 147, 129, 148, 117, 137, 136,
	138, 0, 142, 0, 0, 0, 166, 183, 201, 202,
	0, 0, 193, 194, 195, 196, 0, 0, 0, 139,
	102, 118, 162, 121, 128, 154, 199, 0, 159, 105,
	182, 164, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 91, 0, 90,
	98, 125, 197, 198, 111, 153, 113, 184, 123, 0,
	126, 0, 0, 165, 135, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 332, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 151, 0, 106, 0, 169, 115, 0, 124, 0,
	0, 0, 0, 0, 0, 107, 0, 158, 145, 181,
	0, 146, 156, 127, 173, 152, 180, 191, 192, 171,
	189, 160, 99, 141, 89, 150, 157, 0, 0, 0,
	92, 170, 179, 104, 161, 95, 177, 167, 168, 133,
	119, 120, 163, 93, 94, 0, 155, 110, 149, 114,
	109, 143, 174, 175, 108, 200, 100, 187, 188, 97,
	101, 186, 140, 185, 172, 178, 134, 131, 96, 176,
	132, 130, 122, 0, 112, 116, 147, 129, 148, 117,
	137, 136, 138, 0, 142, 0, 0, 0, 166, 183,
	201, 202, 0, 0, 193, 194, 195, 196, 0, 0,
	0, 139, 102, 118, 162, 121, 128, 154, 199, 0,
	159, 105, 182, 164, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 0, 91,
	0, 90, 98, 125, 197, 198, 111, 153, 113, 184,
	123, 0, 126, 0, 0, 165, 135, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 151, 0, 106, 0, 169, 115, 0,
	124, 0, 0, 0, 0, 0, 0, 107, 0, 158,
	145, 181, 0, 146, 156, 127, 173, 152, 180, 191,
	192, 171, 189, 160, 99, 141, 89, 150, 157, 0,
	0, 0, 92, 170, 179, 104, 161, 95, 177, 167,
	168, 133, 119, 120, 163, 93, 94, 0, 155, 110,
	149, 114, 109, 143, 174, 175, 108, 200, 100, 187,
	188, 97, 101, 186, 140, 185, 172, 178, 134, 131,
	96, 176, 132, 130, 122, 0, 112, 116, 147, 129,
	148, 117, 137, 136, 138, 0, 142, 0, 0, 0,
	166, 183, 201, 202, 0, 0, 193, 194, 195, 196,
	0, 0, 0, 139, 102, 118, 162, 121, 128, 154,
	199, 0, 159, 105, 182, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	0, 91, 0, 90, 98, 125, 197, 198, 111, 153,
	113, 184, 123, 0, 126, 0, 0, 165, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 0, 726,
	0, 0, 727, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 151, 0, 106, 0, 169,
	115, 0, 124, 0, 0, 0, 0, 0, 0, 107,
	0, 158, 145, 181, 0, 146, 156, 127, 173, 152,
	180, 191, 192, 171, 189, 160, 99, 141, 89, 150,
	157, 0, 0, 0, 92, 170, 179, 104, 161, 95,
	177, 167, 168, 133, 119, 120, 163, 93, 94, 0,
	155, 110, 149, 114, 109, 143, 174, 175, 108, 200,
	100, 187, 188, 97, 101, 186, 140, 185, 172, 178,
	134, 131, 96, 176, 132, 130, 122, 0, 112, 116,
	147, 129, 148, 117, 137, 136, 138, 0, 142, 0,
	0, 0, 166, 183, 201, 202, 0, 0, 193, 194,
	195, 196, 0, 0, 0, 139, 102, 118, 162, 121,
	128, 154, 199, 0, 159, 105, 182, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 98, 125, 197, 198,
	0, 153, 113, 184, 144, 0, 91, 0, 0, 0,
	0, 0, 0, 111, 614, 0, 0, 123, 0, 126,
	0, 0, 165, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 0, 613, 0, 0, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	151, 0, 106, 0, 169, 115, 0, 124, 0, 0,
	0, 0, 0, 0, 107, 0, 158, 145, 181, 0,
	146, 156, 127, 173, 152, 180, 191, 192, 171, 189,
	160, 99, 141, 89, 150, 157, 0, 0, 0, 92,
	170, 179, 104, 161, 95, 177, 167, 168, 133, 119,
	120, 163, 93, 94, 0, 155, 110, 149, 114, 109,
	143, 174, 175, 108, 200, 100, 187, 188, 97, 101,
	186, 140, 185, 172, 178, 134, 131, 96, 176, 132,
	130, 122, 0, 112, 116, 147, 129, 148, 117, 137,
	136, 138, 0, 142, 0, 0, 0, 166, 183, 201,
	202, 0, 0, 193, 194, 195, 196, 0, 0, 0,
	139, 102, 118, 162, 121, 128, 154, 199, 0, 159,
	105, 182, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 98, 125, 197, 198, 0, 153, 113, 184, 144,
	0, 91, 0, 594, 0, 0, 0, 0, 111, 0,
	0, 0, 123, 0, 126, 0, 0, 165, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 596, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 151, 0, 106, 0, 169,
	115, 0, 124, 0, 0, 0, 0, 0, 0, 107,
	0, 158, 145, 181, 0, 592, 156, 127, 173, 152,
	180, 191, 192, 171, 189, 160, 99, 141, 89, 150,
	157, 0, 0, 0, 92, 170, 179, 104, 161, 95,
	177, 167, 168, 133, 119, 120, 163, 93, 94, 0,
	155, 110, 149, 114, 109, 143, 174, 175, 108, 200,
	100, 187, 188, 97, 101, 186, 140, 185, 172, 178,
	134, 131, 96, 176, 132, 130, 122, 0, 112, 116,
	147, 129, 148, 117, 137, 136, 138, 0, 142, 0,
	0, 0, 166, 183, 201, 202, 0, 0, 193, 194,
	195, 196, 0, 0, 0, 139, 102, 118, 162, 121,
	128, 154, 199, 0, 159, 105, 182, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 0, 91, 0, 90, 98, 125, 197, 198,
	111, 153, 113, 184, 123, 0, 126, 0, 0, 165,
	135, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 151, 0, 106,
	0, 169, 115, 0, 124, 0, 0, 0, 0, 0,
	0, 107, 0, 158, 145, 181, 0, 146, 156, 127,
	173, 152, 180, 191, 192, 171, 189, 160, 99, 141,
	89, 150, 157, 0, 0, 0, 92, 170, 179, 104,
	161, 95, 177, 167, 168, 133, 119, 120, 163, 93,
	94, 0, 155, 110, 149, 114, 109, 143, 174, 175,
	108, 200, 100, 187, 188, 97, 101, 186, 140, 185,
	172, 178, 134, 131, 96, 176, 132, 130, 122, 0,
	112, 116, 147, 129, 148, 117, 137, 136, 138, 0,
	142, 0, 0, 0, 166, 183, 201, 202, 0, 0,
	193, 194, 195, 196, 0, 0, 0, 139, 102, 118,
	162, 121, 128, 154, 199, 0, 159, 105, 182, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 144, 0, 91, 0, 90, 98, 125,
	197, 198, 111, 153, 113, 184, 123, 0, 126, 0,
	0, 165, 135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 596, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 0, 151,
	0, 106, 0, 169, 115, 0, 124, 0, 0, 0,
	0, 0, 0, 107, 0, 158, 145, 181, 0, 146,
	156, 127, 173, 152, 180, 191, 192, 171, 189, 160,
	99, 141, 89, 150, 157, 0, 0, 0, 92, 170,
	179, 104, 161, 95, 177, 167, 168, 133, 119, 120,
	163, 93, 94, 0, 155, 110, 149, 114, 109, 143,
	174, 175, 108, 200, 100, 187, 188, 97, 101, 186,
	140, 185, 172, 178, 134, 131, 96, 176, 132, 130,
	122, 0, 112, 116, 147, 129, 148, 117, 137, 136,
	138, 0, 142, 0, 0, 0, 166, 183, 201, 202,
	0, 0, 193, 194, 195, 196, 0, 0, 0, 139,
	102, 118, 162, 121, 128, 154, 199, 0, 159, 105,
	182, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 144, 0, 91, 0, 90,
	98, 125, 197, 198, 111, 153, 113, 184, 123, 0,
	126, 0, 0, 165, 135, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 332, 0, 500, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 151, 0, 106, 0, 169, 115, 0, 124, 0,
	0, 0, 0, 0, 0, 107, 0, 158, 145, 181,
	0, 146, 156, 127, 173, 152, 180, 191, 192, 171,
	189, 160, 99, 141, 89, 150, 157, 0, 0, 0,
	92, 170, 179, 104, 161, 95, 177, 167, 168, 133,
	119, 120, 163, 93, 94, 0, 155, 110, 149, 114,
	109, 143, 174, 175, 108, 200, 100, 187, 188, 97,
	101, 186, 140, 185, 172, 178, 134, 131, 96, 176,
	132, 130, 122, 0, 112, 116, 147, 129, 148, 117,
	137, 136, 138, 0, 142, 0, 0, 0, 166, 183,
	201, 202, 0, 0, 193, 194, 195, 196, 0, 0,
	0, 139, 102, 118, 162, 121, 128, 154, 199, 0,
	159, 105, 182, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 0, 91,
	0, 90, 98, 125, 197, 198, 111, 153, 113, 184,
	123, 0, 126, 0, 0, 165, 135, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 151, 0, 106, 0, 169, 115, 0,
	124, 0, 0, 0, 0, 0, 0, 107, 0, 158,
	145, 181, 0, 146, 156, 127, 173, 152, 180, 191,
	192, 171, 189, 160, 99, 141, 89, 150, 157, 0,
	0, 0, 92, 170, 179, 104, 161, 95, 177, 167,
	168, 133, 119, 120, 163, 93, 94, 0, 155, 110,
	149, 114, 109, 143, 174, 175, 108, 200, 100, 187,
	188, 97, 101, 186, 140, 185, 172, 178, 134, 131,
	96, 176, 132, 130, 122, 0, 112, 116, 147, 129,
	148, 117, 137, 136, 138, 0, 142, 0, 0, 0,
	166, 183, 201, 202, 0, 0, 193, 194, 195, 196,
	0, 0, 0, 139, 102, 118, 162, 121, 128, 154,
	199, 686, 159, 105, 182, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 98, 125, 197, 198, 0, 153,
	113, 184, 144, 0, 91, 0, 0, 0, 0, 0,
	572, 111, 0, 0, 0, 123, 0, 126, 0, 0,
	165, 135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 0, 0, 0, 151, 0,
	106, 0, 169, 115, 0, 124, 0, 0, 0, 0,
	0, 0, 107, 0, 158, 145, 181, 0, 146, 156,
	127, 173, 152, 180, 191, 192, 171, 189, 160, 99,
	141, 89, 150, 157, 0, 0, 0, 92, 170, 179,
	104, 161, 95, 177, 167, 168, 133, 119, 120, 163,
	93, 94, 0, 155, 110, 149, 114, 109, 143, 174,
	175, 108, 200, 100, 187, 188, 97, 101, 186, 140,
	185, 172, 178, 134, 131, 96, 176, 132, 130, 122,
	0, 112, 116, 147, 129, 148, 117, 137, 136, 138,
	0, 142, 0, 0, 0, 166, 183, 201, 202, 0,
	0, 193, 194, 195, 196, 0, 0, 0, 139, 102,
	118, 162, 121, 128, 154, 199, 0, 159, 105, 182,
	164, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 0, 0, 144, 0, 91, 0, 90, 98,
	125, 197, 198, 111, 153, 113, 184, 123, 0, 126,
	0, 0, 165, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	151, 0, 106, 0, 169, 115, 0, 124, 0, 0,
	0, 0, 0, 0, 107, 0, 158, 145, 181, 0,
	146, 156, 127, 173, 152, 180, 191, 192, 171, 189,
	160, 99, 141, 89, 150, 157, 0, 0, 0, 92,
	170, 179, 104, 161, 95, 177, 167, 168, 133, 119,
	120, 163, 93, 94, 0, 155, 110, 149, 114, 109,
	143, 174, 175, 108, 200, 100, 187, 188, 97, 101,
	186, 140, 185, 172, 178, 134, 131, 96, 176, 132,
	130, 122, 0, 112, 116, 147, 129, 148, 117, 137,
	136, 138, 0, 142, 0, 0, 0, 166, 183, 201,
	202, 0, 0, 193, 194, 195, 196, 0, 0, 0,
	139, 102, 118, 162, 121, 128, 154, 199, 0, 159,
	105, 182, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 0, 91, 0,
	90, 98, 125, 197, 198, 111, 153, 113, 184, 123,
	0, 126, 0, 0, 165, 135, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 190, 0,
	0, 0, 151, 0, 106, 0, 169, 115, 0, 124,
	0, 0, 0, 0, 0, 0, 107, 0, 158, 145,
	181, 0, 146, 156, 127, 173, 152, 180, 191, 192,
	171, 189, 160, 99, 141, 89, 150, 157, 0, 0,
	0, 92, 170, 179, 104, 161, 95, 177, 167, 168,
	133, 119, 120, 163, 93, 94, 0, 155, 110, 149,
	114, 109, 143, 174, 175, 108, 200, 100, 187, 188,
	97, 101, 186, 140, 185, 172, 178, 134, 131, 96,
	176, 132, 130, 122, 0, 112, 116, 147, 129, 148,
	117, 137, 136, 138, 0, 142, 0, 0, 0, 166,
	183, 201, 202, 0, 0, 193, 194, 195, 196, 0,
	0, 0, 139, 102, 118, 162, 121, 128, 154, 199,
	0, 159, 105, 182, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	91, 0, 90, 98, 125, 197, 198, 111, 153, 113,
	184, 123, 0, 126, 0, 0, 165, 135, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 0, 151, 0, 106, 0, 169, 115,
	0, 124, 0, 0, 0, 0, 0, 0, 107, 0,
	158, 145, 181, 0, 146, 156, 127, 173, 152, 180,
	191, 192, 171, 189, 160, 99, 141, 89, 150, 157,
	0, 0, 0, 92, 170, 179, 104, 161, 95, 177,
	167, 168, 133, 119, 120, 163, 93, 94, 0, 155,
	110, 149, 114, 109, 143, 174, 175, 108, 200, 100,
	187, 188, 97, 101, 186, 140, 185, 172, 178, 134,
	131, 96, 176, 132, 130, 122, 0, 112, 116, 147,
	129, 148, 117, 137, 136, 138, 0, 142, 0, 0,
	0, 166, 183, 201, 202, 0, 0, 193, 194, 195,
	196, 0, 0, 0, 139, 102, 118, 162, 121, 128,
	154, 199, 0, 159, 105, 182, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 0, 91, 0, 90, 98, 125, 197, 198, 111,
	153, 113, 184, 123, 0, 126, 0, 0, 165, 135,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 0, 151, 0, 106, 0,
	169, 115, 0, 124, 0, 0, 0, 0, 0, 0,
	107, 0, 158, 145, 181, 0, 146, 156, 127, 173,
	152, 180, 191, 192, 171, 189, 160, 99, 141, 89,
	150, 157, 0, 0, 0, 92, 170, 179, 104, 161,
	95, 177, 167, 168, 133, 119, 120, 163, 93, 94,
	0, 155, 110, 149, 114, 109, 143, 174, 175, 108,
	200, 100, 187, 188, 97, 101, 186, 140, 185, 172,
	178, 134, 131, 96, 176, 132, 130, 122, 0, 112,
	116, 147, 129, 148, 117, 137, 136, 138, 0, 142,
	0, 0, 0, 166, 183, 201, 202, 0, 0, 193,
	194, 195, 196, 0, 0, 0, 139, 102, 118, 162,
	121, 128, 154, 199, 0, 159, 105, 182, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 0, 91, 0, 90, 98, 125, 197,
	198, 111, 153, 113, 184, 123, 0, 126, 0, 0,
	165, 135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 252,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 0, 0, 0, 151, 0,
	106, 0, 169, 115, 0, 124, 0, 0, 0, 0,
	0, 0, 107, 0, 158, 145, 181, 0, 146, 156,
	127, 173, 152, 180, 191, 192, 171, 189, 160, 99,
	141, 89, 150, 157, 0, 0, 0, 92, 170, 179,
	104, 161, 95, 177, 167, 168, 133, 119, 120, 163,
	93, 94, 0, 155, 110, 149, 114, 109, 143, 174,
	175, 108, 200, 100, 187, 188, 97, 101, 186, 140,
	185, 172, 178, 134, 131, 96, 176, 132, 130, 122,
	0, 112, 116, 147, 129, 148, 117, 137, 136, 138,
	0, 142, 0, 0, 0, 166, 183, 201, 202, 0,
	0, 193, 194, 195, 196, 0, 0, 0, 139, 102,
	118, 162, 121, 128, 154, 199, 0, 159, 105, 182,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 98,
	125, 197, 198, 0, 153, 113, 184,
}
var yyPact = [...]int{

	1809, -1000, -178, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 920, 949, -1000, -1000, -1000, -1000, -1000, -1000, 758,
	110, 160, 188, 63, 11228, 187, 184, 11712, -1000, 66,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 731, -1000, -1000,
	-1000, -1000, -1000, 915, 918, 760, 900, 828, -1000, 6238,
	159, 9763, 10986, 5471, -1000, 564, 180, 11712, -93, 11470,
	156, 156, 11470, 156, -1000, 186, 11712, -1000, 11712, 155,
	526, 155, 155, 155, 11712, -1000, 220, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11712, 520, 846, 115, 3595, 3595, 3595,
	3595, 92, 3595, -44, 784, -1000, -1000, -1000, -1000, 3595,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	465, 861, 7006, 7006, 920, -1000, 731, -1000, -1000, -1000,
	856, -1000, -1000, 347, 938, -1000, 8029, 218, -1000, 7006,
	2132, 715, -1000, -1000, 715, -1000, -1000, 200, -1000, -1000,
	7518, 7518, 7518, 7518, 7518, 7518, 7518, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 715, -1000, 6750, 715, 715, 715, 715, 715, 715,
	715, 715, 7006, 715, 715, 715, 715, 715, 715, 715,
	715, 715, 55, 715, 715, 715, 715, 10744, 659, 755,
	-1000, -1000, -1000, 884, 8769, 9521, 11712, 583, -1000, 699,
	5203, -40, -1000, -1000, -1000, 293, 9266, -1000, -1000, -1000,
	844, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 626,
	-1000, 2413, 11470, 3595, 163, 765, 505, 323, 494, 783,
	11712, 10489, 3595, 167, 11712, 873, 781, 11712, 488, 483,
	-1000, 4935, -1000, 3595, 3595, 3595, 3595, 3595, 3595, 3595,
	3595, -1000, -1000, -1000, -1000, -1000, -1000, 3595, 3595, -1000,
	-34, -1000, 11712, -1000, -1000, -1000, -1000, 950, 240, 83,
	216, 701, -1000, 78, 915, 465, 828, 9011, 803, -1000,
	-1000, 11712, -1000, 7006, 7006, 460, 243, -1000, 10247, -1000,
	-1000, 3863, -2, 7518, 364, 310, 7518, 7518, 7518, 7518,
	7518, 7518, 7518, 7518, 7518, 7518, 7518, 7518, 7518, 7518,
	7518, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 481,
	-1000, 731, 827, 827, -1000, -1000, -1000, -1000, -1000, -1000,
	7774, 5726, 465, 620, 88, 6750, 6238, 6238, 7006, 7006,
	11954, 11954, 6238, 890, 316, 88, 11954, -1000, 465, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 6238, 6238, 6238,
	6238, 112, 11712, -1000, 11954, 9763, 9763, 9763, 9763, 9763,
	-1000, 811, 809, -1000, 798, 796, 814, 11712, -1000, 588,
	8769, 238, 715, -1000, 10005, -1000, -1000, 112, 658, 9763,
	11712, -1000, -1000, 4667, 699, -40, 685, -1000, -64, -45,
	6494, 263, -1000, -1000, -1000, -1000, 3059, 411, 399, -130,
	-17, -1000, -1000, -1000, -1000, 732, -1000, -1000, -1000, 732,
	162, 732, 732, 732, 13, 13, 13, 13, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 756, 754, -1000, 732, 732,
	732, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	738, 171, 738, 733, 733, 763, -1000, 11712, -132, 474,
	3595, 872, 3595, 11712, -1000, 77, 11712, -1000, 11712, -1000,
	-1000, 11712, 3595, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 339, -1000,
	-1000, -1000, -1000, 832, 7006, 7006, 4399, 7006, -1000, -1000,
	-1000, 861, -1000, 890, 911, -1000, 838, 837, 6238, -1000,
	-1000, -2, 24, -1000, -1000, 371, -1000, -1000, -1000, -1000,
	26, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 212, 715,
	-1000, 1676, -1000, -1000, -1000, -1000, 364, 7518, 7518, 7518,
	876, 1676, 1730, 1168, 1488, -1000, 455, 455, 213, 213,
	213, 213, 213, 631, 631, 465, -1000, -1000, -1000, 465,
	6238, 686, -1000, -1000, 7006, -1000, 465, 573, 573, 60,
	73, 695, -1000, 211, 693, 573, 6238, 303, -1000, 7006,
	465, -1000, 573, 465, 573, 573, 684, 715, -1000, 687,
	-1000, 283, 755, 743, 778, 945, -1000, -1000, -1000, -1000,
	807, -1000, 805, -1000, -1000, -1000, -1000, -1000, 174, 173,
	172, 11470, -1000, 932, 9763, 654, -1000, -1000, 685, -40,
	-75, -1000, -1000, -1000, 88, -1000, -1000, 470, 662, 2791,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 739, 777, 139,
	138, 245, 206, 458, 11470, -1000, -1000, -1000, 342, 119,
	948, -1000, 133, -1000, 132, 427, -1000, -198, -1000, -20,
	-1000, -1000, 392, 13, 13, 732, 13, -1000, -1000, 263,
	843, 263, 263, 263, 426, 426, -134, -134, -1000, -1000,
	389, 738, -1000, -1000, -1000, 388, -1000, 11712, 11470, 3595,
	-1000, 4131, -1000, -1000, -1000, -1000, -1000, 879, -1000, 352,
	696, 236, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 111, 191, -1000, 3595, -1000, 331, 11712,
	11712, 824, 88, 88, 210, -1000, -1000, 11712, -1000, -1000,
	-1000, -1000, 633, -1000, -1000, -1000, -1000, 3327, 6238, -1000,
	876, 1676, 1554, -1000, 7518, 7518, -1000, -1000, 573, 6238,
	88, -1000, -1000, -1000, 558, 396, 558, 7518, 7518, 4399,
	7518, 7518, -103, 680, 297, -1000, 7006, 68, -1000, -1000,
	-1000, -1000, -1000, 773, 11954, 715, -1000, 8527, 11470, 920,
	11954, 7006, 7006, -1000, -1000, 7006, 735, -1000, 7006, -1000,
	-1000, -1000, 715, 715, 715, 543, -1000, 920, 654, -1000,
	-1000, -1000, -73, -50, -1000, -1000, 3059, -1000, 3059, 11470,
	936, -1000, 453, 446, -1000, 434, -1000, -1000, 144, -1000,
	-1000, -176, -1000, -1000, -1000, -1000, 732, -1000, 715, -81,
	-1000, -1000, -1000, -1000, -1000, -1000, 567, 263, 263, 13,
	263, -1000, 287, -1000, -1000, -1000, 570, -1000, 562, -1000,
	34, 33, -1000, 657, -1000, 559, 698, 769, -1000, 652,
	-1000, 258, 906, 79, -1000, 135, -1000, 11470, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11470, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11712, -1000,
	-1000, -1000, -1000, -1000, 11470, 150, -1000, -1000, 422, 7006,
	-1000, -1000, -1000, 4131, -1000, 932, 9763, -1000, -1000, 465,
	-1000, 7518, 1676, 1676, -1000, -1000, 465, 732, 732, -1000,
	732, 733, -1000, -1000, 732, 52, 732, 51, 465, -1000,
	-1000, 465, 1475, 1582, -1000, 966, 1460, 715, -100, -1000,
	88, 7006, -1000, 851, 632, 641, -1000, -1000, 5982, 465,
	545, 205, 543, 915, -1000, 88, 88, 88, 11470, 88,
	11470, 11470, 11470, 8285, 11470, 915, -1000, -1000, -1000, -1000,
	2791, -1000, 539, -1000, 732, 269, 269, -1000, -1000, -1000,
	131, -1000, 19, -1000, 465, 732, -1000, -1000, -1000, 263,
	-1000, -1000, -1000, 13, 417, 13, -22, -23, 386, -1000,
	374, 11470, 11470, 11712, 4131, 3059, 164, 894, -1000, -1000,
	11470, -1000, -1000, -1000, 730, -1000, -1000, -1000, -1000, 855,
	11470, -1000, -1000, 88, 926, 649, -1000, 1676, -1000, -1000,
	152, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	7518, 7518, -1000, 7518, 7518, 7518, 465, 410, 88, 128,
	-1000, 715, -1000, -1000, 736, 11470, 11470, -1000, -1000, 536,
	-1000, 532, 532, 532, 238, -1000, -1000, 109, 11470, -1000,
	767, -1000, -1000, 329, 75, 761, 11470, 25, -1000, -1000,
	-1000, 263, -1000, 263, -1000, -1000, 533, 515, 518, 729,
	726, -1000, -1000, 11470, -1000, -1000, -1000, -1000, -1000, 725,
	11470, 715, 153, 922, 917, -1000, -1000, 947, 947, 947,
	947, 27, -1000, -1000, 943, -1000, 715, -1000, 731, 204,
	-1000, 11470, -1000, -1000, -1000, -1000, -1000, 109, -1000, 432,
	252, 407, -155, -1000, 942, -1000, -1000, 940, 724, -1000,
	-1000, -1000, -1000, -1000, 932, 11470, 11470, 618, -1000, 11470,
	514, 102, 125, -1000, 7006, 7006, -1000, -1000, -1000, -1000,
	465, 104, -158, 11954, 641, 465, 11470, -1000, -1000, -1000,
	373, -1000, -1000, 11470, 269, 269, 11470, -1000, 512, 509,
	715, 11470, 493, 765, 464, -1000, 11470, 722, 88, 638,
	-1000, 822, -117, -165, 577, -1000, -1000, -1000, -1000, -1000,
	-1000, 462, 932, -1000, 7006, -1000, -1000, -132, -1000, 102,
	831, 11470, -1000, 818, -1000, 148, -1000, 86, -1000, -1000,
	95, 444, -136, 11712, -1000, 89, -1000, -162, 719, 715,
	-167, 11470, 7262, -1000, 441, 947, 465, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1201, 11, 486, 1200, 1199, 1198, 1197, 1195, 1194,
	1193, 1192, 1190, 1180, 1178, 1177, 1176, 1175, 1174, 1172,
	1171, 1170, 1169, 1167, 224, 1165, 1164, 1163, 60, 1162,
	74, 1161, 1160, 43, 150, 41, 40, 89, 1159, 25,
	61, 90, 1158, 46, 1157, 1155, 76, 1154, 58, 1153,
	1150, 30, 1149, 1148, 18, 3, 1147, 49, 1145, 1144,
	99, 139, 1142, 1141, 1138, 1137, 1136, 1135, 52, 9,
	14, 15, 19, 1134, 29, 7, 1131, 50, 1130, 1128,
	1126, 1125, 33, 1122, 55, 1119, 22, 53, 1116, 5,
	67, 32, 24, 8, 75, 56, 1114, 34, 57, 42,
	1113, 1112, 429, 1111, 1110, 1108, 1107, 1106, 1103, 422,
	419, 1102, 1101, 1100, 48, 0, 301, 290, 71, 1096,
	45, 1094, 1410, 72, 69, 31, 1093, 36, 1173, 1090,
	1089, 1087, 37, 1086, 1085, 1083, 1080, 1079, 1078, 1077,
	1075, 1074, 330, 39, 23, 1073, 1072, 1071, 44, 51,
	26, 47, 54, 1070, 1069, 27, 1068, 17, 13, 2,
	66, 1054, 1053, 1052, 1049, 28, 21, 1036, 16, 1034,
	10, 1032, 1026, 1, 1025, 20, 1024, 6, 1023, 4,
	1021, 1016, 1013, 1012, 1006, 997, 1450, 1005, 993, 990,
	983, 956, 88,
}
var yyR1 = [...]int{

	0, 184, 185, 185, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 188,
	188, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	181, 181, 181, 182, 182, 182, 182, 182, 182, 120,
	120, 179, 179, 178, 177, 177, 176, 176, 175, 16,
	162, 163, 163, 163, 163, 152, 134, 134, 134, 134,
	134, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 183,
	183, 138, 138, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 137, 137, 137, 137, 137, 137, 139,
	139, 139, 139, 139, 135, 135, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 141, 141, 141, 141, 141,
	141, 141, 141, 151, 151, 142, 142, 149, 149, 150,
	150, 150, 148, 148, 148, 145, 145, 146, 146, 147,
	147, 147, 143, 143, 143, 144, 144, 144, 154, 154,
	171, 171, 170, 170, 170, 170, 161, 161, 167, 167,
	167, 167, 167, 167, 167, 160, 160, 169, 169, 168,
	155, 155, 155, 155, 155, 156, 157, 157, 157, 157,
	158, 158, 159, 159, 164, 164, 164, 165, 165, 165,
	166, 166, 166, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 189, 189, 190, 190,
	190, 190, 190, 190, 190, 174, 172, 172, 173, 173,
	13, 14, 14, 14, 14, 14, 15, 15, 17, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 107, 107, 104, 104, 105, 105, 106, 106,
	106, 108, 108, 108, 131, 131, 131, 19, 19, 21,
	21, 22, 23, 20, 20, 20, 20, 20, 191, 24,
	25, 25, 26, 26, 26, 30, 30, 30, 28, 28,
	29, 29, 35, 35, 34, 34, 36, 36, 36, 36,
	119, 119, 119, 118, 118, 38, 38, 39, 39, 40,
	40, 41, 41, 41, 53, 53, 89, 89, 91, 91,
	42, 42, 42, 42, 43, 43, 44, 44, 45, 45,
	126, 126, 125, 125, 125, 124, 124, 47, 47, 47,
	49, 48, 48, 48, 48, 50, 50, 52, 52, 51,
	51, 54, 54, 54, 54, 55, 55, 37, 37, 37,
	37, 37, 37, 37, 37, 103, 103, 57, 57, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 67,
	67, 67, 67, 67, 67, 58, 58, 58, 58, 58,
	58, 58, 33, 33, 68, 68, 68, 74, 69, 69,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	65, 65, 65, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 192, 192, 66,
	66, 66, 66, 31, 31, 31, 31, 31, 129, 129,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 133, 133, 133, 133, 133, 133,
	133, 78, 78, 32, 32, 76, 76, 77, 79, 79,
	75, 75, 75, 60, 60, 60, 60, 60, 60, 60,
	60, 62, 62, 62, 80, 80, 81, 81, 82, 82,
	83, 83, 84, 85, 85, 85, 86, 86, 86, 86,
	87, 87, 87, 59, 59, 59, 59, 59, 59, 88,
	88, 88, 88, 92, 92, 70, 70, 72, 72, 71,
	73, 93, 93, 97, 94, 94, 98, 98, 98, 96,
	96, 96, 121, 121, 121, 101, 101, 109, 109, 110,
	110, 102, 102, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 112, 112, 112, 113, 113, 116, 116,
	117, 117, 122, 122, 123, 123, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 186, 187, 127, 128, 128,
	128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 4, 6, 5, 5, 5, 13,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 3, 2, 3, 1, 1, 1,
	1, 2, 2, 3, 4, 3, 3, 3, 3, 4,
	3, 5, 5, 2, 3, 2, 3, 2, 3, 0,
	3, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 2, 2, 2, 2, 1,
	3, 3, 2, 1, 1, 1, 4, 4, 4, 5,
	2, 2, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 3, 3, 0, 1, 0, 1, 0,
	2, 1, 0, 3, 3, 0, 1, 2, 5, 4,
	1, 2, 2, 3, 2, 3, 0, 1, 2, 3,
	3, 2, 3, 2, 2, 1, 1, 1, 3, 2,
	1, 4, 4, 7, 7, 13, 1, 1, 2, 2,
	0, 1, 1, 3, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 11, 13, 7, 7, 7, 12,
	7, 7, 7, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 6, 4, 2, 4, 2, 2, 2,
	2, 3, 1, 1, 0, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 7, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 3, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	4, 5, 6, 4, 4, 6, 6, 6, 6, 8,
	8, 6, 8, 8, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 1, 2, 1,
	2, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -184, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 142, 115, 135, 48, 163, 164,
	166, 167, 25, 136, 137, 140, 141, -186, 8, 256,
	52, -185, 274, -82, 15, -26, 5, -24, -191, -24,
	-24, -24, -24, -24, -162, 52, -120, 120, 69, 150,
	248, 117, 132, 118, 133, -102, 120, 122, 118, 118,
	119, 120, 248, 117, 118, -51, -122, 55, -115, 157,
	264, 20, 163, 176, 177, 168, 201, 192, 265, 155,
	189, 193, 235, 64, 166, 244, 126, 138, 187, 183,
	180, 27, 207, 271, 182, 129, 208, 212, 236, 173,
	174, 238, 205, 31, 131, 266, 33, 146, 239, 210,
	204, 200, 203, 172, 199, 37, 214, 213, 215, 234,
	195, 156, 217, 184, 18, 141, 144, 209, 211, 181,
	158, 124, 148, 270, 240, 179, 145, 159, 140, 243,
	154, 167, 237, 175, 246, 36, 221, 170, 171, 128,
	164, 152, 197, 147, 185, 186, 202, 169, 198, 165,
	149, 142, 245, 222, 272, 196, 194, 190, 191, 153,
	120, 150, 151, 227, 228, 229, 230, 267, 268, 241,
	188, 223, 224, 118, 105, 193, 111, 225, 119, 31,
	148, -131, 118, -104, 151, 227, 228, 229, 230, 55,
	237, 236, 231, -122, 165, -127, -127, -127, -127, -127,
	-2, -86, 17, 16, -5, -3, -186, 6, 20, 21,
	-30, 38, 39, -25, -36, 96, -37, -122, -56, 71,
	-61, 28, 55, -115, 23, -60, -57, -75, -73, -74,
	105, 106, 94, 95, 102, 72, 107, -65, -63, -64,
	-66, 57, 56, 65, 58, 59, 60, 61, 66, 67,
	68, -116, -71, -186, 42, 43, 257, 258, 259, 260,
	263, 261, 74, 32, 247, 255, 254, 253, 251, 252,
	249, 250, 273, 123, 248, 100, 256, -102, -39, -40,
	-41, -42, -53, -74, -186, -51, 11, -46, -51, -94,
	-130, 165, -98, 237, 236, -117, -96, -116, -114, 235,
	193, 234, 55, -115, 116, 70, 22, 24, 219, 73,
	105, 16, 74, 104, 257, 111, 46, 249, 250, 247,
	259, 260, 248, 225, 28, 10, 25, 136, 21, 98,
	113, 77, 78, 139, 23, 137, 68, 19, 49, 130,
	11, 13, 14, 123, 122, 89, 119, 44, 8, 107,
	26, 86, 40, 134, 42, 87, 17, 251, 252, 30,
	263, 143, 100, 47, 34, 71, 66, 50, 242, 69,
	15, 45, 132, 88, 114, 256, 43, 117, 6, 262,
	29, 135, 41, 118, 226, 76, 121, 67, 5, 133,
	9, 48, 51, 253, 254, 255, 32, 75, 12, -163,
	-152, 55, 119, -51, 256, -116, -110, 123, -110, -116,
	-110, 118, -51, -51, -109, 123, 55, -109, -109, -109,
	-51, 108, -51, 55, 29, 248, 55, 148, 118, 149,
	120, -128, -186, -117, -128, -128, -128, 152, 153, -128,
	-105, 232, 50, -128, -187, 54, -87, 19, 30, -37,
	-122, -83, -84, -37, -82, -2, -24, 34, -28, 21,
	63, 11, -119, 70, 69, 86, 273, -118, 22, -116,
	57, 108, -37, -58, 89, 71, 87, 88, 73, 91,
	90, 101, 94, 95, 96, 97, 98, 99, 100, 92,
	93, 79, 80, 81, 82, 83, 84, 85, -103, -186,
	-74, -186, 109, 110, -61, -61, -61, -61, -61, -61,
	-61, -186, -2, -69, -37, -186, -186, -186, -186, -186,
	-186, -186, -186, -186, -78, -37, -186, -192, -186, -192,
	-192, -192, -192, -192, -192, -192, 174, -186, -186, -186,
	-186, -52, 26, -51, 29, 53, -47, -49, -48, -50,
	40, 44, 46, 41, 42, 43, 47, -126, 22, -39,
	-186, -125, 144, -124, 22, -122, 57, -51, -46, -188,
	53, 11, 51, 53, -94, 165, -95, -99, 238, 240,
	79, -121, -116, 57, 28, 29, 54, 53, -153, -134,
	-138, -135, -140, -139, -141, -136, -137, 192, 265, 189,
	193, 190, 105, 194, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 196, 207, 29, 138, 185, 186,
	187, 188, 208, 209, 210, 211, 212, 213, 214, 215,
	168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	179, 180, 182, 183, 184, -116, -128, 120, -179, 51,
	55, 71, 55, 50, -51, -51, 242, -128, 121, -51,
	23, 50, -51, 55, 55, -123, -122, -114, -128, -128,
	-128, -128, -128, -128, -128, -128, -128, -128, -107, 226,
	233, -51, 9, 89, 53, 18, 108, 53, -85, 24,
	25, -86, -187, -30, -62, -116, 58, 61, -29, 41,
	-51, -37, -37, -67, 66, 71, 67, 68, -133, 105,
	193, 138, 187, 174, 192, 197, -118, 96, -123, -117,
	-114, -61, -68, -71, -74, 62, 89, 87, 88, 73,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, 55, -60, -60, -116, -35,
	21, -34, -36, -187, 53, -187, -2, -34, -34, -37,
	-37, -75, -116, -122, -75, -34, -28, -76, -77, 75,
	-75, -187, -34, -35, -34, -34, -90, 144, -51, -93,
	-97, -75, -40, -41, -41, -40, -41, 40, 40, 40,
	45, 40, 45, 40, -48, -122, -187, -54, 48, 122,
	49, -186, -124, -90, 51, -39, -51, -98, -95, 53,
	239, 241, 242, 50, -37, -144, 105, 104, -164, -165,
	-166, -117, 57, 58, -152, -154, -155, -167, -156, 124,
	128, 129, 133, -160, 126, 119, 134, 66, 71, 28,
	50, 219, 124, 134, 133, 64, -147, 275, 216, -145,
	222, -142, 52, -142, -142, 191, -142, -142, -142, -143,
	193, -143, -143, -143, 52, 52, -142, -142, -142, -149,
	52, 181, -149, -149, -150, 52, -150, 50, 51, -51,
	-177, 267, -178, 55, -128, 23, -128, -51, -111, 116,
	113, 114, -174, 112, 219, 193, 64, 28, 15, 257,
	144, 272, 55, 145, -51, -51, -51, -128, -106, 11,
	89, 36, -37, -37, -123, -84, -87, -101, 19, 11,
	32, 32, -34, 66, 67, 68, 191, 108, -186, -68,
	-61, -61, -61, -33, 139, 70, -187, -187, -34, 53,
	-37, -187, -187, -187, 53, 51, 22, 53, 11, 108,
	53, 11, -187, -34, -79, -77, 77, -37, -187, -187,
	-187, -187, -187, -59, 29, 32, -2, -186, -186, -55,
	53, 12, 79, -44, -43, 50, 51, -45, 50, -43,
	40, 40, 119, 119, 119, -91, -116, -55, -39, -55,
	-99, -100, 243, 240, 246, 55, 53, -166, 79, 52,
	50, 134, -160, -160, 55, -160, 55, 55, -158, -116,
	66, 57, 58, 59, -57, 66, 247, 65, 217, 9,
	134, 134, 57, 276, -146, 223, 58, -143, -143, -142,
	-143, -144, 29, -144, -144, -144, -151, 57, -151, -148,
	267, 268, -148, 58, -149, 58, -51, -116, -128, -176,
	-175, -117, -181, 22, -127, -120, -190, 150, 125, 130,
	129, 55, 124, 128, 144, -180, 150, 125, 126, 130,
	129, 55, 119, 134, 124, 128, 144, 133, -112, -113,
	121, 22, 119, 134, 144, 116, -128, -108, 87, 12,
	-122, -122, 37, 108, -51, -38, 11, 96, -117, -35,
	-33, 70, -61, -61, -187, -36, -132, 105, 189, 138,
	187, 183, 205, 206, 195, 221, 185, 222, -129, 55,
	57, -132, -61, -61, -117, -61, -61, 264, -82, 78,
	-37, 76, -92, 50, -93, -70, -72, -71, -186, -2,
	-88, -116, -91, -82, -97, -37, -37, -37, 52, -37,
	-186, -186, -186, -187, 53, -82, -55, 240, 244, 245,
	-165, -166, -169, -168, -116, 10, 9, 55, 55, 55,
	130, -183, 273, -142, -186, 247, 54, -144, -144, -143,
	-144, 55, 105, 54, 53, 54, 185, 185, 53, 54,
	53, 52, 51, 50, 53, 79, -182, 19, 158, 159,
	-189, 119, 134, -127, -116, -127, -116, -51, -127, -116,
	126, -155, 57, -37, -55, -39, -187, -61, -187, -142,
	-142, -142, -150, -142, 174, -142, 174, -187, -187, -187,
	53, 19, -187, 53, 19, -186, -32, 262, -37, 27,
	-92, 53, -187, -187, -187, 53, 108, -187, -86, -89,
	-116, -89, -89, -89, -125, -116, -86, 54, 53, -142,
	-157, 154, 155, 29, 156, -157, 134, 193, -187, -142,
	-144, -143, 57, -143, 224, 224, 58, 58, -89, -116,
	-51, -175, -166, 121, 20, 6, 8, 9, 10, -116,
	52, 26, -116, -80, 13, -143, 55, -61, -61, -61,
	-61, -61, -187, 57, 134, -72, 32, -2, -186, -116,
	-116, 53, 54, -187, -187, -187, -54, -171, -170, 51,
	131, 64, 267, -168, 50, 66, 157, 50, -158, 191,
	-144, -144, 54, 54, 54, 52, 52, -159, -116, 52,
	-89, -186, 124, -81, 14, 16, -187, -187, -187, -187,
	-31, 89, 267, 9, -70, -2, 108, -116, -170, 55,
	-161, 79, 57, 269, 9, 10, 52, -55, -89, -89,
	51, 53, -89, 54, -172, -173, 144, 134, -37, -69,
	-187, 265, 47, 270, -93, -187, -116, 58, -116, -157,
	-157, -159, 54, 54, -186, -116, 54, -179, -187, 53,
	-116, 52, 37, 266, 271, 54, -55, -37, -177, -173,
	32, -89, 37, 127, -187, 146, 54, 267, -51, 147,
	270, 52, -186, 271, -159, -61, 143, 54, -187, -187,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 578, 0, 338, 338, 338, 338, 338, 338, 0,
	79, 631, 0, 0, 0, 0, -2, 328, 329, 0,
	331, 332, 867, 867, 867, 867, 867, 0, 33, 34,
	865, 1, 3, 586, 0, 0, 342, 345, 340, 0,
	631, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	629, 629, 0, 629, 80, 0, 0, 632, 0, 627,
	0, 627, 627, 627, 0, 287, 409, 652, 653, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 0, 0, 0, 0, 868, 868, 868,
	868, 0, 868, 316, 305, 307, 308, 309, 310, 868,
	325, 326, 315, 327, 330, 333, 334, 335, 336, 337,
	27, 590, 0, 0, 578, 29, 0, 338, 343, 344,
	348, 346, 347, 339, 0, 356, 360, 0, 417, 0,
	422, 425, -2, -2, 0, 460, 461, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 486, 487, 488,
	489, 563, 564, 565, 566, 567, 568, 569, 570, 427,
	428, 560, 610, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 551, 0, 517, 517, 517, 517, 517, 517,
	517, 517, 0, 0, 0, 0, 0, 0, 0, 367,
	369, 370, 371, 390, 0, 392, 0, 0, 41, 45,
	0, 841, 614, -2, -2, 0, 0, 650, 651, -2,
	763, -2, 648, 649, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 0,
	91, 0, 0, 868, 0, 81, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 288, 868, 868, 868, 868, 868, 868, 868,
	868, 297, 869, 870, 298, 299, 300, 868, 868, 302,
	0, 317, 0, 311, 28, 866, 22, 0, 0, 587,
	0, 579, 580, 583, 586, 27, 345, 0, 350, 349,
	341, 0, 357, 0, 0, 0, 0, 361, 0, 363,
	364, 0, 420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 445, 446, 447, 448, 449, 450, 451, 423, 0,
	438, 0, 0, 0, 479, 480, 481, 482, 483, 484,
	0, 352, 27, 0, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 348, 0, 552, 0, 508, 0, 509,
	510, 511, 512, 513, 514, 515, 516, 0, 352, 0,
	0, 43, 0, 408, 0, 0, 0, 0, 0, 0,
	397, 0, 0, 400, 0, 0, 0, 0, 391, 0,
	0, 411, 808, 393, 0, 395, 396, -2, 0, 0,
	0, 39, 40, 0, 46, 841, 48, 49, 0, 0,
	0, 195, 622, 623, 624, 620, 234, 0, 95, 189,
	185, 97, 98, 99, 100, 175, 122, 144, 145, 175,
	175, 175, 175, 175, 192, 192, 192, 192, 156, 157,
	158, 159, 160, 161, 162, 0, 0, 139, 175, 175,
	175, 143, 165, 166, 167, 168, 169, 170, 171, 172,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	177, 177, 177, 179, 179, 0, 64, 0, 84, 0,
	868, 0, 868, 0, 89, 0, 0, 253, 0, 281,
	628, 0, 868, 284, 285, 410, 654, 655, 289, 290,
	291, 292, 293, 294, 295, 296, 301, 304, 318, 312,
	313, 306, 591, 0, 0, 0, 0, 0, 582, 584,
	585, 590, 30, 348, 0, 571, 0, 0, 0, 351,
	25, 418, 419, 421, 439, 0, 441, 443, 424, 544,
	0, 546, 547, 548, 549, 550, 362, 358, 0, 561,
	-2, 429, 430, 454, 455, 456, 0, 0, 0, 0,
	452, 434, 0, 465, 466, 467, 468, 469, 470, 471,
	472, 473, 474, 475, 476, 0, 477, 478, 485, 0,
	0, 353, 354, 457, 0, 609, 27, 0, 0, 0,
	0, 0, 560, 0, 0, 0, 0, 558, 555, 0,
	0, 518, 0, 0, 0, 0, 0, 0, 407, 415,
	611, 0, 368, 386, 388, 0, 383, 398, 399, 401,
	0, 403, 0, 405, 406, 372, 373, 374, 0, 0,
	0, 0, 394, 415, 0, 415, 42, 615, 47, 0,
	0, 52, 53, 616, 617, 618, 196, 0, 90, 235,
	237, 240, 241, 242, 92, 93, 94, 0, 220, 0,
	0, 0, 0, 0, 230, 215, 216, 102, 0, 0,
	0, 113, 0, 115, 117, 0, 101, 0, 191, 187,
	186, 121, 0, 192, 192, 175, 192, 150, 151, 195,
	0, 195, 195, 195, 0, 0, 182, 182, 142, 133,
	0, 177, 135, 136, 137, 0, 138, 0, 0, 868,
	66, 0, 82, 83, 67, 630, 68, 70, 867, 79,
	0, 643, 254, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 0, 0, 280, 868, 283, 321, 0,
	0, 0, 588, 589, 0, 581, 23, 0, 625, 626,
	572, 573, 365, 440, 442, 444, 545, 0, 352, 431,
	452, 435, 0, 432, 0, 0, 426, 490, 0, 0,
	459, -2, 493, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 578, 0, 556, 0, 0, 507, 519,
	520, 521, 522, 603, 0, 0, -2, 0, 0, 578,
	0, 0, 0, 380, 387, 0, 0, 381, 0, 382,
	402, 404, 0, 0, 0, 0, 378, 578, 415, 38,
	50, 51, 0, 0, 57, 197, 0, 238, 0, 0,
	0, 208, 0, 0, 211, 0, 213, 214, 0, 231,
	103, 119, 105, 106, 107, 108, 175, 110, 0, 0,
	114, 116, 118, 190, 96, 188, 0, 195, 195, 192,
	195, 152, 0, 153, 154, 155, 0, 173, 0, 140,
	0, 0, 141, 0, 134, 0, 0, 0, 65, 85,
	86, 0, 73, 0, 243, 0, 867, 0, 268, 269,
	270, 271, 272, 273, 274, 867, 0, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 867,
	644, 645, 646, 647, 0, 0, 282, 303, 0, 0,
	319, 320, 592, 0, 24, 415, 0, 359, 562, 0,
	433, 0, 453, 436, 491, 355, 0, 175, 175, 533,
	175, 179, 536, 537, 175, 539, 175, 542, 0, 528,
	529, 0, 0, 0, 561, 0, 0, 0, 553, 506,
	559, 0, 31, 0, 603, 593, 605, 607, 0, 27,
	0, 599, 0, 586, 612, 416, 613, 384, 0, 389,
	0, 0, 0, 392, 0, 586, 37, 54, 55, 56,
	236, 239, 0, 217, 175, 0, 0, 209, 210, 212,
	0, 104, 0, 109, 0, 175, 176, 146, 147, 195,
	148, 193, 194, 192, 0, 192, 0, 0, 0, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 72,
	0, 266, 267, 247, 0, 248, 250, 251, 252, 0,
	230, 246, 322, 323, 574, 366, 492, 437, 495, 530,
	192, 534, 535, 538, 540, 541, 543, 497, 496, 498,
	0, 0, 501, 0, 0, 0, 0, 0, 557, 0,
	32, 0, 608, -2, 0, 0, 0, 44, 35, 0,
	376, 0, 0, 0, 411, 379, 36, 199, 0, 219,
	221, 226, 227, 0, 0, 222, 230, 0, 111, 112,
	149, 195, 174, 195, 183, 184, 0, 0, 0, 0,
	0, 87, 88, 0, 74, 75, 76, 77, 78, 0,
	0, 0, 231, 576, 0, 531, 532, 0, 0, 0,
	0, 523, 505, 554, 0, 606, 0, -2, 0, 601,
	600, 0, 385, 412, 413, 414, 375, 198, 200, 0,
	206, 0, 0, 218, 0, 228, 229, 0, 0, 120,
	163, 164, 178, 181, 415, 0, 0, 0, 232, 0,
	0, 0, 0, 26, 0, 0, 499, 500, 502, 503,
	0, 0, 0, 0, 596, 27, 0, 377, 201, 202,
	0, 207, 204, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 81, 0, 276, 0, 0, 577, 575,
	504, 0, 0, 0, 604, -2, 602, 203, 205, 223,
	224, 0, 415, 62, 0, 233, 244, 84, 275, 0,
	0, 0, 524, 0, 527, 0, 63, 0, 249, 277,
	0, 0, 525, 0, 69, 0, 245, 0, 0, 0,
	0, 0, 0, 526, 0, 0, 0, 225, 278, 279,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 274,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 275, 3, 276, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:315
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:320
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:321
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:325
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:348
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:356
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:360
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:366
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:373
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:379
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:383
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:389
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:393
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:400
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:412
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:424
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:428
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:434
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:440
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:444
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:448
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:453
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:454
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:458
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:462
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:467
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:471
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:477
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:481
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:485
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:489
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:495
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:499
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:505
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:509
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:513
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:519
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:523
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:527
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:531
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:537
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:541
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:547
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:552
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:568
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:583
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:598
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:602
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:606
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:614
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:618
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:622
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[12].expr),
			}}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:633
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:640
		{
			yyVAL.bytes = nil
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:650
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:654
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:659
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:663
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:669
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:674
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:679
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:685
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:690
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:696
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:702
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:709
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:716
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:721
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:725
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:729
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:735
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:740
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:751
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:762
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:767
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:772
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:777
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:782
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:787
		{
			yyDollar[1].columnType.Default = NewBoolSQLVal(bool(yyDollar[3].boolVal))
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:792
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:797
		{
			yyDollar[1].columnType.Default = NewValArgWithOpt(yyDollar[3].bytes, yyDollar[4].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:802
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:807
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:812
		{
			yyDollar[1].columnType.OnUpdate = NewValArgWithOpt(yyDollar[4].bytes, yyDollar[5].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:817
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:822
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:827
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:832
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:837
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:842
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:848
		{
			yyVAL.bytes = nil
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:852
		{
			yyVAL.bytes = nil
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:858
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:863
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1001
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1005
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1009
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1013
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1017
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1029
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1033
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1037
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1041
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1045
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1049
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1054
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1060
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1064
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1068
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1072
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1076
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1080
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1084
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1088
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1094
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1099
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1104
		{
			yyVAL.optVal = nil
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1108
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1113
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1117
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1125
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1129
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1135
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1143
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1147
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1151
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1156
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1160
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1165
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1169
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1174
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1178
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1182
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1187
		{
			yyVAL.str = ""
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1191
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1195
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1200
		{
			yyVAL.str = ""
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1204
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1208
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1214
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1218
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1224
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1228
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1234
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1238
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1243
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1247
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1253
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1257
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1263
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1267
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1271
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1275
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1279
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1283
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1287
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1293
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1297
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1303
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1307
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1313
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1320
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1326
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1332
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1338
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 225:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1346
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1358
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1362
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1366
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1370
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1375
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1382
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1386
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1391
		{
			yyVAL.str = ""
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1395
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1399
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1407
		{
			yyVAL.str = yyDollar[1].str
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1411
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1415
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1421
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1425
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1429
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 243:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1435
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1439
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 245:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1453
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 246:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1467
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 247:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1476
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 248:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1480
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1484
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 250:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1497
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 251:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1507
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 252:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1512
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1517
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1521
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 275:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1553
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1559
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1563
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 278:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1569
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 279:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1573
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1579
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1585
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1593
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1598
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1606
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1610
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1616
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1620
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1625
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1631
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1635
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1639
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1644
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1648
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1652
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1656
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1660
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1664
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1668
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1672
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1676
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1680
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1684
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1688
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1698
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1702
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1706
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1710
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1714
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1718
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1722
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1732
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1738
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1742
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1748
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1752
		{
			yyVAL.str = "extended "
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1758
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1762
		{
			yyVAL.str = "full "
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1768
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1772
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1776
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1782
		{
			yyVAL.showFilter = nil
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1786
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1790
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1796
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1800
		{
			yyVAL.str = SessionStr
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1804
		{
			yyVAL.str = GlobalStr
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1810
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1814
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1820
		{
			yyVAL.statement = &Begin{}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1824
		{
			yyVAL.statement = &Begin{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1830
		{
			yyVAL.statement = &Commit{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1836
		{
			yyVAL.statement = &Rollback{}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1842
		{
			yyVAL.statement = &OtherRead{}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1846
		{
			yyVAL.statement = &OtherRead{}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1850
		{
			yyVAL.statement = &OtherRead{}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1854
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1858
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1863
		{
			setAllowComments(yylex, true)
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1867
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1873
		{
			yyVAL.bytes2 = nil
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1877
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1883
		{
			yyVAL.str = UnionStr
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1887
		{
			yyVAL.str = UnionAllStr
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1891
		{
			yyVAL.str = UnionDistinctStr
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1896
		{
			yyVAL.str = ""
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1900
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1904
		{
			yyVAL.str = SQLCacheStr
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1909
		{
			yyVAL.str = ""
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1913
		{
			yyVAL.str = DistinctStr
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1918
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1922
		{
			yyVAL.str = StraightJoinHint
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1927
		{
			yyVAL.selectExprs = nil
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1931
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1937
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1941
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1947
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1951
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1955
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 359:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1959
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1964
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1968
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1972
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1979
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1984
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1988
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1994
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1998
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2008
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2012
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2016
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2022
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2026
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2032
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2036
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2042
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2046
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2059
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2063
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2067
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2071
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2077
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2079
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2083
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2085
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2089
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2091
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2094
		{
			yyVAL.empty = struct{}{}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2096
		{
			yyVAL.empty = struct{}{}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2099
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2103
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2107
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2114
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2120
		{
			yyVAL.str = JoinStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2124
		{
			yyVAL.str = JoinStr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2128
		{
			yyVAL.str = JoinStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2134
		{
			yyVAL.str = StraightJoinStr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2140
		{
			yyVAL.str = LeftJoinStr
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2144
		{
			yyVAL.str = LeftJoinStr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2148
		{
			yyVAL.str = RightJoinStr
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2152
		{
			yyVAL.str = RightJoinStr
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2158
		{
			yyVAL.str = NaturalJoinStr
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2162
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2172
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2176
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2182
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2186
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2191
		{
			yyVAL.indexHints = nil
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2195
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2199
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2203
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2208
		{
			yyVAL.expr = nil
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2212
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2218
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2222
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2226
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2230
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2234
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2238
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2242
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2246
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2252
		{
			yyVAL.str = ""
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2256
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2262
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2266
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2272
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2276
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2280
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2284
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 433:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2288
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2292
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2296
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 436:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2300
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2304
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2308
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2314
		{
			yyVAL.str = IsNullStr
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2318
		{
			yyVAL.str = IsNotNullStr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2322
		{
			yyVAL.str = IsTrueStr
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2326
		{
			yyVAL.str = IsNotTrueStr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2330
		{
			yyVAL.str = IsFalseStr
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2334
		{
			yyVAL.str = IsNotFalseStr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2340
		{
			yyVAL.str = EqualStr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2344
		{
			yyVAL.str = LessThanStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2348
		{
			yyVAL.str = GreaterThanStr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2352
		{
			yyVAL.str = LessEqualStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2356
		{
			yyVAL.str = GreaterEqualStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2360
		{
			yyVAL.str = NotEqualStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2364
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2369
		{
			yyVAL.expr = nil
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2373
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2379
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2383
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2387
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2393
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2399
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2403
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2409
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2413
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2417
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2421
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2425
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2429
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2433
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2437
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2441
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2445
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2449
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2453
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2457
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2461
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2465
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2469
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2473
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2477
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2481
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2485
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2489
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2493
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2501
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2515
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2519
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2523
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2541
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2545
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 492:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2549
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2559
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2563
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2567
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 496:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2571
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 497:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2575
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 498:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2579
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 499:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2583
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 500:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2587
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 501:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2591
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 502:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2595
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 503:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2599
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 504:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2603
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 505:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2607
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2611
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2615
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2625
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2629
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2633
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2637
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2642
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2647
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2652
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2657
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2661
		{
			yyVAL.expr = &ConvertExpr{Type: &ConvertType{Type: string(yyDollar[2].bytes)}}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2675
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2679
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2683
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2687
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2693
		{
			yyVAL.str = ""
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2697
		{
			yyVAL.str = BooleanModeStr
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2701
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 526:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2705
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2709
		{
			yyVAL.str = QueryExpansionStr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2715
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2719
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2725
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2729
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2733
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2737
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2741
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2745
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2751
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2755
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2759
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2763
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2767
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2771
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2775
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2779
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2785
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2789
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2793
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2797
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2801
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2805
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2809
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2814
		{
			yyVAL.expr = nil
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2818
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2823
		{
			yyVAL.str = string("")
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2827
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2833
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2837
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2843
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2848
		{
			yyVAL.expr = nil
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2852
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2858
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2862
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 562:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2866
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2872
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2876
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2880
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2884
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2888
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2892
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2896
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2900
		{
			yyVAL.expr = &NullVal{}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2906
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2915
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2919
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2924
		{
			yyVAL.exprs = nil
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2928
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2933
		{
			yyVAL.expr = nil
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2937
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2942
		{
			yyVAL.orderBy = nil
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2946
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2952
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2956
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2962
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2967
		{
			yyVAL.str = AscScr
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2971
		{
			yyVAL.str = AscScr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2975
		{
			yyVAL.str = DescScr
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2980
		{
			yyVAL.limit = nil
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2984
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2988
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2992
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2997
		{
			yyVAL.str = ""
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3001
		{
			yyVAL.str = ForUpdateStr
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3005
		{
			yyVAL.str = ShareModeStr
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3018
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3022
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3026
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3031
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3035
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 598:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3039
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3046
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3050
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3054
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 602:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3058
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3063
		{
			yyVAL.updateExprs = nil
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3067
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3073
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3077
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3083
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3087
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3093
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3099
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3109
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3113
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3119
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3125
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3129
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3135
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3139
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3143
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3150
		{
			yyVAL.bytes = []byte("charset")
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3157
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3161
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3165
		{
			yyVAL.expr = &Default{}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3174
		{
			yyVAL.byt = 0
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3176
		{
			yyVAL.byt = 1
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3179
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3181
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3184
		{
			yyVAL.str = ""
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3186
		{
			yyVAL.str = IgnoreStr
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3190
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3192
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3194
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3196
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3198
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3200
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3202
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3204
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3206
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3208
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3211
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3213
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3215
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3219
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3221
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3225
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3229
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3236
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3242
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3246
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3253
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3488
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3497
		{
			decNesting(yylex)
		}
	case 867:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3502
		{
			forceEOF(yylex)
		}
	case 868:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3507
		{
			forceEOF(yylex)
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3511
		{
			forceEOF(yylex)
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3515
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
