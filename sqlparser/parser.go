// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const POLICY = 57457
const UNIQUE = 57458
const KEY = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const STATUS = 57477
const VARIABLES = 57478
const RESTRICT = 57479
const CASCADE = 57480
const NO = 57481
const ACTION = 57482
const PERMISSIVE = 57483
const RESTRICTIVE = 57484
const PUBLIC = 57485
const CURRENT_USER = 57486
const SESSION_USER = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const SMALLSERIAL = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const SERIAL = 57500
const BIGINT = 57501
const BIGSERIAL = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const PRECISION = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const VARYING = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const UUID = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const JSONB = 57531
const ENUM = 57532
const GEOMETRY = 57533
const POINT = 57534
const LINESTRING = 57535
const POLYGON = 57536
const GEOMETRYCOLLECTION = 57537
const MULTIPOINT = 57538
const MULTILINESTRING = 57539
const MULTIPOLYGON = 57540
const ARRAY = 57541
const NOW = 57542
const NULLX = 57543
const AUTO_INCREMENT = 57544
const APPROXNUM = 57545
const SIGNED = 57546
const UNSIGNED = 57547
const ZEROFILL = 57548
const ZONE = 57549
const DATABASES = 57550
const TABLES = 57551
const VITESS_KEYSPACES = 57552
const VITESS_SHARDS = 57553
const VITESS_TABLETS = 57554
const VSCHEMA_TABLES = 57555
const EXTENDED = 57556
const FULL = 57557
const PROCESSLIST = 57558
const NAMES = 57559
const CHARSET = 57560
const GLOBAL = 57561
const SESSION = 57562
const ISOLATION = 57563
const LEVEL = 57564
const READ = 57565
const WRITE = 57566
const ONLY = 57567
const REPEATABLE = 57568
const COMMITTED = 57569
const UNCOMMITTED = 57570
const SERIALIZABLE = 57571
const CURRENT_TIMESTAMP = 57572
const DATABASE = 57573
const CURRENT_DATE = 57574
const CURRENT_TIME = 57575
const LOCALTIME = 57576
const LOCALTIMESTAMP = 57577
const UTC_DATE = 57578
const UTC_TIME = 57579
const UTC_TIMESTAMP = 57580
const REPLACE = 57581
const CONVERT = 57582
const CAST = 57583
const SUBSTR = 57584
const SUBSTRING = 57585
const GROUP_CONCAT = 57586
const SEPARATOR = 57587
const MATCH = 57588
const AGAINST = 57589
const BOOLEAN = 57590
const LANGUAGE = 57591
const WITH = 57592
const WITHOUT = 57593
const PARSER = 57594
const QUERY = 57595
const EXPANSION = 57596
const UNUSED = 57597
const TYPECAST = 57598
const CHECK = 57599

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	152, 330,
	153, 330,
	-2, 320,
	-1, 254,
	108, 659,
	-2, 655,
	-1, 255,
	108, 660,
	-2, 656,
	-1, 325,
	79, 833,
	-2, 58,
	-1, 326,
	79, 789,
	-2, 59,
	-1, 331,
	79, 771,
	-2, 626,
	-1, 333,
	79, 810,
	-2, 628,
	-1, 619,
	51, 41,
	53, 41,
	-2, 43,
	-1, 752,
	108, 662,
	-2, 658,
	-1, 977,
	5, 28,
	-2, 462,
	-1, 1002,
	5, 27,
	-2, 601,
	-1, 1277,
	5, 28,
	-2, 602,
	-1, 1342,
	5, 27,
	-2, 604,
	-1, 1422,
	5, 28,
	-2, 605,
}

const yyPrivate = 57344

const yyLast = 12345

var yyAct = [...]int{

	255, 1373, 917, 258, 688, 1283, 1412, 259, 1294, 1005,
	546, 816, 1353, 1169, 1044, 1075, 1170, 1197, 284, 857,
	896, 1086, 613, 545, 3, 852, 233, 834, 863, 1166,
	465, 911, 53, 611, 856, 88, 817, 1021, 88, 777,
	1142, 788, 227, 330, 969, 66, 1010, 629, 317, 906,
	785, 1072, 804, 754, 478, 484, 432, 324, 628, 870,
	813, 600, 88, 88, 335, 615, 569, 490, 88, 257,
	335, 232, 574, 335, 498, 242, 575, 88, 321, 88,
	951, 319, 560, 85, 1059, 88, 228, 229, 230, 231,
	52, 311, 1447, 512, 327, 310, 522, 522, 1206, 885,
	1467, 246, 515, 516, 517, 518, 519, 512, 261, 1444,
	522, 320, 312, 1463, 1420, 1399, 435, 1076, 1077, 1268,
	1459, 918, 1432, 1443, 1161, 444, 1271, 445, 506, 436,
	509, 1209, 1419, 452, 787, 1191, 524, 525, 526, 527,
	528, 529, 530, 847, 507, 508, 505, 511, 510, 520,
	521, 513, 514, 515, 516, 517, 518, 519, 512, 884,
	473, 522, 83, 79, 80, 81, 1192, 1193, 848, 849,
	315, 1387, 511, 510, 520, 521, 513, 514, 515, 516,
	517, 518, 519, 512, 1310, 630, 522, 631, 1267, 477,
	511, 510, 520, 521, 513, 514, 515, 516, 517, 518,
	519, 512, 463, 1309, 522, 1061, 88, 887, 897, 719,
	335, 335, 335, 335, 1029, 335, 720, 1028, 1331, 1364,
	1030, 889, 335, 808, 1221, 511, 510, 520, 521, 513,
	514, 515, 516, 517, 518, 519, 512, 1220, 888, 522,
	458, 1302, 1260, 1258, 1264, 477, 907, 1361, 1301, 335,
	1462, 1354, 226, 1457, 454, 1232, 1233, 469, 470, 1413,
	1120, 814, 487, 1414, 1356, 523, 523, 1117, 1339, 486,
	513, 514, 515, 516, 517, 518, 519, 512, 1297, 523,
	522, 511, 510, 520, 521, 513, 514, 515, 516, 517,
	518, 519, 512, 82, 1235, 522, 872, 1204, 1300, 57,
	1057, 477, 1056, 460, 283, 462, 1037, 1454, 1244, 1236,
	88, 873, 252, 1378, 1020, 447, 439, 88, 88, 88,
	77, 1019, 1318, 335, 59, 60, 61, 62, 63, 335,
	523, 1355, 698, 459, 461, 835, 837, 511, 510, 520,
	521, 513, 514, 515, 516, 517, 518, 519, 512, 1388,
	1418, 522, 1042, 327, 687, 523, 897, 76, 595, 77,
	892, 1047, 1048, 1049, 1118, 533, 1116, 619, 329, 1053,
	1051, 281, 282, 523, 437, 908, 1040, 441, 1018, 1119,
	562, 563, 564, 565, 566, 567, 568, 434, 511, 510,
	520, 521, 513, 514, 515, 516, 517, 518, 519, 512,
	620, 626, 522, 1295, 1296, 1298, 443, 205, 523, 836,
	78, 1121, 723, 466, 467, 468, 872, 471, 535, 536,
	1392, 1280, 1129, 985, 475, 315, 963, 726, 502, 946,
	453, 873, 495, 457, 497, 335, 335, 970, 854, 853,
	872, 805, 1397, 88, 88, 335, 1215, 88, 497, 523,
	88, 496, 495, 1229, 88, 873, 335, 335, 335, 335,
	335, 335, 335, 335, 523, 1125, 1008, 1357, 497, 632,
	335, 335, 1163, 691, 1360, 88, 520, 521, 513, 514,
	515, 516, 517, 518, 519, 512, 438, 761, 522, 50,
	335, 694, 695, 477, 88, 699, 1216, 707, 702, 1046,
	335, 759, 760, 758, 281, 282, 647, 947, 496, 495,
	643, 729, 730, 731, 329, 329, 329, 329, 433, 329,
	523, 1054, 982, 721, 755, 497, 329, 50, 496, 495,
	981, 492, 980, 751, 705, 1165, 446, 757, 1424, 488,
	1124, 805, 740, 992, 335, 497, 752, 1312, 496, 495,
	75, 1052, 1311, 500, 1081, 1079, 496, 495, 440, 1062,
	442, 797, 800, 1398, 733, 497, 778, 806, 779, 496,
	495, 523, 792, 497, 748, 537, 538, 539, 540, 541,
	542, 543, 872, 750, 1338, 1307, 497, 866, 1246, 871,
	780, 867, 868, 1073, 1058, 88, 869, 873, 88, 88,
	88, 88, 88, 1395, 818, 782, 783, 744, 746, 747,
	88, 309, 745, 88, 756, 1203, 1202, 88, 449, 450,
	451, 1201, 88, 88, 802, 21, 335, 329, 960, 961,
	962, 1407, 1471, 634, 1346, 1458, 792, 1043, 686, 335,
	1031, 810, 920, 815, 1407, 1445, 477, 697, 1439, 477,
	476, 1346, 1436, 1346, 1430, 842, 327, 523, 708, 709,
	710, 711, 712, 713, 714, 715, 725, 1346, 1429, 858,
	831, 843, 716, 717, 68, 781, 898, 899, 900, 704,
	840, 237, 839, 844, 793, 794, 845, 703, 88, 819,
	801, 335, 822, 335, 88, 692, 861, 88, 690, 88,
	455, 724, 88, 335, 448, 248, 315, 315, 315, 315,
	315, 820, 821, 433, 823, 1369, 913, 496, 495, 1346,
	1410, 315, 71, 73, 809, 67, 811, 812, 1346, 1370,
	315, 909, 910, 1408, 497, 1407, 916, 72, 74, 685,
	329, 1368, 924, 1346, 477, 941, 1210, 942, 1006, 329,
	943, 1346, 1347, 1292, 1291, 69, 1132, 751, 1188, 477,
	329, 329, 329, 329, 329, 329, 329, 329, 1279, 477,
	752, 1097, 1224, 1223, 329, 329, 790, 755, 1218, 1219,
	1218, 1217, 1167, 952, 596, 1006, 953, 274, 273, 276,
	277, 278, 279, 841, 735, 622, 275, 280, 975, 602,
	605, 606, 607, 603, 500, 604, 608, 329, 597, 1011,
	1012, 1275, 965, 975, 477, 597, 477, 753, 790, 477,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 639, 638, 1002, 1007, 335,
	1098, 1094, 88, 623, 1099, 1096, 1095, 597, 784, 74,
	1023, 23, 1025, 70, 23, 1007, 991, 335, 798, 798,
	1100, 54, 1228, 1222, 798, 1032, 1093, 756, 987, 1015,
	1226, 1225, 335, 959, 1000, 1024, 1033, 1001, 846, 597,
	1050, 984, 211, 624, 975, 622, 625, 858, 890, 891,
	893, 894, 895, 921, 1026, 923, 1006, 50, 689, 975,
	50, 798, 1265, 727, 50, 944, 221, 903, 904, 905,
	986, 1063, 1064, 23, 1066, 88, 335, 335, 1464, 335,
	1078, 974, 1067, 983, 1069, 1070, 1071, 1038, 1039, 1041,
	329, 1441, 1402, 1375, 1372, 1362, 1371, 989, 1325, 1341,
	481, 485, 239, 329, 335, 889, 912, 88, 88, 1087,
	315, 1182, 907, 1035, 1074, 88, 206, 503, 1080, 50,
	1011, 1012, 208, 1082, 335, 914, 915, 1359, 1090, 214,
	210, 902, 1091, 511, 510, 520, 521, 513, 514, 515,
	516, 517, 518, 519, 512, 901, 65, 522, 50, 1227,
	1167, 547, 1036, 1014, 1134, 329, 701, 329, 693, 212,
	558, 474, 216, 1130, 335, 335, 739, 329, 818, 1017,
	1016, 1136, 1168, 828, 818, 1135, 1158, 1141, 829, 826,
	1171, 1154, 1162, 1155, 827, 825, 824, 1173, 1453, 752,
	1442, 329, 1128, 335, 1190, 335, 335, 830, 1177, 606,
	607, 1451, 1176, 1178, 207, 602, 605, 606, 607, 603,
	948, 604, 608, 491, 1195, 958, 1189, 243, 244, 957,
	479, 1273, 1068, 858, 637, 858, 489, 1194, 456, 1326,
	922, 480, 966, 967, 968, 700, 209, 1089, 217, 218,
	219, 220, 224, 610, 240, 241, 1213, 223, 222, 1211,
	1212, 491, 1214, 956, 335, 1231, 234, 1381, 1380, 235,
	54, 955, 1329, 335, 510, 520, 521, 513, 514, 515,
	516, 517, 518, 519, 512, 88, 1007, 522, 493, 1084,
	1320, 335, 1321, 1322, 1323, 1200, 1199, 1401, 1400, 1389,
	335, 1065, 1055, 88, 1319, 1237, 722, 56, 732, 58,
	1092, 1248, 1234, 1022, 1239, 621, 1122, 51, 1, 1431,
	1245, 1406, 1205, 1230, 1088, 1101, 523, 919, 1242, 1085,
	1134, 329, 929, 1241, 1411, 1352, 1249, 1196, 864, 855,
	431, 64, 1396, 865, 862, 640, 1045, 883, 1060, 1256,
	886, 646, 644, 335, 645, 335, 335, 335, 88, 335,
	1285, 1286, 1287, 642, 648, 335, 789, 791, 1274, 641,
	213, 741, 742, 322, 1282, 609, 633, 494, 1115, 1299,
	1288, 1114, 807, 925, 1033, 1123, 1290, 718, 945, 472,
	1083, 329, 215, 329, 531, 858, 335, 335, 88, 335,
	335, 1313, 954, 1027, 328, 335, 1174, 728, 1306, 1305,
	1308, 315, 483, 1379, 1328, 335, 990, 557, 329, 1317,
	1316, 803, 260, 743, 547, 272, 269, 795, 796, 1087,
	858, 271, 833, 270, 734, 999, 285, 47, 329, 504,
	250, 314, 593, 601, 599, 1330, 1315, 598, 1013, 1107,
	335, 335, 1009, 1138, 1139, 313, 523, 1131, 1270, 1386,
	329, 1207, 1340, 335, 1171, 738, 1156, 1157, 25, 1159,
	1160, 335, 1342, 55, 245, 798, 19, 18, 1175, 1022,
	1358, 798, 17, 20, 47, 1363, 1351, 16, 1365, 335,
	15, 14, 238, 876, 29, 13, 335, 12, 316, 11,
	10, 1376, 1366, 9, 1367, 8, 7, 329, 851, 329,
	1198, 6, 5, 1108, 4, 877, 236, 335, 1110, 1103,
	1104, 22, 1111, 1106, 1105, 1390, 2, 1113, 1109, 882,
	1171, 874, 0, 0, 0, 1394, 875, 1391, 1112, 0,
	0, 0, 335, 335, 1102, 0, 335, 1404, 1405, 0,
	1403, 1409, 1253, 1254, 0, 1255, 0, 0, 0, 1257,
	0, 1259, 1416, 335, 0, 0, 0, 818, 1238, 0,
	335, 1421, 0, 335, 1428, 0, 0, 1240, 335, 1426,
	1427, 0, 1434, 0, 335, 1437, 0, 0, 0, 879,
	0, 0, 0, 0, 0, 1243, 1143, 0, 881, 880,
	949, 950, 972, 485, 329, 0, 973, 1293, 0, 1446,
	1449, 0, 335, 977, 978, 979, 1450, 1452, 1304, 0,
	1251, 0, 988, 0, 0, 88, 0, 994, 0, 1145,
	995, 996, 997, 998, 0, 335, 1468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 464, 464, 464, 464,
	0, 464, 0, 0, 0, 0, 0, 1284, 464, 1284,
	1284, 1284, 0, 1289, 0, 0, 976, 0, 0, 329,
	0, 0, 0, 1460, 1147, 47, 1152, 0, 1146, 0,
	1144, 993, 0, 0, 878, 0, 1150, 0, 0, 0,
	532, 0, 0, 534, 0, 0, 1148, 1149, 0, 0,
	1284, 1314, 0, 329, 329, 0, 0, 0, 0, 1324,
	0, 0, 1151, 1153, 0, 0, 0, 0, 0, 1327,
	544, 0, 548, 549, 550, 551, 552, 553, 554, 555,
	556, 0, 559, 561, 561, 561, 561, 561, 561, 561,
	561, 0, 589, 590, 591, 592, 0, 1332, 1333, 482,
	1334, 1335, 1336, 612, 1344, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1198, 0, 0,
	0, 0, 0, 0, 0, 1045, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 225, 0, 0,
	0, 0, 0, 1374, 0, 1140, 0, 0, 0, 0,
	1284, 0, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 86, 86, 0, 0, 0, 0, 86, 0, 0,
	0, 1393, 0, 0, 0, 0, 86, 0, 86, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 1187, 0, 0, 0, 1284, 1284, 0, 0,
	1284, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 798, 0, 0, 1423, 1164, 0,
	0, 0, 464, 0, 1425, 0, 0, 1374, 0, 0,
	0, 464, 1433, 1179, 1180, 0, 0, 1181, 1440, 0,
	1183, 0, 464, 464, 464, 464, 464, 464, 464, 464,
	1137, 0, 0, 0, 0, 0, 464, 464, 0, 0,
	0, 0, 0, 0, 0, 0, 1284, 0, 0, 0,
	511, 510, 520, 521, 513, 514, 515, 516, 517, 518,
	519, 512, 0, 0, 522, 0, 0, 0, 0, 1374,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1469,
	0, 0, 0, 0, 0, 86, 1250, 0, 0, 0,
	0, 0, 0, 1252, 0, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 0, 1261, 1262, 1263, 0, 0,
	1266, 0, 971, 0, 0, 548, 0, 0, 0, 0,
	0, 0, 0, 1276, 1277, 1278, 0, 1281, 0, 0,
	0, 1247, 511, 510, 520, 521, 513, 514, 515, 516,
	517, 518, 519, 512, 0, 0, 522, 511, 510, 520,
	521, 513, 514, 515, 516, 517, 518, 519, 512, 1303,
	0, 522, 0, 0, 316, 316, 316, 316, 316, 0,
	0, 1272, 0, 0, 935, 0, 570, 0, 547, 612,
	0, 838, 0, 0, 0, 0, 0, 934, 316, 86,
	0, 0, 0, 0, 0, 0, 86, 617, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 572,
	0, 0, 0, 0, 939, 0, 0, 0, 0, 0,
	0, 1337, 0, 933, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 523, 0, 0, 1348, 1349, 1350, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 0,
	0, 0, 0, 0, 0, 0, 0, 464, 573, 464,
	0, 0, 0, 587, 571, 0, 0, 0, 576, 464,
	0, 930, 927, 928, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 1382, 1383, 1384, 1385, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 937, 940, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 523, 0, 0, 964, 0,
	0, 0, 86, 86, 0, 0, 86, 0, 0, 86,
	523, 0, 0, 706, 0, 0, 588, 1417, 0, 0,
	0, 0, 1422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 666, 0, 0, 931, 0,
	1003, 1004, 706, 0, 0, 0, 1415, 547, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 1465, 0, 0, 0, 936, 0, 0, 0,
	1472, 1473, 0, 0, 249, 0, 0, 0, 0, 249,
	249, 938, 0, 799, 799, 249, 0, 0, 0, 799,
	0, 1448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 652, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1461, 0, 0, 0, 0, 0, 0, 0, 249,
	249, 249, 249, 0, 86, 0, 799, 86, 86, 86,
	86, 86, 0, 464, 667, 0, 0, 0, 0, 832,
	0, 0, 86, 0, 0, 0, 617, 0, 0, 0,
	0, 86, 86, 0, 0, 0, 0, 0, 0, 0,
	464, 0, 0, 0, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 0, 680, 681, 0, 682, 683,
	684, 668, 669, 670, 671, 649, 651, 0, 587, 650,
	653, 0, 664, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 665, 672, 673, 674, 675, 676, 677,
	678, 679, 0, 0, 0, 0, 0, 86, 1172, 0,
	47, 0, 0, 86, 0, 0, 86, 0, 86, 0,
	0, 86, 0, 0, 0, 1184, 1185, 1186, 0, 23,
	24, 48, 26, 27, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 706, 0, 42, 0,
	0, 588, 28, 0, 0, 0, 0, 0, 249, 0,
	0, 1208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 37, 0, 0, 0, 50, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 30, 31, 33, 32, 35, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 36, 43,
	44, 86, 0, 45, 46, 34, 0, 0, 1269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 39, 0, 40,
	41, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1126, 1127, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 49,
	0, 0, 1172, 0, 249, 1343, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 249, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 706, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	799, 0, 0, 0, 0, 0, 799, 0, 0, 0,
	0, 0, 0, 1377, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1172, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 617, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 420, 410, 0,
	380, 422, 357, 372, 430, 373, 374, 402, 343, 388,
	146, 369, 91, 360, 338, 366, 339, 358, 382, 113,
	356, 412, 391, 125, 428, 128, 396, 0, 167, 137,
	0, 0, 384, 414, 386, 408, 379, 403, 348, 395,
	423, 370, 399, 424, 0, 0, 0, 334, 0, 859,
	860, 0, 0, 0, 0, 0, 104, 0, 398, 419,
	368, 401, 337, 397, 0, 341, 344, 429, 417, 363,
	364, 1034, 0, 0, 0, 0, 0, 0, 383, 387,
	405, 377, 0, 0, 0, 0, 0, 0, 0, 799,
	361, 0, 394, 0, 0, 0, 345, 342, 0, 381,
	0, 0, 0, 347, 0, 362, 406, 0, 336, 409,
	415, 378, 192, 418, 376, 375, 153, 0, 107, 0,
	171, 117, 371, 126, 404, 421, 385, 413, 359, 367,
	109, 365, 160, 147, 183, 393, 148, 158, 129, 175,
	154, 182, 193, 194, 173, 191, 162, 99, 143, 89,
	152, 159, 0, 108, 86, 92, 172, 181, 105, 163,
	95, 179, 169, 170, 135, 121, 122, 165, 93, 94,
	0, 157, 112, 151, 116, 111, 145, 176, 177, 110,
	202, 100, 189, 190, 97, 101, 188, 142, 187, 174,
	180, 136, 133, 96, 178, 134, 132, 124, 0, 114,
	118, 149, 131, 150, 119, 139, 138, 140, 0, 144,
	0, 340, 0, 168, 185, 203, 204, 355, 416, 195,
	196, 197, 198, 0, 0, 0, 141, 102, 120, 164,
	123, 130, 156, 201, 400, 161, 106, 184, 166, 351,
	354, 349, 350, 389, 390, 425, 426, 427, 407, 346,
	0, 352, 353, 0, 411, 392, 90, 98, 127, 199,
	200, 0, 155, 115, 186, 0, 103, 420, 410, 0,
	380, 422, 357, 372, 430, 373, 374, 402, 343, 388,
	146, 369, 91, 360, 338, 366, 339, 358, 382, 113,
	356, 412, 391, 125, 428, 128, 396, 0, 167, 137,
	0, 0, 384, 414, 386, 408, 379, 403, 348, 395,
	423, 370, 399, 424, 0, 0, 0, 334, 0, 859,
	860, 0, 0, 0, 0, 0, 104, 0, 398, 419,
	368, 401, 337, 397, 0, 341, 344, 429, 417, 363,
	364, 0, 0, 0, 0, 0, 0, 0, 383, 387,
	405, 377, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 0, 394, 0, 0, 0, 345, 342, 0, 381,
	0, 0, 0, 347, 0, 362, 406, 0, 336, 409,
	415, 378, 192, 418, 376, 375, 153, 0, 107, 0,
	171, 117, 371, 126, 404, 421, 385, 413, 359, 367,
	109, 365, 160, 147, 183, 393, 148, 158, 129, 175,
	154, 182, 193, 194, 173, 191, 162, 99, 143, 89,
	152, 159, 0, 108, 0, 92, 172, 181, 105, 163,
	95, 179, 169, 170, 135, 121, 122, 165, 93, 94,
	0, 157, 112, 151, 116, 111, 145, 176, 177, 110,
	202, 100, 189, 190, 97, 101, 188, 142, 187, 174,
	180, 136, 133, 96, 178, 134, 132, 124, 0, 114,
	118, 149, 131, 150, 119, 139, 138, 140, 0, 144,
	0, 340, 0, 168, 185, 203, 204, 355, 416, 195,
	196, 197, 198, 0, 0, 0, 141, 102, 120, 164,
	123, 130, 156, 201, 400, 161, 106, 184, 166, 351,
	354, 349, 350, 389, 390, 425, 426, 427, 407, 346,
	0, 352, 353, 0, 411, 392, 90, 98, 127, 199,
	200, 0, 155, 115, 186, 0, 103, 420, 410, 0,
	380, 422, 357, 372, 430, 373, 374, 402, 343, 388,
	146, 369, 91, 360, 338, 366, 339, 358, 382, 113,
	356, 412, 391, 125, 428, 128, 396, 0, 167, 137,
	0, 0, 384, 414, 386, 408, 379, 403, 348, 395,
	423, 370, 399, 424, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 398, 419,
	368, 401, 337, 397, 0, 341, 344, 429, 417, 363,
	364, 0, 0, 0, 0, 0, 0, 0, 383, 387,
	405, 377, 0, 0, 0, 0, 0, 0, 1133, 0,
	361, 0, 394, 0, 0, 0, 345, 342, 0, 381,
	0, 0, 0, 347, 0, 362, 406, 0, 336, 409,
	415, 378, 192, 418, 376, 375, 153, 0, 107, 0,
	171, 117, 371, 126, 404, 421, 385, 413, 359, 367,
	109, 365, 160, 147, 183, 393, 148, 158, 129, 175,
	154, 182, 193, 194, 173, 191, 162, 99, 143, 89,
	152, 159, 0, 108, 0, 92, 172, 181, 105, 163,
	95, 179, 169, 170, 135, 121, 122, 165, 93, 94,
	0, 157, 112, 151, 116, 111, 145, 176, 177, 110,
	202, 100, 189, 190, 97, 101, 188, 142, 187, 174,
	180, 136, 133, 96, 178, 134, 132, 124, 0, 114,
	118, 149, 131, 150, 119, 139, 138, 140, 0, 144,
	0, 340, 0, 168, 185, 203, 204, 355, 416, 195,
	196, 197, 198, 0, 0, 0, 141, 102, 120, 164,
	123, 130, 156, 201, 400, 161, 106, 184, 166, 351,
	354, 349, 350, 389, 390, 425, 426, 427, 407, 346,
	0, 352, 353, 0, 411, 392, 90, 98, 127, 199,
	200, 0, 155, 115, 186, 0, 103, 420, 410, 0,
	380, 422, 357, 372, 430, 373, 374, 402, 343, 388,
	146, 369, 91, 360, 338, 366, 339, 358, 382, 113,
	356, 412, 391, 125, 428, 128, 396, 0, 167, 137,
	0, 0, 384, 414, 386, 408, 379, 403, 348, 395,
	423, 370, 399, 424, 50, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 398, 419,
	368, 401, 337, 397, 0, 341, 344, 429, 417, 363,
	364, 0, 0, 0, 0, 0, 0, 0, 383, 387,
	405, 377, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 0, 394, 0, 0, 0, 345, 342, 0, 381,
	0, 0, 0, 347, 0, 362, 406, 0, 336, 409,
	415, 378, 192, 418, 376, 375, 153, 0, 107, 0,
	171, 117, 371, 126, 404, 421, 385, 413, 359, 367,
	109, 365, 160, 147, 183, 393, 148, 158, 129, 175,
	154, 182, 193, 194, 173, 191, 162, 99, 143, 89,
	152, 159, 0, 108, 0, 92, 172, 181, 105, 163,
	95, 179, 169, 170, 135, 121, 122, 165, 93, 94,
	0, 157, 112, 151, 116, 111, 145, 176, 177, 110,
	202, 100, 189, 190, 97, 101, 188, 142, 187, 174,
	180, 136, 133, 96, 178, 134, 132, 124, 0, 114,
	118, 149, 131, 150, 119, 139, 138, 140, 0, 144,
	0, 340, 0, 168, 185, 203, 204, 355, 416, 195,
	196, 197, 198, 0, 0, 0, 141, 102, 120, 164,
	123, 130, 156, 201, 400, 161, 106, 184, 166, 351,
	354, 349, 350, 389, 390, 425, 426, 427, 407, 346,
	0, 352, 353, 0, 411, 392, 90, 98, 127, 199,
	200, 0, 155, 115, 186, 0, 103, 420, 410, 0,
	380, 422, 357, 372, 430, 373, 374, 402, 343, 388,
	146, 369, 91, 360, 338, 366, 339, 358, 382, 113,
	356, 412, 391, 125, 428, 128, 396, 0, 167, 137,
	0, 0, 384, 414, 386, 408, 379, 403, 348, 395,
	423, 370, 399, 424, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 398, 419,
	368, 401, 337, 397, 0, 341, 344, 429, 417, 363,
	364, 0, 0, 0, 0, 0, 0, 0, 383, 387,
	405, 377, 0, 0, 0, 0, 0, 0, 749, 0,
	361, 0, 394, 0, 0, 0, 345, 342, 0, 381,
	0, 0, 0, 347, 0, 362, 406, 0, 336, 409,
	415, 378, 192, 418, 376, 375, 153, 0, 107, 0,
	171, 117, 371, 126, 404, 421, 385, 413, 359, 367,
	109, 365, 160, 147, 183, 393, 148, 158, 129, 175,
	154, 182, 193, 194, 173, 191, 162, 99, 143, 89,
	152, 159, 0, 108, 0, 92, 172, 181, 105, 163,
	95, 179, 169, 170, 135, 121, 122, 165, 93, 94,
	0, 157, 112, 151, 116, 111, 145, 176, 177, 110,
	202, 100, 189, 190, 97, 101, 188, 142, 187, 174,
	180, 136, 133, 96, 178, 134, 132, 124, 0, 114,
	118, 149, 131, 150, 119, 139, 138, 140, 0, 144,
	0, 340, 0, 168, 185, 203, 204, 355, 416, 195,
	196, 197, 198, 0, 0, 0, 141, 102, 120, 164,
	123, 130, 156, 201, 400, 161, 106, 184, 166, 351,
	354, 349, 350, 389, 390, 425, 426, 427, 407, 346,
	0, 352, 353, 0, 411, 392, 90, 98, 127, 199,
	200, 0, 155, 115, 186, 0, 103, 420, 410, 0,
	380, 422, 357, 372, 430, 373, 374, 402, 343, 388,
	146, 369, 91, 360, 338, 366, 339, 358, 382, 113,
	356, 412, 391, 125, 428, 128, 396, 0, 167, 137,
	0, 0, 384, 414, 386, 408, 379, 403, 348, 395,
	423, 370, 399, 424, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 398, 419,
	368, 401, 337, 397, 0, 341, 344, 429, 417, 363,
	364, 0, 0, 0, 0, 0, 0, 0, 383, 387,
	405, 377, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 0, 394, 0, 0, 0, 345, 342, 0, 381,
	0, 0, 0, 347, 0, 362, 406, 0, 336, 409,
	415, 378, 192, 418, 376, 375, 153, 0, 107, 0,
	171, 117, 371, 126, 404, 421, 385, 413, 359, 367,
	109, 365, 160, 147, 183, 393, 148, 158, 129, 175,
	154, 182, 193, 194, 173, 191, 162, 99, 143, 89,
	152, 159, 0, 108, 0, 92, 172, 181, 105, 163,
	95, 179, 169, 170, 135, 121, 122, 165, 93, 94,
	0, 157, 112, 151, 116, 111, 145, 176, 177, 110,
	202, 100, 189, 190, 97, 101, 188, 142, 187, 174,
	180, 136, 133, 96, 178, 134, 132, 124, 0, 114,
	118, 149, 131, 150, 119, 139, 138, 140, 0, 144,
	0, 340, 0, 168, 185, 203, 204, 355, 416, 195,
	196, 197, 198, 0, 0, 0, 141, 102, 120, 164,
	123, 130, 156, 201, 400, 161, 106, 184, 166, 351,
	354, 349, 350, 389, 390, 425, 426, 427, 407, 346,
	0, 352, 353, 0, 411, 392, 90, 98, 127, 199,
	200, 0, 155, 115, 186, 0, 103, 420, 410, 0,
	380, 422, 357, 372, 430, 373, 374, 402, 343, 388,
	146, 369, 91, 360, 338, 366, 339, 358, 382, 113,
	356, 412, 391, 125, 428, 128, 396, 0, 167, 137,
	0, 0, 384, 414, 386, 408, 379, 403, 348, 395,
	423, 370, 399, 424, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 398, 419,
	368, 401, 337, 397, 0, 341, 344, 429, 417, 363,
	364, 0, 0, 0, 0, 0, 0, 0, 383, 387,
	405, 377, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 0, 394, 0, 0, 0, 345, 342, 0, 381,
	0, 0, 0, 347, 0, 362, 406, 0, 336, 409,
	415, 378, 192, 418, 376, 375, 153, 0, 107, 0,
	171, 117, 371, 126, 404, 421, 385, 413, 359, 367,
	109, 365, 160, 147, 183, 393, 148, 158, 129, 175,
	154, 182, 193, 194, 173, 191, 162, 99, 143, 89,
	152, 159, 0, 108, 0, 92, 172, 181, 105, 163,
	95, 179, 169, 170, 135, 121, 122, 165, 93, 94,
	0, 157, 112, 151, 116, 111, 145, 176, 177, 110,
	202, 100, 189, 190, 97, 101, 188, 142, 187, 174,
	180, 136, 133, 96, 178, 134, 132, 124, 0, 114,
	118, 149, 131, 150, 119, 139, 138, 140, 0, 144,
	0, 340, 0, 168, 185, 203, 204, 355, 416, 195,
	196, 197, 198, 0, 0, 0, 141, 102, 120, 164,
	123, 130, 156, 201, 400, 161, 106, 184, 166, 351,
	354, 349, 350, 389, 390, 425, 426, 427, 407, 346,
	0, 352, 353, 0, 411, 392, 90, 98, 127, 199,
	200, 0, 155, 115, 186, 0, 103, 420, 410, 0,
	380, 422, 357, 372, 430, 373, 374, 402, 343, 388,
	146, 369, 91, 360, 338, 366, 339, 358, 382, 113,
	356, 412, 391, 125, 428, 128, 396, 0, 167, 137,
	0, 0, 384, 414, 386, 408, 379, 403, 348, 395,
	423, 370, 399, 424, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 398, 419,
	368, 401, 337, 397, 0, 341, 344, 429, 417, 363,
	364, 0, 0, 0, 0, 0, 0, 0, 383, 387,
	405, 377, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 0, 394, 0, 0, 0, 345, 342, 0, 381,
	0, 0, 0, 347, 0, 362, 406, 0, 336, 409,
	415, 378, 192, 418, 376, 375, 153, 0, 107, 0,
	171, 117, 371, 126, 404, 421, 385, 413, 359, 367,
	109, 365, 160, 147, 183, 393, 148, 158, 129, 175,
	154, 182, 193, 194, 173, 191, 162, 99, 143, 89,
	152, 159, 0, 108, 0, 92, 172, 181, 105, 163,
	95, 179, 169, 170, 135, 121, 122, 165, 93, 94,
	0, 157, 112, 151, 116, 111, 145, 176, 177, 110,
	202, 100, 189, 190, 97, 332, 188, 142, 187, 174,
	180, 136, 133, 96, 178, 134, 132, 124, 0, 114,
	118, 149, 131, 150, 119, 139, 138, 140, 0, 144,
	0, 340, 0, 168, 185, 203, 204, 355, 416, 195,
	196, 197, 198, 0, 0, 0, 333, 331, 120, 164,
	123, 130, 156, 201, 400, 161, 106, 184, 166, 351,
	354, 349, 350, 389, 390, 425, 426, 427, 407, 346,
	0, 352, 353, 0, 411, 392, 90, 98, 127, 199,
	200, 0, 155, 115, 186, 0, 103, 420, 410, 0,
	380, 422, 357, 372, 430, 373, 374, 402, 343, 388,
	146, 369, 91, 360, 338, 366, 339, 358, 382, 113,
	356, 412, 391, 125, 428, 128, 396, 0, 167, 137,
	0, 0, 384, 414, 386, 408, 379, 403, 348, 395,
	423, 370, 399, 424, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 398, 419,
	368, 401, 337, 397, 0, 341, 344, 429, 417, 363,
	364, 0, 0, 0, 0, 0, 0, 0, 383, 387,
	405, 377, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 0, 394, 0, 0, 0, 345, 342, 0, 381,
	0, 0, 0, 347, 0, 362, 406, 0, 336, 409,
	415, 378, 192, 418, 376, 375, 153, 0, 107, 0,
	171, 117, 371, 126, 404, 421, 385, 413, 359, 367,
	109, 365, 160, 147, 183, 393, 148, 158, 129, 175,
	154, 182, 193, 194, 173, 191, 162, 99, 143, 89,
	152, 159, 0, 108, 0, 92, 172, 181, 105, 163,
	95, 179, 169, 170, 135, 121, 122, 165, 93, 94,
	0, 157, 112, 151, 116, 111, 145, 176, 177, 110,
	202, 100, 189, 190, 97, 101, 188, 142, 187, 174,
	180, 136, 133, 96, 178, 134, 132, 124, 0, 114,
	118, 149, 131, 150, 119, 139, 138, 140, 0, 144,
	0, 340, 0, 168, 185, 203, 204, 355, 416, 195,
	196, 197, 198, 0, 0, 0, 141, 102, 120, 164,
	123, 130, 156, 201, 400, 161, 106, 184, 166, 351,
	354, 349, 350, 389, 390, 425, 426, 427, 407, 346,
	0, 352, 353, 0, 411, 392, 90, 98, 127, 199,
	200, 0, 155, 115, 186, 0, 103, 420, 410, 0,
	380, 422, 357, 372, 430, 373, 374, 402, 343, 388,
	146, 369, 91, 360, 338, 366, 339, 358, 382, 113,
	356, 412, 391, 125, 428, 128, 396, 0, 167, 137,
	0, 0, 384, 414, 386, 408, 379, 403, 348, 395,
	423, 370, 399, 424, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 398, 419,
	368, 401, 337, 397, 0, 341, 344, 429, 417, 363,
	364, 0, 0, 0, 0, 0, 0, 0, 383, 387,
	405, 377, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 0, 394, 0, 0, 0, 345, 342, 0, 381,
	0, 0, 0, 347, 0, 362, 406, 0, 336, 409,
	415, 378, 192, 418, 376, 375, 153, 0, 107, 0,
	171, 117, 371, 126, 404, 421, 385, 413, 359, 367,
	109, 365, 160, 147, 183, 393, 148, 158, 129, 175,
	154, 182, 193, 194, 173, 191, 162, 99, 143, 89,
	152, 159, 0, 108, 0, 92, 172, 627, 105, 163,
	95, 179, 169, 170, 135, 121, 122, 165, 93, 94,
	0, 157, 112, 151, 116, 111, 145, 176, 177, 110,
	202, 100, 189, 190, 97, 332, 188, 142, 187, 174,
	180, 136, 133, 96, 178, 134, 132, 124, 0, 114,
	118, 149, 131, 150, 119, 139, 138, 140, 0, 144,
	0, 340, 0, 168, 185, 203, 204, 355, 416, 195,
	196, 197, 198, 0, 0, 0, 333, 331, 120, 164,
	123, 130, 156, 201, 400, 161, 106, 184, 166, 351,
	354, 349, 350, 389, 390, 425, 426, 427, 407, 346,
	0, 352, 353, 0, 411, 392, 90, 98, 127, 199,
	200, 0, 155, 115, 186, 0, 103, 420, 410, 0,
	380, 422, 357, 372, 430, 373, 374, 402, 343, 388,
	146, 369, 91, 360, 338, 366, 339, 358, 382, 113,
	356, 412, 391, 125, 428, 128, 396, 0, 167, 137,
	0, 0, 384, 414, 386, 408, 379, 403, 348, 395,
	423, 370, 399, 424, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 398, 419,
	368, 401, 337, 397, 0, 341, 344, 429, 417, 363,
	364, 0, 0, 0, 0, 0, 0, 0, 383, 387,
	405, 377, 0, 0, 0, 0, 0, 0, 0, 0,
	361, 0, 394, 0, 0, 0, 345, 342, 0, 381,
	0, 0, 0, 347, 0, 362, 406, 0, 336, 409,
	415, 378, 192, 418, 376, 375, 153, 0, 107, 0,
	171, 117, 371, 126, 404, 421, 385, 413, 359, 367,
	109, 365, 160, 147, 183, 393, 148, 158, 129, 175,
	154, 182, 193, 194, 173, 191, 162, 99, 143, 89,
	152, 159, 0, 108, 0, 92, 172, 323, 105, 163,
	95, 179, 169, 170, 135, 121, 122, 165, 93, 94,
	0, 157, 112, 151, 116, 111, 145, 176, 177, 110,
	202, 100, 189, 190, 97, 332, 188, 142, 187, 174,
	180, 136, 133, 96, 178, 134, 132, 124, 0, 114,
	118, 149, 131, 150, 119, 139, 138, 140, 0, 144,
	0, 340, 0, 168, 185, 203, 204, 355, 416, 195,
	196, 197, 198, 0, 0, 0, 333, 331, 326, 325,
	123, 130, 156, 201, 400, 161, 106, 184, 166, 351,
	354, 349, 350, 389, 390, 425, 426, 427, 407, 346,
	0, 352, 353, 0, 411, 392, 90, 98, 127, 199,
	200, 0, 155, 115, 186, 146, 103, 91, 786, 0,
	256, 0, 0, 0, 113, 253, 0, 0, 125, 295,
	128, 0, 0, 167, 137, 0, 0, 0, 0, 286,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 254, 274, 273, 276, 277, 278, 279, 0,
	0, 104, 275, 280, 281, 282, 0, 0, 251, 267,
	0, 294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 247, 0, 0, 0, 307, 0, 266,
	0, 0, 262, 263, 268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 0, 0,
	305, 153, 0, 107, 0, 171, 117, 0, 126, 0,
	0, 0, 0, 0, 0, 109, 0, 160, 147, 183,
	0, 148, 158, 129, 175, 154, 182, 193, 194, 173,
	191, 162, 99, 143, 89, 152, 159, 0, 108, 0,
	92, 172, 181, 105, 163, 95, 179, 169, 170, 135,
	121, 122, 165, 93, 94, 0, 157, 112, 151, 116,
	111, 145, 176, 177, 110, 202, 100, 189, 190, 97,
	101, 188, 142, 187, 174, 180, 136, 133, 96, 178,
	134, 132, 124, 0, 114, 118, 149, 131, 150, 119,
	139, 138, 140, 0, 144, 0, 0, 0, 168, 185,
	203, 204, 0, 0, 195, 196, 197, 198, 0, 0,
	0, 141, 102, 120, 164, 123, 130, 156, 201, 0,
	161, 106, 184, 166, 296, 306, 302, 303, 300, 301,
	299, 298, 297, 308, 288, 289, 290, 291, 293, 0,
	292, 90, 98, 127, 199, 200, 0, 155, 115, 186,
	304, 103, 146, 0, 91, 0, 0, 256, 0, 0,
	0, 113, 253, 0, 0, 125, 295, 128, 0, 0,
	167, 137, 0, 0, 0, 0, 286, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 477, 254,
	274, 273, 276, 277, 278, 279, 0, 0, 104, 275,
	280, 281, 282, 0, 0, 251, 267, 0, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	0, 0, 0, 0, 307, 0, 266, 0, 0, 262,
	263, 268, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 305, 153, 0,
	107, 0, 171, 117, 0, 126, 0, 0, 0, 0,
	0, 0, 109, 0, 160, 147, 183, 0, 148, 158,
	129, 175, 154, 182, 193, 194, 173, 191, 162, 99,
	143, 89, 152, 159, 0, 108, 0, 92, 172, 181,
	105, 163, 95, 179, 169, 170, 135, 121, 122, 165,
	93, 94, 0, 157, 112, 151, 116, 111, 145, 176,
	177, 110, 202, 100, 189, 190, 97, 101, 188, 142,
	187, 174, 180, 136, 133, 96, 178, 134, 132, 124,
	0, 114, 118, 149, 131, 150, 119, 139, 138, 140,
	0, 144, 0, 0, 0, 168, 185, 203, 204, 0,
	0, 195, 196, 197, 198, 0, 0, 0, 141, 102,
	120, 164, 123, 130, 156, 201, 0, 161, 106, 184,
	166, 296, 306, 302, 303, 300, 301, 299, 298, 297,
	308, 288, 289, 290, 291, 293, 0, 292, 90, 98,
	127, 199, 200, 0, 155, 115, 186, 304, 103, 146,
	0, 91, 0, 0, 256, 0, 0, 0, 113, 253,
	0, 0, 125, 295, 128, 0, 0, 167, 137, 0,
	0, 0, 0, 286, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 254, 274, 273, 276,
	277, 278, 279, 0, 0, 104, 275, 280, 281, 282,
	0, 0, 251, 267, 0, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 247, 0, 0,
	0, 307, 0, 266, 0, 0, 262, 263, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 305, 153, 0, 107, 0, 171,
	117, 0, 126, 0, 0, 0, 0, 0, 0, 109,
	0, 160, 147, 183, 0, 148, 158, 129, 175, 154,
	182, 193, 194, 173, 191, 162, 99, 143, 89, 152,
	159, 0, 108, 0, 92, 172, 181, 105, 163, 95,
	179, 169, 170, 135, 121, 122, 165, 93, 94, 0,
	157, 112, 151, 116, 111, 145, 176, 177, 110, 202,
	100, 189, 190, 97, 101, 188, 142, 187, 174, 180,
	136, 133, 96, 178, 134, 132, 124, 0, 114, 118,
	149, 131, 150, 119, 139, 138, 140, 0, 144, 0,
	0, 0, 168, 185, 203, 204, 0, 0, 195, 196,
	197, 198, 0, 0, 0, 141, 102, 120, 164, 123,
	130, 156, 201, 0, 161, 106, 184, 166, 296, 306,
	302, 303, 300, 301, 299, 298, 297, 308, 288, 289,
	290, 291, 293, 0, 292, 90, 98, 127, 199, 200,
	0, 155, 115, 186, 304, 103, 146, 0, 91, 0,
	0, 256, 0, 0, 0, 113, 253, 0, 0, 125,
	295, 128, 0, 0, 167, 137, 0, 0, 0, 0,
	286, 287, 0, 0, 0, 0, 0, 0, 850, 0,
	50, 0, 0, 254, 274, 273, 276, 277, 278, 279,
	0, 0, 104, 275, 280, 281, 282, 0, 0, 251,
	267, 0, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 0, 0, 0, 0, 307, 0,
	266, 0, 0, 262, 263, 268, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 305, 153, 0, 107, 0, 171, 117, 0, 126,
	0, 0, 0, 0, 0, 0, 109, 0, 160, 147,
	183, 0, 148, 158, 129, 175, 154, 182, 193, 194,
	173, 191, 162, 99, 143, 89, 152, 159, 0, 108,
	0, 92, 172, 181, 105, 163, 95, 179, 169, 170,
	135, 121, 122, 165, 93, 94, 0, 157, 112, 151,
	116, 111, 145, 176, 177, 110, 202, 100, 189, 190,
	97, 101, 188, 142, 187, 174, 180, 136, 133, 96,
	178, 134, 132, 124, 0, 114, 118, 149, 131, 150,
	119, 139, 138, 140, 0, 144, 0, 0, 0, 168,
	185, 203, 204, 0, 0, 195, 196, 197, 198, 0,
	0, 0, 141, 102, 120, 164, 123, 130, 156, 201,
	0, 161, 106, 184, 166, 296, 306, 302, 303, 300,
	301, 299, 298, 297, 308, 288, 289, 290, 291, 293,
	0, 292, 90, 98, 127, 199, 200, 23, 155, 115,
	186, 304, 103, 0, 0, 0, 0, 0, 0, 146,
	0, 91, 0, 0, 256, 0, 0, 0, 113, 253,
	0, 0, 125, 295, 128, 0, 0, 167, 137, 0,
	0, 0, 0, 286, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 254, 274, 273, 276,
	277, 278, 279, 0, 0, 104, 275, 280, 281, 282,
	0, 0, 251, 267, 0, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 0, 0, 0,
	0, 307, 0, 266, 0, 0, 262, 263, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 305, 153, 0, 107, 0, 171,
	117, 0, 126, 0, 0, 0, 0, 0, 0, 109,
	0, 160, 147, 183, 0, 148, 158, 129, 175, 154,
	182, 193, 194, 173, 191, 162, 99, 143, 89, 152,
	159, 0, 108, 0, 92, 172, 181, 105, 163, 95,
	179, 169, 170, 135, 121, 122, 165, 93, 94, 0,
	157, 112, 151, 116, 111, 145, 176, 177, 110, 202,
	100, 189, 190, 97, 101, 188, 142, 187, 174, 180,
	136, 133, 96, 178, 134, 132, 124, 0, 114, 118,
	149, 131, 150, 119, 139, 138, 140, 0, 144, 0,
	0, 0, 168, 185, 203, 204, 0, 0, 195, 196,
	197, 198, 0, 0, 0, 141, 102, 120, 164, 123,
	130, 156, 201, 0, 161, 106, 184, 166, 296, 306,
	302, 303, 300, 301, 299, 298, 297, 308, 288, 289,
	290, 291, 293, 0, 292, 90, 98, 127, 199, 200,
	0, 155, 115, 186, 304, 103, 146, 0, 91, 0,
	0, 256, 0, 0, 0, 113, 253, 0, 0, 125,
	295, 128, 0, 0, 167, 137, 0, 0, 0, 0,
	286, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 254, 274, 273, 276, 277, 278, 279,
	0, 0, 104, 275, 280, 281, 282, 0, 0, 251,
	267, 0, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 0, 0, 0, 0, 307, 0,
	266, 0, 0, 262, 263, 268, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 305, 153, 0, 107, 0, 171, 117, 0, 126,
	0, 0, 0, 0, 0, 0, 109, 0, 160, 147,
	183, 0, 148, 158, 129, 175, 154, 182, 193, 194,
	173, 191, 162, 99, 143, 89, 152, 159, 0, 108,
	0, 92, 172, 181, 105, 163, 95, 179, 169, 170,
	135, 121, 122, 165, 93, 94, 0, 157, 112, 151,
	116, 111, 145, 176, 177, 110, 202, 100, 189, 190,
	97, 101, 188, 142, 187, 174, 180, 136, 133, 96,
	178, 134, 132, 124, 0, 114, 118, 149, 131, 150,
	119, 139, 138, 140, 0, 144, 0, 0, 0, 168,
	185, 203, 204, 0, 0, 195, 196, 197, 198, 0,
	0, 0, 141, 102, 120, 164, 123, 130, 156, 201,
	0, 161, 106, 184, 166, 296, 306, 302, 303, 300,
	301, 299, 298, 297, 308, 288, 289, 290, 291, 293,
	0, 292, 90, 98, 127, 199, 200, 0, 155, 115,
	186, 304, 103, 146, 0, 91, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 125, 295, 128, 0,
	0, 167, 137, 0, 0, 0, 0, 286, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	254, 274, 273, 276, 277, 278, 279, 0, 0, 104,
	275, 280, 281, 282, 0, 0, 0, 267, 0, 294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 0, 0, 0, 0, 307, 0, 266, 0, 0,
	262, 263, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 305, 153,
	0, 107, 0, 171, 117, 0, 126, 0, 0, 0,
	0, 0, 0, 109, 0, 160, 147, 183, 1470, 148,
	158, 129, 175, 154, 182, 193, 194, 173, 191, 162,
	99, 143, 89, 152, 159, 0, 108, 0, 92, 172,
	181, 105, 163, 95, 179, 169, 170, 135, 121, 122,
	165, 93, 94, 0, 157, 112, 151, 116, 111, 145,
	176, 177, 110, 202, 100, 189, 190, 97, 101, 188,
	142, 187, 174, 180, 136, 133, 96, 178, 134, 132,
	124, 0, 114, 118, 149, 131, 150, 119, 139, 138,
	140, 0, 144, 0, 0, 0, 168, 185, 203, 204,
	0, 0, 195, 196, 197, 198, 0, 0, 0, 141,
	102, 120, 164, 123, 130, 156, 201, 0, 161, 106,
	184, 166, 296, 306, 302, 303, 300, 301, 299, 298,
	297, 308, 288, 289, 290, 291, 293, 0, 292, 90,
	98, 127, 199, 200, 0, 155, 115, 186, 304, 103,
	146, 0, 91, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 125, 295, 128, 0, 0, 167, 137,
	0, 0, 0, 0, 286, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 254, 274, 273,
	276, 277, 278, 279, 0, 0, 104, 275, 280, 281,
	282, 0, 0, 0, 267, 0, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 0, 0,
	0, 0, 307, 0, 266, 0, 0, 262, 263, 268,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 305, 153, 0, 107, 0,
	171, 117, 0, 126, 0, 0, 0, 0, 0, 0,
	109, 0, 160, 147, 183, 0, 148, 158, 129, 175,
	154, 182, 193, 194, 173, 191, 162, 99, 143, 89,
	152, 159, 0, 108, 0, 92, 172, 181, 105, 163,
	95, 179, 169, 170, 135, 121, 122, 165, 93, 94,
	0, 157, 112, 151, 116, 111, 145, 176, 177, 110,
	202, 100, 189, 190, 97, 101, 188, 142, 187, 174,
	180, 136, 133, 96, 178, 134, 132, 124, 0, 114,
	118, 149, 131, 150, 119, 139, 138, 140, 0, 144,
	0, 0, 0, 168, 185, 203, 204, 0, 0, 195,
	196, 197, 198, 0, 0, 0, 141, 102, 120, 164,
	123, 130, 156, 201, 0, 161, 106, 184, 166, 296,
	306, 302, 303, 300, 301, 299, 298, 297, 308, 288,
	289, 290, 291, 293, 0, 292, 90, 98, 127, 199,
	200, 0, 155, 115, 186, 304, 103, 146, 0, 91,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	125, 0, 128, 0, 0, 167, 137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 511,
	510, 520, 521, 513, 514, 515, 516, 517, 518, 519,
	512, 0, 0, 522, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 153, 0, 107, 0, 171, 117, 0,
	126, 0, 0, 0, 0, 0, 0, 109, 0, 160,
	147, 183, 0, 148, 158, 129, 175, 154, 182, 193,
	194, 173, 191, 162, 99, 143, 89, 152, 159, 0,
	108, 0, 92, 172, 181, 105, 163, 95, 179, 169,
	170, 135, 121, 122, 165, 93, 94, 0, 157, 112,
	151, 116, 111, 145, 176, 177, 110, 202, 100, 189,
	190, 97, 101, 188, 142, 187, 174, 180, 136, 133,
	96, 178, 134, 132, 124, 0, 114, 118, 149, 131,
	150, 119, 139, 138, 140, 0, 144, 0, 0, 0,
	168, 185, 203, 204, 0, 0, 195, 196, 197, 198,
	0, 0, 0, 141, 102, 120, 164, 123, 130, 156,
	201, 0, 161, 106, 184, 166, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 98, 127, 199, 200, 0, 155,
	115, 186, 523, 103, 146, 0, 91, 0, 499, 0,
	0, 0, 0, 113, 0, 0, 0, 125, 0, 128,
	0, 0, 167, 137, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 501, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 496, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	153, 0, 107, 0, 171, 117, 0, 126, 0, 0,
	0, 0, 0, 0, 109, 0, 160, 147, 183, 0,
	148, 158, 129, 175, 154, 182, 193, 194, 173, 191,
	162, 99, 143, 89, 152, 159, 0, 108, 0, 92,
	172, 181, 105, 163, 95, 179, 169, 170, 135, 121,
	122, 165, 93, 94, 0, 157, 112, 151, 116, 111,
	145, 176, 177, 110, 202, 100, 189, 190, 97, 101,
	188, 142, 187, 174, 180, 136, 133, 96, 178, 134,
	132, 124, 0, 114, 118, 149, 131, 150, 119, 139,
	138, 140, 0, 144, 0, 0, 0, 168, 185, 203,
	204, 0, 0, 195, 196, 197, 198, 0, 0, 0,
	141, 102, 120, 164, 123, 130, 156, 201, 0, 161,
	106, 184, 166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 98, 127, 199, 200, 0, 155, 115, 186, 146,
	103, 91, 0, 616, 0, 0, 0, 0, 113, 0,
	0, 0, 125, 0, 128, 0, 0, 167, 137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 618, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 0, 153, 0, 107, 0, 171,
	117, 0, 126, 0, 0, 0, 0, 0, 0, 109,
	0, 160, 147, 183, 0, 148, 158, 129, 175, 154,
	182, 193, 194, 173, 191, 162, 99, 143, 89, 152,
	159, 0, 108, 0, 92, 172, 181, 105, 163, 95,
	179, 169, 170, 135, 121, 122, 165, 93, 94, 0,
	157, 112, 151, 116, 111, 145, 176, 177, 110, 202,
	100, 189, 190, 97, 101, 188, 142, 187, 174, 180,
	136, 133, 96, 178, 134, 132, 124, 0, 114, 118,
	149, 131, 150, 119, 139, 138, 140, 0, 144, 0,
	0, 0, 168, 185, 203, 204, 0, 0, 195, 196,
	197, 198, 0, 0, 0, 141, 102, 120, 164, 123,
	130, 156, 201, 0, 161, 106, 184, 166, 0, 23,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 0, 91, 0, 90, 98, 127, 199, 200,
	113, 155, 115, 186, 125, 103, 128, 0, 0, 167,
	137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 334, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 0, 153, 0, 107,
	0, 171, 117, 0, 126, 0, 0, 0, 0, 0,
	0, 109, 0, 160, 147, 183, 0, 148, 158, 129,
	175, 154, 182, 193, 194, 173, 191, 162, 99, 143,
	89, 152, 159, 0, 108, 0, 92, 172, 181, 105,
	163, 95, 179, 169, 170, 135, 121, 122, 165, 93,
	94, 0, 157, 112, 151, 116, 111, 145, 176, 177,
	110, 202, 100, 189, 190, 97, 101, 188, 142, 187,
	174, 180, 136, 133, 96, 178, 134, 132, 124, 0,
	114, 118, 149, 131, 150, 119, 139, 138, 140, 0,
	144, 0, 0, 0, 168, 185, 203, 204, 0, 0,
	195, 196, 197, 198, 0, 0, 0, 141, 102, 120,
	164, 123, 130, 156, 201, 0, 161, 106, 184, 166,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 0, 91, 0, 90, 98, 127,
	199, 200, 113, 155, 115, 186, 125, 103, 128, 0,
	0, 167, 137, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 153,
	0, 107, 0, 171, 117, 0, 126, 0, 0, 0,
	0, 0, 0, 109, 0, 160, 147, 183, 0, 148,
	158, 129, 175, 154, 182, 193, 194, 173, 191, 162,
	99, 143, 89, 152, 159, 0, 108, 0, 92, 172,
	181, 105, 163, 95, 179, 169, 170, 135, 121, 122,
	165, 93, 94, 0, 157, 112, 151, 116, 111, 145,
	176, 177, 110, 202, 100, 189, 190, 97, 101, 188,
	142, 187, 174, 180, 136, 133, 96, 178, 134, 132,
	124, 0, 114, 118, 149, 131, 150, 119, 139, 138,
	140, 0, 144, 0, 0, 0, 168, 185, 203, 204,
	0, 0, 195, 196, 197, 198, 0, 0, 0, 141,
	102, 120, 164, 123, 130, 156, 201, 0, 161, 106,
	184, 166, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 0, 91, 0, 90,
	98, 127, 199, 200, 113, 155, 115, 186, 125, 103,
	128, 0, 0, 167, 137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 334, 0, 0, 736, 0, 0, 737, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 0, 0,
	0, 153, 0, 107, 0, 171, 117, 0, 126, 0,
	0, 0, 0, 0, 0, 109, 0, 160, 147, 183,
	0, 148, 158, 129, 175, 154, 182, 193, 194, 173,
	191, 162, 99, 143, 89, 152, 159, 0, 108, 0,
	92, 172, 181, 105, 163, 95, 179, 169, 170, 135,
	121, 122, 165, 93, 94, 0, 157, 112, 151, 116,
	111, 145, 176, 177, 110, 202, 100, 189, 190, 97,
	101, 188, 142, 187, 174, 180, 136, 133, 96, 178,
	134, 132, 124, 0, 114, 118, 149, 131, 150, 119,
	139, 138, 140, 0, 144, 0, 0, 0, 168, 185,
	203, 204, 0, 0, 195, 196, 197, 198, 0, 0,
	0, 141, 102, 120, 164, 123, 130, 156, 201, 0,
	161, 106, 184, 166, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 98, 127, 199, 200, 0, 155, 115, 186,
	146, 103, 91, 0, 0, 0, 0, 0, 0, 113,
	636, 0, 0, 125, 0, 128, 0, 0, 167, 137,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 635,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 153, 0, 107, 0,
	171, 117, 0, 126, 0, 0, 0, 0, 0, 0,
	109, 0, 160, 147, 183, 0, 148, 158, 129, 175,
	154, 182, 193, 194, 173, 191, 162, 99, 143, 89,
	152, 159, 0, 108, 0, 92, 172, 181, 105, 163,
	95, 179, 169, 170, 135, 121, 122, 165, 93, 94,
	0, 157, 112, 151, 116, 111, 145, 176, 177, 110,
	202, 100, 189, 190, 97, 101, 188, 142, 187, 174,
	180, 136, 133, 96, 178, 134, 132, 124, 0, 114,
	118, 149, 131, 150, 119, 139, 138, 140, 0, 144,
	0, 0, 0, 168, 185, 203, 204, 0, 0, 195,
	196, 197, 198, 0, 0, 0, 141, 102, 120, 164,
	123, 130, 156, 201, 0, 161, 106, 184, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 98, 127, 199,
	200, 0, 155, 115, 186, 146, 103, 91, 0, 616,
	0, 0, 0, 0, 113, 0, 0, 0, 125, 0,
	128, 0, 0, 167, 137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 618, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 0, 0,
	0, 153, 0, 107, 0, 171, 117, 0, 126, 0,
	0, 0, 0, 0, 0, 109, 0, 160, 147, 183,
	0, 614, 158, 129, 175, 154, 182, 193, 194, 173,
	191, 162, 99, 143, 89, 152, 159, 0, 108, 0,
	92, 172, 181, 105, 163, 95, 179, 169, 170, 135,
	121, 122, 165, 93, 94, 0, 157, 112, 151, 116,
	111, 145, 176, 177, 110, 202, 100, 189, 190, 97,
	101, 188, 142, 187, 174, 180, 136, 133, 96, 178,
	134, 132, 124, 0, 114, 118, 149, 131, 150, 119,
	139, 138, 140, 0, 144, 0, 0, 0, 168, 185,
	203, 204, 0, 0, 195, 196, 197, 198, 0, 0,
	0, 141, 102, 120, 164, 123, 130, 156, 201, 0,
	161, 106, 184, 166, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 0, 91,
	0, 90, 98, 127, 199, 200, 113, 155, 115, 186,
	125, 103, 128, 0, 0, 167, 137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 153, 0, 107, 0, 171, 117, 0,
	126, 0, 0, 0, 0, 0, 0, 109, 0, 160,
	147, 183, 0, 148, 158, 129, 175, 154, 182, 193,
	194, 173, 191, 162, 99, 143, 89, 152, 159, 0,
	108, 0, 92, 172, 181, 105, 163, 95, 179, 169,
	170, 135, 121, 122, 165, 93, 94, 0, 157, 112,
	151, 116, 111, 145, 176, 177, 110, 202, 100, 189,
	190, 97, 101, 188, 142, 187, 174, 180, 136, 133,
	96, 178, 134, 132, 124, 0, 114, 118, 149, 131,
	150, 119, 139, 138, 140, 0, 144, 0, 0, 0,
	168, 185, 203, 204, 0, 0, 195, 196, 197, 198,
	0, 0, 0, 141, 102, 120, 164, 123, 130, 156,
	201, 0, 161, 106, 184, 166, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	0, 91, 0, 90, 98, 127, 199, 200, 113, 155,
	115, 186, 125, 103, 128, 0, 0, 167, 137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 618, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 0, 153, 0, 107, 0, 171,
	117, 0, 126, 0, 0, 0, 0, 0, 0, 109,
	0, 160, 147, 183, 0, 148, 158, 129, 175, 154,
	182, 193, 194, 173, 191, 162, 99, 143, 89, 152,
	159, 0, 108, 0, 92, 172, 181, 105, 163, 95,
	179, 169, 170, 135, 121, 122, 165, 93, 94, 0,
	157, 112, 151, 116, 111, 145, 176, 177, 110, 202,
	100, 189, 190, 97, 101, 188, 142, 187, 174, 180,
	136, 133, 96, 178, 134, 132, 124, 0, 114, 118,
	149, 131, 150, 119, 139, 138, 140, 0, 144, 0,
	0, 0, 168, 185, 203, 204, 0, 0, 195, 196,
	197, 198, 0, 0, 0, 141, 102, 120, 164, 123,
	130, 156, 201, 0, 161, 106, 184, 166, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 0, 91, 0, 90, 98, 127, 199, 200,
	113, 155, 115, 186, 125, 103, 128, 0, 0, 167,
	137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 334, 0,
	501, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 0, 153, 0, 107,
	0, 171, 117, 0, 126, 0, 0, 0, 0, 0,
	0, 109, 0, 160, 147, 183, 0, 148, 158, 129,
	175, 154, 182, 193, 194, 173, 191, 162, 99, 143,
	89, 152, 159, 0, 108, 0, 92, 172, 181, 105,
	163, 95, 179, 169, 170, 135, 121, 122, 165, 93,
	94, 0, 157, 112, 151, 116, 111, 145, 176, 177,
	110, 202, 100, 189, 190, 97, 101, 188, 142, 187,
	174, 180, 136, 133, 96, 178, 134, 132, 124, 0,
	114, 118, 149, 131, 150, 119, 139, 138, 140, 0,
	144, 0, 0, 0, 168, 185, 203, 204, 0, 0,
	195, 196, 197, 198, 0, 0, 0, 141, 102, 120,
	164, 123, 130, 156, 201, 0, 161, 106, 184, 166,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 0, 91, 0, 90, 98, 127,
	199, 200, 113, 155, 115, 186, 125, 103, 128, 0,
	0, 167, 137, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 153,
	0, 107, 0, 171, 117, 0, 126, 0, 0, 0,
	0, 0, 0, 109, 0, 160, 147, 183, 0, 148,
	158, 129, 175, 154, 182, 193, 194, 173, 191, 162,
	99, 143, 89, 152, 159, 0, 108, 0, 92, 172,
	181, 105, 163, 95, 179, 169, 170, 135, 121, 122,
	165, 93, 94, 0, 157, 112, 151, 116, 111, 145,
	176, 177, 110, 202, 100, 189, 190, 97, 101, 188,
	142, 187, 174, 180, 136, 133, 96, 178, 134, 132,
	124, 0, 114, 118, 149, 131, 150, 119, 139, 138,
	140, 0, 144, 0, 0, 0, 168, 185, 203, 204,
	0, 0, 195, 196, 197, 198, 0, 0, 0, 141,
	102, 120, 164, 123, 130, 156, 201, 696, 161, 106,
	184, 166, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	98, 127, 199, 200, 0, 155, 115, 186, 146, 103,
	91, 0, 0, 0, 0, 0, 594, 113, 0, 0,
	0, 125, 0, 128, 0, 0, 167, 137, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 153, 0, 107, 0, 171, 117,
	0, 126, 0, 0, 0, 0, 0, 0, 109, 0,
	160, 147, 183, 0, 148, 158, 129, 175, 154, 182,
	193, 194, 173, 191, 162, 99, 143, 89, 152, 159,
	0, 108, 0, 92, 172, 181, 105, 163, 95, 179,
	169, 170, 135, 121, 122, 165, 93, 94, 0, 157,
	112, 151, 116, 111, 145, 176, 177, 110, 202, 100,
	189, 190, 97, 101, 188, 142, 187, 174, 180, 136,
	133, 96, 178, 134, 132, 124, 0, 114, 118, 149,
	131, 150, 119, 139, 138, 140, 0, 144, 0, 0,
	0, 168, 185, 203, 204, 0, 0, 195, 196, 197,
	198, 0, 0, 0, 141, 102, 120, 164, 123, 130,
	156, 201, 0, 161, 106, 184, 166, 0, 0, 0,
	0, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	146, 0, 91, 0, 90, 98, 127, 199, 200, 113,
	155, 115, 186, 125, 103, 128, 0, 0, 167, 137,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 153, 0, 107, 0,
	171, 117, 0, 126, 0, 0, 0, 0, 0, 0,
	109, 0, 160, 147, 183, 0, 148, 158, 129, 175,
	154, 182, 193, 194, 173, 191, 162, 99, 143, 89,
	152, 159, 0, 108, 0, 92, 172, 181, 105, 163,
	95, 179, 169, 170, 135, 121, 122, 165, 93, 94,
	0, 157, 112, 151, 116, 111, 145, 176, 177, 110,
	202, 100, 189, 190, 97, 101, 188, 142, 187, 174,
	180, 136, 133, 96, 178, 134, 132, 124, 0, 114,
	118, 149, 131, 150, 119, 139, 138, 140, 0, 144,
	0, 0, 0, 168, 185, 203, 204, 0, 0, 195,
	196, 197, 198, 0, 0, 0, 141, 102, 120, 164,
	123, 130, 156, 201, 0, 161, 106, 184, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 0, 91, 0, 90, 98, 127, 199,
	200, 113, 155, 115, 186, 125, 103, 128, 0, 0,
	167, 137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 192, 0, 0, 0, 153, 0,
	107, 0, 171, 117, 0, 126, 0, 0, 0, 0,
	0, 0, 109, 0, 160, 147, 183, 0, 148, 158,
	129, 175, 154, 182, 193, 194, 173, 191, 162, 99,
	143, 89, 152, 159, 0, 108, 0, 92, 172, 181,
	105, 163, 95, 179, 169, 170, 135, 121, 122, 165,
	93, 94, 0, 157, 112, 151, 116, 111, 145, 176,
	177, 110, 202, 100, 189, 190, 97, 101, 188, 142,
	187, 174, 180, 136, 133, 96, 178, 134, 132, 124,
	0, 114, 118, 149, 131, 150, 119, 139, 138, 140,
	0, 144, 0, 0, 0, 168, 185, 203, 204, 0,
	0, 195, 196, 197, 198, 0, 0, 0, 141, 102,
	120, 164, 123, 130, 156, 201, 0, 161, 106, 184,
	166, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 0, 91, 0, 90, 98,
	127, 199, 200, 113, 155, 115, 186, 125, 103, 128,
	0, 0, 167, 137, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	153, 0, 107, 0, 171, 117, 0, 126, 0, 0,
	0, 0, 0, 0, 109, 0, 160, 147, 183, 0,
	148, 158, 129, 175, 154, 182, 193, 194, 173, 191,
	162, 99, 143, 89, 152, 159, 0, 108, 0, 92,
	172, 181, 105, 163, 95, 179, 169, 170, 135, 121,
	122, 165, 93, 94, 0, 157, 112, 151, 116, 111,
	145, 176, 177, 110, 202, 100, 189, 190, 97, 101,
	188, 142, 187, 174, 180, 136, 133, 96, 178, 134,
	132, 124, 0, 114, 118, 149, 131, 150, 119, 139,
	138, 140, 0, 144, 0, 0, 0, 168, 185, 203,
	204, 0, 0, 195, 196, 197, 198, 0, 0, 0,
	141, 102, 120, 164, 123, 130, 156, 201, 0, 161,
	106, 184, 166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 91, 0,
	90, 98, 127, 199, 200, 113, 155, 115, 186, 125,
	103, 128, 0, 0, 167, 137, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 153, 0, 107, 0, 171, 117, 0, 126,
	0, 0, 0, 0, 0, 0, 109, 0, 160, 147,
	183, 0, 148, 158, 129, 175, 154, 182, 193, 194,
	173, 191, 162, 99, 143, 89, 152, 159, 0, 108,
	0, 92, 172, 181, 105, 163, 95, 179, 169, 170,
	135, 121, 122, 165, 93, 94, 0, 157, 112, 151,
	116, 111, 145, 176, 177, 110, 202, 100, 189, 190,
	97, 101, 188, 142, 187, 174, 180, 136, 133, 96,
	178, 134, 132, 124, 0, 114, 118, 149, 131, 150,
	119, 139, 138, 140, 0, 144, 0, 0, 0, 168,
	185, 203, 204, 0, 0, 195, 196, 197, 198, 0,
	0, 0, 141, 102, 120, 164, 123, 130, 156, 201,
	0, 161, 106, 184, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 0,
	91, 0, 90, 98, 127, 199, 200, 113, 155, 115,
	186, 125, 103, 128, 0, 0, 167, 137, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 153, 0, 107, 0, 171, 117,
	0, 126, 0, 0, 0, 0, 0, 0, 109, 0,
	160, 147, 183, 0, 148, 158, 129, 175, 154, 182,
	193, 194, 173, 191, 162, 99, 143, 89, 152, 159,
	0, 108, 0, 92, 172, 181, 105, 163, 95, 179,
	169, 170, 135, 121, 122, 165, 93, 94, 0, 157,
	112, 151, 116, 111, 145, 176, 177, 110, 202, 100,
	189, 190, 97, 101, 188, 142, 187, 174, 180, 136,
	133, 96, 178, 134, 132, 124, 0, 114, 118, 149,
	131, 150, 119, 139, 138, 140, 0, 144, 0, 0,
	0, 168, 185, 203, 204, 0, 0, 195, 196, 197,
	198, 0, 0, 0, 141, 102, 120, 164, 123, 130,
	156, 201, 0, 161, 106, 184, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 98, 127, 199, 200, 0,
	155, 115, 186, 0, 103,
}
var yyPact = [...]int{

	2283, -1000, -185, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1085, 1132, -1000, -1000, -1000, -1000, -1000, -1000, 934,
	605, 237, 292, 45, 11344, 289, 851, 11828, -1000, 87,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 848, -1000, -1000,
	-1000, -1000, -1000, 1079, 1083, 936, 1064, 1019, -1000, 6341,
	198, 9879, 11102, 5572, -1000, 658, 268, 11828, -127, 11586,
	193, 193, 11586, 193, -1000, 288, 11828, -1000, 11828, 192,
	649, 192, 192, 192, 11828, -1000, 322, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11828, 645, 1039, 185, 3682,
	3682, 3682, 3682, 105, 3682, -72, 951, -1000, -1000, -1000,
	-1000, 3682, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 592, 1041, 7118, 7118, 1085, -1000, 848, -1000,
	-1000, -1000, 1032, -1000, -1000, 468, 1107, -1000, 8146, 320,
	-1000, 7118, 57, 852, -1000, -1000, 852, -1000, -1000, 309,
	-1000, -1000, 7632, 7632, 7632, 7632, 7632, 7632, 7632, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 852, -1000, 6861, 852, 852, 852, 852,
	852, 852, 852, 852, 7118, 852, 852, 852, 852, 852,
	852, 852, 852, 852, 1771, 852, 852, 852, 852, 10860,
	755, 1005, -1000, -1000, -1000, 1061, 8885, 9637, 11828, 832,
	-1000, 833, 5302, -53, -1000, -1000, -1000, 390, 9382, -1000,
	-1000, -1000, 1035, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 782, -1000, 2046, 11586, 3682, 234, 847, 643, 402,
	640, 948, 11828, 10605, 3682, 211, 11828, 1052, 946, 11828,
	632, 624, -1000, 5032, -1000, 3682, 3682, 3682, 3682, 3682,
	3682, 3682, 3682, -1000, -1000, -1000, -1000, -1000, -1000, 3682,
	3682, -1000, -17, -1000, 11828, -1000, -1000, -1000, -1000, 1127,
	323, 648, 319, 850, -1000, 487, 1079, 592, 1019, 9127,
	965, -1000, -1000, 11828, -1000, 7118, 7118, 541, -1000, 10363,
	-1000, -1000, 3952, 348, 7632, 475, 414, 7632, 7632, 7632,
	7632, 7632, 7632, 7632, 7632, 7632, 7632, 7632, 7632, 7632,
	7632, 7632, 511, 1771, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 620, -1000, 848, 731, 731, -7, -7, -7,
	-7, -7, -7, 7889, 5827, 592, 765, 382, 6861, 6341,
	6341, 7118, 7118, 12070, 12070, 6341, 1070, 366, 382, 12070,
	-1000, 592, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 32, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6341,
	6341, 6341, 6341, 117, 11828, -1000, 12070, 9879, 9879, 9879,
	9879, 9879, -1000, 986, 985, -1000, 979, 973, 997, 11828,
	-1000, 762, 8885, 287, 852, -1000, 10121, -1000, -1000, 117,
	742, 9879, 11828, -1000, -1000, 4762, 833, -53, 825, -1000,
	-96, -73, 6598, 334, -1000, -1000, -1000, -1000, 3142, 463,
	1295, -117, -15, -1000, -1000, -1000, -1000, 893, -1000, 893,
	169, 893, 893, 893, 15, 15, 15, 15, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 933, 919, -1000, 893, 893,
	893, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	900, 194, 900, 894, 894, 915, -1000, 11828, -146, 587,
	3682, 1047, 3682, 11828, -1000, 1859, 11828, -1000, 11828, -1000,
	-1000, 11828, 3682, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 418, -1000,
	-1000, -1000, -1000, 1014, 7118, 7118, 4492, 7118, -1000, -1000,
	-1000, 1041, -1000, 1070, 1082, -1000, 1027, 1023, 6341, -1000,
	-1000, 348, 362, -1000, -1000, 562, -1000, -1000, -1000, -1000,
	318, 852, -1000, 1757, -1000, -1000, -1000, -1000, 475, 7632,
	7632, 7632, 298, 1757, 1742, 384, 1013, -7, 6, 6,
	-8, -8, -8, -8, -8, 176, 176, -1000, -1000, -1000,
	-1000, 592, -1000, -1000, -1000, 592, 6341, 831, -1000, -1000,
	7118, -1000, 592, 760, 760, 479, 500, 870, -1000, 315,
	857, 760, 6341, 466, -1000, 7118, 592, -1000, -1000, 760,
	592, 760, 760, 845, 852, -1000, 843, -1000, 387, 1005,
	910, 943, 759, -1000, -1000, -1000, -1000, 970, -1000, 969,
	-1000, -1000, -1000, -1000, -1000, 259, 202, 195, 11586, -1000,
	1104, 9879, 826, -1000, -1000, 825, -53, -26, -1000, -1000,
	-1000, 382, -1000, -1000, 585, 812, 2872, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 901, 942, 172, 177, 321, 297,
	582, 11586, -1000, -1000, -1000, 433, 304, 1123, -1000, 168,
	-1000, 166, 537, -1000, -193, -1000, -18, -1000, -1000, 501,
	15, 15, 893, 15, -1000, -1000, 334, 1033, 334, 334,
	334, 536, 536, -150, -150, -1000, -1000, 497, 900, -1000,
	-1000, -1000, 496, -1000, 11828, 11586, 3682, -1000, 4222, -1000,
	-1000, -1000, -1000, -1000, 1055, -1000, 716, 1224, 245, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	116, 295, -1000, 3682, -1000, 453, 11828, 11828, 995, 382,
	382, 314, -1000, -1000, 11828, -1000, -1000, -1000, -1000, 745,
	-1000, -1000, -1000, 3412, 6341, -1000, 298, 1757, 1660, -1000,
	7632, 7632, -1000, -1000, 760, 6341, 382, -1000, -1000, -1000,
	1321, 511, 1321, 7632, 7632, 4492, 7632, 7632, -140, 846,
	394, -1000, 7118, 459, -1000, -1000, -1000, -1000, -1000, 940,
	12070, 852, -1000, 8643, 11586, 1085, 12070, 7118, 7118, -1000,
	-1000, 7118, 899, -1000, 7118, -1000, -1000, -1000, 852, 852,
	852, 705, -1000, 1085, 826, -1000, -1000, -1000, -105, -78,
	-1000, -1000, 3142, -1000, 3142, 11586, 1116, -1000, 566, 561,
	-1000, 560, -1000, -1000, 167, -1000, -1000, -175, -1000, -1000,
	-1000, -1000, 893, -1000, 852, -116, -1000, -1000, -1000, -1000,
	-1000, -1000, 692, 334, 334, 15, 334, -1000, 391, -1000,
	-1000, -1000, 727, -1000, 725, -1000, 52, 39, -1000, 810,
	-1000, 719, 819, 939, -1000, 809, -1000, 374, 1076, 97,
	-1000, 175, -1000, 11586, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11586, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11828, -1000, -1000, -1000, -1000, -1000,
	11586, 182, -1000, -1000, 531, 7118, -1000, -1000, -1000, 4222,
	-1000, 1104, 9879, -1000, -1000, 592, -1000, 7632, 1757, 1757,
	-1000, -1000, 592, 893, 893, -1000, 893, 894, -1000, -1000,
	893, 69, 893, 68, 592, 592, 191, 883, -1000, 135,
	100, 852, -136, -1000, 382, 7118, -1000, 1034, 732, 758,
	-1000, -1000, 6084, 592, 715, 313, 705, 1079, -1000, 382,
	382, 382, 11586, 382, 11586, 11586, 11586, 8401, 11586, 1079,
	-1000, -1000, -1000, -1000, 2872, -1000, 700, -1000, 893, 249,
	249, -1000, -1000, -1000, 164, -1000, 55, -1000, 592, 893,
	-1000, -1000, -1000, 334, -1000, -1000, -1000, 15, 528, 15,
	-21, -40, 494, -1000, 489, 11586, 11586, 11828, 4222, 3142,
	201, 1114, -1000, -1000, 11586, -1000, -1000, -1000, 886, -1000,
	-1000, -1000, -1000, 1043, 11586, -1000, -1000, 382, 1089, 794,
	-1000, 1757, -1000, -1000, 163, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 7632, 7632, -1000, 7632, 7632, 7632,
	592, 527, 382, 134, -1000, 852, -1000, -1000, 907, 11586,
	11586, -1000, -1000, 698, -1000, 690, 690, 690, 287, -1000,
	-1000, 200, 11586, -1000, 917, -1000, -1000, 408, 90, 885,
	11586, 28, -150, -1000, -1000, -1000, 334, -1000, 334, -1000,
	-1000, 687, 661, 675, 884, 882, -1000, -1000, 11586, -1000,
	-1000, -1000, -1000, -1000, 881, 11586, 852, 189, 1084, 1081,
	-1000, -1000, 247, 247, 247, 247, 82, -1000, -1000, 1120,
	-1000, 852, -1000, 848, 312, -1000, 11586, -1000, -1000, -1000,
	-1000, -1000, 200, -1000, 548, 363, 506, -154, -1000, 1119,
	-1000, -1000, 1117, 880, -1000, -1000, -1000, -1000, -1000, -1000,
	1104, 11586, 11586, 682, -1000, 11586, 666, 115, 129, -1000,
	7118, 7118, -1000, -1000, -1000, -1000, 592, 85, -156, 12070,
	758, 592, 11586, -1000, -1000, -1000, 480, -1000, -1000, 11586,
	249, 249, 11586, -1000, 614, 600, -145, 11586, 437, 598,
	847, 595, -1000, 11586, 879, 382, 723, -1000, 993, -143,
	-162, 695, -1000, -1000, -1000, -1000, -1000, -1000, 591, 1104,
	-1000, -1000, -182, -1000, -1000, 7118, -1000, -146, -1000, 115,
	1009, 11586, -1000, 991, -1000, 180, -1000, 852, 439, -1000,
	-1000, 107, 581, -147, 11828, 7118, -1000, 103, -1000, -157,
	866, 439, 852, -171, 11586, -1000, 7375, -1000, 578, 247,
	592, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1356, 23, 625, 1351, 1346, 1344, 1342, 1341, 1336,
	1335, 1333, 1330, 1329, 1327, 1325, 1324, 1321, 1320, 1317,
	1313, 1312, 1307, 1306, 299, 1304, 1303, 1298, 67, 1295,
	75, 1289, 1288, 44, 134, 50, 41, 705, 1287, 33,
	91, 112, 1285, 46, 1282, 1278, 81, 1277, 61, 1274,
	1273, 48, 1272, 1271, 27, 9, 1270, 3, 1269, 1265,
	69, 312, 1264, 1263, 1261, 1256, 1255, 1253, 53, 10,
	13, 18, 16, 1252, 108, 7, 1251, 52, 1247, 1246,
	1244, 1243, 32, 1242, 55, 1237, 26, 54, 1236, 5,
	60, 37, 29, 11, 78, 58, 1234, 36, 57, 47,
	1233, 1232, 550, 1224, 1222, 1219, 1218, 1217, 1215, 536,
	486, 1213, 1211, 1208, 43, 0, 304, 30, 74, 1207,
	45, 1206, 1579, 80, 65, 22, 1205, 42, 202, 39,
	1203, 1200, 40, 66, 1199, 76, 72, 1194, 1193, 1184,
	1182, 1181, 238, 20, 25, 1180, 1178, 1177, 15, 49,
	31, 51, 56, 1175, 1174, 28, 1173, 8, 14, 1,
	59, 1172, 1171, 1170, 1169, 34, 19, 1168, 17, 1167,
	12, 1165, 1164, 6, 1162, 21, 1159, 2, 1157, 4,
	1155, 1154, 1153, 1152, 1151, 1149, 1148, 1147, 1266, 650,
	1145, 1142, 1140, 1139, 82,
}
var yyR1 = [...]int{

	0, 186, 187, 187, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 190,
	190, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	181, 181, 181, 182, 182, 182, 182, 182, 182, 184,
	184, 184, 185, 185, 120, 120, 179, 179, 178, 177,
	177, 176, 176, 175, 16, 162, 163, 163, 163, 163,
	152, 134, 134, 134, 134, 134, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 183, 183, 183, 138, 138, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 137,
	137, 137, 137, 137, 137, 139, 139, 139, 139, 139,
	135, 135, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 141, 141, 141, 141, 141, 141, 141, 141, 151,
	151, 142, 142, 149, 149, 150, 150, 150, 148, 148,
	148, 145, 145, 146, 146, 147, 147, 147, 143, 143,
	143, 144, 144, 144, 154, 154, 171, 171, 170, 170,
	170, 170, 161, 161, 167, 167, 167, 167, 167, 167,
	167, 160, 160, 169, 169, 168, 155, 155, 155, 155,
	155, 156, 157, 157, 157, 157, 158, 158, 159, 159,
	164, 164, 164, 165, 165, 165, 166, 166, 166, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 191, 191, 192, 192, 192, 192, 192, 192,
	192, 174, 172, 172, 173, 173, 13, 14, 14, 14,
	14, 14, 15, 15, 17, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 107, 107,
	104, 104, 105, 105, 106, 106, 106, 108, 108, 108,
	131, 131, 131, 19, 19, 21, 21, 22, 23, 20,
	20, 20, 20, 20, 193, 24, 25, 25, 26, 26,
	26, 30, 30, 30, 28, 28, 29, 29, 35, 35,
	34, 34, 36, 36, 36, 36, 119, 119, 119, 118,
	118, 38, 38, 39, 39, 40, 40, 41, 41, 41,
	53, 53, 89, 89, 91, 91, 42, 42, 42, 42,
	43, 43, 44, 44, 45, 45, 126, 126, 125, 125,
	125, 124, 124, 47, 47, 47, 49, 48, 48, 48,
	48, 50, 50, 52, 52, 51, 51, 54, 54, 54,
	54, 55, 55, 37, 37, 37, 37, 37, 37, 37,
	103, 103, 57, 57, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 67, 67, 67, 67, 67, 67,
	58, 58, 58, 58, 58, 58, 58, 33, 33, 68,
	68, 68, 74, 69, 69, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 65, 65, 65,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 194, 194, 66, 66, 66, 66,
	31, 31, 31, 31, 31, 129, 129, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 133, 133, 133, 133, 133, 133, 133, 78, 78,
	32, 32, 76, 76, 77, 79, 79, 75, 75, 75,
	60, 60, 60, 60, 60, 60, 60, 60, 62, 62,
	62, 80, 80, 81, 81, 82, 82, 83, 83, 84,
	85, 85, 85, 86, 86, 86, 86, 87, 87, 87,
	59, 59, 59, 59, 59, 59, 88, 88, 88, 88,
	92, 92, 70, 70, 72, 72, 71, 73, 93, 93,
	97, 94, 94, 98, 98, 98, 96, 96, 96, 121,
	121, 121, 101, 101, 109, 109, 110, 110, 102, 102,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	112, 112, 112, 113, 113, 116, 116, 117, 117, 122,
	122, 123, 123, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 188, 189, 127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 4, 6, 5, 5, 5, 11,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	2, 4, 0, 5, 0, 1, 0, 2, 1, 0,
	2, 1, 3, 3, 4, 4, 1, 3, 3, 3,
	2, 3, 1, 1, 1, 1, 2, 2, 3, 4,
	3, 3, 3, 3, 4, 3, 5, 5, 2, 3,
	2, 3, 2, 3, 0, 3, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 2, 2, 2, 2, 1, 3, 3, 2, 1,
	1, 1, 4, 4, 4, 5, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 3,
	3, 0, 1, 0, 1, 0, 2, 1, 0, 3,
	3, 0, 1, 2, 5, 4, 1, 2, 2, 3,
	2, 3, 0, 1, 2, 3, 3, 2, 3, 2,
	2, 1, 1, 1, 3, 2, 1, 4, 4, 7,
	7, 13, 1, 1, 2, 2, 0, 1, 1, 3,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	11, 13, 7, 7, 7, 12, 7, 7, 7, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 3, 3, 3, 3, 4, 3, 6,
	4, 2, 4, 2, 2, 2, 2, 3, 1, 1,
	0, 1, 0, 1, 0, 2, 2, 0, 2, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 1, 2, 1, 2, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -186, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 142, 115, 135, 48, 163, 164,
	166, 167, 25, 136, 137, 140, 141, -188, 8, 256,
	52, -187, 275, -82, 15, -26, 5, -24, -193, -24,
	-24, -24, -24, -24, -162, 52, -120, 120, 69, 150,
	248, 117, 132, 118, 133, -102, 120, 122, 118, 118,
	119, 120, 248, 117, 118, -51, -122, 55, -115, 157,
	264, 20, 163, 176, 177, 168, 201, 192, 265, 155,
	189, 193, 235, 274, 64, 166, 244, 126, 161, 138,
	187, 183, 180, 27, 207, 271, 182, 129, 208, 212,
	236, 173, 174, 238, 205, 31, 131, 266, 33, 146,
	239, 210, 204, 200, 203, 172, 199, 37, 214, 213,
	215, 234, 195, 156, 217, 184, 18, 141, 144, 209,
	211, 181, 158, 124, 148, 270, 240, 179, 145, 159,
	140, 243, 154, 167, 237, 175, 246, 36, 221, 170,
	171, 128, 164, 152, 197, 147, 185, 186, 202, 169,
	198, 165, 149, 142, 245, 222, 272, 196, 194, 190,
	191, 153, 120, 150, 151, 227, 228, 229, 230, 267,
	268, 241, 188, 223, 224, 118, 105, 193, 111, 225,
	119, 31, 148, -131, 118, -104, 151, 227, 228, 229,
	230, 55, 237, 236, 231, -122, 165, -127, -127, -127,
	-127, -127, -2, -86, 17, 16, -5, -3, -188, 6,
	20, 21, -30, 38, 39, -25, -36, 96, -37, -122,
	-56, 71, -61, 28, 55, -115, 23, -60, -57, -75,
	-73, -74, 105, 106, 94, 95, 102, 72, 107, -65,
	-63, -64, -66, 57, 56, 65, 58, 59, 60, 61,
	66, 67, 68, -116, -71, -188, 42, 43, 257, 258,
	259, 260, 263, 261, 74, 32, 247, 255, 254, 253,
	251, 252, 249, 250, 273, 123, 248, 100, 256, -102,
	-39, -40, -41, -42, -53, -74, -188, -51, 11, -46,
	-51, -94, -130, 165, -98, 237, 236, -117, -96, -116,
	-114, 235, 193, 234, 55, -115, 116, 70, 22, 24,
	219, 73, 105, 16, 74, 104, 257, 111, 46, 249,
	250, 247, 259, 260, 248, 225, 28, 10, 25, 136,
	21, 98, 113, 77, 78, 139, 23, 137, 68, 19,
	49, 130, 11, 13, 14, 123, 122, 89, 119, 44,
	8, 107, 26, 86, 40, 134, 42, 87, 17, 251,
	252, 30, 263, 143, 100, 47, 34, 71, 66, 50,
	242, 69, 15, 45, 132, 88, 114, 256, 43, 117,
	6, 262, 29, 135, 41, 118, 226, 76, 121, 67,
	5, 133, 9, 48, 51, 253, 254, 255, 32, 75,
	12, -163, -152, 55, 119, -51, 256, -116, -110, 123,
	-110, -116, -110, 118, -51, -51, -109, 123, 55, -109,
	-109, -109, -51, 108, -51, 55, 29, 248, 55, 148,
	118, 149, 120, -128, -188, -117, -128, -128, -128, 152,
	153, -128, -105, 232, 50, -128, -189, 54, -87, 19,
	30, -37, -122, -83, -84, -37, -82, -2, -24, 34,
	-28, 21, 63, 11, -119, 70, 69, 86, -118, 22,
	-116, 57, 108, -37, -58, 89, 71, 87, 88, 73,
	91, 90, 101, 94, 95, 96, 97, 98, 99, 100,
	92, 93, 104, 273, 79, 80, 81, 82, 83, 84,
	85, -103, -188, -74, -188, 109, 110, -61, -61, -61,
	-61, -61, -61, -61, -188, -2, -69, -37, -188, -188,
	-188, -188, -188, -188, -188, -188, -188, -78, -37, -188,
	-194, -188, -194, -194, -194, -194, -194, -194, -194, -133,
	105, 193, 138, 187, -136, -135, 197, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 192, 265, -188,
	-188, -188, -188, -52, 26, -51, 29, 53, -47, -49,
	-48, -50, 40, 44, 46, 41, 42, 43, 47, -126,
	22, -39, -188, -125, 144, -124, 22, -122, 57, -51,
	-46, -190, 53, 11, 51, 53, -94, 165, -95, -99,
	238, 240, 79, -121, -116, 57, 28, 29, 54, 53,
	-153, -134, -138, -135, -140, -139, -141, -136, -137, 189,
	193, 190, 105, 194, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 196, 207, 29, 138, 185, 186,
	187, 188, 208, 209, 210, 211, 212, 213, 214, 215,
	179, 180, 182, 183, 184, -116, -128, 120, -179, 51,
	55, 71, 55, 50, -51, -51, 242, -128, 121, -51,
	23, 50, -51, 55, 55, -123, -122, -114, -128, -128,
	-128, -128, -128, -128, -128, -128, -128, -128, -107, 226,
	233, -51, 9, 89, 53, 18, 108, 53, -85, 24,
	25, -86, -189, -30, -62, -116, 58, 61, -29, 41,
	-51, -37, -37, -67, 66, 71, 67, 68, -118, 96,
	-123, -117, -114, -61, -68, -71, -74, 62, 89, 87,
	88, 73, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -129, 55, 57,
	-133, 55, -60, -60, -116, -35, 21, -34, -36, -189,
	53, -189, -2, -34, -34, -37, -37, -75, -116, -122,
	-75, -34, -28, -76, -77, 75, -75, -189, 191, -34,
	-35, -34, -34, -90, 144, -51, -93, -97, -75, -40,
	-41, -41, -40, -41, 40, 40, 40, 45, 40, 45,
	40, -48, -122, -189, -54, 48, 122, 49, -188, -124,
	-90, 51, -39, -51, -98, -95, 53, 239, 241, 242,
	50, -37, -144, 105, 104, -164, -165, -166, -117, 57,
	58, -152, -154, -155, -167, -156, 124, 128, 129, 133,
	-160, 126, 119, 134, 66, 71, 28, 50, 219, 124,
	134, 133, 64, -147, 276, 216, -145, 222, -142, 52,
	-142, -142, 191, -142, -142, -142, -143, 193, -143, -143,
	-143, 52, 52, -142, -142, -142, -149, 52, 181, -149,
	-149, -150, 52, -150, 50, 51, -51, -177, 267, -178,
	55, -128, 23, -128, -51, -111, 116, 113, 114, -174,
	112, 219, 193, 64, 28, 15, 257, 144, 272, 55,
	145, -51, -51, -51, -128, -106, 11, 89, 36, -37,
	-37, -123, -84, -87, -101, 19, 11, 32, 32, -34,
	66, 67, 68, 108, -188, -68, -61, -61, -61, -33,
	139, 70, -189, -189, -34, 53, -37, -189, -189, -189,
	53, 51, 22, 53, 11, 108, 53, 11, -189, -34,
	-79, -77, 77, -37, -189, -189, -189, -189, -189, -59,
	29, 32, -2, -188, -188, -55, 53, 12, 79, -44,
	-43, 50, 51, -45, 50, -43, 40, 40, 119, 119,
	119, -91, -116, -55, -39, -55, -99, -100, 243, 240,
	246, 55, 53, -166, 79, 52, 50, 134, -160, -160,
	55, -160, 55, 55, -158, -116, 66, 57, 58, 59,
	-57, 66, 247, 65, 217, 9, 134, 134, 57, 277,
	-146, 223, 58, -143, -143, -142, -143, -144, 29, -144,
	-144, -144, -151, 57, -151, -148, 267, 268, -148, 58,
	-149, 58, -51, -116, -128, -176, -175, -117, -181, 22,
	-127, -120, -192, 150, 125, 130, 129, 55, 124, 128,
	144, -180, 150, 125, 126, 130, 129, 55, 119, 134,
	124, 128, 144, 133, -112, -113, 121, 22, 119, 134,
	144, 116, -128, -108, 87, 12, -122, -122, 37, 108,
	-51, -38, 11, 96, -117, -35, -33, 70, -61, -61,
	-189, -36, -132, 105, 189, 138, 187, 183, 205, 206,
	195, 221, 185, 222, -129, -132, -61, -61, -117, -61,
	-61, 264, -82, 78, -37, 76, -92, 50, -93, -70,
	-72, -71, -188, -2, -88, -116, -91, -82, -97, -37,
	-37, -37, 52, -37, -188, -188, -188, -189, 53, -82,
	-55, 240, 244, 245, -165, -166, -169, -168, -116, 10,
	9, 55, 55, 55, 130, -183, 273, -142, -188, 247,
	54, -144, -144, -143, -144, 55, 105, 54, 53, 54,
	185, 185, 53, 54, 53, 52, 51, 50, 53, 79,
	-182, 19, 158, 159, -191, 119, 134, -127, -116, -127,
	-116, -51, -127, -116, 126, -155, 57, -37, -55, -39,
	-189, -61, -189, -142, -142, -142, -150, -142, 174, -142,
	174, -189, -189, -189, 53, 19, -189, 53, 19, -188,
	-32, 262, -37, 27, -92, 53, -189, -189, -189, 53,
	108, -189, -86, -89, -116, -89, -89, -89, -125, -116,
	-86, 54, 53, -142, -157, 154, 155, 29, 156, -157,
	134, 193, 186, -189, -142, -144, -143, 57, -143, 224,
	224, 58, 58, -89, -116, -51, -175, -166, 121, 20,
	6, 8, 9, 10, -116, 52, 26, -116, -80, 13,
	-143, 55, -61, -61, -61, -61, -61, -189, 57, 134,
	-72, 32, -2, -188, -116, -116, 53, 54, -189, -189,
	-189, -54, -171, -170, 51, 131, 64, 267, -168, 50,
	66, 157, 50, -158, 191, -148, -144, -144, 54, 54,
	54, 52, 52, -159, -116, 52, -89, -188, 124, -81,
	14, 16, -189, -189, -189, -189, -31, 89, 267, 9,
	-70, -2, 108, -116, -170, 55, -161, 79, 57, 269,
	9, 10, 52, -55, -89, -89, -184, 53, 51, -89,
	54, -172, -173, 144, 134, -37, -69, -189, 265, 47,
	270, -93, -189, -116, 58, -116, -157, -157, -159, 54,
	54, -185, 267, -116, -57, -188, 54, -179, -189, 53,
	-116, 52, 37, 266, 271, 54, -55, 274, -37, -177,
	-173, 32, -89, 37, 127, -188, -189, 146, 54, 267,
	-51, -37, 147, 270, 52, -189, -188, 271, -159, -61,
	143, 54, -189, -189,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 585, 0, 344, 344, 344, 344, 344, 344, 0,
	84, 638, 0, 0, 0, 0, -2, 334, 335, 0,
	337, 338, 876, 876, 876, 876, 876, 0, 33, 34,
	874, 1, 3, 593, 0, 0, 348, 351, 346, 0,
	638, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	636, 636, 0, 636, 85, 0, 0, 639, 0, 634,
	0, 634, 634, 634, 0, 293, 415, 659, 660, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 0, 0, 0, 0, 877,
	877, 877, 877, 0, 877, 322, 311, 313, 314, 315,
	316, 877, 331, 332, 321, 333, 336, 339, 340, 341,
	342, 343, 27, 597, 0, 0, 585, 29, 0, 344,
	349, 350, 354, 352, 353, 345, 0, 362, 366, 0,
	423, 0, 428, 430, -2, -2, 0, 465, 466, 467,
	468, 469, 0, 0, 0, 0, 0, 0, 0, 493,
	494, 495, 496, 570, 571, 572, 573, 574, 575, 576,
	577, 432, 433, 567, 617, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 0, 524, 524, 524, 524,
	524, 524, 524, 524, 0, 0, 0, 0, 0, 0,
	0, 373, 375, 376, 377, 396, 0, 398, 0, 0,
	41, 45, 0, 850, 621, -2, -2, 0, 0, 657,
	658, -2, 770, -2, 655, 656, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
	677, 678, 679, 680, 681, 682, 683, 684, 685, 686,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 0, 96, 0, 0, 877, 0, 86, 0, 0,
	0, 0, 0, 0, 877, 0, 0, 0, 0, 0,
	0, 0, 292, 0, 294, 877, 877, 877, 877, 877,
	877, 877, 877, 303, 878, 879, 304, 305, 306, 877,
	877, 308, 0, 323, 0, 317, 28, 875, 22, 0,
	0, 594, 0, 586, 587, 590, 593, 27, 351, 0,
	356, 355, 347, 0, 363, 0, 0, 0, 367, 0,
	369, 370, 0, 426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 450, 451, 452, 453, 454, 455,
	456, 429, 0, 443, 0, 0, 0, 485, 486, 487,
	488, 489, 490, 0, 358, 27, 0, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 354, 0, 559, 0,
	515, 0, 516, 517, 518, 519, 520, 521, 522, 523,
	551, 0, 553, 554, 555, 556, 557, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 150, 151, 0,
	358, 0, 0, 43, 0, 414, 0, 0, 0, 0,
	0, 0, 403, 0, 0, 406, 0, 0, 0, 0,
	397, 0, 0, 417, 817, 399, 0, 401, 402, -2,
	0, 0, 0, 39, 40, 0, 46, 850, 48, 49,
	0, 0, 0, 201, 629, 630, 631, 627, 240, 0,
	100, 195, 191, 102, 103, 104, 105, 181, 128, 181,
	181, 181, 181, 181, 198, 198, 198, 198, 162, 163,
	164, 165, 166, 167, 168, 0, 0, 145, 181, 181,
	181, 149, 171, 172, 173, 174, 175, 176, 177, 178,
	183, 183, 183, 185, 185, 0, 64, 0, 89, 0,
	877, 0, 877, 0, 94, 0, 0, 259, 0, 287,
	635, 0, 877, 290, 291, 416, 661, 662, 295, 296,
	297, 298, 299, 300, 301, 302, 307, 310, 324, 318,
	319, 312, 598, 0, 0, 0, 0, 0, 589, 591,
	592, 597, 30, 354, 0, 578, 0, 0, 0, 357,
	25, 424, 425, 427, 444, 0, 446, 448, 368, 364,
	0, 568, -2, 434, 435, 459, 460, 461, 0, 0,
	0, 0, 457, 439, 0, 470, 471, 472, 473, 474,
	475, 476, 477, 478, 479, 480, 481, 484, 535, 536,
	492, 0, 482, 483, 491, 0, 0, 359, 360, 462,
	0, 616, 27, 0, 0, 0, 0, 0, 567, 0,
	0, 0, 0, 565, 562, 0, 0, 525, 552, 0,
	0, 0, 0, 0, 0, 413, 421, 618, 0, 374,
	392, 394, 0, 389, 404, 405, 407, 0, 409, 0,
	411, 412, 378, 379, 380, 0, 0, 0, 0, 400,
	421, 0, 421, 42, 622, 47, 0, 0, 52, 53,
	623, 624, 625, 202, 0, 95, 241, 243, 246, 247,
	248, 97, 98, 99, 0, 226, 0, 0, 0, 0,
	0, 236, 221, 222, 107, 0, 0, 0, 118, 0,
	120, 122, 0, 106, 0, 197, 193, 192, 127, 0,
	198, 198, 181, 198, 156, 157, 201, 0, 201, 201,
	201, 0, 0, 188, 188, 148, 139, 0, 183, 141,
	142, 143, 0, 144, 0, 0, 877, 66, 0, 87,
	88, 67, 637, 68, 70, 876, 84, 0, 650, 260,
	640, 641, 642, 643, 644, 645, 646, 647, 648, 649,
	0, 0, 286, 877, 289, 327, 0, 0, 0, 595,
	596, 0, 588, 23, 0, 632, 633, 579, 580, 371,
	445, 447, 449, 0, 358, 436, 457, 440, 0, 437,
	0, 0, 431, 497, 0, 0, 464, -2, 500, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	0, 563, 0, 0, 514, 526, 527, 528, 529, 610,
	0, 0, -2, 0, 0, 585, 0, 0, 0, 386,
	393, 0, 0, 387, 0, 388, 408, 410, 0, 0,
	0, 0, 384, 585, 421, 38, 50, 51, 0, 0,
	57, 203, 0, 244, 0, 0, 0, 214, 0, 0,
	217, 0, 219, 220, 0, 237, 108, 124, 110, 111,
	112, 113, 181, 115, 0, 0, 119, 121, 123, 196,
	101, 194, 0, 201, 201, 198, 201, 158, 0, 159,
	160, 161, 0, 179, 0, 146, 0, 0, 147, 0,
	140, 0, 0, 0, 65, 90, 91, 0, 73, 0,
	249, 0, 876, 0, 274, 275, 276, 277, 278, 279,
	280, 876, 0, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 0, 876, 651, 652, 653, 654,
	0, 0, 288, 309, 0, 0, 325, 326, 599, 0,
	24, 421, 0, 365, 569, 0, 438, 0, 458, 441,
	498, 361, 0, 181, 181, 540, 181, 185, 543, 544,
	181, 546, 181, 549, 0, 0, 0, 0, 568, 0,
	0, 0, 560, 513, 566, 0, 31, 0, 610, 600,
	612, 614, 0, 27, 0, 606, 0, 593, 619, 422,
	620, 390, 0, 395, 0, 0, 0, 398, 0, 593,
	37, 54, 55, 56, 242, 245, 0, 223, 181, 0,
	0, 215, 216, 218, 0, 109, 0, 114, 0, 181,
	182, 152, 153, 201, 154, 199, 200, 198, 0, 198,
	0, 0, 0, 186, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 72, 0, 272, 273, 253, 0, 254,
	256, 257, 258, 0, 236, 252, 328, 329, 581, 372,
	499, 442, 502, 537, 198, 541, 542, 545, 547, 548,
	550, 504, 503, 505, 0, 0, 508, 0, 0, 0,
	0, 0, 564, 0, 32, 0, 615, -2, 0, 0,
	0, 44, 35, 0, 382, 0, 0, 0, 417, 385,
	36, 205, 0, 225, 227, 232, 233, 0, 0, 228,
	236, 0, 188, 116, 117, 155, 201, 180, 201, 189,
	190, 0, 0, 0, 0, 0, 92, 93, 0, 74,
	75, 76, 77, 78, 0, 0, 0, 237, 583, 0,
	538, 539, 0, 0, 0, 0, 530, 512, 561, 0,
	613, 0, -2, 0, 608, 607, 0, 391, 418, 419,
	420, 381, 204, 206, 0, 212, 0, 0, 224, 0,
	234, 235, 0, 0, 125, 126, 169, 170, 184, 187,
	421, 0, 0, 79, 238, 0, 0, 0, 0, 26,
	0, 0, 506, 507, 509, 510, 0, 0, 0, 0,
	603, 27, 0, 383, 207, 208, 0, 213, 210, 0,
	0, 0, 0, 61, 0, 0, 82, 0, 0, 0,
	86, 0, 282, 0, 0, 584, 582, 511, 0, 0,
	0, 611, -2, 609, 209, 211, 229, 230, 0, 421,
	62, 69, 0, 239, 80, 0, 250, 89, 281, 0,
	0, 0, 531, 0, 534, 0, 63, 0, 0, 255,
	283, 0, 0, 532, 0, 0, 81, 0, 251, 0,
	0, 0, 0, 0, 0, 83, 0, 533, 0, 0,
	0, 231, 284, 285,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 275,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 276, 3, 277, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:316
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:321
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:322
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:326
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:349
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:357
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:361
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:367
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:374
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:380
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:384
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:390
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:394
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:401
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:413
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:425
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:429
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:435
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:441
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:445
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:449
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:454
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:455
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:459
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:463
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:468
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:472
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:478
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:482
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:486
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:490
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:496
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:500
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:506
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:510
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:520
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:524
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:528
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:532
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:538
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:542
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:548
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:553
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:569
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:584
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:599
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:603
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:607
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:615
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:619
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:623
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:635
		{
			yyVAL.bytes = nil
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:639
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:643
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:648
		{
			yyVAL.bytes = nil
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:652
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:656
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:660
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:664
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:668
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:673
		{
			yyVAL.expr = nil
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:677
		{
			yyVAL.expr = yyDollar[2].boolVal
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:681
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:686
		{
			yyVAL.expr = nil
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:690
		{
			yyVAL.expr = yyDollar[4].expr
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:695
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:699
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:704
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:708
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:714
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:719
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:724
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:730
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:735
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:741
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:747
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:754
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:761
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:766
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:770
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:774
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:780
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:785
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:796
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:807
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:812
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:817
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:822
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:827
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:832
		{
			yyDollar[1].columnType.Default = NewBoolSQLVal(bool(yyDollar[3].boolVal))
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:837
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:842
		{
			yyDollar[1].columnType.Default = NewValArgWithOpt(yyDollar[3].bytes, yyDollar[4].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:847
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:852
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:857
		{
			yyDollar[1].columnType.OnUpdate = NewValArgWithOpt(yyDollar[4].bytes, yyDollar[5].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:862
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:867
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:872
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:877
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:882
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:887
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:893
		{
			yyVAL.bytes = nil
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:897
		{
			yyVAL.bytes = nil
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:901
		{
			yyVAL.bytes = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:907
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:912
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:922
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:926
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:930
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:998
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1002
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1006
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1010
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1014
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1020
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1024
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1030
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1034
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1038
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1042
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1046
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1050
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1054
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1058
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1062
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1066
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1070
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1074
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1078
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1082
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1086
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1090
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1094
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1098
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 170:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1103
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1109
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1113
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1117
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1121
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1125
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1129
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1133
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1137
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1143
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1148
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1153
		{
			yyVAL.optVal = nil
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1157
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1162
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1166
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1174
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1178
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1184
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1192
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1196
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1200
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1205
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1209
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1214
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1218
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1223
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1227
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1231
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1236
		{
			yyVAL.str = ""
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1240
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1244
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1249
		{
			yyVAL.str = ""
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1253
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1257
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1263
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1267
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1273
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1277
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1283
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1287
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1292
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1296
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1302
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1306
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1312
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1316
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1320
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1324
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1328
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1332
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1336
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1342
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1346
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1352
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1356
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1362
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1369
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1375
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1381
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1387
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 231:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1395
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1407
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1411
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1415
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1419
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1424
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1431
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1435
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1440
		{
			yyVAL.str = ""
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1444
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1448
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1456
		{
			yyVAL.str = yyDollar[1].str
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1460
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1464
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1470
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1474
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1478
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1484
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 250:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1488
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 251:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1502
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 252:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1516
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 253:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1525
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1529
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1533
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 256:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1546
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 257:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1556
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1561
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1566
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1570
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1602
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1608
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1612
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 284:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1618
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 285:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1622
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1628
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1634
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 288:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1642
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1647
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1655
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1659
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1665
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1669
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1674
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1680
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1684
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1688
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1693
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1697
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1701
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1705
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1709
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1713
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1717
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1721
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1725
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1729
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1733
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1737
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1747
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1751
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1755
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1759
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1763
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1767
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1771
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1781
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1787
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1791
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1797
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1801
		{
			yyVAL.str = "extended "
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1807
		{
			yyVAL.str = ""
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1811
		{
			yyVAL.str = "full "
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1817
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1821
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1825
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1831
		{
			yyVAL.showFilter = nil
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1835
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1839
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1845
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1849
		{
			yyVAL.str = SessionStr
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1853
		{
			yyVAL.str = GlobalStr
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1859
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1863
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1869
		{
			yyVAL.statement = &Begin{}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1873
		{
			yyVAL.statement = &Begin{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1879
		{
			yyVAL.statement = &Commit{}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1885
		{
			yyVAL.statement = &Rollback{}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1891
		{
			yyVAL.statement = &OtherRead{}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1895
		{
			yyVAL.statement = &OtherRead{}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1899
		{
			yyVAL.statement = &OtherRead{}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1903
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1907
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1912
		{
			setAllowComments(yylex, true)
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1916
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1922
		{
			yyVAL.bytes2 = nil
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1926
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1932
		{
			yyVAL.str = UnionStr
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1936
		{
			yyVAL.str = UnionAllStr
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1940
		{
			yyVAL.str = UnionDistinctStr
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1945
		{
			yyVAL.str = ""
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1949
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1953
		{
			yyVAL.str = SQLCacheStr
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1958
		{
			yyVAL.str = ""
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1962
		{
			yyVAL.str = DistinctStr
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1967
		{
			yyVAL.str = ""
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1971
		{
			yyVAL.str = StraightJoinHint
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1976
		{
			yyVAL.selectExprs = nil
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1980
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1986
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1990
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1996
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2000
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2004
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 365:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2008
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2013
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2017
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2021
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2028
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2033
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2037
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2043
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2047
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2057
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2061
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2065
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2071
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 381:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2075
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2081
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2085
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2091
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2095
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2108
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2112
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2116
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2120
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2126
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2128
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2132
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2134
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2138
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2140
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2143
		{
			yyVAL.empty = struct{}{}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2145
		{
			yyVAL.empty = struct{}{}
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2148
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2152
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2156
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2163
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2169
		{
			yyVAL.str = JoinStr
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2173
		{
			yyVAL.str = JoinStr
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2177
		{
			yyVAL.str = JoinStr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2183
		{
			yyVAL.str = StraightJoinStr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2189
		{
			yyVAL.str = LeftJoinStr
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2193
		{
			yyVAL.str = LeftJoinStr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2197
		{
			yyVAL.str = RightJoinStr
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2201
		{
			yyVAL.str = RightJoinStr
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2207
		{
			yyVAL.str = NaturalJoinStr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2211
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2221
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2225
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2231
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2235
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2240
		{
			yyVAL.indexHints = nil
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2244
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 419:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2248
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 420:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2252
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2257
		{
			yyVAL.expr = nil
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2261
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2267
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2271
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2275
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2279
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2283
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2287
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2291
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2297
		{
			yyVAL.str = ""
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2301
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2307
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2311
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2317
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2321
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2325
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2329
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2333
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2337
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2341
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 441:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2345
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 442:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2349
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2353
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2359
		{
			yyVAL.str = IsNullStr
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2363
		{
			yyVAL.str = IsNotNullStr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2367
		{
			yyVAL.str = IsTrueStr
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2371
		{
			yyVAL.str = IsNotTrueStr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2375
		{
			yyVAL.str = IsFalseStr
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2379
		{
			yyVAL.str = IsNotFalseStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2385
		{
			yyVAL.str = EqualStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2389
		{
			yyVAL.str = LessThanStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2393
		{
			yyVAL.str = GreaterThanStr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2397
		{
			yyVAL.str = LessEqualStr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2401
		{
			yyVAL.str = GreaterEqualStr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2405
		{
			yyVAL.str = NotEqualStr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2409
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2414
		{
			yyVAL.expr = nil
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2418
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2424
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2428
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2432
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2438
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2444
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2448
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2454
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2458
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2462
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2466
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2470
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2474
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2478
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2482
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2486
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2490
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2494
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2498
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2502
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2506
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2510
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2514
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2518
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2522
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2526
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2530
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2534
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2538
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2542
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2550
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2564
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2568
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2572
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2580
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2594
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 498:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2598
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 499:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2602
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2612
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2616
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 502:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2620
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 503:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2624
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 504:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2628
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 505:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2632
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 506:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2636
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 507:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2640
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 508:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2644
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 509:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2648
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2652
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 511:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2656
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 512:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2660
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2664
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2668
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2678
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2682
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2686
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2690
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2695
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2700
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2705
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2710
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2714
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2728
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2732
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2736
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2740
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2746
		{
			yyVAL.str = ""
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2750
		{
			yyVAL.str = BooleanModeStr
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2754
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 533:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2758
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2762
		{
			yyVAL.str = QueryExpansionStr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2768
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2772
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2778
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2782
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2786
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2790
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2794
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2798
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2804
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2808
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2812
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2816
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2820
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2824
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2828
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2832
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2838
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2842
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2846
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2850
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2854
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2858
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2862
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2867
		{
			yyVAL.expr = nil
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2871
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2876
		{
			yyVAL.str = string("")
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2880
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2886
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2890
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2896
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2901
		{
			yyVAL.expr = nil
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2905
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2911
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2915
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2919
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2925
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2929
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2933
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2937
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2941
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2945
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2949
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2953
		{
			yyVAL.expr = &NullVal{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2959
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2968
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2972
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2977
		{
			yyVAL.exprs = nil
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2981
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2986
		{
			yyVAL.expr = nil
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2990
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2995
		{
			yyVAL.orderBy = nil
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2999
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3005
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3009
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3015
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3020
		{
			yyVAL.str = AscScr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3024
		{
			yyVAL.str = AscScr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3028
		{
			yyVAL.str = DescScr
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3033
		{
			yyVAL.limit = nil
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3037
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3041
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3045
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3050
		{
			yyVAL.str = ""
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3054
		{
			yyVAL.str = ForUpdateStr
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3058
		{
			yyVAL.str = ShareModeStr
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3071
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3075
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3079
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3084
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3088
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 605:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3092
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3099
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3103
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3107
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 609:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3111
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3116
		{
			yyVAL.updateExprs = nil
		}
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3120
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3126
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3130
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3136
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3140
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3146
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3152
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3162
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3166
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3172
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3178
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3182
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3188
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3192
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3196
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3203
		{
			yyVAL.bytes = []byte("charset")
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3210
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3214
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3218
		{
			yyVAL.expr = &Default{}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3227
		{
			yyVAL.byt = 0
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3229
		{
			yyVAL.byt = 1
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3232
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3234
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3237
		{
			yyVAL.str = ""
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3239
		{
			yyVAL.str = IgnoreStr
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3243
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3245
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3247
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3249
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3251
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3253
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3255
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3257
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3259
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3261
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3264
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3266
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3268
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3272
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3274
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3278
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3282
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3289
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3295
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3299
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3306
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3543
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3552
		{
			decNesting(yylex)
		}
	case 876:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3557
		{
			forceEOF(yylex)
		}
	case 877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3562
		{
			forceEOF(yylex)
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3566
		{
			forceEOF(yylex)
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3570
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
