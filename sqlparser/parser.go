// Code generated by goyacc -o sqlparser/parser.go sqlparser/parser.y. DO NOT EDIT.

//line sqlparser/parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sqlparser/parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sqlparser/parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const POLICY = 57457
const UNIQUE = 57458
const KEY = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const STATUS = 57477
const VARIABLES = 57478
const RESTRICT = 57479
const CASCADE = 57480
const NO = 57481
const ACTION = 57482
const PERMISSIVE = 57483
const RESTRICTIVE = 57484
const PUBLIC = 57485
const CURRENT_USER = 57486
const SESSION_USER = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const SMALLSERIAL = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const SERIAL = 57500
const BIGINT = 57501
const BIGSERIAL = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const PRECISION = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const VARYING = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const UUID = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const CITEXT = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const JSONB = 57532
const ENUM = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const ARRAY = 57542
const NOW = 57543
const BPCHAR = 57544
const NULLX = 57545
const AUTO_INCREMENT = 57546
const APPROXNUM = 57547
const SIGNED = 57548
const UNSIGNED = 57549
const ZEROFILL = 57550
const ZONE = 57551
const AUTOINCREMENT = 57552
const DATABASES = 57553
const TABLES = 57554
const VITESS_KEYSPACES = 57555
const VITESS_SHARDS = 57556
const VITESS_TABLETS = 57557
const VSCHEMA_TABLES = 57558
const EXTENDED = 57559
const FULL = 57560
const PROCESSLIST = 57561
const NAMES = 57562
const CHARSET = 57563
const GLOBAL = 57564
const SESSION = 57565
const ISOLATION = 57566
const LEVEL = 57567
const READ = 57568
const WRITE = 57569
const ONLY = 57570
const REPEATABLE = 57571
const COMMITTED = 57572
const UNCOMMITTED = 57573
const SERIALIZABLE = 57574
const CURRENT_TIMESTAMP = 57575
const DATABASE = 57576
const CURRENT_DATE = 57577
const CURRENT_TIME = 57578
const LOCALTIME = 57579
const LOCALTIMESTAMP = 57580
const UTC_DATE = 57581
const UTC_TIME = 57582
const UTC_TIMESTAMP = 57583
const REPLACE = 57584
const CONVERT = 57585
const CAST = 57586
const SUBSTR = 57587
const SUBSTRING = 57588
const GROUP_CONCAT = 57589
const SEPARATOR = 57590
const INHERIT = 57591
const MATCH = 57592
const AGAINST = 57593
const BOOLEAN = 57594
const LANGUAGE = 57595
const WITH = 57596
const WITHOUT = 57597
const PARSER = 57598
const QUERY = 57599
const EXPANSION = 57600
const UNUSED = 57601
const GENERATED = 57602
const ALWAYS = 57603
const IDENTITY = 57604
const SEQUENCE = 57605
const INCREMENT = 57606
const MINVALUE = 57607
const CACHE = 57608
const CYCLE = 57609
const OWNED = 57610
const NONE = 57611
const CLUSTERED = 57612
const NONCLUSTERED = 57613
const TYPECAST = 57614
const CHECK = 57615

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	120, 92,
	-2, 82,
	-1, 36,
	152, 371,
	153, 371,
	-2, 361,
	-1, 255,
	108, 701,
	-2, 697,
	-1, 256,
	108, 702,
	-2, 698,
	-1, 326,
	79, 882,
	-2, 58,
	-1, 327,
	79, 837,
	-2, 59,
	-1, 332,
	79, 819,
	-2, 668,
	-1, 334,
	79, 859,
	-2, 670,
	-1, 626,
	51, 41,
	53, 41,
	-2, 43,
	-1, 759,
	108, 704,
	-2, 700,
	-1, 993,
	5, 28,
	-2, 504,
	-1, 1018,
	5, 27,
	-2, 643,
	-1, 1111,
	5, 27,
	-2, 64,
	-1, 1315,
	5, 28,
	-2, 644,
	-1, 1390,
	5, 27,
	-2, 646,
	-1, 1483,
	5, 28,
	-2, 647,
}

const yyPrivate = 57344

const yyLast = 13500

var yyAct = [...]int{
	256, 253, 1430, 1473, 1021, 1334, 1223, 933, 695, 553,
	1196, 823, 552, 3, 1401, 1321, 1053, 1102, 1224, 285,
	841, 1197, 1113, 864, 620, 1193, 927, 260, 870, 618,
	1078, 863, 824, 472, 262, 88, 859, 234, 88, 331,
	884, 53, 228, 1037, 1169, 922, 795, 985, 784, 66,
	792, 259, 636, 1099, 1026, 318, 811, 761, 485, 491,
	233, 439, 88, 88, 336, 879, 325, 911, 635, 336,
	820, 622, 336, 607, 967, 312, 505, 88, 249, 88,
	497, 313, 258, 576, 243, 88, 229, 230, 231, 232,
	85, 311, 581, 582, 320, 322, 316, 328, 567, 1085,
	522, 523, 524, 525, 526, 519, 247, 52, 529, 900,
	1529, 1414, 1415, 1344, 1242, 1525, 1551, 1514, 321, 1547,
	1306, 520, 521, 522, 523, 524, 525, 526, 519, 1072,
	1481, 529, 451, 513, 452, 516, 529, 1456, 1103, 1104,
	459, 531, 532, 533, 534, 535, 536, 537, 1518, 514,
	515, 512, 518, 517, 527, 528, 520, 521, 522, 523,
	524, 525, 526, 519, 1543, 934, 529, 1444, 518, 517,
	527, 528, 520, 521, 522, 523, 524, 525, 526, 519,
	519, 794, 529, 529, 899, 1503, 1513, 1305, 484, 1480,
	1188, 518, 517, 527, 528, 520, 521, 522, 523, 524,
	525, 526, 519, 1461, 470, 529, 1309, 88, 449, 1219,
	1220, 336, 336, 336, 336, 1082, 336, 1084, 1083, 83,
	79, 80, 81, 336, 518, 517, 527, 528, 520, 521,
	522, 523, 524, 525, 526, 519, 1045, 1218, 529, 1044,
	855, 856, 1046, 1302, 484, 1491, 637, 480, 638, 57,
	336, 854, 494, 1087, 1524, 1358, 1526, 1357, 902, 484,
	1402, 912, 461, 1421, 74, 544, 545, 546, 547, 548,
	549, 550, 1379, 1404, 59, 60, 61, 62, 63, 493,
	518, 517, 527, 528, 520, 521, 522, 523, 524, 525,
	526, 519, 540, 530, 529, 518, 517, 527, 528, 520,
	521, 522, 523, 524, 525, 526, 519, 1303, 904, 529,
	726, 88, 70, 72, 488, 492, 530, 727, 88, 88,
	88, 530, 815, 1259, 336, 1347, 1258, 71, 73, 923,
	336, 510, 1346, 1298, 1495, 1296, 1349, 227, 1270, 1271,
	1403, 1409, 465, 1417, 1546, 68, 1541, 1497, 1474, 1445,
	1147, 530, 316, 82, 821, 1492, 1273, 328, 1348, 1337,
	1060, 1517, 284, 476, 477, 554, 602, 530, 530, 1058,
	1475, 1274, 1387, 1341, 565, 626, 1340, 1066, 518, 517,
	527, 528, 520, 521, 522, 523, 524, 525, 526, 519,
	530, 1071, 529, 880, 1065, 1055, 1144, 569, 570, 571,
	572, 573, 574, 575, 1282, 467, 1229, 469, 881, 1535,
	912, 1479, 77, 1435, 627, 1230, 473, 474, 475, 633,
	478, 454, 445, 530, 880, 1366, 330, 482, 842, 844,
	76, 443, 77, 880, 447, 466, 468, 705, 442, 881,
	1036, 1035, 336, 88, 1034, 441, 69, 907, 881, 88,
	450, 88, 336, 206, 88, 78, 1148, 88, 924, 542,
	543, 88, 1545, 336, 336, 336, 336, 336, 336, 336,
	336, 1449, 1493, 1494, 1496, 1498, 1499, 336, 336, 530,
	1405, 1318, 88, 1156, 1335, 1336, 1338, 1001, 730, 979,
	495, 733, 509, 1145, 530, 1143, 460, 336, 694, 502,
	714, 88, 843, 1253, 701, 504, 702, 336, 1146, 706,
	861, 860, 709, 760, 962, 504, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 738, 762, 654, 650, 712, 1152, 728, 464, 484,
	1454, 736, 737, 758, 1267, 812, 1024, 763, 639, 759,
	1190, 336, 998, 1254, 503, 502, 747, 517, 527, 528,
	520, 521, 522, 523, 524, 525, 526, 519, 799, 698,
	529, 504, 1408, 330, 330, 330, 330, 530, 330, 1062,
	740, 748, 749, 755, 757, 330, 503, 502, 804, 807,
	1455, 812, 963, 1008, 813, 499, 503, 502, 1537, 503,
	502, 75, 88, 504, 1536, 88, 88, 88, 88, 88,
	1519, 1151, 507, 504, 787, 1352, 504, 88, 50, 1088,
	88, 976, 977, 978, 88, 789, 790, 1523, 764, 88,
	88, 825, 799, 336, 554, 768, 1522, 802, 803, 316,
	316, 316, 316, 316, 809, 453, 336, 1521, 817, 766,
	767, 765, 1520, 444, 316, 1485, 704, 822, 849, 997,
	1351, 996, 310, 316, 1088, 1420, 328, 715, 716, 717,
	718, 719, 720, 721, 722, 1360, 1124, 503, 502, 865,
	826, 723, 724, 829, 1359, 850, 330, 827, 828, 838,
	830, 1240, 641, 1108, 504, 846, 1106, 847, 336, 851,
	336, 88, 1088, 852, 88, 785, 88, 786, 868, 88,
	336, 1386, 1074, 1075, 1076, 1355, 1284, 1100, 858, 929,
	1079, 1077, 282, 283, 446, 732, 448, 456, 457, 458,
	913, 914, 915, 916, 1068, 925, 926, 1452, 800, 801,
	503, 502, 21, 1233, 808, 1125, 1121, 1192, 1232, 1126,
	1123, 1122, 1468, 1555, 73, 530, 940, 504, 1231, 957,
	731, 958, 1331, 1542, 959, 1127, 1061, 758, 982, 983,
	984, 1120, 1047, 759, 1331, 1516, 503, 502, 816, 936,
	818, 819, 788, 711, 440, 762, 751, 753, 754, 1468,
	1515, 752, 710, 504, 968, 1509, 484, 969, 238, 699,
	763, 1331, 1506, 484, 693, 1331, 1501, 1331, 1500, 1463,
	965, 966, 697, 492, 330, 1394, 1471, 1331, 1427, 1394,
	1418, 1394, 484, 981, 462, 330, 330, 330, 330, 330,
	330, 330, 330, 1018, 1394, 1395, 1331, 1330, 1426, 330,
	330, 1215, 484, 1317, 484, 1425, 336, 455, 880, 88,
	1262, 1261, 1039, 875, 1041, 874, 630, 876, 877, 742,
	1256, 1257, 878, 881, 336, 1256, 1255, 1007, 440, 507,
	991, 484, 330, 1081, 23, 336, 992, 1248, 1040, 604,
	484, 797, 484, 316, 1031, 1023, 336, 1049, 646, 645,
	1469, 1009, 1468, 23, 1159, 88, 631, 865, 629, 54,
	1389, 848, 937, 629, 939, 1082, 1042, 1084, 1083, 1194,
	603, 1022, 1022, 791, 960, 1003, 1016, 1023, 897, 1017,
	50, 696, 797, 805, 805, 1000, 604, 975, 1313, 805,
	604, 88, 336, 23, 604, 336, 991, 991, 1105, 50,
	886, 1345, 1056, 1057, 1059, 1111, 903, 1266, 1093, 1080,
	1095, 1096, 1097, 1098, 893, 1260, 882, 1002, 1022, 1048,
	336, 883, 853, 88, 88, 991, 805, 999, 1114, 632,
	1107, 88, 1101, 1089, 1090, 990, 1092, 1264, 1263, 50,
	336, 734, 50, 240, 1117, 1548, 1109, 1511, 1165, 1166,
	1460, 1005, 1118, 1459, 1432, 330, 1429, 1428, 1419, 1373,
	904, 1183, 1184, 928, 1186, 1187, 1247, 1245, 330, 1237,
	1209, 923, 1073, 1161, 889, 1051, 885, 894, 918, 1134,
	336, 336, 917, 891, 890, 65, 1157, 1033, 1195, 50,
	1163, 1162, 1200, 1027, 1028, 1185, 1410, 1198, 1168, 930,
	931, 759, 1407, 1182, 825, 1217, 1181, 1189, 1265, 336,
	825, 336, 336, 1194, 1052, 1205, 1030, 708, 700, 481,
	330, 746, 330, 1204, 1203, 1032, 275, 274, 277, 278,
	279, 280, 330, 832, 1222, 276, 281, 831, 483, 1534,
	1221, 1216, 865, 1135, 865, 1512, 835, 1191, 1137, 1130,
	1131, 836, 1138, 1133, 1132, 1235, 330, 1140, 1136, 1155,
	833, 964, 1206, 1207, 1234, 834, 1208, 498, 1139, 1210,
	837, 887, 613, 614, 1129, 244, 245, 888, 1094, 1532,
	496, 336, 974, 973, 644, 463, 1249, 1250, 1239, 1252,
	336, 527, 528, 520, 521, 522, 523, 524, 525, 526,
	519, 897, 88, 529, 1311, 1374, 1236, 486, 336, 609,
	612, 613, 614, 610, 938, 611, 615, 336, 487, 1251,
	88, 707, 1275, 1286, 1149, 1238, 1289, 895, 1116, 896,
	932, 1277, 609, 612, 613, 614, 610, 1283, 611, 615,
	892, 617, 1027, 1028, 1368, 1280, 1369, 1370, 1371, 1287,
	1161, 241, 242, 498, 316, 972, 1269, 1279, 1367, 235,
	54, 1294, 1527, 971, 1438, 236, 1437, 1377, 1038, 1023,
	336, 500, 336, 336, 336, 88, 336, 1228, 1227, 1458,
	1457, 1312, 336, 1446, 1064, 729, 330, 1324, 1325, 1326,
	56, 1285, 58, 1119, 1339, 1272, 628, 1054, 336, 1327,
	51, 1, 1320, 1413, 1462, 1049, 1070, 1416, 1063, 67,
	1502, 1467, 1241, 1343, 1329, 865, 1268, 1115, 1128, 935,
	1112, 945, 1472, 1400, 336, 336, 88, 336, 336, 1170,
	1361, 1310, 872, 336, 862, 438, 64, 1453, 554, 873,
	871, 869, 647, 336, 898, 1086, 901, 653, 1353, 1364,
	651, 1365, 652, 649, 1110, 655, 648, 330, 214, 323,
	1114, 865, 1172, 616, 1380, 1381, 640, 1382, 1383, 1384,
	501, 1142, 1141, 941, 1150, 725, 961, 479, 336, 336,
	216, 1363, 330, 1354, 538, 1356, 970, 1043, 530, 1390,
	329, 1201, 336, 1198, 735, 1388, 490, 1436, 1376, 1006,
	564, 336, 330, 810, 261, 750, 273, 1174, 1399, 1179,
	1406, 1173, 270, 1171, 272, 271, 741, 1411, 1015, 1177,
	1378, 511, 251, 315, 330, 1422, 600, 336, 608, 606,
	1175, 1176, 605, 1029, 336, 1025, 314, 1158, 1308, 805,
	1443, 745, 1202, 1038, 25, 805, 55, 1178, 1180, 1433,
	246, 1423, 19, 1424, 18, 336, 17, 1164, 20, 16,
	1447, 15, 14, 29, 1448, 13, 12, 11, 10, 1198,
	9, 330, 8, 330, 1225, 1451, 7, 518, 517, 527,
	528, 520, 521, 522, 523, 524, 525, 526, 519, 336,
	336, 529, 1464, 336, 6, 1465, 1466, 5, 4, 1470,
	237, 22, 2, 0, 0, 0, 0, 0, 1477, 0,
	336, 0, 0, 0, 0, 0, 0, 336, 1482, 0,
	336, 336, 1489, 1487, 1488, 0, 0, 1490, 0, 336,
	0, 0, 0, 0, 825, 336, 286, 47, 0, 0,
	1507, 0, 0, 1276, 0, 0, 0, 0, 0, 0,
	0, 0, 1278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1528, 0, 0, 0, 0,
	1281, 0, 336, 1531, 0, 1530, 1476, 554, 1533, 330,
	0, 0, 0, 0, 47, 0, 0, 0, 88, 0,
	0, 0, 239, 0, 0, 0, 88, 0, 317, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 1505, 336,
	0, 1552, 1553, 518, 517, 527, 528, 520, 521, 522,
	523, 524, 525, 526, 519, 0, 0, 529, 0, 0,
	0, 0, 1322, 739, 1322, 1322, 1322, 0, 1328, 1549,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 0,
	0, 1544, 0, 0, 0, 0, 0, 0, 489, 0,
	1322, 0, 986, 905, 906, 908, 909, 910, 1540, 0,
	0, 0, 0, 0, 0, 0, 530, 0, 0, 0,
	0, 0, 0, 919, 920, 921, 1225, 1362, 0, 330,
	330, 796, 798, 86, 0, 1372, 226, 0, 0, 0,
	0, 0, 987, 0, 0, 1375, 0, 814, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 0,
	86, 86, 518, 517, 527, 528, 520, 521, 522, 523,
	524, 525, 526, 519, 0, 86, 529, 86, 0, 0,
	1392, 1393, 0, 86, 0, 0, 0, 471, 471, 471,
	471, 0, 471, 0, 1225, 0, 0, 840, 0, 471,
	0, 0, 0, 1412, 518, 517, 527, 528, 520, 521,
	522, 523, 524, 525, 526, 519, 47, 0, 529, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1431,
	0, 539, 0, 0, 541, 0, 1322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 0, 0, 0, 0, 1450, 0, 0,
	0, 551, 0, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 0, 566, 568, 568, 568, 568, 568, 568,
	568, 568, 0, 596, 597, 598, 599, 0, 0, 0,
	0, 1225, 1225, 0, 619, 1225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 805,
	0, 0, 1484, 0, 0, 0, 0, 674, 0, 1486,
	0, 0, 1431, 1225, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 0, 1510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1091, 0, 0, 0, 0, 0,
	0, 530, 0, 0, 0, 0, 0, 988, 0, 0,
	0, 989, 0, 0, 1225, 0, 0, 0, 993, 994,
	995, 0, 0, 0, 0, 0, 0, 1004, 0, 0,
	0, 0, 1010, 659, 0, 1011, 1012, 1013, 1014, 0,
	0, 0, 0, 530, 0, 0, 0, 0, 330, 86,
	0, 1431, 0, 0, 0, 0, 86, 624, 86, 0,
	0, 0, 0, 0, 0, 0, 675, 0, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 471,
	471, 471, 471, 471, 471, 471, 471, 0, 0, 0,
	0, 0, 0, 471, 471, 0, 584, 585, 586, 587,
	588, 589, 590, 591, 592, 593, 0, 688, 689, 0,
	690, 691, 692, 676, 677, 678, 679, 656, 658, 0,
	594, 657, 660, 0, 672, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 673, 680, 681, 682,
	683, 684, 685, 686, 687, 0, 0, 0, 0, 0,
	0, 0, 0, 951, 0, 0, 0, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 950, 0, 0, 1244,
	1246, 0, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 86, 0, 86,
	0, 0, 86, 955, 0, 86, 0, 595, 0, 713,
	0, 0, 949, 0, 0, 0, 0, 0, 0, 1167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 317, 317, 317, 317, 317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 619, 0, 845, 86,
	0, 0, 0, 0, 0, 317, 0, 0, 713, 0,
	946, 943, 944, 0, 942, 0, 1214, 1291, 1292, 0,
	1293, 0, 0, 0, 1295, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 953, 956, 0, 0, 0, 0, 0, 0,
	250, 0, 0, 0, 0, 250, 250, 0, 0, 806,
	806, 250, 0, 0, 0, 806, 0, 0, 0, 0,
	0, 0, 1332, 1333, 471, 0, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 471, 0, 0, 0,
	0, 948, 0, 0, 0, 250, 250, 250, 250, 0,
	86, 0, 806, 86, 86, 86, 86, 86, 0, 0,
	0, 0, 0, 0, 0, 839, 0, 0, 86, 947,
	0, 577, 624, 0, 0, 0, 0, 86, 86, 0,
	0, 0, 0, 0, 0, 980, 0, 0, 0, 0,
	212, 1288, 0, 0, 0, 0, 0, 0, 1290, 0,
	0, 0, 0, 0, 579, 0, 0, 0, 952, 0,
	1299, 1300, 1301, 0, 222, 1304, 0, 0, 0, 0,
	0, 0, 0, 0, 954, 0, 0, 0, 1314, 1315,
	1316, 0, 1319, 0, 584, 585, 586, 587, 588, 589,
	590, 591, 592, 593, 0, 0, 0, 1019, 1020, 86,
	0, 0, 86, 580, 86, 0, 0, 86, 594, 578,
	0, 0, 0, 583, 207, 1342, 0, 0, 0, 0,
	209, 0, 1350, 0, 0, 317, 0, 215, 211, 0,
	0, 0, 713, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 250, 0, 0, 0, 23, 24,
	48, 26, 27, 0, 0, 0, 0, 213, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 42, 0, 1067,
	0, 28, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 595, 0, 1385, 0, 0,
	37, 0, 250, 0, 50, 0, 0, 0, 0, 0,
	0, 0, 208, 1396, 1397, 1398, 0, 0, 250, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 471, 210, 0, 218,
	219, 220, 221, 225, 0, 0, 0, 86, 224, 223,
	0, 0, 0, 30, 31, 33, 32, 35, 0, 1439,
	1440, 1441, 1442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 36, 43, 44,
	0, 0, 45, 46, 34, 0, 0, 0, 0, 0,
	0, 0, 0, 1069, 1199, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 38, 39, 0, 40, 41,
	0, 1211, 1212, 1213, 0, 0, 0, 0, 0, 0,
	0, 0, 1478, 0, 0, 0, 0, 1483, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1508, 0, 0, 0, 0, 0, 0, 1243, 0,
	0, 1153, 1154, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	713, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	0, 806, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1556, 1557, 0, 0, 317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 0, 91, 0, 0, 0, 0, 0, 86, 113,
	0, 0, 0, 126, 0, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 0, 0,
	1199, 0, 0, 1391, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 624, 0, 0, 0, 0, 0, 0,
	0, 0, 518, 517, 527, 528, 520, 521, 522, 523,
	524, 525, 526, 519, 0, 0, 529, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 193, 0, 0, 0, 154, 0, 107, 0,
	172, 117, 0, 127, 86, 0, 1199, 0, 47, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 103, 1550, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 806, 427, 417, 0, 387,
	429, 362, 377, 437, 379, 380, 409, 346, 395, 147,
	374, 91, 365, 340, 371, 341, 363, 389, 113, 361,
	419, 398, 126, 435, 129, 403, 0, 168, 138, 0,
	0, 391, 421, 393, 415, 386, 410, 353, 402, 430,
	375, 406, 431, 0, 0, 0, 335, 0, 866, 867,
	0, 0, 0, 0, 0, 104, 0, 405, 426, 373,
	408, 339, 404, 0, 344, 347, 436, 424, 368, 369,
	1050, 0, 0, 0, 0, 0, 1539, 390, 394, 412,
	384, 0, 0, 0, 86, 0, 0, 0, 0, 366,
	0, 401, 0, 0, 0, 350, 345, 0, 388, 0,
	0, 0, 352, 0, 367, 413, 0, 337, 416, 422,
	385, 193, 425, 383, 382, 154, 0, 107, 0, 172,
	117, 376, 127, 411, 428, 392, 420, 364, 372, 109,
	370, 161, 148, 184, 400, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 342, 0, 169, 186, 204, 205, 343, 360,
	423, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 407, 162, 106, 185,
	167, 356, 359, 354, 355, 396, 397, 432, 433, 434,
	414, 351, 0, 357, 358, 0, 418, 121, 399, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 378, 338,
	381, 0, 0, 0, 0, 0, 0, 0, 348, 349,
	0, 103, 427, 417, 0, 387, 429, 362, 377, 437,
	379, 380, 409, 346, 395, 147, 374, 91, 365, 340,
	371, 341, 363, 389, 113, 361, 419, 398, 126, 435,
	129, 403, 0, 168, 138, 0, 0, 391, 421, 393,
	415, 386, 410, 353, 402, 430, 375, 406, 431, 0,
	0, 0, 335, 0, 866, 867, 0, 0, 0, 0,
	0, 104, 0, 405, 426, 373, 408, 339, 404, 0,
	344, 347, 436, 424, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 390, 394, 412, 384, 0, 0, 0,
	0, 0, 0, 0, 0, 366, 0, 401, 0, 0,
	0, 350, 345, 0, 388, 0, 0, 0, 352, 0,
	367, 413, 0, 337, 416, 422, 385, 193, 425, 383,
	382, 154, 0, 107, 0, 172, 117, 376, 127, 411,
	428, 392, 420, 364, 372, 109, 370, 161, 148, 184,
	400, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 342, 0,
	169, 186, 204, 205, 343, 360, 423, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 407, 162, 106, 185, 167, 356, 359, 354,
	355, 396, 397, 432, 433, 434, 414, 351, 0, 357,
	358, 0, 418, 121, 399, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 378, 338, 381, 0, 0, 0,
	0, 0, 0, 0, 348, 349, 0, 103, 427, 417,
	0, 387, 429, 362, 377, 437, 379, 380, 409, 346,
	395, 147, 374, 91, 365, 340, 371, 341, 363, 389,
	113, 361, 419, 398, 126, 435, 129, 403, 0, 168,
	138, 0, 0, 391, 421, 393, 415, 386, 410, 353,
	402, 430, 375, 406, 431, 0, 0, 0, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 405,
	426, 373, 408, 339, 404, 0, 344, 347, 436, 424,
	368, 369, 0, 0, 0, 0, 0, 0, 0, 390,
	394, 412, 384, 0, 0, 0, 0, 0, 0, 1160,
	0, 366, 0, 401, 0, 0, 0, 350, 345, 0,
	388, 0, 0, 0, 352, 0, 367, 413, 0, 337,
	416, 422, 385, 193, 425, 383, 382, 154, 0, 107,
	0, 172, 117, 376, 127, 411, 428, 392, 420, 364,
	372, 109, 370, 161, 148, 184, 400, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 342, 0, 169, 186, 204, 205,
	343, 360, 423, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 407, 162,
	106, 185, 167, 356, 359, 354, 355, 396, 397, 432,
	433, 434, 414, 351, 0, 357, 358, 0, 418, 121,
	399, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	378, 338, 381, 0, 0, 0, 0, 0, 0, 0,
	348, 349, 0, 103, 427, 417, 0, 387, 429, 362,
	377, 437, 379, 380, 409, 346, 395, 147, 374, 91,
	365, 340, 371, 341, 363, 389, 113, 361, 419, 398,
	126, 435, 129, 403, 0, 168, 138, 0, 0, 391,
	421, 393, 415, 386, 410, 353, 402, 430, 375, 406,
	431, 50, 0, 0, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 405, 426, 373, 408, 339,
	404, 0, 344, 347, 436, 424, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 390, 394, 412, 384, 0,
	0, 0, 0, 0, 0, 0, 0, 366, 0, 401,
	0, 0, 0, 350, 345, 0, 388, 0, 0, 0,
	352, 0, 367, 413, 0, 337, 416, 422, 385, 193,
	425, 383, 382, 154, 0, 107, 0, 172, 117, 376,
	127, 411, 428, 392, 420, 364, 372, 109, 370, 161,
	148, 184, 400, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	342, 0, 169, 186, 204, 205, 343, 360, 423, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 407, 162, 106, 185, 167, 356,
	359, 354, 355, 396, 397, 432, 433, 434, 414, 351,
	0, 357, 358, 0, 418, 121, 399, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 378, 338, 381, 0,
	0, 0, 0, 0, 0, 0, 348, 349, 0, 103,
	427, 417, 0, 387, 429, 362, 377, 437, 379, 380,
	409, 346, 395, 147, 374, 91, 365, 340, 371, 341,
	363, 389, 113, 361, 419, 398, 126, 435, 129, 403,
	0, 168, 138, 0, 0, 391, 421, 393, 415, 386,
	410, 353, 402, 430, 375, 406, 431, 0, 0, 0,
	255, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 405, 426, 373, 408, 339, 404, 0, 344, 347,
	436, 424, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 390, 394, 412, 384, 0, 0, 0, 0, 0,
	0, 756, 0, 366, 0, 401, 0, 0, 0, 350,
	345, 0, 388, 0, 0, 0, 352, 0, 367, 413,
	0, 337, 416, 422, 385, 193, 425, 383, 382, 154,
	0, 107, 0, 172, 117, 376, 127, 411, 428, 392,
	420, 364, 372, 109, 370, 161, 148, 184, 400, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 342, 0, 169, 186,
	204, 205, 343, 360, 423, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	407, 162, 106, 185, 167, 356, 359, 354, 355, 396,
	397, 432, 433, 434, 414, 351, 0, 357, 358, 0,
	418, 121, 399, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 378, 338, 381, 0, 0, 0, 0, 0,
	0, 0, 348, 349, 0, 103, 427, 417, 0, 387,
	429, 362, 377, 437, 379, 380, 409, 346, 395, 147,
	374, 91, 365, 340, 371, 341, 363, 389, 113, 361,
	419, 398, 126, 435, 129, 403, 0, 168, 138, 0,
	0, 391, 421, 393, 415, 386, 410, 353, 402, 430,
	375, 406, 431, 0, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 405, 426, 373,
	408, 339, 404, 0, 344, 347, 436, 424, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 390, 394, 412,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 366,
	0, 401, 0, 0, 0, 350, 345, 0, 388, 0,
	0, 0, 352, 0, 367, 413, 0, 337, 416, 422,
	385, 193, 425, 383, 382, 154, 0, 107, 0, 172,
	117, 376, 127, 411, 428, 392, 420, 364, 372, 109,
	370, 161, 148, 184, 400, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 342, 0, 169, 186, 204, 205, 343, 360,
	423, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 407, 162, 106, 185,
	167, 356, 359, 354, 355, 396, 397, 432, 433, 434,
	414, 351, 0, 357, 358, 0, 418, 121, 399, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 378, 338,
	381, 0, 0, 0, 0, 0, 0, 0, 348, 349,
	0, 103, 427, 417, 0, 387, 429, 362, 377, 437,
	379, 380, 409, 346, 395, 147, 374, 91, 365, 340,
	371, 341, 363, 389, 113, 361, 419, 398, 126, 435,
	129, 403, 0, 168, 138, 0, 0, 391, 421, 393,
	415, 386, 410, 353, 402, 430, 375, 406, 431, 0,
	0, 0, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 405, 426, 373, 408, 339, 404, 0,
	344, 347, 436, 424, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 390, 394, 412, 384, 0, 0, 0,
	0, 0, 0, 0, 0, 366, 0, 401, 0, 0,
	0, 350, 345, 0, 388, 0, 0, 0, 352, 0,
	367, 413, 0, 337, 416, 422, 385, 193, 425, 383,
	382, 154, 0, 107, 0, 172, 117, 376, 127, 411,
	428, 392, 420, 364, 372, 109, 370, 161, 148, 184,
	400, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 342, 0,
	169, 186, 204, 205, 343, 360, 423, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 407, 162, 106, 185, 167, 356, 359, 354,
	355, 396, 397, 432, 433, 434, 414, 351, 0, 357,
	358, 0, 418, 121, 399, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 378, 338, 381, 0, 0, 0,
	0, 0, 0, 0, 348, 349, 0, 103, 427, 417,
	0, 387, 429, 362, 377, 437, 379, 380, 409, 346,
	395, 147, 374, 91, 365, 340, 371, 341, 363, 389,
	113, 361, 419, 398, 126, 435, 129, 403, 0, 168,
	138, 0, 0, 391, 421, 393, 415, 386, 410, 353,
	402, 430, 375, 406, 431, 0, 0, 0, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 405,
	426, 373, 408, 339, 404, 0, 344, 347, 436, 424,
	368, 369, 0, 0, 0, 0, 0, 0, 0, 390,
	394, 412, 384, 0, 0, 0, 0, 0, 0, 0,
	0, 366, 0, 401, 0, 0, 0, 350, 345, 0,
	388, 0, 0, 0, 352, 0, 367, 413, 0, 337,
	416, 422, 385, 193, 425, 383, 382, 154, 0, 107,
	0, 172, 117, 376, 127, 411, 428, 392, 420, 364,
	372, 109, 370, 161, 148, 184, 400, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 333, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 342, 0, 169, 186, 204, 205,
	343, 360, 423, 196, 197, 198, 199, 0, 0, 0,
	334, 332, 120, 165, 124, 131, 157, 202, 407, 162,
	106, 185, 167, 356, 359, 354, 355, 396, 397, 432,
	433, 434, 414, 351, 0, 357, 358, 0, 418, 121,
	399, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	378, 338, 381, 0, 0, 0, 0, 0, 0, 0,
	348, 349, 0, 103, 427, 417, 0, 387, 429, 362,
	377, 437, 379, 380, 409, 346, 395, 147, 374, 91,
	365, 340, 371, 341, 363, 389, 113, 361, 419, 398,
	126, 435, 129, 403, 0, 168, 138, 0, 0, 391,
	421, 393, 415, 386, 410, 353, 402, 430, 375, 406,
	431, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 405, 426, 373, 408, 339,
	404, 0, 344, 347, 436, 424, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 390, 394, 412, 384, 0,
	0, 0, 0, 0, 0, 0, 0, 366, 0, 401,
	0, 0, 0, 350, 345, 0, 388, 0, 0, 0,
	352, 0, 367, 413, 0, 337, 416, 422, 385, 193,
	425, 383, 382, 154, 0, 107, 0, 172, 117, 376,
	127, 411, 428, 392, 420, 364, 372, 109, 370, 161,
	148, 184, 400, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	342, 0, 169, 186, 204, 205, 343, 360, 423, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 407, 162, 106, 185, 167, 356,
	359, 354, 355, 396, 397, 432, 433, 434, 414, 351,
	0, 357, 358, 0, 418, 121, 399, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 378, 338, 381, 0,
	0, 0, 0, 0, 0, 0, 348, 349, 0, 103,
	427, 417, 0, 387, 429, 362, 377, 437, 379, 380,
	409, 346, 395, 147, 374, 91, 365, 340, 371, 341,
	363, 389, 113, 361, 419, 398, 126, 435, 129, 403,
	0, 168, 138, 0, 0, 391, 421, 393, 415, 386,
	410, 353, 402, 430, 375, 406, 431, 0, 0, 0,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 405, 426, 373, 408, 339, 404, 0, 344, 347,
	436, 424, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 390, 394, 412, 384, 0, 0, 0, 0, 0,
	0, 0, 0, 366, 0, 401, 0, 0, 0, 350,
	345, 0, 388, 0, 0, 0, 352, 0, 367, 413,
	0, 337, 416, 422, 385, 193, 425, 383, 382, 154,
	0, 107, 0, 172, 117, 376, 127, 411, 428, 392,
	420, 364, 372, 109, 370, 161, 148, 184, 400, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	634, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 333, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 342, 0, 169, 186,
	204, 205, 343, 360, 423, 196, 197, 198, 199, 0,
	0, 0, 334, 332, 120, 165, 124, 131, 157, 202,
	407, 162, 106, 185, 167, 356, 359, 354, 355, 396,
	397, 432, 433, 434, 414, 351, 0, 357, 358, 0,
	418, 121, 399, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 378, 338, 381, 0, 0, 0, 0, 0,
	0, 0, 348, 349, 0, 103, 427, 417, 0, 387,
	429, 362, 377, 437, 379, 380, 409, 346, 395, 147,
	374, 91, 365, 340, 371, 341, 363, 389, 113, 361,
	419, 398, 126, 435, 129, 403, 0, 168, 138, 0,
	0, 391, 421, 393, 415, 386, 410, 353, 402, 430,
	375, 406, 431, 0, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 405, 426, 373,
	408, 339, 404, 0, 344, 347, 436, 424, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 390, 394, 412,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 366,
	0, 401, 0, 0, 0, 350, 345, 0, 388, 0,
	0, 0, 352, 0, 367, 413, 0, 337, 416, 422,
	385, 193, 425, 383, 382, 154, 0, 107, 0, 172,
	117, 376, 127, 411, 428, 392, 420, 364, 372, 109,
	370, 161, 148, 184, 400, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 324, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 333, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 342, 0, 169, 186, 204, 205, 343, 360,
	423, 196, 197, 198, 199, 0, 0, 0, 334, 332,
	327, 326, 124, 131, 157, 202, 407, 162, 106, 185,
	167, 356, 359, 354, 355, 396, 397, 432, 433, 434,
	414, 351, 0, 357, 358, 0, 418, 121, 399, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 378, 338,
	381, 0, 0, 0, 0, 0, 0, 0, 348, 349,
	147, 103, 91, 793, 0, 257, 0, 0, 0, 113,
	254, 0, 0, 126, 296, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 255, 275, 274,
	277, 278, 279, 280, 0, 0, 104, 276, 281, 282,
	283, 0, 0, 252, 268, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 266, 248, 0,
	0, 0, 308, 0, 267, 0, 0, 263, 264, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 306, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 297, 307, 303, 304, 301, 302, 300, 299,
	298, 309, 289, 290, 291, 292, 294, 0, 121, 293,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	147, 0, 91, 0, 0, 257, 0, 0, 0, 113,
	254, 305, 103, 126, 296, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 484, 255, 275, 274,
	277, 278, 279, 280, 0, 0, 104, 276, 281, 282,
	283, 0, 0, 252, 268, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 266, 0, 0,
	0, 0, 308, 0, 267, 0, 0, 263, 264, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 306, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 297, 307, 303, 304, 301, 302, 300, 299,
	298, 309, 289, 290, 291, 292, 294, 0, 121, 293,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	147, 0, 91, 0, 0, 257, 0, 0, 0, 113,
	254, 305, 103, 126, 296, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 255, 275, 274,
	277, 278, 279, 280, 0, 0, 104, 276, 281, 282,
	283, 0, 0, 252, 268, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 266, 248, 0,
	0, 0, 308, 0, 267, 0, 0, 263, 264, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 306, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 297, 307, 303, 304, 301, 302, 300, 299,
	298, 309, 289, 290, 291, 292, 294, 0, 121, 293,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	147, 0, 91, 0, 0, 257, 0, 0, 0, 113,
	254, 305, 103, 126, 296, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 287, 288, 0, 0, 0, 0,
	0, 0, 857, 0, 50, 0, 0, 255, 275, 274,
	277, 278, 279, 280, 0, 0, 104, 276, 281, 282,
	283, 0, 0, 252, 268, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 266, 0, 0,
	0, 0, 308, 0, 267, 0, 0, 263, 264, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 306, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 297, 307, 303, 304, 301, 302, 300, 299,
	298, 309, 289, 290, 291, 292, 294, 0, 121, 293,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 305, 103, 147, 0, 91, 0, 0, 257, 0,
	0, 0, 113, 254, 0, 0, 126, 296, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	255, 275, 274, 277, 278, 279, 280, 0, 0, 104,
	276, 281, 282, 283, 0, 0, 252, 268, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 0, 0, 0, 0, 308, 0, 267, 0, 0,
	263, 264, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 306, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 297, 307, 303, 304, 301,
	302, 300, 299, 298, 309, 289, 290, 291, 292, 294,
	0, 121, 293, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 0, 147, 0, 91, 0, 0, 257, 0,
	0, 0, 113, 254, 305, 103, 126, 296, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	255, 275, 274, 277, 278, 279, 280, 0, 0, 104,
	276, 281, 282, 283, 0, 0, 252, 268, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 0, 0, 0, 0, 308, 0, 267, 0, 0,
	263, 264, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 306, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 297, 307, 303, 304, 301,
	302, 300, 299, 298, 309, 289, 290, 291, 292, 294,
	0, 121, 293, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 0, 147, 0, 91, 0, 0, 0, 0,
	0, 0, 113, 0, 305, 103, 126, 296, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	255, 275, 274, 277, 278, 279, 280, 0, 0, 104,
	276, 281, 282, 283, 0, 0, 0, 268, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 0, 0, 0, 0, 308, 0, 267, 0, 0,
	263, 264, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 306, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 1554, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 297, 307, 303, 304, 301,
	302, 300, 299, 298, 309, 289, 290, 291, 292, 294,
	0, 121, 293, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 0, 147, 0, 91, 0, 0, 0, 0,
	0, 0, 113, 0, 305, 103, 126, 296, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	255, 275, 274, 277, 278, 279, 280, 0, 0, 104,
	276, 281, 282, 283, 0, 0, 0, 268, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 0, 0, 0, 0, 308, 0, 267, 0, 0,
	263, 264, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 306, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 297, 307, 303, 304, 301,
	302, 300, 299, 298, 309, 289, 290, 291, 292, 294,
	0, 121, 293, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 0, 147, 0, 91, 0, 506, 0, 0,
	0, 0, 113, 0, 305, 103, 126, 0, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 508, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 504, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 0, 147, 0, 91, 0, 623, 0, 0,
	0, 0, 113, 0, 0, 103, 126, 0, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 625, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 23, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 0, 0, 147, 0, 91, 0, 0, 0,
	0, 0, 0, 113, 0, 103, 0, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 23, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 0, 0, 147, 0, 91, 0, 0,
	0, 0, 0, 0, 113, 0, 103, 0, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 0, 147, 0, 91, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 103, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 743, 0, 0, 744, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 0, 147, 0, 91, 0, 0,
	0, 0, 0, 0, 113, 643, 0, 103, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 642, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 0, 147, 0, 91, 0, 623,
	0, 0, 0, 0, 113, 0, 0, 103, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 625, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 621, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 0, 147, 0, 91, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 103, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 0, 147, 0, 91, 0, 0,
	0, 0, 0, 1538, 113, 0, 0, 103, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 1226, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 0, 147, 0, 91, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 103, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 1323, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 0, 147, 0, 91, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 103, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 0, 147, 0, 91, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 103, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 625, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 0, 147, 0, 91, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 103, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 508, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 0, 147, 0, 91, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 103, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 703, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 0, 147, 0, 91, 0, 0,
	0, 0, 0, 601, 113, 0, 0, 103, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	319, 156, 115, 187, 0, 0, 0, 147, 0, 91,
	0, 0, 0, 0, 0, 0, 113, 103, 0, 0,
	126, 0, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 0, 147, 0, 91,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 103,
	126, 0, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 0, 147, 0, 91,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 103,
	126, 0, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 0, 147, 0, 91,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 103,
	126, 0, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 0, 147, 0, 91,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 103,
	126, 0, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 103,
}

var yyPact = [...]int{
	2342, -1000, -184, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1185, 1225, -1000, -1000, -1000, -1000, -1000, -1000, 973,
	195, 310, 337, 102, 12429, 335, 2209, 12949, -1000, 172,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 927, -1000, -1000,
	-1000, -1000, -1000, 1182, 1189, 977, 1171, 1077, -1000, 6692,
	290, 10867, 12169, 5901, -1000, 813, 326, 318, 12689, 299,
	299, 12689, 299, -1000, -51, 332, 12949, -1000, 12949, 298,
	792, 298, 298, 298, 12949, -1000, 388, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12949, 769, 1096, 287,
	3899, 3899, 3899, 3899, 211, 3899, 12, 1009, -1000, -1000,
	-1000, -1000, 3899, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 749, 1128, 7485, 7485, 1185, -1000, 927,
	-1000, -1000, -1000, 1086, -1000, -1000, 532, 1200, -1000, 8265,
	384, -1000, 7485, 62, 930, -1000, -1000, 930, -1000, -1000,
	350, -1000, -1000, 8005, 8005, 8005, 8005, 8005, 8005, 8005,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 930, -1000, 7225, 930, 930, 930,
	930, 930, 930, 930, 930, 7485, 930, 930, 930, 930,
	930, 930, 930, 930, 930, 2116, 930, 930, 930, 930,
	11907, 881, 1109, -1000, -1000, -1000, 1159, 9047, 9827, 12949,
	845, -1000, 916, 5615, 5, -1000, -1000, -1000, 469, 9567,
	-1000, -1000, -1000, 1095, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 835, -1000,
	1788, 12689, 12949, 870, 757, 498, 744, 1008, 12949, -1000,
	11647, 3899, 316, 12949, 1138, 1007, 12949, 737, 728, -1000,
	5329, -1000, 3899, 3899, 3899, 3899, 3899, 3899, 3899, 3899,
	-1000, -1000, -1000, -1000, -1000, -1000, 3899, 3899, -1000, 81,
	-1000, 12949, -1000, -1000, -1000, -1000, 1216, 399, 707, 383,
	928, -1000, 517, 1182, 749, 1077, 9307, 1020, -1000, -1000,
	12949, -1000, 7485, 7485, 720, -1000, 11387, -1000, -1000, 4185,
	419, 8005, 566, 562, 8005, 8005, 8005, 8005, 8005, 8005,
	8005, 8005, 8005, 8005, 8005, 8005, 8005, 8005, 8005, 650,
	2116, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 727,
	-1000, 927, 1010, 1010, 32, 32, 32, 32, 32, 32,
	2732, 6172, 749, 828, 527, 7225, 6692, 6692, 7485, 7485,
	13209, 13209, 6692, 1172, 470, 527, 13209, -1000, 749, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 131, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 6692, 6692, 6692, 6692,
	210, 12949, -1000, 13209, 10867, 10867, 10867, 10867, 10867, -1000,
	1037, 1033, -1000, 1060, 1046, 1070, 12949, -1000, 826, 9047,
	380, 930, -1000, 11127, -1000, -1000, 210, 850, 10867, 12949,
	-1000, -1000, 5043, 916, 5, 909, -1000, 9, -4, 6952,
	406, -1000, -1000, -1000, -1000, 3327, 729, 890, -108, 34,
	-1000, -1000, -1000, -1000, 948, -1000, 948, 256, 948, 948,
	948, 68, 68, 68, 68, 68, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 970, 966, -1000, 948, 948, 948, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 959, 277,
	959, 951, 951, 989, 1148, -106, 724, 3899, 1131, 3899,
	12949, -1000, 1998, 12949, -1000, 12949, -1000, -1000, 12949, 3899,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 503, -1000, -1000, -1000, -1000,
	1065, 7485, 7485, 4757, 7485, -1000, -1000, -1000, 1128, -1000,
	1172, 1184, -1000, 1091, 1090, 6692, -1000, -1000, 419, 429,
	-1000, -1000, 555, -1000, -1000, -1000, -1000, 381, 930, -1000,
	1614, -1000, -1000, -1000, -1000, 566, 8005, 8005, 8005, 1463,
	1614, 1572, 1039, 466, 32, 4, 4, 79, 79, 79,
	79, 79, 27, 27, -1000, -1000, -1000, -1000, 749, -1000,
	-1000, -1000, 749, 6692, 912, -1000, -1000, 7485, -1000, 749,
	817, 817, 608, 530, 914, -1000, 379, 904, 817, 6692,
	516, -1000, 7485, 749, -1000, -1000, 817, 749, 817, 817,
	887, 930, -1000, 905, -1000, 467, 1109, 983, 1006, 1132,
	-1000, -1000, -1000, -1000, 1025, -1000, 987, -1000, -1000, -1000,
	-1000, -1000, 325, 322, 321, 12689, -1000, 1197, 10867, 873,
	-1000, -1000, 909, 5, -7, -1000, -1000, -1000, 527, -1000,
	-1000, 717, 906, 3041, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 963, 1004, 12689, 261, 274, 314, 305, 711,
	-1000, -1000, -1000, 513, -1000, 12689, 1215, -1000, -1000, 260,
	-1000, 243, 930, 677, 12949, 113, 960, 655, -1000, -194,
	-1000, 28, -1000, -1000, 644, 68, 68, 948, 68, -1000,
	-1000, 406, 1089, 406, 406, 406, 406, 660, 660, -133,
	-133, -1000, -1000, 638, 959, -1000, -1000, -1000, 635, -1000,
	12949, 12689, 927, -1000, 4471, -1000, -1000, -1000, -1000, -1000,
	1146, -1000, 621, 964, 374, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 206, 340, -1000, 3899,
	-1000, 524, 12949, 12949, 1062, 527, 527, 375, -1000, -1000,
	12949, -1000, -1000, -1000, -1000, 883, -1000, -1000, -1000, 3613,
	6692, -1000, 1463, 1614, 1327, -1000, 8005, 8005, -1000, -1000,
	817, 6692, 527, -1000, -1000, -1000, 1164, 650, 1164, 8005,
	8005, 4757, 8005, 8005, -78, 884, 472, -1000, 7485, 671,
	-1000, -1000, -1000, -1000, -1000, 1003, 13209, 930, -1000, 8786,
	12689, 1185, 13209, 7485, 7485, -1000, -1000, 7485, 958, -1000,
	7485, -1000, -1000, -1000, 930, 930, 930, 788, -1000, 1185,
	873, -1000, -1000, -1000, -6, -38, -1000, -1000, 3327, -1000,
	3327, 10347, 1208, 276, 291, -1000, 703, 693, -1000, 688,
	-1000, -1000, -1000, 1113, -35, -1000, -1000, 7485, -1000, 957,
	1143, -1000, 1100, 633, -175, -1000, -1000, -1000, -1000, -1000,
	-1000, 930, 955, 954, -1000, -1000, -1000, -1000, 823, 406,
	406, 68, 406, -1000, 448, -1000, -1000, -1000, -1000, 812,
	-1000, 807, -1000, 141, 138, -1000, 902, -1000, 797, 926,
	998, -1000, 894, -1000, 465, 1177, 180, -1000, 237, -1000,
	12689, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12689,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 12949, -1000, -1000, -1000, -1000, -1000, 12689, 278, -1000,
	-1000, 659, 7485, -1000, -1000, -1000, 4471, -1000, 1197, 10867,
	-1000, -1000, 749, -1000, 8005, 1614, 1614, -1000, -1000, 749,
	948, 948, -1000, 948, 951, -1000, -1000, 948, 161, 948,
	159, 749, 749, 190, 288, -1000, 134, 101, 930, -59,
	-1000, 527, 7485, -1000, 1117, 859, 875, -1000, -1000, 6432,
	749, 790, 373, 788, 1182, -1000, 527, 527, 527, 10607,
	527, 10607, 10607, 10607, 8525, 12689, 1182, -1000, -1000, -1000,
	-1000, 3041, -1000, 783, -1000, 948, 948, 330, 330, 242,
	239, -1000, -1000, -1000, -1000, -1000, 485, 10607, -166, -1000,
	888, -1000, 139, 749, -1000, 606, -1000, 561, -1000, -1000,
	-1000, 406, -1000, -1000, -1000, 68, 658, 68, 31, 29,
	626, -1000, 617, 10347, 12689, 12949, 4471, 3327, 304, 1178,
	-1000, -1000, 12689, -1000, -1000, -1000, 947, -1000, -1000, -1000,
	-1000, 1119, 12689, -1000, -1000, 527, 1194, 877, -1000, 1614,
	-1000, -1000, 217, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 8005, 8005, -1000, 8005, 8005, 8005, 749, 654,
	527, 238, -1000, 930, -1000, -1000, 868, 12689, 12689, -1000,
	-1000, 781, -1000, -1000, 768, 768, 768, 380, -1000, -1000,
	209, 10347, -1000, -1000, 992, -1000, -1000, 506, 184, 986,
	12689, -176, 187, 766, 946, 607, 72, -133, -1000, -1000,
	-1000, -1000, -1000, -1000, 406, -1000, 406, -1000, -1000, 791,
	784, 764, 945, 944, -1000, -1000, 12689, -1000, -1000, -1000,
	-1000, -1000, 942, 10607, 930, 289, 1192, 1188, -1000, -1000,
	205, 205, 205, 205, 78, -1000, -1000, 1214, -1000, 930,
	-1000, 927, 363, -1000, 12689, -1000, -1000, -1000, -1000, -1000,
	209, -1000, 682, 461, 533, -136, -1000, 1211, -1000, -1000,
	1209, 941, -1000, 938, -1000, -1000, -1000, -63, -1000, -1000,
	755, -1000, -1000, -1000, -1000, -1000, -1000, 1197, 10347, 10347,
	839, -1000, 10347, 762, 204, 236, -1000, 7485, 7485, -1000,
	-1000, -1000, -1000, 749, 142, -144, 13209, 875, 749, 12689,
	-1000, -1000, -1000, 597, -1000, -1000, 12689, 330, 330, 12689,
	10347, -1000, 191, -1000, -1000, 754, 752, -86, 12689, 7485,
	748, 870, 742, -1000, 12689, 935, 527, 869, -1000, 1048,
	-84, -158, 858, -1000, -1000, -1000, -1000, -1000, -1000, 736,
	721, -1000, 90, 594, 589, 578, 569, -28, -1000, 1186,
	1197, -1000, -1000, -180, -1000, 527, -1000, -106, -1000, 204,
	1087, 10347, -1000, 1042, -1000, 282, -1000, 546, -1000, 540,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10087, -1000, 7485,
	-1000, -1000, 200, 709, -107, 12949, -1000, -1000, -1000, 354,
	527, 197, -1000, -155, 933, 4471, 930, -159, 12689, -1000,
	7745, -1000, 699, 205, 749, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1442, 12, 742, 1441, 1440, 1438, 1437, 1434, 1416,
	1412, 1410, 1408, 1407, 1406, 1405, 1403, 1402, 1401, 1399,
	1398, 1396, 1394, 1392, 249, 1390, 1386, 1384, 80, 1381,
	84, 1380, 1378, 47, 181, 50, 46, 78, 1377, 29,
	75, 81, 1376, 54, 1375, 1373, 94, 1372, 73, 1369,
	1368, 55, 1366, 1363, 20, 4, 1362, 51, 1361, 1358,
	82, 1, 1356, 1355, 1354, 1352, 1346, 1345, 57, 9,
	10, 19, 21, 1344, 34, 27, 1343, 56, 1340, 1339,
	1338, 1337, 41, 1336, 59, 1334, 37, 58, 1331, 15,
	70, 43, 25, 11, 95, 68, 1330, 32, 66, 52,
	1327, 1326, 601, 1324, 1320, 1317, 1316, 1315, 1314, 645,
	653, 1313, 1312, 1311, 39, 0, 362, 33, 76, 1310,
	49, 1306, 1598, 74, 71, 24, 1303, 42, 204, 48,
	1299, 1298, 44, 83, 1296, 93, 92, 1295, 1293, 1292,
	1290, 1287, 946, 30, 67, 36, 1286, 1285, 1284, 17,
	45, 26, 53, 61, 1282, 1281, 1280, 28, 1279, 5,
	16, 2, 65, 1277, 1276, 1275, 1274, 31, 23, 1272,
	18, 6, 14, 1263, 1262, 3, 1261, 22, 1260, 7,
	1259, 8, 1258, 1257, 1256, 1252, 1251, 1250, 1249, 1247,
	1246, 1244, 1243, 40, 1241, 1240, 1476, 1078, 1236, 1235,
	1233, 1232, 98,
}

var yyR1 = [...]int{
	0, 194, 195, 195, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 198,
	198, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 183,
	183, 183, 184, 184, 184, 184, 184, 184, 186, 186,
	187, 187, 120, 120, 181, 181, 180, 179, 179, 178,
	178, 177, 188, 188, 16, 164, 165, 165, 165, 165,
	165, 153, 134, 134, 134, 134, 134, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 193, 193, 193, 193,
	193, 193, 193, 193, 190, 190, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	143, 143, 143, 143, 143, 189, 189, 185, 185, 185,
	185, 185, 138, 138, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 137, 137, 137, 137, 137, 137,
	139, 139, 139, 139, 139, 135, 135, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 141, 141, 141,
	141, 141, 141, 141, 141, 152, 152, 142, 142, 150,
	150, 151, 151, 151, 149, 149, 149, 146, 146, 147,
	147, 148, 148, 148, 144, 144, 144, 145, 145, 145,
	155, 155, 173, 173, 172, 172, 172, 172, 163, 163,
	169, 169, 169, 169, 169, 169, 169, 162, 162, 171,
	171, 170, 170, 157, 157, 157, 157, 157, 158, 159,
	159, 159, 159, 156, 192, 192, 192, 160, 160, 161,
	161, 166, 166, 166, 167, 167, 167, 168, 168, 168,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 199, 199, 200, 200, 200, 200, 200,
	200, 200, 176, 174, 174, 175, 175, 13, 14, 14,
	14, 14, 14, 15, 15, 17, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 107,
	107, 104, 104, 105, 105, 106, 106, 106, 108, 108,
	108, 131, 131, 131, 19, 19, 21, 21, 22, 23,
	20, 20, 20, 20, 20, 201, 24, 25, 25, 26,
	26, 26, 30, 30, 30, 28, 28, 29, 29, 35,
	35, 34, 34, 36, 36, 36, 36, 119, 119, 119,
	118, 118, 38, 38, 39, 39, 40, 40, 41, 41,
	41, 53, 53, 89, 89, 89, 91, 91, 42, 42,
	42, 42, 43, 43, 44, 44, 45, 45, 126, 126,
	125, 125, 125, 124, 124, 47, 47, 47, 49, 48,
	48, 48, 48, 50, 50, 52, 52, 51, 51, 54,
	54, 54, 54, 55, 55, 37, 37, 37, 37, 37,
	37, 37, 103, 103, 57, 57, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 67, 67, 67, 67,
	67, 67, 58, 58, 58, 58, 58, 58, 58, 33,
	33, 68, 68, 68, 74, 69, 69, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 65,
	65, 65, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 202, 202, 66, 66,
	66, 66, 31, 31, 31, 31, 31, 129, 129, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 133, 133, 133, 133, 133, 133, 133,
	78, 78, 32, 32, 76, 76, 77, 79, 79, 75,
	75, 75, 60, 60, 60, 60, 60, 60, 60, 60,
	62, 62, 62, 80, 80, 81, 81, 82, 82, 83,
	83, 84, 85, 85, 85, 86, 86, 86, 86, 87,
	87, 87, 59, 59, 59, 59, 59, 59, 88, 88,
	88, 88, 92, 92, 70, 70, 72, 72, 71, 73,
	93, 93, 97, 94, 94, 98, 98, 98, 96, 96,
	96, 121, 121, 121, 101, 101, 109, 109, 110, 110,
	102, 102, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 112, 112, 112, 113, 113, 116, 116, 117,
	117, 122, 122, 123, 123, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 196, 197, 127, 128, 128, 128,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 6, 5, 5, 5, 11, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 1, 3, 3, 3,
	3, 2, 3, 1, 1, 1, 1, 2, 2, 3,
	2, 4, 4, 2, 2, 3, 2, 3, 2, 6,
	3, 3, 6, 5, 8, 7, 3, 2, 2, 2,
	2, 2, 2, 4, 1, 2, 0, 4, 3, 4,
	3, 3, 3, 3, 3, 3, 3, 2, 4, 6,
	2, 3, 2, 3, 1, 0, 2, 0, 3, 3,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 2, 2, 2, 2,
	1, 3, 3, 2, 1, 1, 1, 4, 4, 4,
	5, 2, 2, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 3, 3, 0, 1, 0,
	1, 0, 2, 1, 0, 3, 3, 0, 1, 2,
	5, 4, 1, 2, 2, 3, 2, 3, 0, 1,
	2, 3, 3, 2, 3, 2, 2, 1, 1, 1,
	3, 2, 2, 1, 4, 4, 7, 7, 13, 1,
	1, 2, 2, 8, 0, 1, 1, 0, 1, 1,
	3, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	6, 11, 13, 7, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 3,
	6, 4, 2, 4, 2, 2, 2, 2, 3, 1,
	1, 0, 1, 0, 1, 0, 2, 2, 0, 2,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 7, 1, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 3, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 6, 8, 8,
	6, 8, 8, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 1, 2, 1, 2,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -194, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 142, 115, 135, 48, 163, 164,
	166, 167, 25, 136, 137, 140, 141, -196, 8, 259,
	52, -195, 291, -82, 15, -26, 5, -24, -201, -24,
	-24, -24, -24, -24, -164, 52, -120, -188, 150, 251,
	117, 132, 118, 133, 69, -102, 120, 122, 118, 118,
	119, 120, 251, 117, 118, -51, -122, 55, -115, 157,
	268, 20, 163, 176, 177, 168, 202, 192, 269, 155,
	189, 193, 238, 290, 64, 166, 247, 126, 161, 138,
	187, 183, 180, 27, 208, 275, 182, 129, 209, 213,
	239, 266, 173, 174, 241, 206, 31, 131, 270, 33,
	146, 242, 211, 205, 200, 204, 172, 199, 37, 215,
	214, 216, 237, 195, 156, 218, 184, 18, 141, 144,
	210, 212, 181, 158, 124, 148, 274, 243, 179, 145,
	159, 140, 246, 154, 167, 240, 175, 249, 36, 223,
	170, 171, 128, 164, 152, 197, 147, 185, 186, 203,
	169, 198, 165, 149, 142, 248, 224, 276, 196, 194,
	190, 191, 153, 120, 150, 151, 230, 231, 232, 233,
	271, 272, 244, 188, 225, 226, 118, 105, 193, 111,
	228, 119, 31, 148, -131, 118, -104, 151, 230, 231,
	232, 233, 55, 240, 239, 234, -122, 165, -127, -127,
	-127, -127, -127, -2, -86, 17, 16, -5, -3, -196,
	6, 20, 21, -30, 38, 39, -25, -36, 96, -37,
	-122, -56, 71, -61, 28, 55, -115, 23, -60, -57,
	-75, -73, -74, 105, 106, 94, 95, 102, 72, 107,
	-65, -63, -64, -66, 57, 56, 65, 58, 59, 60,
	61, 66, 67, 68, -116, -71, -196, 42, 43, 260,
	261, 262, 263, 267, 264, 74, 32, 250, 258, 257,
	256, 254, 255, 252, 253, 289, 123, 251, 100, 259,
	-102, -39, -40, -41, -42, -53, -74, -196, -51, 11,
	-46, -51, -94, -130, 165, -98, 240, 239, -117, -96,
	-116, -114, 238, 193, 237, 55, -115, 116, 278, 70,
	22, 24, 221, 227, 73, 105, 16, 74, 287, 288,
	104, 260, 111, 46, 252, 253, 250, 262, 263, 251,
	228, 28, 10, 25, 136, 21, 98, 113, 77, 78,
	139, 23, 137, 68, 19, 49, 130, 11, 277, 13,
	14, 279, 123, 122, 89, 119, 44, 8, 107, 26,
	86, 40, 134, 42, 87, 17, 254, 255, 30, 267,
	143, 100, 47, 34, 71, 66, 50, 245, 69, 15,
	45, 132, 88, 114, 259, 43, 117, 6, 265, 29,
	135, 41, 118, 229, 76, 121, 67, 5, 133, 9,
	48, 51, 256, 257, 258, 32, 75, 12, -165, -153,
	55, 119, 120, -116, -110, 123, -110, -116, -110, 259,
	118, -51, -51, -109, 123, 55, -109, -109, -109, -51,
	108, -51, 55, 29, 251, 55, 148, 118, 149, 120,
	-128, -196, -117, -128, -128, -128, 152, 153, -128, -105,
	235, 50, -128, -197, 54, -87, 19, 30, -37, -122,
	-83, -84, -37, -82, -2, -24, 34, -28, 21, 63,
	11, -119, 70, 69, 86, -118, 22, -116, 57, 108,
	-37, -58, 89, 71, 87, 88, 73, 91, 90, 101,
	94, 95, 96, 97, 98, 99, 100, 92, 93, 104,
	289, 79, 80, 81, 82, 83, 84, 85, -103, -196,
	-74, -196, 109, 110, -61, -61, -61, -61, -61, -61,
	-61, -196, -2, -69, -37, -196, -196, -196, -196, -196,
	-196, -196, -196, -196, -78, -37, -196, -202, -196, -202,
	-202, -202, -202, -202, -202, -202, -133, 105, 193, 138,
	187, -136, -135, 197, 168, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 192, 269, -196, -196, -196, -196,
	-52, 26, -51, 29, 53, -47, -49, -48, -50, 40,
	44, 46, 41, 42, 43, 47, -126, 22, -39, -196,
	-125, 144, -124, 22, -122, 57, -51, -46, -198, 53,
	11, 51, 53, -94, 165, -95, -99, 241, 243, 79,
	-121, -116, 57, 28, 29, 54, 53, -154, -134, -138,
	-135, -140, -139, -141, -136, -137, 189, 193, 190, 105,
	194, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 207, 196, 208, 29, 138, 185, 186, 187, 188,
	209, 210, 211, 212, 213, 214, 215, 216, 179, 180,
	182, 183, 184, -116, -51, -181, 51, 55, 71, 55,
	50, -51, -51, 245, -128, 121, -51, 23, 50, -51,
	55, 55, -123, -122, -114, -128, -128, -128, -128, -128,
	-128, -128, -128, -128, -128, -107, 229, 236, -51, 9,
	89, 53, 18, 108, 53, -85, 24, 25, -86, -197,
	-30, -62, -116, 58, 61, -29, 41, -51, -37, -37,
	-67, 66, 71, 67, 68, -118, 96, -123, -117, -114,
	-61, -68, -71, -74, 62, 89, 87, 88, 73, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -129, 55, 57, -133, 55, -60,
	-60, -116, -35, 21, -34, -36, -197, 53, -197, -2,
	-34, -34, -37, -37, -75, -116, -122, -75, -34, -28,
	-76, -77, 75, -75, -197, 191, -34, -35, -34, -34,
	-90, 144, -51, -93, -97, -75, -40, -41, -41, -40,
	-41, 40, 40, 40, 45, 40, 45, 40, -48, -122,
	-197, -54, 48, 122, 49, -196, -124, -90, 51, -39,
	-51, -98, -95, 53, 242, 244, 245, 50, -37, -145,
	105, 104, -166, -167, -168, -117, 57, 58, -153, -155,
	-157, -156, -169, -158, 126, 124, 128, 129, 133, -162,
	119, 134, 66, 71, -193, 126, 50, 221, 227, 124,
	134, 133, 290, 64, 127, 277, 279, 28, -148, 292,
	217, -146, 224, -142, 52, -142, -142, 191, -142, -142,
	-142, -144, 193, -144, -144, -144, -144, 52, 52, -142,
	-142, -142, -150, 52, 181, -150, -150, -151, 52, -151,
	50, 51, 22, -179, 271, -180, 55, -128, 23, -128,
	-51, -111, 116, 113, 114, -176, 112, 221, 193, 64,
	28, 15, 260, 144, 276, 55, 145, -51, -51, -51,
	-128, -106, 11, 89, 36, -37, -37, -123, -84, -87,
	-101, 19, 11, 32, 32, -34, 66, 67, 68, 108,
	-196, -68, -61, -61, -61, -33, 139, 70, -197, -197,
	-34, 53, -37, -197, -197, -197, 53, 51, 22, 53,
	11, 108, 53, 11, -197, -34, -79, -77, 77, -37,
	-197, -197, -197, -197, -197, -59, 29, 32, -2, -196,
	-196, -55, 53, 12, 79, -44, -43, 50, 51, -45,
	50, -43, 40, 40, 119, 119, 119, -91, -116, -55,
	-39, -55, -99, -100, 246, 243, 249, 55, 53, -168,
	79, 52, 50, -160, -116, 134, -162, -162, 55, -162,
	55, 55, 66, -116, 9, 134, 134, -196, 57, -122,
	-190, 278, 16, 52, 57, 58, 59, 66, -143, 65,
	-57, 218, 250, 253, 252, 293, -147, 225, 58, -144,
	-144, -142, -144, -145, 29, -145, -145, -145, -145, -152,
	57, -152, -149, 271, 272, -149, 58, -150, 58, -51,
	-116, -2, -178, -177, -117, -183, 22, -127, -120, -200,
	150, 125, 130, 129, 55, 124, 128, 144, -182, 150,
	125, 126, 130, 129, 55, 119, 134, 124, 128, 144,
	133, -112, -113, 121, 22, 119, 134, 144, 116, -128,
	-108, 87, 12, -122, -122, 37, 108, -51, -38, 11,
	96, -117, -35, -33, 70, -61, -61, -197, -36, -132,
	105, 189, 138, 187, 183, 206, 207, 195, 223, 185,
	224, -129, -132, -61, -61, -117, -61, -61, 268, -82,
	78, -37, 76, -92, 50, -93, -70, -72, -71, -196,
	-2, -88, -116, -91, -82, -97, -37, -37, -37, 52,
	-37, -196, -196, -196, -197, 53, -82, -55, 243, 247,
	248, -167, -168, -171, -170, -116, 134, 10, 9, 130,
	124, 55, 55, 55, -193, -143, -37, 52, 22, 28,
	58, -185, 289, -196, -142, 52, -142, 52, 54, -145,
	-145, -144, -145, 55, 105, 54, 53, 54, 185, 185,
	53, 54, 53, 52, 51, 50, 53, 79, -184, 19,
	158, 159, -199, 119, 134, -127, -116, -127, -116, -51,
	-127, -116, 126, -157, 57, -37, -55, -39, -197, -61,
	-197, -142, -142, -142, -151, -142, 174, -142, 174, -197,
	-197, -197, 53, 19, -197, 53, 19, -196, -32, 265,
	-37, 27, -92, 53, -197, -197, -197, 53, 108, -197,
	-86, -89, -116, 134, -89, -89, -89, -125, -116, -86,
	54, 53, -142, -142, -159, 154, 155, 29, 156, -159,
	134, 134, -197, -89, 279, 53, 193, 186, 219, 197,
	-197, 54, 54, -145, -144, 57, -144, 226, 226, 58,
	58, -171, -116, -51, -177, -168, 121, 20, 6, 8,
	9, 10, -116, 52, 26, -116, -80, 13, -144, 55,
	-61, -61, -61, -61, -61, -197, 57, 134, -72, 32,
	-2, -196, -116, -116, 53, 54, -197, -197, -197, -54,
	-173, -172, 51, 131, 64, 271, -170, 50, 66, 157,
	50, -160, -116, -192, 287, 288, -189, 156, 54, 52,
	58, 191, -149, -145, -145, 54, 54, 54, 52, 52,
	-161, -116, 52, -89, -196, 124, -81, 14, 16, -197,
	-197, -197, -197, -31, 89, 271, 9, -70, -2, 108,
	-116, -172, 55, -163, 79, 57, 273, 9, 10, 52,
	52, 266, -191, 54, -55, -171, -171, -186, 53, 51,
	-171, 54, -174, -175, 144, 134, -37, -69, -197, 269,
	47, 274, -93, -197, -116, 58, -116, -159, -159, -161,
	-171, 54, 164, 281, 282, 143, 283, 156, 284, 285,
	54, 54, -187, 271, -116, -37, 54, -181, -197, 53,
	-116, 52, 37, 270, 275, 54, 54, 271, 58, 16,
	58, 58, 58, 58, 282, 143, 284, 16, -55, 290,
	-179, -175, 32, -171, 37, 127, 58, 58, 286, -122,
	-37, 146, 54, 271, -51, 108, 147, 274, 52, -117,
	-196, 275, -161, -61, 143, 54, -197, -197,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 627, 0, 385, 385, 385, 385, 385, 385, 0,
	-2, 680, 0, 0, 0, 0, -2, 375, 376, 0,
	378, 379, 925, 925, 925, 925, 925, 0, 33, 34,
	923, 1, 3, 635, 0, 0, 389, 392, 387, 0,
	680, 0, 0, 0, 60, 0, 0, 0, 0, 678,
	678, 0, 678, 83, 0, 0, 0, 681, 0, 676,
	0, 676, 676, 676, 0, 334, 457, 701, 702, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 0, 0, 0, 0,
	926, 926, 926, 926, 0, 926, 363, 352, 354, 355,
	356, 357, 926, 372, 373, 362, 374, 377, 380, 381,
	382, 383, 384, 27, 639, 0, 0, 627, 29, 0,
	385, 390, 391, 395, 393, 394, 386, 0, 403, 407,
	0, 465, 0, 470, 472, -2, -2, 0, 507, 508,
	509, 510, 511, 0, 0, 0, 0, 0, 0, 0,
	535, 536, 537, 538, 612, 613, 614, 615, 616, 617,
	618, 619, 474, 475, 609, 659, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 0, 566, 566, 566,
	566, 566, 566, 566, 566, 0, 0, 0, 0, 0,
	0, 0, 414, 416, 417, 418, 438, 0, 440, 0,
	0, 41, 45, 0, 899, 663, -2, -2, 0, 0,
	699, 700, -2, 818, -2, 697, 698, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 0, 96,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 93,
	0, 926, 0, 0, 0, 0, 0, 0, 0, 333,
	0, 335, 926, 926, 926, 926, 926, 926, 926, 926,
	344, 927, 928, 345, 346, 347, 926, 926, 349, 0,
	364, 0, 358, 28, 924, 22, 0, 0, 636, 0,
	628, 629, 632, 635, 27, 392, 0, 397, 396, 388,
	0, 404, 0, 0, 0, 408, 0, 410, 411, 0,
	468, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 492, 493, 494, 495, 496, 497, 498, 471, 0,
	485, 0, 0, 0, 527, 528, 529, 530, 531, 532,
	0, 399, 27, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 395, 0, 601, 0, 557, 0, 558,
	559, 560, 561, 562, 563, 564, 565, 593, 0, 595,
	596, 597, 598, 599, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 185, 186, 0, 399, 0, 0,
	43, 0, 456, 0, 0, 0, 0, 0, 0, 445,
	0, 0, 448, 0, 0, 0, 0, 439, 0, 0,
	459, 866, 441, 0, 443, 444, -2, 0, 0, 0,
	39, 40, 0, 46, 899, 48, 49, 0, 0, 0,
	237, 671, 672, 673, 669, 281, 0, 101, 231, 227,
	103, 104, 105, 106, 217, 163, 217, 217, 217, 217,
	217, 234, 234, 234, 234, 234, 198, 199, 200, 201,
	202, 203, 204, 0, 0, 180, 217, 217, 217, 184,
	207, 208, 209, 210, 211, 212, 213, 214, 219, 219,
	219, 221, 221, 0, 0, 87, 0, 926, 0, 926,
	0, 94, 0, 0, 300, 0, 328, 677, 0, 926,
	331, 332, 458, 703, 704, 336, 337, 338, 339, 340,
	341, 342, 343, 348, 351, 365, 359, 360, 353, 640,
	0, 0, 0, 0, 0, 631, 633, 634, 639, 30,
	395, 0, 620, 0, 0, 0, 398, 25, 466, 467,
	469, 486, 0, 488, 490, 409, 405, 0, 610, -2,
	476, 477, 501, 502, 503, 0, 0, 0, 0, 499,
	481, 0, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 526, 577, 578, 534, 0, 524,
	525, 533, 0, 0, 400, 401, 504, 0, 658, 27,
	0, 0, 0, 0, 0, 609, 0, 0, 0, 0,
	607, 604, 0, 0, 567, 594, 0, 0, 0, 0,
	0, 0, 455, 463, 660, 0, 415, 434, 436, 0,
	431, 446, 447, 449, 0, 451, 0, 453, 454, 419,
	420, 421, 0, 0, 0, 0, 442, 463, 0, 463,
	42, 664, 47, 0, 0, 52, 53, 665, 666, 667,
	238, 0, 95, 282, 284, 287, 288, 289, 97, 98,
	99, 100, 0, 263, 277, 0, 0, 0, 0, 0,
	257, 258, 108, 0, 110, 0, 0, 113, 114, 0,
	116, 118, 0, 0, 0, 0, 0, 0, 107, 0,
	233, 229, 228, 162, 0, 234, 234, 217, 234, 191,
	192, 237, 0, 237, 237, 237, 237, 0, 0, 224,
	224, 183, 174, 0, 219, 176, 177, 178, 0, 179,
	0, 0, 0, 65, 0, 85, 86, 66, 679, 67,
	69, 925, 82, 0, 692, 301, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 0, 0, 327, 926,
	330, 368, 0, 0, 0, 637, 638, 0, 630, 23,
	0, 674, 675, 621, 622, 412, 487, 489, 491, 0,
	399, 478, 499, 482, 0, 479, 0, 0, 473, 539,
	0, 0, 506, -2, 542, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 605, 0, 0,
	556, 568, 569, 570, 571, 652, 0, 0, -2, 0,
	0, 627, 0, 0, 0, 428, 435, 0, 0, 429,
	0, 430, 450, 452, 0, 0, 0, 0, 426, 627,
	463, 38, 50, 51, 0, 0, 57, 239, 0, 285,
	0, 0, 0, 0, 278, 250, 0, 0, 253, 0,
	255, 256, 109, 0, 0, 115, 117, 0, 120, 121,
	0, 134, 0, 0, 157, 127, 128, 129, 130, 131,
	132, 0, 217, 217, 154, 232, 102, 230, 0, 237,
	237, 234, 237, 193, 0, 194, 195, 196, 197, 0,
	215, 0, 181, 0, 0, 182, 0, 175, 0, 0,
	0, -2, 88, 89, 0, 72, 0, 290, 0, 925,
	0, 315, 316, 317, 318, 319, 320, 321, 925, 0,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
	312, 0, 925, 693, 694, 695, 696, 0, 0, 329,
	350, 0, 0, 366, 367, 641, 0, 24, 463, 0,
	406, 611, 0, 480, 0, 500, 483, 540, 402, 0,
	217, 217, 582, 217, 221, 585, 586, 217, 588, 217,
	591, 0, 0, 0, 0, 610, 0, 0, 0, 602,
	555, 608, 0, 31, 0, 652, 642, 654, 656, 0,
	27, 0, 648, 0, 635, 661, 464, 662, 432, 0,
	437, 0, 0, 0, 440, 0, 635, 37, 54, 55,
	56, 283, 286, 0, 259, 217, 217, 0, 0, 0,
	0, 251, 252, 254, 111, 112, 0, 0, 0, 135,
	0, 126, 0, 0, 150, 0, 152, 0, 218, 187,
	188, 237, 189, 235, 236, 234, 0, 234, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 71, 0, 313, 314, 294, 0, 295, 297, 298,
	299, 0, 277, 293, 369, 370, 623, 413, 541, 484,
	544, 579, 234, 583, 584, 587, 589, 590, 592, 546,
	545, 547, 0, 0, 550, 0, 0, 0, 0, 0,
	606, 0, 32, 0, 657, -2, 0, 0, 0, 44,
	35, 0, 423, 424, 0, 0, 0, 459, 427, 36,
	241, 0, 261, 262, 264, 269, 270, 0, 0, 265,
	277, 274, 155, 0, 123, 0, 0, 224, 160, 161,
	133, 151, 153, 190, 237, 216, 237, 225, 226, 0,
	0, 0, 0, 0, 90, 91, 0, 73, 74, 75,
	76, 77, 0, 0, 0, 278, 625, 0, 580, 581,
	0, 0, 0, 0, 572, 554, 603, 0, 655, 0,
	-2, 0, 650, 649, 0, 433, 460, 461, 462, 422,
	240, 242, 0, 248, 0, 0, 260, 0, 271, 272,
	0, 0, 278, 0, 275, 276, 119, 0, 122, 136,
	0, 158, 159, 205, 206, 220, 223, 463, 0, 0,
	78, 279, 0, 0, 0, 0, 26, 0, 0, 548,
	549, 551, 552, 0, 0, 0, 0, 645, 27, 0,
	425, 243, 244, 0, 249, 246, 0, 0, 0, 0,
	0, 156, 0, 125, 61, 0, 0, 80, 0, 0,
	0, 84, 0, 323, 0, 0, 626, 624, 553, 0,
	0, 0, 653, -2, 651, 245, 247, 266, 267, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 147, 0,
	463, 62, 68, 0, 280, 79, 291, 87, 322, 0,
	0, 0, 573, 0, 576, 0, 273, 0, 138, 0,
	140, 141, 142, 143, 144, 145, 146, 0, 63, 0,
	296, 324, 0, 0, 574, 0, 137, 139, 148, 0,
	81, 0, 292, 0, 0, 0, 0, 0, 0, 149,
	0, 575, 0, 0, 0, 268, 325, 326,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 291,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 292, 3, 293, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:333
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:338
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:339
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:343
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:366
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:374
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:378
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:384
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:391
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:397
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:401
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:407
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:411
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:418
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:430
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:442
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:446
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:452
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:458
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:462
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:466
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:471
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:472
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:476
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:480
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:485
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:489
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:495
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:499
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:503
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:507
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:513
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:517
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:523
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:527
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:531
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:537
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:541
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:545
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:549
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:555
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:559
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:565
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:570
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:586
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:601
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:616
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:624
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:632
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:636
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:640
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:652
		{
			yyVAL.bytes = nil
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:656
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:660
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:665
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:669
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:673
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:677
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:681
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:685
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:690
		{
			yyVAL.expr = nil
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:694
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:699
		{
			yyVAL.expr = nil
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:703
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:708
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:712
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:717
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:721
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:727
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:732
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:737
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:743
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:748
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:754
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:759
		{
			yyVAL.bytes = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:763
		{
			yyVAL.bytes = nil
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:769
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:776
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:783
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:788
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:792
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:796
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:800
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:806
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:811
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:822
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:834
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:839
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:844
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:849
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Name: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:854
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:859
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:864
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:869
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:874
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:879
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:884
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:889
		{
			yyDollar[1].columnType.Check = NewWhere(WhereStr, yyDollar[4].expr)
			yyDollar[1].columnType.CheckNoInherit = yyDollar[6].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:895
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:900
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:905
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:911
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:917
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:923
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:930
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:934
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:938
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:942
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:946
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:950
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:954
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[2].boolVal))
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:958
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:964
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:968
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:973
		{
			yyVAL.sequence = &Sequence{}
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:977
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:982
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:987
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:992
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:997
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1002
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1007
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1012
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1017
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1022
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1027
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1032
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 149:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1037
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1044
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1048
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1052
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1056
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1060
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1065
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1069
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1074
		{
			yyVAL.bytes = nil
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1084
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1089
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1095
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1099
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1103
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1107
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1111
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1115
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1119
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1123
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1131
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1137
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1143
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1149
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1155
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1161
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1167
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1175
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1179
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1183
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1187
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1191
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1197
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1201
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1207
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1211
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1215
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1219
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1223
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1227
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1231
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1235
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1239
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1243
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1247
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1251
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1255
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1259
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1263
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1267
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1271
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1275
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 206:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1284
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1290
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1294
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1298
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1302
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1306
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1310
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1314
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1318
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1324
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1329
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1334
		{
			yyVAL.optVal = nil
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1338
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1343
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1347
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1355
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1359
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1365
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1373
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1377
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1381
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 227:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1386
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1390
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1395
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1399
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1404
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1408
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1412
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1417
		{
			yyVAL.str = ""
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1421
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1425
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1430
		{
			yyVAL.str = ""
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1434
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1438
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1444
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1448
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1454
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1458
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1464
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1468
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1473
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1477
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1483
		{
			yyVAL.str = ""
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1487
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1493
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1497
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1501
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1505
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1509
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1513
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1517
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1523
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1527
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1533
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1537
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1543
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1548
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1555
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1561
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 266:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1567
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 267:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1573
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 268:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1581
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1593
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1597
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1601
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1605
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 273:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1611
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:    &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns: yyDollar[7].indexColumns,
			}
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1620
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1624
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1628
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1633
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1640
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1644
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1649
		{
			yyVAL.str = ""
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1653
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1657
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1665
		{
			yyVAL.str = yyDollar[1].str
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1669
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1673
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1679
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1683
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1687
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1693
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:1697
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 292:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1711
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 293:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1725
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1734
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 295:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1738
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 296:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:1742
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 297:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1755
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 298:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1765
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 299:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1770
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1775
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1779
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1811
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1817
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1821
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 325:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1827
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 326:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1831
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1837
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1843
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 329:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1851
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1856
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1864
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1868
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1874
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1878
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1883
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1889
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1893
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1897
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1902
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1906
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1910
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1914
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1918
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1922
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1926
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1930
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1934
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1938
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1942
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1946
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1956
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1960
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1964
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1968
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1972
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1976
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1980
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1990
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1996
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2000
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2006
		{
			yyVAL.str = ""
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2010
		{
			yyVAL.str = "extended "
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2016
		{
			yyVAL.str = ""
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2020
		{
			yyVAL.str = "full "
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2026
		{
			yyVAL.str = ""
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2030
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2034
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2040
		{
			yyVAL.showFilter = nil
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2044
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2048
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2054
		{
			yyVAL.str = ""
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2058
		{
			yyVAL.str = SessionStr
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2062
		{
			yyVAL.str = GlobalStr
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2068
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2072
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2078
		{
			yyVAL.statement = &Begin{}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2082
		{
			yyVAL.statement = &Begin{}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2088
		{
			yyVAL.statement = &Commit{}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2094
		{
			yyVAL.statement = &Rollback{}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2100
		{
			yyVAL.statement = &OtherRead{}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2104
		{
			yyVAL.statement = &OtherRead{}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2108
		{
			yyVAL.statement = &OtherRead{}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2112
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2116
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2121
		{
			setAllowComments(yylex, true)
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2125
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2131
		{
			yyVAL.bytes2 = nil
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2135
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2141
		{
			yyVAL.str = UnionStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2145
		{
			yyVAL.str = UnionAllStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2149
		{
			yyVAL.str = UnionDistinctStr
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2154
		{
			yyVAL.str = ""
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2158
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2162
		{
			yyVAL.str = SQLCacheStr
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2167
		{
			yyVAL.str = ""
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2171
		{
			yyVAL.str = DistinctStr
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2176
		{
			yyVAL.str = ""
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2180
		{
			yyVAL.str = StraightJoinHint
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2185
		{
			yyVAL.selectExprs = nil
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2189
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2195
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2199
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2205
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2209
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2213
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2217
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2222
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2226
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2230
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2237
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2242
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2246
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2252
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2256
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2266
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2270
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2274
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2280
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 422:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2284
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2290
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2295
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2299
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2305
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2309
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2322
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2326
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2330
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2334
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2340
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2342
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2346
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2348
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2352
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2354
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2357
		{
			yyVAL.empty = struct{}{}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2359
		{
			yyVAL.empty = struct{}{}
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2362
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2366
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2370
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2377
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2383
		{
			yyVAL.str = JoinStr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2387
		{
			yyVAL.str = JoinStr
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2391
		{
			yyVAL.str = JoinStr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2397
		{
			yyVAL.str = StraightJoinStr
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2403
		{
			yyVAL.str = LeftJoinStr
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2407
		{
			yyVAL.str = LeftJoinStr
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2411
		{
			yyVAL.str = RightJoinStr
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2415
		{
			yyVAL.str = RightJoinStr
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2421
		{
			yyVAL.str = NaturalJoinStr
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2425
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2435
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2439
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2445
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2449
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2454
		{
			yyVAL.indexHints = nil
		}
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2458
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2462
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2466
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2471
		{
			yyVAL.expr = nil
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2475
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2481
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2485
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2489
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2493
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2497
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2501
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2505
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2511
		{
			yyVAL.str = ""
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2515
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2521
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2525
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2531
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2535
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2539
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2543
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 480:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2547
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2551
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2555
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2559
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 484:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2563
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2567
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2573
		{
			yyVAL.str = IsNullStr
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2577
		{
			yyVAL.str = IsNotNullStr
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2581
		{
			yyVAL.str = IsTrueStr
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2585
		{
			yyVAL.str = IsNotTrueStr
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2589
		{
			yyVAL.str = IsFalseStr
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2593
		{
			yyVAL.str = IsNotFalseStr
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2599
		{
			yyVAL.str = EqualStr
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2603
		{
			yyVAL.str = LessThanStr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2607
		{
			yyVAL.str = GreaterThanStr
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2611
		{
			yyVAL.str = LessEqualStr
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2615
		{
			yyVAL.str = GreaterEqualStr
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2619
		{
			yyVAL.str = NotEqualStr
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2623
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2628
		{
			yyVAL.expr = nil
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2632
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2638
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2642
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2646
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2652
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2658
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2662
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2668
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2672
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2676
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2680
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2684
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2688
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2692
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2696
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2700
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2704
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2708
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2712
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2716
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2720
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2724
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2728
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2732
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2736
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2740
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2744
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2748
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2752
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2756
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2764
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2778
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2782
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2786
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2794
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2808
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2812
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 541:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2816
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2826
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2830
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 544:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2834
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 545:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2838
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 546:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2842
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 547:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2846
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 548:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2850
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 549:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2854
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 550:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2858
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 551:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2862
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 552:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2866
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 553:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:2870
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 554:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2874
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2878
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2882
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2892
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2896
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2900
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2904
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2909
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2914
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2919
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2924
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2928
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2942
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2946
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2950
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2954
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2960
		{
			yyVAL.str = ""
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2964
		{
			yyVAL.str = BooleanModeStr
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2968
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 575:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2972
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2976
		{
			yyVAL.str = QueryExpansionStr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2982
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2986
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2992
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2996
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3000
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3004
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3008
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3012
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3018
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3022
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3026
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3030
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3034
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3038
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3042
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3046
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3052
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3056
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3060
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3064
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3068
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3072
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3076
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3081
		{
			yyVAL.expr = nil
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3085
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3090
		{
			yyVAL.str = string("")
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3094
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3100
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3104
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3110
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3115
		{
			yyVAL.expr = nil
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3119
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3125
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3129
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3133
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3139
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3143
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3147
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3151
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3155
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3159
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3163
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3167
		{
			yyVAL.expr = &NullVal{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3173
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3182
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3186
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3191
		{
			yyVAL.exprs = nil
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3195
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3200
		{
			yyVAL.expr = nil
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3204
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3209
		{
			yyVAL.orderBy = nil
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3213
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3219
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3223
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3229
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3234
		{
			yyVAL.str = AscScr
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3238
		{
			yyVAL.str = AscScr
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3242
		{
			yyVAL.str = DescScr
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3247
		{
			yyVAL.limit = nil
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3251
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3255
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3259
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3264
		{
			yyVAL.str = ""
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3268
		{
			yyVAL.str = ForUpdateStr
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3272
		{
			yyVAL.str = ShareModeStr
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3285
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3289
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3293
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 645:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3298
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3302
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 647:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3306
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3313
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3317
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3321
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3325
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3330
		{
			yyVAL.updateExprs = nil
		}
	case 653:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3334
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3340
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3344
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3350
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3354
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3360
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3366
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3376
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3380
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3386
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3392
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3396
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3402
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3406
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3410
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3417
		{
			yyVAL.bytes = []byte("charset")
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3424
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3428
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3432
		{
			yyVAL.expr = &Default{}
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3441
		{
			yyVAL.byt = 0
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3443
		{
			yyVAL.byt = 1
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3446
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3448
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3451
		{
			yyVAL.str = ""
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3453
		{
			yyVAL.str = IgnoreStr
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3457
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3459
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3461
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3463
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3465
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3467
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3469
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3471
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3473
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3475
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3478
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3480
		{
			yyVAL.empty = struct{}{}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3482
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3486
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3488
		{
			yyVAL.empty = struct{}{}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3492
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3496
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3503
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3509
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3513
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3520
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3764
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3773
		{
			decNesting(yylex)
		}
	case 925:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3778
		{
			forceEOF(yylex)
		}
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3783
		{
			forceEOF(yylex)
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3787
		{
			forceEOF(yylex)
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3791
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
