// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const SPATIAL = 57452
const FULLTEXT = 57453
const FOREIGN = 57454
const KEY_BLOCK_SIZE = 57455
const UNIQUE = 57456
const KEY = 57457
const SHOW = 57458
const DESCRIBE = 57459
const EXPLAIN = 57460
const DATE = 57461
const ESCAPE = 57462
const REPAIR = 57463
const OPTIMIZE = 57464
const TRUNCATE = 57465
const MAXVALUE = 57466
const PARTITION = 57467
const REORGANIZE = 57468
const LESS = 57469
const THAN = 57470
const PROCEDURE = 57471
const TRIGGER = 57472
const VINDEX = 57473
const VINDEXES = 57474
const STATUS = 57475
const VARIABLES = 57476
const BEGIN = 57477
const START = 57478
const TRANSACTION = 57479
const COMMIT = 57480
const ROLLBACK = 57481
const BIT = 57482
const TINYINT = 57483
const SMALLINT = 57484
const MEDIUMINT = 57485
const INT = 57486
const INTEGER = 57487
const BIGINT = 57488
const INTNUM = 57489
const REAL = 57490
const DOUBLE = 57491
const FLOAT_TYPE = 57492
const DECIMAL = 57493
const NUMERIC = 57494
const TIME = 57495
const TIMESTAMP = 57496
const DATETIME = 57497
const YEAR = 57498
const CHAR = 57499
const VARCHAR = 57500
const VARYING = 57501
const BOOL = 57502
const CHARACTER = 57503
const VARBINARY = 57504
const NCHAR = 57505
const TEXT = 57506
const TINYTEXT = 57507
const MEDIUMTEXT = 57508
const LONGTEXT = 57509
const BLOB = 57510
const TINYBLOB = 57511
const MEDIUMBLOB = 57512
const LONGBLOB = 57513
const JSON = 57514
const ENUM = 57515
const GEOMETRY = 57516
const POINT = 57517
const LINESTRING = 57518
const POLYGON = 57519
const GEOMETRYCOLLECTION = 57520
const MULTIPOINT = 57521
const MULTILINESTRING = 57522
const MULTIPOLYGON = 57523
const NULLX = 57524
const AUTO_INCREMENT = 57525
const APPROXNUM = 57526
const SIGNED = 57527
const UNSIGNED = 57528
const ZEROFILL = 57529
const DATABASES = 57530
const TABLES = 57531
const VITESS_KEYSPACES = 57532
const VITESS_SHARDS = 57533
const VITESS_TABLETS = 57534
const VSCHEMA_TABLES = 57535
const EXTENDED = 57536
const FULL = 57537
const PROCESSLIST = 57538
const NAMES = 57539
const CHARSET = 57540
const GLOBAL = 57541
const SESSION = 57542
const ISOLATION = 57543
const LEVEL = 57544
const READ = 57545
const WRITE = 57546
const ONLY = 57547
const REPEATABLE = 57548
const COMMITTED = 57549
const UNCOMMITTED = 57550
const SERIALIZABLE = 57551
const CURRENT_TIMESTAMP = 57552
const DATABASE = 57553
const CURRENT_DATE = 57554
const CURRENT_TIME = 57555
const LOCALTIME = 57556
const LOCALTIMESTAMP = 57557
const UTC_DATE = 57558
const UTC_TIME = 57559
const UTC_TIMESTAMP = 57560
const REPLACE = 57561
const CONVERT = 57562
const CAST = 57563
const SUBSTR = 57564
const SUBSTRING = 57565
const GROUP_CONCAT = 57566
const SEPARATOR = 57567
const MATCH = 57568
const AGAINST = 57569
const BOOLEAN = 57570
const LANGUAGE = 57571
const WITH = 57572
const QUERY = 57573
const EXPANSION = 57574
const UNUSED = 57575

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	150, 275,
	151, 275,
	-2, 265,
	-1, 236,
	108, 594,
	-2, 590,
	-1, 237,
	108, 595,
	-2, 591,
	-1, 306,
	79, 753,
	-2, 58,
	-1, 307,
	79, 714,
	-2, 59,
	-1, 312,
	79, 698,
	-2, 561,
	-1, 314,
	79, 735,
	-2, 563,
	-1, 575,
	51, 41,
	53, 41,
	-2, 43,
	-1, 710,
	108, 597,
	-2, 593,
	-1, 921,
	5, 28,
	-2, 407,
	-1, 946,
	5, 27,
	-2, 536,
	-1, 1189,
	5, 28,
	-2, 537,
	-1, 1235,
	5, 27,
	-2, 539,
	-1, 1297,
	5, 28,
	-2, 540,
}

const yyPrivate = 57344

const yyLast = 10590

var yyAct = [...]int{

	237, 863, 1288, 1246, 522, 648, 790, 772, 1099, 1100,
	241, 1127, 1016, 266, 812, 215, 569, 521, 3, 1019,
	843, 857, 1096, 773, 1073, 745, 965, 811, 735, 808,
	742, 913, 567, 1007, 311, 87, 954, 712, 87, 53,
	761, 1195, 455, 585, 744, 209, 853, 822, 461, 410,
	267, 47, 305, 584, 769, 556, 571, 292, 467, 949,
	293, 475, 87, 87, 316, 214, 302, 52, 87, 243,
	316, 239, 300, 895, 880, 1319, 87, 224, 87, 536,
	1309, 1317, 1295, 1315, 87, 228, 864, 879, 1308, 210,
	211, 212, 213, 1091, 291, 1294, 1183, 414, 47, 836,
	1131, 1121, 986, 987, 988, 586, 220, 587, 68, 803,
	991, 989, 297, 677, 884, 435, 82, 78, 79, 80,
	678, 973, 450, 878, 972, 997, 835, 974, 1122, 1123,
	1224, 296, 804, 805, 844, 840, 57, 1172, 1170, 230,
	208, 446, 447, 1270, 488, 487, 497, 498, 490, 491,
	492, 493, 494, 495, 496, 489, 71, 72, 499, 67,
	1316, 59, 60, 61, 62, 63, 1314, 1289, 1052, 770,
	73, 875, 872, 873, 1232, 871, 1023, 827, 437, 994,
	439, 993, 980, 823, 983, 1247, 424, 69, 87, 1024,
	417, 76, 316, 316, 316, 316, 824, 316, 1249, 828,
	656, 882, 885, 75, 316, 76, 436, 438, 647, 964,
	791, 793, 963, 833, 962, 825, 412, 453, 411, 420,
	826, 187, 77, 511, 512, 1275, 1192, 81, 1060, 929,
	907, 316, 684, 479, 430, 1136, 489, 877, 464, 499,
	809, 499, 441, 441, 441, 441, 681, 441, 823, 890,
	474, 473, 472, 844, 441, 1280, 1049, 1148, 463, 876,
	719, 824, 473, 472, 1248, 952, 1056, 70, 474, 1095,
	588, 47, 990, 830, 717, 718, 716, 1093, 762, 474,
	832, 831, 823, 234, 792, 1137, 508, 819, 434, 510,
	820, 87, 651, 1293, 821, 824, 881, 472, 87, 87,
	87, 1271, 985, 762, 316, 936, 469, 50, 509, 883,
	316, 1074, 454, 474, 74, 1299, 520, 715, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 891, 535, 537,
	537, 537, 537, 537, 537, 537, 537, 545, 546, 547,
	548, 1055, 1076, 1211, 1210, 416, 1011, 1010, 568, 829,
	925, 1281, 924, 1050, 998, 1048, 458, 462, 465, 538,
	539, 540, 541, 542, 543, 544, 1051, 296, 473, 472,
	582, 1231, 576, 480, 1078, 290, 1082, 736, 1077, 737,
	1075, 1208, 1158, 687, 688, 474, 1080, 490, 491, 492,
	493, 494, 495, 496, 489, 1079, 1008, 499, 492, 493,
	494, 495, 496, 489, 995, 265, 499, 523, 1081, 1083,
	702, 704, 705, 316, 316, 703, 534, 418, 419, 1278,
	87, 87, 316, 1130, 87, 423, 21, 87, 473, 472,
	1129, 87, 984, 316, 316, 316, 316, 316, 316, 316,
	316, 683, 904, 905, 906, 474, 975, 316, 316, 1305,
	454, 1254, 87, 487, 497, 498, 490, 491, 492, 493,
	494, 495, 496, 489, 441, 665, 499, 316, 866, 310,
	738, 87, 441, 1239, 1302, 415, 682, 316, 1253, 689,
	1239, 1301, 219, 441, 441, 441, 441, 441, 441, 441,
	441, 662, 473, 472, 1239, 1300, 713, 441, 441, 661,
	926, 1239, 1286, 1132, 663, 652, 426, 427, 428, 474,
	1239, 1284, 1239, 1255, 710, 1239, 454, 1239, 1240, 950,
	316, 1204, 1203, 1118, 454, 442, 1191, 454, 513, 514,
	515, 516, 517, 518, 519, 1143, 1142, 747, 706, 23,
	754, 757, 749, 691, 1139, 1140, 763, 473, 472, 1139,
	1138, 87, 714, 708, 87, 87, 87, 87, 87, 919,
	454, 47, 944, 774, 474, 945, 87, 553, 454, 87,
	750, 751, 650, 87, 432, 524, 758, 766, 87, 87,
	747, 454, 316, 739, 740, 50, 749, 595, 594, 308,
	765, 759, 767, 768, 425, 316, 411, 310, 310, 310,
	310, 579, 310, 951, 297, 297, 297, 297, 297, 310,
	798, 775, 699, 700, 778, 776, 777, 54, 779, 568,
	787, 794, 951, 296, 296, 296, 296, 296, 297, 795,
	796, 845, 846, 847, 800, 552, 477, 801, 296, 1097,
	1187, 580, 950, 578, 553, 816, 553, 296, 87, 1147,
	797, 316, 578, 316, 1141, 919, 976, 87, 1063, 553,
	87, 316, 802, 950, 523, 919, 859, 752, 753, 581,
	931, 685, 928, 50, 1039, 1259, 256, 255, 258, 259,
	260, 261, 690, 23, 1257, 257, 262, 23, 855, 856,
	497, 498, 490, 491, 492, 493, 494, 495, 496, 489,
	919, 441, 499, 441, 838, 839, 221, 841, 842, 310,
	1256, 441, 930, 1234, 927, 590, 1219, 1145, 1144, 710,
	1029, 850, 851, 852, 1217, 837, 858, 1112, 807, 50,
	713, 979, 897, 50, 896, 955, 956, 649, 1040, 746,
	748, 903, 854, 1042, 1035, 1036, 1043, 1038, 1037, 849,
	1045, 1041, 50, 848, 909, 764, 860, 861, 1146, 65,
	908, 1044, 1097, 958, 659, 711, 451, 1034, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 697, 1023, 789, 714, 946, 918, 1030,
	1025, 1026, 1031, 1028, 1027, 316, 1020, 1024, 87, 961,
	784, 935, 960, 782, 933, 785, 781, 1032, 783, 780,
	225, 226, 316, 1022, 786, 959, 562, 563, 645, 310,
	947, 948, 893, 894, 1313, 462, 977, 310, 1307, 308,
	968, 1059, 892, 1312, 468, 902, 901, 1003, 310, 310,
	310, 310, 310, 310, 310, 310, 970, 466, 297, 593,
	433, 1185, 310, 310, 1220, 456, 967, 868, 969, 999,
	1000, 87, 316, 316, 658, 316, 457, 296, 981, 982,
	566, 468, 693, 1002, 216, 1004, 1005, 1006, 222, 223,
	1264, 900, 477, 1009, 217, 310, 54, 920, 316, 899,
	1263, 87, 87, 1222, 558, 561, 562, 563, 559, 87,
	560, 564, 937, 951, 955, 956, 470, 1272, 316, 992,
	680, 56, 58, 441, 1021, 577, 1018, 558, 561, 562,
	563, 559, 51, 560, 564, 741, 1, 1033, 865, 1015,
	874, 1287, 1245, 1126, 818, 755, 755, 810, 441, 1066,
	1001, 755, 1067, 409, 64, 1072, 1279, 817, 316, 316,
	596, 1085, 1098, 996, 1084, 774, 916, 834, 755, 1101,
	917, 774, 601, 599, 710, 1103, 600, 921, 922, 923,
	598, 603, 602, 1092, 1108, 1106, 932, 316, 597, 316,
	316, 938, 195, 939, 940, 941, 942, 310, 303, 1107,
	565, 589, 66, 1125, 471, 1047, 1102, 1046, 47, 870,
	310, 910, 911, 912, 1124, 709, 1054, 1119, 676, 889,
	449, 197, 507, 1114, 1115, 1116, 898, 971, 309, 1104,
	316, 686, 1135, 316, 460, 1262, 1221, 934, 1120, 1133,
	1134, 533, 760, 242, 701, 316, 254, 251, 253, 252,
	1150, 692, 943, 481, 240, 232, 295, 87, 549, 557,
	555, 554, 957, 316, 953, 294, 310, 1062, 310, 1182,
	1269, 316, 696, 25, 87, 55, 310, 1151, 227, 19,
	18, 17, 20, 16, 15, 14, 1094, 29, 13, 1153,
	12, 11, 10, 9, 8, 7, 6, 5, 4, 218,
	310, 1109, 1110, 1156, 22, 1111, 1161, 2, 1113, 0,
	1168, 0, 0, 0, 0, 0, 0, 308, 0, 0,
	0, 0, 0, 316, 297, 316, 316, 316, 87, 316,
	813, 1186, 1160, 1194, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 296, 1200, 1202, 1071, 0, 0, 977,
	0, 0, 1181, 0, 0, 316, 316, 87, 316, 316,
	0, 316, 0, 0, 0, 0, 1197, 1198, 1199, 1207,
	1215, 1209, 0, 1216, 0, 1206, 0, 0, 0, 0,
	0, 0, 0, 0, 1165, 1166, 0, 1167, 0, 0,
	1169, 0, 1171, 1117, 0, 0, 1212, 1223, 0, 0,
	0, 0, 316, 316, 0, 0, 1159, 1233, 1069, 1070,
	966, 1101, 0, 0, 0, 316, 0, 1244, 1235, 0,
	709, 1086, 1087, 0, 1089, 1090, 1250, 310, 316, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 1205, 0,
	0, 0, 0, 0, 0, 1184, 0, 1251, 1102, 1252,
	316, 1236, 523, 1273, 0, 0, 0, 0, 1101, 1277,
	0, 0, 0, 0, 1274, 0, 0, 316, 316, 1258,
	316, 1260, 0, 0, 0, 0, 0, 1013, 310, 1291,
	310, 1261, 0, 0, 0, 0, 316, 0, 0, 459,
	1296, 0, 0, 774, 1162, 1102, 0, 47, 0, 0,
	316, 1164, 1303, 310, 0, 0, 0, 0, 1282, 1283,
	0, 1285, 1173, 1174, 1175, 1310, 440, 1178, 1311, 0,
	0, 0, 0, 310, 85, 0, 0, 207, 0, 0,
	1188, 1189, 1190, 0, 1193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 813, 0, 231,
	0, 85, 85, 298, 0, 0, 0, 85, 0, 0,
	755, 0, 1163, 1105, 966, 85, 755, 85, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 1318, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 310, 0, 310, 1128, 0, 0, 0, 0,
	1017, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1230, 0, 0, 1290, 523, 0, 301, 0, 0, 0,
	0, 413, 0, 0, 0, 1241, 1242, 1243, 0, 421,
	0, 422, 0, 0, 0, 1149, 0, 429, 1152, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	1154, 0, 0, 1265, 1266, 1267, 1268, 0, 0, 0,
	0, 0, 0, 193, 0, 1088, 0, 0, 1157, 0,
	1225, 1226, 0, 1227, 1228, 1229, 310, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1292, 0, 0,
	0, 0, 1297, 0, 0, 0, 0, 0, 0, 443,
	444, 445, 813, 448, 813, 1304, 0, 0, 0, 0,
	452, 0, 0, 0, 0, 0, 0, 0, 1196, 0,
	1196, 1196, 1196, 0, 1201, 0, 0, 188, 0, 0,
	310, 431, 0, 190, 0, 0, 0, 0, 1322, 1323,
	196, 192, 0, 0, 0, 0, 0, 0, 0, 0,
	1196, 1213, 0, 310, 310, 0, 1218, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 194, 0,
	85, 198, 0, 0, 0, 0, 0, 85, 573, 85,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1237, 1238, 0,
	189, 0, 1320, 0, 0, 0, 0, 0, 0, 0,
	1128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1196, 0, 1196, 0, 191, 0, 199,
	200, 201, 202, 206, 551, 0, 0, 0, 205, 204,
	0, 0, 0, 575, 0, 1276, 0, 0, 0, 0,
	813, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1196, 1196, 0, 1196, 0, 0, 0, 0,
	0, 0, 0, 1017, 813, 0, 0, 0, 755, 0,
	0, 1298, 488, 487, 497, 498, 490, 491, 492, 493,
	494, 495, 496, 489, 0, 1306, 499, 0, 0, 85,
	85, 0, 0, 85, 0, 0, 85, 0, 0, 0,
	664, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	646, 0, 0, 0, 0, 0, 0, 0, 655, 914,
	0, 85, 0, 23, 24, 48, 26, 27, 0, 666,
	667, 668, 669, 670, 671, 672, 673, 454, 0, 0,
	85, 0, 42, 674, 675, 0, 28, 0, 0, 664,
	0, 0, 0, 653, 654, 0, 0, 657, 0, 0,
	660, 0, 0, 0, 0, 37, 0, 0, 0, 50,
	0, 0, 0, 488, 487, 497, 498, 490, 491, 492,
	493, 494, 495, 496, 489, 679, 0, 499, 0, 0,
	231, 0, 0, 0, 0, 231, 231, 0, 0, 756,
	756, 231, 0, 0, 698, 756, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 231, 231, 231, 231, 0,
	85, 0, 756, 85, 85, 85, 85, 85, 30, 31,
	33, 32, 35, 0, 0, 788, 0, 0, 85, 0,
	0, 0, 573, 0, 0, 0, 0, 85, 85, 0,
	36, 43, 44, 0, 0, 45, 46, 34, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 38,
	39, 0, 40, 41, 0, 0, 0, 483, 0, 486,
	0, 0, 0, 0, 771, 500, 501, 502, 503, 504,
	505, 506, 0, 484, 485, 482, 488, 487, 497, 498,
	490, 491, 492, 493, 494, 495, 496, 489, 0, 0,
	499, 0, 799, 0, 0, 0, 0, 85, 0, 0,
	0, 136, 0, 0, 0, 476, 85, 0, 0, 85,
	104, 0, 0, 0, 118, 0, 120, 0, 0, 153,
	129, 0, 0, 0, 0, 0, 0, 867, 0, 869,
	0, 0, 0, 49, 664, 0, 0, 888, 315, 0,
	478, 1179, 454, 0, 0, 0, 231, 97, 0, 0,
	0, 0, 473, 472, 0, 0, 0, 0, 0, 0,
	0, 862, 0, 0, 0, 0, 0, 0, 0, 474,
	886, 0, 0, 887, 0, 0, 0, 0, 488, 487,
	497, 498, 490, 491, 492, 493, 494, 495, 496, 489,
	0, 0, 499, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 0, 0, 0, 142, 0, 231,
	156, 109, 108, 117, 0, 0, 0, 0, 0, 100,
	0, 148, 138, 168, 0, 139, 147, 121, 160, 143,
	167, 177, 178, 158, 175, 89, 157, 166, 98, 150,
	91, 164, 155, 127, 113, 114, 90, 85, 146, 103,
	107, 102, 135, 161, 162, 101, 185, 94, 173, 174,
	93, 95, 172, 134, 159, 165, 128, 125, 92, 163,
	126, 124, 116, 105, 110, 140, 123, 141, 111, 131,
	130, 132, 0, 0, 0, 154, 170, 186, 0, 619,
	179, 180, 181, 182, 1068, 0, 0, 133, 96, 112,
	151, 115, 122, 145, 184, 137, 149, 99, 169, 152,
	85, 0, 0, 0, 488, 487, 497, 498, 490, 491,
	492, 493, 494, 495, 496, 489, 0, 88, 499, 119,
	183, 144, 106, 171, 0, 0, 0, 0, 0, 1014,
	1057, 1058, 0, 0, 1176, 454, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 0, 1053, 607, 0, 0, 0, 231,
	0, 0, 0, 0, 1012, 0, 0, 0, 0, 664,
	0, 488, 487, 497, 498, 490, 491, 492, 493, 494,
	495, 496, 489, 1180, 756, 499, 620, 0, 0, 0,
	756, 0, 0, 0, 0, 0, 0, 0, 1177, 0,
	0, 0, 1061, 0, 0, 0, 0, 633, 634, 635,
	636, 637, 638, 639, 0, 640, 641, 642, 643, 644,
	621, 622, 623, 624, 604, 605, 0, 0, 606, 608,
	0, 609, 610, 611, 612, 613, 614, 615, 616, 617,
	618, 625, 626, 627, 628, 629, 630, 631, 632, 0,
	0, 0, 0, 0, 488, 487, 497, 498, 490, 491,
	492, 493, 494, 495, 496, 489, 0, 915, 499, 488,
	487, 497, 498, 490, 491, 492, 493, 494, 495, 496,
	489, 0, 0, 499, 0, 0, 85, 488, 487, 497,
	498, 490, 491, 492, 493, 494, 495, 496, 489, 0,
	0, 499, 0, 85, 488, 487, 497, 498, 490, 491,
	492, 493, 494, 495, 496, 489, 0, 0, 499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1155, 0, 0, 0, 0, 0, 0, 573, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 398, 388, 0, 360, 400, 338, 352, 408,
	353, 354, 381, 324, 368, 136, 350, 0, 341, 319,
	347, 320, 339, 362, 104, 337, 390, 371, 118, 406,
	120, 376, 0, 153, 129, 0, 0, 364, 392, 366,
	386, 359, 382, 329, 375, 401, 351, 379, 402, 0,
	0, 0, 315, 0, 814, 815, 0, 0, 0, 0,
	1214, 97, 0, 378, 397, 349, 380, 318, 377, 0,
	322, 325, 407, 395, 344, 345, 978, 0, 0, 0,
	0, 0, 0, 363, 367, 383, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 374, 0, 0,
	0, 326, 323, 0, 361, 0, 0, 0, 328, 0,
	343, 384, 0, 317, 387, 393, 358, 176, 396, 356,
	355, 142, 756, 0, 156, 109, 108, 117, 399, 365,
	391, 340, 348, 100, 346, 148, 138, 168, 373, 139,
	147, 121, 160, 143, 167, 177, 178, 158, 175, 89,
	157, 166, 98, 150, 91, 164, 155, 127, 113, 114,
	90, 0, 146, 103, 107, 102, 135, 161, 162, 101,
	185, 94, 173, 174, 93, 95, 172, 134, 159, 165,
	128, 125, 92, 163, 126, 124, 116, 105, 110, 140,
	123, 141, 111, 131, 130, 132, 0, 321, 0, 154,
	170, 186, 336, 394, 179, 180, 181, 182, 0, 0,
	0, 133, 96, 112, 151, 115, 122, 145, 184, 137,
	149, 99, 169, 152, 332, 335, 330, 331, 369, 370,
	403, 404, 405, 385, 327, 0, 333, 334, 0, 389,
	372, 88, 0, 119, 183, 144, 106, 171, 398, 388,
	0, 360, 400, 338, 352, 408, 353, 354, 381, 324,
	368, 136, 350, 0, 341, 319, 347, 320, 339, 362,
	104, 337, 390, 371, 118, 406, 120, 376, 0, 153,
	129, 0, 0, 364, 392, 366, 386, 359, 382, 329,
	375, 401, 351, 379, 402, 0, 0, 0, 315, 0,
	814, 815, 0, 0, 0, 0, 0, 97, 0, 378,
	397, 349, 380, 318, 377, 0, 322, 325, 407, 395,
	344, 345, 0, 0, 0, 0, 0, 0, 0, 363,
	367, 383, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 374, 0, 0, 0, 326, 323, 0,
	361, 0, 0, 0, 328, 0, 343, 384, 0, 317,
	387, 393, 358, 176, 396, 356, 355, 142, 0, 0,
	156, 109, 108, 117, 399, 365, 391, 340, 348, 100,
	346, 148, 138, 168, 373, 139, 147, 121, 160, 143,
	167, 177, 178, 158, 175, 89, 157, 166, 98, 150,
	91, 164, 155, 127, 113, 114, 90, 0, 146, 103,
	107, 102, 135, 161, 162, 101, 185, 94, 173, 174,
	93, 95, 172, 134, 159, 165, 128, 125, 92, 163,
	126, 124, 116, 105, 110, 140, 123, 141, 111, 131,
	130, 132, 0, 321, 0, 154, 170, 186, 336, 394,
	179, 180, 181, 182, 0, 0, 0, 133, 96, 112,
	151, 115, 122, 145, 184, 137, 149, 99, 169, 152,
	332, 335, 330, 331, 369, 370, 403, 404, 405, 385,
	327, 0, 333, 334, 0, 389, 372, 88, 0, 119,
	183, 144, 106, 171, 398, 388, 0, 360, 400, 338,
	352, 408, 353, 354, 381, 324, 368, 136, 350, 0,
	341, 319, 347, 320, 339, 362, 104, 337, 390, 371,
	118, 406, 120, 376, 0, 153, 129, 0, 0, 364,
	392, 366, 386, 359, 382, 329, 375, 401, 351, 379,
	402, 0, 0, 0, 315, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 378, 397, 349, 380, 318,
	377, 0, 322, 325, 407, 395, 344, 345, 0, 0,
	0, 0, 0, 0, 0, 363, 367, 383, 357, 0,
	0, 0, 0, 0, 0, 1064, 0, 342, 0, 374,
	0, 0, 0, 326, 323, 0, 361, 0, 0, 0,
	328, 0, 343, 384, 0, 317, 387, 393, 358, 176,
	396, 356, 355, 142, 0, 0, 156, 109, 108, 117,
	399, 365, 391, 340, 348, 100, 346, 148, 138, 168,
	373, 139, 147, 121, 160, 143, 167, 177, 178, 158,
	175, 89, 157, 166, 98, 150, 91, 164, 155, 127,
	113, 114, 90, 0, 146, 103, 107, 102, 135, 161,
	162, 101, 185, 94, 173, 174, 93, 95, 172, 134,
	159, 165, 128, 125, 92, 163, 126, 124, 116, 105,
	110, 140, 123, 141, 111, 131, 130, 132, 0, 321,
	0, 154, 170, 186, 336, 394, 179, 180, 181, 182,
	0, 0, 0, 133, 96, 112, 151, 115, 122, 145,
	184, 137, 149, 99, 169, 152, 332, 335, 330, 331,
	369, 370, 403, 404, 405, 385, 327, 0, 333, 334,
	0, 389, 372, 88, 0, 119, 183, 144, 106, 171,
	398, 388, 0, 360, 400, 338, 352, 408, 353, 354,
	381, 324, 368, 136, 350, 0, 341, 319, 347, 320,
	339, 362, 104, 337, 390, 371, 118, 406, 120, 376,
	0, 153, 129, 0, 0, 364, 392, 366, 386, 359,
	382, 329, 375, 401, 351, 379, 402, 50, 0, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 378, 397, 349, 380, 318, 377, 0, 322, 325,
	407, 395, 344, 345, 0, 0, 0, 0, 0, 0,
	0, 363, 367, 383, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 374, 0, 0, 0, 326,
	323, 0, 361, 0, 0, 0, 328, 0, 343, 384,
	0, 317, 387, 393, 358, 176, 396, 356, 355, 142,
	0, 0, 156, 109, 108, 117, 399, 365, 391, 340,
	348, 100, 346, 148, 138, 168, 373, 139, 147, 121,
	160, 143, 167, 177, 178, 158, 175, 89, 157, 166,
	98, 150, 91, 164, 155, 127, 113, 114, 90, 0,
	146, 103, 107, 102, 135, 161, 162, 101, 185, 94,
	173, 174, 93, 95, 172, 134, 159, 165, 128, 125,
	92, 163, 126, 124, 116, 105, 110, 140, 123, 141,
	111, 131, 130, 132, 0, 321, 0, 154, 170, 186,
	336, 394, 179, 180, 181, 182, 0, 0, 0, 133,
	96, 112, 151, 115, 122, 145, 184, 137, 149, 99,
	169, 152, 332, 335, 330, 331, 369, 370, 403, 404,
	405, 385, 327, 0, 333, 334, 0, 389, 372, 88,
	0, 119, 183, 144, 106, 171, 398, 388, 0, 360,
	400, 338, 352, 408, 353, 354, 381, 324, 368, 136,
	350, 0, 341, 319, 347, 320, 339, 362, 104, 337,
	390, 371, 118, 406, 120, 376, 0, 153, 129, 0,
	0, 364, 392, 366, 386, 359, 382, 329, 375, 401,
	351, 379, 402, 0, 0, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 378, 397, 349,
	380, 318, 377, 0, 322, 325, 407, 395, 344, 345,
	0, 0, 0, 0, 0, 0, 0, 363, 367, 383,
	357, 0, 0, 0, 0, 0, 0, 707, 0, 342,
	0, 374, 0, 0, 0, 326, 323, 0, 361, 0,
	0, 0, 328, 0, 343, 384, 0, 317, 387, 393,
	358, 176, 396, 356, 355, 142, 0, 0, 156, 109,
	108, 117, 399, 365, 391, 340, 348, 100, 346, 148,
	138, 168, 373, 139, 147, 121, 160, 143, 167, 177,
	178, 158, 175, 89, 157, 166, 98, 150, 91, 164,
	155, 127, 113, 114, 90, 0, 146, 103, 107, 102,
	135, 161, 162, 101, 185, 94, 173, 174, 93, 95,
	172, 134, 159, 165, 128, 125, 92, 163, 126, 124,
	116, 105, 110, 140, 123, 141, 111, 131, 130, 132,
	0, 321, 0, 154, 170, 186, 336, 394, 179, 180,
	181, 182, 0, 0, 0, 133, 96, 112, 151, 115,
	122, 145, 184, 137, 149, 99, 169, 152, 332, 335,
	330, 331, 369, 370, 403, 404, 405, 385, 327, 0,
	333, 334, 0, 389, 372, 88, 0, 119, 183, 144,
	106, 171, 398, 388, 0, 360, 400, 338, 352, 408,
	353, 354, 381, 324, 368, 136, 350, 0, 341, 319,
	347, 320, 339, 362, 104, 337, 390, 371, 118, 406,
	120, 376, 0, 153, 129, 0, 0, 364, 392, 366,
	386, 359, 382, 329, 375, 401, 351, 379, 402, 0,
	0, 0, 315, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 378, 397, 349, 380, 318, 377, 0,
	322, 325, 407, 395, 344, 345, 0, 0, 0, 0,
	0, 0, 0, 363, 367, 383, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 374, 0, 0,
	0, 326, 323, 0, 361, 0, 0, 0, 328, 0,
	343, 384, 0, 317, 387, 393, 358, 176, 396, 356,
	355, 142, 0, 0, 156, 109, 108, 117, 399, 365,
	391, 340, 348, 100, 346, 148, 138, 168, 373, 139,
	147, 121, 160, 143, 167, 177, 178, 158, 175, 89,
	157, 166, 98, 150, 91, 164, 155, 127, 113, 114,
	90, 0, 146, 103, 107, 102, 135, 161, 162, 101,
	185, 94, 173, 174, 93, 95, 172, 134, 159, 165,
	128, 125, 92, 163, 126, 124, 116, 105, 110, 140,
	123, 141, 111, 131, 130, 132, 0, 321, 0, 154,
	170, 186, 336, 394, 179, 180, 181, 182, 0, 0,
	0, 133, 96, 112, 151, 115, 122, 145, 184, 137,
	149, 99, 169, 152, 332, 335, 330, 331, 369, 370,
	403, 404, 405, 385, 327, 0, 333, 334, 0, 389,
	372, 88, 0, 119, 183, 144, 106, 171, 398, 388,
	0, 360, 400, 338, 352, 408, 353, 354, 381, 324,
	368, 136, 350, 0, 341, 319, 347, 320, 339, 362,
	104, 337, 390, 371, 118, 406, 120, 376, 0, 153,
	129, 0, 0, 364, 392, 366, 386, 359, 382, 329,
	375, 401, 351, 379, 402, 0, 0, 0, 236, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 378,
	397, 349, 380, 318, 377, 0, 322, 325, 407, 395,
	344, 345, 0, 0, 0, 0, 0, 0, 0, 363,
	367, 383, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 374, 0, 0, 0, 326, 323, 0,
	361, 0, 0, 0, 328, 0, 343, 384, 0, 317,
	387, 393, 358, 176, 396, 356, 355, 142, 0, 0,
	156, 109, 108, 117, 399, 365, 391, 340, 348, 100,
	346, 148, 138, 168, 373, 139, 147, 121, 160, 143,
	167, 177, 178, 158, 175, 89, 157, 166, 98, 150,
	91, 164, 155, 127, 113, 114, 90, 0, 146, 103,
	107, 102, 135, 161, 162, 101, 185, 94, 173, 174,
	93, 95, 172, 134, 159, 165, 128, 125, 92, 163,
	126, 124, 116, 105, 110, 140, 123, 141, 111, 131,
	130, 132, 0, 321, 0, 154, 170, 186, 336, 394,
	179, 180, 181, 182, 0, 0, 0, 133, 96, 112,
	151, 115, 122, 145, 184, 137, 149, 99, 169, 152,
	332, 335, 330, 331, 369, 370, 403, 404, 405, 385,
	327, 0, 333, 334, 0, 389, 372, 88, 0, 119,
	183, 144, 106, 171, 398, 388, 0, 360, 400, 338,
	352, 408, 353, 354, 381, 324, 368, 136, 350, 0,
	341, 319, 347, 320, 339, 362, 104, 337, 390, 371,
	118, 406, 120, 376, 0, 153, 129, 0, 0, 364,
	392, 366, 386, 359, 382, 329, 375, 401, 351, 379,
	402, 0, 0, 0, 315, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 378, 397, 349, 380, 318,
	377, 0, 322, 325, 407, 395, 344, 345, 0, 0,
	0, 0, 0, 0, 0, 363, 367, 383, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 374,
	0, 0, 0, 326, 323, 0, 361, 0, 0, 0,
	328, 0, 343, 384, 0, 317, 387, 393, 358, 176,
	396, 356, 355, 142, 0, 0, 156, 109, 108, 117,
	399, 365, 391, 340, 348, 100, 346, 148, 138, 168,
	373, 139, 147, 121, 160, 143, 167, 177, 178, 158,
	175, 89, 157, 166, 98, 150, 91, 164, 155, 127,
	113, 114, 90, 0, 146, 103, 107, 102, 135, 161,
	162, 101, 185, 94, 173, 174, 93, 313, 172, 134,
	159, 165, 128, 125, 92, 163, 126, 124, 116, 105,
	110, 140, 123, 141, 111, 131, 130, 132, 0, 321,
	0, 154, 170, 186, 336, 394, 179, 180, 181, 182,
	0, 0, 0, 314, 312, 112, 151, 115, 122, 145,
	184, 137, 149, 99, 169, 152, 332, 335, 330, 331,
	369, 370, 403, 404, 405, 385, 327, 0, 333, 334,
	0, 389, 372, 88, 0, 119, 183, 144, 106, 171,
	398, 388, 0, 360, 400, 338, 352, 408, 353, 354,
	381, 324, 368, 136, 350, 0, 341, 319, 347, 320,
	339, 362, 104, 337, 390, 371, 118, 406, 120, 376,
	0, 153, 129, 0, 0, 364, 392, 366, 386, 359,
	382, 329, 375, 401, 351, 379, 402, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 378, 397, 349, 380, 318, 377, 0, 322, 325,
	407, 395, 344, 345, 0, 0, 0, 0, 0, 0,
	0, 363, 367, 383, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 374, 0, 0, 0, 326,
	323, 0, 361, 0, 0, 0, 328, 0, 343, 384,
	0, 317, 387, 393, 358, 176, 396, 356, 355, 142,
	0, 0, 156, 109, 108, 117, 399, 365, 391, 340,
	348, 100, 346, 148, 138, 168, 373, 139, 147, 121,
	160, 143, 167, 177, 178, 158, 175, 89, 157, 166,
	98, 150, 91, 164, 155, 127, 113, 114, 90, 0,
	146, 103, 107, 102, 135, 161, 162, 101, 185, 94,
	173, 174, 93, 95, 172, 134, 159, 165, 128, 125,
	92, 163, 126, 124, 116, 105, 110, 140, 123, 141,
	111, 131, 130, 132, 0, 321, 0, 154, 170, 186,
	336, 394, 179, 180, 181, 182, 0, 0, 0, 133,
	96, 112, 151, 115, 122, 145, 184, 137, 149, 99,
	169, 152, 332, 335, 330, 331, 369, 370, 403, 404,
	405, 385, 327, 0, 333, 334, 0, 389, 372, 88,
	0, 119, 183, 144, 106, 171, 398, 388, 0, 360,
	400, 338, 352, 408, 353, 354, 381, 324, 368, 136,
	350, 0, 341, 319, 347, 320, 339, 362, 104, 337,
	390, 371, 118, 406, 120, 376, 0, 153, 129, 0,
	0, 364, 392, 366, 386, 359, 382, 329, 375, 401,
	351, 379, 402, 0, 0, 0, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 378, 397, 349,
	380, 318, 377, 0, 322, 325, 407, 395, 344, 345,
	0, 0, 0, 0, 0, 0, 0, 363, 367, 383,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 374, 0, 0, 0, 326, 323, 0, 361, 0,
	0, 0, 328, 0, 343, 384, 0, 317, 387, 393,
	358, 176, 396, 356, 355, 142, 0, 0, 156, 109,
	108, 117, 399, 365, 391, 340, 348, 100, 346, 148,
	138, 168, 373, 139, 147, 121, 160, 143, 167, 177,
	178, 158, 175, 89, 157, 583, 98, 150, 91, 164,
	155, 127, 113, 114, 90, 0, 146, 103, 107, 102,
	135, 161, 162, 101, 185, 94, 173, 174, 93, 313,
	172, 134, 159, 165, 128, 125, 92, 163, 126, 124,
	116, 105, 110, 140, 123, 141, 111, 131, 130, 132,
	0, 321, 0, 154, 170, 186, 336, 394, 179, 180,
	181, 182, 0, 0, 0, 314, 312, 112, 151, 115,
	122, 145, 184, 137, 149, 99, 169, 152, 332, 335,
	330, 331, 369, 370, 403, 404, 405, 385, 327, 0,
	333, 334, 0, 389, 372, 88, 0, 119, 183, 144,
	106, 171, 398, 388, 0, 360, 400, 338, 352, 408,
	353, 354, 381, 324, 368, 136, 350, 0, 341, 319,
	347, 320, 339, 362, 104, 337, 390, 371, 118, 406,
	120, 376, 0, 153, 129, 0, 0, 364, 392, 366,
	386, 359, 382, 329, 375, 401, 351, 379, 402, 0,
	0, 0, 315, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 378, 397, 349, 380, 318, 377, 0,
	322, 325, 407, 395, 344, 345, 0, 0, 0, 0,
	0, 0, 0, 363, 367, 383, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 374, 0, 0,
	0, 326, 323, 0, 361, 0, 0, 0, 328, 0,
	343, 384, 0, 317, 387, 393, 358, 176, 396, 356,
	355, 142, 0, 0, 156, 109, 108, 117, 399, 365,
	391, 340, 348, 100, 346, 148, 138, 168, 373, 139,
	147, 121, 160, 143, 167, 177, 178, 158, 175, 89,
	157, 304, 98, 150, 91, 164, 155, 127, 113, 114,
	90, 0, 146, 103, 107, 102, 135, 161, 162, 101,
	185, 94, 173, 174, 93, 313, 172, 134, 159, 165,
	128, 125, 92, 163, 126, 124, 116, 105, 110, 140,
	123, 141, 111, 131, 130, 132, 0, 321, 0, 154,
	170, 186, 336, 394, 179, 180, 181, 182, 0, 0,
	0, 314, 312, 307, 306, 115, 122, 145, 184, 137,
	149, 99, 169, 152, 332, 335, 330, 331, 369, 370,
	403, 404, 405, 385, 327, 0, 333, 334, 0, 389,
	372, 88, 0, 119, 183, 144, 106, 171, 136, 0,
	0, 743, 0, 238, 0, 0, 0, 104, 235, 0,
	0, 118, 277, 120, 0, 0, 153, 129, 0, 0,
	0, 0, 268, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 236, 256, 255, 258, 259,
	260, 261, 0, 0, 97, 257, 262, 263, 264, 0,
	0, 233, 249, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 246, 247, 229, 0, 0, 0,
	288, 0, 248, 0, 0, 244, 245, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 286, 142, 0, 0, 156, 109, 108,
	117, 0, 0, 0, 0, 0, 100, 0, 148, 138,
	168, 0, 139, 147, 121, 160, 143, 167, 177, 178,
	158, 175, 89, 157, 166, 98, 150, 91, 164, 155,
	127, 113, 114, 90, 0, 146, 103, 107, 102, 135,
	161, 162, 101, 185, 94, 173, 174, 93, 95, 172,
	134, 159, 165, 128, 125, 92, 163, 126, 124, 116,
	105, 110, 140, 123, 141, 111, 131, 130, 132, 0,
	0, 0, 154, 170, 186, 0, 0, 179, 180, 181,
	182, 0, 0, 0, 133, 96, 112, 151, 115, 122,
	145, 184, 137, 149, 99, 169, 152, 278, 287, 284,
	285, 282, 283, 281, 280, 279, 289, 270, 271, 272,
	273, 275, 0, 274, 88, 0, 119, 183, 144, 106,
	171, 136, 0, 0, 0, 0, 238, 0, 0, 0,
	104, 235, 0, 0, 118, 277, 120, 0, 0, 153,
	129, 0, 0, 0, 0, 268, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 454, 236, 256,
	255, 258, 259, 260, 261, 0, 0, 97, 257, 262,
	263, 264, 0, 0, 233, 249, 0, 276, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 246, 247, 0,
	0, 0, 0, 288, 0, 248, 0, 0, 244, 245,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 0, 0, 286, 142, 0, 0,
	156, 109, 108, 117, 0, 0, 0, 0, 0, 100,
	0, 148, 138, 168, 0, 139, 147, 121, 160, 143,
	167, 177, 178, 158, 175, 89, 157, 166, 98, 150,
	91, 164, 155, 127, 113, 114, 90, 0, 146, 103,
	107, 102, 135, 161, 162, 101, 185, 94, 173, 174,
	93, 95, 172, 134, 159, 165, 128, 125, 92, 163,
	126, 124, 116, 105, 110, 140, 123, 141, 111, 131,
	130, 132, 0, 0, 0, 154, 170, 186, 0, 0,
	179, 180, 181, 182, 0, 0, 0, 133, 96, 112,
	151, 115, 122, 145, 184, 137, 149, 99, 169, 152,
	278, 287, 284, 285, 282, 283, 281, 280, 279, 289,
	270, 271, 272, 273, 275, 0, 274, 88, 0, 119,
	183, 144, 106, 171, 136, 0, 0, 0, 0, 238,
	0, 0, 0, 104, 235, 0, 0, 118, 277, 120,
	0, 0, 153, 129, 0, 0, 0, 0, 268, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 236, 256, 255, 258, 259, 260, 261, 0, 0,
	97, 257, 262, 263, 264, 0, 0, 233, 249, 0,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	246, 247, 229, 0, 0, 0, 288, 0, 248, 0,
	0, 244, 245, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 286,
	142, 0, 0, 156, 109, 108, 117, 0, 0, 0,
	0, 0, 100, 0, 148, 138, 168, 0, 139, 147,
	121, 160, 143, 167, 177, 178, 158, 175, 89, 157,
	166, 98, 150, 91, 164, 155, 127, 113, 114, 90,
	0, 146, 103, 107, 102, 135, 161, 162, 101, 185,
	94, 173, 174, 93, 95, 172, 134, 159, 165, 128,
	125, 92, 163, 126, 124, 116, 105, 110, 140, 123,
	141, 111, 131, 130, 132, 0, 0, 0, 154, 170,
	186, 0, 0, 179, 180, 181, 182, 0, 0, 0,
	133, 96, 112, 151, 115, 122, 145, 184, 137, 149,
	99, 169, 152, 278, 287, 284, 285, 282, 283, 281,
	280, 279, 289, 270, 271, 272, 273, 275, 0, 274,
	88, 0, 119, 183, 144, 106, 171, 136, 0, 0,
	0, 0, 238, 0, 0, 0, 104, 235, 0, 0,
	118, 277, 120, 0, 0, 153, 129, 0, 0, 0,
	0, 268, 269, 0, 0, 0, 0, 0, 0, 806,
	0, 50, 0, 0, 236, 256, 255, 258, 259, 260,
	261, 0, 0, 97, 257, 262, 263, 264, 0, 0,
	233, 249, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 247, 0, 0, 0, 0, 288,
	0, 248, 0, 0, 244, 245, 250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 286, 142, 0, 0, 156, 109, 108, 117,
	0, 0, 0, 0, 0, 100, 0, 148, 138, 168,
	0, 139, 147, 121, 160, 143, 167, 177, 178, 158,
	175, 89, 157, 166, 98, 150, 91, 164, 155, 127,
	113, 114, 90, 0, 146, 103, 107, 102, 135, 161,
	162, 101, 185, 94, 173, 174, 93, 95, 172, 134,
	159, 165, 128, 125, 92, 163, 126, 124, 116, 105,
	110, 140, 123, 141, 111, 131, 130, 132, 0, 0,
	0, 154, 170, 186, 0, 0, 179, 180, 181, 182,
	0, 0, 0, 133, 96, 112, 151, 115, 122, 145,
	184, 137, 149, 99, 169, 152, 278, 287, 284, 285,
	282, 283, 281, 280, 279, 289, 270, 271, 272, 273,
	275, 23, 274, 88, 0, 119, 183, 144, 106, 171,
	0, 0, 0, 136, 0, 0, 0, 0, 238, 0,
	0, 0, 104, 235, 0, 0, 118, 277, 120, 0,
	0, 153, 129, 0, 0, 0, 0, 268, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	236, 256, 255, 258, 259, 260, 261, 0, 0, 97,
	257, 262, 263, 264, 0, 0, 233, 249, 0, 276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 246,
	247, 0, 0, 0, 0, 288, 0, 248, 0, 0,
	244, 245, 250, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 286, 142,
	0, 0, 156, 109, 108, 117, 0, 0, 0, 0,
	0, 100, 0, 148, 138, 168, 0, 139, 147, 121,
	160, 143, 167, 177, 178, 158, 175, 89, 157, 166,
	98, 150, 91, 164, 155, 127, 113, 114, 90, 0,
	146, 103, 107, 102, 135, 161, 162, 101, 185, 94,
	173, 174, 93, 95, 172, 134, 159, 165, 128, 125,
	92, 163, 126, 124, 116, 105, 110, 140, 123, 141,
	111, 131, 130, 132, 0, 0, 0, 154, 170, 186,
	0, 0, 179, 180, 181, 182, 0, 0, 0, 133,
	96, 112, 151, 115, 122, 145, 184, 137, 149, 99,
	169, 152, 278, 287, 284, 285, 282, 283, 281, 280,
	279, 289, 270, 271, 272, 273, 275, 0, 274, 88,
	0, 119, 183, 144, 106, 171, 136, 0, 0, 0,
	0, 238, 0, 0, 0, 104, 235, 0, 0, 118,
	277, 120, 0, 0, 153, 129, 0, 0, 0, 0,
	268, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 236, 256, 255, 258, 259, 260, 261,
	0, 0, 97, 257, 262, 263, 264, 0, 0, 233,
	249, 0, 276, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 247, 0, 0, 0, 0, 288, 0,
	248, 0, 0, 244, 245, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 286, 142, 0, 0, 156, 109, 108, 117, 0,
	0, 0, 0, 0, 100, 0, 148, 138, 168, 0,
	139, 147, 121, 160, 143, 167, 177, 178, 158, 175,
	89, 157, 166, 98, 150, 91, 164, 155, 127, 113,
	114, 90, 0, 146, 103, 107, 102, 135, 161, 162,
	101, 185, 94, 173, 174, 93, 95, 172, 134, 159,
	165, 128, 125, 92, 163, 126, 124, 116, 105, 110,
	140, 123, 141, 111, 131, 130, 132, 0, 0, 0,
	154, 170, 186, 0, 0, 179, 180, 181, 182, 0,
	0, 0, 133, 96, 112, 151, 115, 122, 145, 184,
	137, 149, 99, 169, 152, 278, 287, 284, 285, 282,
	283, 281, 280, 279, 289, 270, 271, 272, 273, 275,
	136, 274, 88, 0, 119, 183, 144, 106, 171, 104,
	0, 0, 0, 118, 277, 120, 0, 0, 153, 129,
	0, 0, 0, 0, 268, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 236, 256, 255,
	258, 259, 260, 261, 0, 0, 97, 257, 262, 263,
	264, 0, 0, 0, 249, 0, 276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 0, 0,
	0, 0, 288, 0, 248, 0, 0, 244, 245, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 286, 142, 0, 0, 156,
	109, 108, 117, 0, 0, 0, 0, 0, 100, 0,
	148, 138, 168, 1321, 139, 147, 121, 160, 143, 167,
	177, 178, 158, 175, 89, 157, 166, 98, 150, 91,
	164, 155, 127, 113, 114, 90, 0, 146, 103, 107,
	102, 135, 161, 162, 101, 185, 94, 173, 174, 93,
	95, 172, 134, 159, 165, 128, 125, 92, 163, 126,
	124, 116, 105, 110, 140, 123, 141, 111, 131, 130,
	132, 0, 0, 0, 154, 170, 186, 0, 0, 179,
	180, 181, 182, 0, 0, 0, 133, 96, 112, 151,
	115, 122, 145, 184, 137, 149, 99, 169, 152, 278,
	287, 284, 285, 282, 283, 281, 280, 279, 289, 270,
	271, 272, 273, 275, 136, 274, 88, 0, 119, 183,
	144, 106, 171, 104, 0, 0, 0, 118, 277, 120,
	0, 0, 153, 129, 0, 0, 0, 0, 268, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 236, 256, 255, 258, 259, 260, 261, 0, 0,
	97, 257, 262, 263, 264, 0, 0, 0, 249, 0,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	246, 247, 0, 0, 0, 0, 288, 0, 248, 0,
	0, 244, 245, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 286,
	142, 0, 0, 156, 109, 108, 117, 0, 0, 0,
	0, 0, 100, 0, 148, 138, 168, 0, 139, 147,
	121, 160, 143, 167, 177, 178, 158, 175, 89, 157,
	166, 98, 150, 91, 164, 155, 127, 113, 114, 90,
	0, 146, 103, 107, 102, 135, 161, 162, 101, 185,
	94, 173, 174, 93, 95, 172, 134, 159, 165, 128,
	125, 92, 163, 126, 124, 116, 105, 110, 140, 123,
	141, 111, 131, 130, 132, 0, 0, 0, 154, 170,
	186, 0, 0, 179, 180, 181, 182, 0, 0, 0,
	133, 96, 112, 151, 115, 122, 145, 184, 137, 149,
	99, 169, 152, 278, 287, 284, 285, 282, 283, 281,
	280, 279, 289, 270, 271, 272, 273, 275, 136, 274,
	88, 0, 119, 183, 144, 106, 171, 104, 0, 0,
	0, 118, 0, 120, 0, 0, 153, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	488, 487, 497, 498, 490, 491, 492, 493, 494, 495,
	496, 489, 0, 0, 499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 0, 142, 0, 0, 156, 109, 108,
	117, 0, 0, 0, 0, 0, 100, 0, 148, 138,
	168, 0, 139, 147, 121, 160, 143, 167, 177, 178,
	158, 175, 89, 157, 166, 98, 150, 91, 164, 155,
	127, 113, 114, 90, 0, 146, 103, 107, 102, 135,
	161, 162, 101, 185, 94, 173, 174, 93, 95, 172,
	134, 159, 165, 128, 125, 92, 163, 126, 124, 116,
	105, 110, 140, 123, 141, 111, 131, 130, 132, 0,
	0, 0, 154, 170, 186, 0, 0, 179, 180, 181,
	182, 0, 0, 0, 133, 96, 112, 151, 115, 122,
	145, 184, 137, 149, 99, 169, 152, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 119, 183, 144, 106,
	171, 136, 0, 0, 0, 572, 0, 0, 0, 0,
	104, 0, 0, 0, 118, 0, 120, 0, 0, 153,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	574, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 0, 0, 0, 142, 0, 0,
	156, 109, 108, 117, 0, 0, 0, 0, 0, 100,
	0, 148, 138, 168, 0, 139, 147, 121, 160, 143,
	167, 177, 178, 158, 175, 89, 157, 166, 98, 150,
	91, 164, 155, 127, 113, 114, 90, 0, 146, 103,
	107, 102, 135, 161, 162, 101, 185, 94, 173, 174,
	93, 95, 172, 134, 159, 165, 128, 125, 92, 163,
	126, 124, 116, 105, 110, 140, 123, 141, 111, 131,
	130, 132, 0, 0, 0, 154, 170, 186, 0, 0,
	179, 180, 181, 182, 0, 0, 0, 133, 96, 112,
	151, 115, 122, 145, 184, 137, 149, 99, 169, 152,
	0, 0, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 88, 0, 119,
	183, 144, 106, 171, 104, 0, 0, 0, 118, 0,
	120, 0, 0, 153, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 315, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	0, 142, 0, 0, 156, 109, 108, 117, 0, 0,
	0, 0, 0, 100, 0, 148, 138, 168, 0, 139,
	147, 121, 160, 143, 167, 177, 178, 158, 175, 89,
	157, 166, 98, 150, 91, 164, 155, 127, 113, 114,
	90, 0, 146, 103, 107, 102, 135, 161, 162, 101,
	185, 94, 173, 174, 93, 95, 172, 134, 159, 165,
	128, 125, 92, 163, 126, 124, 116, 105, 110, 140,
	123, 141, 111, 131, 130, 132, 0, 0, 0, 154,
	170, 186, 0, 0, 179, 180, 181, 182, 0, 0,
	0, 133, 96, 112, 151, 115, 122, 145, 184, 137,
	149, 99, 169, 152, 0, 0, 0, 23, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 88, 0, 119, 183, 144, 106, 171, 104, 0,
	0, 0, 118, 0, 120, 0, 0, 153, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 0, 0, 0, 142, 0, 0, 156, 109,
	108, 117, 0, 0, 0, 0, 0, 100, 0, 148,
	138, 168, 0, 139, 147, 121, 160, 143, 167, 177,
	178, 158, 175, 89, 157, 166, 98, 150, 91, 164,
	155, 127, 113, 114, 90, 0, 146, 103, 107, 102,
	135, 161, 162, 101, 185, 94, 173, 174, 93, 95,
	172, 134, 159, 165, 128, 125, 92, 163, 126, 124,
	116, 105, 110, 140, 123, 141, 111, 131, 130, 132,
	0, 0, 0, 154, 170, 186, 0, 0, 179, 180,
	181, 182, 0, 0, 0, 133, 96, 112, 151, 115,
	122, 145, 184, 137, 149, 99, 169, 152, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 88, 0, 119, 183, 144,
	106, 171, 104, 0, 0, 0, 118, 0, 120, 0,
	0, 153, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 694, 0, 0, 695, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 142,
	0, 0, 156, 109, 108, 117, 0, 0, 0, 0,
	0, 100, 0, 148, 138, 168, 0, 139, 147, 121,
	160, 143, 167, 177, 178, 158, 175, 89, 157, 166,
	98, 150, 91, 164, 155, 127, 113, 114, 90, 0,
	146, 103, 107, 102, 135, 161, 162, 101, 185, 94,
	173, 174, 93, 95, 172, 134, 159, 165, 128, 125,
	92, 163, 126, 124, 116, 105, 110, 140, 123, 141,
	111, 131, 130, 132, 0, 0, 0, 154, 170, 186,
	0, 0, 179, 180, 181, 182, 0, 0, 0, 133,
	96, 112, 151, 115, 122, 145, 184, 137, 149, 99,
	169, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 88,
	0, 119, 183, 144, 106, 171, 104, 592, 0, 0,
	118, 0, 120, 0, 0, 153, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 591, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 0, 142, 0, 0, 156, 109, 108, 117,
	0, 0, 0, 0, 0, 100, 0, 148, 138, 168,
	0, 139, 147, 121, 160, 143, 167, 177, 178, 158,
	175, 89, 157, 166, 98, 150, 91, 164, 155, 127,
	113, 114, 90, 0, 146, 103, 107, 102, 135, 161,
	162, 101, 185, 94, 173, 174, 93, 95, 172, 134,
	159, 165, 128, 125, 92, 163, 126, 124, 116, 105,
	110, 140, 123, 141, 111, 131, 130, 132, 0, 0,
	0, 154, 170, 186, 0, 0, 179, 180, 181, 182,
	0, 0, 0, 133, 96, 112, 151, 115, 122, 145,
	184, 137, 149, 99, 169, 152, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 119, 183, 144, 106, 171,
	136, 0, 0, 0, 572, 0, 0, 0, 0, 104,
	0, 0, 0, 118, 0, 120, 0, 0, 153, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 574,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 0, 142, 0, 0, 156,
	109, 108, 117, 0, 0, 0, 0, 0, 100, 0,
	148, 138, 168, 0, 570, 147, 121, 160, 143, 167,
	177, 178, 158, 175, 89, 157, 166, 98, 150, 91,
	164, 155, 127, 113, 114, 90, 0, 146, 103, 107,
	102, 135, 161, 162, 101, 185, 94, 173, 174, 93,
	95, 172, 134, 159, 165, 128, 125, 92, 163, 126,
	124, 116, 105, 110, 140, 123, 141, 111, 131, 130,
	132, 0, 0, 0, 154, 170, 186, 0, 0, 179,
	180, 181, 182, 0, 0, 0, 133, 96, 112, 151,
	115, 122, 145, 184, 137, 149, 99, 169, 152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 88, 0, 119, 183,
	144, 106, 171, 104, 0, 0, 0, 118, 0, 120,
	0, 0, 153, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	142, 0, 0, 156, 109, 108, 117, 0, 0, 0,
	0, 0, 100, 0, 148, 138, 168, 0, 139, 147,
	121, 160, 143, 167, 177, 178, 158, 175, 89, 157,
	166, 98, 150, 91, 164, 155, 127, 113, 114, 90,
	0, 146, 103, 107, 102, 135, 161, 162, 101, 185,
	94, 173, 174, 93, 95, 172, 134, 159, 165, 128,
	125, 92, 163, 126, 124, 116, 105, 110, 140, 123,
	141, 111, 131, 130, 132, 0, 0, 0, 154, 170,
	186, 0, 0, 179, 180, 181, 182, 0, 0, 0,
	133, 96, 112, 151, 115, 122, 145, 184, 137, 149,
	99, 169, 152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	88, 0, 119, 183, 144, 106, 171, 104, 0, 0,
	0, 118, 0, 120, 0, 0, 153, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 574, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 0, 142, 0, 0, 156, 109, 108,
	117, 0, 0, 0, 0, 0, 100, 0, 148, 138,
	168, 0, 139, 147, 121, 160, 143, 167, 177, 178,
	158, 175, 89, 157, 166, 98, 150, 91, 164, 155,
	127, 113, 114, 90, 0, 146, 103, 107, 102, 135,
	161, 162, 101, 185, 94, 173, 174, 93, 95, 172,
	134, 159, 165, 128, 125, 92, 163, 126, 124, 116,
	105, 110, 140, 123, 141, 111, 131, 130, 132, 0,
	0, 0, 154, 170, 186, 0, 0, 179, 180, 181,
	182, 0, 0, 0, 133, 96, 112, 151, 115, 122,
	145, 184, 137, 149, 99, 169, 152, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 88, 0, 119, 183, 144, 106,
	171, 104, 0, 0, 0, 118, 0, 120, 0, 0,
	153, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 478, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 0, 142, 0,
	0, 156, 109, 108, 117, 0, 0, 0, 0, 0,
	100, 0, 148, 138, 168, 0, 139, 147, 121, 160,
	143, 167, 177, 178, 158, 175, 89, 157, 166, 98,
	150, 91, 164, 155, 127, 113, 114, 90, 0, 146,
	103, 107, 102, 135, 161, 162, 101, 185, 94, 173,
	174, 93, 95, 172, 134, 159, 165, 128, 125, 92,
	163, 126, 124, 116, 105, 110, 140, 123, 141, 111,
	131, 130, 132, 0, 0, 0, 154, 170, 186, 0,
	0, 179, 180, 181, 182, 0, 0, 0, 133, 96,
	112, 151, 115, 122, 145, 184, 137, 149, 99, 169,
	152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 88, 0,
	119, 183, 144, 106, 171, 550, 104, 0, 0, 0,
	118, 0, 120, 0, 0, 153, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 0, 142, 0, 0, 156, 109, 108, 117,
	0, 0, 0, 0, 0, 100, 0, 148, 138, 168,
	0, 139, 147, 121, 160, 143, 167, 177, 178, 158,
	175, 89, 157, 166, 98, 150, 91, 164, 155, 127,
	113, 114, 90, 0, 146, 103, 107, 102, 135, 161,
	162, 101, 185, 94, 173, 174, 93, 95, 172, 134,
	159, 165, 128, 125, 92, 163, 126, 124, 116, 105,
	110, 140, 123, 141, 111, 131, 130, 132, 0, 0,
	0, 154, 170, 186, 0, 0, 179, 180, 181, 182,
	0, 0, 0, 133, 96, 112, 151, 115, 122, 145,
	184, 137, 149, 99, 169, 152, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 136, 0, 88, 0, 119, 183, 144, 106, 171,
	104, 0, 0, 0, 118, 0, 120, 0, 0, 153,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 0, 0, 0, 142, 0, 0,
	156, 109, 108, 117, 0, 0, 0, 0, 0, 100,
	0, 148, 138, 168, 0, 139, 147, 121, 160, 143,
	167, 177, 178, 158, 175, 89, 157, 166, 98, 150,
	91, 164, 155, 127, 113, 114, 90, 0, 146, 103,
	107, 102, 135, 161, 162, 101, 185, 94, 173, 174,
	93, 95, 172, 134, 159, 165, 128, 125, 92, 163,
	126, 124, 116, 105, 110, 140, 123, 141, 111, 131,
	130, 132, 0, 0, 0, 154, 170, 186, 0, 0,
	179, 180, 181, 182, 0, 0, 0, 133, 96, 112,
	151, 115, 122, 145, 184, 137, 149, 99, 169, 152,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 88, 0, 119,
	183, 144, 106, 171, 104, 0, 0, 0, 118, 0,
	120, 0, 0, 153, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 0, 176, 0, 0,
	0, 142, 0, 0, 156, 109, 108, 117, 0, 0,
	0, 0, 0, 100, 0, 148, 138, 168, 0, 139,
	147, 121, 160, 143, 167, 177, 178, 158, 175, 89,
	157, 166, 98, 150, 91, 164, 155, 127, 113, 114,
	90, 0, 146, 103, 107, 102, 135, 161, 162, 101,
	185, 94, 173, 174, 93, 95, 172, 134, 159, 165,
	128, 125, 92, 163, 126, 124, 116, 105, 110, 140,
	123, 141, 111, 131, 130, 132, 0, 0, 0, 154,
	170, 186, 0, 0, 179, 180, 181, 182, 0, 0,
	0, 133, 96, 112, 151, 115, 122, 145, 184, 137,
	149, 99, 169, 152, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 88, 0, 119, 183, 144, 106, 171, 104, 0,
	0, 0, 118, 0, 120, 0, 0, 153, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 0, 0, 0, 142, 0, 0, 156, 109,
	108, 117, 0, 0, 0, 0, 0, 100, 0, 148,
	138, 168, 0, 139, 147, 121, 160, 143, 167, 177,
	178, 158, 175, 89, 157, 166, 98, 150, 91, 164,
	155, 127, 113, 114, 90, 0, 146, 103, 107, 102,
	135, 161, 162, 101, 185, 94, 173, 174, 93, 95,
	172, 134, 159, 165, 128, 125, 92, 163, 126, 124,
	116, 105, 110, 140, 123, 141, 111, 131, 130, 132,
	0, 0, 0, 154, 170, 186, 0, 0, 179, 180,
	181, 182, 0, 0, 0, 133, 96, 112, 151, 115,
	122, 145, 184, 137, 149, 99, 169, 152, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 88, 0, 119, 183, 144,
	106, 171, 104, 0, 0, 0, 118, 0, 120, 0,
	0, 153, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 142,
	0, 0, 156, 109, 108, 117, 0, 0, 0, 0,
	0, 100, 0, 148, 138, 168, 0, 139, 147, 121,
	160, 143, 167, 177, 178, 158, 175, 89, 157, 166,
	98, 150, 91, 164, 155, 127, 113, 114, 90, 0,
	146, 103, 107, 102, 135, 161, 162, 101, 185, 94,
	173, 174, 93, 95, 172, 134, 159, 165, 128, 125,
	92, 163, 126, 124, 116, 105, 110, 140, 123, 141,
	111, 131, 130, 132, 0, 0, 0, 154, 170, 186,
	0, 0, 179, 180, 181, 182, 0, 0, 0, 133,
	96, 112, 151, 115, 122, 145, 184, 137, 149, 99,
	169, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 88,
	0, 119, 183, 144, 106, 171, 104, 0, 0, 0,
	118, 0, 120, 0, 0, 153, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 0, 142, 0, 0, 156, 109, 108, 117,
	0, 0, 0, 0, 0, 100, 0, 148, 138, 168,
	0, 139, 147, 121, 160, 143, 167, 177, 178, 158,
	175, 89, 157, 166, 98, 150, 91, 164, 155, 127,
	113, 114, 90, 0, 146, 103, 107, 102, 135, 161,
	162, 101, 185, 94, 173, 174, 93, 95, 172, 134,
	159, 165, 128, 125, 92, 163, 126, 124, 116, 105,
	110, 140, 123, 141, 111, 131, 130, 132, 0, 0,
	0, 154, 170, 186, 0, 0, 179, 180, 181, 182,
	0, 0, 0, 133, 96, 112, 151, 115, 122, 145,
	184, 137, 149, 99, 169, 152, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 119, 183, 144, 106, 171,
}
var yyPact = [...]int{

	1727, -1000, -184, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 871, 906, -1000, -1000, -1000, -1000, -1000, -1000, 707,
	39, 83, 104, -1, 9667, 103, 1422, 10339, -1000, -14,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 677, -1000, -1000,
	-1000, -1000, -1000, 857, 868, 700, 858, 772, -1000, 5586,
	69, 8546, 9443, 4887, -1000, 541, 97, 10339, -139, 9891,
	67, 67, 67, -1000, 101, 10339, -1000, 10339, 63, 539,
	63, 63, 63, 10339, -1000, 126, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10339, 519, 821,
	60, 3165, 3165, 3165, 3165, -9, 3165, -90, 716, -1000,
	-1000, -1000, -1000, 3165, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 258, 836, 6288, 6288, 871, -1000,
	677, -1000, -1000, -1000, 813, -1000, -1000, 243, 895, -1000,
	1913, 125, -1000, 6288, 1816, 621, -1000, -1000, 621, -1000,
	-1000, 114, -1000, -1000, 6736, 6736, 6736, 6736, 6736, 6736,
	6736, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 621, -1000, 6055, 621, 621,
	621, 621, 621, 621, 621, 621, 6288, 621, 621, 621,
	621, 621, 621, 621, 621, 621, 621, 621, 621, 621,
	9219, 606, 877, -1000, -1000, -1000, 848, 7641, 8322, 10339,
	590, -1000, 616, 4641, -113, -1000, -1000, -1000, 191, 8089,
	-1000, -1000, -1000, 820, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 534,
	-1000, 2090, 9891, 3165, 88, 686, 517, 221, 450, 10339,
	10339, 3165, 79, 10339, 841, 714, 10339, 444, 436, -1000,
	4395, -1000, 3165, 3165, 3165, 3165, 3165, 3165, 3165, 3165,
	-1000, -1000, -1000, -1000, -1000, -1000, 3165, 3165, -1000, -93,
	-1000, 10339, -1000, -1000, -1000, -1000, 901, 157, 423, 124,
	618, -1000, 359, 857, 258, 772, 7865, 742, -1000, -1000,
	10339, -1000, 6288, 6288, 344, -1000, 8994, -1000, -1000, 3411,
	164, 6736, 255, 187, 6736, 6736, 6736, 6736, 6736, 6736,
	6736, 6736, 6736, 6736, 6736, 6736, 6736, 6736, 6736, 322,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 415, -1000,
	677, 620, 620, 137, 137, 137, 137, 137, 137, 6960,
	5120, 258, 527, 182, 6055, 5586, 5586, 6288, 6288, 10115,
	10115, 5586, 850, 203, 182, 10115, -1000, 258, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5586, 5586, 5586, 5586, 27,
	10339, -1000, 10115, 8546, 8546, 8546, 8546, 8546, -1000, 769,
	766, -1000, 763, 760, 774, 10339, -1000, 514, 7641, 162,
	621, -1000, 8770, -1000, -1000, 27, 599, 8546, 10339, -1000,
	-1000, 4149, 616, -113, 609, -1000, -110, -89, 5819, 136,
	-1000, -1000, -1000, -1000, 2673, 163, 149, -1000, -77, -1000,
	-1000, -1000, 673, -1000, 673, 673, -41, 673, 673, -44,
	-44, -44, -44, -1000, -1000, -1000, -1000, -1000, 701, 697,
	-1000, 673, 673, 673, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	690, 690, 690, 674, 674, 706, -1000, 10339, -161, 413,
	3165, 834, 3165, -1000, 59, -1000, 10339, -1000, -1000, 10339,
	3165, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 238, -1000, -1000, -1000,
	-1000, 796, 6288, 6288, 3903, 6288, -1000, -1000, -1000, 836,
	-1000, 850, 870, -1000, 804, 803, 5586, -1000, -1000, 164,
	227, -1000, -1000, 376, -1000, -1000, -1000, -1000, 122, 621,
	-1000, 2254, -1000, -1000, -1000, -1000, 255, 6736, 6736, 6736,
	1592, 2254, 2237, 598, 362, 137, 302, 302, 135, 135,
	135, 135, 135, 293, 293, -1000, -1000, -1000, 258, -1000,
	-1000, -1000, 258, 5586, 612, -1000, -1000, 6288, -1000, 258,
	506, 506, 299, 478, 661, -1000, 121, 659, 506, 5586,
	228, -1000, 6288, 258, -1000, 506, 258, 506, 506, 533,
	621, -1000, 610, -1000, 186, 877, 685, 713, 854, -1000,
	-1000, -1000, -1000, 762, -1000, 759, -1000, -1000, -1000, -1000,
	-1000, 95, 93, 90, 9891, -1000, 891, 8546, 591, -1000,
	-1000, 609, -113, -99, -1000, -1000, -1000, 182, -1000, 391,
	603, 2427, -1000, -1000, -1000, -1000, -1000, -1000, 679, 50,
	64, 129, 377, -1000, -1000, -1000, 236, 45, 900, -1000,
	49, -1000, 47, 347, -79, -1000, -1000, 296, -44, -44,
	673, -1000, -1000, 136, 808, 136, 136, 136, 339, 339,
	-1000, -1000, -1000, -1000, 289, -1000, -1000, -1000, 288, -1000,
	10339, 9891, 3165, -1000, 3657, -1000, -1000, -1000, -1000, -1000,
	-1000, 665, 619, 234, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 26, -1000, 3165, -1000, 254,
	10339, 10339, 794, 182, 182, 120, -1000, -1000, 10339, -1000,
	-1000, -1000, -1000, 647, -1000, -1000, -1000, 2919, 5586, -1000,
	1592, 2254, 2054, -1000, 6736, 6736, -1000, -1000, 506, 5586,
	182, -1000, -1000, -1000, 206, 322, 206, 6736, 6736, 3903,
	6736, 6736, -151, 602, 199, -1000, 6288, 193, -1000, -1000,
	-1000, -1000, -1000, 712, 10115, 621, -1000, 7417, 9891, 871,
	10115, 6288, 6288, -1000, -1000, 6288, 675, -1000, 6288, -1000,
	-1000, -1000, 621, 621, 621, 470, -1000, 871, 591, -1000,
	-1000, -1000, -119, -96, -1000, -1000, 2673, -1000, 2673, 9891,
	-1000, 375, 368, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -127, -1000, -1000, -1000, -1000, -1000, 449, 136,
	136, -44, -1000, 180, -1000, -1000, -1000, 496, -1000, 491,
	601, 482, 666, 708, -1000, 596, -1000, 178, -1000, 9891,
	57, -1000, 9891, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 9891, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10339, -1000, -1000, -1000,
	-1000, -1000, 9891, -1000, -1000, 325, 6288, -1000, -1000, -1000,
	3657, -1000, 891, 8546, -1000, -1000, 258, -1000, 6736, 2254,
	2254, -1000, -1000, 258, 673, 673, -1000, 673, 674, -1000,
	673, -24, 673, -25, 258, 258, 2121, 2219, -1000, 1918,
	2204, 621, -146, -1000, 182, 6288, -1000, 824, 589, 587,
	-1000, -1000, 5353, 258, 473, 118, 470, 857, -1000, 182,
	182, 182, 9891, 182, 9891, 9891, 9891, 7193, 9891, 857,
	-1000, -1000, -1000, -1000, 2427, -1000, 468, -1000, 673, -1000,
	-1000, -1000, -1000, -1000, -1000, 136, -1000, -1000, -44, 324,
	-44, 286, -1000, 285, 9891, 9891, 10339, 3657, 2673, 672,
	9891, -1000, 664, -1000, -1000, -1000, -1000, 828, -1000, 182,
	880, 593, -1000, 2254, -1000, -1000, 75, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 6736, 6736, -1000, 6736,
	6736, 6736, 258, 314, 182, 42, -1000, 621, -1000, -1000,
	681, 9891, 9891, -1000, -1000, 464, -1000, 462, 462, 462,
	162, -1000, -1000, 134, 9891, -1000, -1000, 136, -1000, 136,
	424, 397, 459, 658, 632, -1000, -1000, 9891, 623, 9891,
	621, 876, 864, -1000, -1000, 1693, 1693, 1693, 1693, 54,
	-1000, -1000, 898, -1000, 621, -1000, 677, 117, -1000, 9891,
	-1000, -1000, -1000, -1000, -1000, 134, -1000, 364, 176, 294,
	-1000, -1000, -1000, -1000, -1000, -1000, 9891, 9891, 457, 9891,
	448, 25, -1000, 6288, 6288, -1000, -1000, -1000, -1000, 258,
	48, -166, 10115, 587, 258, 9891, -1000, -1000, -1000, 257,
	-1000, -1000, 441, 427, -1000, 420, 686, 396, -1000, 9891,
	182, 484, -1000, 791, -158, -169, 466, -1000, -1000, -1000,
	-1000, -1000, -1000, -161, -1000, 25, 801, -1000, 787, -1000,
	-1000, -1000, 22, -164, 15, -167, 621, -174, 6512, -1000,
	1693, 258, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1097, 17, 426, 1094, 1089, 1088, 1087, 1086, 1085,
	1084, 1083, 1082, 1081, 1080, 1078, 1077, 1075, 1074, 1073,
	1072, 1071, 1070, 1069, 136, 1068, 1065, 1063, 58, 1062,
	77, 1060, 1059, 31, 44, 30, 25, 139, 1057, 32,
	57, 60, 1055, 36, 1054, 1052, 72, 1051, 55, 1050,
	1049, 1343, 1048, 1046, 6, 59, 1045, 1044, 1043, 1042,
	71, 283, 1041, 1039, 1038, 1037, 1036, 1034, 37, 4,
	8, 13, 9, 1033, 69, 10, 1032, 40, 1031, 1027,
	1026, 1025, 39, 1024, 48, 1021, 15, 42, 1019, 41,
	54, 26, 22, 7, 66, 53, 1018, 23, 52, 43,
	1017, 1016, 314, 1012, 1011, 1010, 1009, 1008, 1006, 425,
	345, 999, 997, 995, 34, 0, 405, 525, 61, 994,
	992, 991, 1279, 73, 56, 16, 990, 45, 1306, 28,
	988, 982, 24, 978, 972, 971, 970, 966, 963, 962,
	99, 20, 29, 957, 953, 46, 21, 33, 49, 950,
	947, 47, 946, 944, 943, 937, 27, 14, 934, 11,
	933, 3, 932, 931, 2, 930, 12, 929, 1, 928,
	5, 927, 926, 922, 50, 217, 915, 19, 914, 912,
	79,
}
var yyR1 = [...]int{

	0, 172, 173, 173, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 176,
	176, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 120,
	120, 170, 170, 169, 168, 168, 167, 167, 166, 16,
	153, 154, 154, 154, 148, 133, 133, 133, 133, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 136, 136, 134, 134, 134,
	134, 134, 134, 134, 135, 135, 135, 135, 135, 137,
	137, 137, 137, 137, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	139, 139, 139, 139, 139, 139, 139, 139, 147, 147,
	140, 140, 145, 145, 146, 146, 146, 143, 143, 144,
	144, 141, 141, 141, 142, 142, 150, 150, 162, 162,
	161, 161, 161, 152, 152, 158, 158, 158, 158, 158,
	151, 151, 160, 160, 159, 155, 155, 155, 156, 156,
	156, 157, 157, 157, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 177, 177, 178, 178,
	178, 178, 178, 178, 178, 178, 165, 163, 163, 164,
	164, 13, 14, 14, 14, 14, 14, 15, 15, 17,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 107, 107, 104, 104, 105, 105, 106,
	106, 106, 108, 108, 108, 131, 131, 131, 19, 19,
	21, 21, 22, 23, 20, 20, 20, 20, 20, 179,
	24, 25, 25, 26, 26, 26, 30, 30, 30, 28,
	28, 29, 29, 35, 35, 34, 34, 36, 36, 36,
	36, 119, 119, 119, 118, 118, 38, 38, 39, 39,
	40, 40, 41, 41, 41, 53, 53, 89, 89, 91,
	91, 42, 42, 42, 42, 43, 43, 44, 44, 45,
	45, 126, 126, 125, 125, 125, 124, 124, 47, 47,
	47, 49, 48, 48, 48, 48, 50, 50, 52, 52,
	51, 51, 54, 54, 54, 54, 55, 55, 37, 37,
	37, 37, 37, 37, 37, 103, 103, 57, 57, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 67,
	67, 67, 67, 67, 67, 58, 58, 58, 58, 58,
	58, 58, 33, 33, 68, 68, 68, 74, 69, 69,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 65, 65, 65, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 64,
	64, 64, 64, 64, 64, 64, 64, 180, 180, 66,
	66, 66, 66, 31, 31, 31, 31, 31, 129, 129,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 78, 78, 32, 32, 76, 76, 77,
	79, 79, 75, 75, 75, 60, 60, 60, 60, 60,
	60, 60, 60, 62, 62, 62, 80, 80, 81, 81,
	82, 82, 83, 83, 84, 85, 85, 85, 86, 86,
	86, 86, 87, 87, 87, 59, 59, 59, 59, 59,
	59, 88, 88, 88, 88, 92, 92, 70, 70, 72,
	72, 71, 73, 93, 93, 97, 94, 94, 98, 98,
	98, 96, 96, 96, 121, 121, 121, 101, 101, 109,
	109, 110, 110, 102, 102, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 112, 112, 112, 113, 113,
	116, 116, 117, 117, 122, 122, 123, 123, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 174,
	175, 127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 9, 11, 11, 4, 6, 5, 5, 5, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 2, 3, 1, 1, 1, 1,
	2, 3, 3, 3, 3, 3, 3, 3, 4, 2,
	3, 2, 3, 2, 3, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 5, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 1, 0,
	1, 0, 3, 3, 0, 2, 5, 4, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 3, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 10, 11, 7, 7, 12,
	7, 7, 7, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 3, 8,
	8, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 4, 3, 3,
	3, 3, 4, 3, 6, 4, 2, 4, 2, 2,
	2, 2, 3, 1, 1, 0, 1, 0, 1, 0,
	2, 2, 0, 2, 2, 0, 1, 1, 2, 1,
	1, 2, 1, 1, 2, 2, 2, 2, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 6,
	8, 8, 6, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -172, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 140, 115, 133, 48, 152, 153,
	155, 156, 25, 134, 135, 138, 139, -174, 8, 236,
	52, -173, 251, -82, 15, -26, 5, -24, -179, -24,
	-24, -24, -24, -24, -153, 52, -120, 120, 69, 148,
	228, 117, 118, 131, -102, 120, 122, 118, 118, 119,
	120, 228, 117, 118, -51, -122, 55, -115, 244, 152,
	163, 157, 185, 177, 174, 178, 215, 64, 155, 224,
	136, 172, 168, 166, 27, 190, 249, 167, 129, 128,
	191, 195, 216, 161, 162, 218, 189, 130, 31, 246,
	33, 144, 219, 193, 188, 184, 187, 160, 183, 37,
	197, 196, 198, 214, 180, 169, 18, 222, 139, 142,
	192, 194, 124, 146, 248, 220, 165, 143, 138, 223,
	156, 217, 226, 36, 202, 159, 127, 153, 150, 181,
	145, 170, 171, 186, 158, 182, 154, 147, 140, 225,
	203, 250, 179, 175, 176, 151, 120, 148, 149, 207,
	208, 209, 210, 247, 221, 173, 204, 118, 105, 178,
	111, 205, 119, 31, 146, -131, 118, -104, 149, 207,
	208, 209, 210, 55, 217, 216, 211, -122, 154, -127,
	-127, -127, -127, -127, -2, -86, 17, 16, -5, -3,
	-174, 6, 20, 21, -30, 38, 39, -25, -36, 96,
	-37, -122, -56, 71, -61, 28, 55, -115, 23, -60,
	-57, -75, -73, -74, 105, 106, 94, 95, 102, 72,
	107, -65, -63, -64, -66, 57, 56, 65, 58, 59,
	60, 61, 66, 67, 68, -116, -71, -174, 42, 43,
	237, 238, 239, 240, 243, 241, 74, 32, 227, 235,
	234, 233, 231, 232, 229, 230, 123, 228, 100, 236,
	-102, -39, -40, -41, -42, -53, -74, -174, -51, 11,
	-46, -51, -94, -130, 154, -98, 217, 216, -117, -96,
	-116, -114, 215, 178, 214, 55, -115, 116, 70, 22,
	24, 200, 73, 105, 16, 74, 104, 237, 111, 46,
	229, 230, 227, 239, 240, 228, 205, 28, 10, 25,
	134, 21, 98, 113, 77, 78, 137, 23, 135, 68,
	19, 49, 11, 13, 14, 123, 122, 89, 119, 44,
	8, 107, 26, 86, 40, 132, 42, 87, 17, 231,
	232, 30, 243, 141, 100, 47, 34, 71, 66, 50,
	69, 15, 45, 88, 114, 236, 43, 117, 6, 242,
	29, 133, 41, 118, 206, 76, 121, 67, 5, 131,
	9, 48, 51, 233, 234, 235, 32, 75, 12, -154,
	-148, 55, 119, -51, 236, -116, -110, 123, -110, -110,
	118, -51, -51, -109, 123, 55, -109, -109, -109, -51,
	108, -51, 55, 29, 228, 55, 146, 118, 147, 120,
	-128, -174, -117, -128, -128, -128, 150, 151, -128, -105,
	212, 50, -128, -175, 54, -87, 19, 30, -37, -122,
	-83, -84, -37, -82, -2, -24, 34, -28, 21, 63,
	11, -119, 70, 69, 86, -118, 22, -116, 57, 108,
	-37, -58, 89, 71, 87, 88, 73, 91, 90, 101,
	94, 95, 96, 97, 98, 99, 100, 92, 93, 104,
	79, 80, 81, 82, 83, 84, 85, -103, -174, -74,
	-174, 109, 110, -61, -61, -61, -61, -61, -61, -61,
	-174, -2, -69, -37, -174, -174, -174, -174, -174, -174,
	-174, -174, -174, -78, -37, -174, -180, -174, -180, -180,
	-180, -180, -180, -180, -180, -174, -174, -174, -174, -52,
	26, -51, 29, 53, -47, -49, -48, -50, 40, 44,
	46, 41, 42, 43, 47, -126, 22, -39, -174, -125,
	142, -124, 22, -122, 57, -51, -46, -176, 53, 11,
	51, 53, -94, 154, -95, -99, 218, 220, 79, -121,
	-116, 57, 28, 29, 54, 53, -149, -133, -136, -138,
	-137, -139, -134, -135, 174, 175, 178, 105, 179, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 29,
	136, 170, 171, 172, 173, 191, 192, 193, 194, 195,
	196, 197, 198, 157, 158, 159, 160, 161, 162, 163,
	165, 166, 167, 168, 169, -116, -128, 120, -170, 51,
	55, 71, 55, -51, -51, -128, 121, -51, 23, 50,
	-51, 55, 55, -123, -122, -114, -128, -128, -128, -128,
	-128, -128, -128, -128, -128, -128, -107, 206, 213, -51,
	9, 89, 53, 18, 108, 53, -85, 24, 25, -86,
	-175, -30, -62, -116, 58, 61, -29, 41, -51, -37,
	-37, -67, 66, 71, 67, 68, -118, 96, -123, -117,
	-114, -61, -68, -71, -74, 62, 89, 87, 88, 73,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -129, 55, 57, 55, -60,
	-60, -116, -35, 21, -34, -36, -175, 53, -175, -2,
	-34, -34, -37, -37, -75, -116, -122, -75, -34, -28,
	-76, -77, 75, -75, -175, -34, -35, -34, -34, -90,
	142, -51, -93, -97, -75, -40, -41, -41, -40, -41,
	40, 40, 40, 45, 40, 45, 40, -48, -122, -175,
	-54, 48, 122, 49, -174, -124, -90, 51, -39, -51,
	-98, -95, 53, 219, 221, 222, 50, -37, -142, 104,
	-155, -156, -157, -117, 57, 58, -148, -150, -158, 124,
	127, 131, -151, 119, 132, 66, 71, 28, 50, 200,
	124, 132, 131, 64, -143, 203, -140, 52, -140, -140,
	176, -140, -140, -141, 178, -141, -141, -141, 52, 52,
	-140, -140, -140, -145, 52, -145, -145, -146, 52, -146,
	50, 51, -51, -168, 247, -169, 55, -128, 23, -128,
	-111, 116, 113, 114, -165, 112, 200, 178, 64, 28,
	15, 237, 142, 250, 55, 143, -51, -51, -128, -106,
	11, 89, 36, -37, -37, -123, -84, -87, -101, 19,
	11, 32, 32, -34, 66, 67, 68, 108, -174, -68,
	-61, -61, -61, -33, 137, 70, -175, -175, -34, 53,
	-37, -175, -175, -175, 53, 51, 22, 53, 11, 108,
	53, 11, -175, -34, -79, -77, 77, -37, -175, -175,
	-175, -175, -175, -59, 29, 32, -2, -174, -174, -55,
	53, 12, 79, -44, -43, 50, 51, -45, 50, -43,
	40, 40, 119, 119, 119, -91, -116, -55, -39, -55,
	-99, -100, 223, 220, 226, 55, 53, -157, 79, 52,
	132, -151, -151, 55, 55, 66, 57, 58, 59, 66,
	227, 65, 9, 132, 132, 57, -144, 204, 58, -141,
	-141, -140, -142, 29, -142, -142, -142, -147, 57, -147,
	58, 58, -51, -116, -128, -167, -166, -117, -127, -177,
	131, -178, 148, 119, 132, 125, 126, 129, 128, 55,
	124, 127, 142, -171, 148, 125, 126, 129, 128, 55,
	119, 132, 124, 127, 142, 131, -112, -113, 121, 22,
	119, 132, 142, -128, -108, 87, 12, -122, -122, 37,
	108, -51, -38, 11, 96, -117, -35, -33, 70, -61,
	-61, -175, -36, -132, 105, 174, 136, 172, 168, 189,
	180, 202, 170, 203, -129, -132, -61, -61, -117, -61,
	-61, 244, -82, 78, -37, 76, -92, 50, -93, -70,
	-72, -71, -174, -2, -88, -116, -91, -82, -97, -37,
	-37, -37, 52, -37, -174, -174, -174, -175, 53, -82,
	-55, 220, 224, 225, -156, -157, -160, -159, -116, 55,
	55, 227, 54, -142, -142, -141, 55, 105, 54, 53,
	54, 53, 54, 53, 52, 51, 50, 53, 79, -116,
	-177, -127, -116, -127, -116, -51, -127, -116, 57, -37,
	-55, -39, -175, -61, -175, -140, -140, -140, -146, -140,
	162, -140, 162, -175, -175, -175, 53, 19, -175, 53,
	19, -174, -32, 242, -37, 27, -92, 53, -175, -175,
	-175, 53, 108, -175, -86, -89, -116, -89, -89, -89,
	-125, -116, -86, 54, 53, -140, -142, -141, 57, -141,
	58, 58, -89, -116, -51, -166, -157, 52, -116, 52,
	26, -80, 13, -141, 55, -61, -61, -61, -61, -61,
	-175, 57, 132, -72, 32, -2, -174, -116, -116, 53,
	54, -175, -175, -175, -54, -162, -161, 51, 130, 64,
	-159, -142, -142, 54, 54, 54, 52, 52, -89, 52,
	-89, -174, -81, 14, 16, -175, -175, -175, -175, -31,
	89, 247, 9, -70, -2, 108, -116, -161, 55, -152,
	79, 57, -89, -89, 54, -89, 54, -163, -164, 142,
	-37, -69, -175, 245, 47, 248, -93, -175, -116, 58,
	54, 54, 54, -170, -175, 53, -116, 37, 246, 249,
	-168, -164, 32, 37, 144, 247, 145, 248, -174, 249,
	-61, 141, -175, -175,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 520, 0, 289, 289, 289, 289, 289, 289, 0,
	69, 573, 0, 0, 0, 0, -2, 279, 280, 0,
	282, 283, 791, 791, 791, 791, 791, 0, 33, 34,
	789, 1, 3, 528, 0, 0, 293, 296, 291, 0,
	573, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	571, 571, 571, 70, 0, 0, 574, 0, 569, 0,
	569, 569, 569, 0, 238, 360, 594, 595, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 0, 0, 0,
	0, 792, 792, 792, 792, 0, 792, 267, 256, 258,
	259, 260, 261, 792, 276, 277, 266, 278, 281, 284,
	285, 286, 287, 288, 27, 532, 0, 0, 520, 29,
	0, 289, 294, 295, 299, 297, 298, 290, 0, 307,
	311, 0, 368, 0, 373, 375, -2, -2, 0, 410,
	411, 412, 413, 414, 0, 0, 0, 0, 0, 0,
	0, 437, 438, 439, 440, 505, 506, 507, 508, 509,
	510, 511, 512, 377, 378, 502, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 493, 0, 467, 467,
	467, 467, 467, 467, 467, 467, 0, 0, 0, 0,
	0, 0, 318, 320, 321, 322, 341, 0, 343, 0,
	0, 41, 45, 0, 768, 556, -2, -2, 0, 0,
	592, 593, -2, 697, -2, 590, 591, 598, 599, 600,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 0,
	81, 0, 0, 792, 0, 71, 0, 0, 0, 0,
	0, 792, 0, 0, 0, 0, 0, 0, 0, 237,
	0, 239, 792, 792, 792, 792, 792, 792, 792, 792,
	248, 793, 794, 249, 250, 251, 792, 792, 253, 0,
	268, 0, 262, 28, 790, 22, 0, 0, 529, 0,
	521, 522, 525, 528, 27, 296, 0, 301, 300, 292,
	0, 308, 0, 0, 0, 312, 0, 314, 315, 0,
	371, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	395, 396, 397, 398, 399, 400, 401, 374, 0, 388,
	0, 0, 0, 430, 431, 432, 433, 434, 435, 0,
	303, 27, 0, 408, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 494, 0, 459, 0, 460, 461,
	462, 463, 464, 465, 466, 0, 303, 0, 0, 43,
	0, 359, 0, 0, 0, 0, 0, 0, 348, 0,
	0, 351, 0, 0, 0, 0, 342, 0, 0, 362,
	741, 344, 0, 346, 347, -2, 0, 0, 0, 39,
	40, 0, 46, 768, 48, 49, 0, 0, 0, 164,
	564, 565, 566, 562, 185, 0, 84, 89, 157, 86,
	87, 88, 150, 106, 150, 150, 0, 150, 150, 161,
	161, 161, 161, 133, 134, 135, 136, 137, 0, 0,
	119, 150, 150, 150, 123, 140, 141, 142, 143, 144,
	145, 146, 147, 107, 108, 109, 110, 111, 112, 113,
	152, 152, 152, 154, 154, 0, 64, 0, 74, 0,
	792, 0, 792, 79, 0, 203, 0, 232, 570, 0,
	792, 235, 236, 361, 596, 597, 240, 241, 242, 243,
	244, 245, 246, 247, 252, 255, 269, 263, 264, 257,
	533, 0, 0, 0, 0, 0, 524, 526, 527, 532,
	30, 299, 0, 513, 0, 0, 0, 302, 25, 369,
	370, 372, 389, 0, 391, 393, 313, 309, 0, 503,
	-2, 379, 380, 404, 405, 406, 0, 0, 0, 0,
	402, 384, 0, 415, 416, 417, 418, 419, 420, 421,
	422, 423, 424, 425, 426, 429, 478, 479, 0, 427,
	428, 436, 0, 0, 304, 305, 407, 0, 551, 27,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	500, 497, 0, 0, 468, 0, 0, 0, 0, 0,
	0, 358, 366, 553, 0, 319, 337, 339, 0, 334,
	349, 350, 352, 0, 354, 0, 356, 357, 323, 324,
	325, 0, 0, 0, 0, 345, 366, 0, 366, 42,
	557, 47, 0, 0, 52, 53, 558, 559, 560, 0,
	80, 186, 188, 191, 192, 193, 82, 83, 0, 0,
	0, 0, 0, 180, 181, 90, 0, 0, 0, 99,
	0, 101, 103, 0, 159, 158, 105, 0, 161, 161,
	150, 127, 128, 164, 0, 164, 164, 164, 0, 0,
	120, 121, 122, 114, 0, 115, 116, 117, 0, 118,
	0, 0, 792, 66, 0, 72, 73, 67, 572, 68,
	791, 0, 0, 585, 204, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 0, 231, 792, 234, 272,
	0, 0, 0, 530, 531, 0, 523, 23, 0, 567,
	568, 514, 515, 316, 390, 392, 394, 0, 303, 381,
	402, 385, 0, 382, 0, 0, 376, 441, 0, 0,
	409, -2, 444, 445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 520, 0, 498, 0, 0, 458, 469,
	470, 471, 472, 545, 0, 0, -2, 0, 0, 520,
	0, 0, 0, 331, 338, 0, 0, 332, 0, 333,
	353, 355, 0, 0, 0, 0, 329, 520, 366, 38,
	50, 51, 0, 0, 57, 165, 0, 189, 0, 0,
	175, 0, 0, 178, 179, 91, 92, 93, 94, 95,
	96, 97, 0, 100, 102, 104, 85, 160, 0, 164,
	164, 161, 129, 0, 130, 131, 132, 0, 148, 0,
	0, 0, 0, 0, 65, 75, 76, 0, 194, 0,
	0, 791, 0, 216, 217, 218, 219, 220, 221, 222,
	223, 224, 225, 791, 0, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 0, 791, 586, 587,
	588, 589, 0, 233, 254, 0, 0, 270, 271, 534,
	0, 24, 366, 0, 310, 504, 0, 383, 0, 403,
	386, 442, 306, 0, 150, 150, 483, 150, 154, 486,
	150, 488, 150, 491, 0, 0, 0, 0, 503, 0,
	0, 0, 495, 457, 501, 0, 31, 0, 545, 535,
	547, 549, 0, 27, 0, 541, 0, 528, 554, 367,
	555, 335, 0, 340, 0, 0, 0, 343, 0, 528,
	37, 54, 55, 56, 187, 190, 0, 182, 150, 176,
	177, 98, 151, 124, 125, 164, 162, 163, 161, 0,
	161, 0, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 0, 198, 200, 201, 202, 0, 273, 274,
	516, 317, 443, 387, 446, 480, 161, 484, 485, 487,
	489, 490, 492, 448, 447, 449, 0, 0, 452, 0,
	0, 0, 0, 0, 499, 0, 32, 0, 550, -2,
	0, 0, 0, 44, 35, 0, 327, 0, 0, 0,
	362, 330, 36, 167, 0, 184, 126, 164, 149, 164,
	0, 0, 0, 0, 0, 77, 78, 0, 0, 0,
	0, 518, 0, 481, 482, 0, 0, 0, 0, 473,
	456, 496, 0, 548, 0, -2, 0, 543, 542, 0,
	336, 363, 364, 365, 326, 166, 168, 0, 173, 0,
	183, 138, 139, 153, 156, 61, 0, 0, 0, 0,
	0, 0, 26, 0, 0, 450, 451, 453, 454, 0,
	0, 0, 0, 538, 27, 0, 328, 169, 170, 0,
	174, 172, 0, 0, 195, 0, 71, 0, 227, 0,
	519, 517, 455, 0, 0, 0, 546, -2, 544, 171,
	63, 62, 196, 74, 226, 0, 0, 474, 0, 477,
	199, 228, 0, 475, 0, 0, 0, 0, 0, 476,
	0, 0, 229, 230,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 251,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:303
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:308
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:309
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:313
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:336
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:344
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:348
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:354
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:361
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:367
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:371
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:377
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:381
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:388
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:400
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:412
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:416
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:422
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:428
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:432
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:436
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:441
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:442
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:446
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:450
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:455
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:459
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:465
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:469
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:473
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:477
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:483
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:487
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:493
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:497
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:501
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:507
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:511
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:519
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:525
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:529
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:535
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:540
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:555
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:570
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:584
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:588
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:592
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:600
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:604
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:609
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:613
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:618
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:622
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:628
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:633
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:638
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:644
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:649
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:655
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:661
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:668
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:675
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:680
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:684
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:690
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:695
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:705
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:715
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:720
		{
			yyDollar[1].columnType.NotNull = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:725
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:730
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:735
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:740
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:745
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:750
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:755
		{
			yyDollar[1].columnType.OnUpdate = NewValArg(yyDollar[4].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:760
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:765
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:770
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:775
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:780
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:785
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:792
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:797
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:962
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:988
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:993
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:998
		{
			yyVAL.optVal = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1002
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1011
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1019
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1041
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1046
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1063
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1078
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1082
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1102
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1113
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1131
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1135
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1174
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1178
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1186
		{
			yyVAL.str = yyDollar[1].str
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1190
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1194
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1204
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[7].colIdent,
					Unique: false,
				},
				IndexCols: yyDollar[9].columns,
			}
		}
	case 196:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[8].colIdent,
					Unique: true,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 197:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1248
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 199:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1275
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1280
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 229:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 230:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1348
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1354
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 233:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1362
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1367
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1375
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1385
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1394
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1421
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1433
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1457
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1467
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1483
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1487
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.str = ""
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1521
		{
			yyVAL.str = "extended "
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.str = ""
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.str = "full "
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.str = ""
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.showFilter = nil
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.str = ""
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.str = SessionStr
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.str = GlobalStr
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.statement = &Begin{}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.statement = &Begin{}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.statement = &Commit{}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1605
		{
			yyVAL.statement = &Rollback{}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.statement = &OtherRead{}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.statement = &OtherRead{}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1619
		{
			yyVAL.statement = &OtherRead{}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1632
		{
			setAllowComments(yylex, true)
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.bytes2 = nil
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.str = UnionStr
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.str = UnionAllStr
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.str = UnionDistinctStr
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.str = SQLCacheStr
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.str = DistinctStr
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1687
		{
			yyVAL.str = ""
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1691
		{
			yyVAL.str = StraightJoinHint
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.selectExprs = nil
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1724
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1737
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1785
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 326:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1836
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1840
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1848
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.empty = struct{}{}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.empty = struct{}{}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1876
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.str = JoinStr
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.str = JoinStr
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.str = JoinStr
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.str = StraightJoinStr
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.str = LeftJoinStr
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1913
		{
			yyVAL.str = LeftJoinStr
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.str = RightJoinStr
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.str = RightJoinStr
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.str = NaturalJoinStr
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1931
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1941
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1960
		{
			yyVAL.indexHints = nil
		}
	case 363:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 364:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1968
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 365:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1972
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.expr = nil
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.str = ""
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 387:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.str = IsNullStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.str = IsNotNullStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.str = IsTrueStr
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.str = IsNotTrueStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.str = IsFalseStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.str = IsNotFalseStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.str = EqualStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.str = LessThanStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.str = GreaterThanStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.str = LessEqualStr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2121
		{
			yyVAL.str = GreaterEqualStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.str = NotEqualStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2134
		{
			yyVAL.expr = nil
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2206
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2226
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2230
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2246
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2254
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2262
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2270
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2292
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 446:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 447:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 450:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 451:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 453:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 454:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 455:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2372
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 456:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2376
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 457:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2384
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2394
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2398
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2402
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2411
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2426
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2440
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2448
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2452
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2458
		{
			yyVAL.str = ""
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2462
		{
			yyVAL.str = BooleanModeStr
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 476:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2470
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2474
		{
			yyVAL.str = QueryExpansionStr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2480
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2484
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2494
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2506
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2510
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2516
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2520
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2524
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2528
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2532
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2536
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2540
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2545
		{
			yyVAL.expr = nil
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2549
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2554
		{
			yyVAL.str = string("")
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2558
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2564
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2568
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2574
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2579
		{
			yyVAL.expr = nil
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2583
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2589
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2593
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 504:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2603
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2607
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2611
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2615
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2619
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2623
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2627
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2631
		{
			yyVAL.expr = &NullVal{}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2637
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2646
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2650
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2655
		{
			yyVAL.exprs = nil
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2659
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2664
		{
			yyVAL.expr = nil
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2668
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2673
		{
			yyVAL.orderBy = nil
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2677
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2683
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2687
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2693
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2698
		{
			yyVAL.str = AscScr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2702
		{
			yyVAL.str = AscScr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2706
		{
			yyVAL.str = DescScr
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2711
		{
			yyVAL.limit = nil
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2715
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2719
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2723
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2728
		{
			yyVAL.str = ""
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2732
		{
			yyVAL.str = ForUpdateStr
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2736
		{
			yyVAL.str = ShareModeStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2749
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2753
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2757
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 538:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2762
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2766
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 540:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2770
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2777
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2781
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2785
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2789
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2794
		{
			yyVAL.updateExprs = nil
		}
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2798
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2804
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2808
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2814
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2818
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2824
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2830
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2840
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2844
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2850
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2856
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2860
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2866
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2870
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2874
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2881
		{
			yyVAL.bytes = []byte("charset")
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2888
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2892
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2896
		{
			yyVAL.expr = &Default{}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2905
		{
			yyVAL.byt = 0
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2907
		{
			yyVAL.byt = 1
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2910
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2912
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2915
		{
			yyVAL.str = ""
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2917
		{
			yyVAL.str = IgnoreStr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2921
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2923
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2925
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2927
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2929
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2931
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2933
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2935
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2937
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2939
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2942
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2944
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2946
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2950
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2952
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2956
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2960
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2967
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2973
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2977
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2984
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3201
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3210
		{
			decNesting(yylex)
		}
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3215
		{
			forceEOF(yylex)
		}
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3220
		{
			forceEOF(yylex)
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3224
		{
			forceEOF(yylex)
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3228
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
