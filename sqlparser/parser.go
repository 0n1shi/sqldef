// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const POLICY = 57457
const UNIQUE = 57458
const KEY = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const STATUS = 57477
const VARIABLES = 57478
const RESTRICT = 57479
const CASCADE = 57480
const NO = 57481
const ACTION = 57482
const PERMISSIVE = 57483
const RESTRICTIVE = 57484
const PUBLIC = 57485
const CURRENT_USER = 57486
const SESSION_USER = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const SMALLSERIAL = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const SERIAL = 57500
const BIGINT = 57501
const BIGSERIAL = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const PRECISION = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const VARYING = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const UUID = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const JSONB = 57531
const ENUM = 57532
const GEOMETRY = 57533
const POINT = 57534
const LINESTRING = 57535
const POLYGON = 57536
const GEOMETRYCOLLECTION = 57537
const MULTIPOINT = 57538
const MULTILINESTRING = 57539
const MULTIPOLYGON = 57540
const ARRAY = 57541
const NOW = 57542
const NULLX = 57543
const AUTO_INCREMENT = 57544
const APPROXNUM = 57545
const SIGNED = 57546
const UNSIGNED = 57547
const ZEROFILL = 57548
const ZONE = 57549
const DATABASES = 57550
const TABLES = 57551
const VITESS_KEYSPACES = 57552
const VITESS_SHARDS = 57553
const VITESS_TABLETS = 57554
const VSCHEMA_TABLES = 57555
const EXTENDED = 57556
const FULL = 57557
const PROCESSLIST = 57558
const NAMES = 57559
const CHARSET = 57560
const GLOBAL = 57561
const SESSION = 57562
const ISOLATION = 57563
const LEVEL = 57564
const READ = 57565
const WRITE = 57566
const ONLY = 57567
const REPEATABLE = 57568
const COMMITTED = 57569
const UNCOMMITTED = 57570
const SERIALIZABLE = 57571
const CURRENT_TIMESTAMP = 57572
const DATABASE = 57573
const CURRENT_DATE = 57574
const CURRENT_TIME = 57575
const LOCALTIME = 57576
const LOCALTIMESTAMP = 57577
const UTC_DATE = 57578
const UTC_TIME = 57579
const UTC_TIMESTAMP = 57580
const REPLACE = 57581
const CONVERT = 57582
const CAST = 57583
const SUBSTR = 57584
const SUBSTRING = 57585
const GROUP_CONCAT = 57586
const SEPARATOR = 57587
const MATCH = 57588
const AGAINST = 57589
const BOOLEAN = 57590
const LANGUAGE = 57591
const WITH = 57592
const WITHOUT = 57593
const PARSER = 57594
const QUERY = 57595
const EXPANSION = 57596
const UNUSED = 57597
const TYPECAST = 57598
const CHECK = 57599

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	120, 92,
	-2, 82,
	-1, 36,
	152, 331,
	153, 331,
	-2, 321,
	-1, 254,
	108, 660,
	-2, 656,
	-1, 255,
	108, 661,
	-2, 657,
	-1, 325,
	79, 834,
	-2, 58,
	-1, 326,
	79, 790,
	-2, 59,
	-1, 331,
	79, 772,
	-2, 627,
	-1, 333,
	79, 811,
	-2, 629,
	-1, 619,
	51, 41,
	53, 41,
	-2, 43,
	-1, 751,
	108, 663,
	-2, 659,
	-1, 977,
	5, 28,
	-2, 463,
	-1, 1002,
	5, 27,
	-2, 602,
	-1, 1085,
	5, 27,
	-2, 64,
	-1, 1278,
	5, 28,
	-2, 603,
	-1, 1343,
	5, 27,
	-2, 605,
	-1, 1423,
	5, 28,
	-2, 606,
}

const yyPrivate = 57344

const yyLast = 12178

var yyAct = [...]int{
	255, 1413, 1374, 1005, 687, 917, 259, 815, 1295, 546,
	1354, 1170, 284, 1076, 1044, 1171, 1284, 833, 1198, 856,
	896, 1087, 1167, 851, 613, 911, 465, 862, 53, 611,
	855, 816, 1143, 545, 3, 88, 1021, 776, 88, 66,
	787, 258, 969, 330, 906, 317, 784, 629, 1073, 803,
	1010, 753, 478, 888, 484, 432, 233, 261, 869, 628,
	324, 812, 88, 88, 335, 227, 615, 569, 257, 335,
	951, 600, 335, 312, 786, 490, 498, 88, 242, 88,
	85, 232, 321, 319, 311, 88, 560, 574, 575, 1060,
	327, 310, 513, 514, 515, 516, 517, 518, 519, 512,
	246, 512, 522, 52, 522, 1447, 522, 1207, 320, 228,
	229, 230, 231, 885, 1463, 1444, 1460, 1421, 1269, 315,
	1400, 1457, 444, 506, 445, 509, 1077, 1078, 918, 1433,
	452, 524, 525, 526, 527, 528, 529, 530, 477, 507,
	508, 505, 511, 510, 520, 521, 513, 514, 515, 516,
	517, 518, 519, 512, 1443, 1162, 522, 1388, 511, 510,
	520, 521, 513, 514, 515, 516, 517, 518, 519, 512,
	1272, 442, 522, 884, 511, 510, 520, 521, 513, 514,
	515, 516, 517, 518, 519, 512, 1268, 477, 522, 511,
	510, 520, 521, 513, 514, 515, 516, 517, 518, 519,
	512, 1420, 1029, 522, 1210, 1028, 88, 630, 1030, 631,
	335, 335, 335, 335, 1192, 335, 846, 83, 79, 80,
	81, 473, 335, 511, 510, 520, 521, 513, 514, 515,
	516, 517, 518, 519, 512, 1355, 718, 522, 1193, 1194,
	847, 848, 1311, 719, 1265, 477, 1310, 1062, 1357, 335,
	887, 454, 1303, 1332, 897, 889, 1365, 1222, 807, 1302,
	1221, 1261, 1259, 907, 74, 486, 226, 1233, 1234, 1362,
	1298, 523, 487, 523, 1459, 523, 469, 470, 1455, 1414,
	1121, 511, 510, 520, 521, 513, 514, 515, 516, 517,
	518, 519, 512, 813, 1236, 522, 871, 515, 516, 517,
	518, 519, 512, 1042, 283, 522, 458, 1415, 1340, 1237,
	88, 872, 70, 72, 533, 1356, 1301, 88, 88, 88,
	1057, 1056, 1037, 335, 1205, 523, 1453, 71, 73, 335,
	1245, 1379, 447, 438, 57, 1389, 1266, 76, 77, 77,
	1319, 523, 1047, 1048, 1049, 68, 834, 836, 82, 327,
	1052, 1050, 281, 282, 697, 595, 1118, 523, 435, 59,
	60, 61, 62, 63, 619, 1020, 463, 871, 329, 460,
	443, 462, 523, 436, 315, 1019, 440, 1018, 434, 205,
	78, 1122, 872, 1393, 562, 563, 564, 565, 566, 567,
	568, 897, 908, 722, 892, 1296, 1297, 1299, 1281, 459,
	461, 1130, 620, 1138, 985, 626, 523, 511, 510, 520,
	521, 513, 514, 515, 516, 517, 518, 519, 512, 1419,
	835, 522, 1040, 511, 510, 520, 521, 513, 514, 515,
	516, 517, 518, 519, 512, 335, 88, 522, 535, 536,
	963, 1216, 88, 69, 88, 335, 725, 88, 502, 453,
	88, 1358, 946, 1119, 88, 1117, 335, 335, 335, 335,
	335, 335, 335, 335, 523, 252, 497, 1098, 1120, 760,
	335, 335, 853, 852, 523, 88, 496, 495, 1398, 1126,
	495, 686, 1230, 758, 759, 757, 871, 693, 446, 694,
	335, 1217, 698, 497, 88, 701, 497, 706, 1008, 457,
	335, 872, 1054, 728, 729, 632, 496, 495, 1164, 804,
	804, 982, 992, 1166, 329, 329, 329, 329, 754, 329,
	720, 647, 643, 497, 704, 690, 329, 1361, 1046, 750,
	947, 492, 1051, 981, 1425, 980, 1099, 1095, 437, 739,
	1100, 1097, 1096, 730, 335, 73, 751, 50, 496, 495,
	1313, 496, 495, 500, 1125, 1312, 1101, 756, 496, 495,
	796, 799, 1094, 755, 1082, 497, 805, 732, 497, 1080,
	449, 450, 451, 749, 488, 497, 747, 466, 467, 468,
	75, 471, 791, 1063, 743, 745, 746, 1399, 475, 744,
	523, 779, 777, 724, 778, 88, 1339, 1308, 88, 88,
	88, 88, 88, 817, 781, 782, 523, 1247, 1074, 439,
	88, 441, 1058, 88, 960, 961, 962, 88, 21, 1408,
	1467, 477, 88, 88, 792, 793, 335, 329, 723, 1396,
	800, 1204, 801, 634, 1347, 1456, 1370, 809, 1203, 335,
	814, 309, 1408, 1445, 496, 495, 791, 1439, 477, 1347,
	1436, 841, 327, 1347, 1431, 315, 315, 315, 315, 315,
	1202, 497, 1347, 1430, 808, 857, 810, 811, 842, 1043,
	315, 1031, 819, 820, 237, 822, 898, 899, 900, 315,
	830, 839, 818, 838, 920, 821, 843, 844, 1347, 1411,
	335, 780, 335, 88, 703, 860, 88, 702, 88, 1347,
	1371, 88, 335, 890, 891, 893, 894, 895, 691, 689,
	913, 274, 273, 276, 277, 278, 279, 1347, 477, 1369,
	275, 280, 903, 904, 905, 455, 909, 910, 537, 538,
	539, 540, 541, 542, 543, 1347, 1348, 1211, 924, 685,
	623, 941, 448, 942, 1293, 1292, 943, 1189, 477, 329,
	1280, 477, 750, 1225, 1224, 1219, 1220, 1219, 1218, 1006,
	329, 329, 329, 329, 329, 329, 329, 329, 433, 751,
	754, 975, 477, 1144, 329, 329, 597, 477, 789, 477,
	624, 952, 622, 953, 520, 521, 513, 514, 515, 516,
	517, 518, 519, 512, 734, 54, 522, 639, 638, 1409,
	1168, 1408, 1133, 1006, 500, 987, 1146, 329, 23, 965,
	789, 696, 959, 1276, 597, 755, 23, 840, 1229, 622,
	1007, 1223, 707, 708, 709, 710, 711, 712, 713, 714,
	1032, 433, 23, 975, 1342, 984, 715, 716, 335, 1000,
	1007, 88, 1001, 1023, 975, 1025, 1002, 986, 783, 1227,
	1226, 1148, 991, 1153, 50, 1147, 335, 1145, 797, 797,
	974, 597, 50, 1151, 797, 845, 975, 596, 625, 726,
	1024, 335, 1015, 1149, 1150, 1033, 989, 983, 50, 50,
	688, 1006, 857, 88, 1461, 1441, 1403, 1376, 1373, 1152,
	1154, 597, 1372, 1026, 239, 871, 1326, 889, 315, 912,
	865, 797, 870, 1183, 866, 867, 907, 1035, 902, 868,
	872, 1064, 1065, 901, 1067, 88, 335, 1053, 1079, 335,
	1068, 65, 1070, 1071, 1072, 1038, 1039, 1041, 1011, 1012,
	329, 602, 605, 606, 607, 603, 1363, 604, 608, 1360,
	50, 1011, 1012, 329, 335, 1088, 1066, 88, 88, 1228,
	1085, 1075, 1168, 1081, 1036, 88, 914, 915, 1014, 248,
	1083, 700, 692, 474, 335, 523, 1092, 827, 948, 738,
	752, 1017, 828, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 825, 1016,
	1135, 1091, 824, 826, 329, 823, 329, 1452, 476, 829,
	1131, 606, 607, 1442, 335, 335, 329, 817, 1169, 1137,
	1129, 1136, 1159, 817, 1172, 1156, 1142, 1450, 1163, 1155,
	602, 605, 606, 607, 603, 1069, 604, 608, 1191, 751,
	329, 243, 244, 335, 1178, 335, 335, 1174, 1179, 958,
	491, 1177, 957, 637, 479, 456, 922, 1274, 1327, 699,
	1108, 1090, 1190, 489, 1196, 480, 921, 916, 923, 857,
	610, 857, 491, 1195, 240, 241, 1232, 234, 944, 511,
	510, 520, 521, 513, 514, 515, 516, 517, 518, 519,
	512, 1382, 1321, 522, 1322, 1323, 1324, 1214, 1212, 1213,
	956, 1215, 1381, 235, 1330, 335, 1320, 54, 955, 1007,
	1201, 1200, 1401, 493, 335, 1208, 1402, 1390, 1055, 721,
	56, 58, 1093, 875, 1109, 1235, 88, 621, 970, 1111,
	1104, 1105, 335, 1112, 1107, 1106, 51, 1, 1114, 1110,
	67, 335, 1432, 1407, 88, 876, 1249, 1206, 1231, 1113,
	1089, 1102, 1022, 919, 1086, 1103, 929, 1412, 1353, 881,
	1246, 873, 1197, 863, 854, 431, 874, 1135, 64, 1238,
	329, 1242, 1397, 1250, 864, 861, 640, 883, 1240, 1061,
	886, 646, 644, 645, 1257, 1045, 642, 648, 641, 213,
	322, 609, 1243, 633, 335, 494, 335, 335, 335, 88,
	335, 315, 1275, 1116, 481, 485, 335, 1115, 1254, 1255,
	925, 1256, 1286, 1287, 1288, 1258, 1124, 1260, 717, 878,
	1300, 503, 882, 1289, 945, 1033, 472, 215, 880, 879,
	1084, 531, 857, 329, 966, 967, 968, 335, 335, 88,
	335, 335, 954, 1027, 328, 1283, 335, 1175, 1306, 1307,
	727, 1309, 483, 1314, 1380, 547, 335, 1291, 329, 1329,
	1318, 1317, 523, 1294, 558, 990, 1088, 857, 557, 802,
	260, 742, 272, 269, 1305, 271, 270, 733, 329, 999,
	504, 250, 314, 593, 1316, 601, 1331, 599, 598, 1013,
	1009, 335, 335, 313, 1132, 1271, 1387, 737, 25, 1172,
	329, 55, 1341, 245, 335, 19, 18, 17, 20, 16,
	15, 14, 335, 482, 877, 797, 29, 1352, 1176, 1022,
	1123, 797, 1359, 1343, 13, 12, 1364, 1366, 11, 10,
	335, 9, 8, 7, 6, 5, 4, 335, 236, 22,
	2, 1367, 0, 1368, 0, 0, 0, 329, 86, 329,
	1199, 225, 0, 1377, 0, 0, 0, 0, 335, 0,
	0, 0, 0, 0, 1391, 1172, 0, 285, 47, 0,
	0, 0, 0, 249, 1395, 86, 86, 0, 0, 0,
	0, 0, 0, 335, 335, 1404, 0, 335, 1392, 0,
	86, 0, 86, 0, 0, 0, 0, 0, 86, 1405,
	1406, 0, 1417, 1410, 335, 0, 0, 817, 1422, 1239,
	0, 335, 0, 0, 335, 47, 1429, 0, 1241, 335,
	1427, 1428, 0, 238, 0, 335, 1437, 0, 0, 316,
	0, 0, 0, 0, 0, 0, 1244, 0, 0, 0,
	0, 0, 0, 0, 1446, 329, 1139, 1140, 0, 0,
	0, 1449, 335, 1448, 0, 0, 0, 0, 0, 1157,
	1158, 0, 1160, 1161, 88, 740, 741, 0, 1451, 0,
	0, 0, 335, 0, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 731, 0, 1285, 0,
	1285, 1285, 1285, 971, 1290, 0, 0, 0, 0, 1458,
	329, 0, 0, 0, 0, 0, 0, 0, 547, 86,
	0, 794, 795, 511, 510, 520, 521, 513, 514, 515,
	516, 517, 518, 519, 512, 0, 0, 522, 0, 0,
	0, 1285, 1315, 0, 329, 329, 0, 0, 0, 0,
	1325, 0, 0, 0, 788, 790, 0, 0, 0, 0,
	1328, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 0, 0, 464, 464, 464,
	464, 0, 464, 0, 0, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 850, 0, 0, 0, 47, 0, 1199, 0,
	0, 0, 0, 0, 1252, 0, 1045, 0, 0, 0,
	832, 532, 0, 86, 534, 0, 0, 0, 0, 0,
	86, 617, 86, 0, 1375, 0, 0, 0, 0, 0,
	0, 1285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 544, 0, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 1394, 559, 561, 561, 561, 561, 561, 561,
	561, 561, 0, 589, 590, 591, 592, 0, 0, 0,
	0, 0, 0, 0, 612, 0, 0, 1285, 1285, 0,
	0, 1285, 0, 949, 950, 0, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 797, 523, 0, 1424, 0,
	0, 0, 0, 0, 0, 1426, 0, 0, 1375, 0,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1333, 1334, 0, 1335, 1336, 1337, 0, 0, 86,
	0, 0, 0, 0, 0, 86, 1285, 86, 0, 976,
	86, 0, 0, 86, 0, 0, 0, 705, 0, 0,
	0, 0, 0, 0, 993, 0, 1375, 510, 520, 521,
	513, 514, 515, 516, 517, 518, 519, 512, 86, 972,
	522, 0, 0, 973, 0, 0, 0, 0, 0, 0,
	977, 978, 979, 0, 0, 0, 0, 86, 0, 988,
	0, 0, 464, 0, 994, 0, 705, 995, 996, 997,
	998, 935, 0, 464, 464, 464, 464, 464, 464, 464,
	464, 0, 0, 0, 934, 0, 0, 464, 464, 511,
	510, 520, 521, 513, 514, 515, 516, 517, 518, 519,
	512, 0, 0, 522, 0, 0, 0, 0, 249, 0,
	0, 939, 0, 249, 249, 0, 0, 798, 798, 249,
	933, 0, 0, 798, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 47, 249, 249, 249, 249, 0, 86, 0,
	798, 86, 86, 86, 86, 86, 548, 0, 930, 927,
	928, 0, 926, 831, 0, 0, 86, 0, 0, 0,
	617, 0, 0, 211, 0, 86, 86, 0, 1465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	937, 940, 0, 0, 0, 0, 0, 221, 0, 523,
	0, 0, 1165, 0, 0, 316, 316, 316, 316, 316,
	0, 0, 0, 0, 0, 0, 0, 1180, 1181, 0,
	612, 1182, 837, 1141, 1184, 0, 0, 0, 0, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	0, 0, 0, 0, 0, 0, 86, 206, 0, 86,
	0, 86, 0, 208, 86, 0, 570, 0, 0, 0,
	214, 210, 523, 0, 0, 931, 0, 0, 0, 0,
	1188, 0, 0, 0, 0, 0, 0, 0, 0, 705,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 572,
	212, 249, 0, 216, 0, 0, 0, 464, 0, 464,
	0, 0, 0, 936, 0, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 938, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 0,
	0, 0, 0, 0, 0, 207, 1248, 0, 573, 249,
	0, 0, 0, 587, 571, 0, 0, 0, 576, 0,
	0, 0, 0, 0, 0, 249, 0, 0, 964, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 217,
	218, 219, 220, 224, 0, 0, 1273, 0, 223, 222,
	0, 0, 0, 547, 0, 1251, 0, 0, 0, 0,
	0, 0, 1253, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1262, 1263, 1264, 0, 0, 1267,
	0, 0, 0, 0, 0, 0, 588, 0, 0, 0,
	1003, 1004, 1277, 1278, 1279, 0, 1282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1059, 0, 23, 24,
	48, 26, 27, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 42, 1304, 0,
	0, 28, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	37, 0, 0, 0, 50, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1127, 1128, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 249, 0,
	1338, 0, 0, 0, 47, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 1349, 1350, 1351, 0, 705,
	0, 0, 0, 30, 31, 33, 32, 35, 0, 0,
	0, 464, 0, 0, 798, 0, 0, 0, 0, 0,
	798, 0, 0, 0, 0, 0, 0, 36, 43, 44,
	0, 0, 45, 46, 34, 0, 0, 0, 0, 0,
	0, 0, 1383, 1384, 1385, 1386, 0, 0, 0, 0,
	0, 1416, 547, 0, 0, 38, 39, 0, 40, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1173,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 0, 0, 0, 0, 1185, 1186, 1187, 0,
	0, 0, 0, 0, 0, 0, 1418, 0, 0, 0,
	0, 1423, 0, 0, 666, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1454, 0, 0,
	0, 1438, 1209, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1468, 1469, 0, 0, 0, 0,
	652, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 617, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 667, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 0, 680, 681, 0, 682, 683, 684,
	668, 669, 670, 671, 649, 651, 0, 587, 650, 653,
	0, 664, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 665, 672, 673, 674, 675, 676, 677, 678,
	679, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	588, 0, 0, 0, 1173, 0, 0, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1378, 0, 0, 0, 0,
	0, 0, 0, 0, 798, 0, 0, 0, 0, 0,
	1173, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	420, 410, 0, 380, 422, 357, 372, 430, 373, 374,
	402, 343, 388, 146, 369, 91, 360, 338, 366, 339,
	358, 382, 113, 356, 412, 391, 125, 428, 128, 396,
	0, 167, 137, 0, 0, 384, 414, 386, 408, 379,
	403, 348, 395, 423, 370, 399, 424, 86, 0, 0,
	334, 0, 858, 859, 0, 0, 0, 0, 0, 104,
	0, 398, 419, 368, 401, 337, 397, 0, 341, 344,
	429, 417, 363, 364, 1034, 0, 0, 0, 0, 0,
	0, 383, 387, 405, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 361, 0, 394, 0, 0, 0, 345,
	342, 0, 381, 0, 0, 0, 347, 1462, 362, 406,
	0, 336, 409, 415, 378, 192, 418, 376, 375, 153,
	0, 107, 0, 171, 117, 371, 126, 404, 421, 385,
	413, 359, 367, 109, 365, 160, 147, 183, 393, 148,
	158, 129, 175, 154, 182, 193, 194, 173, 191, 162,
	99, 143, 89, 152, 159, 0, 108, 0, 92, 172,
	181, 105, 163, 95, 179, 169, 170, 135, 121, 122,
	165, 93, 94, 0, 157, 112, 151, 116, 111, 145,
	176, 177, 110, 202, 100, 189, 190, 97, 101, 188,
	142, 187, 174, 180, 136, 133, 96, 178, 134, 132,
	124, 0, 114, 118, 149, 131, 150, 119, 139, 138,
	140, 0, 144, 0, 340, 0, 168, 185, 203, 204,
	355, 416, 195, 196, 197, 198, 0, 0, 0, 141,
	102, 120, 164, 123, 130, 156, 201, 400, 161, 106,
	184, 166, 351, 354, 349, 350, 389, 390, 425, 426,
	427, 407, 346, 0, 352, 353, 0, 411, 392, 90,
	98, 127, 199, 200, 0, 155, 115, 186, 0, 103,
	420, 410, 0, 380, 422, 357, 372, 430, 373, 374,
	402, 343, 388, 146, 369, 91, 360, 338, 366, 339,
	358, 382, 113, 356, 412, 391, 125, 428, 128, 396,
	0, 167, 137, 0, 0, 384, 414, 386, 408, 379,
	403, 348, 395, 423, 370, 399, 424, 0, 0, 0,
	334, 0, 858, 859, 0, 0, 0, 0, 0, 104,
	0, 398, 419, 368, 401, 337, 397, 0, 341, 344,
	429, 417, 363, 364, 0, 0, 0, 0, 0, 0,
	0, 383, 387, 405, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 361, 0, 394, 0, 0, 0, 345,
	342, 0, 381, 0, 0, 0, 347, 0, 362, 406,
	0, 336, 409, 415, 378, 192, 418, 376, 375, 153,
	0, 107, 0, 171, 117, 371, 126, 404, 421, 385,
	413, 359, 367, 109, 365, 160, 147, 183, 393, 148,
	158, 129, 175, 154, 182, 193, 194, 173, 191, 162,
	99, 143, 89, 152, 159, 0, 108, 0, 92, 172,
	181, 105, 163, 95, 179, 169, 170, 135, 121, 122,
	165, 93, 94, 0, 157, 112, 151, 116, 111, 145,
	176, 177, 110, 202, 100, 189, 190, 97, 101, 188,
	142, 187, 174, 180, 136, 133, 96, 178, 134, 132,
	124, 0, 114, 118, 149, 131, 150, 119, 139, 138,
	140, 0, 144, 0, 340, 0, 168, 185, 203, 204,
	355, 416, 195, 196, 197, 198, 0, 0, 0, 141,
	102, 120, 164, 123, 130, 156, 201, 400, 161, 106,
	184, 166, 351, 354, 349, 350, 389, 390, 425, 426,
	427, 407, 346, 0, 352, 353, 0, 411, 392, 90,
	98, 127, 199, 200, 0, 155, 115, 186, 0, 103,
	420, 410, 0, 380, 422, 357, 372, 430, 373, 374,
	402, 343, 388, 146, 369, 91, 360, 338, 366, 339,
	358, 382, 113, 356, 412, 391, 125, 428, 128, 396,
	0, 167, 137, 0, 0, 384, 414, 386, 408, 379,
	403, 348, 395, 423, 370, 399, 424, 0, 0, 0,
	334, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 398, 419, 368, 401, 337, 397, 0, 341, 344,
	429, 417, 363, 364, 0, 0, 0, 0, 0, 0,
	0, 383, 387, 405, 377, 0, 0, 0, 0, 0,
	0, 1134, 0, 361, 0, 394, 0, 0, 0, 345,
	342, 0, 381, 0, 0, 0, 347, 0, 362, 406,
	0, 336, 409, 415, 378, 192, 418, 376, 375, 153,
	0, 107, 0, 171, 117, 371, 126, 404, 421, 385,
	413, 359, 367, 109, 365, 160, 147, 183, 393, 148,
	158, 129, 175, 154, 182, 193, 194, 173, 191, 162,
	99, 143, 89, 152, 159, 0, 108, 0, 92, 172,
	181, 105, 163, 95, 179, 169, 170, 135, 121, 122,
	165, 93, 94, 0, 157, 112, 151, 116, 111, 145,
	176, 177, 110, 202, 100, 189, 190, 97, 101, 188,
	142, 187, 174, 180, 136, 133, 96, 178, 134, 132,
	124, 0, 114, 118, 149, 131, 150, 119, 139, 138,
	140, 0, 144, 0, 340, 0, 168, 185, 203, 204,
	355, 416, 195, 196, 197, 198, 0, 0, 0, 141,
	102, 120, 164, 123, 130, 156, 201, 400, 161, 106,
	184, 166, 351, 354, 349, 350, 389, 390, 425, 426,
	427, 407, 346, 0, 352, 353, 0, 411, 392, 90,
	98, 127, 199, 200, 0, 155, 115, 186, 0, 103,
	420, 410, 0, 380, 422, 357, 372, 430, 373, 374,
	402, 343, 388, 146, 369, 91, 360, 338, 366, 339,
	358, 382, 113, 356, 412, 391, 125, 428, 128, 396,
	0, 167, 137, 0, 0, 384, 414, 386, 408, 379,
	403, 348, 395, 423, 370, 399, 424, 50, 0, 0,
	334, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 398, 419, 368, 401, 337, 397, 0, 341, 344,
	429, 417, 363, 364, 0, 0, 0, 0, 0, 0,
	0, 383, 387, 405, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 361, 0, 394, 0, 0, 0, 345,
	342, 0, 381, 0, 0, 0, 347, 0, 362, 406,
	0, 336, 409, 415, 378, 192, 418, 376, 375, 153,
	0, 107, 0, 171, 117, 371, 126, 404, 421, 385,
	413, 359, 367, 109, 365, 160, 147, 183, 393, 148,
	158, 129, 175, 154, 182, 193, 194, 173, 191, 162,
	99, 143, 89, 152, 159, 0, 108, 0, 92, 172,
	181, 105, 163, 95, 179, 169, 170, 135, 121, 122,
	165, 93, 94, 0, 157, 112, 151, 116, 111, 145,
	176, 177, 110, 202, 100, 189, 190, 97, 101, 188,
	142, 187, 174, 180, 136, 133, 96, 178, 134, 132,
	124, 0, 114, 118, 149, 131, 150, 119, 139, 138,
	140, 0, 144, 0, 340, 0, 168, 185, 203, 204,
	355, 416, 195, 196, 197, 198, 0, 0, 0, 141,
	102, 120, 164, 123, 130, 156, 201, 400, 161, 106,
	184, 166, 351, 354, 349, 350, 389, 390, 425, 426,
	427, 407, 346, 0, 352, 353, 0, 411, 392, 90,
	98, 127, 199, 200, 0, 155, 115, 186, 0, 103,
	420, 410, 0, 380, 422, 357, 372, 430, 373, 374,
	402, 343, 388, 146, 369, 91, 360, 338, 366, 339,
	358, 382, 113, 356, 412, 391, 125, 428, 128, 396,
	0, 167, 137, 0, 0, 384, 414, 386, 408, 379,
	403, 348, 395, 423, 370, 399, 424, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 398, 419, 368, 401, 337, 397, 0, 341, 344,
	429, 417, 363, 364, 0, 0, 0, 0, 0, 0,
	0, 383, 387, 405, 377, 0, 0, 0, 0, 0,
	0, 748, 0, 361, 0, 394, 0, 0, 0, 345,
	342, 0, 381, 0, 0, 0, 347, 0, 362, 406,
	0, 336, 409, 415, 378, 192, 418, 376, 375, 153,
	0, 107, 0, 171, 117, 371, 126, 404, 421, 385,
	413, 359, 367, 109, 365, 160, 147, 183, 393, 148,
	158, 129, 175, 154, 182, 193, 194, 173, 191, 162,
	99, 143, 89, 152, 159, 0, 108, 0, 92, 172,
	181, 105, 163, 95, 179, 169, 170, 135, 121, 122,
	165, 93, 94, 0, 157, 112, 151, 116, 111, 145,
	176, 177, 110, 202, 100, 189, 190, 97, 101, 188,
	142, 187, 174, 180, 136, 133, 96, 178, 134, 132,
	124, 0, 114, 118, 149, 131, 150, 119, 139, 138,
	140, 0, 144, 0, 340, 0, 168, 185, 203, 204,
	355, 416, 195, 196, 197, 198, 0, 0, 0, 141,
	102, 120, 164, 123, 130, 156, 201, 400, 161, 106,
	184, 166, 351, 354, 349, 350, 389, 390, 425, 426,
	427, 407, 346, 0, 352, 353, 0, 411, 392, 90,
	98, 127, 199, 200, 0, 155, 115, 186, 0, 103,
	420, 410, 0, 380, 422, 357, 372, 430, 373, 374,
	402, 343, 388, 146, 369, 91, 360, 338, 366, 339,
	358, 382, 113, 356, 412, 391, 125, 428, 128, 396,
	0, 167, 137, 0, 0, 384, 414, 386, 408, 379,
	403, 348, 395, 423, 370, 399, 424, 0, 0, 0,
	334, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 398, 419, 368, 401, 337, 397, 0, 341, 344,
	429, 417, 363, 364, 0, 0, 0, 0, 0, 0,
	0, 383, 387, 405, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 361, 0, 394, 0, 0, 0, 345,
	342, 0, 381, 0, 0, 0, 347, 0, 362, 406,
	0, 336, 409, 415, 378, 192, 418, 376, 375, 153,
	0, 107, 0, 171, 117, 371, 126, 404, 421, 385,
	413, 359, 367, 109, 365, 160, 147, 183, 393, 148,
	158, 129, 175, 154, 182, 193, 194, 173, 191, 162,
	99, 143, 89, 152, 159, 0, 108, 0, 92, 172,
	181, 105, 163, 95, 179, 169, 170, 135, 121, 122,
	165, 93, 94, 0, 157, 112, 151, 116, 111, 145,
	176, 177, 110, 202, 100, 189, 190, 97, 101, 188,
	142, 187, 174, 180, 136, 133, 96, 178, 134, 132,
	124, 0, 114, 118, 149, 131, 150, 119, 139, 138,
	140, 0, 144, 0, 340, 0, 168, 185, 203, 204,
	355, 416, 195, 196, 197, 198, 0, 0, 0, 141,
	102, 120, 164, 123, 130, 156, 201, 400, 161, 106,
	184, 166, 351, 354, 349, 350, 389, 390, 425, 426,
	427, 407, 346, 0, 352, 353, 0, 411, 392, 90,
	98, 127, 199, 200, 0, 155, 115, 186, 0, 103,
	420, 410, 0, 380, 422, 357, 372, 430, 373, 374,
	402, 343, 388, 146, 369, 91, 360, 338, 366, 339,
	358, 382, 113, 356, 412, 391, 125, 428, 128, 396,
	0, 167, 137, 0, 0, 384, 414, 386, 408, 379,
	403, 348, 395, 423, 370, 399, 424, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 398, 419, 368, 401, 337, 397, 0, 341, 344,
	429, 417, 363, 364, 0, 0, 0, 0, 0, 0,
	0, 383, 387, 405, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 361, 0, 394, 0, 0, 0, 345,
	342, 0, 381, 0, 0, 0, 347, 0, 362, 406,
	0, 336, 409, 415, 378, 192, 418, 376, 375, 153,
	0, 107, 0, 171, 117, 371, 126, 404, 421, 385,
	413, 359, 367, 109, 365, 160, 147, 183, 393, 148,
	158, 129, 175, 154, 182, 193, 194, 173, 191, 162,
	99, 143, 89, 152, 159, 0, 108, 0, 92, 172,
	181, 105, 163, 95, 179, 169, 170, 135, 121, 122,
	165, 93, 94, 0, 157, 112, 151, 116, 111, 145,
	176, 177, 110, 202, 100, 189, 190, 97, 101, 188,
	142, 187, 174, 180, 136, 133, 96, 178, 134, 132,
	124, 0, 114, 118, 149, 131, 150, 119, 139, 138,
	140, 0, 144, 0, 340, 0, 168, 185, 203, 204,
	355, 416, 195, 196, 197, 198, 0, 0, 0, 141,
	102, 120, 164, 123, 130, 156, 201, 400, 161, 106,
	184, 166, 351, 354, 349, 350, 389, 390, 425, 426,
	427, 407, 346, 0, 352, 353, 0, 411, 392, 90,
	98, 127, 199, 200, 0, 155, 115, 186, 0, 103,
	420, 410, 0, 380, 422, 357, 372, 430, 373, 374,
	402, 343, 388, 146, 369, 91, 360, 338, 366, 339,
	358, 382, 113, 356, 412, 391, 125, 428, 128, 396,
	0, 167, 137, 0, 0, 384, 414, 386, 408, 379,
	403, 348, 395, 423, 370, 399, 424, 0, 0, 0,
	334, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 398, 419, 368, 401, 337, 397, 0, 341, 344,
	429, 417, 363, 364, 0, 0, 0, 0, 0, 0,
	0, 383, 387, 405, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 361, 0, 394, 0, 0, 0, 345,
	342, 0, 381, 0, 0, 0, 347, 0, 362, 406,
	0, 336, 409, 415, 378, 192, 418, 376, 375, 153,
	0, 107, 0, 171, 117, 371, 126, 404, 421, 385,
	413, 359, 367, 109, 365, 160, 147, 183, 393, 148,
	158, 129, 175, 154, 182, 193, 194, 173, 191, 162,
	99, 143, 89, 152, 159, 0, 108, 0, 92, 172,
	181, 105, 163, 95, 179, 169, 170, 135, 121, 122,
	165, 93, 94, 0, 157, 112, 151, 116, 111, 145,
	176, 177, 110, 202, 100, 189, 190, 97, 332, 188,
	142, 187, 174, 180, 136, 133, 96, 178, 134, 132,
	124, 0, 114, 118, 149, 131, 150, 119, 139, 138,
	140, 0, 144, 0, 340, 0, 168, 185, 203, 204,
	355, 416, 195, 196, 197, 198, 0, 0, 0, 333,
	331, 120, 164, 123, 130, 156, 201, 400, 161, 106,
	184, 166, 351, 354, 349, 350, 389, 390, 425, 426,
	427, 407, 346, 0, 352, 353, 0, 411, 392, 90,
	98, 127, 199, 200, 0, 155, 115, 186, 0, 103,
	420, 410, 0, 380, 422, 357, 372, 430, 373, 374,
	402, 343, 388, 146, 369, 91, 360, 338, 366, 339,
	358, 382, 113, 356, 412, 391, 125, 428, 128, 396,
	0, 167, 137, 0, 0, 384, 414, 386, 408, 379,
	403, 348, 395, 423, 370, 399, 424, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 398, 419, 368, 401, 337, 397, 0, 341, 344,
	429, 417, 363, 364, 0, 0, 0, 0, 0, 0,
	0, 383, 387, 405, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 361, 0, 394, 0, 0, 0, 345,
	342, 0, 381, 0, 0, 0, 347, 0, 362, 406,
	0, 336, 409, 415, 378, 192, 418, 376, 375, 153,
	0, 107, 0, 171, 117, 371, 126, 404, 421, 385,
	413, 359, 367, 109, 365, 160, 147, 183, 393, 148,
	158, 129, 175, 154, 182, 193, 194, 173, 191, 162,
	99, 143, 89, 152, 159, 0, 108, 0, 92, 172,
	181, 105, 163, 95, 179, 169, 170, 135, 121, 122,
	165, 93, 94, 0, 157, 112, 151, 116, 111, 145,
	176, 177, 110, 202, 100, 189, 190, 97, 101, 188,
	142, 187, 174, 180, 136, 133, 96, 178, 134, 132,
	124, 0, 114, 118, 149, 131, 150, 119, 139, 138,
	140, 0, 144, 0, 340, 0, 168, 185, 203, 204,
	355, 416, 195, 196, 197, 198, 0, 0, 0, 141,
	102, 120, 164, 123, 130, 156, 201, 400, 161, 106,
	184, 166, 351, 354, 349, 350, 389, 390, 425, 426,
	427, 407, 346, 0, 352, 353, 0, 411, 392, 90,
	98, 127, 199, 200, 0, 155, 115, 186, 0, 103,
	420, 410, 0, 380, 422, 357, 372, 430, 373, 374,
	402, 343, 388, 146, 369, 91, 360, 338, 366, 339,
	358, 382, 113, 356, 412, 391, 125, 428, 128, 396,
	0, 167, 137, 0, 0, 384, 414, 386, 408, 379,
	403, 348, 395, 423, 370, 399, 424, 0, 0, 0,
	334, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 398, 419, 368, 401, 337, 397, 0, 341, 344,
	429, 417, 363, 364, 0, 0, 0, 0, 0, 0,
	0, 383, 387, 405, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 361, 0, 394, 0, 0, 0, 345,
	342, 0, 381, 0, 0, 0, 347, 0, 362, 406,
	0, 336, 409, 415, 378, 192, 418, 376, 375, 153,
	0, 107, 0, 171, 117, 371, 126, 404, 421, 385,
	413, 359, 367, 109, 365, 160, 147, 183, 393, 148,
	158, 129, 175, 154, 182, 193, 194, 173, 191, 162,
	99, 143, 89, 152, 159, 0, 108, 0, 92, 172,
	627, 105, 163, 95, 179, 169, 170, 135, 121, 122,
	165, 93, 94, 0, 157, 112, 151, 116, 111, 145,
	176, 177, 110, 202, 100, 189, 190, 97, 332, 188,
	142, 187, 174, 180, 136, 133, 96, 178, 134, 132,
	124, 0, 114, 118, 149, 131, 150, 119, 139, 138,
	140, 0, 144, 0, 340, 0, 168, 185, 203, 204,
	355, 416, 195, 196, 197, 198, 0, 0, 0, 333,
	331, 120, 164, 123, 130, 156, 201, 400, 161, 106,
	184, 166, 351, 354, 349, 350, 389, 390, 425, 426,
	427, 407, 346, 0, 352, 353, 0, 411, 392, 90,
	98, 127, 199, 200, 0, 155, 115, 186, 0, 103,
	420, 410, 0, 380, 422, 357, 372, 430, 373, 374,
	402, 343, 388, 146, 369, 91, 360, 338, 366, 339,
	358, 382, 113, 356, 412, 391, 125, 428, 128, 396,
	0, 167, 137, 0, 0, 384, 414, 386, 408, 379,
	403, 348, 395, 423, 370, 399, 424, 0, 0, 0,
	334, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 398, 419, 368, 401, 337, 397, 0, 341, 344,
	429, 417, 363, 364, 0, 0, 0, 0, 0, 0,
	0, 383, 387, 405, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 361, 0, 394, 0, 0, 0, 345,
	342, 0, 381, 0, 0, 0, 347, 0, 362, 406,
	0, 336, 409, 415, 378, 192, 418, 376, 375, 153,
	0, 107, 0, 171, 117, 371, 126, 404, 421, 385,
	413, 359, 367, 109, 365, 160, 147, 183, 393, 148,
	158, 129, 175, 154, 182, 193, 194, 173, 191, 162,
	99, 143, 89, 152, 159, 0, 108, 0, 92, 172,
	323, 105, 163, 95, 179, 169, 170, 135, 121, 122,
	165, 93, 94, 0, 157, 112, 151, 116, 111, 145,
	176, 177, 110, 202, 100, 189, 190, 97, 332, 188,
	142, 187, 174, 180, 136, 133, 96, 178, 134, 132,
	124, 0, 114, 118, 149, 131, 150, 119, 139, 138,
	140, 0, 144, 0, 340, 0, 168, 185, 203, 204,
	355, 416, 195, 196, 197, 198, 0, 0, 0, 333,
	331, 326, 325, 123, 130, 156, 201, 400, 161, 106,
	184, 166, 351, 354, 349, 350, 389, 390, 425, 426,
	427, 407, 346, 0, 352, 353, 0, 411, 392, 90,
	98, 127, 199, 200, 0, 155, 115, 186, 146, 103,
	91, 785, 0, 256, 0, 0, 0, 113, 253, 0,
	0, 125, 295, 128, 0, 0, 167, 137, 0, 0,
	0, 0, 286, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 254, 274, 273, 276, 277,
	278, 279, 0, 0, 104, 275, 280, 281, 282, 0,
	0, 251, 267, 0, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 247, 0, 0, 0,
	307, 0, 266, 0, 0, 262, 263, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 305, 153, 0, 107, 0, 171, 117,
	0, 126, 0, 0, 0, 0, 0, 0, 109, 0,
	160, 147, 183, 0, 148, 158, 129, 175, 154, 182,
	193, 194, 173, 191, 162, 99, 143, 89, 152, 159,
	0, 108, 0, 92, 172, 181, 105, 163, 95, 179,
	169, 170, 135, 121, 122, 165, 93, 94, 0, 157,
	112, 151, 116, 111, 145, 176, 177, 110, 202, 100,
	189, 190, 97, 101, 188, 142, 187, 174, 180, 136,
	133, 96, 178, 134, 132, 124, 0, 114, 118, 149,
	131, 150, 119, 139, 138, 140, 0, 144, 0, 0,
	0, 168, 185, 203, 204, 0, 0, 195, 196, 197,
	198, 0, 0, 0, 141, 102, 120, 164, 123, 130,
	156, 201, 0, 161, 106, 184, 166, 296, 306, 302,
	303, 300, 301, 299, 298, 297, 308, 288, 289, 290,
	291, 293, 0, 292, 90, 98, 127, 199, 200, 0,
	155, 115, 186, 304, 103, 146, 0, 91, 0, 0,
	256, 0, 0, 0, 113, 253, 0, 0, 125, 295,
	128, 0, 0, 167, 137, 0, 0, 0, 0, 286,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 477, 254, 274, 273, 276, 277, 278, 279, 0,
	0, 104, 275, 280, 281, 282, 0, 0, 251, 267,
	0, 294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 0, 0, 0, 0, 307, 0, 266,
	0, 0, 262, 263, 268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 0, 0,
	305, 153, 0, 107, 0, 171, 117, 0, 126, 0,
	0, 0, 0, 0, 0, 109, 0, 160, 147, 183,
	0, 148, 158, 129, 175, 154, 182, 193, 194, 173,
	191, 162, 99, 143, 89, 152, 159, 0, 108, 0,
	92, 172, 181, 105, 163, 95, 179, 169, 170, 135,
	121, 122, 165, 93, 94, 0, 157, 112, 151, 116,
	111, 145, 176, 177, 110, 202, 100, 189, 190, 97,
	101, 188, 142, 187, 174, 180, 136, 133, 96, 178,
	134, 132, 124, 0, 114, 118, 149, 131, 150, 119,
	139, 138, 140, 0, 144, 0, 0, 0, 168, 185,
	203, 204, 0, 0, 195, 196, 197, 198, 0, 0,
	0, 141, 102, 120, 164, 123, 130, 156, 201, 0,
	161, 106, 184, 166, 296, 306, 302, 303, 300, 301,
	299, 298, 297, 308, 288, 289, 290, 291, 293, 0,
	292, 90, 98, 127, 199, 200, 0, 155, 115, 186,
	304, 103, 146, 0, 91, 0, 0, 256, 0, 0,
	0, 113, 253, 0, 0, 125, 295, 128, 0, 0,
	167, 137, 0, 0, 0, 0, 286, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 254,
	274, 273, 276, 277, 278, 279, 0, 0, 104, 275,
	280, 281, 282, 0, 0, 251, 267, 0, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	247, 0, 0, 0, 307, 0, 266, 0, 0, 262,
	263, 268, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 305, 153, 0,
	107, 0, 171, 117, 0, 126, 0, 0, 0, 0,
	0, 0, 109, 0, 160, 147, 183, 0, 148, 158,
	129, 175, 154, 182, 193, 194, 173, 191, 162, 99,
	143, 89, 152, 159, 0, 108, 0, 92, 172, 181,
	105, 163, 95, 179, 169, 170, 135, 121, 122, 165,
	93, 94, 0, 157, 112, 151, 116, 111, 145, 176,
	177, 110, 202, 100, 189, 190, 97, 101, 188, 142,
	187, 174, 180, 136, 133, 96, 178, 134, 132, 124,
	0, 114, 118, 149, 131, 150, 119, 139, 138, 140,
	0, 144, 0, 0, 0, 168, 185, 203, 204, 0,
	0, 195, 196, 197, 198, 0, 0, 0, 141, 102,
	120, 164, 123, 130, 156, 201, 0, 161, 106, 184,
	166, 296, 306, 302, 303, 300, 301, 299, 298, 297,
	308, 288, 289, 290, 291, 293, 0, 292, 90, 98,
	127, 199, 200, 0, 155, 115, 186, 304, 103, 146,
	0, 91, 0, 0, 256, 0, 0, 0, 113, 253,
	0, 0, 125, 295, 128, 0, 0, 167, 137, 0,
	0, 0, 0, 286, 287, 0, 0, 0, 0, 0,
	0, 849, 0, 50, 0, 0, 254, 274, 273, 276,
	277, 278, 279, 0, 0, 104, 275, 280, 281, 282,
	0, 0, 251, 267, 0, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 0, 0, 0,
	0, 307, 0, 266, 0, 0, 262, 263, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 305, 153, 0, 107, 0, 171,
	117, 0, 126, 0, 0, 0, 0, 0, 0, 109,
	0, 160, 147, 183, 0, 148, 158, 129, 175, 154,
	182, 193, 194, 173, 191, 162, 99, 143, 89, 152,
	159, 0, 108, 0, 92, 172, 181, 105, 163, 95,
	179, 169, 170, 135, 121, 122, 165, 93, 94, 0,
	157, 112, 151, 116, 111, 145, 176, 177, 110, 202,
	100, 189, 190, 97, 101, 188, 142, 187, 174, 180,
	136, 133, 96, 178, 134, 132, 124, 0, 114, 118,
	149, 131, 150, 119, 139, 138, 140, 0, 144, 0,
	0, 0, 168, 185, 203, 204, 0, 0, 195, 196,
	197, 198, 0, 0, 0, 141, 102, 120, 164, 123,
	130, 156, 201, 0, 161, 106, 184, 166, 296, 306,
	302, 303, 300, 301, 299, 298, 297, 308, 288, 289,
	290, 291, 293, 0, 292, 90, 98, 127, 199, 200,
	23, 155, 115, 186, 304, 103, 0, 0, 0, 0,
	0, 0, 146, 0, 91, 0, 0, 256, 0, 0,
	0, 113, 253, 0, 0, 125, 295, 128, 0, 0,
	167, 137, 0, 0, 0, 0, 286, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 254,
	274, 273, 276, 277, 278, 279, 0, 0, 104, 275,
	280, 281, 282, 0, 0, 251, 267, 0, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	0, 0, 0, 0, 307, 0, 266, 0, 0, 262,
	263, 268, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 305, 153, 0,
	107, 0, 171, 117, 0, 126, 0, 0, 0, 0,
	0, 0, 109, 0, 160, 147, 183, 0, 148, 158,
	129, 175, 154, 182, 193, 194, 173, 191, 162, 99,
	143, 89, 152, 159, 0, 108, 0, 92, 172, 181,
	105, 163, 95, 179, 169, 170, 135, 121, 122, 165,
	93, 94, 0, 157, 112, 151, 116, 111, 145, 176,
	177, 110, 202, 100, 189, 190, 97, 101, 188, 142,
	187, 174, 180, 136, 133, 96, 178, 134, 132, 124,
	0, 114, 118, 149, 131, 150, 119, 139, 138, 140,
	0, 144, 0, 0, 0, 168, 185, 203, 204, 0,
	0, 195, 196, 197, 198, 0, 0, 0, 141, 102,
	120, 164, 123, 130, 156, 201, 0, 161, 106, 184,
	166, 296, 306, 302, 303, 300, 301, 299, 298, 297,
	308, 288, 289, 290, 291, 293, 0, 292, 90, 98,
	127, 199, 200, 0, 155, 115, 186, 304, 103, 146,
	0, 91, 0, 0, 256, 0, 0, 0, 113, 253,
	0, 0, 125, 295, 128, 0, 0, 167, 137, 0,
	0, 0, 0, 286, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 254, 274, 273, 276,
	277, 278, 279, 0, 0, 104, 275, 280, 281, 282,
	0, 0, 251, 267, 0, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 0, 0, 0,
	0, 307, 0, 266, 0, 0, 262, 263, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 305, 153, 0, 107, 0, 171,
	117, 0, 126, 0, 0, 0, 0, 0, 0, 109,
	0, 160, 147, 183, 0, 148, 158, 129, 175, 154,
	182, 193, 194, 173, 191, 162, 99, 143, 89, 152,
	159, 0, 108, 0, 92, 172, 181, 105, 163, 95,
	179, 169, 170, 135, 121, 122, 165, 93, 94, 0,
	157, 112, 151, 116, 111, 145, 176, 177, 110, 202,
	100, 189, 190, 97, 101, 188, 142, 187, 174, 180,
	136, 133, 96, 178, 134, 132, 124, 0, 114, 118,
	149, 131, 150, 119, 139, 138, 140, 0, 144, 0,
	0, 0, 168, 185, 203, 204, 0, 0, 195, 196,
	197, 198, 0, 0, 0, 141, 102, 120, 164, 123,
	130, 156, 201, 0, 161, 106, 184, 166, 296, 306,
	302, 303, 300, 301, 299, 298, 297, 308, 288, 289,
	290, 291, 293, 0, 292, 90, 98, 127, 199, 200,
	0, 155, 115, 186, 304, 103, 146, 0, 91, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 125,
	295, 128, 0, 0, 167, 137, 0, 0, 0, 0,
	286, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 254, 274, 273, 276, 277, 278, 279,
	0, 0, 104, 275, 280, 281, 282, 0, 0, 0,
	267, 0, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 0, 0, 0, 0, 307, 0,
	266, 0, 0, 262, 263, 268, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 305, 153, 0, 107, 0, 171, 117, 0, 126,
	0, 0, 0, 0, 0, 0, 109, 0, 160, 147,
	183, 1466, 148, 158, 129, 175, 154, 182, 193, 194,
	173, 191, 162, 99, 143, 89, 152, 159, 0, 108,
	0, 92, 172, 181, 105, 163, 95, 179, 169, 170,
	135, 121, 122, 165, 93, 94, 0, 157, 112, 151,
	116, 111, 145, 176, 177, 110, 202, 100, 189, 190,
	97, 101, 188, 142, 187, 174, 180, 136, 133, 96,
	178, 134, 132, 124, 0, 114, 118, 149, 131, 150,
	119, 139, 138, 140, 0, 144, 0, 0, 0, 168,
	185, 203, 204, 0, 0, 195, 196, 197, 198, 0,
	0, 0, 141, 102, 120, 164, 123, 130, 156, 201,
	0, 161, 106, 184, 166, 296, 306, 302, 303, 300,
	301, 299, 298, 297, 308, 288, 289, 290, 291, 293,
	0, 292, 90, 98, 127, 199, 200, 0, 155, 115,
	186, 304, 103, 146, 0, 91, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 125, 295, 128, 0,
	0, 167, 137, 0, 0, 0, 0, 286, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	254, 274, 273, 276, 277, 278, 279, 0, 0, 104,
	275, 280, 281, 282, 0, 0, 0, 267, 0, 294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 0, 0, 0, 0, 307, 0, 266, 0, 0,
	262, 263, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 305, 153,
	0, 107, 0, 171, 117, 0, 126, 0, 0, 0,
	0, 0, 0, 109, 0, 160, 147, 183, 0, 148,
	158, 129, 175, 154, 182, 193, 194, 173, 191, 162,
	99, 143, 89, 152, 159, 0, 108, 0, 92, 172,
	181, 105, 163, 95, 179, 169, 170, 135, 121, 122,
	165, 93, 94, 0, 157, 112, 151, 116, 111, 145,
	176, 177, 110, 202, 100, 189, 190, 97, 101, 188,
	142, 187, 174, 180, 136, 133, 96, 178, 134, 132,
	124, 0, 114, 118, 149, 131, 150, 119, 139, 138,
	140, 0, 144, 0, 0, 0, 168, 185, 203, 204,
	0, 0, 195, 196, 197, 198, 0, 0, 0, 141,
	102, 120, 164, 123, 130, 156, 201, 0, 161, 106,
	184, 166, 296, 306, 302, 303, 300, 301, 299, 298,
	297, 308, 288, 289, 290, 291, 293, 0, 292, 90,
	98, 127, 199, 200, 0, 155, 115, 186, 304, 103,
	146, 0, 91, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 125, 0, 128, 0, 0, 167, 137,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 511, 510, 520, 521, 513, 514, 515, 516,
	517, 518, 519, 512, 0, 0, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 153, 0, 107, 0,
	171, 117, 0, 126, 0, 0, 0, 0, 0, 0,
	109, 0, 160, 147, 183, 0, 148, 158, 129, 175,
	154, 182, 193, 194, 173, 191, 162, 99, 143, 89,
	152, 159, 0, 108, 0, 92, 172, 181, 105, 163,
	95, 179, 169, 170, 135, 121, 122, 165, 93, 94,
	0, 157, 112, 151, 116, 111, 145, 176, 177, 110,
	202, 100, 189, 190, 97, 101, 188, 142, 187, 174,
	180, 136, 133, 96, 178, 134, 132, 124, 0, 114,
	118, 149, 131, 150, 119, 139, 138, 140, 0, 144,
	0, 0, 0, 168, 185, 203, 204, 0, 0, 195,
	196, 197, 198, 0, 0, 0, 141, 102, 120, 164,
	123, 130, 156, 201, 0, 161, 106, 184, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 98, 127, 199,
	200, 0, 155, 115, 186, 523, 103, 146, 0, 91,
	0, 499, 0, 0, 0, 0, 113, 0, 0, 0,
	125, 0, 128, 0, 0, 167, 137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 334, 0, 501, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 496, 495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 153, 0, 107, 0, 171, 117, 0,
	126, 0, 0, 0, 0, 0, 0, 109, 0, 160,
	147, 183, 0, 148, 158, 129, 175, 154, 182, 193,
	194, 173, 191, 162, 99, 143, 89, 152, 159, 0,
	108, 0, 92, 172, 181, 105, 163, 95, 179, 169,
	170, 135, 121, 122, 165, 93, 94, 0, 157, 112,
	151, 116, 111, 145, 176, 177, 110, 202, 100, 189,
	190, 97, 101, 188, 142, 187, 174, 180, 136, 133,
	96, 178, 134, 132, 124, 0, 114, 118, 149, 131,
	150, 119, 139, 138, 140, 0, 144, 0, 0, 0,
	168, 185, 203, 204, 0, 0, 195, 196, 197, 198,
	0, 0, 0, 141, 102, 120, 164, 123, 130, 156,
	201, 0, 161, 106, 184, 166, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 98, 127, 199, 200, 0, 155,
	115, 186, 146, 103, 91, 0, 616, 0, 0, 0,
	0, 113, 0, 0, 0, 125, 0, 128, 0, 0,
	167, 137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 618, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 153, 0,
	107, 0, 171, 117, 0, 126, 0, 0, 0, 0,
	0, 0, 109, 0, 160, 147, 183, 0, 148, 158,
	129, 175, 154, 182, 193, 194, 173, 191, 162, 99,
	143, 89, 152, 159, 0, 108, 0, 92, 172, 181,
	105, 163, 95, 179, 169, 170, 135, 121, 122, 165,
	93, 94, 0, 157, 112, 151, 116, 111, 145, 176,
	177, 110, 202, 100, 189, 190, 97, 101, 188, 142,
	187, 174, 180, 136, 133, 96, 178, 134, 132, 124,
	0, 114, 118, 149, 131, 150, 119, 139, 138, 140,
	0, 144, 0, 0, 0, 168, 185, 203, 204, 0,
	0, 195, 196, 197, 198, 0, 0, 0, 141, 102,
	120, 164, 123, 130, 156, 201, 0, 161, 106, 184,
	166, 0, 23, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 0, 91, 0, 90, 98,
	127, 199, 200, 113, 155, 115, 186, 125, 103, 128,
	0, 0, 167, 137, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	153, 0, 107, 0, 171, 117, 0, 126, 0, 0,
	0, 0, 0, 0, 109, 0, 160, 147, 183, 0,
	148, 158, 129, 175, 154, 182, 193, 194, 173, 191,
	162, 99, 143, 89, 152, 159, 0, 108, 0, 92,
	172, 181, 105, 163, 95, 179, 169, 170, 135, 121,
	122, 165, 93, 94, 0, 157, 112, 151, 116, 111,
	145, 176, 177, 110, 202, 100, 189, 190, 97, 101,
	188, 142, 187, 174, 180, 136, 133, 96, 178, 134,
	132, 124, 0, 114, 118, 149, 131, 150, 119, 139,
	138, 140, 0, 144, 0, 0, 0, 168, 185, 203,
	204, 0, 0, 195, 196, 197, 198, 0, 0, 0,
	141, 102, 120, 164, 123, 130, 156, 201, 0, 161,
	106, 184, 166, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 91, 0,
	90, 98, 127, 199, 200, 113, 155, 115, 186, 125,
	103, 128, 0, 0, 167, 137, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 153, 0, 107, 0, 171, 117, 0, 126,
	0, 0, 0, 0, 0, 0, 109, 0, 160, 147,
	183, 0, 148, 158, 129, 175, 154, 182, 193, 194,
	173, 191, 162, 99, 143, 89, 152, 159, 0, 108,
	0, 92, 172, 181, 105, 163, 95, 179, 169, 170,
	135, 121, 122, 165, 93, 94, 0, 157, 112, 151,
	116, 111, 145, 176, 177, 110, 202, 100, 189, 190,
	97, 101, 188, 142, 187, 174, 180, 136, 133, 96,
	178, 134, 132, 124, 0, 114, 118, 149, 131, 150,
	119, 139, 138, 140, 0, 144, 0, 0, 0, 168,
	185, 203, 204, 0, 0, 195, 196, 197, 198, 0,
	0, 0, 141, 102, 120, 164, 123, 130, 156, 201,
	0, 161, 106, 184, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 0,
	91, 0, 90, 98, 127, 199, 200, 113, 155, 115,
	186, 125, 103, 128, 0, 0, 167, 137, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 334, 0, 0, 735, 0,
	0, 736, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 153, 0, 107, 0, 171, 117,
	0, 126, 0, 0, 0, 0, 0, 0, 109, 0,
	160, 147, 183, 0, 148, 158, 129, 175, 154, 182,
	193, 194, 173, 191, 162, 99, 143, 89, 152, 159,
	0, 108, 0, 92, 172, 181, 105, 163, 95, 179,
	169, 170, 135, 121, 122, 165, 93, 94, 0, 157,
	112, 151, 116, 111, 145, 176, 177, 110, 202, 100,
	189, 190, 97, 101, 188, 142, 187, 174, 180, 136,
	133, 96, 178, 134, 132, 124, 0, 114, 118, 149,
	131, 150, 119, 139, 138, 140, 0, 144, 0, 0,
	0, 168, 185, 203, 204, 0, 0, 195, 196, 197,
	198, 0, 0, 0, 141, 102, 120, 164, 123, 130,
	156, 201, 0, 161, 106, 184, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 98, 127, 199, 200, 0,
	155, 115, 186, 146, 103, 91, 0, 0, 0, 0,
	0, 0, 113, 636, 0, 0, 125, 0, 128, 0,
	0, 167, 137, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	334, 0, 635, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 153,
	0, 107, 0, 171, 117, 0, 126, 0, 0, 0,
	0, 0, 0, 109, 0, 160, 147, 183, 0, 148,
	158, 129, 175, 154, 182, 193, 194, 173, 191, 162,
	99, 143, 89, 152, 159, 0, 108, 0, 92, 172,
	181, 105, 163, 95, 179, 169, 170, 135, 121, 122,
	165, 93, 94, 0, 157, 112, 151, 116, 111, 145,
	176, 177, 110, 202, 100, 189, 190, 97, 101, 188,
	142, 187, 174, 180, 136, 133, 96, 178, 134, 132,
	124, 0, 114, 118, 149, 131, 150, 119, 139, 138,
	140, 0, 144, 0, 0, 0, 168, 185, 203, 204,
	0, 0, 195, 196, 197, 198, 0, 0, 0, 141,
	102, 120, 164, 123, 130, 156, 201, 0, 161, 106,
	184, 166, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	98, 127, 199, 200, 0, 155, 115, 186, 146, 103,
	91, 0, 616, 0, 0, 0, 0, 113, 0, 0,
	0, 125, 0, 128, 0, 0, 167, 137, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 618, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 153, 0, 107, 0, 171, 117,
	0, 126, 0, 0, 0, 0, 0, 0, 109, 0,
	160, 147, 183, 0, 614, 158, 129, 175, 154, 182,
	193, 194, 173, 191, 162, 99, 143, 89, 152, 159,
	0, 108, 0, 92, 172, 181, 105, 163, 95, 179,
	169, 170, 135, 121, 122, 165, 93, 94, 0, 157,
	112, 151, 116, 111, 145, 176, 177, 110, 202, 100,
	189, 190, 97, 101, 188, 142, 187, 174, 180, 136,
	133, 96, 178, 134, 132, 124, 0, 114, 118, 149,
	131, 150, 119, 139, 138, 140, 0, 144, 0, 0,
	0, 168, 185, 203, 204, 0, 0, 195, 196, 197,
	198, 0, 0, 0, 141, 102, 120, 164, 123, 130,
	156, 201, 0, 161, 106, 184, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 0, 91, 0, 90, 98, 127, 199, 200, 113,
	155, 115, 186, 125, 103, 128, 0, 0, 167, 137,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 153, 0, 107, 0,
	171, 117, 0, 126, 0, 0, 0, 0, 0, 0,
	109, 0, 160, 147, 183, 0, 148, 158, 129, 175,
	154, 182, 193, 194, 173, 191, 162, 99, 143, 89,
	152, 159, 0, 108, 0, 92, 172, 181, 105, 163,
	95, 179, 169, 170, 135, 121, 122, 165, 93, 94,
	0, 157, 112, 151, 116, 111, 145, 176, 177, 110,
	202, 100, 189, 190, 97, 101, 188, 142, 187, 174,
	180, 136, 133, 96, 178, 134, 132, 124, 0, 114,
	118, 149, 131, 150, 119, 139, 138, 140, 0, 144,
	0, 0, 0, 168, 185, 203, 204, 0, 0, 195,
	196, 197, 198, 0, 0, 0, 141, 102, 120, 164,
	123, 130, 156, 201, 0, 161, 106, 184, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 0, 91, 0, 90, 98, 127, 199,
	200, 113, 155, 115, 186, 125, 103, 128, 0, 0,
	167, 137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 618, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 153, 0,
	107, 0, 171, 117, 0, 126, 0, 0, 0, 0,
	0, 0, 109, 0, 160, 147, 183, 0, 148, 158,
	129, 175, 154, 182, 193, 194, 173, 191, 162, 99,
	143, 89, 152, 159, 0, 108, 0, 92, 172, 181,
	105, 163, 95, 179, 169, 170, 135, 121, 122, 165,
	93, 94, 0, 157, 112, 151, 116, 111, 145, 176,
	177, 110, 202, 100, 189, 190, 97, 101, 188, 142,
	187, 174, 180, 136, 133, 96, 178, 134, 132, 124,
	0, 114, 118, 149, 131, 150, 119, 139, 138, 140,
	0, 144, 0, 0, 0, 168, 185, 203, 204, 0,
	0, 195, 196, 197, 198, 0, 0, 0, 141, 102,
	120, 164, 123, 130, 156, 201, 0, 161, 106, 184,
	166, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 0, 91, 0, 90, 98,
	127, 199, 200, 113, 155, 115, 186, 125, 103, 128,
	0, 0, 167, 137, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 501, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	153, 0, 107, 0, 171, 117, 0, 126, 0, 0,
	0, 0, 0, 0, 109, 0, 160, 147, 183, 0,
	148, 158, 129, 175, 154, 182, 193, 194, 173, 191,
	162, 99, 143, 89, 152, 159, 0, 108, 0, 92,
	172, 181, 105, 163, 95, 179, 169, 170, 135, 121,
	122, 165, 93, 94, 0, 157, 112, 151, 116, 111,
	145, 176, 177, 110, 202, 100, 189, 190, 97, 101,
	188, 142, 187, 174, 180, 136, 133, 96, 178, 134,
	132, 124, 0, 114, 118, 149, 131, 150, 119, 139,
	138, 140, 0, 144, 0, 0, 0, 168, 185, 203,
	204, 0, 0, 195, 196, 197, 198, 0, 0, 0,
	141, 102, 120, 164, 123, 130, 156, 201, 0, 161,
	106, 184, 166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 91, 0,
	90, 98, 127, 199, 200, 113, 155, 115, 186, 125,
	103, 128, 0, 0, 167, 137, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 153, 0, 107, 0, 171, 117, 0, 126,
	0, 0, 0, 0, 0, 0, 109, 0, 160, 147,
	183, 0, 148, 158, 129, 175, 154, 182, 193, 194,
	173, 191, 162, 99, 143, 89, 152, 159, 0, 108,
	0, 92, 172, 181, 105, 163, 95, 179, 169, 170,
	135, 121, 122, 165, 93, 94, 0, 157, 112, 151,
	116, 111, 145, 176, 177, 110, 202, 100, 189, 190,
	97, 101, 188, 142, 187, 174, 180, 136, 133, 96,
	178, 134, 132, 124, 0, 114, 118, 149, 131, 150,
	119, 139, 138, 140, 0, 144, 0, 0, 0, 168,
	185, 203, 204, 0, 0, 195, 196, 197, 198, 0,
	0, 0, 141, 102, 120, 164, 123, 130, 156, 201,
	695, 161, 106, 184, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 98, 127, 199, 200, 0, 155, 115,
	186, 146, 103, 91, 0, 0, 0, 0, 0, 594,
	113, 0, 0, 0, 125, 0, 128, 0, 0, 167,
	137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 0, 153, 0, 107,
	0, 171, 117, 0, 126, 0, 0, 0, 0, 0,
	0, 109, 0, 160, 147, 183, 0, 148, 158, 129,
	175, 154, 182, 193, 194, 173, 191, 162, 99, 143,
	89, 152, 159, 0, 108, 0, 92, 172, 181, 105,
	163, 95, 179, 169, 170, 135, 121, 122, 165, 93,
	94, 0, 157, 112, 151, 116, 111, 145, 176, 177,
	110, 202, 100, 189, 190, 97, 101, 188, 142, 187,
	174, 180, 136, 133, 96, 178, 134, 132, 124, 0,
	114, 118, 149, 131, 150, 119, 139, 138, 140, 0,
	144, 0, 0, 0, 168, 185, 203, 204, 0, 0,
	195, 196, 197, 198, 0, 0, 0, 141, 102, 120,
	164, 123, 130, 156, 201, 0, 161, 106, 184, 166,
	0, 0, 0, 0, 0, 0, 318, 0, 0, 0,
	0, 0, 0, 146, 0, 91, 0, 90, 98, 127,
	199, 200, 113, 155, 115, 186, 125, 103, 128, 0,
	0, 167, 137, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 153,
	0, 107, 0, 171, 117, 0, 126, 0, 0, 0,
	0, 0, 0, 109, 0, 160, 147, 183, 0, 148,
	158, 129, 175, 154, 182, 193, 194, 173, 191, 162,
	99, 143, 89, 152, 159, 0, 108, 0, 92, 172,
	181, 105, 163, 95, 179, 169, 170, 135, 121, 122,
	165, 93, 94, 0, 157, 112, 151, 116, 111, 145,
	176, 177, 110, 202, 100, 189, 190, 97, 101, 188,
	142, 187, 174, 180, 136, 133, 96, 178, 134, 132,
	124, 0, 114, 118, 149, 131, 150, 119, 139, 138,
	140, 0, 144, 0, 0, 0, 168, 185, 203, 204,
	0, 0, 195, 196, 197, 198, 0, 0, 0, 141,
	102, 120, 164, 123, 130, 156, 201, 0, 161, 106,
	184, 166, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 0, 91, 0, 90,
	98, 127, 199, 200, 113, 155, 115, 186, 125, 103,
	128, 0, 0, 167, 137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 192, 0, 0,
	0, 153, 0, 107, 0, 171, 117, 0, 126, 0,
	0, 0, 0, 0, 0, 109, 0, 160, 147, 183,
	0, 148, 158, 129, 175, 154, 182, 193, 194, 173,
	191, 162, 99, 143, 89, 152, 159, 0, 108, 0,
	92, 172, 181, 105, 163, 95, 179, 169, 170, 135,
	121, 122, 165, 93, 94, 0, 157, 112, 151, 116,
	111, 145, 176, 177, 110, 202, 100, 189, 190, 97,
	101, 188, 142, 187, 174, 180, 136, 133, 96, 178,
	134, 132, 124, 0, 114, 118, 149, 131, 150, 119,
	139, 138, 140, 0, 144, 0, 0, 0, 168, 185,
	203, 204, 0, 0, 195, 196, 197, 198, 0, 0,
	0, 141, 102, 120, 164, 123, 130, 156, 201, 0,
	161, 106, 184, 166, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 0, 91,
	0, 90, 98, 127, 199, 200, 113, 155, 115, 186,
	125, 103, 128, 0, 0, 167, 137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 153, 0, 107, 0, 171, 117, 0,
	126, 0, 0, 0, 0, 0, 0, 109, 0, 160,
	147, 183, 0, 148, 158, 129, 175, 154, 182, 193,
	194, 173, 191, 162, 99, 143, 89, 152, 159, 0,
	108, 0, 92, 172, 181, 105, 163, 95, 179, 169,
	170, 135, 121, 122, 165, 93, 94, 0, 157, 112,
	151, 116, 111, 145, 176, 177, 110, 202, 100, 189,
	190, 97, 101, 188, 142, 187, 174, 180, 136, 133,
	96, 178, 134, 132, 124, 0, 114, 118, 149, 131,
	150, 119, 139, 138, 140, 0, 144, 0, 0, 0,
	168, 185, 203, 204, 0, 0, 195, 196, 197, 198,
	0, 0, 0, 141, 102, 120, 164, 123, 130, 156,
	201, 0, 161, 106, 184, 166, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	0, 91, 0, 90, 98, 127, 199, 200, 113, 155,
	115, 186, 125, 103, 128, 0, 0, 167, 137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 0, 153, 0, 107, 0, 171,
	117, 0, 126, 0, 0, 0, 0, 0, 0, 109,
	0, 160, 147, 183, 0, 148, 158, 129, 175, 154,
	182, 193, 194, 173, 191, 162, 99, 143, 89, 152,
	159, 0, 108, 0, 92, 172, 181, 105, 163, 95,
	179, 169, 170, 135, 121, 122, 165, 93, 94, 0,
	157, 112, 151, 116, 111, 145, 176, 177, 110, 202,
	100, 189, 190, 97, 101, 188, 142, 187, 174, 180,
	136, 133, 96, 178, 134, 132, 124, 0, 114, 118,
	149, 131, 150, 119, 139, 138, 140, 0, 144, 0,
	0, 0, 168, 185, 203, 204, 0, 0, 195, 196,
	197, 198, 0, 0, 0, 141, 102, 120, 164, 123,
	130, 156, 201, 0, 161, 106, 184, 166, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 0, 91, 0, 90, 98, 127, 199, 200,
	113, 155, 115, 186, 125, 103, 128, 0, 0, 167,
	137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 0, 153, 0, 107,
	0, 171, 117, 0, 126, 0, 0, 0, 0, 0,
	0, 109, 0, 160, 147, 183, 0, 148, 158, 129,
	175, 154, 182, 193, 194, 173, 191, 162, 99, 143,
	89, 152, 159, 0, 108, 0, 92, 172, 181, 105,
	163, 95, 179, 169, 170, 135, 121, 122, 165, 93,
	94, 0, 157, 112, 151, 116, 111, 145, 176, 177,
	110, 202, 100, 189, 190, 97, 101, 188, 142, 187,
	174, 180, 136, 133, 96, 178, 134, 132, 124, 0,
	114, 118, 149, 131, 150, 119, 139, 138, 140, 0,
	144, 0, 0, 0, 168, 185, 203, 204, 0, 0,
	195, 196, 197, 198, 0, 0, 0, 141, 102, 120,
	164, 123, 130, 156, 201, 0, 161, 106, 184, 166,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 98, 127,
	199, 200, 0, 155, 115, 186, 0, 103,
}

var yyPact = [...]int{
	2182, -1000, -172, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1082, 1105, -1000, -1000, -1000, -1000, -1000, -1000, 869,
	195, 217, 262, 100, 11177, 261, 1892, 11661, -1000, 101,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 826, -1000, -1000,
	-1000, -1000, -1000, 1050, 1077, 888, 1044, 993, -1000, 6174,
	216, 9712, 10935, 5405, -1000, 713, 259, 238, 11419, 210,
	210, 11419, 210, -1000, -85, 252, 11661, -1000, 11661, 209,
	687, 209, 209, 209, 11661, -1000, 341, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11661, 670, 1016, 251, 3515,
	3515, 3515, 3515, 124, 3515, -11, 913, -1000, -1000, -1000,
	-1000, 3515, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 567, 1025, 6951, 6951, 1082, -1000, 826, -1000,
	-1000, -1000, 1019, -1000, -1000, 468, 1092, -1000, 7979, 340,
	-1000, 6951, 52, 827, -1000, -1000, 827, -1000, -1000, 329,
	-1000, -1000, 7465, 7465, 7465, 7465, 7465, 7465, 7465, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 827, -1000, 6694, 827, 827, 827, 827,
	827, 827, 827, 827, 6951, 827, 827, 827, 827, 827,
	827, 827, 827, 827, 1901, 827, 827, 827, 827, 10693,
	838, 980, -1000, -1000, -1000, 1038, 8718, 9470, 11661, 729,
	-1000, 815, 5135, -31, -1000, -1000, -1000, 426, 9215, -1000,
	-1000, -1000, 1014, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 744, -1000, 2365, 11419, 11661, 829, 654, 454, 653,
	912, 11661, -1000, 10438, 3515, 233, 11661, 1026, 911, 11661,
	642, 639, -1000, 4865, -1000, 3515, 3515, 3515, 3515, 3515,
	3515, 3515, 3515, -1000, -1000, -1000, -1000, -1000, -1000, 3515,
	3515, -1000, 10, -1000, 11661, -1000, -1000, -1000, -1000, 1100,
	304, 575, 338, 816, -1000, 479, 1050, 567, 993, 8960,
	928, -1000, -1000, 11661, -1000, 6951, 6951, 518, -1000, 10196,
	-1000, -1000, 3785, 380, 7465, 495, 396, 7465, 7465, 7465,
	7465, 7465, 7465, 7465, 7465, 7465, 7465, 7465, 7465, 7465,
	7465, 7465, 537, 1901, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 636, -1000, 826, 655, 655, 2, 2, 2,
	2, 2, 2, 7722, 5660, 567, 725, 407, 6694, 6174,
	6174, 6951, 6951, 11903, 11903, 6174, 1041, 434, 407, 11903,
	-1000, 567, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 67, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6174,
	6174, 6174, 6174, 149, 11661, -1000, 11903, 9712, 9712, 9712,
	9712, 9712, -1000, 955, 952, -1000, 948, 927, 959, 11661,
	-1000, 723, 8718, 298, 827, -1000, 9954, -1000, -1000, 149,
	766, 9712, 11661, -1000, -1000, 4595, 815, -31, 812, -1000,
	-23, -1, 6431, 368, -1000, -1000, -1000, -1000, 2975, 776,
	1085, -103, 28, -1000, -1000, -1000, -1000, 845, -1000, 845,
	203, 845, 845, 845, 61, 61, 61, 61, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 861, 856, -1000, 845, 845,
	845, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	854, 211, 854, 847, 847, 906, 1035, -139, 629, 3515,
	1023, 3515, 11661, -1000, 1796, 11661, -1000, 11661, -1000, -1000,
	11661, 3515, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 441, -1000, -1000,
	-1000, -1000, 932, 6951, 6951, 4325, 6951, -1000, -1000, -1000,
	1025, -1000, 1041, 1079, -1000, 1010, 1007, 6174, -1000, -1000,
	380, 410, -1000, -1000, 548, -1000, -1000, -1000, -1000, 332,
	827, -1000, 1739, -1000, -1000, -1000, -1000, 495, 7465, 7465,
	7465, 979, 1739, 1423, 692, 1676, 2, 201, 201, 0,
	0, 0, 0, 0, -2, -2, -1000, -1000, -1000, -1000,
	567, -1000, -1000, -1000, 567, 6174, 813, -1000, -1000, 6951,
	-1000, 567, 718, 718, 482, 489, 824, -1000, 296, 794,
	718, 6174, 435, -1000, 6951, 567, -1000, -1000, 718, 567,
	718, 718, 810, 827, -1000, 828, -1000, 419, 980, 878,
	908, 891, -1000, -1000, -1000, -1000, 949, -1000, 931, -1000,
	-1000, -1000, -1000, -1000, 258, 256, 246, 11419, -1000, 1087,
	9712, 808, -1000, -1000, 812, -31, -38, -1000, -1000, -1000,
	407, -1000, -1000, 616, 777, 2705, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 855, 904, 188, 177, 367, 248, 614,
	11419, -1000, -1000, -1000, 462, 285, 1099, -1000, 187, -1000,
	186, 555, 11661, -1000, -188, -1000, 24, -1000, -1000, 525,
	61, 61, 845, 61, -1000, -1000, 368, 996, 368, 368,
	368, 551, 551, -141, -141, -1000, -1000, 511, 854, -1000,
	-1000, -1000, 506, -1000, 11661, 11419, 826, -1000, 4055, -1000,
	-1000, -1000, -1000, -1000, 1029, -1000, 412, 995, 334, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	136, 265, -1000, 3515, -1000, 467, 11661, 11661, 973, 407,
	407, 293, -1000, -1000, 11661, -1000, -1000, -1000, -1000, 791,
	-1000, -1000, -1000, 3245, 6174, -1000, 979, 1739, 333, -1000,
	7465, 7465, -1000, -1000, 718, 6174, 407, -1000, -1000, -1000,
	668, 537, 668, 7465, 7465, 4325, 7465, 7465, -109, 780,
	430, -1000, 6951, 437, -1000, -1000, -1000, -1000, -1000, 902,
	11903, 827, -1000, 8476, 11419, 1082, 11903, 6951, 6951, -1000,
	-1000, 6951, 851, -1000, 6951, -1000, -1000, -1000, 827, 827,
	827, 694, -1000, 1082, 808, -1000, -1000, -1000, -26, -6,
	-1000, -1000, 2975, -1000, 2975, 11419, 1091, -1000, 605, 583,
	-1000, 576, -1000, -1000, 194, -1000, -1000, -166, -1000, -1000,
	-1000, 845, -1000, -1000, 827, -43, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 683, 368, 368, 61, 368, -1000, 386,
	-1000, -1000, -1000, 704, -1000, 702, -1000, 75, 72, -1000,
	768, -1000, 700, 798, 899, -1000, 765, -1000, 403, 1047,
	109, -1000, 175, -1000, 11419, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11419, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11661, -1000, -1000, -1000, -1000,
	-1000, 11419, 204, -1000, -1000, 550, 6951, -1000, -1000, -1000,
	4055, -1000, 1087, 9712, -1000, -1000, 567, -1000, 7465, 1739,
	1739, -1000, -1000, 567, 845, 845, -1000, 845, 847, -1000,
	-1000, 845, 88, 845, 87, 567, 567, 191, 317, -1000,
	133, 99, 827, -92, -1000, 407, 6951, -1000, 1020, 750,
	760, -1000, -1000, 5917, 567, 697, 290, 694, 1050, -1000,
	407, 407, 407, 11419, 407, 11419, 11419, 11419, 8234, 11419,
	1050, -1000, -1000, -1000, -1000, 2705, -1000, 691, -1000, 845,
	241, 241, -1000, -1000, -1000, 182, -1000, 66, -1000, 567,
	845, -1000, -1000, -1000, 368, -1000, -1000, -1000, 61, 540,
	61, 22, 18, 497, -1000, 492, 11419, 11419, 11661, 4055,
	2975, 219, 1076, -1000, -1000, 11419, -1000, -1000, -1000, 844,
	-1000, -1000, -1000, -1000, 1022, 11419, -1000, -1000, 407, 1081,
	761, -1000, 1739, -1000, -1000, 198, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 7465, 7465, -1000, 7465, 7465,
	7465, 567, 539, 407, 174, -1000, 827, -1000, -1000, 802,
	11419, 11419, -1000, -1000, 682, -1000, 664, 664, 664, 298,
	-1000, -1000, 184, 11419, -1000, 889, -1000, -1000, 461, 112,
	886, 11419, 65, -141, -1000, -1000, -1000, 368, -1000, 368,
	-1000, -1000, 665, 582, 646, 840, 836, -1000, -1000, 11419,
	-1000, -1000, -1000, -1000, -1000, 835, 11419, 827, 207, 1078,
	1065, -1000, -1000, 84, 84, 84, 84, 68, -1000, -1000,
	1098, -1000, 827, -1000, 826, 275, -1000, 11419, -1000, -1000,
	-1000, -1000, -1000, 184, -1000, 574, 399, 530, -149, -1000,
	1093, -1000, -1000, 1096, 834, -1000, -1000, -1000, -1000, -1000,
	-1000, 1087, 11419, 11419, 748, -1000, 11419, 635, 135, 173,
	-1000, 6951, 6951, -1000, -1000, -1000, -1000, 567, 154, -153,
	11903, 760, 567, 11419, -1000, -1000, -1000, 476, -1000, -1000,
	11419, 241, 241, 11419, -1000, 609, 600, -138, 11419, 6951,
	596, 829, 594, -1000, 11419, 833, 407, 757, -1000, 966,
	-112, -156, 706, -1000, -1000, -1000, -1000, -1000, -1000, 589,
	1087, -1000, -1000, -169, -1000, 407, -1000, -139, -1000, 135,
	985, 11419, -1000, 960, -1000, 199, -1000, 6951, -1000, -1000,
	132, 581, -146, 11661, 407, 127, -1000, -154, 832, 827,
	-157, 11419, 7208, -1000, 566, 84, 567, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1330, 33, 618, 1329, 1328, 1326, 1325, 1324, 1323,
	1322, 1321, 1319, 1318, 1315, 1314, 1306, 1301, 1300, 1299,
	1298, 1297, 1296, 1295, 334, 1293, 1291, 1288, 75, 1287,
	78, 1286, 1285, 42, 74, 46, 40, 959, 1284, 29,
	84, 73, 1283, 50, 1280, 1279, 83, 1278, 71, 1277,
	1275, 45, 1273, 1272, 17, 3, 1271, 41, 1270, 1269,
	68, 465, 1267, 1266, 1265, 1263, 1262, 1261, 51, 9,
	11, 12, 15, 1260, 57, 6, 1259, 49, 1258, 1255,
	1249, 1244, 28, 1242, 54, 1240, 56, 52, 1237, 16,
	61, 36, 22, 7, 82, 59, 1234, 31, 60, 47,
	1233, 1232, 580, 1221, 1217, 1216, 1214, 1208, 1206, 488,
	538, 1200, 1197, 1193, 43, 0, 304, 26, 76, 1185,
	39, 1183, 1303, 70, 66, 24, 1181, 65, 366, 37,
	1180, 1179, 32, 67, 1178, 88, 87, 1177, 1176, 1173,
	1172, 1171, 53, 20, 23, 1170, 1169, 1167, 13, 44,
	25, 48, 55, 1166, 1165, 27, 1164, 8, 14, 2,
	58, 1162, 1158, 1155, 1154, 30, 19, 1153, 18, 1152,
	10, 1148, 1147, 1, 1146, 21, 1144, 5, 1143, 4,
	1141, 1140, 1138, 1137, 1133, 1132, 1130, 1127, 1126, 1357,
	998, 1117, 1115, 1112, 1111, 86,
}

var yyR1 = [...]int{
	0, 187, 188, 188, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 191,
	191, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 181,
	181, 181, 182, 182, 182, 182, 182, 182, 184, 184,
	185, 185, 120, 120, 179, 179, 178, 177, 177, 176,
	176, 175, 186, 186, 16, 162, 163, 163, 163, 163,
	152, 134, 134, 134, 134, 134, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 183, 183, 183, 138, 138,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	137, 137, 137, 137, 137, 137, 139, 139, 139, 139,
	139, 135, 135, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 141, 141, 141, 141, 141, 141, 141, 141,
	151, 151, 142, 142, 149, 149, 150, 150, 150, 148,
	148, 148, 145, 145, 146, 146, 147, 147, 147, 143,
	143, 143, 144, 144, 144, 154, 154, 171, 171, 170,
	170, 170, 170, 161, 161, 167, 167, 167, 167, 167,
	167, 167, 160, 160, 169, 169, 168, 155, 155, 155,
	155, 155, 156, 157, 157, 157, 157, 158, 158, 159,
	159, 164, 164, 164, 165, 165, 165, 166, 166, 166,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 192, 192, 193, 193, 193, 193, 193,
	193, 193, 174, 172, 172, 173, 173, 13, 14, 14,
	14, 14, 14, 15, 15, 17, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 107,
	107, 104, 104, 105, 105, 106, 106, 106, 108, 108,
	108, 131, 131, 131, 19, 19, 21, 21, 22, 23,
	20, 20, 20, 20, 20, 194, 24, 25, 25, 26,
	26, 26, 30, 30, 30, 28, 28, 29, 29, 35,
	35, 34, 34, 36, 36, 36, 36, 119, 119, 119,
	118, 118, 38, 38, 39, 39, 40, 40, 41, 41,
	41, 53, 53, 89, 89, 91, 91, 42, 42, 42,
	42, 43, 43, 44, 44, 45, 45, 126, 126, 125,
	125, 125, 124, 124, 47, 47, 47, 49, 48, 48,
	48, 48, 50, 50, 52, 52, 51, 51, 54, 54,
	54, 54, 55, 55, 37, 37, 37, 37, 37, 37,
	37, 103, 103, 57, 57, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 67, 67, 67, 67, 67,
	67, 58, 58, 58, 58, 58, 58, 58, 33, 33,
	68, 68, 68, 74, 69, 69, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 65, 65,
	65, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 195, 195, 66, 66, 66,
	66, 31, 31, 31, 31, 31, 129, 129, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 133, 133, 133, 133, 133, 133, 133, 78,
	78, 32, 32, 76, 76, 77, 79, 79, 75, 75,
	75, 60, 60, 60, 60, 60, 60, 60, 60, 62,
	62, 62, 80, 80, 81, 81, 82, 82, 83, 83,
	84, 85, 85, 85, 86, 86, 86, 86, 87, 87,
	87, 59, 59, 59, 59, 59, 59, 88, 88, 88,
	88, 92, 92, 70, 70, 72, 72, 71, 73, 93,
	93, 97, 94, 94, 98, 98, 98, 96, 96, 96,
	121, 121, 121, 101, 101, 109, 109, 110, 110, 102,
	102, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 112, 112, 112, 113, 113, 116, 116, 117, 117,
	122, 122, 123, 123, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 189, 190, 127, 128, 128,
	128,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 6, 5, 5, 5, 11, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 1, 3, 3, 3,
	2, 3, 1, 1, 1, 1, 2, 2, 3, 4,
	3, 3, 3, 4, 3, 5, 2, 3, 2, 3,
	2, 3, 3, 5, 3, 0, 3, 3, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 3, 2, 2, 2, 2, 1, 3, 3, 2,
	1, 1, 1, 4, 4, 4, 5, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	3, 3, 0, 1, 0, 1, 0, 2, 1, 0,
	3, 3, 0, 1, 2, 5, 4, 1, 2, 2,
	3, 2, 3, 0, 1, 2, 3, 3, 2, 3,
	2, 2, 1, 1, 1, 3, 2, 1, 4, 4,
	7, 7, 13, 1, 1, 2, 2, 0, 1, 1,
	3, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	6, 11, 13, 7, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 3,
	6, 4, 2, 4, 2, 2, 2, 2, 3, 1,
	1, 0, 1, 0, 1, 0, 2, 2, 0, 2,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 7, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 3, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 6, 8, 8, 6,
	8, 8, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 1, 2, 1, 2, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}

var yyChk = [...]int{
	-1000, -187, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 142, 115, 135, 48, 163, 164,
	166, 167, 25, 136, 137, 140, 141, -189, 8, 256,
	52, -188, 275, -82, 15, -26, 5, -24, -194, -24,
	-24, -24, -24, -24, -162, 52, -120, -186, 150, 248,
	117, 132, 118, 133, 69, -102, 120, 122, 118, 118,
	119, 120, 248, 117, 118, -51, -122, 55, -115, 157,
	264, 20, 163, 176, 177, 168, 201, 192, 265, 155,
	189, 193, 235, 274, 64, 166, 244, 126, 161, 138,
	187, 183, 180, 27, 207, 271, 182, 129, 208, 212,
	236, 173, 174, 238, 205, 31, 131, 266, 33, 146,
	239, 210, 204, 200, 203, 172, 199, 37, 214, 213,
	215, 234, 195, 156, 217, 184, 18, 141, 144, 209,
	211, 181, 158, 124, 148, 270, 240, 179, 145, 159,
	140, 243, 154, 167, 237, 175, 246, 36, 221, 170,
	171, 128, 164, 152, 197, 147, 185, 186, 202, 169,
	198, 165, 149, 142, 245, 222, 272, 196, 194, 190,
	191, 153, 120, 150, 151, 227, 228, 229, 230, 267,
	268, 241, 188, 223, 224, 118, 105, 193, 111, 225,
	119, 31, 148, -131, 118, -104, 151, 227, 228, 229,
	230, 55, 237, 236, 231, -122, 165, -127, -127, -127,
	-127, -127, -2, -86, 17, 16, -5, -3, -189, 6,
	20, 21, -30, 38, 39, -25, -36, 96, -37, -122,
	-56, 71, -61, 28, 55, -115, 23, -60, -57, -75,
	-73, -74, 105, 106, 94, 95, 102, 72, 107, -65,
	-63, -64, -66, 57, 56, 65, 58, 59, 60, 61,
	66, 67, 68, -116, -71, -189, 42, 43, 257, 258,
	259, 260, 263, 261, 74, 32, 247, 255, 254, 253,
	251, 252, 249, 250, 273, 123, 248, 100, 256, -102,
	-39, -40, -41, -42, -53, -74, -189, -51, 11, -46,
	-51, -94, -130, 165, -98, 237, 236, -117, -96, -116,
	-114, 235, 193, 234, 55, -115, 116, 70, 22, 24,
	219, 73, 105, 16, 74, 104, 257, 111, 46, 249,
	250, 247, 259, 260, 248, 225, 28, 10, 25, 136,
	21, 98, 113, 77, 78, 139, 23, 137, 68, 19,
	49, 130, 11, 13, 14, 123, 122, 89, 119, 44,
	8, 107, 26, 86, 40, 134, 42, 87, 17, 251,
	252, 30, 263, 143, 100, 47, 34, 71, 66, 50,
	242, 69, 15, 45, 132, 88, 114, 256, 43, 117,
	6, 262, 29, 135, 41, 118, 226, 76, 121, 67,
	5, 133, 9, 48, 51, 253, 254, 255, 32, 75,
	12, -163, -152, 55, 119, 120, -116, -110, 123, -110,
	-116, -110, 256, 118, -51, -51, -109, 123, 55, -109,
	-109, -109, -51, 108, -51, 55, 29, 248, 55, 148,
	118, 149, 120, -128, -189, -117, -128, -128, -128, 152,
	153, -128, -105, 232, 50, -128, -190, 54, -87, 19,
	30, -37, -122, -83, -84, -37, -82, -2, -24, 34,
	-28, 21, 63, 11, -119, 70, 69, 86, -118, 22,
	-116, 57, 108, -37, -58, 89, 71, 87, 88, 73,
	91, 90, 101, 94, 95, 96, 97, 98, 99, 100,
	92, 93, 104, 273, 79, 80, 81, 82, 83, 84,
	85, -103, -189, -74, -189, 109, 110, -61, -61, -61,
	-61, -61, -61, -61, -189, -2, -69, -37, -189, -189,
	-189, -189, -189, -189, -189, -189, -189, -78, -37, -189,
	-195, -189, -195, -195, -195, -195, -195, -195, -195, -133,
	105, 193, 138, 187, -136, -135, 197, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 192, 265, -189,
	-189, -189, -189, -52, 26, -51, 29, 53, -47, -49,
	-48, -50, 40, 44, 46, 41, 42, 43, 47, -126,
	22, -39, -189, -125, 144, -124, 22, -122, 57, -51,
	-46, -191, 53, 11, 51, 53, -94, 165, -95, -99,
	238, 240, 79, -121, -116, 57, 28, 29, 54, 53,
	-153, -134, -138, -135, -140, -139, -141, -136, -137, 189,
	193, 190, 105, 194, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 196, 207, 29, 138, 185, 186,
	187, 188, 208, 209, 210, 211, 212, 213, 214, 215,
	179, 180, 182, 183, 184, -116, -51, -179, 51, 55,
	71, 55, 50, -51, -51, 242, -128, 121, -51, 23,
	50, -51, 55, 55, -123, -122, -114, -128, -128, -128,
	-128, -128, -128, -128, -128, -128, -128, -107, 226, 233,
	-51, 9, 89, 53, 18, 108, 53, -85, 24, 25,
	-86, -190, -30, -62, -116, 58, 61, -29, 41, -51,
	-37, -37, -67, 66, 71, 67, 68, -118, 96, -123,
	-117, -114, -61, -68, -71, -74, 62, 89, 87, 88,
	73, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -129, 55, 57, -133,
	55, -60, -60, -116, -35, 21, -34, -36, -190, 53,
	-190, -2, -34, -34, -37, -37, -75, -116, -122, -75,
	-34, -28, -76, -77, 75, -75, -190, 191, -34, -35,
	-34, -34, -90, 144, -51, -93, -97, -75, -40, -41,
	-41, -40, -41, 40, 40, 40, 45, 40, 45, 40,
	-48, -122, -190, -54, 48, 122, 49, -189, -124, -90,
	51, -39, -51, -98, -95, 53, 239, 241, 242, 50,
	-37, -144, 105, 104, -164, -165, -166, -117, 57, 58,
	-152, -154, -155, -167, -156, 124, 128, 129, 133, -160,
	126, 119, 134, 66, 71, 28, 50, 219, 124, 134,
	133, 64, 127, -147, 276, 216, -145, 222, -142, 52,
	-142, -142, 191, -142, -142, -142, -143, 193, -143, -143,
	-143, 52, 52, -142, -142, -142, -149, 52, 181, -149,
	-149, -150, 52, -150, 50, 51, 22, -177, 267, -178,
	55, -128, 23, -128, -51, -111, 116, 113, 114, -174,
	112, 219, 193, 64, 28, 15, 257, 144, 272, 55,
	145, -51, -51, -51, -128, -106, 11, 89, 36, -37,
	-37, -123, -84, -87, -101, 19, 11, 32, 32, -34,
	66, 67, 68, 108, -189, -68, -61, -61, -61, -33,
	139, 70, -190, -190, -34, 53, -37, -190, -190, -190,
	53, 51, 22, 53, 11, 108, 53, 11, -190, -34,
	-79, -77, 77, -37, -190, -190, -190, -190, -190, -59,
	29, 32, -2, -189, -189, -55, 53, 12, 79, -44,
	-43, 50, 51, -45, 50, -43, 40, 40, 119, 119,
	119, -91, -116, -55, -39, -55, -99, -100, 243, 240,
	246, 55, 53, -166, 79, 52, 50, 134, -160, -160,
	55, -160, 55, 55, -158, -116, 66, 57, 58, 59,
	66, 247, 65, -57, 217, 9, 134, 134, 57, -122,
	277, -146, 223, 58, -143, -143, -142, -143, -144, 29,
	-144, -144, -144, -151, 57, -151, -148, 267, 268, -148,
	58, -149, 58, -51, -116, -2, -176, -175, -117, -181,
	22, -127, -120, -193, 150, 125, 130, 129, 55, 124,
	128, 144, -180, 150, 125, 126, 130, 129, 55, 119,
	134, 124, 128, 144, 133, -112, -113, 121, 22, 119,
	134, 144, 116, -128, -108, 87, 12, -122, -122, 37,
	108, -51, -38, 11, 96, -117, -35, -33, 70, -61,
	-61, -190, -36, -132, 105, 189, 138, 187, 183, 205,
	206, 195, 221, 185, 222, -129, -132, -61, -61, -117,
	-61, -61, 264, -82, 78, -37, 76, -92, 50, -93,
	-70, -72, -71, -189, -2, -88, -116, -91, -82, -97,
	-37, -37, -37, 52, -37, -189, -189, -189, -190, 53,
	-82, -55, 240, 244, 245, -165, -166, -169, -168, -116,
	10, 9, 55, 55, 55, 130, -183, 273, -142, -189,
	247, 54, -144, -144, -143, -144, 55, 105, 54, 53,
	54, 185, 185, 53, 54, 53, 52, 51, 50, 53,
	79, -182, 19, 158, 159, -192, 119, 134, -127, -116,
	-127, -116, -51, -127, -116, 126, -155, 57, -37, -55,
	-39, -190, -61, -190, -142, -142, -142, -150, -142, 174,
	-142, 174, -190, -190, -190, 53, 19, -190, 53, 19,
	-189, -32, 262, -37, 27, -92, 53, -190, -190, -190,
	53, 108, -190, -86, -89, -116, -89, -89, -89, -125,
	-116, -86, 54, 53, -142, -157, 154, 155, 29, 156,
	-157, 134, 193, 186, -190, -142, -144, -143, 57, -143,
	224, 224, 58, 58, -89, -116, -51, -175, -166, 121,
	20, 6, 8, 9, 10, -116, 52, 26, -116, -80,
	13, -143, 55, -61, -61, -61, -61, -61, -190, 57,
	134, -72, 32, -2, -189, -116, -116, 53, 54, -190,
	-190, -190, -54, -171, -170, 51, 131, 64, 267, -168,
	50, 66, 157, 50, -158, 191, -148, -144, -144, 54,
	54, 54, 52, 52, -159, -116, 52, -89, -189, 124,
	-81, 14, 16, -190, -190, -190, -190, -31, 89, 267,
	9, -70, -2, 108, -116, -170, 55, -161, 79, 57,
	269, 9, 10, 52, -55, -89, -89, -184, 53, 51,
	-89, 54, -172, -173, 144, 134, -37, -69, -190, 265,
	47, 270, -93, -190, -116, 58, -116, -157, -157, -159,
	54, 54, -185, 267, -116, -37, 54, -179, -190, 53,
	-116, 52, 37, 266, 271, 54, -55, 274, -177, -173,
	32, -89, 37, 127, -37, 146, 54, 267, -51, 147,
	270, 52, -189, 271, -159, -61, 143, 54, -190, -190,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 586, 0, 345, 345, 345, 345, 345, 345, 0,
	-2, 639, 0, 0, 0, 0, -2, 335, 336, 0,
	338, 339, 877, 877, 877, 877, 877, 0, 33, 34,
	875, 1, 3, 594, 0, 0, 349, 352, 347, 0,
	639, 0, 0, 0, 60, 0, 0, 0, 0, 637,
	637, 0, 637, 83, 0, 0, 0, 640, 0, 635,
	0, 635, 635, 635, 0, 294, 416, 660, 661, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 0, 0, 0, 0, 878,
	878, 878, 878, 0, 878, 323, 312, 314, 315, 316,
	317, 878, 332, 333, 322, 334, 337, 340, 341, 342,
	343, 344, 27, 598, 0, 0, 586, 29, 0, 345,
	350, 351, 355, 353, 354, 346, 0, 363, 367, 0,
	424, 0, 429, 431, -2, -2, 0, 466, 467, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 494,
	495, 496, 497, 571, 572, 573, 574, 575, 576, 577,
	578, 433, 434, 568, 618, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 0, 525, 525, 525, 525,
	525, 525, 525, 525, 0, 0, 0, 0, 0, 0,
	0, 374, 376, 377, 378, 397, 0, 399, 0, 0,
	41, 45, 0, 851, 622, -2, -2, 0, 0, 658,
	659, -2, 771, -2, 656, 657, 664, 665, 666, 667,
	668, 669, 670, 671, 672, 673, 674, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 0, 96, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 93, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 293, 0, 295, 878, 878, 878, 878, 878,
	878, 878, 878, 304, 879, 880, 305, 306, 307, 878,
	878, 309, 0, 324, 0, 318, 28, 876, 22, 0,
	0, 595, 0, 587, 588, 591, 594, 27, 352, 0,
	357, 356, 348, 0, 364, 0, 0, 0, 368, 0,
	370, 371, 0, 427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 451, 452, 453, 454, 455, 456,
	457, 430, 0, 444, 0, 0, 0, 486, 487, 488,
	489, 490, 491, 0, 359, 27, 0, 464, 0, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 560, 0,
	516, 0, 517, 518, 519, 520, 521, 522, 523, 524,
	552, 0, 554, 555, 556, 557, 558, 130, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 151, 152, 0,
	359, 0, 0, 43, 0, 415, 0, 0, 0, 0,
	0, 0, 404, 0, 0, 407, 0, 0, 0, 0,
	398, 0, 0, 418, 818, 400, 0, 402, 403, -2,
	0, 0, 0, 39, 40, 0, 46, 851, 48, 49,
	0, 0, 0, 202, 630, 631, 632, 628, 241, 0,
	100, 196, 192, 102, 103, 104, 105, 182, 129, 182,
	182, 182, 182, 182, 199, 199, 199, 199, 163, 164,
	165, 166, 167, 168, 169, 0, 0, 146, 182, 182,
	182, 150, 172, 173, 174, 175, 176, 177, 178, 179,
	184, 184, 184, 186, 186, 0, 0, 87, 0, 878,
	0, 878, 0, 94, 0, 0, 260, 0, 288, 636,
	0, 878, 291, 292, 417, 662, 663, 296, 297, 298,
	299, 300, 301, 302, 303, 308, 311, 325, 319, 320,
	313, 599, 0, 0, 0, 0, 0, 590, 592, 593,
	598, 30, 355, 0, 579, 0, 0, 0, 358, 25,
	425, 426, 428, 445, 0, 447, 449, 369, 365, 0,
	569, -2, 435, 436, 460, 461, 462, 0, 0, 0,
	0, 458, 440, 0, 471, 472, 473, 474, 475, 476,
	477, 478, 479, 480, 481, 482, 485, 536, 537, 493,
	0, 483, 484, 492, 0, 0, 360, 361, 463, 0,
	617, 27, 0, 0, 0, 0, 0, 568, 0, 0,
	0, 0, 566, 563, 0, 0, 526, 553, 0, 0,
	0, 0, 0, 0, 414, 422, 619, 0, 375, 393,
	395, 0, 390, 405, 406, 408, 0, 410, 0, 412,
	413, 379, 380, 381, 0, 0, 0, 0, 401, 422,
	0, 422, 42, 623, 47, 0, 0, 52, 53, 624,
	625, 626, 203, 0, 95, 242, 244, 247, 248, 249,
	97, 98, 99, 0, 227, 0, 0, 0, 0, 0,
	237, 222, 223, 107, 0, 0, 0, 116, 0, 118,
	120, 0, 0, 106, 0, 198, 194, 193, 128, 0,
	199, 199, 182, 199, 157, 158, 202, 0, 202, 202,
	202, 0, 0, 189, 189, 149, 140, 0, 184, 142,
	143, 144, 0, 145, 0, 0, 0, 65, 0, 85,
	86, 66, 638, 67, 69, 877, 82, 0, 651, 261,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	0, 0, 287, 878, 290, 328, 0, 0, 0, 596,
	597, 0, 589, 23, 0, 633, 634, 580, 581, 372,
	446, 448, 450, 0, 359, 437, 458, 441, 0, 438,
	0, 0, 432, 498, 0, 0, 465, -2, 501, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 586,
	0, 564, 0, 0, 515, 527, 528, 529, 530, 611,
	0, 0, -2, 0, 0, 586, 0, 0, 0, 387,
	394, 0, 0, 388, 0, 389, 409, 411, 0, 0,
	0, 0, 385, 586, 422, 38, 50, 51, 0, 0,
	57, 204, 0, 245, 0, 0, 0, 215, 0, 0,
	218, 0, 220, 221, 0, 238, 108, 125, 110, 111,
	112, 182, 114, 122, 0, 0, 117, 119, 121, 124,
	197, 101, 195, 0, 202, 202, 199, 202, 159, 0,
	160, 161, 162, 0, 180, 0, 147, 0, 0, 148,
	0, 141, 0, 0, 0, -2, 88, 89, 0, 72,
	0, 250, 0, 877, 0, 275, 276, 277, 278, 279,
	280, 281, 877, 0, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 0, 877, 652, 653, 654,
	655, 0, 0, 289, 310, 0, 0, 326, 327, 600,
	0, 24, 422, 0, 366, 570, 0, 439, 0, 459,
	442, 499, 362, 0, 182, 182, 541, 182, 186, 544,
	545, 182, 547, 182, 550, 0, 0, 0, 0, 569,
	0, 0, 0, 561, 514, 567, 0, 31, 0, 611,
	601, 613, 615, 0, 27, 0, 607, 0, 594, 620,
	423, 621, 391, 0, 396, 0, 0, 0, 399, 0,
	594, 37, 54, 55, 56, 243, 246, 0, 224, 182,
	0, 0, 216, 217, 219, 0, 109, 0, 113, 0,
	182, 183, 153, 154, 202, 155, 200, 201, 199, 0,
	199, 0, 0, 0, 187, 0, 0, 0, 0, 0,
	0, 0, 0, 70, 71, 0, 273, 274, 254, 0,
	255, 257, 258, 259, 0, 237, 253, 329, 330, 582,
	373, 500, 443, 503, 538, 199, 542, 543, 546, 548,
	549, 551, 505, 504, 506, 0, 0, 509, 0, 0,
	0, 0, 0, 565, 0, 32, 0, 616, -2, 0,
	0, 0, 44, 35, 0, 383, 0, 0, 0, 418,
	386, 36, 206, 0, 226, 228, 233, 234, 0, 0,
	229, 237, 0, 189, 123, 115, 156, 202, 181, 202,
	190, 191, 0, 0, 0, 0, 0, 90, 91, 0,
	73, 74, 75, 76, 77, 0, 0, 0, 238, 584,
	0, 539, 540, 0, 0, 0, 0, 531, 513, 562,
	0, 614, 0, -2, 0, 609, 608, 0, 392, 419,
	420, 421, 382, 205, 207, 0, 213, 0, 0, 225,
	0, 235, 236, 0, 0, 126, 127, 170, 171, 185,
	188, 422, 0, 0, 78, 239, 0, 0, 0, 0,
	26, 0, 0, 507, 508, 510, 511, 0, 0, 0,
	0, 604, 27, 0, 384, 208, 209, 0, 214, 211,
	0, 0, 0, 0, 61, 0, 0, 80, 0, 0,
	0, 84, 0, 283, 0, 0, 585, 583, 512, 0,
	0, 0, 612, -2, 610, 210, 212, 230, 231, 0,
	422, 62, 68, 0, 240, 79, 251, 87, 282, 0,
	0, 0, 532, 0, 535, 0, 63, 0, 256, 284,
	0, 0, 533, 0, 81, 0, 252, 0, 0, 0,
	0, 0, 0, 534, 0, 0, 0, 232, 285, 286,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 275,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 276, 3, 277, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:317
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:322
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:323
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:327
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:350
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:358
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:362
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:368
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:375
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:381
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:385
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:391
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:395
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:402
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:414
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:426
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:430
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:436
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:442
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:446
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:450
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:455
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:456
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:460
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:464
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:469
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:473
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:479
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:483
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:487
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:491
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:497
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:501
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:507
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:511
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:521
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:525
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:529
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:533
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:539
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:543
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:549
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:554
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:570
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:585
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:600
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:608
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:616
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:620
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:624
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:636
		{
			yyVAL.bytes = nil
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:640
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:644
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:649
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:653
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:657
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:661
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:665
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:669
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:674
		{
			yyVAL.expr = nil
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:678
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:683
		{
			yyVAL.expr = nil
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:687
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:692
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:696
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:701
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:705
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:711
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:716
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:721
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:727
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:732
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:738
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:743
		{
			yyVAL.bytes = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:747
		{
			yyVAL.bytes = nil
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:753
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:760
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:767
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:772
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:776
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:780
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:786
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:791
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:802
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:813
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:818
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:823
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:828
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:833
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:838
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:843
		{
			yyDollar[1].columnType.Default = NewValArgWithOpt(yyDollar[3].bytes, yyDollar[4].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:848
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:853
		{
			yyDollar[1].columnType.OnUpdate = NewValArgWithOpt(yyDollar[4].bytes, yyDollar[5].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:858
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:863
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:868
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:873
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:878
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:883
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:888
		{
			yyDollar[1].columnType.Default = NewBoolSQLVal(bool(yyDollar[3].boolVal))
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:893
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:898
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:904
		{
			yyVAL.bytes = nil
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:912
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:917
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1019
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1029
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1035
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1039
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1043
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1047
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1051
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1055
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1059
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1063
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1075
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1087
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1091
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1095
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1099
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1103
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 171:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1108
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1114
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1118
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1122
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1126
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1130
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1134
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1138
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1148
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1153
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1158
		{
			yyVAL.optVal = nil
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1162
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1167
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 185:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1171
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1179
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1183
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 188:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1189
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1197
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1201
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1205
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1210
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1214
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1219
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1223
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1228
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1232
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1236
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1241
		{
			yyVAL.str = ""
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1245
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1249
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1254
		{
			yyVAL.str = ""
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1258
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1262
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1268
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1272
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1278
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1282
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1288
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1292
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1297
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1301
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1307
		{
			yyVAL.str = ""
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1311
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1317
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1321
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1325
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1329
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1333
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1337
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1341
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1347
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1351
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1357
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1361
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1367
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1374
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1380
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1386
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1392
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 232:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1400
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1412
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1416
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1420
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1424
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1429
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1436
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1440
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1445
		{
			yyVAL.str = ""
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1449
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1453
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1461
		{
			yyVAL.str = yyDollar[1].str
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1465
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1469
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1475
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1479
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1483
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1489
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1493
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 252:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1507
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 253:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1521
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1530
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1534
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1538
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 257:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1551
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 258:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1561
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1566
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1571
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1575
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 282:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1607
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1613
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1617
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 285:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1623
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 286:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1627
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1633
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1639
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1647
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1652
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1660
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1664
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1670
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1674
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1679
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1685
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1689
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1693
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1698
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1702
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1706
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1710
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1714
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1718
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1722
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1726
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1730
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1734
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1738
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1742
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1752
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1756
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1760
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1764
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1768
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1772
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1776
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1786
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1792
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1796
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1802
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1806
		{
			yyVAL.str = "extended "
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1812
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1816
		{
			yyVAL.str = "full "
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1822
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1826
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1830
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1836
		{
			yyVAL.showFilter = nil
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1840
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1844
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1850
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1854
		{
			yyVAL.str = SessionStr
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1858
		{
			yyVAL.str = GlobalStr
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1864
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1868
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1874
		{
			yyVAL.statement = &Begin{}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1878
		{
			yyVAL.statement = &Begin{}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1884
		{
			yyVAL.statement = &Commit{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1890
		{
			yyVAL.statement = &Rollback{}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1896
		{
			yyVAL.statement = &OtherRead{}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1900
		{
			yyVAL.statement = &OtherRead{}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1904
		{
			yyVAL.statement = &OtherRead{}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1908
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1912
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1917
		{
			setAllowComments(yylex, true)
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1921
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1927
		{
			yyVAL.bytes2 = nil
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1931
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1937
		{
			yyVAL.str = UnionStr
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1941
		{
			yyVAL.str = UnionAllStr
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1945
		{
			yyVAL.str = UnionDistinctStr
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1950
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1954
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1958
		{
			yyVAL.str = SQLCacheStr
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1963
		{
			yyVAL.str = ""
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1967
		{
			yyVAL.str = DistinctStr
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1972
		{
			yyVAL.str = ""
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1976
		{
			yyVAL.str = StraightJoinHint
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1981
		{
			yyVAL.selectExprs = nil
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1985
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1991
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1995
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2001
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2005
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2009
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 366:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2013
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2018
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2022
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2026
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2033
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2038
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2042
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2048
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2052
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2062
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2066
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2070
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2076
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 382:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2080
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2086
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2090
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2096
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2100
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2113
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2117
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2121
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2125
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2131
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2133
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2137
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2139
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2143
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2145
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2148
		{
			yyVAL.empty = struct{}{}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2150
		{
			yyVAL.empty = struct{}{}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2153
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2157
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2161
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2168
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2174
		{
			yyVAL.str = JoinStr
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2178
		{
			yyVAL.str = JoinStr
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2182
		{
			yyVAL.str = JoinStr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2188
		{
			yyVAL.str = StraightJoinStr
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2194
		{
			yyVAL.str = LeftJoinStr
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2198
		{
			yyVAL.str = LeftJoinStr
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2202
		{
			yyVAL.str = RightJoinStr
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2206
		{
			yyVAL.str = RightJoinStr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2212
		{
			yyVAL.str = NaturalJoinStr
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2216
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2226
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2230
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2236
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2240
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2245
		{
			yyVAL.indexHints = nil
		}
	case 419:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2249
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 420:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2253
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2257
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2262
		{
			yyVAL.expr = nil
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2266
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2272
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2276
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2280
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2284
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2288
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2292
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2296
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2302
		{
			yyVAL.str = ""
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2306
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2312
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2316
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2322
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2326
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2330
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2334
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 439:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2338
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2342
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2346
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2350
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2354
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2358
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2364
		{
			yyVAL.str = IsNullStr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2368
		{
			yyVAL.str = IsNotNullStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2372
		{
			yyVAL.str = IsTrueStr
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2376
		{
			yyVAL.str = IsNotTrueStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2380
		{
			yyVAL.str = IsFalseStr
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2384
		{
			yyVAL.str = IsNotFalseStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2390
		{
			yyVAL.str = EqualStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2394
		{
			yyVAL.str = LessThanStr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2398
		{
			yyVAL.str = GreaterThanStr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2402
		{
			yyVAL.str = LessEqualStr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2406
		{
			yyVAL.str = GreaterEqualStr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2410
		{
			yyVAL.str = NotEqualStr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2414
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2419
		{
			yyVAL.expr = nil
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2423
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2429
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2433
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2437
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2443
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2449
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2453
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2459
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2463
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2467
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2471
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2475
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2479
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2483
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2487
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2491
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2495
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2499
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2503
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2507
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2511
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2515
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2519
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2523
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2527
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2531
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2535
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2539
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2543
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2547
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2555
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2569
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2573
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2577
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2585
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2599
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 499:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2603
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 500:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2607
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2617
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2621
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 503:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2625
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 504:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2629
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 505:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2633
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 506:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2637
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 507:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2641
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 508:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2645
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 509:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2649
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2653
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 511:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2657
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 512:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2661
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 513:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2665
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 514:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2669
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2673
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2683
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2687
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2691
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2695
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2700
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2705
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2710
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2715
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2719
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2733
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2737
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2741
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2745
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2751
		{
			yyVAL.str = ""
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2755
		{
			yyVAL.str = BooleanModeStr
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2759
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 534:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2763
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2767
		{
			yyVAL.str = QueryExpansionStr
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2773
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2777
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2783
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2787
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2791
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2795
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2799
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2803
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2809
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2813
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2817
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2821
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2825
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2829
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2833
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2837
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2843
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2847
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2851
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2855
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2859
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2863
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2867
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2872
		{
			yyVAL.expr = nil
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2876
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2881
		{
			yyVAL.str = string("")
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2885
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2891
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2895
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2901
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2906
		{
			yyVAL.expr = nil
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2910
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2916
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2920
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2924
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2930
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2934
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2938
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2942
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2946
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2950
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2954
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2958
		{
			yyVAL.expr = &NullVal{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2964
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2973
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2977
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2982
		{
			yyVAL.exprs = nil
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2986
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2991
		{
			yyVAL.expr = nil
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2995
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3000
		{
			yyVAL.orderBy = nil
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3004
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3010
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3014
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3020
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3025
		{
			yyVAL.str = AscScr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3029
		{
			yyVAL.str = AscScr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3033
		{
			yyVAL.str = DescScr
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3038
		{
			yyVAL.limit = nil
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3042
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3046
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3050
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3055
		{
			yyVAL.str = ""
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3059
		{
			yyVAL.str = ForUpdateStr
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3063
		{
			yyVAL.str = ShareModeStr
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3076
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3080
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3084
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3089
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3093
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3097
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3104
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3108
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3112
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3116
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3121
		{
			yyVAL.updateExprs = nil
		}
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3125
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3131
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3135
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3141
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3145
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3151
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3157
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3167
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3171
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3177
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3183
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3187
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3193
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3197
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3201
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3208
		{
			yyVAL.bytes = []byte("charset")
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3215
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3219
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3223
		{
			yyVAL.expr = &Default{}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3232
		{
			yyVAL.byt = 0
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3234
		{
			yyVAL.byt = 1
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3237
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3239
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3242
		{
			yyVAL.str = ""
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3244
		{
			yyVAL.str = IgnoreStr
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3248
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3250
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3252
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3254
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3256
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3258
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3260
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3262
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3264
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3266
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3269
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3271
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3273
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3277
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3279
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3283
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3287
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3294
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3300
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3304
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3311
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3548
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3557
		{
			decNesting(yylex)
		}
	case 877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3562
		{
			forceEOF(yylex)
		}
	case 878:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3567
		{
			forceEOF(yylex)
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3571
		{
			forceEOF(yylex)
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3575
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
