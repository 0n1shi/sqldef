// Code generated by goyacc -o sqlparser/parser.go sqlparser/parser.y. DO NOT EDIT.

//line sqlparser/parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sqlparser/parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sqlparser/parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OFF = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const PRIMARY = 57450
const COLUMN = 57451
const CONSTRAINT = 57452
const REFERENCES = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const KEY_BLOCK_SIZE = 57457
const POLICY = 57458
const UNIQUE = 57459
const KEY = 57460
const SHOW = 57461
const DESCRIBE = 57462
const EXPLAIN = 57463
const DATE = 57464
const ESCAPE = 57465
const REPAIR = 57466
const OPTIMIZE = 57467
const TRUNCATE = 57468
const MAXVALUE = 57469
const PARTITION = 57470
const REORGANIZE = 57471
const LESS = 57472
const THAN = 57473
const PROCEDURE = 57474
const TRIGGER = 57475
const VINDEX = 57476
const VINDEXES = 57477
const STATUS = 57478
const VARIABLES = 57479
const RESTRICT = 57480
const CASCADE = 57481
const NO = 57482
const ACTION = 57483
const PERMISSIVE = 57484
const RESTRICTIVE = 57485
const PUBLIC = 57486
const CURRENT_USER = 57487
const SESSION_USER = 57488
const PAD_INDEX = 57489
const FILLFACTOR = 57490
const IGNORE_DUP_KEY = 57491
const STATISTICS_NORECOMPUTE = 57492
const STATISTICS_INCREMENTAL = 57493
const ALLOW_ROW_LOCKS = 57494
const ALLOW_PAGE_LOCKS = 57495
const BEGIN = 57496
const START = 57497
const TRANSACTION = 57498
const COMMIT = 57499
const ROLLBACK = 57500
const BIT = 57501
const TINYINT = 57502
const SMALLINT = 57503
const SMALLSERIAL = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const SERIAL = 57508
const BIGINT = 57509
const BIGSERIAL = 57510
const INTNUM = 57511
const REAL = 57512
const DOUBLE = 57513
const PRECISION = 57514
const FLOAT_TYPE = 57515
const DECIMAL = 57516
const NUMERIC = 57517
const SMALLMONEY = 57518
const MONEY = 57519
const TIME = 57520
const TIMESTAMP = 57521
const DATETIME = 57522
const YEAR = 57523
const DATETIMEOFFSET = 57524
const DATETIME2 = 57525
const SMALLDATETIME = 57526
const CHAR = 57527
const VARCHAR = 57528
const VARYING = 57529
const BOOL = 57530
const CHARACTER = 57531
const VARBINARY = 57532
const NCHAR = 57533
const NVARCHAR = 57534
const NTEXT = 57535
const UUID = 57536
const TEXT = 57537
const TINYTEXT = 57538
const MEDIUMTEXT = 57539
const LONGTEXT = 57540
const CITEXT = 57541
const BLOB = 57542
const TINYBLOB = 57543
const MEDIUMBLOB = 57544
const LONGBLOB = 57545
const JSON = 57546
const JSONB = 57547
const ENUM = 57548
const GEOMETRY = 57549
const POINT = 57550
const LINESTRING = 57551
const POLYGON = 57552
const GEOMETRYCOLLECTION = 57553
const MULTIPOINT = 57554
const MULTILINESTRING = 57555
const MULTIPOLYGON = 57556
const ARRAY = 57557
const NOW = 57558
const BPCHAR = 57559
const NULLX = 57560
const AUTO_INCREMENT = 57561
const APPROXNUM = 57562
const SIGNED = 57563
const UNSIGNED = 57564
const ZEROFILL = 57565
const ZONE = 57566
const AUTOINCREMENT = 57567
const DATABASES = 57568
const TABLES = 57569
const VITESS_KEYSPACES = 57570
const VITESS_SHARDS = 57571
const VITESS_TABLETS = 57572
const VSCHEMA_TABLES = 57573
const EXTENDED = 57574
const FULL = 57575
const PROCESSLIST = 57576
const NAMES = 57577
const CHARSET = 57578
const GLOBAL = 57579
const SESSION = 57580
const ISOLATION = 57581
const LEVEL = 57582
const READ = 57583
const WRITE = 57584
const ONLY = 57585
const REPEATABLE = 57586
const COMMITTED = 57587
const UNCOMMITTED = 57588
const SERIALIZABLE = 57589
const CURRENT_TIMESTAMP = 57590
const DATABASE = 57591
const CURRENT_DATE = 57592
const CURRENT_TIME = 57593
const LOCALTIME = 57594
const LOCALTIMESTAMP = 57595
const UTC_DATE = 57596
const UTC_TIME = 57597
const UTC_TIMESTAMP = 57598
const REPLACE = 57599
const CONVERT = 57600
const CAST = 57601
const SUBSTR = 57602
const SUBSTRING = 57603
const GROUP_CONCAT = 57604
const SEPARATOR = 57605
const INHERIT = 57606
const MATCH = 57607
const AGAINST = 57608
const BOOLEAN = 57609
const LANGUAGE = 57610
const WITH = 57611
const WITHOUT = 57612
const PARSER = 57613
const QUERY = 57614
const EXPANSION = 57615
const UNUSED = 57616
const GENERATED = 57617
const ALWAYS = 57618
const IDENTITY = 57619
const SEQUENCE = 57620
const INCREMENT = 57621
const MINVALUE = 57622
const CACHE = 57623
const CYCLE = 57624
const OWNED = 57625
const NONE = 57626
const CLUSTERED = 57627
const NONCLUSTERED = 57628
const REPLICATION = 57629
const INCLUDE = 57630
const TYPECAST = 57631
const CHECK = 57632

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	121, 92,
	-2, 82,
	-1, 36,
	153, 400,
	154, 400,
	-2, 390,
	-1, 270,
	109, 733,
	-2, 729,
	-1, 271,
	109, 734,
	-2, 730,
	-1, 341,
	80, 922,
	-2, 58,
	-1, 342,
	80, 873,
	-2, 59,
	-1, 347,
	80, 853,
	-2, 700,
	-1, 349,
	80, 896,
	-2, 702,
	-1, 645,
	51, 41,
	53, 41,
	-2, 43,
	-1, 786,
	109, 736,
	-2, 732,
	-1, 1023,
	5, 28,
	-2, 535,
	-1, 1048,
	5, 27,
	-2, 674,
	-1, 1146,
	5, 27,
	-2, 64,
	-1, 1356,
	5, 28,
	-2, 675,
	-1, 1434,
	5, 27,
	-2, 677,
	-1, 1549,
	5, 28,
	-2, 678,
}

const yyPrivate = 57344

const yyLast = 14405

var yyAct = [...]int{
	271, 1539, 1051, 268, 722, 1504, 1447, 1483, 1444, 963,
	1082, 275, 850, 1258, 1231, 572, 1085, 1375, 1137, 571,
	3, 458, 762, 300, 1362, 1259, 868, 1232, 1148, 941,
	491, 1556, 892, 639, 958, 88, 1228, 637, 88, 249,
	1111, 891, 243, 912, 53, 346, 898, 851, 1067, 1204,
	822, 277, 1015, 66, 1134, 811, 655, 819, 274, 1056,
	788, 838, 88, 88, 351, 907, 953, 248, 504, 351,
	510, 340, 351, 456, 847, 654, 641, 88, 328, 88,
	516, 327, 273, 626, 997, 88, 244, 245, 246, 247,
	595, 524, 258, 337, 343, 600, 601, 1118, 335, 326,
	52, 887, 1619, 1282, 925, 1581, 928, 1271, 1381, 333,
	262, 586, 548, 331, 536, 546, 547, 539, 540, 541,
	542, 543, 544, 545, 538, 821, 1272, 548, 1388, 532,
	1105, 535, 538, 459, 460, 548, 1612, 550, 551, 552,
	553, 554, 555, 556, 85, 533, 534, 531, 537, 536,
	546, 547, 539, 540, 541, 542, 543, 544, 545, 538,
	1571, 1653, 548, 1596, 1649, 1547, 1509, 1138, 1139, 1605,
	1640, 964, 336, 546, 547, 539, 540, 541, 542, 543,
	544, 545, 538, 927, 299, 548, 470, 1508, 471, 1585,
	1595, 1223, 1570, 1350, 478, 468, 1253, 1546, 1497, 537,
	536, 546, 547, 539, 540, 541, 542, 543, 544, 545,
	538, 1254, 1255, 548, 881, 541, 542, 543, 544, 545,
	538, 499, 88, 548, 1402, 1401, 351, 351, 351, 351,
	1115, 351, 1117, 1116, 882, 883, 1120, 930, 351, 539,
	540, 541, 542, 543, 544, 545, 538, 942, 345, 548,
	1575, 1075, 484, 462, 1074, 1474, 466, 1076, 1423, 753,
	1346, 503, 656, 1577, 657, 351, 754, 932, 842, 83,
	79, 80, 81, 1301, 513, 459, 460, 1300, 1572, 954,
	1339, 1337, 563, 564, 565, 566, 567, 568, 569, 1611,
	489, 1613, 242, 1311, 1312, 1463, 1527, 512, 537, 536,
	546, 547, 539, 540, 541, 542, 543, 544, 545, 538,
	1343, 503, 548, 549, 1378, 1648, 486, 1638, 488, 495,
	496, 1540, 1391, 1182, 559, 848, 88, 1541, 549, 1314,
	1431, 480, 1390, 88, 88, 88, 549, 1383, 1393, 351,
	1382, 1099, 1265, 1098, 1315, 351, 485, 487, 537, 536,
	546, 547, 539, 540, 541, 542, 543, 544, 545, 538,
	1392, 1179, 548, 549, 1087, 1627, 1323, 1488, 1266, 343,
	473, 537, 536, 546, 547, 539, 540, 541, 542, 543,
	544, 545, 538, 1274, 331, 548, 549, 464, 74, 77,
	1107, 1108, 1109, 908, 1498, 1092, 1410, 1604, 1112, 1110,
	297, 298, 1573, 1574, 1576, 1578, 1579, 1104, 909, 942,
	345, 345, 345, 345, 549, 345, 955, 82, 732, 935,
	1016, 461, 345, 1509, 549, 588, 589, 590, 591, 592,
	593, 594, 652, 646, 1545, 621, 70, 72, 1183, 1066,
	1376, 1377, 1379, 76, 645, 77, 1065, 1090, 1064, 526,
	549, 71, 73, 1644, 720, 869, 871, 469, 1502, 1180,
	908, 1178, 88, 483, 221, 78, 561, 562, 88, 68,
	88, 351, 1359, 88, 1181, 909, 88, 1191, 1031, 57,
	88, 1009, 351, 351, 351, 351, 351, 351, 351, 351,
	760, 528, 479, 889, 888, 757, 351, 351, 503, 1187,
	523, 88, 992, 1520, 59, 60, 61, 62, 63, 1295,
	1519, 1518, 908, 549, 522, 521, 351, 492, 493, 494,
	88, 497, 1517, 345, 1225, 741, 351, 909, 501, 660,
	870, 523, 1516, 1515, 787, 1514, 1512, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 765, 673, 669, 789, 763, 764, 1308, 785,
	1296, 1054, 658, 549, 739, 839, 1114, 1038, 839, 1084,
	351, 721, 725, 795, 786, 1186, 1027, 728, 1026, 729,
	463, 993, 733, 790, 69, 736, 549, 793, 794, 792,
	521, 831, 834, 1462, 826, 522, 521, 840, 1115, 1557,
	1117, 1116, 522, 521, 472, 518, 523, 767, 1606, 1095,
	755, 1465, 523, 784, 1630, 522, 521, 782, 1558, 523,
	1461, 88, 1227, 75, 88, 88, 88, 88, 88, 774,
	522, 521, 523, 1084, 852, 1083, 88, 1396, 1629, 88,
	814, 1121, 1084, 88, 816, 817, 1610, 523, 88, 88,
	1607, 465, 351, 467, 50, 345, 1094, 1084, 826, 1006,
	1007, 1008, 1609, 836, 791, 351, 345, 345, 345, 345,
	345, 345, 345, 345, 844, 331, 331, 331, 331, 331,
	345, 345, 343, 1608, 325, 876, 475, 476, 477, 1559,
	331, 1555, 778, 780, 781, 893, 1473, 1028, 779, 331,
	769, 827, 828, 854, 855, 853, 857, 835, 856, 1448,
	526, 1404, 925, 345, 943, 944, 945, 946, 865, 873,
	874, 351, 1450, 878, 1403, 351, 1280, 351, 88, 879,
	849, 88, 759, 88, 914, 514, 88, 351, 812, 896,
	813, 843, 1513, 845, 846, 522, 521, 1395, 921, 1143,
	910, 1121, 960, 1141, 818, 1121, 911, 1430, 877, 1399,
	1325, 731, 523, 1135, 832, 832, 1101, 758, 1534, 1657,
	832, 1510, 742, 743, 744, 745, 746, 747, 748, 749,
	1269, 956, 957, 1347, 522, 521, 750, 751, 1438, 1646,
	1449, 785, 21, 1372, 1639, 1372, 1618, 1012, 1013, 1014,
	1268, 523, 502, 1372, 1617, 503, 786, 832, 1267, 917,
	1093, 913, 922, 1372, 1603, 1529, 789, 1077, 919, 918,
	1534, 1602, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1599,
	1598, 1479, 998, 966, 999, 815, 345, 970, 1591, 503,
	987, 738, 988, 503, 790, 989, 1372, 1588, 253, 345,
	1438, 1537, 1478, 1011, 737, 537, 536, 546, 547, 539,
	540, 541, 542, 543, 544, 545, 538, 1048, 726, 548,
	1372, 1530, 1288, 351, 724, 1344, 88, 1069, 481, 1071,
	537, 536, 546, 547, 539, 540, 541, 542, 543, 544,
	545, 538, 351, 474, 548, 457, 1205, 1052, 1005, 1037,
	1438, 1471, 1535, 351, 1534, 961, 1438, 503, 875, 345,
	648, 345, 1229, 1070, 351, 1052, 1061, 1438, 1439, 824,
	915, 345, 893, 88, 1079, 1354, 916, 331, 623, 1207,
	1389, 1100, 628, 631, 632, 633, 629, 1072, 630, 634,
	1372, 1371, 1057, 1058, 1446, 345, 1020, 537, 536, 546,
	547, 539, 540, 541, 542, 543, 544, 545, 538, 1250,
	503, 548, 1035, 1122, 1123, 351, 1125, 1126, 1127, 1140,
	1088, 1089, 1091, 1358, 503, 1053, 923, 1307, 924, 1304,
	1303, 1209, 1146, 649, 1113, 1214, 54, 1208, 1298, 1299,
	351, 920, 1206, 88, 88, 1149, 1298, 1297, 1212, 1021,
	503, 88, 1194, 1136, 623, 503, 824, 503, 1053, 23,
	351, 1210, 1211, 1302, 1152, 967, 623, 969, 665, 664,
	1200, 1201, 1142, 650, 1021, 648, 1153, 990, 1213, 1215,
	622, 1078, 1046, 1218, 1219, 1047, 1221, 1222, 880, 23,
	1196, 1021, 1033, 1128, 1021, 1130, 1131, 1132, 1133, 1052,
	351, 351, 1169, 1448, 623, 50, 50, 1068, 852, 1230,
	23, 1030, 1220, 651, 852, 1198, 1450, 761, 1197, 1235,
	549, 1233, 1203, 1252, 1406, 1405, 345, 786, 1217, 351,
	1224, 351, 351, 1216, 1032, 50, 1433, 1086, 1650, 255,
	1616, 1593, 1532, 1531, 1524, 549, 1239, 1523, 1096, 1238,
	1240, 1485, 723, 1029, 1472, 1417, 50, 932, 959, 893,
	1192, 893, 981, 1257, 1251, 1270, 1287, 1170, 1285, 1277,
	1256, 1244, 1172, 1165, 1166, 980, 1173, 1168, 1167, 1144,
	1145, 1175, 1171, 931, 1449, 50, 954, 1106, 1275, 1081,
	1273, 948, 1174, 1057, 1058, 88, 351, 947, 1164, 345,
	65, 1505, 985, 1407, 1291, 1229, 351, 1060, 735, 727,
	500, 979, 549, 773, 1063, 351, 1451, 1452, 1453, 1454,
	1455, 1456, 1457, 864, 345, 632, 633, 88, 628, 631,
	632, 633, 629, 351, 630, 634, 862, 1062, 860, 859,
	858, 863, 351, 861, 345, 88, 1327, 1316, 259, 260,
	1624, 1594, 1190, 1330, 994, 517, 1318, 1622, 1004, 1003,
	976, 973, 974, 1279, 972, 505, 345, 1129, 515, 663,
	1321, 482, 1196, 1418, 1289, 1290, 506, 1292, 1293, 1294,
	1324, 832, 1328, 1352, 1237, 1068, 1159, 832, 763, 764,
	968, 734, 983, 986, 1335, 351, 331, 351, 351, 351,
	88, 351, 1278, 1151, 1305, 962, 1412, 351, 1413, 1414,
	1415, 1310, 636, 345, 517, 345, 1260, 1353, 1002, 264,
	1411, 1365, 1366, 1367, 256, 257, 1001, 1264, 351, 1361,
	1184, 1380, 250, 1368, 1614, 1385, 1320, 893, 1507, 1079,
	1491, 1370, 251, 1384, 54, 290, 289, 292, 293, 294,
	295, 1490, 1387, 978, 291, 296, 1160, 1156, 351, 351,
	1161, 1158, 1157, 1421, 351, 73, 766, 1053, 1263, 1262,
	1521, 519, 1522, 1499, 351, 1097, 1162, 1398, 756, 1400,
	1306, 56, 1155, 977, 58, 1154, 1408, 1313, 1149, 893,
	1317, 1409, 647, 51, 1, 1528, 1103, 1424, 1425, 1319,
	1426, 1427, 1428, 1526, 67, 1584, 1533, 1281, 1309, 351,
	351, 1150, 1163, 1422, 965, 1147, 975, 1322, 1538, 1552,
	1445, 900, 982, 351, 823, 825, 345, 1434, 1233, 890,
	455, 64, 1432, 351, 1511, 901, 1460, 508, 984, 899,
	841, 1464, 897, 1397, 666, 1443, 1459, 926, 1458, 1466,
	1119, 929, 672, 670, 671, 1468, 351, 351, 88, 668,
	1475, 351, 674, 667, 229, 457, 338, 635, 351, 1480,
	659, 520, 86, 1177, 1176, 241, 301, 47, 971, 1363,
	1185, 1363, 1363, 1363, 752, 1369, 991, 498, 231, 351,
	867, 345, 1486, 557, 1000, 1073, 344, 265, 1500, 86,
	86, 1580, 1506, 1236, 509, 1501, 1489, 1233, 1420, 1036,
	583, 837, 1363, 276, 86, 777, 86, 288, 285, 287,
	286, 768, 86, 1045, 47, 530, 266, 330, 619, 627,
	908, 625, 254, 624, 1059, 903, 351, 902, 332, 904,
	905, 1055, 345, 345, 906, 909, 329, 1193, 1416, 1536,
	1476, 1349, 1477, 351, 1496, 772, 351, 1543, 1419, 25,
	351, 852, 1548, 55, 261, 1553, 19, 1482, 18, 17,
	507, 511, 20, 16, 351, 351, 15, 14, 29, 13,
	12, 1567, 351, 351, 11, 351, 10, 529, 1568, 1565,
	1566, 351, 1589, 1436, 1437, 1582, 1583, 9, 1560, 1561,
	1562, 1563, 1564, 8, 7, 6, 5, 1260, 4, 252,
	22, 2, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 573, 0, 0, 0, 0, 1600, 1601, 0, 0,
	584, 0, 0, 1615, 0, 0, 0, 0, 0, 0,
	1260, 1481, 0, 1621, 351, 1484, 0, 0, 351, 1620,
	0, 0, 1363, 0, 0, 0, 1626, 1623, 0, 86,
	0, 0, 1628, 0, 0, 88, 0, 351, 1018, 0,
	1635, 0, 1019, 1503, 1633, 0, 0, 1636, 88, 1023,
	1024, 1025, 0, 0, 1643, 0, 0, 0, 1034, 1645,
	0, 1634, 0, 1040, 1647, 351, 1041, 1042, 1043, 1044,
	0, 351, 490, 490, 490, 490, 1655, 490, 1654, 0,
	0, 0, 0, 0, 490, 0, 0, 0, 0, 0,
	1260, 0, 0, 0, 0, 1651, 0, 0, 0, 0,
	0, 47, 0, 0, 832, 0, 0, 1550, 0, 0,
	1551, 0, 0, 0, 1554, 0, 558, 0, 0, 560,
	0, 0, 0, 0, 0, 0, 0, 0, 1484, 1260,
	0, 0, 0, 86, 0, 0, 1260, 1260, 0, 1586,
	86, 643, 86, 0, 0, 1592, 570, 0, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 1642, 585, 587,
	587, 587, 587, 587, 587, 587, 587, 0, 615, 616,
	617, 618, 0, 0, 0, 0, 0, 0, 0, 638,
	537, 536, 546, 547, 539, 540, 541, 542, 543, 544,
	545, 538, 0, 0, 548, 0, 0, 0, 1260, 0,
	0, 0, 1625, 0, 0, 0, 0, 0, 0, 0,
	0, 775, 776, 0, 0, 0, 0, 0, 0, 0,
	0, 1363, 0, 0, 0, 0, 0, 0, 0, 933,
	934, 936, 937, 938, 0, 939, 940, 0, 0, 0,
	0, 0, 0, 1202, 0, 0, 0, 0, 0, 345,
	0, 0, 949, 950, 951, 1484, 952, 0, 0, 0,
	0, 0, 0, 0, 573, 0, 0, 829, 830, 86,
	0, 0, 1199, 0, 0, 86, 0, 86, 0, 0,
	86, 0, 0, 86, 0, 0, 0, 740, 0, 0,
	1249, 0, 537, 536, 546, 547, 539, 540, 541, 542,
	543, 544, 545, 538, 0, 0, 548, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 490, 490,
	490, 490, 490, 490, 490, 490, 740, 0, 0, 1017,
	0, 0, 490, 490, 0, 0, 0, 0, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 537,
	536, 546, 547, 539, 540, 541, 542, 543, 544, 545,
	538, 0, 0, 548, 0, 0, 0, 0, 265, 227,
	0, 0, 0, 265, 265, 0, 0, 833, 833, 265,
	0, 0, 0, 833, 0, 549, 0, 0, 0, 0,
	0, 0, 0, 237, 0, 0, 0, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1329, 574, 0, 265, 265, 265, 265, 1331, 86, 0,
	833, 86, 86, 86, 86, 86, 0, 0, 0, 1340,
	1341, 1342, 0, 866, 1345, 596, 86, 0, 995, 996,
	643, 511, 0, 0, 222, 86, 86, 1355, 1356, 1357,
	224, 1360, 0, 0, 0, 0, 0, 230, 226, 0,
	332, 332, 332, 332, 332, 0, 0, 0, 598, 0,
	0, 0, 0, 0, 0, 638, 0, 872, 0, 1124,
	0, 0, 0, 0, 332, 0, 0, 228, 0, 0,
	232, 0, 0, 0, 0, 0, 1394, 549, 0, 0,
	0, 0, 0, 0, 1022, 603, 604, 605, 606, 607,
	608, 609, 610, 611, 612, 0, 0, 0, 0, 1039,
	0, 0, 0, 0, 0, 86, 599, 0, 86, 0,
	86, 0, 0, 86, 613, 597, 0, 0, 0, 0,
	0, 602, 0, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 740, 0,
	0, 490, 1429, 490, 549, 0, 0, 0, 0, 0,
	265, 0, 0, 490, 0, 0, 0, 0, 1440, 1441,
	1442, 225, 0, 233, 234, 235, 236, 240, 0, 0,
	0, 0, 239, 238, 0, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 0, 0, 265, 0,
	0, 0, 1010, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 0, 0, 1492, 1493, 1494,
	1495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1284,
	1286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1049, 1050, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1544,
	0, 0, 332, 0, 1549, 0, 0, 0, 1226, 0,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1241, 1242, 0, 0, 1243, 1569, 0,
	1245, 0, 0, 0, 0, 0, 0, 0, 0, 1332,
	1333, 1590, 1334, 0, 0, 0, 1336, 0, 1338, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1188, 1189, 0, 0, 0, 0, 0, 0, 86, 47,
	0, 0, 0, 0, 1373, 1374, 0, 0, 265, 0,
	0, 0, 0, 0, 0, 0, 0, 696, 0, 265,
	0, 0, 0, 0, 0, 0, 490, 0, 0, 740,
	0, 0, 0, 0, 0, 0, 0, 0, 1641, 0,
	0, 0, 0, 0, 833, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1326, 1658, 1659,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1234, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 681, 0, 0, 0, 0, 0,
	0, 1246, 1247, 1248, 0, 0, 0, 1351, 0, 0,
	0, 0, 0, 0, 573, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 697, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1276, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 1283, 0, 0, 0, 0, 1386, 0, 0, 0,
	0, 0, 0, 0, 603, 604, 605, 606, 607, 608,
	609, 610, 611, 612, 86, 713, 714, 0, 715, 716,
	717, 719, 718, 698, 699, 700, 704, 702, 701, 703,
	675, 677, 86, 613, 676, 682, 678, 679, 680, 694,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 695, 705, 706, 707, 708, 709, 710, 711, 712,
	23, 24, 48, 26, 27, 0, 0, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 0, 0, 0, 42,
	0, 0, 0, 28, 0, 0, 0, 643, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 0, 37, 0, 0, 0, 50, 0, 0, 0,
	0, 0, 614, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 30, 31, 33, 32,
	35, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1525,
	36, 43, 44, 0, 0, 45, 46, 34, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1542, 573, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 38, 39, 0, 40, 41,
	0, 1234, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1587, 0, 0, 0, 0,
	0, 0, 1469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1234, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 1637,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1597, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1632, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 443, 433, 0,
	403, 445, 377, 392, 453, 394, 395, 425, 361, 411,
	152, 389, 91, 380, 355, 386, 356, 378, 405, 115,
	376, 435, 414, 128, 451, 131, 419, 0, 174, 140,
	0, 0, 407, 437, 409, 431, 402, 426, 368, 418,
	446, 390, 422, 447, 0, 0, 0, 350, 0, 894,
	895, 0, 0, 0, 0, 1652, 104, 0, 421, 442,
	388, 454, 424, 354, 420, 0, 359, 362, 452, 440,
	383, 384, 1080, 0, 0, 0, 0, 0, 0, 406,
	410, 428, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 381, 0, 417, 0, 0, 0, 365, 360, 0,
	404, 0, 0, 0, 367, 0, 382, 429, 0, 352,
	432, 438, 401, 201, 441, 398, 397, 159, 0, 107,
	0, 180, 119, 391, 129, 427, 444, 408, 436, 379,
	387, 109, 385, 166, 153, 192, 416, 154, 164, 132,
	184, 160, 191, 202, 203, 182, 200, 169, 99, 147,
	89, 158, 165, 0, 108, 0, 214, 215, 216, 217,
	218, 219, 220, 92, 181, 190, 105, 170, 95, 188,
	177, 179, 138, 124, 125, 172, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 178, 141, 185, 186, 110,
	211, 112, 111, 176, 100, 198, 199, 97, 101, 197,
	146, 151, 149, 196, 183, 189, 139, 136, 0, 96,
	187, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 357, 0,
	175, 194, 212, 213, 358, 375, 439, 204, 205, 206,
	207, 0, 0, 0, 145, 102, 122, 171, 126, 133,
	162, 210, 423, 167, 106, 193, 173, 371, 374, 369,
	370, 412, 413, 448, 449, 450, 430, 366, 0, 372,
	373, 0, 434, 123, 415, 90, 98, 130, 208, 209,
	0, 161, 117, 195, 393, 353, 396, 0, 0, 0,
	0, 0, 0, 0, 363, 364, 168, 400, 0, 103,
	443, 433, 0, 403, 445, 377, 392, 453, 394, 395,
	425, 361, 411, 152, 389, 91, 380, 355, 386, 356,
	378, 405, 115, 376, 435, 414, 128, 451, 131, 419,
	0, 174, 140, 0, 0, 407, 437, 409, 431, 402,
	426, 368, 418, 446, 390, 422, 447, 0, 0, 0,
	350, 0, 894, 895, 0, 0, 0, 0, 0, 104,
	0, 421, 442, 388, 454, 424, 354, 420, 0, 359,
	362, 452, 440, 383, 384, 0, 0, 0, 0, 0,
	0, 0, 406, 410, 428, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 381, 0, 417, 0, 0, 0,
	365, 360, 0, 404, 0, 0, 0, 367, 0, 382,
	429, 0, 352, 432, 438, 401, 201, 441, 398, 397,
	159, 0, 107, 0, 180, 119, 391, 129, 427, 444,
	408, 436, 379, 387, 109, 385, 166, 153, 192, 416,
	154, 164, 132, 184, 160, 191, 202, 203, 182, 200,
	169, 99, 147, 89, 158, 165, 0, 108, 0, 214,
	215, 216, 217, 218, 219, 220, 92, 181, 190, 105,
	170, 95, 188, 177, 179, 138, 124, 125, 172, 93,
	94, 0, 163, 114, 157, 118, 113, 150, 178, 141,
	185, 186, 110, 211, 112, 111, 176, 100, 198, 199,
	97, 101, 197, 146, 151, 149, 196, 183, 189, 139,
	136, 0, 96, 187, 137, 135, 127, 0, 116, 120,
	155, 134, 156, 121, 143, 142, 144, 0, 148, 0,
	0, 357, 0, 175, 194, 212, 213, 358, 375, 439,
	204, 205, 206, 207, 0, 0, 0, 145, 102, 122,
	171, 126, 133, 162, 210, 423, 167, 106, 193, 173,
	371, 374, 369, 370, 412, 413, 448, 449, 450, 430,
	366, 0, 372, 373, 0, 434, 123, 415, 90, 98,
	130, 208, 209, 0, 161, 117, 195, 393, 353, 396,
	0, 0, 0, 0, 0, 0, 0, 363, 364, 168,
	400, 0, 103, 443, 433, 0, 403, 445, 377, 392,
	453, 394, 395, 425, 361, 411, 152, 389, 91, 380,
	355, 386, 356, 378, 405, 115, 376, 435, 414, 128,
	451, 131, 419, 0, 174, 140, 0, 0, 407, 437,
	409, 431, 402, 426, 368, 418, 446, 390, 422, 447,
	0, 0, 0, 350, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 421, 442, 388, 454, 424, 354,
	420, 0, 359, 362, 452, 440, 383, 384, 0, 0,
	0, 0, 0, 0, 0, 406, 410, 428, 399, 0,
	0, 0, 0, 0, 0, 1195, 0, 381, 0, 417,
	0, 0, 0, 365, 360, 0, 404, 0, 0, 0,
	367, 0, 382, 429, 0, 352, 432, 438, 401, 201,
	441, 398, 397, 159, 0, 107, 0, 180, 119, 391,
	129, 427, 444, 408, 436, 379, 387, 109, 385, 166,
	153, 192, 416, 154, 164, 132, 184, 160, 191, 202,
	203, 182, 200, 169, 99, 147, 89, 158, 165, 0,
	108, 0, 214, 215, 216, 217, 218, 219, 220, 92,
	181, 190, 105, 170, 95, 188, 177, 179, 138, 124,
	125, 172, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 178, 141, 185, 186, 110, 211, 112, 111, 176,
	100, 198, 199, 97, 101, 197, 146, 151, 149, 196,
	183, 189, 139, 136, 0, 96, 187, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 357, 0, 175, 194, 212, 213,
	358, 375, 439, 204, 205, 206, 207, 0, 0, 0,
	145, 102, 122, 171, 126, 133, 162, 210, 423, 167,
	106, 193, 173, 371, 374, 369, 370, 412, 413, 448,
	449, 450, 430, 366, 0, 372, 373, 0, 434, 123,
	415, 90, 98, 130, 208, 209, 0, 161, 117, 195,
	393, 353, 396, 0, 0, 0, 0, 0, 0, 0,
	363, 364, 168, 400, 0, 103, 443, 433, 0, 403,
	445, 377, 392, 453, 394, 395, 425, 361, 411, 152,
	389, 91, 380, 355, 386, 356, 378, 405, 115, 376,
	435, 414, 128, 451, 131, 419, 0, 174, 140, 0,
	0, 407, 437, 409, 431, 402, 426, 368, 418, 446,
	390, 422, 447, 50, 0, 0, 350, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 421, 442, 388,
	454, 424, 354, 420, 0, 359, 362, 452, 440, 383,
	384, 0, 0, 0, 0, 0, 0, 0, 406, 410,
	428, 399, 0, 0, 0, 0, 0, 0, 0, 0,
	381, 0, 417, 0, 0, 0, 365, 360, 0, 404,
	0, 0, 0, 367, 0, 382, 429, 0, 352, 432,
	438, 401, 201, 441, 398, 397, 159, 0, 107, 0,
	180, 119, 391, 129, 427, 444, 408, 436, 379, 387,
	109, 385, 166, 153, 192, 416, 154, 164, 132, 184,
	160, 191, 202, 203, 182, 200, 169, 99, 147, 89,
	158, 165, 0, 108, 0, 214, 215, 216, 217, 218,
	219, 220, 92, 181, 190, 105, 170, 95, 188, 177,
	179, 138, 124, 125, 172, 93, 94, 0, 163, 114,
	157, 118, 113, 150, 178, 141, 185, 186, 110, 211,
	112, 111, 176, 100, 198, 199, 97, 101, 197, 146,
	151, 149, 196, 183, 189, 139, 136, 0, 96, 187,
	137, 135, 127, 0, 116, 120, 155, 134, 156, 121,
	143, 142, 144, 0, 148, 0, 0, 357, 0, 175,
	194, 212, 213, 358, 375, 439, 204, 205, 206, 207,
	0, 0, 0, 145, 102, 122, 171, 126, 133, 162,
	210, 423, 167, 106, 193, 173, 371, 374, 369, 370,
	412, 413, 448, 449, 450, 430, 366, 0, 372, 373,
	0, 434, 123, 415, 90, 98, 130, 208, 209, 0,
	161, 117, 195, 393, 353, 396, 0, 0, 0, 0,
	0, 0, 0, 363, 364, 168, 400, 0, 103, 443,
	433, 0, 403, 445, 377, 392, 453, 394, 395, 425,
	361, 411, 152, 389, 91, 380, 355, 386, 356, 378,
	405, 115, 376, 435, 414, 128, 451, 131, 419, 0,
	174, 140, 0, 0, 407, 437, 409, 431, 402, 426,
	368, 418, 446, 390, 422, 447, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	421, 442, 388, 454, 424, 354, 420, 0, 359, 362,
	452, 440, 383, 384, 0, 0, 0, 0, 0, 0,
	0, 406, 410, 428, 399, 0, 0, 0, 0, 0,
	0, 783, 0, 381, 0, 417, 0, 0, 0, 365,
	360, 0, 404, 0, 0, 0, 367, 0, 382, 429,
	0, 352, 432, 438, 401, 201, 441, 398, 397, 159,
	0, 107, 0, 180, 119, 391, 129, 427, 444, 408,
	436, 379, 387, 109, 385, 166, 153, 192, 416, 154,
	164, 132, 184, 160, 191, 202, 203, 182, 200, 169,
	99, 147, 89, 158, 165, 0, 108, 0, 214, 215,
	216, 217, 218, 219, 220, 92, 181, 190, 105, 170,
	95, 188, 177, 179, 138, 124, 125, 172, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 178, 141, 185,
	186, 110, 211, 112, 111, 176, 100, 198, 199, 97,
	101, 197, 146, 151, 149, 196, 183, 189, 139, 136,
	0, 96, 187, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	357, 0, 175, 194, 212, 213, 358, 375, 439, 204,
	205, 206, 207, 0, 0, 0, 145, 102, 122, 171,
	126, 133, 162, 210, 423, 167, 106, 193, 173, 371,
	374, 369, 370, 412, 413, 448, 449, 450, 430, 366,
	0, 372, 373, 0, 434, 123, 415, 90, 98, 130,
	208, 209, 0, 161, 117, 195, 393, 353, 396, 0,
	0, 0, 0, 0, 0, 0, 363, 364, 168, 400,
	0, 103, 443, 433, 0, 403, 445, 377, 392, 453,
	394, 395, 425, 361, 411, 152, 389, 91, 380, 355,
	386, 356, 378, 405, 115, 376, 435, 414, 128, 451,
	131, 419, 0, 174, 140, 0, 0, 407, 437, 409,
	431, 402, 426, 368, 418, 446, 390, 422, 447, 0,
	0, 0, 350, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 421, 442, 388, 454, 424, 354, 420,
	0, 359, 362, 452, 440, 383, 384, 0, 0, 0,
	0, 0, 0, 0, 406, 410, 428, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 381, 0, 417, 0,
	0, 0, 365, 360, 0, 404, 0, 0, 0, 367,
	0, 382, 429, 0, 352, 432, 438, 401, 201, 441,
	398, 397, 159, 0, 107, 0, 180, 119, 391, 129,
	427, 444, 408, 436, 379, 387, 109, 385, 166, 153,
	192, 416, 154, 164, 132, 184, 160, 191, 202, 203,
	182, 200, 169, 99, 147, 89, 158, 165, 0, 108,
	0, 214, 215, 216, 217, 218, 219, 220, 92, 181,
	190, 105, 170, 95, 188, 177, 179, 138, 124, 125,
	172, 93, 94, 0, 163, 114, 157, 118, 113, 150,
	178, 141, 185, 186, 110, 211, 112, 111, 176, 100,
	198, 199, 97, 101, 197, 146, 151, 149, 196, 183,
	189, 139, 136, 0, 96, 187, 137, 135, 127, 0,
	116, 120, 155, 134, 156, 121, 143, 142, 144, 0,
	148, 0, 0, 357, 0, 175, 194, 212, 213, 358,
	375, 439, 204, 205, 206, 207, 0, 0, 0, 145,
	102, 122, 171, 126, 133, 162, 210, 423, 167, 106,
	193, 173, 371, 374, 369, 370, 412, 413, 448, 449,
	450, 430, 366, 0, 372, 373, 0, 434, 123, 415,
	90, 98, 130, 208, 209, 0, 161, 117, 195, 393,
	353, 396, 0, 0, 0, 0, 0, 0, 0, 363,
	364, 168, 400, 0, 103, 443, 433, 0, 403, 445,
	377, 392, 453, 394, 395, 425, 361, 411, 152, 389,
	91, 380, 355, 386, 356, 378, 405, 115, 376, 435,
	414, 128, 451, 131, 419, 0, 174, 140, 0, 0,
	407, 437, 409, 431, 402, 426, 368, 418, 446, 390,
	422, 447, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 421, 442, 388, 454,
	424, 354, 420, 0, 359, 362, 452, 440, 383, 384,
	0, 0, 0, 0, 0, 0, 0, 406, 410, 428,
	399, 0, 0, 0, 0, 0, 0, 0, 0, 381,
	0, 417, 0, 0, 0, 365, 360, 0, 404, 0,
	0, 0, 367, 0, 382, 429, 0, 352, 432, 438,
	401, 201, 441, 398, 397, 159, 0, 107, 0, 180,
	119, 391, 129, 427, 444, 408, 436, 379, 387, 109,
	385, 166, 153, 192, 416, 154, 164, 132, 184, 160,
	191, 202, 203, 182, 200, 169, 99, 147, 89, 158,
	165, 0, 108, 0, 214, 215, 216, 217, 218, 219,
	220, 92, 181, 190, 105, 170, 95, 188, 177, 179,
	138, 124, 125, 172, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 178, 141, 185, 186, 110, 211, 112,
	111, 176, 100, 198, 199, 97, 101, 197, 146, 151,
	149, 196, 183, 189, 139, 136, 0, 96, 187, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 357, 0, 175, 194,
	212, 213, 358, 375, 439, 204, 205, 206, 207, 0,
	0, 0, 145, 102, 122, 171, 126, 133, 162, 210,
	423, 167, 106, 193, 173, 371, 374, 369, 370, 412,
	413, 448, 449, 450, 430, 366, 0, 372, 373, 0,
	434, 123, 415, 90, 98, 130, 208, 209, 0, 161,
	117, 195, 393, 353, 396, 0, 0, 0, 0, 0,
	0, 0, 363, 364, 168, 400, 0, 103, 443, 433,
	0, 403, 445, 377, 392, 453, 394, 395, 425, 361,
	411, 152, 389, 91, 380, 355, 386, 356, 378, 405,
	115, 376, 435, 414, 128, 451, 131, 419, 0, 174,
	140, 0, 0, 407, 437, 409, 431, 402, 426, 368,
	418, 446, 390, 422, 447, 0, 0, 0, 350, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 421,
	442, 388, 454, 424, 354, 420, 0, 359, 362, 452,
	440, 383, 384, 0, 0, 0, 0, 0, 0, 0,
	406, 410, 428, 399, 0, 0, 0, 0, 0, 0,
	0, 0, 381, 0, 417, 0, 0, 0, 365, 360,
	0, 404, 0, 0, 0, 367, 0, 382, 429, 0,
	352, 432, 438, 401, 201, 441, 398, 397, 159, 0,
	107, 0, 180, 119, 391, 129, 427, 444, 408, 436,
	379, 387, 109, 385, 166, 153, 192, 416, 154, 164,
	132, 184, 160, 191, 202, 203, 182, 200, 169, 99,
	147, 89, 158, 165, 0, 108, 0, 214, 215, 216,
	217, 218, 219, 220, 92, 181, 190, 105, 170, 95,
	188, 177, 179, 138, 124, 125, 172, 93, 94, 0,
	163, 114, 157, 118, 113, 150, 178, 141, 185, 186,
	110, 211, 112, 111, 176, 100, 198, 199, 97, 348,
	197, 146, 151, 149, 196, 183, 189, 139, 136, 0,
	96, 187, 137, 135, 127, 0, 116, 120, 155, 134,
	156, 121, 143, 142, 144, 0, 148, 0, 0, 357,
	0, 175, 194, 212, 213, 358, 375, 439, 204, 205,
	206, 207, 0, 0, 0, 349, 347, 122, 171, 126,
	133, 162, 210, 423, 167, 106, 193, 173, 371, 374,
	369, 370, 412, 413, 448, 449, 450, 430, 366, 0,
	372, 373, 0, 434, 123, 415, 90, 98, 130, 208,
	209, 0, 161, 117, 195, 393, 353, 396, 0, 0,
	0, 0, 0, 0, 0, 363, 364, 168, 400, 0,
	103, 443, 433, 0, 403, 445, 377, 392, 453, 394,
	395, 425, 361, 411, 152, 389, 91, 380, 355, 386,
	356, 378, 405, 115, 376, 435, 414, 128, 451, 131,
	419, 0, 174, 140, 0, 0, 407, 437, 409, 431,
	402, 426, 368, 418, 446, 390, 422, 447, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 421, 442, 388, 454, 424, 354, 420, 0,
	359, 362, 452, 440, 383, 384, 0, 0, 0, 0,
	0, 0, 0, 406, 410, 428, 399, 0, 0, 0,
	0, 0, 0, 0, 0, 381, 0, 417, 0, 0,
	0, 365, 360, 0, 404, 0, 0, 0, 367, 0,
	382, 429, 0, 352, 432, 438, 401, 201, 441, 398,
	397, 159, 0, 107, 0, 180, 119, 391, 129, 427,
	444, 408, 436, 379, 387, 109, 385, 166, 153, 192,
	416, 154, 164, 132, 184, 160, 191, 202, 203, 182,
	200, 169, 99, 147, 89, 158, 165, 0, 108, 0,
	214, 215, 216, 217, 218, 219, 220, 92, 181, 190,
	105, 170, 95, 188, 177, 179, 138, 124, 125, 172,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 178,
	141, 185, 186, 110, 211, 112, 111, 176, 100, 198,
	199, 97, 101, 197, 146, 151, 149, 196, 183, 189,
	139, 136, 0, 96, 187, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 357, 0, 175, 194, 212, 213, 358, 375,
	439, 204, 205, 206, 207, 0, 0, 0, 145, 102,
	122, 171, 126, 133, 162, 210, 423, 167, 106, 193,
	173, 371, 374, 369, 370, 412, 413, 448, 449, 450,
	430, 366, 0, 372, 373, 0, 434, 123, 415, 90,
	98, 130, 208, 209, 0, 161, 117, 195, 393, 353,
	396, 0, 0, 0, 0, 0, 0, 0, 363, 364,
	168, 400, 0, 103, 443, 433, 0, 403, 445, 377,
	392, 453, 394, 395, 425, 361, 411, 152, 389, 91,
	380, 355, 386, 356, 378, 405, 115, 376, 435, 414,
	128, 451, 131, 419, 0, 174, 140, 0, 0, 407,
	437, 409, 431, 402, 426, 368, 418, 446, 390, 422,
	447, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 421, 442, 388, 454, 424,
	354, 420, 0, 359, 362, 452, 440, 383, 384, 0,
	0, 0, 0, 0, 0, 0, 406, 410, 428, 399,
	0, 0, 0, 0, 0, 0, 0, 0, 381, 0,
	417, 0, 0, 0, 365, 360, 0, 404, 0, 0,
	0, 367, 0, 382, 429, 0, 352, 432, 438, 401,
	201, 441, 398, 397, 159, 0, 107, 0, 180, 119,
	391, 129, 427, 444, 408, 436, 379, 387, 109, 385,
	166, 153, 192, 416, 154, 164, 132, 184, 160, 191,
	202, 203, 182, 200, 169, 99, 147, 89, 158, 165,
	0, 108, 0, 214, 215, 216, 217, 218, 219, 220,
	92, 181, 653, 105, 170, 95, 188, 177, 179, 138,
	124, 125, 172, 93, 94, 0, 163, 114, 157, 118,
	113, 150, 178, 141, 185, 186, 110, 211, 112, 111,
	176, 100, 198, 199, 97, 348, 197, 146, 151, 149,
	196, 183, 189, 139, 136, 0, 96, 187, 137, 135,
	127, 0, 116, 120, 155, 134, 156, 121, 143, 142,
	144, 0, 148, 0, 0, 357, 0, 175, 194, 212,
	213, 358, 375, 439, 204, 205, 206, 207, 0, 0,
	0, 349, 347, 122, 171, 126, 133, 162, 210, 423,
	167, 106, 193, 173, 371, 374, 369, 370, 412, 413,
	448, 449, 450, 430, 366, 0, 372, 373, 0, 434,
	123, 415, 90, 98, 130, 208, 209, 0, 161, 117,
	195, 393, 353, 396, 0, 0, 0, 0, 0, 0,
	0, 363, 364, 168, 400, 0, 103, 443, 433, 0,
	403, 445, 377, 392, 453, 394, 395, 425, 361, 411,
	152, 389, 91, 380, 355, 386, 356, 378, 405, 115,
	376, 435, 414, 128, 451, 131, 419, 0, 174, 140,
	0, 0, 407, 437, 409, 431, 402, 426, 368, 418,
	446, 390, 422, 447, 0, 0, 0, 350, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 421, 442,
	388, 454, 424, 354, 420, 0, 359, 362, 452, 440,
	383, 384, 0, 0, 0, 0, 0, 0, 0, 406,
	410, 428, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 381, 0, 417, 0, 0, 0, 365, 360, 0,
	404, 0, 0, 0, 367, 0, 382, 429, 0, 352,
	432, 438, 401, 201, 441, 398, 397, 159, 0, 107,
	0, 180, 119, 391, 129, 427, 444, 408, 436, 379,
	387, 109, 385, 166, 153, 192, 416, 154, 164, 132,
	184, 160, 191, 202, 203, 182, 200, 169, 99, 147,
	89, 158, 165, 0, 108, 0, 214, 215, 216, 217,
	218, 219, 220, 92, 181, 339, 105, 170, 95, 188,
	177, 179, 138, 124, 125, 172, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 178, 141, 185, 186, 110,
	211, 112, 111, 176, 100, 198, 199, 97, 348, 197,
	146, 151, 149, 196, 183, 189, 139, 136, 0, 96,
	187, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 357, 0,
	175, 194, 212, 213, 358, 375, 439, 204, 205, 206,
	207, 0, 0, 0, 349, 347, 342, 341, 126, 133,
	162, 210, 423, 167, 106, 193, 173, 371, 374, 369,
	370, 412, 413, 448, 449, 450, 430, 366, 0, 372,
	373, 0, 434, 123, 415, 90, 98, 130, 208, 209,
	0, 161, 117, 195, 393, 353, 396, 0, 0, 0,
	0, 0, 0, 0, 363, 364, 168, 400, 152, 103,
	91, 0, 0, 272, 0, 0, 0, 115, 269, 0,
	0, 128, 311, 131, 0, 0, 174, 140, 0, 0,
	0, 0, 302, 303, 0, 0, 0, 0, 0, 0,
	884, 0, 50, 0, 0, 270, 290, 289, 292, 293,
	294, 295, 0, 0, 104, 291, 296, 297, 298, 885,
	0, 0, 267, 283, 0, 310, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 281, 0, 0, 0,
	0, 323, 0, 282, 0, 0, 278, 279, 284, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 0, 321, 159, 0, 107, 0, 180,
	119, 0, 129, 0, 0, 0, 0, 0, 0, 109,
	0, 166, 153, 192, 0, 154, 164, 132, 184, 160,
	191, 202, 203, 182, 200, 169, 99, 147, 89, 158,
	165, 0, 108, 0, 214, 215, 216, 217, 218, 219,
	220, 92, 181, 190, 105, 170, 95, 188, 177, 179,
	138, 124, 125, 172, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 178, 141, 185, 186, 110, 211, 112,
	111, 176, 100, 198, 199, 97, 101, 197, 146, 151,
	149, 196, 183, 189, 139, 136, 0, 96, 187, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 175, 194,
	212, 213, 0, 0, 0, 204, 205, 206, 207, 0,
	0, 0, 145, 102, 122, 171, 126, 133, 162, 210,
	0, 167, 106, 193, 173, 312, 322, 318, 319, 316,
	317, 315, 314, 313, 324, 304, 305, 306, 307, 309,
	0, 123, 308, 90, 98, 130, 208, 209, 0, 161,
	117, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	152, 0, 91, 820, 168, 272, 320, 103, 0, 115,
	269, 0, 0, 128, 311, 131, 0, 0, 174, 140,
	0, 0, 0, 0, 302, 303, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 270, 290, 289,
	292, 293, 294, 295, 0, 0, 104, 291, 296, 297,
	298, 0, 0, 0, 267, 283, 0, 310, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 281, 263,
	0, 0, 0, 323, 0, 282, 0, 0, 278, 279,
	284, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 321, 159, 0, 107,
	0, 180, 119, 0, 129, 0, 0, 0, 0, 0,
	0, 109, 0, 166, 153, 192, 0, 154, 164, 132,
	184, 160, 191, 202, 203, 182, 200, 169, 99, 147,
	89, 158, 165, 0, 108, 0, 214, 215, 216, 217,
	218, 219, 220, 92, 181, 190, 105, 170, 95, 188,
	177, 179, 138, 124, 125, 172, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 178, 141, 185, 186, 110,
	211, 112, 111, 176, 100, 198, 199, 97, 101, 197,
	146, 151, 149, 196, 183, 189, 139, 136, 0, 96,
	187, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 0, 0,
	175, 194, 212, 213, 0, 0, 0, 204, 205, 206,
	207, 0, 0, 0, 145, 102, 122, 171, 126, 133,
	162, 210, 0, 167, 106, 193, 173, 312, 322, 318,
	319, 316, 317, 315, 314, 313, 324, 304, 305, 306,
	307, 309, 0, 123, 308, 90, 98, 130, 208, 209,
	0, 161, 117, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 152, 0, 91, 0, 168, 272, 320, 103,
	0, 115, 269, 0, 0, 128, 311, 131, 0, 0,
	174, 140, 0, 0, 0, 0, 302, 303, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 503, 270,
	290, 289, 292, 293, 294, 295, 0, 0, 104, 291,
	296, 297, 298, 0, 0, 0, 267, 283, 0, 310,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	281, 0, 0, 0, 0, 323, 0, 282, 0, 0,
	278, 279, 284, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 0, 321, 159,
	0, 107, 0, 180, 119, 0, 129, 0, 0, 0,
	0, 0, 0, 109, 0, 166, 153, 192, 0, 154,
	164, 132, 184, 160, 191, 202, 203, 182, 200, 169,
	99, 147, 89, 158, 165, 0, 108, 0, 214, 215,
	216, 217, 218, 219, 220, 92, 181, 190, 105, 170,
	95, 188, 177, 179, 138, 124, 125, 172, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 178, 141, 185,
	186, 110, 211, 112, 111, 176, 100, 198, 199, 97,
	101, 197, 146, 151, 149, 196, 183, 189, 139, 136,
	0, 96, 187, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	0, 0, 175, 194, 212, 213, 0, 0, 0, 204,
	205, 206, 207, 0, 0, 0, 145, 102, 122, 171,
	126, 133, 162, 210, 0, 167, 106, 193, 173, 312,
	322, 318, 319, 316, 317, 315, 314, 313, 324, 304,
	305, 306, 307, 309, 0, 123, 308, 90, 98, 130,
	208, 209, 0, 161, 117, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 152, 0, 91, 0, 168, 272,
	320, 103, 0, 115, 269, 0, 0, 128, 311, 131,
	0, 0, 174, 140, 0, 0, 0, 0, 302, 303,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 270, 290, 289, 292, 293, 294, 295, 0, 0,
	104, 291, 296, 297, 298, 0, 0, 0, 267, 283,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 281, 263, 0, 0, 0, 323, 0, 282,
	0, 0, 278, 279, 284, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 0, 0,
	321, 159, 0, 107, 0, 180, 119, 0, 129, 0,
	0, 0, 0, 0, 0, 109, 0, 166, 153, 192,
	0, 154, 164, 132, 184, 160, 191, 202, 203, 182,
	200, 169, 99, 147, 89, 158, 165, 0, 108, 0,
	214, 215, 216, 217, 218, 219, 220, 92, 181, 190,
	105, 170, 95, 188, 177, 179, 138, 124, 125, 172,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 178,
	141, 185, 186, 110, 211, 112, 111, 176, 100, 198,
	199, 97, 101, 197, 146, 151, 149, 196, 183, 189,
	139, 136, 0, 96, 187, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 0, 0, 175, 194, 212, 213, 0, 0,
	0, 204, 205, 206, 207, 0, 0, 0, 145, 102,
	122, 171, 126, 133, 162, 210, 0, 167, 106, 193,
	173, 312, 322, 318, 319, 316, 317, 315, 314, 313,
	324, 304, 305, 306, 307, 309, 0, 123, 308, 90,
	98, 130, 208, 209, 23, 161, 117, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 152, 0, 91, 0,
	168, 272, 320, 103, 0, 115, 269, 0, 0, 128,
	311, 131, 0, 0, 174, 140, 0, 0, 0, 0,
	302, 303, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 270, 290, 289, 292, 293, 294, 295,
	0, 0, 104, 291, 296, 297, 298, 0, 0, 0,
	267, 283, 0, 310, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 281, 0, 0, 0, 0, 323,
	0, 282, 0, 0, 278, 279, 284, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 201,
	0, 0, 321, 159, 0, 107, 0, 180, 119, 0,
	129, 0, 0, 0, 0, 0, 0, 109, 0, 166,
	153, 192, 0, 154, 164, 132, 184, 160, 191, 202,
	203, 182, 200, 169, 99, 147, 89, 158, 165, 0,
	108, 0, 214, 215, 216, 217, 218, 219, 220, 92,
	181, 190, 105, 170, 95, 188, 177, 179, 138, 124,
	125, 172, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 178, 141, 185, 186, 110, 211, 112, 111, 176,
	100, 198, 199, 97, 101, 197, 146, 151, 149, 196,
	183, 189, 139, 136, 0, 96, 187, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 0, 0, 175, 194, 212, 213,
	0, 0, 0, 204, 205, 206, 207, 0, 0, 0,
	145, 102, 122, 171, 126, 133, 162, 210, 0, 167,
	106, 193, 173, 312, 322, 318, 319, 316, 317, 315,
	314, 313, 324, 304, 305, 306, 307, 309, 0, 123,
	308, 90, 98, 130, 208, 209, 0, 161, 117, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 0,
	91, 0, 168, 272, 320, 103, 0, 115, 269, 0,
	0, 128, 311, 131, 0, 0, 174, 140, 0, 0,
	0, 0, 302, 303, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 270, 290, 289, 292, 293,
	294, 295, 0, 0, 104, 291, 296, 297, 298, 0,
	0, 0, 267, 283, 0, 310, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 281, 0, 0, 0,
	0, 323, 0, 282, 0, 0, 278, 279, 284, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 0, 321, 159, 0, 107, 0, 180,
	119, 0, 129, 0, 0, 0, 0, 0, 0, 109,
	0, 166, 153, 192, 0, 154, 164, 132, 184, 160,
	191, 202, 203, 182, 200, 169, 99, 147, 89, 158,
	165, 0, 108, 0, 214, 215, 216, 217, 218, 219,
	220, 92, 181, 190, 105, 170, 95, 188, 177, 179,
	138, 124, 125, 172, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 178, 141, 185, 186, 110, 211, 112,
	111, 176, 100, 198, 199, 97, 101, 197, 146, 151,
	149, 196, 183, 189, 139, 136, 0, 96, 187, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 175, 194,
	212, 213, 0, 0, 0, 204, 205, 206, 207, 0,
	0, 0, 145, 102, 122, 171, 126, 133, 162, 210,
	0, 167, 106, 193, 173, 312, 322, 318, 319, 316,
	317, 315, 314, 313, 324, 304, 305, 306, 307, 309,
	0, 123, 308, 90, 98, 130, 208, 209, 0, 161,
	117, 195, 0, 0, 0, 0, 152, 0, 91, 0,
	0, 0, 0, 0, 168, 115, 320, 103, 0, 128,
	311, 131, 0, 0, 174, 140, 0, 0, 0, 0,
	302, 303, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 270, 290, 289, 292, 293, 294, 295,
	0, 0, 104, 291, 296, 297, 298, 0, 0, 0,
	0, 283, 0, 310, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 281, 0, 0, 0, 0, 323,
	0, 282, 0, 0, 278, 279, 284, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 201,
	0, 0, 321, 159, 0, 107, 0, 180, 119, 0,
	129, 0, 0, 0, 0, 0, 0, 109, 0, 166,
	153, 192, 1656, 154, 164, 132, 184, 160, 191, 202,
	203, 182, 200, 169, 99, 147, 89, 158, 165, 0,
	108, 0, 214, 215, 216, 217, 218, 219, 220, 92,
	181, 190, 105, 170, 95, 188, 177, 179, 138, 124,
	125, 172, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 178, 141, 185, 186, 110, 211, 112, 111, 176,
	100, 198, 199, 97, 101, 197, 146, 151, 149, 196,
	183, 189, 139, 136, 0, 96, 187, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 0, 0, 175, 194, 212, 213,
	0, 0, 0, 204, 205, 206, 207, 0, 0, 0,
	145, 102, 122, 171, 126, 133, 162, 210, 0, 167,
	106, 193, 173, 312, 322, 318, 319, 316, 317, 315,
	314, 313, 324, 304, 305, 306, 307, 309, 0, 123,
	308, 90, 98, 130, 208, 209, 0, 161, 117, 195,
	0, 0, 0, 0, 152, 0, 91, 0, 0, 0,
	0, 0, 168, 115, 320, 103, 0, 128, 311, 131,
	0, 0, 174, 140, 0, 0, 0, 0, 302, 303,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 270, 290, 289, 292, 293, 294, 295, 0, 0,
	104, 291, 296, 297, 298, 0, 0, 0, 0, 283,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 281, 0, 0, 0, 0, 323, 0, 282,
	0, 0, 278, 279, 284, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 0, 0,
	321, 159, 0, 107, 0, 180, 119, 0, 129, 0,
	0, 0, 0, 0, 0, 109, 0, 166, 153, 192,
	0, 154, 164, 132, 184, 160, 191, 202, 203, 182,
	200, 169, 99, 147, 89, 158, 165, 0, 108, 0,
	214, 215, 216, 217, 218, 219, 220, 92, 181, 190,
	105, 170, 95, 188, 177, 179, 138, 124, 125, 172,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 178,
	141, 185, 186, 110, 211, 112, 111, 176, 100, 198,
	199, 97, 101, 197, 146, 151, 149, 196, 183, 189,
	139, 136, 0, 96, 187, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 0, 0, 175, 194, 212, 213, 0, 0,
	0, 204, 205, 206, 207, 0, 0, 0, 145, 102,
	122, 171, 126, 133, 162, 210, 0, 167, 106, 193,
	173, 312, 322, 318, 319, 316, 317, 315, 314, 313,
	324, 304, 305, 306, 307, 309, 0, 123, 308, 90,
	98, 130, 208, 209, 0, 161, 117, 195, 0, 0,
	0, 0, 152, 0, 91, 0, 0, 0, 0, 0,
	168, 115, 320, 103, 0, 128, 0, 131, 0, 0,
	174, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 537, 536, 546, 547, 539,
	540, 541, 542, 543, 544, 545, 538, 0, 0, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 0, 0, 159,
	0, 107, 0, 180, 119, 0, 129, 0, 0, 0,
	0, 0, 0, 109, 0, 166, 153, 192, 0, 154,
	164, 132, 184, 160, 191, 202, 203, 182, 200, 169,
	99, 147, 89, 158, 165, 0, 108, 0, 214, 215,
	216, 217, 218, 219, 220, 92, 181, 190, 105, 170,
	95, 188, 177, 179, 138, 124, 125, 172, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 178, 141, 185,
	186, 110, 211, 112, 111, 176, 100, 198, 199, 97,
	101, 197, 146, 151, 149, 196, 183, 189, 139, 136,
	0, 96, 187, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	0, 0, 175, 194, 212, 213, 0, 0, 0, 204,
	205, 206, 207, 0, 0, 0, 145, 102, 122, 171,
	126, 133, 162, 210, 0, 167, 106, 193, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 90, 98, 130,
	208, 209, 0, 161, 117, 195, 0, 0, 0, 0,
	152, 0, 91, 0, 525, 0, 0, 0, 168, 115,
	549, 103, 0, 128, 0, 131, 0, 0, 174, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 350, 0, 527,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 522, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 523,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 159, 0, 107,
	0, 180, 119, 0, 129, 0, 0, 0, 0, 0,
	0, 109, 0, 166, 153, 192, 0, 154, 164, 132,
	184, 160, 191, 202, 203, 182, 200, 169, 99, 147,
	89, 158, 165, 0, 108, 0, 214, 215, 216, 217,
	218, 219, 220, 92, 181, 190, 105, 170, 95, 188,
	177, 179, 138, 124, 125, 172, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 178, 141, 185, 186, 110,
	211, 112, 111, 176, 100, 198, 199, 97, 101, 197,
	146, 151, 149, 196, 183, 189, 139, 136, 0, 96,
	187, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 0, 0,
	175, 194, 212, 213, 0, 0, 0, 204, 205, 206,
	207, 0, 0, 0, 145, 102, 122, 171, 126, 133,
	162, 210, 0, 167, 106, 193, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 90, 98, 130, 208, 209,
	0, 161, 117, 195, 0, 152, 0, 91, 0, 642,
	0, 0, 0, 0, 115, 0, 168, 0, 128, 103,
	131, 0, 0, 174, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 644, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 201, 0,
	0, 0, 159, 0, 107, 0, 180, 119, 0, 129,
	0, 0, 0, 0, 0, 0, 109, 0, 166, 153,
	192, 0, 154, 164, 132, 184, 160, 191, 202, 203,
	182, 200, 169, 99, 147, 89, 158, 165, 0, 108,
	0, 214, 215, 216, 217, 218, 219, 220, 92, 181,
	190, 105, 170, 95, 188, 177, 179, 138, 124, 125,
	172, 93, 94, 0, 163, 114, 157, 118, 113, 150,
	178, 141, 185, 186, 110, 211, 112, 111, 176, 100,
	198, 199, 97, 101, 197, 146, 151, 149, 196, 183,
	189, 139, 136, 0, 96, 187, 137, 135, 127, 0,
	116, 120, 155, 134, 156, 121, 143, 142, 144, 0,
	148, 0, 0, 0, 0, 175, 194, 212, 213, 0,
	0, 0, 204, 205, 206, 207, 0, 0, 0, 145,
	102, 122, 171, 126, 133, 162, 210, 0, 167, 106,
	193, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	90, 98, 130, 208, 209, 23, 161, 117, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 152, 0, 91,
	0, 168, 0, 0, 103, 0, 115, 0, 0, 0,
	128, 0, 131, 0, 0, 174, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	201, 0, 0, 0, 159, 0, 107, 0, 180, 119,
	0, 129, 0, 0, 0, 0, 0, 0, 109, 0,
	166, 153, 192, 0, 154, 164, 132, 184, 160, 191,
	202, 203, 182, 200, 169, 99, 147, 89, 158, 165,
	0, 108, 0, 214, 215, 216, 217, 218, 219, 220,
	92, 181, 190, 105, 170, 95, 188, 177, 179, 138,
	124, 125, 172, 93, 94, 0, 163, 114, 157, 118,
	113, 150, 178, 141, 185, 186, 110, 211, 112, 111,
	176, 100, 198, 199, 97, 101, 197, 146, 151, 149,
	196, 183, 189, 139, 136, 0, 96, 187, 137, 135,
	127, 0, 116, 120, 155, 134, 156, 121, 143, 142,
	144, 0, 148, 0, 0, 0, 0, 175, 194, 212,
	213, 0, 0, 0, 204, 205, 206, 207, 0, 0,
	0, 145, 102, 122, 171, 126, 133, 162, 210, 0,
	167, 106, 193, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 90, 98, 130, 208, 209, 23, 161, 117,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 152,
	0, 91, 0, 168, 0, 0, 103, 0, 115, 0,
	0, 0, 128, 0, 131, 0, 0, 174, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 0, 0, 159, 0, 107, 0,
	180, 119, 0, 129, 0, 0, 0, 0, 0, 0,
	109, 0, 166, 153, 192, 0, 154, 164, 132, 184,
	160, 191, 202, 203, 182, 200, 169, 99, 147, 89,
	158, 165, 0, 108, 0, 214, 215, 216, 217, 218,
	219, 220, 92, 181, 190, 105, 170, 95, 188, 177,
	179, 138, 124, 125, 172, 93, 94, 0, 163, 114,
	157, 118, 113, 150, 178, 141, 185, 186, 110, 211,
	112, 111, 176, 100, 198, 199, 97, 101, 197, 146,
	151, 149, 196, 183, 189, 139, 136, 0, 96, 187,
	137, 135, 127, 0, 116, 120, 155, 134, 156, 121,
	143, 142, 144, 0, 148, 0, 0, 0, 0, 175,
	194, 212, 213, 0, 0, 0, 204, 205, 206, 207,
	0, 0, 0, 145, 102, 122, 171, 126, 133, 162,
	210, 0, 167, 106, 193, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 90, 98, 130, 208, 209, 0,
	161, 117, 195, 0, 152, 0, 91, 0, 0, 0,
	0, 0, 0, 115, 0, 168, 0, 128, 103, 131,
	0, 0, 174, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 350, 0, 0, 770, 0, 0, 771, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 0, 0,
	0, 159, 0, 107, 0, 180, 119, 0, 129, 0,
	0, 0, 0, 0, 0, 109, 0, 166, 153, 192,
	0, 154, 164, 132, 184, 160, 191, 202, 203, 182,
	200, 169, 99, 147, 89, 158, 165, 0, 108, 0,
	214, 215, 216, 217, 218, 219, 220, 92, 181, 190,
	105, 170, 95, 188, 177, 179, 138, 124, 125, 172,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 178,
	141, 185, 186, 110, 211, 112, 111, 176, 100, 198,
	199, 97, 101, 197, 146, 151, 149, 196, 183, 189,
	139, 136, 0, 96, 187, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 0, 0, 175, 194, 212, 213, 0, 0,
	0, 204, 205, 206, 207, 0, 0, 0, 145, 102,
	122, 171, 126, 133, 162, 210, 0, 167, 106, 193,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 90,
	98, 130, 208, 209, 0, 161, 117, 195, 0, 152,
	0, 91, 0, 0, 0, 0, 0, 0, 115, 662,
	168, 0, 128, 103, 131, 0, 0, 174, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 350, 0, 661, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 0, 0, 159, 0, 107, 0,
	180, 119, 0, 129, 0, 0, 0, 0, 0, 0,
	109, 0, 166, 153, 192, 0, 154, 164, 132, 184,
	160, 191, 202, 203, 182, 200, 169, 99, 147, 89,
	158, 165, 0, 108, 0, 214, 215, 216, 217, 218,
	219, 220, 92, 181, 190, 105, 170, 95, 188, 177,
	179, 138, 124, 125, 172, 93, 94, 0, 163, 114,
	157, 118, 113, 150, 178, 141, 185, 186, 110, 211,
	112, 111, 176, 100, 198, 199, 97, 101, 197, 146,
	151, 149, 196, 183, 189, 139, 136, 0, 96, 187,
	137, 135, 127, 0, 116, 120, 155, 134, 156, 121,
	143, 142, 144, 0, 148, 0, 0, 0, 0, 175,
	194, 212, 213, 0, 0, 0, 204, 205, 206, 207,
	0, 0, 0, 145, 102, 122, 171, 126, 133, 162,
	210, 0, 167, 106, 193, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 90, 98, 130, 208, 209, 0,
	161, 117, 195, 0, 152, 0, 91, 0, 642, 0,
	0, 0, 0, 115, 0, 168, 0, 128, 103, 131,
	0, 0, 174, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 644, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 0, 0,
	0, 159, 0, 107, 0, 180, 119, 0, 129, 0,
	0, 0, 0, 0, 0, 109, 0, 166, 153, 192,
	0, 640, 164, 132, 184, 160, 191, 202, 203, 182,
	200, 169, 99, 147, 89, 158, 165, 0, 108, 0,
	214, 215, 216, 217, 218, 219, 220, 92, 181, 190,
	105, 170, 95, 188, 177, 179, 138, 124, 125, 172,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 178,
	141, 185, 186, 110, 211, 112, 111, 176, 100, 198,
	199, 97, 101, 197, 146, 151, 149, 196, 183, 189,
	139, 136, 0, 96, 187, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 0, 0, 175, 194, 212, 213, 0, 0,
	0, 204, 205, 206, 207, 0, 0, 0, 145, 102,
	122, 171, 126, 133, 162, 210, 0, 167, 106, 193,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 90,
	98, 130, 208, 209, 0, 161, 117, 195, 0, 152,
	0, 91, 0, 0, 0, 0, 0, 0, 115, 0,
	168, 0, 128, 103, 131, 0, 0, 174, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 350, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 0, 0, 159, 0, 107, 0,
	180, 119, 0, 129, 0, 0, 1364, 0, 0, 0,
	109, 0, 166, 153, 192, 0, 154, 164, 132, 184,
	160, 191, 202, 203, 182, 200, 169, 99, 147, 89,
	158, 165, 0, 108, 0, 214, 215, 216, 217, 218,
	219, 220, 92, 181, 190, 105, 170, 95, 188, 177,
	179, 138, 124, 125, 172, 93, 94, 0, 163, 114,
	157, 118, 113, 150, 178, 141, 185, 186, 110, 211,
	112, 111, 176, 100, 198, 199, 97, 101, 197, 146,
	151, 149, 196, 183, 189, 139, 136, 0, 96, 187,
	137, 135, 127, 0, 116, 120, 155, 134, 156, 121,
	143, 142, 144, 0, 148, 0, 0, 0, 0, 175,
	194, 212, 213, 0, 0, 0, 204, 205, 206, 207,
	0, 0, 0, 145, 102, 122, 171, 126, 133, 162,
	210, 0, 167, 106, 193, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 90, 98, 130, 208, 209, 0,
	161, 117, 195, 0, 152, 0, 91, 0, 0, 0,
	0, 0, 0, 115, 0, 168, 0, 128, 103, 131,
	0, 0, 174, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 0, 0,
	0, 159, 0, 107, 0, 180, 119, 0, 129, 0,
	0, 0, 0, 0, 0, 109, 0, 166, 153, 192,
	0, 154, 164, 132, 184, 160, 191, 202, 203, 182,
	200, 169, 99, 147, 89, 158, 165, 0, 108, 0,
	214, 215, 216, 217, 218, 219, 220, 92, 181, 190,
	105, 170, 95, 188, 177, 179, 138, 124, 125, 172,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 178,
	141, 185, 186, 110, 211, 112, 111, 176, 100, 198,
	199, 97, 101, 197, 146, 151, 149, 196, 183, 189,
	139, 136, 0, 96, 187, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 0, 0, 175, 194, 212, 213, 0, 0,
	0, 204, 205, 206, 207, 0, 0, 0, 145, 102,
	122, 171, 126, 133, 162, 210, 0, 167, 106, 193,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 90,
	98, 130, 208, 209, 0, 161, 117, 195, 0, 152,
	0, 91, 0, 0, 0, 0, 0, 1631, 115, 0,
	168, 0, 128, 103, 131, 0, 0, 174, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 350, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 0, 0, 159, 0, 107, 0,
	180, 119, 0, 129, 0, 0, 1261, 0, 0, 0,
	109, 0, 166, 153, 192, 0, 154, 164, 132, 184,
	160, 191, 202, 203, 182, 200, 169, 99, 147, 89,
	158, 165, 0, 108, 0, 214, 215, 216, 217, 218,
	219, 220, 92, 181, 190, 105, 170, 95, 188, 177,
	179, 138, 124, 125, 172, 93, 94, 0, 163, 114,
	157, 118, 113, 150, 178, 141, 185, 186, 110, 211,
	112, 111, 176, 100, 198, 199, 97, 101, 197, 146,
	151, 149, 196, 183, 189, 139, 136, 0, 96, 187,
	137, 135, 127, 0, 116, 120, 155, 134, 156, 121,
	143, 142, 144, 0, 148, 0, 0, 0, 0, 175,
	194, 212, 213, 0, 0, 0, 204, 205, 206, 207,
	0, 0, 0, 145, 102, 122, 171, 126, 133, 162,
	210, 0, 167, 106, 193, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 90, 98, 130, 208, 209, 0,
	161, 117, 195, 0, 152, 0, 91, 0, 0, 0,
	0, 0, 0, 115, 0, 168, 0, 128, 103, 131,
	0, 0, 174, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 0, 0,
	0, 159, 0, 107, 0, 180, 119, 0, 129, 0,
	0, 0, 0, 0, 0, 109, 0, 166, 153, 192,
	0, 154, 164, 132, 184, 160, 191, 202, 203, 182,
	200, 169, 99, 147, 89, 158, 165, 0, 108, 0,
	214, 215, 216, 217, 218, 219, 220, 92, 181, 190,
	105, 170, 95, 188, 177, 179, 138, 124, 125, 172,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 178,
	141, 185, 186, 110, 211, 112, 111, 176, 100, 198,
	199, 97, 101, 197, 146, 151, 149, 196, 183, 189,
	139, 136, 0, 96, 187, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 0, 0, 175, 194, 212, 213, 0, 0,
	0, 204, 205, 206, 207, 0, 0, 0, 145, 102,
	122, 171, 126, 133, 162, 210, 0, 167, 106, 193,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 90,
	98, 130, 208, 209, 0, 161, 117, 195, 0, 152,
	0, 91, 0, 0, 0, 0, 0, 0, 115, 0,
	168, 0, 128, 103, 131, 0, 0, 174, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 644, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 0, 0, 159, 0, 107, 0,
	180, 119, 0, 129, 0, 0, 0, 0, 0, 0,
	109, 0, 166, 153, 192, 0, 154, 164, 132, 184,
	160, 191, 202, 203, 182, 200, 169, 99, 147, 89,
	158, 165, 0, 108, 0, 214, 215, 216, 217, 218,
	219, 220, 92, 181, 190, 105, 170, 95, 188, 177,
	179, 138, 124, 125, 172, 93, 94, 0, 163, 114,
	157, 118, 113, 150, 178, 141, 185, 186, 110, 211,
	112, 111, 176, 100, 198, 199, 97, 101, 197, 146,
	151, 149, 196, 183, 189, 139, 136, 0, 96, 187,
	137, 135, 127, 0, 116, 120, 155, 134, 156, 121,
	143, 142, 144, 0, 148, 0, 0, 0, 0, 175,
	194, 212, 213, 0, 0, 0, 204, 205, 206, 207,
	0, 0, 0, 145, 102, 122, 171, 126, 133, 162,
	210, 0, 167, 106, 193, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 90, 98, 130, 208, 209, 0,
	161, 117, 195, 0, 152, 0, 91, 0, 0, 0,
	0, 0, 0, 115, 0, 168, 0, 128, 103, 131,
	0, 0, 174, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 350, 0, 527, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 0, 0,
	0, 159, 0, 107, 0, 180, 119, 0, 129, 0,
	0, 0, 0, 0, 0, 109, 0, 166, 153, 192,
	0, 154, 164, 132, 184, 160, 191, 202, 203, 182,
	200, 169, 99, 147, 89, 158, 165, 0, 108, 0,
	214, 215, 216, 217, 218, 219, 220, 92, 181, 190,
	105, 170, 95, 188, 177, 179, 138, 124, 125, 172,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 178,
	141, 185, 186, 110, 211, 112, 111, 176, 100, 198,
	199, 97, 101, 197, 146, 151, 149, 196, 183, 189,
	139, 136, 0, 96, 187, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 0, 0, 175, 194, 212, 213, 0, 0,
	0, 204, 205, 206, 207, 0, 0, 0, 145, 102,
	122, 171, 126, 133, 162, 210, 0, 167, 106, 193,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 90,
	98, 130, 208, 209, 0, 161, 117, 195, 0, 152,
	0, 91, 0, 0, 0, 0, 0, 0, 115, 0,
	168, 0, 128, 103, 131, 0, 0, 174, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 0, 0, 159, 0, 107, 0,
	180, 119, 0, 129, 0, 0, 0, 0, 0, 0,
	109, 0, 166, 153, 192, 0, 154, 164, 132, 184,
	160, 191, 202, 203, 182, 200, 169, 99, 147, 89,
	158, 165, 0, 108, 0, 214, 215, 216, 217, 218,
	219, 220, 92, 181, 190, 105, 170, 95, 188, 177,
	179, 138, 124, 125, 172, 93, 94, 0, 163, 114,
	157, 118, 113, 150, 178, 141, 185, 186, 110, 211,
	112, 111, 176, 100, 198, 199, 97, 101, 197, 146,
	151, 149, 196, 183, 189, 139, 136, 0, 96, 187,
	137, 135, 127, 0, 116, 120, 155, 134, 156, 121,
	143, 142, 144, 0, 148, 0, 0, 0, 0, 175,
	194, 212, 213, 0, 0, 0, 204, 205, 206, 207,
	0, 0, 0, 145, 102, 122, 171, 126, 133, 162,
	210, 730, 167, 106, 193, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 90, 98, 130, 208, 209, 0,
	161, 117, 195, 0, 152, 0, 91, 0, 0, 0,
	0, 0, 620, 115, 0, 168, 0, 128, 103, 131,
	0, 0, 174, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 0, 0,
	0, 159, 0, 107, 0, 180, 119, 0, 129, 0,
	0, 0, 0, 0, 0, 109, 0, 166, 153, 192,
	0, 154, 164, 132, 184, 160, 191, 202, 203, 182,
	200, 169, 99, 147, 89, 158, 165, 0, 108, 0,
	214, 215, 216, 217, 218, 219, 220, 92, 181, 190,
	105, 170, 95, 188, 177, 179, 138, 124, 125, 172,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 178,
	141, 185, 186, 110, 211, 112, 111, 176, 100, 198,
	199, 97, 101, 197, 146, 151, 149, 196, 183, 189,
	139, 136, 0, 96, 187, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 0, 0, 175, 194, 212, 213, 0, 0,
	0, 204, 205, 206, 207, 0, 0, 0, 145, 102,
	122, 171, 126, 133, 162, 210, 0, 167, 106, 193,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 90,
	98, 130, 208, 209, 0, 161, 117, 195, 334, 0,
	0, 0, 0, 0, 0, 152, 0, 91, 0, 0,
	168, 0, 0, 103, 115, 0, 0, 0, 128, 0,
	131, 0, 0, 174, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 201, 0,
	0, 0, 159, 0, 107, 0, 180, 119, 0, 129,
	0, 0, 0, 0, 0, 0, 109, 0, 166, 153,
	192, 0, 154, 164, 132, 184, 160, 191, 202, 203,
	182, 200, 169, 99, 147, 89, 158, 165, 0, 108,
	0, 214, 215, 216, 217, 218, 219, 220, 92, 181,
	190, 105, 170, 95, 188, 177, 179, 138, 124, 125,
	172, 93, 94, 0, 163, 114, 157, 118, 113, 150,
	178, 141, 185, 186, 110, 211, 112, 111, 176, 100,
	198, 199, 97, 101, 197, 146, 151, 149, 196, 183,
	189, 139, 136, 0, 96, 187, 137, 135, 127, 0,
	116, 120, 155, 134, 156, 121, 143, 142, 144, 0,
	148, 0, 0, 0, 0, 175, 194, 212, 213, 0,
	0, 0, 204, 205, 206, 207, 0, 0, 0, 145,
	102, 122, 171, 126, 133, 162, 210, 0, 167, 106,
	193, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	90, 98, 130, 208, 209, 0, 161, 117, 195, 0,
	152, 0, 91, 0, 0, 0, 0, 0, 0, 115,
	0, 168, 0, 128, 103, 131, 0, 0, 174, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 201, 0, 0, 0, 159, 0, 107,
	0, 180, 119, 0, 129, 0, 0, 0, 0, 0,
	0, 109, 0, 166, 153, 192, 0, 154, 164, 132,
	184, 160, 191, 202, 203, 182, 200, 169, 99, 147,
	89, 158, 165, 0, 108, 0, 214, 215, 216, 217,
	218, 219, 220, 92, 181, 190, 105, 170, 95, 188,
	177, 179, 138, 124, 125, 172, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 178, 141, 185, 186, 110,
	211, 112, 111, 176, 100, 198, 199, 97, 101, 197,
	146, 151, 149, 196, 183, 189, 139, 136, 0, 96,
	187, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 0, 0,
	175, 194, 212, 213, 0, 0, 0, 204, 205, 206,
	207, 0, 0, 0, 145, 102, 122, 171, 126, 133,
	162, 210, 0, 167, 106, 193, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 90, 98, 130, 208, 209,
	0, 161, 117, 195, 0, 152, 0, 91, 0, 0,
	0, 0, 0, 0, 115, 0, 168, 0, 128, 103,
	131, 0, 0, 174, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 350, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 201, 0,
	0, 0, 159, 0, 107, 0, 180, 119, 0, 129,
	0, 0, 0, 0, 0, 0, 109, 0, 166, 153,
	192, 0, 154, 164, 132, 184, 160, 191, 202, 203,
	182, 200, 169, 99, 147, 89, 158, 165, 0, 108,
	0, 214, 215, 216, 217, 218, 219, 220, 92, 181,
	190, 105, 170, 95, 188, 177, 179, 138, 124, 125,
	172, 93, 94, 0, 163, 114, 157, 118, 113, 150,
	178, 141, 185, 186, 110, 211, 112, 111, 176, 100,
	198, 199, 97, 101, 197, 146, 151, 149, 196, 183,
	189, 139, 136, 0, 96, 187, 137, 135, 127, 0,
	116, 120, 155, 134, 156, 121, 143, 142, 144, 0,
	148, 0, 0, 0, 0, 175, 194, 212, 213, 0,
	0, 0, 204, 205, 206, 207, 0, 0, 0, 145,
	102, 122, 171, 126, 133, 162, 210, 0, 167, 106,
	193, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	90, 98, 130, 208, 209, 0, 161, 117, 195, 0,
	152, 0, 91, 0, 0, 0, 0, 0, 0, 115,
	0, 168, 0, 128, 103, 131, 0, 0, 174, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 159, 0, 107,
	0, 180, 119, 0, 129, 0, 0, 0, 0, 0,
	0, 109, 0, 166, 153, 192, 0, 154, 164, 132,
	184, 160, 191, 202, 203, 182, 200, 169, 99, 147,
	89, 158, 165, 0, 108, 0, 214, 215, 216, 217,
	218, 219, 220, 92, 181, 190, 105, 170, 95, 188,
	177, 179, 138, 124, 125, 172, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 178, 141, 185, 186, 110,
	211, 112, 111, 176, 100, 198, 199, 97, 101, 197,
	146, 151, 149, 196, 183, 189, 139, 136, 0, 96,
	187, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 0, 0,
	175, 194, 212, 213, 0, 0, 0, 204, 205, 206,
	207, 0, 0, 0, 145, 102, 122, 171, 126, 133,
	162, 210, 0, 167, 106, 193, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 90, 98, 130, 208, 209,
	0, 161, 117, 195, 0, 152, 0, 91, 0, 0,
	0, 0, 0, 0, 115, 0, 168, 0, 128, 103,
	131, 0, 0, 174, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 201, 0,
	0, 0, 159, 0, 107, 0, 180, 119, 0, 129,
	0, 0, 0, 0, 0, 0, 109, 0, 166, 153,
	192, 0, 154, 164, 132, 184, 160, 191, 202, 203,
	182, 200, 169, 99, 147, 89, 158, 165, 0, 108,
	0, 214, 215, 216, 217, 218, 219, 220, 92, 181,
	190, 105, 170, 95, 188, 177, 179, 138, 124, 125,
	172, 93, 94, 0, 163, 114, 157, 118, 113, 150,
	178, 141, 185, 186, 110, 211, 112, 111, 176, 100,
	198, 199, 97, 101, 197, 146, 151, 149, 196, 183,
	189, 139, 136, 0, 96, 187, 137, 135, 127, 0,
	116, 120, 155, 134, 156, 121, 143, 142, 144, 0,
	148, 0, 0, 0, 0, 175, 194, 212, 213, 0,
	0, 0, 204, 205, 206, 207, 0, 0, 0, 145,
	102, 122, 171, 126, 133, 162, 210, 0, 167, 106,
	193, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	90, 98, 130, 208, 209, 0, 161, 117, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 168, 0, 0, 103,
}

var yyPact = [...]int{
	2604, -1000, -208, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1279, 1326, -1000, -1000, -1000, -1000, -1000, -1000, 1098,
	318, 322, 346, 151, 13272, 345, 1928, 13822, -1000, 119,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1033, -1000, -1000,
	-1000, -1000, -1000, 1265, 1276, 1083, 1254, 1160, -1000, 7176,
	266, 11616, 12997, 6042, -1000, 840, -169, 300, 13547, 263,
	263, 13547, 263, -1000, -79, 338, 13822, -1000, 13822, 246,
	838, 246, 246, 246, 13822, -1000, 383, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 13822, 823, 1192, 197, 3921, 3921, 3921, 3921, 166,
	3921, -29, 1110, -1000, -1000, -1000, -1000, 3921, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 751, 1196,
	7740, 7740, 1279, -1000, 1033, -1000, -1000, -1000, 1184, -1000,
	-1000, 542, 1310, -1000, 8852, 382, -1000, 7740, 57, 1004,
	-1000, -1000, 1004, -1000, -1000, 356, -1000, -1000, 8296, 8296,
	8296, 8296, 8296, 8296, 8296, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1004,
	-1000, 7458, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
	7740, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
	1919, 1004, 1004, 1004, 1004, 12716, 1001, 1138, -1000, -1000,
	-1000, 1240, 9691, 10516, 13822, 972, -1000, 1010, 5739, 6,
	-1000, -1000, -1000, 482, 10241, -1000, -1000, -1000, 1190, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 965, -1000, 2378, 334, -1000,
	-1000, 13822, 1051, 819, 500, 813, 1109, 13822, -1000, 12441,
	3921, 296, 13822, 1218, 1108, 13822, 799, 786, -1000, 5436,
	-1000, 3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921, -1000,
	-1000, -1000, -1000, -1000, -1000, 3921, 3921, -1000, 15, -1000,
	13822, -1000, -1000, -1000, -1000, 1319, 405, 714, 381, 1014,
	-1000, 532, 1265, 751, 1160, 9966, 1122, -1000, -1000, 13822,
	-1000, 7740, 7740, 626, -1000, 12166, -1000, -1000, 4224, 413,
	8296, 602, 499, 8296, 8296, 8296, 8296, 8296, 8296, 8296,
	8296, 8296, 8296, 8296, 8296, 8296, 8296, 8296, 683, 1919,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 780, -1000,
	1033, 1239, 1239, 7, 7, 7, 7, 7, 7, 8574,
	6612, 751, 953, 560, 7458, 7176, 7176, 7740, 7740, 14097,
	14097, 7176, 1243, 492, 560, 14097, -1000, 751, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 64, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 7176, 7176, 7176, 7176, 180,
	13822, -1000, 14097, 11616, 11616, 11616, 11616, 11616, -1000, 1150,
	1149, -1000, 1148, 1146, 1133, 13822, -1000, 951, 9691, 407,
	1004, -1000, 11891, -1000, -1000, 180, 857, 11616, 13822, -1000,
	-1000, 5133, 1010, 6, 985, -1000, -43, -25, 6330, 388,
	-1000, -1000, -1000, -1000, 3315, 1360, 684, -126, -2, -1000,
	-1000, -1000, -1000, 1055, -1000, 1055, 215, 1055, 1055, 1055,
	-1000, 1055, 1055, 41, 41, 41, 41, 41, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1095, 1089, -1000, 1055, 1055,
	1055, -1000, 1055, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1084, 227, 1084, 1056, 1056, -1000, -1000,
	13547, 1233, -115, 778, 3921, 1217, 3921, 13822, -1000, 1097,
	13822, -1000, 13822, -1000, -1000, 13822, 3921, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 491, -1000, -1000, -1000, -1000, 1168, 7740, 7740,
	4830, 7740, -1000, -1000, -1000, 1196, -1000, 1243, 1257, -1000,
	1177, 1176, 7176, -1000, -1000, 413, 519, -1000, -1000, 593,
	-1000, -1000, -1000, -1000, 372, 1004, -1000, 1669, -1000, -1000,
	-1000, -1000, 602, 8296, 8296, 8296, 280, 1669, 1848, 80,
	22, 7, 118, 118, 30, 30, 30, 30, 30, 144,
	144, -1000, -1000, -1000, -1000, 751, -1000, -1000, -1000, 751,
	7176, 988, -1000, -1000, 7740, -1000, 751, 946, 946, 525,
	675, 1050, -1000, 369, 1031, 946, 7176, 489, -1000, 7740,
	751, -1000, -1000, 946, 751, 946, 946, 1003, 1004, -1000,
	996, -1000, 481, 1138, 1093, 1107, 892, -1000, -1000, -1000,
	-1000, 1147, -1000, 1124, -1000, -1000, -1000, -1000, -1000, 328,
	326, 319, 13547, -1000, 1305, 11616, 963, -1000, -1000, 985,
	6, -7, -1000, -1000, -1000, -1000, 560, -1000, -1000, 762,
	978, 3012, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1087, 585, 13547, 229, 273, 392, 340, 755, -1000, -1000,
	-1000, 590, -1000, 13547, 1316, -1000, -1000, 208, -1000, 206,
	497, 709, 13822, 114, 1085, 333, -1000, -213, -1000, -4,
	-1000, -1000, 697, 41, 41, 1055, 41, 41, 41, -1000,
	-1000, 388, 1188, 388, 388, 388, 388, 706, 706, -119,
	-119, -1000, -1000, -1000, 695, 1084, -1000, -1000, -1000, 691,
	-1000, 1079, 1033, -1000, 4527, -1000, -1000, -1000, -1000, -1000,
	1231, -1000, 1181, 997, 339, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 178, 321, -1000, 3921,
	-1000, 487, 13822, 13822, 1165, 560, 560, 368, -1000, -1000,
	13822, -1000, -1000, -1000, -1000, 991, -1000, -1000, -1000, 3618,
	7176, -1000, 280, 1669, 1781, -1000, 8296, 8296, -1000, -1000,
	946, 7176, 560, -1000, -1000, -1000, 790, 683, 790, 8296,
	8296, 4830, 8296, 8296, -92, 971, 445, -1000, 7740, 545,
	-1000, -1000, -1000, -1000, -1000, 1105, 14097, 1004, -1000, 9409,
	13547, 1279, 14097, 7740, 7740, -1000, -1000, 7740, 1069, -1000,
	7740, -1000, -1000, -1000, 1004, 1004, 1004, 906, -1000, 1279,
	963, -1000, -1000, -1000, -62, -51, -1000, -1000, 3315, -1000,
	3315, 11341, -1000, 1309, 1258, 211, 243, -1000, 753, 745,
	-1000, 725, -1000, -27, -1000, -178, 76, -35, -1000, -1000,
	1004, -1000, 1067, 1230, -1000, 1185, 668, -203, -1000, -1000,
	-1000, -1000, -1000, -1000, 1004, 1066, 1064, -1000, -1000, -1000,
	-1000, 818, 388, 388, 41, 388, 388, 388, -1000, 454,
	-1000, -1000, -1000, -1000, 943, -1000, 935, -1000, 82, 78,
	-1000, 960, -1000, 926, 13822, 13547, -1000, 924, -1000, 478,
	1242, 134, -1000, 209, -1000, 13547, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 13547, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 13822, -1000, -1000, -1000,
	-1000, -1000, 13547, 239, -1000, -1000, 703, 7740, -1000, -1000,
	-1000, 4527, -1000, 1305, 11616, -1000, -1000, 751, -1000, 8296,
	1669, 1669, -1000, -1000, 751, 1055, 1055, -1000, 1055, 1056,
	-1000, -1000, 1055, 99, 1055, 98, 751, 751, 257, 856,
	-1000, 207, 764, 1004, -87, -1000, 560, 7740, -1000, 1206,
	862, 872, -1000, -1000, 6894, 751, 920, 363, 906, 1265,
	-1000, 560, 560, 560, 10791, 560, 10791, 10791, 10791, 9127,
	13547, 1265, -1000, -1000, -1000, -1000, 3012, -1000, 887, -1000,
	1055, 1055, 285, 285, -196, 205, 202, -1000, -1000, -1000,
	-1000, -169, -1000, -1000, 497, -1000, 7740, 10791, -166, -1000,
	877, -1000, 126, 751, -1000, 693, -1000, 583, -1000, -1000,
	-1000, 388, -1000, -1000, -1000, -1000, -1000, 41, 702, 41,
	-16, -17, 666, -1000, 653, 1023, 1103, 4527, 3315, 274,
	1250, -1000, -1000, 13547, -1000, -1000, -1000, 1053, -1000, -1000,
	-1000, -1000, 1197, 13547, -1000, -1000, 560, 1300, 875, -1000,
	1669, -1000, -1000, 203, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 8296, 8296, -1000, 8296, 8296, 8296, 751,
	700, 560, 195, -1000, 1004, -1000, -1000, 1054, 13547, 13547,
	-1000, -1000, 864, -1000, -1000, 853, 853, 853, 407, -1000,
	-1000, 658, 11341, 1214, -1000, 570, -1000, -1000, 527, 137,
	561, -1000, 13547, -169, -1000, 1004, 444, 847, 1052, 638,
	51, -119, -1000, -1000, -1000, -1000, -1000, -1000, 388, -1000,
	388, -1000, -1000, 798, 777, 11341, 13547, 13822, -1000, -1000,
	13547, -1000, -1000, -1000, -1000, -1000, 1049, 10791, 1004, 242,
	1287, 1274, -1000, -1000, 789, 789, 789, 789, 108, -1000,
	-1000, 1314, -1000, 1004, -1000, 1033, 349, -1000, 13547, -1000,
	-1000, -1000, -1000, -1000, 1101, 1002, 135, -1000, 716, 456,
	685, 455, 453, 452, 442, 431, 430, 423, -1000, -1000,
	-1000, 1311, -1000, -1000, -1000, 1312, 1045, -1000, 1042, 7740,
	139, -1000, -1000, 761, -1000, -1000, -1000, -1000, -1000, -1000,
	817, 1041, 1040, 851, -1000, 11341, 797, 176, 192, -1000,
	7740, 7740, -1000, -1000, -1000, -1000, 751, 150, -124, 14097,
	872, 751, 13547, -1000, -1000, 13547, -1000, -122, 1002, 13547,
	-1000, 633, -1000, -1000, 549, 631, 549, 549, 549, 549,
	549, 285, 285, 13547, 11341, 444, -1000, -89, 106, -1000,
	-200, 11341, 11341, -97, 13547, 7740, 793, 1051, 785, -1000,
	13547, 1039, 560, 866, -1000, 1164, -95, -127, 844, -1000,
	-1000, 1004, 776, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 497, 497, 767, 760, -1000,
	-1000, -1000, 111, 592, 625, 604, 588, -8, -1000, 1268,
	1305, 1038, 750, 742, -1000, -205, -1000, 560, -1000, -115,
	-1000, 176, 1175, 11341, -1000, 1163, -1000, 13547, -1000, 1002,
	-1000, -1000, 237, 658, 580, -1000, 556, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11066, 658, 10791, 1305, 658, 7740,
	-1000, -1000, 170, 740, -116, 751, -1000, 13822, 1101, -1000,
	-1000, -1000, 344, 1101, 735, 658, -1000, 560, 167, -1000,
	-125, -1000, 1036, -1000, 4527, -1000, -1000, -1000, 1004, -129,
	13547, -1000, 8018, -1000, 715, 789, 751, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1561, 19, 792, 1560, 1559, 1558, 1556, 1555, 1554,
	1553, 1547, 1536, 1534, 1530, 1529, 1528, 1527, 1526, 1523,
	1522, 1519, 1518, 1516, 479, 1514, 1513, 1509, 80, 1505,
	92, 1504, 1501, 52, 125, 57, 50, 1269, 1497, 37,
	81, 78, 1496, 59, 1491, 1484, 98, 1483, 83, 1481,
	1479, 109, 1478, 1477, 26, 2, 1476, 58, 1475, 1473,
	82, 3, 1471, 1470, 1469, 1468, 1467, 1465, 60, 15,
	14, 23, 27, 1463, 51, 11, 1461, 61, 1460, 1459,
	1458, 1456, 44, 1454, 70, 22, 39, 68, 1453, 24,
	1451, 74, 48, 36, 12, 93, 75, 1446, 47, 71,
	56, 1445, 1444, 623, 1443, 1438, 1437, 1436, 1434, 1430,
	604, 580, 1428, 1424, 1423, 45, 0, 184, 30, 91,
	1421, 53, 1420, 1387, 84, 76, 33, 1417, 42, 290,
	55, 1416, 1414, 49, 90, 1413, 96, 95, 1412, 1409,
	1404, 1403, 1402, 1133, 40, 29, 101, 1401, 1400, 1397,
	18, 66, 34, 54, 73, 1394, 1392, 1389, 46, 1385,
	17, 16, 7, 65, 1384, 1381, 1380, 1379, 41, 32,
	1371, 25, 13, 5, 8, 6, 1370, 1369, 1368, 1,
	1366, 28, 1365, 9, 1364, 4, 1362, 1361, 1358, 1357,
	1356, 1355, 1354, 1353, 1346, 1345, 21, 10, 43, 31,
	1344, 1343, 1426, 802, 1342, 1337, 1335, 1334, 111,
}

var yyR1 = [...]int{
	0, 200, 201, 201, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 204,
	204, 46, 46, 91, 91, 10, 10, 10, 10, 96,
	96, 100, 100, 100, 101, 101, 101, 101, 131, 131,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 187,
	187, 187, 188, 188, 188, 188, 188, 188, 190, 190,
	191, 191, 121, 121, 185, 185, 184, 183, 183, 182,
	182, 181, 192, 192, 16, 165, 166, 166, 166, 166,
	166, 154, 135, 135, 135, 135, 135, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 198, 198,
	198, 198, 198, 198, 198, 198, 194, 194, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 144, 144, 144, 144, 144, 193, 193, 189,
	189, 189, 189, 189, 139, 139, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 138, 138, 138, 138,
	138, 138, 138, 138, 140, 140, 140, 140, 140, 140,
	140, 140, 136, 136, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 142, 142, 142,
	142, 142, 142, 142, 142, 153, 153, 143, 143, 151,
	151, 152, 152, 152, 150, 150, 150, 147, 147, 148,
	148, 149, 149, 149, 145, 145, 145, 146, 146, 146,
	156, 174, 174, 174, 176, 176, 177, 177, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 164,
	164, 199, 199, 173, 173, 173, 170, 170, 170, 170,
	170, 170, 170, 170, 163, 163, 172, 172, 171, 171,
	158, 158, 158, 158, 158, 159, 160, 160, 160, 160,
	157, 196, 196, 196, 197, 197, 161, 161, 162, 162,
	167, 167, 167, 168, 168, 168, 169, 169, 169, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 205, 205, 206, 206, 206, 206, 206, 206,
	206, 180, 178, 178, 179, 179, 13, 14, 14, 14,
	14, 14, 15, 15, 17, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 108, 108,
	105, 105, 106, 106, 107, 107, 107, 109, 109, 109,
	132, 132, 132, 19, 19, 21, 21, 22, 23, 20,
	20, 20, 20, 20, 207, 24, 25, 25, 26, 26,
	26, 30, 30, 30, 28, 28, 29, 29, 35, 35,
	34, 34, 36, 36, 36, 36, 120, 120, 120, 119,
	119, 38, 38, 39, 39, 40, 40, 41, 41, 41,
	53, 53, 89, 89, 89, 92, 92, 42, 42, 42,
	42, 43, 43, 44, 44, 45, 45, 127, 127, 126,
	126, 126, 125, 125, 47, 47, 47, 49, 48, 48,
	48, 48, 50, 50, 52, 52, 51, 51, 54, 54,
	54, 54, 55, 55, 90, 90, 37, 37, 37, 37,
	37, 37, 37, 104, 104, 57, 57, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 67, 67, 67,
	67, 67, 67, 58, 58, 58, 58, 58, 58, 58,
	33, 33, 68, 68, 68, 74, 69, 69, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	65, 65, 65, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 208, 208, 66,
	66, 66, 66, 31, 31, 31, 31, 31, 130, 130,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 134, 134, 134, 134, 134, 134,
	134, 78, 78, 32, 32, 76, 76, 77, 79, 79,
	75, 75, 75, 60, 60, 60, 60, 60, 60, 60,
	60, 62, 62, 62, 80, 80, 81, 81, 82, 82,
	83, 83, 84, 85, 85, 85, 86, 86, 86, 86,
	87, 87, 87, 59, 59, 59, 59, 59, 59, 88,
	88, 88, 88, 93, 93, 70, 70, 72, 72, 71,
	73, 94, 94, 98, 95, 95, 99, 99, 99, 99,
	97, 97, 97, 122, 122, 122, 102, 102, 110, 110,
	111, 111, 103, 103, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 113, 113, 113, 114, 114, 117,
	117, 118, 118, 123, 123, 124, 124, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 202, 203, 128, 129, 129, 129,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 14, 13, 14, 6, 5, 5, 5, 11, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 1, 3, 3, 3,
	3, 2, 3, 1, 1, 1, 1, 2, 2, 3,
	2, 4, 4, 2, 2, 3, 2, 3, 2, 7,
	8, 3, 3, 6, 5, 8, 7, 4, 3, 2,
	2, 2, 2, 2, 2, 4, 1, 2, 0, 4,
	3, 4, 3, 3, 3, 3, 3, 3, 3, 2,
	4, 6, 2, 3, 2, 3, 1, 0, 2, 0,
	3, 3, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 2,
	2, 2, 1, 1, 1, 3, 3, 2, 1, 2,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 1,
	5, 2, 2, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 3, 3, 0, 1, 0,
	1, 0, 2, 1, 0, 3, 3, 0, 1, 2,
	6, 0, 1, 4, 1, 2, 1, 3, 2, 3,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 1, 1, 0, 2, 5, 2, 3, 3, 2,
	3, 2, 3, 4, 1, 1, 1, 3, 3, 2,
	2, 5, 5, 8, 8, 13, 1, 1, 2, 2,
	10, 0, 1, 1, 0, 3, 0, 1, 1, 3,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	11, 13, 7, 7, 7, 12, 7, 7, 7, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 3, 3, 3, 3, 4, 3, 6,
	4, 2, 4, 2, 2, 2, 2, 3, 1, 1,
	0, 1, 0, 1, 0, 2, 2, 0, 2, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 0, 2, 0, 4, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 3, 3, 1, 1, 1, 1,
	4, 5, 6, 4, 4, 6, 6, 6, 6, 8,
	8, 6, 8, 8, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 1, 2, 1,
	2, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -200, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	112, 113, 115, 114, 143, 116, 136, 48, 171, 172,
	174, 175, 25, 137, 138, 141, 142, -202, 8, 274,
	52, -201, 308, -82, 15, -26, 5, -24, -207, -24,
	-24, -24, -24, -24, -165, 52, -121, -192, 151, 266,
	118, 133, 119, 134, 70, -103, 121, 123, 119, 119,
	120, 121, 266, 118, 119, -51, -123, 55, -116, 158,
	283, 20, 171, 184, 185, 176, 217, 205, 284, 156,
	202, 206, 253, 307, 64, 174, 262, 127, 162, 139,
	197, 200, 199, 191, 188, 27, 223, 290, 190, 130,
	224, 228, 254, 281, 181, 182, 256, 221, 31, 132,
	285, 33, 147, 257, 226, 220, 215, 219, 180, 214,
	37, 194, 230, 229, 231, 252, 208, 157, 233, 210,
	192, 209, 18, 142, 145, 225, 227, 189, 159, 125,
	149, 289, 258, 187, 146, 160, 141, 261, 304, 155,
	175, 255, 183, 264, 36, 238, 201, 178, 193, 179,
	129, 172, 153, 212, 148, 195, 196, 218, 177, 213,
	173, 150, 143, 263, 239, 291, 211, 207, 203, 204,
	154, 121, 151, 152, 245, 246, 247, 248, 286, 287,
	259, 198, 240, 241, 164, 165, 166, 167, 168, 169,
	170, 119, 106, 206, 112, 243, 120, 31, 149, -132,
	119, -105, 152, 245, 246, 247, 248, 55, 255, 254,
	249, -123, 173, -128, -128, -128, -128, -128, -2, -86,
	17, 16, -5, -3, -202, 6, 20, 21, -30, 38,
	39, -25, -36, 97, -37, -123, -56, 72, -61, 28,
	55, -116, 23, -60, -57, -75, -73, -74, 106, 107,
	95, 96, 103, 73, 108, -65, -63, -64, -66, 57,
	56, 65, 58, 59, 60, 61, 66, 67, 68, -117,
	-71, -202, 42, 43, 275, 276, 277, 278, 282, 279,
	75, 32, 265, 273, 272, 271, 269, 270, 267, 268,
	306, 124, 266, 101, 274, -103, -39, -40, -41, -42,
	-53, -74, -202, -51, 11, -46, -51, -95, -131, 173,
	-99, 255, 254, -118, -97, -117, -115, 253, 206, 252,
	55, -116, 117, 293, 71, 22, 24, 236, 242, 74,
	106, 16, 75, 302, 303, 105, 275, 112, 46, 267,
	268, 265, 277, 278, 266, 243, 28, 10, 25, 137,
	21, 99, 114, 78, 79, 140, 23, 138, 68, 19,
	49, 131, 11, 292, 13, 14, 294, 124, 123, 90,
	305, 120, 44, 8, 108, 26, 87, 40, 135, 42,
	88, 17, 269, 270, 30, 282, 144, 101, 47, 34,
	72, 66, 50, 260, 70, 15, 45, 133, 89, 115,
	274, 43, 118, 6, 280, 29, 136, 41, 119, 244,
	77, 122, 67, 5, 134, 9, 48, 51, 271, 272,
	273, 32, 76, 12, 69, -166, -154, 55, -196, 302,
	303, 121, -117, -111, 124, -111, -117, -111, 274, 119,
	-51, -51, -110, 124, 55, -110, -110, -110, -51, 109,
	-51, 55, 29, 266, 55, 149, 119, 150, 121, -129,
	-202, -118, -129, -129, -129, 153, 154, -129, -106, 250,
	50, -129, -203, 54, -87, 19, 30, -37, -123, -83,
	-84, -37, -82, -2, -24, 34, -28, 21, 63, 11,
	-120, 71, 70, 87, -119, 22, -117, 57, 109, -37,
	-58, 90, 72, 88, 89, 74, 92, 91, 102, 95,
	96, 97, 98, 99, 100, 101, 93, 94, 105, 306,
	80, 81, 82, 83, 84, 85, 86, -104, -202, -74,
	-202, 110, 111, -61, -61, -61, -61, -61, -61, -61,
	-202, -2, -69, -37, -202, -202, -202, -202, -202, -202,
	-202, -202, -202, -78, -37, -202, -208, -202, -208, -208,
	-208, -208, -208, -208, -208, -134, 106, 206, 139, 197,
	-137, -136, 212, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 205, 284, -202, -202, -202, -202, -52,
	26, -51, 29, 53, -47, -49, -48, -50, 40, 44,
	46, 41, 42, 43, 47, -127, 22, -39, -202, -126,
	145, -125, 22, -123, 57, -51, -46, -204, 53, 11,
	51, 53, -95, 173, -96, -100, 256, 258, 80, -122,
	-117, 57, 28, 29, 54, 53, -155, -135, -139, -136,
	-141, -140, -142, -137, -138, 202, 206, 203, 208, 209,
	210, 106, 207, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 211, 223, 29, 139, 195, 196,
	197, 200, 199, 201, 198, 224, 225, 226, 227, 228,
	229, 230, 231, 187, 188, 190, 191, 192, 194, 193,
	120, -51, -185, 51, 55, 72, 55, 50, -51, -51,
	260, -129, 122, -51, 23, 50, -51, 55, 55, -124,
	-123, -115, -129, -129, -129, -129, -129, -129, -129, -129,
	-129, -129, -108, 244, 251, -51, 9, 90, 53, 18,
	109, 53, -85, 24, 25, -86, -203, -30, -62, -117,
	58, 61, -29, 41, -51, -37, -37, -67, 66, 72,
	67, 68, -119, 97, -124, -118, -115, -61, -68, -71,
	-74, 62, 90, 88, 89, 74, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -130, 55, 57, -134, 55, -60, -60, -117, -35,
	21, -34, -36, -203, 53, -203, -2, -34, -34, -37,
	-37, -75, -117, -123, -75, -34, -28, -76, -77, 76,
	-75, -203, 204, -34, -35, -34, -34, -91, 145, -51,
	-94, -98, -75, -40, -41, -41, -40, -41, 40, 40,
	40, 45, 40, 45, 40, -48, -123, -203, -54, 48,
	123, 49, -202, -125, -91, 51, -39, -51, -99, -96,
	53, 257, 259, 260, 50, 69, -37, -146, 106, 105,
	-167, -168, -169, -118, 57, 58, -154, -156, -158, -157,
	-170, -159, 127, 125, 129, 130, 134, -163, 120, 135,
	66, 72, -198, 127, 50, 236, 242, 125, 135, 134,
	307, 64, 128, 292, 294, 28, -149, 309, 232, -147,
	239, -143, 52, -143, -143, 204, -143, -143, -143, -143,
	-143, -145, 206, -145, -145, -145, -145, 52, 52, -143,
	-143, -143, -143, -151, 52, 189, -151, -151, -152, 52,
	-152, -117, 22, -183, 286, -184, 55, -129, 23, -129,
	-51, -112, 117, 114, 115, -180, 113, 236, 206, 64,
	28, 15, 275, 145, 291, 55, 146, -51, -51, -51,
	-129, -107, 11, 90, 36, -37, -37, -124, -84, -87,
	-102, 19, 11, 32, 32, -34, 66, 67, 68, 109,
	-202, -68, -61, -61, -61, -33, 140, 71, -203, -203,
	-34, 53, -37, -203, -203, -203, 53, 51, 22, 53,
	11, 109, 53, 11, -203, -34, -79, -77, 78, -37,
	-203, -203, -203, -203, -203, -59, 29, 32, -2, -202,
	-202, -55, 53, 12, 80, -44, -43, 50, 51, -45,
	50, -43, 40, 40, 120, 120, 120, -92, -117, -55,
	-39, -55, -100, -101, 261, 258, 264, 55, 53, -169,
	80, 52, -197, 50, 72, -161, -117, 135, -163, -163,
	55, -163, 55, 55, 66, 19, -117, 9, 135, 135,
	-197, 57, -123, -194, 293, 16, 52, 57, 58, 59,
	66, -144, 65, -57, 233, 265, 268, 267, 310, -148,
	240, 58, -145, -145, -143, -145, -145, -145, -146, 29,
	-146, -146, -146, -146, -153, 57, -153, -150, 286, 287,
	-150, 58, -151, 58, 50, 51, -2, -182, -181, -118,
	-187, 22, -128, -121, -206, 151, 126, 131, 130, 55,
	125, 129, 145, -186, 151, 126, 127, 131, 130, 55,
	120, 135, 125, 129, 145, 134, -113, -114, 122, 22,
	120, 135, 145, 117, -129, -109, 88, 12, -123, -123,
	37, 109, -51, -38, 11, 97, -118, -35, -33, 71,
	-61, -61, -203, -36, -133, 106, 202, 139, 197, 191,
	221, 222, 208, 238, 195, 239, -130, -133, -61, -61,
	-118, -61, -61, 283, -82, 79, -37, 77, -93, 50,
	-94, -70, -72, -71, -202, -2, -88, -117, -92, -82,
	-98, -37, -37, -37, 52, -37, -202, -202, -202, -203,
	53, -82, -55, 258, 262, 263, -168, -169, -172, -171,
	-117, 135, 10, 9, 19, 131, 125, 55, 55, 55,
	-196, 134, 304, -198, 307, -144, -202, 52, 22, 28,
	58, -189, 306, -202, -143, 52, -143, 52, 54, -146,
	-146, -145, -146, -146, -146, 55, 106, 54, 53, 54,
	195, 195, 53, 54, 53, -51, -117, 53, 80, -188,
	19, 159, 160, -205, 120, 135, -128, -117, -128, -117,
	-51, -128, -117, 127, -158, 57, -37, -55, -39, -203,
	-61, -203, -143, -143, -143, -152, -143, 182, -143, 182,
	-203, -203, -203, 53, 19, -203, 53, 19, -202, -32,
	280, -37, 27, -93, 53, -203, -203, -203, 53, 109,
	-203, -86, -89, -117, 135, -89, -89, -89, -126, -117,
	-86, 54, 53, -143, -143, -160, 155, 156, 29, 157,
	-160, 304, 135, 135, -196, -197, -37, -89, 294, 53,
	206, 196, 234, 212, -203, 54, 54, -146, -145, 57,
	-145, 241, 241, 58, 58, 52, 51, 50, -181, -169,
	122, 20, 6, 8, 9, 10, -117, 52, 26, -117,
	-80, 13, -145, 55, -61, -61, -61, -61, -61, -203,
	57, 135, -72, 32, -2, -202, -117, -117, 53, 54,
	-203, -203, -203, -54, -174, -176, 286, -175, 51, 132,
	64, 164, 165, 166, 167, 168, 169, 170, -171, -85,
	-197, 50, 66, 158, -197, 50, -161, -117, -196, -202,
	-203, 54, 52, 58, 204, -150, -146, -146, 54, 54,
	-172, -117, -51, -162, -117, 52, -89, -202, 125, -81,
	14, 16, -203, -203, -203, -203, -31, 90, 286, 9,
	-70, -2, 109, -117, -173, 50, -175, 286, 52, 288,
	55, -164, 80, 57, 80, 80, 80, 80, 80, 80,
	80, 9, 10, 52, 52, -37, -193, 157, -195, 54,
	54, 52, 52, -190, 53, 51, -172, 54, -178, -179,
	145, 135, -37, -69, -203, 284, 47, 289, -94, -203,
	-117, -117, -177, -175, -117, 58, -199, 50, 69, 58,
	-199, -199, -199, -199, -199, -160, -160, -162, -172, -203,
	281, 54, 172, 296, 297, 144, 298, 157, 299, 300,
	-90, 305, -172, -172, -191, 286, -117, -37, 54, -185,
	-203, 53, -117, 52, 37, 285, 290, -202, 54, 53,
	-197, -197, 54, 54, 286, 58, 16, 58, 58, 58,
	58, 297, 144, 299, 16, -55, 52, 54, 54, 307,
	-183, -179, 32, -172, 37, -117, -175, 128, -174, 58,
	58, 301, -123, -174, -89, -55, -174, -37, 147, 54,
	286, -203, -51, -173, 109, -173, 54, -174, 148, 289,
	52, -118, -202, 290, -162, -61, 144, 54, -203, -203,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 658, 0, 414, 414, 414, 414, 414, 414, 0,
	-2, 712, 0, 0, 0, 0, -2, 404, 405, 0,
	407, 408, 974, 974, 974, 974, 974, 0, 33, 34,
	972, 1, 3, 666, 0, 0, 418, 421, 416, 0,
	712, 0, 0, 0, 60, 0, 301, 0, 0, 710,
	710, 0, 710, 83, 0, 0, 0, 713, 0, 708,
	0, 708, 708, 708, 0, 363, 486, 733, 734, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 0, 0, 0, 0, 975, 975, 975, 975, 0,
	975, 392, 381, 383, 384, 385, 386, 975, 401, 402,
	391, 403, 406, 409, 410, 411, 412, 413, 27, 670,
	0, 0, 658, 29, 0, 414, 419, 420, 424, 422,
	423, 415, 0, 432, 436, 0, 496, 0, 501, 503,
	-2, -2, 0, 538, 539, 540, 541, 542, 0, 0,
	0, 0, 0, 0, 0, 566, 567, 568, 569, 643,
	644, 645, 646, 647, 648, 649, 650, 505, 506, 640,
	690, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	631, 0, 597, 597, 597, 597, 597, 597, 597, 597,
	0, 0, 0, 0, 0, 0, 0, 443, 445, 446,
	447, 467, 0, 469, 0, 0, 41, 45, 0, 941,
	694, -2, -2, 0, 0, 731, 732, -2, 852, -2,
	729, 730, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 0, 96, 0, 0, 302,
	303, 0, 84, 0, 0, 0, 0, 0, 93, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 362, 0,
	364, 975, 975, 975, 975, 975, 975, 975, 975, 373,
	976, 977, 374, 375, 376, 975, 975, 378, 0, 393,
	0, 387, 28, 973, 22, 0, 0, 667, 0, 659,
	660, 663, 666, 27, 421, 0, 426, 425, 417, 0,
	433, 0, 0, 0, 437, 0, 439, 440, 0, 499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	523, 524, 525, 526, 527, 528, 529, 502, 0, 516,
	0, 0, 0, 558, 559, 560, 561, 562, 563, 0,
	428, 27, 0, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 424, 0, 632, 0, 588, 0, 589, 590,
	591, 592, 593, 594, 595, 596, 624, 0, 626, 627,
	628, 629, 630, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 192, 193, 0, 428, 0, 0, 43,
	0, 485, 0, 0, 0, 0, 0, 0, 474, 0,
	0, 477, 0, 0, 0, 0, 468, 0, 0, 488,
	905, 470, 0, 472, 473, -2, 0, 0, 0, 39,
	40, 0, 46, 941, 48, 49, 0, 0, 0, 247,
	703, 704, 705, 701, 310, 0, 101, 241, 237, 103,
	104, 105, 106, 227, 165, 227, 227, 227, 227, 227,
	199, 227, 227, 244, 244, 244, 244, 244, 208, 209,
	210, 211, 212, 213, 214, 0, 0, 184, 227, 227,
	227, 188, 227, 190, 191, 217, 218, 219, 220, 221,
	222, 223, 224, 229, 229, 229, 231, 231, 182, 183,
	0, 0, 87, 0, 975, 0, 975, 0, 94, 0,
	0, 329, 0, 357, 709, 0, 975, 360, 361, 487,
	735, 736, 365, 366, 367, 368, 369, 370, 371, 372,
	377, 380, 394, 388, 389, 382, 671, 0, 0, 0,
	0, 0, 662, 664, 665, 670, 30, 424, 0, 651,
	0, 0, 0, 427, 25, 497, 498, 500, 517, 0,
	519, 521, 438, 434, 0, 641, -2, 507, 508, 532,
	533, 534, 0, 0, 0, 0, 530, 512, 0, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	554, 557, 608, 609, 565, 0, 555, 556, 564, 0,
	0, 429, 430, 535, 0, 689, 27, 0, 0, 0,
	0, 0, 640, 0, 0, 0, 0, 638, 635, 0,
	0, 598, 625, 0, 0, 0, 0, 0, 0, 484,
	492, 691, 0, 444, 463, 465, 0, 460, 475, 476,
	478, 0, 480, 0, 482, 483, 448, 449, 450, 0,
	0, 0, 0, 471, 492, 0, 492, 42, 695, 47,
	0, 0, 52, 53, 696, 697, 698, 699, 248, 0,
	95, 311, 313, 316, 317, 318, 97, 98, 99, 100,
	0, 304, 306, 0, 0, 0, 0, 0, 284, 285,
	108, 0, 110, 0, 0, 113, 114, 0, 116, 118,
	304, 0, 0, 0, 0, 0, 107, 0, 243, 239,
	238, 164, 0, 244, 244, 227, 244, 244, 244, 201,
	202, 247, 0, 247, 247, 247, 247, 0, 0, 234,
	234, 187, 189, 176, 0, 229, 178, 179, 180, 0,
	181, 0, 0, 65, 0, 85, 86, 66, 711, 67,
	69, 974, 82, 0, 724, 330, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 0, 0, 356, 975,
	359, 397, 0, 0, 0, 668, 669, 0, 661, 23,
	0, 706, 707, 652, 653, 441, 518, 520, 522, 0,
	428, 509, 530, 513, 0, 510, 0, 0, 504, 570,
	0, 0, 537, -2, 573, 574, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 658, 0, 636, 0, 0,
	587, 599, 600, 601, 602, 683, 0, 0, -2, 0,
	0, 658, 0, 0, 0, 457, 464, 0, 0, 458,
	0, 459, 479, 481, 0, 0, 0, 0, 455, 658,
	492, 38, 50, 51, 0, 0, 57, 249, 0, 314,
	0, 0, 290, 0, 0, 0, 307, 276, 0, 0,
	279, 0, 281, 301, 109, 0, 0, 0, 115, 117,
	0, 121, 122, 0, 136, 0, 0, 159, 129, 130,
	131, 132, 133, 134, 0, 227, 227, 156, 242, 102,
	240, 0, 247, 247, 244, 247, 247, 247, 203, 0,
	204, 205, 206, 207, 0, 225, 0, 185, 0, 0,
	186, 0, 177, 0, 0, 0, -2, 88, 89, 0,
	72, 0, 319, 0, 974, 0, 344, 345, 346, 347,
	348, 349, 350, 974, 0, 331, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 0, 974, 725, 726,
	727, 728, 0, 0, 358, 379, 0, 0, 395, 396,
	672, 0, 24, 492, 0, 435, 642, 0, 511, 0,
	531, 514, 571, 431, 0, 227, 227, 613, 227, 231,
	616, 617, 227, 619, 227, 622, 0, 0, 0, 0,
	641, 0, 0, 0, 633, 586, 639, 0, 31, 0,
	683, 673, 685, 687, 0, 27, 0, 679, 0, 666,
	692, 493, 693, 461, 0, 466, 0, 0, 0, 469,
	0, 666, 37, 54, 55, 56, 312, 315, 0, 286,
	227, 227, 0, 0, 0, 0, 0, 277, 278, 280,
	282, 301, 127, 111, 304, 112, 0, 0, 0, 137,
	0, 128, 0, 0, 152, 0, 154, 0, 228, 194,
	195, 247, 196, 197, 198, 245, 246, 244, 0, 244,
	0, 0, 0, 232, 0, 0, 0, 0, 0, 0,
	0, 70, 71, 0, 342, 343, 323, 0, 324, 326,
	327, 328, 0, 306, 322, 398, 399, 654, 442, 572,
	515, 575, 610, 244, 614, 615, 618, 620, 621, 623,
	577, 576, 578, 0, 0, 581, 0, 0, 0, 0,
	0, 637, 0, 32, 0, 688, -2, 0, 0, 0,
	44, 35, 0, 452, 453, 0, 0, 0, 488, 456,
	36, 251, 0, 663, 289, 304, 296, 297, 0, 0,
	304, 305, 306, 301, 283, 0, 0, 0, 124, 0,
	0, 234, 162, 163, 135, 153, 155, 200, 247, 226,
	247, 235, 236, 0, 0, 0, 0, 0, 90, 91,
	0, 73, 74, 75, 76, 77, 0, 0, 0, 307,
	656, 0, 611, 612, 0, 0, 0, 0, 603, 585,
	634, 0, 686, 0, -2, 0, 681, 680, 0, 462,
	489, 490, 491, 451, 273, 252, 0, 254, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 288,
	291, 0, 298, 299, 292, 0, 0, 307, 0, 0,
	157, 123, 138, 0, 160, 161, 215, 216, 230, 233,
	0, 0, 0, 78, 308, 0, 0, 0, 0, 26,
	0, 0, 579, 580, 582, 583, 0, 0, 0, 0,
	676, 27, 0, 454, 250, 0, 255, 0, 0, 0,
	258, 0, 270, 260, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 126,
	494, 0, 0, 80, 0, 0, 0, 84, 0, 352,
	0, 0, 657, 655, 584, 0, 0, 0, 684, -2,
	682, 274, 0, 256, 261, 259, 262, 271, 272, 263,
	264, 265, 266, 267, 268, 304, 304, 0, 0, 120,
	158, 125, 0, 0, 0, 0, 0, 0, 149, 0,
	492, 0, 0, 0, 68, 0, 309, 79, 320, 87,
	351, 0, 0, 0, 604, 0, 607, 0, 253, 0,
	293, 294, 0, 251, 0, 140, 0, 142, 143, 144,
	145, 146, 147, 148, 0, 251, 0, 492, 251, 0,
	325, 353, 0, 0, 605, 0, 257, 0, 273, 139,
	141, 150, 0, 273, 0, 251, 62, 81, 0, 321,
	0, 275, 0, 300, 0, 61, 495, 63, 0, 0,
	0, 151, 0, 606, 0, 0, 0, 295, 354, 355,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	52, 54, 97, 95, 53, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 308,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 309, 3, 310, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:344
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:349
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:350
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:354
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:377
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:385
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:389
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:395
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:402
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:408
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:412
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:418
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:422
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:429
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:441
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:453
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:457
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:463
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:469
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:473
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:477
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:482
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:483
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:487
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:491
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:496
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:500
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:506
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:510
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:514
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:518
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:524
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:528
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:534
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:538
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:542
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:548
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:552
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:556
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:560
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:566
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:570
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:576
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:581
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:601
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:617
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:632
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:640
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:648
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:652
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:656
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:668
		{
			yyVAL.bytes = nil
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:672
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:676
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:681
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:685
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:689
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:693
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:697
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:701
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:706
		{
			yyVAL.expr = nil
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:710
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:715
		{
			yyVAL.expr = nil
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:719
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:724
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:728
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:733
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:737
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:743
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:748
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:753
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:759
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:764
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:770
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:775
		{
			yyVAL.bytes = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:779
		{
			yyVAL.bytes = nil
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:785
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:792
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:799
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:804
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:808
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:812
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:816
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:822
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:827
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:838
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:850
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:855
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:860
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:865
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:870
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:875
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:880
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:885
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:890
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:895
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:900
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:905
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[5].expr), NotForReplication: bool(yyDollar[3].boolVal)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[7].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:911
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[7].expr), ConstraintName: yyDollar[3].colIdent, NotForReplication: bool(yyDollar[5].boolVal)}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:916
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:921
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:926
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:932
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:938
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:944
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:950
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:957
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:961
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:965
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:969
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:973
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:977
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:981
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[2].boolVal))
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:985
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:991
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:995
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1000
		{
			yyVAL.sequence = &Sequence{}
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1004
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1009
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1014
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1019
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1024
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1029
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1034
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1039
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1044
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1049
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1054
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1059
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 151:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1064
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1071
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1075
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1079
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1083
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1087
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1092
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1096
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1101
		{
			yyVAL.bytes = nil
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1111
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1116
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1122
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1126
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1130
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1134
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1138
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1158
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1164
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1170
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1176
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1182
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1188
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1194
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1200
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1204
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1210
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1214
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1218
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1222
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1226
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1230
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1234
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1238
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1244
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1248
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1254
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1258
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1262
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1266
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1270
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1274
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1278
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1282
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1286
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1290
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1294
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1298
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1302
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1306
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1310
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1314
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1318
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1322
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1326
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1330
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1334
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1338
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 216:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1343
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1349
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1353
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1357
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1361
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1365
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1369
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1373
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1377
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1383
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1388
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 227:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1393
		{
			yyVAL.optVal = nil
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1397
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1402
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1406
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1414
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1418
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1424
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1432
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1436
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1440
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1445
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1449
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1454
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1458
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1463
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1467
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1471
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1476
		{
			yyVAL.str = ""
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1480
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1484
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1489
		{
			yyVAL.str = ""
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1493
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1497
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1503
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1508
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1512
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1516
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1522
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1526
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1532
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1536
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1542
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1546
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1551
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1555
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1559
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1563
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1567
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1571
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1575
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1579
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1583
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1589
		{
			yyVAL.str = ""
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1593
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1599
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1603
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1609
		{
			yyVAL.indexPartition = nil
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1613
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1617
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1623
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1627
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1631
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1635
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1639
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1643
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1647
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1651
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1657
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1661
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1667
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1671
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1677
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1682
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1688
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1693
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 292:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1700
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 293:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1707
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 294:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1714
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 295:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1723
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1735
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1739
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1743
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1747
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 300:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:1753
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1764
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1768
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1772
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1778
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1782
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1787
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1794
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1798
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1803
		{
			yyVAL.str = ""
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1807
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1811
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1819
		{
			yyVAL.str = yyDollar[1].str
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1823
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1827
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1833
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1837
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1841
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1847
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 320:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:1851
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 321:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1865
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1879
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1888
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 324:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1892
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 325:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:1896
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 326:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1909
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 327:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1919
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 328:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1924
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1929
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1933
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 351:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1965
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1971
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1975
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 354:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1981
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 355:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1985
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1991
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1997
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 358:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2005
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 359:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2010
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2018
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2022
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2028
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2032
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2037
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2043
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2047
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2051
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2056
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2060
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2064
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2068
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2072
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2076
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2080
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2084
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2088
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2092
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2096
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 379:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2100
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2110
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2114
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2118
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2122
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2126
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2130
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2134
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2144
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2150
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2154
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2160
		{
			yyVAL.str = ""
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2164
		{
			yyVAL.str = "extended "
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2170
		{
			yyVAL.str = ""
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2174
		{
			yyVAL.str = "full "
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2180
		{
			yyVAL.str = ""
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2184
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2188
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2194
		{
			yyVAL.showFilter = nil
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2198
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2202
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2208
		{
			yyVAL.str = ""
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2212
		{
			yyVAL.str = SessionStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2216
		{
			yyVAL.str = GlobalStr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2222
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2226
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2232
		{
			yyVAL.statement = &Begin{}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2236
		{
			yyVAL.statement = &Begin{}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2242
		{
			yyVAL.statement = &Commit{}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2248
		{
			yyVAL.statement = &Rollback{}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2254
		{
			yyVAL.statement = &OtherRead{}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2258
		{
			yyVAL.statement = &OtherRead{}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2262
		{
			yyVAL.statement = &OtherRead{}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2266
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2270
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2275
		{
			setAllowComments(yylex, true)
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2279
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2285
		{
			yyVAL.bytes2 = nil
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2289
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2295
		{
			yyVAL.str = UnionStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2299
		{
			yyVAL.str = UnionAllStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2303
		{
			yyVAL.str = UnionDistinctStr
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2308
		{
			yyVAL.str = ""
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2312
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2316
		{
			yyVAL.str = SQLCacheStr
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2321
		{
			yyVAL.str = ""
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2325
		{
			yyVAL.str = DistinctStr
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2330
		{
			yyVAL.str = ""
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2334
		{
			yyVAL.str = StraightJoinHint
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2339
		{
			yyVAL.selectExprs = nil
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2343
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2349
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2353
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2359
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2363
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2367
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2371
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2376
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2380
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2384
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2391
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2396
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2400
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2406
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2410
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2420
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2424
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2428
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2434
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 451:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2438
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2444
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2449
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2453
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2459
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2463
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2476
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2480
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2484
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2488
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2494
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2496
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2500
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2502
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2506
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2508
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2511
		{
			yyVAL.empty = struct{}{}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2513
		{
			yyVAL.empty = struct{}{}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2516
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2520
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2524
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2531
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2537
		{
			yyVAL.str = JoinStr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2541
		{
			yyVAL.str = JoinStr
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2545
		{
			yyVAL.str = JoinStr
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2551
		{
			yyVAL.str = StraightJoinStr
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2557
		{
			yyVAL.str = LeftJoinStr
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2561
		{
			yyVAL.str = LeftJoinStr
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2565
		{
			yyVAL.str = RightJoinStr
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2569
		{
			yyVAL.str = RightJoinStr
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2575
		{
			yyVAL.str = NaturalJoinStr
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2579
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2589
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2593
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2599
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2603
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2608
		{
			yyVAL.indexHints = nil
		}
	case 489:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2612
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 490:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2616
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2620
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2625
		{
			yyVAL.expr = nil
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2629
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2634
		{
			yyVAL.columns = nil
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2638
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2644
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2648
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2652
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2656
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2660
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2664
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2668
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2674
		{
			yyVAL.str = ""
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2678
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2684
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2688
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2694
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2698
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2702
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2706
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 511:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2710
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2714
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2718
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 514:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2722
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 515:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2726
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2730
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2736
		{
			yyVAL.str = IsNullStr
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2740
		{
			yyVAL.str = IsNotNullStr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2744
		{
			yyVAL.str = IsTrueStr
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2748
		{
			yyVAL.str = IsNotTrueStr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2752
		{
			yyVAL.str = IsFalseStr
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2756
		{
			yyVAL.str = IsNotFalseStr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2762
		{
			yyVAL.str = EqualStr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2766
		{
			yyVAL.str = LessThanStr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2770
		{
			yyVAL.str = GreaterThanStr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2774
		{
			yyVAL.str = LessEqualStr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2778
		{
			yyVAL.str = GreaterEqualStr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2782
		{
			yyVAL.str = NotEqualStr
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2786
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2791
		{
			yyVAL.expr = nil
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2795
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2801
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2805
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2809
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2815
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2821
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2825
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2831
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2835
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2839
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2843
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2847
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2851
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2855
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2859
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2863
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2867
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2871
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2875
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2879
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2883
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2887
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2891
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2895
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2899
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2903
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2907
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2911
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2915
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2919
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2927
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2941
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2945
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2949
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2957
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2971
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2975
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 572:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2979
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2989
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2993
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 575:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2997
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 576:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3001
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 577:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3005
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 578:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3009
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 579:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3013
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 580:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3017
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 581:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3021
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 582:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3025
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 583:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3029
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 584:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:3033
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 585:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3037
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3041
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3045
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3055
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3059
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3063
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3067
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3072
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3077
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3082
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3087
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3091
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3105
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3109
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3113
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3117
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3123
		{
			yyVAL.str = ""
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3127
		{
			yyVAL.str = BooleanModeStr
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3131
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 606:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3135
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3139
		{
			yyVAL.str = QueryExpansionStr
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3145
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3149
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3155
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3159
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3163
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3167
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3171
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3175
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3181
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3185
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3189
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3193
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3197
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3201
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3205
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3209
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3215
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3219
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3223
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3227
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3231
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3235
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3239
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3244
		{
			yyVAL.expr = nil
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3248
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3253
		{
			yyVAL.str = string("")
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3257
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3263
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3267
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3273
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3278
		{
			yyVAL.expr = nil
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3282
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3288
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3292
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3296
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3302
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3306
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3310
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3314
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3318
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3322
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3326
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3330
		{
			yyVAL.expr = &NullVal{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3336
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3345
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3349
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3354
		{
			yyVAL.exprs = nil
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3358
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3363
		{
			yyVAL.expr = nil
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3367
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3372
		{
			yyVAL.orderBy = nil
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3376
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3382
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3386
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3392
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3397
		{
			yyVAL.str = AscScr
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3401
		{
			yyVAL.str = AscScr
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3405
		{
			yyVAL.str = DescScr
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3410
		{
			yyVAL.limit = nil
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3414
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3418
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3422
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3427
		{
			yyVAL.str = ""
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3431
		{
			yyVAL.str = ForUpdateStr
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3435
		{
			yyVAL.str = ShareModeStr
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3448
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3452
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3456
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 676:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3461
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3465
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 678:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3469
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3476
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3480
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3484
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 682:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3488
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3493
		{
			yyVAL.updateExprs = nil
		}
	case 684:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3497
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3503
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3507
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3513
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3517
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3523
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3529
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3539
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3543
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3549
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3555
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3559
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3565
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3569
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3573
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3577
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3584
		{
			yyVAL.bytes = []byte("charset")
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3591
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3595
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3599
		{
			yyVAL.expr = &Default{}
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3608
		{
			yyVAL.byt = 0
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3610
		{
			yyVAL.byt = 1
		}
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3613
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3615
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3618
		{
			yyVAL.str = ""
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3620
		{
			yyVAL.str = IgnoreStr
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3624
		{
			yyVAL.empty = struct{}{}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3626
		{
			yyVAL.empty = struct{}{}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3628
		{
			yyVAL.empty = struct{}{}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3630
		{
			yyVAL.empty = struct{}{}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3632
		{
			yyVAL.empty = struct{}{}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3634
		{
			yyVAL.empty = struct{}{}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3636
		{
			yyVAL.empty = struct{}{}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3638
		{
			yyVAL.empty = struct{}{}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3640
		{
			yyVAL.empty = struct{}{}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3642
		{
			yyVAL.empty = struct{}{}
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3645
		{
			yyVAL.empty = struct{}{}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3647
		{
			yyVAL.empty = struct{}{}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3649
		{
			yyVAL.empty = struct{}{}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3653
		{
			yyVAL.empty = struct{}{}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3655
		{
			yyVAL.empty = struct{}{}
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3659
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3663
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3670
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3676
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3680
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3687
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3948
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3957
		{
			decNesting(yylex)
		}
	case 974:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3962
		{
			forceEOF(yylex)
		}
	case 975:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3967
		{
			forceEOF(yylex)
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3971
		{
			forceEOF(yylex)
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3975
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
