// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const UNIQUE = 57457
const KEY = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const RESTRICT = 57478
const CASCADE = 57479
const NO = 57480
const ACTION = 57481
const BEGIN = 57482
const START = 57483
const TRANSACTION = 57484
const COMMIT = 57485
const ROLLBACK = 57486
const BIT = 57487
const TINYINT = 57488
const SMALLINT = 57489
const SMALLSERIAL = 57490
const MEDIUMINT = 57491
const INT = 57492
const INTEGER = 57493
const SERIAL = 57494
const BIGINT = 57495
const BIGSERIAL = 57496
const INTNUM = 57497
const REAL = 57498
const DOUBLE = 57499
const PRECISION = 57500
const FLOAT_TYPE = 57501
const DECIMAL = 57502
const NUMERIC = 57503
const TIME = 57504
const TIMESTAMP = 57505
const DATETIME = 57506
const YEAR = 57507
const CHAR = 57508
const VARCHAR = 57509
const VARYING = 57510
const BOOL = 57511
const CHARACTER = 57512
const VARBINARY = 57513
const NCHAR = 57514
const UUID = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const ENUM = 57525
const GEOMETRY = 57526
const POINT = 57527
const LINESTRING = 57528
const POLYGON = 57529
const GEOMETRYCOLLECTION = 57530
const MULTIPOINT = 57531
const MULTILINESTRING = 57532
const MULTIPOLYGON = 57533
const NULLX = 57534
const AUTO_INCREMENT = 57535
const APPROXNUM = 57536
const SIGNED = 57537
const UNSIGNED = 57538
const ZEROFILL = 57539
const ZONE = 57540
const DATABASES = 57541
const TABLES = 57542
const VITESS_KEYSPACES = 57543
const VITESS_SHARDS = 57544
const VITESS_TABLETS = 57545
const VSCHEMA_TABLES = 57546
const EXTENDED = 57547
const FULL = 57548
const PROCESSLIST = 57549
const NAMES = 57550
const CHARSET = 57551
const GLOBAL = 57552
const SESSION = 57553
const ISOLATION = 57554
const LEVEL = 57555
const READ = 57556
const WRITE = 57557
const ONLY = 57558
const REPEATABLE = 57559
const COMMITTED = 57560
const UNCOMMITTED = 57561
const SERIALIZABLE = 57562
const CURRENT_TIMESTAMP = 57563
const DATABASE = 57564
const CURRENT_DATE = 57565
const CURRENT_TIME = 57566
const LOCALTIME = 57567
const LOCALTIMESTAMP = 57568
const UTC_DATE = 57569
const UTC_TIME = 57570
const UTC_TIMESTAMP = 57571
const REPLACE = 57572
const CONVERT = 57573
const CAST = 57574
const SUBSTR = 57575
const SUBSTRING = 57576
const GROUP_CONCAT = 57577
const SEPARATOR = 57578
const MATCH = 57579
const AGAINST = 57580
const BOOLEAN = 57581
const LANGUAGE = 57582
const WITH = 57583
const WITHOUT = 57584
const PARSER = 57585
const QUERY = 57586
const EXPANSION = 57587
const UNUSED = 57588

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	151, 305,
	152, 305,
	-2, 295,
	-1, 247,
	108, 624,
	-2, 620,
	-1, 248,
	108, 625,
	-2, 621,
	-1, 317,
	79, 791,
	-2, 58,
	-1, 318,
	79, 750,
	-2, 59,
	-1, 323,
	79, 734,
	-2, 591,
	-1, 325,
	79, 771,
	-2, 593,
	-1, 588,
	51, 41,
	53, 41,
	-2, 43,
	-1, 731,
	108, 627,
	-2, 623,
	-1, 949,
	5, 28,
	-2, 437,
	-1, 974,
	5, 27,
	-2, 566,
	-1, 1235,
	5, 28,
	-2, 567,
	-1, 1290,
	5, 27,
	-2, 569,
	-1, 1363,
	5, 28,
	-2, 570,
}

const yyPrivate = 57344

const yyLast = 11544

var yyAct = [...]int{

	248, 1369, 890, 1353, 977, 668, 1301, 1252, 535, 793,
	1135, 1016, 277, 1241, 1136, 1163, 869, 833, 582, 1055,
	811, 829, 884, 226, 1132, 455, 580, 220, 839, 832,
	254, 794, 993, 53, 322, 87, 1109, 245, 87, 766,
	1044, 252, 879, 66, 598, 941, 756, 1041, 733, 534,
	3, 763, 846, 982, 782, 468, 474, 423, 316, 597,
	790, 584, 87, 87, 327, 765, 304, 480, 87, 303,
	327, 221, 222, 223, 224, 488, 87, 250, 87, 569,
	235, 313, 549, 311, 87, 923, 52, 1400, 302, 319,
	1381, 309, 307, 907, 1397, 1361, 1343, 225, 1394, 239,
	1045, 1046, 891, 1380, 1360, 1127, 906, 1331, 501, 500,
	510, 511, 503, 504, 505, 506, 507, 508, 509, 502,
	1229, 1302, 512, 427, 448, 1001, 84, 1171, 1000, 1157,
	68, 1002, 824, 911, 1304, 57, 1019, 1020, 1021, 1158,
	1159, 599, 905, 600, 1024, 1022, 698, 82, 78, 79,
	80, 825, 826, 699, 312, 463, 1264, 1263, 1030, 426,
	59, 60, 61, 62, 63, 860, 870, 434, 1183, 435,
	1182, 1279, 862, 204, 1218, 442, 1216, 1396, 71, 72,
	219, 67, 1309, 880, 459, 460, 1392, 450, 1354, 452,
	902, 899, 900, 73, 898, 1087, 791, 214, 1355, 87,
	1014, 1303, 1170, 327, 327, 327, 327, 1012, 327, 1193,
	69, 1390, 1322, 1287, 1258, 327, 449, 451, 1027, 1026,
	1009, 909, 912, 1194, 1202, 1255, 1084, 501, 500, 510,
	511, 503, 504, 505, 506, 507, 508, 509, 502, 76,
	1110, 512, 327, 848, 437, 812, 814, 199, 852, 430,
	75, 992, 76, 201, 677, 1336, 667, 849, 991, 990,
	207, 203, 425, 476, 848, 904, 433, 198, 276, 81,
	853, 848, 1112, 77, 1088, 942, 1332, 1238, 849, 1096,
	522, 477, 524, 525, 858, 849, 850, 957, 903, 205,
	444, 851, 209, 526, 527, 528, 529, 530, 531, 532,
	70, 935, 87, 870, 1177, 865, 881, 705, 447, 87,
	87, 87, 1114, 1359, 1118, 327, 1113, 1023, 1111, 813,
	492, 327, 443, 1085, 1116, 1083, 908, 502, 1305, 200,
	512, 830, 321, 512, 1115, 1074, 702, 1086, 428, 307,
	319, 910, 1092, 918, 855, 467, 453, 1117, 1119, 1253,
	1254, 1256, 857, 856, 1178, 486, 485, 487, 202, 1129,
	210, 211, 212, 213, 217, 783, 1341, 1191, 478, 216,
	215, 980, 487, 551, 552, 553, 554, 555, 556, 557,
	601, 501, 500, 510, 511, 503, 504, 505, 506, 507,
	508, 509, 502, 564, 589, 512, 595, 671, 482, 1075,
	740, 953, 588, 952, 1077, 1070, 1071, 1308, 1078, 1073,
	1072, 1018, 1080, 1076, 738, 739, 737, 1091, 1064, 486,
	485, 919, 485, 1079, 1365, 424, 327, 327, 1342, 1069,
	854, 1266, 50, 87, 87, 327, 487, 87, 487, 783,
	87, 964, 736, 1265, 87, 1050, 327, 327, 327, 327,
	327, 327, 327, 327, 505, 506, 507, 508, 509, 502,
	327, 327, 512, 1048, 757, 87, 758, 1286, 708, 709,
	1031, 321, 321, 321, 321, 1261, 321, 1204, 686, 1042,
	327, 1028, 1339, 321, 87, 429, 1169, 1065, 1061, 848,
	327, 1066, 1063, 1062, 842, 73, 847, 21, 843, 844,
	710, 74, 845, 849, 486, 485, 1067, 1168, 734, 1167,
	490, 1131, 1060, 486, 485, 723, 725, 726, 730, 1015,
	724, 487, 1383, 1404, 673, 674, 735, 731, 678, 684,
	487, 681, 732, 327, 1003, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	456, 457, 458, 230, 461, 893, 700, 431, 432, 712,
	759, 465, 301, 683, 87, 727, 682, 87, 87, 87,
	87, 87, 932, 933, 934, 719, 1294, 1393, 729, 87,
	1383, 1382, 87, 321, 775, 778, 87, 770, 672, 603,
	784, 87, 87, 1376, 467, 327, 670, 307, 307, 307,
	307, 307, 760, 761, 771, 772, 592, 795, 327, 445,
	779, 787, 307, 780, 438, 954, 436, 819, 1294, 1373,
	319, 307, 424, 704, 786, 467, 788, 789, 1294, 1372,
	1315, 770, 1314, 834, 797, 798, 796, 800, 1172, 799,
	1294, 1371, 978, 871, 872, 873, 593, 816, 591, 817,
	1294, 1351, 54, 821, 1099, 792, 822, 808, 703, 1294,
	1316, 979, 486, 485, 1294, 467, 837, 768, 87, 1294,
	1295, 327, 1233, 327, 486, 485, 87, 1133, 87, 487,
	978, 87, 327, 820, 1250, 1249, 979, 886, 1154, 467,
	947, 487, 1237, 467, 665, 321, 947, 439, 440, 441,
	1186, 1185, 566, 321, 882, 883, 1180, 1181, 1180, 1179,
	947, 467, 566, 467, 321, 321, 321, 321, 321, 321,
	321, 321, 768, 467, 608, 607, 566, 978, 321, 321,
	565, 730, 503, 504, 505, 506, 507, 508, 509, 502,
	731, 1190, 512, 959, 23, 23, 956, 818, 714, 591,
	734, 1188, 1187, 1310, 566, 1184, 23, 1004, 490, 889,
	823, 321, 947, 924, 594, 706, 925, 913, 735, 914,
	241, 1289, 915, 666, 232, 50, 938, 939, 940, 972,
	1398, 676, 973, 931, 669, 958, 937, 718, 955, 1378,
	50, 50, 687, 688, 689, 690, 691, 692, 693, 694,
	1346, 762, 50, 1319, 1318, 1317, 695, 696, 1273, 862,
	885, 776, 776, 1148, 880, 1007, 327, 776, 875, 87,
	50, 874, 995, 65, 997, 983, 984, 1307, 1226, 1189,
	946, 887, 888, 327, 776, 1133, 963, 1008, 986, 680,
	974, 464, 805, 989, 988, 996, 961, 806, 327, 307,
	1005, 803, 807, 987, 575, 576, 804, 802, 834, 801,
	236, 237, 1389, 321, 1379, 1095, 920, 1387, 998, 267,
	266, 269, 270, 271, 272, 930, 321, 929, 268, 273,
	1032, 1033, 1037, 1035, 606, 446, 895, 1231, 87, 327,
	327, 1036, 327, 1038, 1039, 1040, 1010, 1011, 1013, 501,
	500, 510, 511, 503, 504, 505, 506, 507, 508, 509,
	502, 466, 1274, 512, 679, 469, 327, 1056, 1047, 87,
	87, 579, 481, 1043, 1049, 1057, 470, 87, 571, 574,
	575, 576, 572, 481, 573, 577, 327, 233, 234, 321,
	928, 321, 1058, 227, 861, 54, 479, 1325, 927, 228,
	321, 510, 511, 503, 504, 505, 506, 507, 508, 509,
	502, 1101, 1324, 512, 1277, 1223, 979, 1166, 1165, 1344,
	483, 1345, 1333, 1025, 321, 701, 327, 327, 56, 1051,
	1105, 1106, 1134, 1124, 1103, 58, 1137, 1108, 1102, 1059,
	1192, 1121, 731, 1122, 1123, 1128, 1125, 1126, 471, 475,
	1120, 1156, 590, 51, 1, 327, 1068, 327, 327, 1142,
	1144, 1143, 892, 1054, 795, 493, 901, 894, 1097, 896,
	795, 1352, 1300, 1162, 1161, 1139, 840, 831, 916, 1155,
	834, 422, 834, 64, 1160, 1340, 501, 500, 510, 511,
	503, 504, 505, 506, 507, 508, 509, 502, 841, 536,
	512, 1175, 838, 609, 1173, 1174, 1029, 1176, 547, 859,
	615, 327, 571, 574, 575, 576, 572, 613, 573, 577,
	327, 614, 983, 984, 611, 617, 616, 612, 610, 206,
	314, 578, 87, 602, 994, 484, 1082, 1195, 327, 1081,
	897, 1090, 697, 917, 462, 208, 1197, 327, 520, 926,
	87, 321, 999, 1206, 320, 1140, 707, 473, 1323, 1276,
	1200, 962, 546, 781, 253, 722, 1017, 1203, 265, 262,
	264, 263, 1101, 713, 971, 494, 1207, 251, 243, 306,
	307, 562, 570, 568, 567, 985, 981, 1214, 305, 1098,
	1228, 1330, 1209, 717, 25, 55, 238, 19, 18, 327,
	17, 327, 327, 327, 87, 327, 20, 1052, 321, 1232,
	321, 327, 16, 15, 1243, 1244, 1245, 1240, 14, 29,
	13, 12, 1246, 1199, 1257, 11, 10, 9, 1005, 1248,
	8, 7, 6, 5, 321, 4, 834, 229, 327, 327,
	87, 327, 327, 327, 22, 2, 1260, 1259, 1262, 0,
	0, 1267, 0, 327, 321, 0, 0, 0, 0, 1271,
	1270, 0, 0, 0, 0, 0, 1056, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 321, 0, 0, 1278,
	0, 0, 0, 0, 0, 0, 1053, 0, 327, 327,
	0, 776, 0, 0, 1141, 994, 1137, 776, 1288, 0,
	0, 327, 0, 0, 0, 0, 720, 721, 0, 327,
	1280, 1281, 1089, 1282, 1283, 1284, 1306, 1299, 0, 0,
	1311, 0, 0, 321, 327, 321, 1164, 0, 0, 0,
	0, 1269, 1312, 0, 1313, 0, 1290, 1320, 0, 0,
	0, 0, 0, 0, 0, 327, 0, 0, 0, 0,
	1334, 0, 1137, 0, 0, 0, 0, 1338, 536, 0,
	0, 773, 774, 0, 0, 0, 0, 0, 327, 327,
	327, 1347, 0, 0, 0, 0, 0, 0, 0, 1196,
	0, 1348, 1349, 1350, 1357, 0, 0, 327, 1198, 0,
	0, 1335, 0, 1362, 327, 278, 47, 327, 0, 0,
	0, 0, 1367, 1368, 0, 327, 1201, 1374, 0, 0,
	0, 0, 0, 0, 0, 321, 0, 0, 0, 0,
	0, 0, 828, 0, 0, 795, 1384, 1385, 0, 327,
	1386, 0, 0, 0, 327, 0, 0, 0, 0, 711,
	0, 87, 1388, 47, 0, 0, 0, 0, 0, 327,
	1401, 231, 0, 0, 0, 472, 0, 308, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1242, 0, 1242,
	1242, 1242, 0, 1247, 0, 0, 0, 0, 0, 321,
	0, 0, 0, 0, 0, 0, 0, 1402, 0, 0,
	85, 0, 0, 218, 0, 0, 767, 769, 0, 0,
	0, 0, 0, 0, 0, 0, 1242, 1268, 0, 321,
	321, 1272, 785, 0, 0, 242, 0, 85, 85, 0,
	0, 1275, 0, 85, 921, 922, 0, 475, 0, 0,
	0, 85, 1395, 85, 0, 0, 0, 0, 0, 85,
	0, 0, 810, 0, 501, 500, 510, 511, 503, 504,
	505, 506, 507, 508, 509, 502, 1292, 1293, 512, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1164,
	0, 0, 0, 0, 0, 0, 0, 1017, 500, 510,
	511, 503, 504, 505, 506, 507, 508, 509, 502, 948,
	0, 512, 1242, 0, 0, 0, 0, 0, 454, 454,
	454, 454, 0, 454, 965, 0, 0, 0, 0, 0,
	454, 0, 0, 1337, 0, 863, 864, 866, 867, 868,
	0, 0, 0, 0, 0, 0, 0, 47, 0, 0,
	0, 0, 0, 876, 877, 878, 1242, 1242, 1242, 0,
	0, 0, 521, 0, 0, 523, 0, 0, 0, 0,
	0, 0, 776, 0, 85, 1364, 0, 0, 0, 0,
	0, 0, 1366, 0, 0, 1370, 0, 0, 1225, 467,
	0, 0, 533, 1377, 537, 538, 539, 540, 541, 542,
	543, 544, 545, 0, 548, 550, 550, 550, 550, 550,
	550, 550, 550, 558, 559, 560, 561, 1242, 0, 0,
	0, 0, 1391, 0, 581, 501, 500, 510, 511, 503,
	504, 505, 506, 507, 508, 509, 502, 1370, 0, 512,
	0, 944, 0, 0, 0, 945, 0, 0, 0, 0,
	0, 0, 949, 950, 951, 0, 0, 0, 0, 0,
	0, 960, 0, 0, 0, 0, 966, 0, 967, 968,
	969, 970, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 0, 0, 85, 586, 85, 0, 0, 0,
	0, 0, 23, 24, 48, 26, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 1130, 0, 0, 0, 0,
	0, 42, 0, 0, 0, 28, 0, 0, 0, 0,
	1145, 1146, 0, 0, 1147, 0, 0, 1149, 0, 0,
	0, 0, 0, 0, 37, 0, 0, 0, 50, 0,
	0, 0, 454, 0, 1222, 467, 0, 0, 0, 0,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 454, 454, 454, 454, 454, 454, 454, 454, 0,
	0, 0, 0, 0, 0, 454, 454, 0, 0, 0,
	1034, 501, 500, 510, 511, 503, 504, 505, 506, 507,
	508, 509, 502, 0, 0, 512, 0, 30, 31, 33,
	32, 35, 0, 0, 0, 0, 0, 0, 85, 85,
	0, 0, 85, 0, 0, 85, 0, 0, 0, 685,
	36, 43, 44, 0, 0, 45, 46, 34, 1107, 0,
	0, 0, 0, 1205, 0, 0, 0, 0, 0, 47,
	85, 0, 0, 38, 39, 0, 40, 41, 0, 0,
	0, 0, 0, 537, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 685, 0,
	0, 0, 1230, 0, 0, 1153, 0, 0, 0, 536,
	0, 0, 308, 308, 308, 308, 308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 815,
	0, 0, 0, 0, 0, 0, 308, 0, 0, 242,
	0, 0, 0, 0, 242, 242, 0, 0, 777, 777,
	242, 0, 0, 0, 777, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 242, 242, 242, 242, 0, 85,
	0, 777, 85, 85, 85, 85, 85, 0, 1104, 0,
	0, 0, 0, 0, 809, 0, 0, 85, 0, 0,
	0, 586, 0, 0, 0, 0, 85, 85, 501, 500,
	510, 511, 503, 504, 505, 506, 507, 508, 509, 502,
	0, 0, 512, 0, 1208, 0, 454, 0, 454, 0,
	0, 1210, 0, 0, 0, 0, 0, 454, 0, 0,
	0, 0, 1219, 1220, 1221, 0, 0, 1224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1234, 1235, 1236, 0, 1239, 1211, 1212, 0, 1213, 0,
	0, 1215, 0, 1217, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 936, 0, 0, 0,
	0, 85, 0, 85, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 1356, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1251,
	0, 685, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 636, 0, 0, 975, 976, 0, 0,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 943, 0, 0, 0, 1296, 1297, 1298, 0, 0,
	0, 0, 0, 0, 308, 0, 0, 0, 0, 0,
	242, 501, 500, 510, 511, 503, 504, 505, 506, 507,
	508, 509, 502, 0, 0, 512, 242, 0, 0, 0,
	0, 0, 1326, 1327, 1328, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 623,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 454, 0, 0, 0, 0,
	0, 637, 1358, 0, 0, 0, 0, 1363, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 454, 0, 0, 1375, 0, 650, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 0, 660, 661, 0,
	662, 663, 664, 638, 639, 640, 641, 620, 622, 0,
	618, 621, 624, 85, 634, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 635, 642, 643, 644, 645, 646,
	647, 648, 649, 0, 1405, 1406, 0, 0, 0, 1138,
	0, 47, 0, 0, 1093, 1094, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 1150, 1151, 1152, 0,
	0, 0, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 242, 0, 0, 0, 0, 0, 0,
	619, 0, 0, 685, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 496, 777, 499,
	0, 0, 0, 0, 777, 513, 514, 515, 516, 517,
	518, 519, 0, 497, 498, 495, 501, 500, 510, 511,
	503, 504, 505, 506, 507, 508, 509, 502, 0, 0,
	512, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1227, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 586,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1138,
	0, 0, 1291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1138, 0, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 411, 401, 0, 372, 413, 349, 364, 421, 365,
	366, 394, 335, 380, 141, 361, 0, 352, 330, 358,
	331, 350, 374, 109, 348, 403, 383, 121, 419, 124,
	388, 0, 160, 133, 0, 0, 376, 405, 378, 399,
	371, 395, 340, 387, 414, 362, 391, 415, 0, 777,
	0, 326, 1399, 835, 836, 0, 0, 0, 0, 0,
	101, 0, 390, 410, 360, 393, 329, 389, 0, 333,
	336, 420, 408, 355, 356, 1006, 0, 0, 0, 0,
	0, 0, 375, 379, 396, 369, 0, 0, 0, 0,
	0, 0, 0, 0, 353, 0, 386, 0, 0, 0,
	337, 334, 0, 373, 0, 0, 85, 339, 0, 354,
	397, 0, 328, 400, 406, 370, 185, 409, 368, 367,
	147, 0, 104, 0, 164, 113, 363, 122, 412, 377,
	404, 351, 359, 105, 357, 153, 142, 176, 385, 143,
	152, 125, 168, 148, 175, 186, 187, 166, 184, 155,
	97, 139, 88, 90, 165, 174, 102, 156, 93, 172,
	162, 163, 131, 117, 118, 158, 91, 92, 0, 151,
	108, 146, 112, 107, 140, 169, 170, 106, 195, 98,
	182, 183, 95, 99, 181, 138, 180, 167, 173, 132,
	129, 94, 171, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 332, 0, 161, 178,
	196, 197, 347, 407, 188, 189, 190, 191, 0, 0,
	0, 137, 100, 116, 157, 119, 126, 150, 194, 392,
	154, 103, 177, 159, 343, 346, 341, 342, 381, 382,
	416, 417, 418, 398, 338, 0, 344, 345, 0, 402,
	384, 89, 96, 123, 192, 193, 0, 149, 111, 179,
	411, 401, 0, 372, 413, 349, 364, 421, 365, 366,
	394, 335, 380, 141, 361, 0, 352, 330, 358, 331,
	350, 374, 109, 348, 403, 383, 121, 419, 124, 388,
	0, 160, 133, 0, 0, 376, 405, 378, 399, 371,
	395, 340, 387, 414, 362, 391, 415, 0, 0, 0,
	326, 0, 835, 836, 0, 0, 0, 0, 0, 101,
	0, 390, 410, 360, 393, 329, 389, 0, 333, 336,
	420, 408, 355, 356, 0, 0, 0, 0, 0, 0,
	0, 375, 379, 396, 369, 0, 0, 0, 0, 0,
	0, 0, 0, 353, 0, 386, 0, 0, 0, 337,
	334, 0, 373, 0, 0, 0, 339, 0, 354, 397,
	0, 328, 400, 406, 370, 185, 409, 368, 367, 147,
	0, 104, 0, 164, 113, 363, 122, 412, 377, 404,
	351, 359, 105, 357, 153, 142, 176, 385, 143, 152,
	125, 168, 148, 175, 186, 187, 166, 184, 155, 97,
	139, 88, 90, 165, 174, 102, 156, 93, 172, 162,
	163, 131, 117, 118, 158, 91, 92, 0, 151, 108,
	146, 112, 107, 140, 169, 170, 106, 195, 98, 182,
	183, 95, 99, 181, 138, 180, 167, 173, 132, 129,
	94, 171, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 332, 0, 161, 178, 196,
	197, 347, 407, 188, 189, 190, 191, 0, 0, 0,
	137, 100, 116, 157, 119, 126, 150, 194, 392, 154,
	103, 177, 159, 343, 346, 341, 342, 381, 382, 416,
	417, 418, 398, 338, 0, 344, 345, 0, 402, 384,
	89, 96, 123, 192, 193, 0, 149, 111, 179, 411,
	401, 0, 372, 413, 349, 364, 421, 365, 366, 394,
	335, 380, 141, 361, 0, 352, 330, 358, 331, 350,
	374, 109, 348, 403, 383, 121, 419, 124, 388, 0,
	160, 133, 0, 0, 376, 405, 378, 399, 371, 395,
	340, 387, 414, 362, 391, 415, 0, 0, 0, 326,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	390, 410, 360, 393, 329, 389, 0, 333, 336, 420,
	408, 355, 356, 0, 0, 0, 0, 0, 0, 0,
	375, 379, 396, 369, 0, 0, 0, 0, 0, 0,
	1100, 0, 353, 0, 386, 0, 0, 0, 337, 334,
	0, 373, 0, 0, 0, 339, 0, 354, 397, 0,
	328, 400, 406, 370, 185, 409, 368, 367, 147, 0,
	104, 0, 164, 113, 363, 122, 412, 377, 404, 351,
	359, 105, 357, 153, 142, 176, 385, 143, 152, 125,
	168, 148, 175, 186, 187, 166, 184, 155, 97, 139,
	88, 90, 165, 174, 102, 156, 93, 172, 162, 163,
	131, 117, 118, 158, 91, 92, 0, 151, 108, 146,
	112, 107, 140, 169, 170, 106, 195, 98, 182, 183,
	95, 99, 181, 138, 180, 167, 173, 132, 129, 94,
	171, 130, 128, 120, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 332, 0, 161, 178, 196, 197,
	347, 407, 188, 189, 190, 191, 0, 0, 0, 137,
	100, 116, 157, 119, 126, 150, 194, 392, 154, 103,
	177, 159, 343, 346, 341, 342, 381, 382, 416, 417,
	418, 398, 338, 0, 344, 345, 0, 402, 384, 89,
	96, 123, 192, 193, 0, 149, 111, 179, 411, 401,
	0, 372, 413, 349, 364, 421, 365, 366, 394, 335,
	380, 141, 361, 0, 352, 330, 358, 331, 350, 374,
	109, 348, 403, 383, 121, 419, 124, 388, 0, 160,
	133, 0, 0, 376, 405, 378, 399, 371, 395, 340,
	387, 414, 362, 391, 415, 50, 0, 0, 326, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 390,
	410, 360, 393, 329, 389, 0, 333, 336, 420, 408,
	355, 356, 0, 0, 0, 0, 0, 0, 0, 375,
	379, 396, 369, 0, 0, 0, 0, 0, 0, 0,
	0, 353, 0, 386, 0, 0, 0, 337, 334, 0,
	373, 0, 0, 0, 339, 0, 354, 397, 0, 328,
	400, 406, 370, 185, 409, 368, 367, 147, 0, 104,
	0, 164, 113, 363, 122, 412, 377, 404, 351, 359,
	105, 357, 153, 142, 176, 385, 143, 152, 125, 168,
	148, 175, 186, 187, 166, 184, 155, 97, 139, 88,
	90, 165, 174, 102, 156, 93, 172, 162, 163, 131,
	117, 118, 158, 91, 92, 0, 151, 108, 146, 112,
	107, 140, 169, 170, 106, 195, 98, 182, 183, 95,
	99, 181, 138, 180, 167, 173, 132, 129, 94, 171,
	130, 128, 120, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 332, 0, 161, 178, 196, 197, 347,
	407, 188, 189, 190, 191, 0, 0, 0, 137, 100,
	116, 157, 119, 126, 150, 194, 392, 154, 103, 177,
	159, 343, 346, 341, 342, 381, 382, 416, 417, 418,
	398, 338, 0, 344, 345, 0, 402, 384, 89, 96,
	123, 192, 193, 0, 149, 111, 179, 411, 401, 0,
	372, 413, 349, 364, 421, 365, 366, 394, 335, 380,
	141, 361, 0, 352, 330, 358, 331, 350, 374, 109,
	348, 403, 383, 121, 419, 124, 388, 0, 160, 133,
	0, 0, 376, 405, 378, 399, 371, 395, 340, 387,
	414, 362, 391, 415, 0, 0, 0, 247, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 390, 410,
	360, 393, 329, 389, 0, 333, 336, 420, 408, 355,
	356, 0, 0, 0, 0, 0, 0, 0, 375, 379,
	396, 369, 0, 0, 0, 0, 0, 0, 728, 0,
	353, 0, 386, 0, 0, 0, 337, 334, 0, 373,
	0, 0, 0, 339, 0, 354, 397, 0, 328, 400,
	406, 370, 185, 409, 368, 367, 147, 0, 104, 0,
	164, 113, 363, 122, 412, 377, 404, 351, 359, 105,
	357, 153, 142, 176, 385, 143, 152, 125, 168, 148,
	175, 186, 187, 166, 184, 155, 97, 139, 88, 90,
	165, 174, 102, 156, 93, 172, 162, 163, 131, 117,
	118, 158, 91, 92, 0, 151, 108, 146, 112, 107,
	140, 169, 170, 106, 195, 98, 182, 183, 95, 99,
	181, 138, 180, 167, 173, 132, 129, 94, 171, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 332, 0, 161, 178, 196, 197, 347, 407,
	188, 189, 190, 191, 0, 0, 0, 137, 100, 116,
	157, 119, 126, 150, 194, 392, 154, 103, 177, 159,
	343, 346, 341, 342, 381, 382, 416, 417, 418, 398,
	338, 0, 344, 345, 0, 402, 384, 89, 96, 123,
	192, 193, 0, 149, 111, 179, 411, 401, 0, 372,
	413, 349, 364, 421, 365, 366, 394, 335, 380, 141,
	361, 0, 352, 330, 358, 331, 350, 374, 109, 348,
	403, 383, 121, 419, 124, 388, 0, 160, 133, 0,
	0, 376, 405, 378, 399, 371, 395, 340, 387, 414,
	362, 391, 415, 0, 0, 0, 326, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 390, 410, 360,
	393, 329, 389, 0, 333, 336, 420, 408, 355, 356,
	0, 0, 0, 0, 0, 0, 0, 375, 379, 396,
	369, 0, 0, 0, 0, 0, 0, 0, 0, 353,
	0, 386, 0, 0, 0, 337, 334, 0, 373, 0,
	0, 0, 339, 0, 354, 397, 0, 328, 400, 406,
	370, 185, 409, 368, 367, 147, 0, 104, 0, 164,
	113, 363, 122, 412, 377, 404, 351, 359, 105, 357,
	153, 142, 176, 385, 143, 152, 125, 168, 148, 175,
	186, 187, 166, 184, 155, 97, 139, 88, 90, 165,
	174, 102, 156, 93, 172, 162, 163, 131, 117, 118,
	158, 91, 92, 0, 151, 108, 146, 112, 107, 140,
	169, 170, 106, 195, 98, 182, 183, 95, 99, 181,
	138, 180, 167, 173, 132, 129, 94, 171, 130, 128,
	120, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 332, 0, 161, 178, 196, 197, 347, 407, 188,
	189, 190, 191, 0, 0, 0, 137, 100, 116, 157,
	119, 126, 150, 194, 392, 154, 103, 177, 159, 343,
	346, 341, 342, 381, 382, 416, 417, 418, 398, 338,
	0, 344, 345, 0, 402, 384, 89, 96, 123, 192,
	193, 0, 149, 111, 179, 411, 401, 0, 372, 413,
	349, 364, 421, 365, 366, 394, 335, 380, 141, 361,
	0, 352, 330, 358, 331, 350, 374, 109, 348, 403,
	383, 121, 419, 124, 388, 0, 160, 133, 0, 0,
	376, 405, 378, 399, 371, 395, 340, 387, 414, 362,
	391, 415, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 390, 410, 360, 393,
	329, 389, 0, 333, 336, 420, 408, 355, 356, 0,
	0, 0, 0, 0, 0, 0, 375, 379, 396, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 353, 0,
	386, 0, 0, 0, 337, 334, 0, 373, 0, 0,
	0, 339, 0, 354, 397, 0, 328, 400, 406, 370,
	185, 409, 368, 367, 147, 0, 104, 0, 164, 113,
	363, 122, 412, 377, 404, 351, 359, 105, 357, 153,
	142, 176, 385, 143, 152, 125, 168, 148, 175, 186,
	187, 166, 184, 155, 97, 139, 88, 90, 165, 174,
	102, 156, 93, 172, 162, 163, 131, 117, 118, 158,
	91, 92, 0, 151, 108, 146, 112, 107, 140, 169,
	170, 106, 195, 98, 182, 183, 95, 99, 181, 138,
	180, 167, 173, 132, 129, 94, 171, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	332, 0, 161, 178, 196, 197, 347, 407, 188, 189,
	190, 191, 0, 0, 0, 137, 100, 116, 157, 119,
	126, 150, 194, 392, 154, 103, 177, 159, 343, 346,
	341, 342, 381, 382, 416, 417, 418, 398, 338, 0,
	344, 345, 0, 402, 384, 89, 96, 123, 192, 193,
	0, 149, 111, 179, 411, 401, 0, 372, 413, 349,
	364, 421, 365, 366, 394, 335, 380, 141, 361, 0,
	352, 330, 358, 331, 350, 374, 109, 348, 403, 383,
	121, 419, 124, 388, 0, 160, 133, 0, 0, 376,
	405, 378, 399, 371, 395, 340, 387, 414, 362, 391,
	415, 0, 0, 0, 326, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 390, 410, 360, 393, 329,
	389, 0, 333, 336, 420, 408, 355, 356, 0, 0,
	0, 0, 0, 0, 0, 375, 379, 396, 369, 0,
	0, 0, 0, 0, 0, 0, 0, 353, 0, 386,
	0, 0, 0, 337, 334, 0, 373, 0, 0, 0,
	339, 0, 354, 397, 0, 328, 400, 406, 370, 185,
	409, 368, 367, 147, 0, 104, 0, 164, 113, 363,
	122, 412, 377, 404, 351, 359, 105, 357, 153, 142,
	176, 385, 143, 152, 125, 168, 148, 175, 186, 187,
	166, 184, 155, 97, 139, 88, 90, 165, 174, 102,
	156, 93, 172, 162, 163, 131, 117, 118, 158, 91,
	92, 0, 151, 108, 146, 112, 107, 140, 169, 170,
	106, 195, 98, 182, 183, 95, 324, 181, 138, 180,
	167, 173, 132, 129, 94, 171, 130, 128, 120, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 332,
	0, 161, 178, 196, 197, 347, 407, 188, 189, 190,
	191, 0, 0, 0, 325, 323, 116, 157, 119, 126,
	150, 194, 392, 154, 103, 177, 159, 343, 346, 341,
	342, 381, 382, 416, 417, 418, 398, 338, 0, 344,
	345, 0, 402, 384, 89, 96, 123, 192, 193, 0,
	149, 111, 179, 411, 401, 0, 372, 413, 349, 364,
	421, 365, 366, 394, 335, 380, 141, 361, 0, 352,
	330, 358, 331, 350, 374, 109, 348, 403, 383, 121,
	419, 124, 388, 0, 160, 133, 0, 0, 376, 405,
	378, 399, 371, 395, 340, 387, 414, 362, 391, 415,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 390, 410, 360, 393, 329, 389,
	0, 333, 336, 420, 408, 355, 356, 0, 0, 0,
	0, 0, 0, 0, 375, 379, 396, 369, 0, 0,
	0, 0, 0, 0, 0, 0, 353, 0, 386, 0,
	0, 0, 337, 334, 0, 373, 0, 0, 0, 339,
	0, 354, 397, 0, 328, 400, 406, 370, 185, 409,
	368, 367, 147, 0, 104, 0, 164, 113, 363, 122,
	412, 377, 404, 351, 359, 105, 357, 153, 142, 176,
	385, 143, 152, 125, 168, 148, 175, 186, 187, 166,
	184, 155, 97, 139, 88, 90, 165, 174, 102, 156,
	93, 172, 162, 163, 131, 117, 118, 158, 91, 92,
	0, 151, 108, 146, 112, 107, 140, 169, 170, 106,
	195, 98, 182, 183, 95, 99, 181, 138, 180, 167,
	173, 132, 129, 94, 171, 130, 128, 120, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 332, 0,
	161, 178, 196, 197, 347, 407, 188, 189, 190, 191,
	0, 0, 0, 137, 100, 116, 157, 119, 126, 150,
	194, 392, 154, 103, 177, 159, 343, 346, 341, 342,
	381, 382, 416, 417, 418, 398, 338, 0, 344, 345,
	0, 402, 384, 89, 96, 123, 192, 193, 0, 149,
	111, 179, 411, 401, 0, 372, 413, 349, 364, 421,
	365, 366, 394, 335, 380, 141, 361, 0, 352, 330,
	358, 331, 350, 374, 109, 348, 403, 383, 121, 419,
	124, 388, 0, 160, 133, 0, 0, 376, 405, 378,
	399, 371, 395, 340, 387, 414, 362, 391, 415, 0,
	0, 0, 326, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 390, 410, 360, 393, 329, 389, 0,
	333, 336, 420, 408, 355, 356, 0, 0, 0, 0,
	0, 0, 0, 375, 379, 396, 369, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 0, 386, 0, 0,
	0, 337, 334, 0, 373, 0, 0, 0, 339, 0,
	354, 397, 0, 328, 400, 406, 370, 185, 409, 368,
	367, 147, 0, 104, 0, 164, 113, 363, 122, 412,
	377, 404, 351, 359, 105, 357, 153, 142, 176, 385,
	143, 152, 125, 168, 148, 175, 186, 187, 166, 184,
	155, 97, 139, 88, 90, 165, 596, 102, 156, 93,
	172, 162, 163, 131, 117, 118, 158, 91, 92, 0,
	151, 108, 146, 112, 107, 140, 169, 170, 106, 195,
	98, 182, 183, 95, 324, 181, 138, 180, 167, 173,
	132, 129, 94, 171, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 332, 0, 161,
	178, 196, 197, 347, 407, 188, 189, 190, 191, 0,
	0, 0, 325, 323, 116, 157, 119, 126, 150, 194,
	392, 154, 103, 177, 159, 343, 346, 341, 342, 381,
	382, 416, 417, 418, 398, 338, 0, 344, 345, 0,
	402, 384, 89, 96, 123, 192, 193, 0, 149, 111,
	179, 411, 401, 0, 372, 413, 349, 364, 421, 365,
	366, 394, 335, 380, 141, 361, 0, 352, 330, 358,
	331, 350, 374, 109, 348, 403, 383, 121, 419, 124,
	388, 0, 160, 133, 0, 0, 376, 405, 378, 399,
	371, 395, 340, 387, 414, 362, 391, 415, 0, 0,
	0, 326, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 390, 410, 360, 393, 329, 389, 0, 333,
	336, 420, 408, 355, 356, 0, 0, 0, 0, 0,
	0, 0, 375, 379, 396, 369, 0, 0, 0, 0,
	0, 0, 0, 0, 353, 0, 386, 0, 0, 0,
	337, 334, 0, 373, 0, 0, 0, 339, 0, 354,
	397, 0, 328, 400, 406, 370, 185, 409, 368, 367,
	147, 0, 104, 0, 164, 113, 363, 122, 412, 377,
	404, 351, 359, 105, 357, 153, 142, 176, 385, 143,
	152, 125, 168, 148, 175, 186, 187, 166, 184, 155,
	97, 139, 88, 90, 165, 315, 102, 156, 93, 172,
	162, 163, 131, 117, 118, 158, 91, 92, 0, 151,
	108, 146, 112, 107, 140, 169, 170, 106, 195, 98,
	182, 183, 95, 324, 181, 138, 180, 167, 173, 132,
	129, 94, 171, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 332, 0, 161, 178,
	196, 197, 347, 407, 188, 189, 190, 191, 0, 0,
	0, 325, 323, 318, 317, 119, 126, 150, 194, 392,
	154, 103, 177, 159, 343, 346, 341, 342, 381, 382,
	416, 417, 418, 398, 338, 0, 344, 345, 0, 402,
	384, 89, 96, 123, 192, 193, 0, 149, 111, 179,
	141, 0, 0, 764, 0, 249, 0, 0, 0, 109,
	246, 0, 0, 121, 288, 124, 0, 0, 160, 133,
	0, 0, 0, 0, 279, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 247, 267, 266,
	269, 270, 271, 272, 0, 0, 101, 268, 273, 274,
	275, 0, 0, 244, 260, 0, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 240, 0,
	0, 0, 299, 0, 259, 0, 0, 255, 256, 261,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 0, 0, 297, 147, 0, 104, 0,
	164, 113, 0, 122, 0, 0, 0, 0, 0, 105,
	0, 153, 142, 176, 0, 143, 152, 125, 168, 148,
	175, 186, 187, 166, 184, 155, 97, 139, 88, 90,
	165, 174, 102, 156, 93, 172, 162, 163, 131, 117,
	118, 158, 91, 92, 0, 151, 108, 146, 112, 107,
	140, 169, 170, 106, 195, 98, 182, 183, 95, 99,
	181, 138, 180, 167, 173, 132, 129, 94, 171, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 161, 178, 196, 197, 0, 0,
	188, 189, 190, 191, 0, 0, 0, 137, 100, 116,
	157, 119, 126, 150, 194, 0, 154, 103, 177, 159,
	289, 298, 295, 296, 293, 294, 292, 291, 290, 300,
	281, 282, 283, 284, 286, 0, 285, 89, 96, 123,
	192, 193, 141, 149, 111, 179, 0, 249, 0, 0,
	0, 109, 246, 0, 0, 121, 288, 124, 0, 0,
	160, 133, 0, 0, 0, 0, 279, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 467, 247,
	267, 266, 269, 270, 271, 272, 0, 0, 101, 268,
	273, 274, 275, 0, 0, 244, 260, 0, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	0, 0, 0, 0, 299, 0, 259, 0, 0, 255,
	256, 261, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 0, 297, 147, 0,
	104, 0, 164, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 153, 142, 176, 0, 143, 152, 125,
	168, 148, 175, 186, 187, 166, 184, 155, 97, 139,
	88, 90, 165, 174, 102, 156, 93, 172, 162, 163,
	131, 117, 118, 158, 91, 92, 0, 151, 108, 146,
	112, 107, 140, 169, 170, 106, 195, 98, 182, 183,
	95, 99, 181, 138, 180, 167, 173, 132, 129, 94,
	171, 130, 128, 120, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 0, 161, 178, 196, 197,
	0, 0, 188, 189, 190, 191, 0, 0, 0, 137,
	100, 116, 157, 119, 126, 150, 194, 0, 154, 103,
	177, 159, 289, 298, 295, 296, 293, 294, 292, 291,
	290, 300, 281, 282, 283, 284, 286, 0, 285, 89,
	96, 123, 192, 193, 141, 149, 111, 179, 0, 249,
	0, 0, 0, 109, 246, 0, 0, 121, 288, 124,
	0, 0, 160, 133, 0, 0, 0, 0, 279, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 247, 267, 266, 269, 270, 271, 272, 0, 0,
	101, 268, 273, 274, 275, 0, 0, 244, 260, 0,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 240, 0, 0, 0, 299, 0, 259, 0,
	0, 255, 256, 261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 0, 297,
	147, 0, 104, 0, 164, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 153, 142, 176, 0, 143,
	152, 125, 168, 148, 175, 186, 187, 166, 184, 155,
	97, 139, 88, 90, 165, 174, 102, 156, 93, 172,
	162, 163, 131, 117, 118, 158, 91, 92, 0, 151,
	108, 146, 112, 107, 140, 169, 170, 106, 195, 98,
	182, 183, 95, 99, 181, 138, 180, 167, 173, 132,
	129, 94, 171, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 161, 178,
	196, 197, 0, 0, 188, 189, 190, 191, 0, 0,
	0, 137, 100, 116, 157, 119, 126, 150, 194, 0,
	154, 103, 177, 159, 289, 298, 295, 296, 293, 294,
	292, 291, 290, 300, 281, 282, 283, 284, 286, 0,
	285, 89, 96, 123, 192, 193, 141, 149, 111, 179,
	0, 249, 0, 0, 0, 109, 246, 0, 0, 121,
	288, 124, 0, 0, 160, 133, 0, 0, 0, 0,
	279, 280, 0, 0, 0, 0, 0, 0, 827, 0,
	50, 0, 0, 247, 267, 266, 269, 270, 271, 272,
	0, 0, 101, 268, 273, 274, 275, 0, 0, 244,
	260, 0, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 0, 0, 0, 0, 299, 0,
	259, 0, 0, 255, 256, 261, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 0,
	0, 297, 147, 0, 104, 0, 164, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 153, 142, 176,
	0, 143, 152, 125, 168, 148, 175, 186, 187, 166,
	184, 155, 97, 139, 88, 90, 165, 174, 102, 156,
	93, 172, 162, 163, 131, 117, 118, 158, 91, 92,
	0, 151, 108, 146, 112, 107, 140, 169, 170, 106,
	195, 98, 182, 183, 95, 99, 181, 138, 180, 167,
	173, 132, 129, 94, 171, 130, 128, 120, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	161, 178, 196, 197, 0, 0, 188, 189, 190, 191,
	0, 0, 0, 137, 100, 116, 157, 119, 126, 150,
	194, 0, 154, 103, 177, 159, 289, 298, 295, 296,
	293, 294, 292, 291, 290, 300, 281, 282, 283, 284,
	286, 23, 285, 89, 96, 123, 192, 193, 0, 149,
	111, 179, 0, 141, 0, 0, 0, 0, 249, 0,
	0, 0, 109, 246, 0, 0, 121, 288, 124, 0,
	0, 160, 133, 0, 0, 0, 0, 279, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	247, 267, 266, 269, 270, 271, 272, 0, 0, 101,
	268, 273, 274, 275, 0, 0, 244, 260, 0, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 0, 0, 0, 0, 299, 0, 259, 0, 0,
	255, 256, 261, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 297, 147,
	0, 104, 0, 164, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 153, 142, 176, 0, 143, 152,
	125, 168, 148, 175, 186, 187, 166, 184, 155, 97,
	139, 88, 90, 165, 174, 102, 156, 93, 172, 162,
	163, 131, 117, 118, 158, 91, 92, 0, 151, 108,
	146, 112, 107, 140, 169, 170, 106, 195, 98, 182,
	183, 95, 99, 181, 138, 180, 167, 173, 132, 129,
	94, 171, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 0, 0, 161, 178, 196,
	197, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	137, 100, 116, 157, 119, 126, 150, 194, 0, 154,
	103, 177, 159, 289, 298, 295, 296, 293, 294, 292,
	291, 290, 300, 281, 282, 283, 284, 286, 0, 285,
	89, 96, 123, 192, 193, 141, 149, 111, 179, 0,
	249, 0, 0, 0, 109, 246, 0, 0, 121, 288,
	124, 0, 0, 160, 133, 0, 0, 0, 0, 279,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 247, 267, 266, 269, 270, 271, 272, 0,
	0, 101, 268, 273, 274, 275, 0, 0, 244, 260,
	0, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 0, 0, 0, 0, 299, 0, 259,
	0, 0, 255, 256, 261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 0,
	297, 147, 0, 104, 0, 164, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 153, 142, 176, 0,
	143, 152, 125, 168, 148, 175, 186, 187, 166, 184,
	155, 97, 139, 88, 90, 165, 174, 102, 156, 93,
	172, 162, 163, 131, 117, 118, 158, 91, 92, 0,
	151, 108, 146, 112, 107, 140, 169, 170, 106, 195,
	98, 182, 183, 95, 99, 181, 138, 180, 167, 173,
	132, 129, 94, 171, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 0, 161,
	178, 196, 197, 0, 0, 188, 189, 190, 191, 0,
	0, 0, 137, 100, 116, 157, 119, 126, 150, 194,
	0, 154, 103, 177, 159, 289, 298, 295, 296, 293,
	294, 292, 291, 290, 300, 281, 282, 283, 284, 286,
	0, 285, 89, 96, 123, 192, 193, 141, 149, 111,
	179, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	121, 288, 124, 0, 0, 160, 133, 0, 0, 0,
	0, 279, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 247, 267, 266, 269, 270, 271,
	272, 0, 0, 101, 268, 273, 274, 275, 0, 0,
	0, 260, 0, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 0, 0, 0, 0, 299,
	0, 259, 0, 0, 255, 256, 261, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	0, 0, 297, 147, 0, 104, 0, 164, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 153, 142,
	176, 1403, 143, 152, 125, 168, 148, 175, 186, 187,
	166, 184, 155, 97, 139, 88, 90, 165, 174, 102,
	156, 93, 172, 162, 163, 131, 117, 118, 158, 91,
	92, 0, 151, 108, 146, 112, 107, 140, 169, 170,
	106, 195, 98, 182, 183, 95, 99, 181, 138, 180,
	167, 173, 132, 129, 94, 171, 130, 128, 120, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 0,
	0, 161, 178, 196, 197, 0, 0, 188, 189, 190,
	191, 0, 0, 0, 137, 100, 116, 157, 119, 126,
	150, 194, 0, 154, 103, 177, 159, 289, 298, 295,
	296, 293, 294, 292, 291, 290, 300, 281, 282, 283,
	284, 286, 0, 285, 89, 96, 123, 192, 193, 141,
	149, 111, 179, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 121, 288, 124, 0, 0, 160, 133, 0,
	0, 0, 0, 279, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 247, 267, 266, 269,
	270, 271, 272, 0, 0, 101, 268, 273, 274, 275,
	0, 0, 0, 260, 0, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 0, 0, 0,
	0, 299, 0, 259, 0, 0, 255, 256, 261, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 0, 0, 297, 147, 0, 104, 0, 164,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	153, 142, 176, 0, 143, 152, 125, 168, 148, 175,
	186, 187, 166, 184, 155, 97, 139, 88, 90, 165,
	174, 102, 156, 93, 172, 162, 163, 131, 117, 118,
	158, 91, 92, 0, 151, 108, 146, 112, 107, 140,
	169, 170, 106, 195, 98, 182, 183, 95, 99, 181,
	138, 180, 167, 173, 132, 129, 94, 171, 130, 128,
	120, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 0, 0, 161, 178, 196, 197, 0, 0, 188,
	189, 190, 191, 0, 0, 0, 137, 100, 116, 157,
	119, 126, 150, 194, 0, 154, 103, 177, 159, 289,
	298, 295, 296, 293, 294, 292, 291, 290, 300, 281,
	282, 283, 284, 286, 0, 285, 89, 96, 123, 192,
	193, 141, 149, 111, 179, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 121, 0, 124, 0, 0, 160,
	133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 501, 500, 510, 511, 503, 504, 505,
	506, 507, 508, 509, 502, 0, 0, 512, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 0, 0, 147, 0, 104,
	0, 164, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 153, 142, 176, 0, 143, 152, 125, 168,
	148, 175, 186, 187, 166, 184, 155, 97, 139, 88,
	90, 165, 174, 102, 156, 93, 172, 162, 163, 131,
	117, 118, 158, 91, 92, 0, 151, 108, 146, 112,
	107, 140, 169, 170, 106, 195, 98, 182, 183, 95,
	99, 181, 138, 180, 167, 173, 132, 129, 94, 171,
	130, 128, 120, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 0, 0, 161, 178, 196, 197, 0,
	0, 188, 189, 190, 191, 0, 0, 0, 137, 100,
	116, 157, 119, 126, 150, 194, 0, 154, 103, 177,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 96,
	123, 192, 193, 141, 149, 111, 179, 489, 0, 0,
	0, 0, 109, 0, 0, 0, 121, 0, 124, 0,
	0, 160, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 491, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 486, 485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 487, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 147,
	0, 104, 0, 164, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 153, 142, 176, 0, 143, 152,
	125, 168, 148, 175, 186, 187, 166, 184, 155, 97,
	139, 88, 90, 165, 174, 102, 156, 93, 172, 162,
	163, 131, 117, 118, 158, 91, 92, 0, 151, 108,
	146, 112, 107, 140, 169, 170, 106, 195, 98, 182,
	183, 95, 99, 181, 138, 180, 167, 173, 132, 129,
	94, 171, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 0, 0, 161, 178, 196,
	197, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	137, 100, 116, 157, 119, 126, 150, 194, 0, 154,
	103, 177, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 96, 123, 192, 193, 141, 149, 111, 179, 585,
	0, 0, 0, 0, 109, 0, 0, 0, 121, 0,
	124, 0, 0, 160, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 587, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 0,
	0, 147, 0, 104, 0, 164, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 153, 142, 176, 0,
	143, 152, 125, 168, 148, 175, 186, 187, 166, 184,
	155, 97, 139, 88, 90, 165, 174, 102, 156, 93,
	172, 162, 163, 131, 117, 118, 158, 91, 92, 0,
	151, 108, 146, 112, 107, 140, 169, 170, 106, 195,
	98, 182, 183, 95, 99, 181, 138, 180, 167, 173,
	132, 129, 94, 171, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 0, 161,
	178, 196, 197, 0, 0, 188, 189, 190, 191, 0,
	0, 0, 137, 100, 116, 157, 119, 126, 150, 194,
	0, 154, 103, 177, 159, 0, 23, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 89, 96, 123, 192, 193, 109, 149, 111,
	179, 121, 0, 124, 0, 0, 160, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 326, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 147, 0, 104, 0, 164, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 153,
	142, 176, 0, 143, 152, 125, 168, 148, 175, 186,
	187, 166, 184, 155, 97, 139, 88, 90, 165, 174,
	102, 156, 93, 172, 162, 163, 131, 117, 118, 158,
	91, 92, 0, 151, 108, 146, 112, 107, 140, 169,
	170, 106, 195, 98, 182, 183, 95, 99, 181, 138,
	180, 167, 173, 132, 129, 94, 171, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 161, 178, 196, 197, 0, 0, 188, 189,
	190, 191, 0, 0, 0, 137, 100, 116, 157, 119,
	126, 150, 194, 0, 154, 103, 177, 159, 0, 23,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 89, 96, 123, 192, 193,
	109, 149, 111, 179, 121, 0, 124, 0, 0, 160,
	133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 0, 0, 147, 0, 104,
	0, 164, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 153, 142, 176, 0, 143, 152, 125, 168,
	148, 175, 186, 187, 166, 184, 155, 97, 139, 88,
	90, 165, 174, 102, 156, 93, 172, 162, 163, 131,
	117, 118, 158, 91, 92, 0, 151, 108, 146, 112,
	107, 140, 169, 170, 106, 195, 98, 182, 183, 95,
	99, 181, 138, 180, 167, 173, 132, 129, 94, 171,
	130, 128, 120, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 0, 0, 161, 178, 196, 197, 0,
	0, 188, 189, 190, 191, 0, 0, 0, 137, 100,
	116, 157, 119, 126, 150, 194, 141, 154, 103, 177,
	159, 0, 0, 0, 0, 109, 0, 0, 0, 121,
	0, 124, 0, 0, 160, 133, 0, 0, 89, 96,
	123, 192, 193, 0, 149, 111, 179, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 715, 0, 0, 716,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 0,
	0, 0, 147, 0, 104, 0, 164, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 153, 142, 176,
	0, 143, 152, 125, 168, 148, 175, 186, 187, 166,
	184, 155, 97, 139, 88, 90, 165, 174, 102, 156,
	93, 172, 162, 163, 131, 117, 118, 158, 91, 92,
	0, 151, 108, 146, 112, 107, 140, 169, 170, 106,
	195, 98, 182, 183, 95, 99, 181, 138, 180, 167,
	173, 132, 129, 94, 171, 130, 128, 120, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	161, 178, 196, 197, 0, 0, 188, 189, 190, 191,
	0, 0, 0, 137, 100, 116, 157, 119, 126, 150,
	194, 141, 154, 103, 177, 159, 0, 0, 0, 0,
	109, 605, 0, 0, 121, 0, 124, 0, 0, 160,
	133, 0, 0, 89, 96, 123, 192, 193, 0, 149,
	111, 179, 0, 0, 0, 0, 0, 0, 326, 0,
	604, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 0, 0, 147, 0, 104,
	0, 164, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 153, 142, 176, 0, 143, 152, 125, 168,
	148, 175, 186, 187, 166, 184, 155, 97, 139, 88,
	90, 165, 174, 102, 156, 93, 172, 162, 163, 131,
	117, 118, 158, 91, 92, 0, 151, 108, 146, 112,
	107, 140, 169, 170, 106, 195, 98, 182, 183, 95,
	99, 181, 138, 180, 167, 173, 132, 129, 94, 171,
	130, 128, 120, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 0, 0, 161, 178, 196, 197, 0,
	0, 188, 189, 190, 191, 0, 0, 0, 137, 100,
	116, 157, 119, 126, 150, 194, 0, 154, 103, 177,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 96,
	123, 192, 193, 141, 149, 111, 179, 585, 0, 0,
	0, 0, 109, 0, 0, 0, 121, 0, 124, 0,
	0, 160, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 587, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 147,
	0, 104, 0, 164, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 153, 142, 176, 0, 583, 152,
	125, 168, 148, 175, 186, 187, 166, 184, 155, 97,
	139, 88, 90, 165, 174, 102, 156, 93, 172, 162,
	163, 131, 117, 118, 158, 91, 92, 0, 151, 108,
	146, 112, 107, 140, 169, 170, 106, 195, 98, 182,
	183, 95, 99, 181, 138, 180, 167, 173, 132, 129,
	94, 171, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 0, 0, 161, 178, 196,
	197, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	137, 100, 116, 157, 119, 126, 150, 194, 141, 154,
	103, 177, 159, 0, 0, 0, 0, 109, 0, 0,
	0, 121, 0, 124, 0, 0, 160, 133, 0, 0,
	89, 96, 123, 192, 193, 0, 149, 111, 179, 0,
	0, 0, 50, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 147, 0, 104, 0, 164, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 153,
	142, 176, 0, 143, 152, 125, 168, 148, 175, 186,
	187, 166, 184, 155, 97, 139, 88, 90, 165, 174,
	102, 156, 93, 172, 162, 163, 131, 117, 118, 158,
	91, 92, 0, 151, 108, 146, 112, 107, 140, 169,
	170, 106, 195, 98, 182, 183, 95, 99, 181, 138,
	180, 167, 173, 132, 129, 94, 171, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 161, 178, 196, 197, 0, 0, 188, 189,
	190, 191, 0, 0, 0, 137, 100, 116, 157, 119,
	126, 150, 194, 141, 154, 103, 177, 159, 0, 0,
	0, 0, 109, 0, 0, 0, 121, 0, 124, 0,
	0, 160, 133, 0, 0, 89, 96, 123, 192, 193,
	0, 149, 111, 179, 0, 0, 0, 0, 0, 0,
	86, 0, 587, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 147,
	0, 104, 0, 164, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 153, 142, 176, 0, 143, 152,
	125, 168, 148, 175, 186, 187, 166, 184, 155, 97,
	139, 88, 90, 165, 174, 102, 156, 93, 172, 162,
	163, 131, 117, 118, 158, 91, 92, 0, 151, 108,
	146, 112, 107, 140, 169, 170, 106, 195, 98, 182,
	183, 95, 99, 181, 138, 180, 167, 173, 132, 129,
	94, 171, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 0, 0, 161, 178, 196,
	197, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	137, 100, 116, 157, 119, 126, 150, 194, 141, 154,
	103, 177, 159, 0, 0, 0, 0, 109, 0, 0,
	0, 121, 0, 124, 0, 0, 160, 133, 0, 0,
	89, 96, 123, 192, 193, 0, 149, 111, 179, 0,
	0, 0, 0, 0, 0, 326, 0, 491, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 147, 0, 104, 0, 164, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 153,
	142, 176, 0, 143, 152, 125, 168, 148, 175, 186,
	187, 166, 184, 155, 97, 139, 88, 90, 165, 174,
	102, 156, 93, 172, 162, 163, 131, 117, 118, 158,
	91, 92, 0, 151, 108, 146, 112, 107, 140, 169,
	170, 106, 195, 98, 182, 183, 95, 99, 181, 138,
	180, 167, 173, 132, 129, 94, 171, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 161, 178, 196, 197, 0, 0, 188, 189,
	190, 191, 0, 0, 0, 137, 100, 116, 157, 119,
	126, 150, 194, 141, 154, 103, 177, 159, 0, 0,
	0, 0, 109, 0, 0, 0, 121, 0, 124, 0,
	0, 160, 133, 0, 0, 89, 96, 123, 192, 193,
	0, 149, 111, 179, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 147,
	0, 104, 0, 164, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 153, 142, 176, 0, 143, 152,
	125, 168, 148, 175, 186, 187, 166, 184, 155, 97,
	139, 88, 90, 165, 174, 102, 156, 93, 172, 162,
	163, 131, 117, 118, 158, 91, 92, 0, 151, 108,
	146, 112, 107, 140, 169, 170, 106, 195, 98, 182,
	183, 95, 99, 181, 138, 180, 167, 173, 132, 129,
	94, 171, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 0, 0, 161, 178, 196,
	197, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	137, 100, 116, 157, 119, 126, 150, 194, 675, 154,
	103, 177, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 96, 123, 192, 193, 141, 149, 111, 179, 0,
	0, 0, 0, 563, 109, 0, 0, 0, 121, 0,
	124, 0, 0, 160, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 0,
	0, 147, 0, 104, 0, 164, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 153, 142, 176, 0,
	143, 152, 125, 168, 148, 175, 186, 187, 166, 184,
	155, 97, 139, 88, 90, 165, 174, 102, 156, 93,
	172, 162, 163, 131, 117, 118, 158, 91, 92, 0,
	151, 108, 146, 112, 107, 140, 169, 170, 106, 195,
	98, 182, 183, 95, 99, 181, 138, 180, 167, 173,
	132, 129, 94, 171, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 0, 161,
	178, 196, 197, 0, 0, 188, 189, 190, 191, 0,
	0, 0, 137, 100, 116, 157, 119, 126, 150, 194,
	0, 154, 103, 177, 159, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 89, 96, 123, 192, 193, 109, 149, 111,
	179, 121, 0, 124, 0, 0, 160, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 147, 0, 104, 0, 164, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 153,
	142, 176, 0, 143, 152, 125, 168, 148, 175, 186,
	187, 166, 184, 155, 97, 139, 88, 90, 165, 174,
	102, 156, 93, 172, 162, 163, 131, 117, 118, 158,
	91, 92, 0, 151, 108, 146, 112, 107, 140, 169,
	170, 106, 195, 98, 182, 183, 95, 99, 181, 138,
	180, 167, 173, 132, 129, 94, 171, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 161, 178, 196, 197, 0, 0, 188, 189,
	190, 191, 0, 0, 0, 137, 100, 116, 157, 119,
	126, 150, 194, 141, 154, 103, 177, 159, 0, 0,
	0, 0, 109, 0, 0, 0, 121, 0, 124, 0,
	0, 160, 133, 0, 0, 89, 96, 123, 192, 193,
	0, 149, 111, 179, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 0, 185, 0, 0, 0, 147,
	0, 104, 0, 164, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 153, 142, 176, 0, 143, 152,
	125, 168, 148, 175, 186, 187, 166, 184, 155, 97,
	139, 88, 90, 165, 174, 102, 156, 93, 172, 162,
	163, 131, 117, 118, 158, 91, 92, 0, 151, 108,
	146, 112, 107, 140, 169, 170, 106, 195, 98, 182,
	183, 95, 99, 181, 138, 180, 167, 173, 132, 129,
	94, 171, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 0, 0, 161, 178, 196,
	197, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	137, 100, 116, 157, 119, 126, 150, 194, 141, 154,
	103, 177, 159, 0, 0, 0, 0, 109, 0, 0,
	0, 121, 0, 124, 0, 0, 160, 133, 0, 0,
	89, 96, 123, 192, 193, 0, 149, 111, 179, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 147, 0, 104, 0, 164, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 153,
	142, 176, 0, 143, 152, 125, 168, 148, 175, 186,
	187, 166, 184, 155, 97, 139, 88, 90, 165, 174,
	102, 156, 93, 172, 162, 163, 131, 117, 118, 158,
	91, 92, 0, 151, 108, 146, 112, 107, 140, 169,
	170, 106, 195, 98, 182, 183, 95, 99, 181, 138,
	180, 167, 173, 132, 129, 94, 171, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 161, 178, 196, 197, 0, 0, 188, 189,
	190, 191, 0, 0, 0, 137, 100, 116, 157, 119,
	126, 150, 194, 141, 154, 103, 177, 159, 0, 0,
	0, 0, 109, 0, 0, 0, 121, 0, 124, 0,
	0, 160, 133, 0, 0, 89, 96, 123, 192, 193,
	0, 149, 111, 179, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 147,
	0, 104, 0, 164, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 153, 142, 176, 0, 143, 152,
	125, 168, 148, 175, 186, 187, 166, 184, 155, 97,
	139, 88, 90, 165, 174, 102, 156, 93, 172, 162,
	163, 131, 117, 118, 158, 91, 92, 0, 151, 108,
	146, 112, 107, 140, 169, 170, 106, 195, 98, 182,
	183, 95, 99, 181, 138, 180, 167, 173, 132, 129,
	94, 171, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 0, 0, 161, 178, 196,
	197, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	137, 100, 116, 157, 119, 126, 150, 194, 141, 154,
	103, 177, 159, 0, 0, 0, 0, 109, 0, 0,
	0, 121, 0, 124, 0, 0, 160, 133, 0, 0,
	89, 96, 123, 192, 193, 0, 149, 111, 179, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 147, 0, 104, 0, 164, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 153,
	142, 176, 0, 143, 152, 125, 168, 148, 175, 186,
	187, 166, 184, 155, 97, 139, 88, 90, 165, 174,
	102, 156, 93, 172, 162, 163, 131, 117, 118, 158,
	91, 92, 0, 151, 108, 146, 112, 107, 140, 169,
	170, 106, 195, 98, 182, 183, 95, 99, 181, 138,
	180, 167, 173, 132, 129, 94, 171, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 161, 178, 196, 197, 0, 0, 188, 189,
	190, 191, 0, 0, 0, 137, 100, 116, 157, 119,
	126, 150, 194, 0, 154, 103, 177, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 96, 123, 192, 193,
	0, 149, 111, 179,
}
var yyPact = [...]int{

	1716, -1000, -178, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 930, 973, -1000, -1000, -1000, -1000, -1000, -1000, 771,
	61, 130, 155, 30, 10635, 149, 142, 11065, -1000, 21,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 738, -1000, -1000,
	-1000, -1000, -1000, 926, 933, 768, 917, 822, -1000, 6006,
	117, 9300, 10420, 5276, -1000, 567, 143, 11065, -124, 10850,
	126, 126, 126, -1000, 148, 11065, -1000, 11065, 121, 559,
	121, 121, 121, 11065, -1000, 214, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11065, 554,
	856, 69, 3463, 3463, 3463, 3463, 33, 3463, -68, 791,
	-1000, -1000, -1000, -1000, 3463, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 571, 896, 6737, 6737, 930,
	-1000, 738, -1000, -1000, -1000, 912, -1000, -1000, 335, 959,
	-1000, 7705, 212, -1000, 6737, 2306, 723, -1000, -1000, 723,
	-1000, -1000, 173, -1000, -1000, 7221, 7221, 7221, 7221, 7221,
	7221, 7221, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 723, -1000, 6495, 723,
	723, 723, 723, 723, 723, 723, 723, 6737, 723, 723,
	723, 723, 723, 723, 723, 723, 723, 723, 723, 723,
	723, 10187, 701, 888, -1000, -1000, -1000, 899, 8413, 9085,
	11065, 595, -1000, 711, 5017, -88, -1000, -1000, -1000, 301,
	8843, -1000, -1000, -1000, 855, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 671, -1000, 2104, 10850, 3463, 136, 733, 541,
	326, 533, 11065, 9945, 3463, 133, 11065, 891, 789, 11065,
	511, 508, -1000, 4758, -1000, 3463, 3463, 3463, 3463, 3463,
	3463, 3463, 3463, -1000, -1000, -1000, -1000, -1000, -1000, 3463,
	3463, -1000, -71, -1000, 11065, -1000, -1000, -1000, -1000, 966,
	247, 605, 199, 712, -1000, 444, 926, 571, 822, 8628,
	746, -1000, -1000, 11065, -1000, 6737, 6737, 449, -1000, 9730,
	-1000, -1000, 3722, 271, 7221, 380, 327, 7221, 7221, 7221,
	7221, 7221, 7221, 7221, 7221, 7221, 7221, 7221, 7221, 7221,
	7221, 7221, 409, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 505, -1000, 738, 813, 813, 229, 229, 229, 229,
	229, 229, 7463, 5522, 571, 669, 286, 6495, 6006, 6006,
	6737, 6737, 11280, 11280, 6006, 901, 290, 286, 11280, -1000,
	571, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6006, 6006,
	6006, 6006, 53, 11065, -1000, 11280, 9300, 9300, 9300, 9300,
	9300, -1000, 819, 817, -1000, 811, 802, 812, 11065, -1000,
	659, 8413, 197, 723, -1000, 9515, -1000, -1000, 53, 696,
	9300, 11065, -1000, -1000, 4499, 711, -88, 707, -1000, -98,
	-81, 6248, 227, -1000, -1000, -1000, -1000, 2945, 370, 220,
	-1000, -48, -1000, -1000, -1000, -1000, 757, -1000, -1000, -1000,
	757, 120, 757, 757, 757, -21, -21, -21, -21, -1000,
	-1000, -1000, -1000, -1000, -1000, 769, 766, -1000, 757, 757,
	757, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	762, 131, 762, 758, 758, 781, -1000, 11065, -156, 500,
	3463, 863, 3463, -1000, 78, 11065, -1000, 11065, -1000, -1000,
	11065, 3463, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 332, -1000, -1000,
	-1000, -1000, 830, 6737, 6737, 4240, 6737, -1000, -1000, -1000,
	896, -1000, 901, 929, -1000, 845, 843, 6006, -1000, -1000,
	271, 352, -1000, -1000, 506, -1000, -1000, -1000, -1000, 193,
	723, -1000, 1404, -1000, -1000, -1000, -1000, 380, 7221, 7221,
	7221, 137, 1404, 2081, 859, 1437, 229, 358, 358, 226,
	226, 226, 226, 226, 638, 638, -1000, -1000, -1000, 571,
	-1000, -1000, -1000, 571, 6006, 709, -1000, -1000, 6737, -1000,
	571, 657, 657, 350, 593, 735, -1000, 179, 732, 657,
	6006, 364, -1000, 6737, 571, -1000, 657, 571, 657, 657,
	750, 723, -1000, 674, -1000, 292, 888, 775, 788, 1022,
	-1000, -1000, -1000, -1000, 804, -1000, 803, -1000, -1000, -1000,
	-1000, -1000, 140, 139, 132, 10850, -1000, 954, 9300, 649,
	-1000, -1000, 707, -88, -106, -1000, -1000, -1000, 286, -1000,
	479, 704, 2686, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	763, 787, 87, 124, 152, 145, 464, 10850, -1000, -1000,
	-1000, 345, 79, 964, -1000, 86, -1000, 85, 424, -56,
	-1000, -1000, 412, -21, -21, 757, -21, -1000, -1000, 227,
	853, 227, 227, 227, 422, 422, -158, -158, -1000, -1000,
	405, 762, -1000, -1000, -1000, 387, -1000, 11065, 10850, 3463,
	-1000, 3981, -1000, -1000, -1000, -1000, -1000, -1000, 363, 280,
	204, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 52, 158, -1000, 3463, -1000, 330, 11065, 11065,
	828, 286, 286, 171, -1000, -1000, 11065, -1000, -1000, -1000,
	-1000, 643, -1000, -1000, -1000, 3204, 6006, -1000, 137, 1404,
	1908, -1000, 7221, 7221, -1000, -1000, 657, 6006, 286, -1000,
	-1000, -1000, 135, 409, 135, 7221, 7221, 4240, 7221, 7221,
	-150, 637, 281, -1000, 6737, 435, -1000, -1000, -1000, -1000,
	-1000, 785, 11280, 723, -1000, 8180, 10850, 930, 11280, 6737,
	6737, -1000, -1000, 6737, 761, -1000, 6737, -1000, -1000, -1000,
	723, 723, 723, 635, -1000, 930, 649, -1000, -1000, -1000,
	-102, -96, -1000, -1000, 2945, -1000, 2945, 10850, 958, -1000,
	454, 452, -1000, 431, -1000, -1000, 72, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -111, -1000, -1000, -1000, -1000,
	-1000, 584, 227, 227, -21, 227, -1000, 249, -1000, -1000,
	-1000, 655, -1000, 653, -1000, -9, -11, -1000, 702, -1000,
	647, 700, 779, -1000, 688, -1000, 288, -1000, 90, -1000,
	10850, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10850,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 11065, -1000, -1000, -1000, -1000, -1000, 10850, 98, -1000,
	-1000, 420, 6737, -1000, -1000, -1000, 3981, -1000, 954, 9300,
	-1000, -1000, 571, -1000, 7221, 1404, 1404, -1000, -1000, 571,
	757, 757, -1000, 757, 758, -1000, 757, 8, 757, 6,
	571, 571, 1721, 946, -1000, 1565, 809, 723, -133, -1000,
	286, 6737, -1000, 860, 627, 619, -1000, -1000, 5764, 571,
	639, 169, 635, 926, -1000, 286, 286, 286, 10850, 286,
	10850, 10850, 10850, 7947, 10850, 926, -1000, -1000, -1000, -1000,
	2686, -1000, 631, -1000, 757, 196, 196, -1000, -1000, -1000,
	81, -1000, -1000, -1000, -1000, 227, -1000, -1000, -1000, -21,
	418, -21, -58, -59, 385, -1000, 373, 10850, 10850, 11065,
	3981, 2945, 10850, -1000, -1000, -1000, 756, -1000, -1000, -1000,
	-1000, 886, 10850, -1000, -1000, 286, 951, 673, -1000, 1404,
	-1000, -1000, 116, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 7221, 7221, -1000, 7221, 7221, 7221, 571, 410,
	286, 80, -1000, 723, -1000, -1000, 739, 10850, 10850, -1000,
	-1000, 616, -1000, 611, 611, 611, 197, -1000, -1000, 70,
	10850, -1000, 777, -1000, -1000, 341, 26, 703, 10850, -1000,
	227, -1000, 227, -1000, -1000, 578, 576, 606, 753, 752,
	-1000, -1000, 751, 10850, 723, 88, 948, 931, -1000, -1000,
	291, 291, 291, 291, 18, -1000, -1000, 963, -1000, 723,
	-1000, 738, 147, -1000, 10850, -1000, -1000, -1000, -1000, -1000,
	70, -1000, 427, 287, 371, -164, -1000, 960, -1000, -1000,
	961, 748, -1000, -1000, -1000, -1000, 954, 10850, 10850, 10850,
	597, 45, 65, -1000, 6737, 6737, -1000, -1000, -1000, -1000,
	571, 57, -166, 11280, 619, 571, 10850, -1000, -1000, -1000,
	366, -1000, -1000, 10850, 196, 196, 10850, -1000, 587, 575,
	565, 733, 540, -1000, 10850, 737, 286, 614, -1000, 827,
	-154, -172, 589, -1000, -1000, -1000, -1000, -1000, -1000, 527,
	-1000, 954, -1000, -1000, -156, -1000, 45, 835, 10850, -1000,
	825, -1000, 84, 10850, -1000, -1000, -1000, 41, 523, -160,
	11065, -1000, 31, -1000, -167, 728, 723, -175, 10850, 6979,
	-1000, 469, 291, 571, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1195, 49, 497, 1194, 1187, 1185, 1183, 1182, 1181,
	1180, 1177, 1176, 1175, 1171, 1170, 1169, 1168, 1163, 1162,
	1156, 1150, 1148, 1147, 135, 1146, 1145, 1144, 67, 1143,
	80, 1141, 1140, 45, 65, 51, 39, 770, 1139, 26,
	69, 66, 1138, 53, 1136, 1135, 83, 1134, 79, 1133,
	1132, 91, 1131, 1129, 20, 4, 1128, 1127, 1125, 1124,
	77, 37, 1123, 1121, 1120, 1119, 1118, 1115, 48, 8,
	10, 12, 14, 1114, 30, 41, 1113, 54, 1112, 1111,
	1109, 1108, 33, 1107, 56, 1106, 23, 55, 1105, 13,
	60, 32, 24, 9, 81, 59, 1104, 31, 58, 44,
	1102, 1099, 501, 1098, 1095, 1094, 1093, 1092, 1091, 616,
	485, 1090, 1089, 1086, 34, 0, 268, 25, 75, 1085,
	43, 1083, 1405, 85, 61, 18, 1081, 27, 346, 46,
	1080, 1079, 36, 1078, 1077, 1076, 1075, 1074, 1071, 1067,
	1060, 944, 16, 21, 1059, 1056, 40, 42, 22, 47,
	57, 1053, 1052, 28, 1048, 7, 11, 1, 52, 1035,
	1033, 1031, 1027, 29, 17, 1026, 15, 1023, 6, 1022,
	1021, 3, 1016, 19, 1013, 2, 1012, 5, 1006, 1004,
	1003, 1345, 911, 1002, 990, 989, 985, 82,
}
var yyR1 = [...]int{

	0, 179, 180, 180, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 183,
	183, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 120,
	120, 177, 177, 176, 175, 175, 174, 174, 173, 16,
	160, 161, 161, 161, 161, 150, 133, 133, 133, 133,
	133, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 137, 137, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 136,
	136, 136, 136, 136, 136, 138, 138, 138, 138, 138,
	134, 134, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	140, 140, 140, 140, 140, 140, 140, 140, 149, 149,
	141, 141, 147, 147, 148, 148, 148, 146, 146, 146,
	144, 144, 145, 145, 142, 142, 142, 143, 143, 152,
	152, 169, 169, 168, 168, 168, 168, 159, 159, 165,
	165, 165, 165, 165, 165, 165, 158, 158, 167, 167,
	166, 153, 153, 153, 153, 153, 154, 155, 155, 155,
	155, 156, 156, 157, 157, 162, 162, 162, 163, 163,
	163, 164, 164, 164, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 184, 184, 185,
	185, 185, 185, 185, 185, 185, 172, 170, 170, 171,
	171, 13, 14, 14, 14, 14, 14, 15, 15, 17,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 107, 107, 104, 104, 105, 105, 106,
	106, 106, 108, 108, 108, 131, 131, 131, 19, 19,
	21, 21, 22, 23, 20, 20, 20, 20, 20, 186,
	24, 25, 25, 26, 26, 26, 30, 30, 30, 28,
	28, 29, 29, 35, 35, 34, 34, 36, 36, 36,
	36, 119, 119, 119, 118, 118, 38, 38, 39, 39,
	40, 40, 41, 41, 41, 53, 53, 89, 89, 91,
	91, 42, 42, 42, 42, 43, 43, 44, 44, 45,
	45, 126, 126, 125, 125, 125, 124, 124, 47, 47,
	47, 49, 48, 48, 48, 48, 50, 50, 52, 52,
	51, 51, 54, 54, 54, 54, 55, 55, 37, 37,
	37, 37, 37, 37, 37, 103, 103, 57, 57, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 67,
	67, 67, 67, 67, 67, 58, 58, 58, 58, 58,
	58, 58, 33, 33, 68, 68, 68, 74, 69, 69,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 65, 65, 65, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 64,
	64, 64, 64, 64, 64, 64, 64, 187, 187, 66,
	66, 66, 66, 31, 31, 31, 31, 31, 129, 129,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 78, 78, 32, 32, 76, 76, 77,
	79, 79, 75, 75, 75, 60, 60, 60, 60, 60,
	60, 60, 60, 62, 62, 62, 80, 80, 81, 81,
	82, 82, 83, 83, 84, 85, 85, 85, 86, 86,
	86, 86, 87, 87, 87, 59, 59, 59, 59, 59,
	59, 88, 88, 88, 88, 92, 92, 70, 70, 72,
	72, 71, 73, 93, 93, 97, 94, 94, 98, 98,
	98, 96, 96, 96, 121, 121, 121, 101, 101, 109,
	109, 110, 110, 102, 102, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 112, 112, 112, 113, 113,
	116, 116, 117, 117, 122, 122, 123, 123, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 181, 182, 127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 4, 6, 5, 5, 5, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 3, 2, 3, 1, 1, 1,
	1, 1, 2, 3, 3, 3, 3, 3, 3, 3,
	4, 2, 3, 2, 3, 2, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 2, 2, 2, 2, 1, 3, 3, 2, 1,
	1, 1, 4, 4, 4, 5, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 3, 3,
	0, 1, 0, 1, 0, 3, 3, 0, 2, 5,
	4, 1, 2, 2, 3, 2, 3, 0, 1, 2,
	3, 3, 2, 3, 2, 2, 1, 1, 1, 3,
	2, 1, 4, 4, 7, 7, 13, 1, 1, 2,
	2, 0, 1, 1, 3, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 11, 13, 7, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 3, 8,
	8, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 4, 3, 3,
	3, 3, 4, 3, 6, 4, 2, 4, 2, 2,
	2, 2, 3, 1, 1, 0, 1, 0, 1, 0,
	2, 2, 0, 2, 2, 0, 1, 1, 2, 1,
	1, 2, 1, 1, 2, 2, 2, 2, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 6,
	8, 8, 6, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -179, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 141, 115, 134, 48, 157, 158,
	160, 161, 25, 135, 136, 139, 140, -181, 8, 247,
	52, -180, 264, -82, 15, -26, 5, -24, -186, -24,
	-24, -24, -24, -24, -160, 52, -120, 120, 69, 149,
	239, 117, 118, 132, -102, 120, 122, 118, 118, 119,
	120, 239, 117, 118, -51, -122, 55, -115, 156, 255,
	157, 170, 171, 162, 195, 186, 256, 154, 183, 187,
	226, 64, 160, 235, 126, 137, 181, 177, 174, 27,
	200, 262, 176, 129, 201, 205, 227, 167, 168, 229,
	199, 31, 131, 257, 33, 145, 230, 203, 198, 194,
	197, 166, 193, 37, 207, 206, 208, 225, 189, 155,
	178, 18, 140, 143, 202, 204, 175, 124, 147, 261,
	231, 173, 144, 139, 234, 153, 161, 228, 169, 237,
	36, 212, 164, 165, 128, 158, 151, 191, 146, 179,
	180, 196, 163, 192, 159, 148, 141, 236, 213, 263,
	190, 188, 184, 185, 152, 120, 149, 150, 218, 219,
	220, 221, 258, 259, 232, 182, 214, 215, 118, 105,
	187, 111, 216, 119, 31, 147, -131, 118, -104, 150,
	218, 219, 220, 221, 55, 228, 227, 222, -122, 159,
	-127, -127, -127, -127, -127, -2, -86, 17, 16, -5,
	-3, -181, 6, 20, 21, -30, 38, 39, -25, -36,
	96, -37, -122, -56, 71, -61, 28, 55, -115, 23,
	-60, -57, -75, -73, -74, 105, 106, 94, 95, 102,
	72, 107, -65, -63, -64, -66, 57, 56, 65, 58,
	59, 60, 61, 66, 67, 68, -116, -71, -181, 42,
	43, 248, 249, 250, 251, 254, 252, 74, 32, 238,
	246, 245, 244, 242, 243, 240, 241, 123, 239, 100,
	247, -102, -39, -40, -41, -42, -53, -74, -181, -51,
	11, -46, -51, -94, -130, 159, -98, 228, 227, -117,
	-96, -116, -114, 226, 187, 225, 55, -115, 116, 70,
	22, 24, 210, 73, 105, 16, 74, 104, 248, 111,
	46, 240, 241, 238, 250, 251, 239, 216, 28, 10,
	25, 135, 21, 98, 113, 77, 78, 138, 23, 136,
	68, 19, 49, 130, 11, 13, 14, 123, 122, 89,
	119, 44, 8, 107, 26, 86, 40, 133, 42, 87,
	17, 242, 243, 30, 254, 142, 100, 47, 34, 71,
	66, 50, 233, 69, 15, 45, 88, 114, 247, 43,
	117, 6, 253, 29, 134, 41, 118, 217, 76, 121,
	67, 5, 132, 9, 48, 51, 244, 245, 246, 32,
	75, 12, -161, -150, 55, 119, -51, 247, -116, -110,
	123, -110, -110, 118, -51, -51, -109, 123, 55, -109,
	-109, -109, -51, 108, -51, 55, 29, 239, 55, 147,
	118, 148, 120, -128, -181, -117, -128, -128, -128, 151,
	152, -128, -105, 223, 50, -128, -182, 54, -87, 19,
	30, -37, -122, -83, -84, -37, -82, -2, -24, 34,
	-28, 21, 63, 11, -119, 70, 69, 86, -118, 22,
	-116, 57, 108, -37, -58, 89, 71, 87, 88, 73,
	91, 90, 101, 94, 95, 96, 97, 98, 99, 100,
	92, 93, 104, 79, 80, 81, 82, 83, 84, 85,
	-103, -181, -74, -181, 109, 110, -61, -61, -61, -61,
	-61, -61, -61, -181, -2, -69, -37, -181, -181, -181,
	-181, -181, -181, -181, -181, -181, -78, -37, -181, -187,
	-181, -187, -187, -187, -187, -187, -187, -187, -181, -181,
	-181, -181, -52, 26, -51, 29, 53, -47, -49, -48,
	-50, 40, 44, 46, 41, 42, 43, 47, -126, 22,
	-39, -181, -125, 143, -124, 22, -122, 57, -51, -46,
	-183, 53, 11, 51, 53, -94, 159, -95, -99, 229,
	231, 79, -121, -116, 57, 28, 29, 54, 53, -151,
	-133, -137, -134, -139, -138, -140, -135, -136, 186, 256,
	183, 187, 184, 105, 188, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 190, 200, 29, 137, 179, 180,
	181, 182, 201, 202, 203, 204, 205, 206, 207, 208,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	173, 174, 176, 177, 178, -116, -128, 120, -177, 51,
	55, 71, 55, -51, -51, 233, -128, 121, -51, 23,
	50, -51, 55, 55, -123, -122, -114, -128, -128, -128,
	-128, -128, -128, -128, -128, -128, -128, -107, 217, 224,
	-51, 9, 89, 53, 18, 108, 53, -85, 24, 25,
	-86, -182, -30, -62, -116, 58, 61, -29, 41, -51,
	-37, -37, -67, 66, 71, 67, 68, -118, 96, -123,
	-117, -114, -61, -68, -71, -74, 62, 89, 87, 88,
	73, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -129, 55, 57, 55,
	-60, -60, -116, -35, 21, -34, -36, -182, 53, -182,
	-2, -34, -34, -37, -37, -75, -116, -122, -75, -34,
	-28, -76, -77, 75, -75, -182, -34, -35, -34, -34,
	-90, 143, -51, -93, -97, -75, -40, -41, -41, -40,
	-41, 40, 40, 40, 45, 40, 45, 40, -48, -122,
	-182, -54, 48, 122, 49, -181, -124, -90, 51, -39,
	-51, -98, -95, 53, 230, 232, 233, 50, -37, -143,
	104, -162, -163, -164, -117, 57, 58, -150, -152, -153,
	-165, -154, 124, 128, 129, 132, -158, 126, 119, 133,
	66, 71, 28, 50, 210, 124, 133, 132, 64, -144,
	213, -141, 52, -141, -141, 185, -141, -141, -141, -142,
	187, -142, -142, -142, 52, 52, -141, -141, -141, -147,
	52, 175, -147, -147, -148, 52, -148, 50, 51, -51,
	-175, 258, -176, 55, -128, 23, -128, -111, 116, 113,
	114, -172, 112, 210, 187, 64, 28, 15, 248, 143,
	263, 55, 144, -51, -51, -51, -128, -106, 11, 89,
	36, -37, -37, -123, -84, -87, -101, 19, 11, 32,
	32, -34, 66, 67, 68, 108, -181, -68, -61, -61,
	-61, -33, 138, 70, -182, -182, -34, 53, -37, -182,
	-182, -182, 53, 51, 22, 53, 11, 108, 53, 11,
	-182, -34, -79, -77, 77, -37, -182, -182, -182, -182,
	-182, -59, 29, 32, -2, -181, -181, -55, 53, 12,
	79, -44, -43, 50, 51, -45, 50, -43, 40, 40,
	119, 119, 119, -91, -116, -55, -39, -55, -99, -100,
	234, 231, 237, 55, 53, -164, 79, 52, 50, 133,
	-158, -158, 55, -158, 55, 55, -156, -116, 66, 57,
	58, 59, 66, 238, 65, 9, 133, 133, 57, -145,
	214, 58, -142, -142, -141, -142, -143, 29, -143, -143,
	-143, -149, 57, -149, -146, 258, 259, -146, 58, -147,
	58, -51, -116, -128, -174, -173, -117, -127, -120, -185,
	149, 125, 130, 129, 55, 124, 128, 143, -178, 149,
	125, 126, 130, 129, 55, 119, 133, 124, 128, 143,
	132, -112, -113, 121, 22, 119, 133, 143, 116, -128,
	-108, 87, 12, -122, -122, 37, 108, -51, -38, 11,
	96, -117, -35, -33, 70, -61, -61, -182, -36, -132,
	105, 183, 137, 181, 177, 199, 189, 212, 179, 213,
	-129, -132, -61, -61, -117, -61, -61, 255, -82, 78,
	-37, 76, -92, 50, -93, -70, -72, -71, -181, -2,
	-88, -116, -91, -82, -97, -37, -37, -37, 52, -37,
	-181, -181, -181, -182, 53, -82, -55, 231, 235, 236,
	-163, -164, -167, -166, -116, 10, 9, 55, 55, 55,
	130, 238, 54, -143, -143, -142, -143, 55, 105, 54,
	53, 54, 179, 179, 53, 54, 53, 52, 51, 50,
	53, 79, -184, 119, 133, -127, -116, -127, -116, -51,
	-127, -116, 126, -153, 57, -37, -55, -39, -182, -61,
	-182, -141, -141, -141, -148, -141, 168, -141, 168, -182,
	-182, -182, 53, 19, -182, 53, 19, -181, -32, 253,
	-37, 27, -92, 53, -182, -182, -182, 53, 108, -182,
	-86, -89, -116, -89, -89, -89, -125, -116, -86, 54,
	53, -141, -155, 153, 154, 29, 155, -155, 133, -143,
	-142, 57, -142, 215, 215, 58, 58, -89, -116, -51,
	-173, -164, -116, 52, 26, -116, -80, 13, -142, 55,
	-61, -61, -61, -61, -61, -182, 57, 133, -72, 32,
	-2, -181, -116, -116, 53, 54, -182, -182, -182, -54,
	-169, -168, 51, 131, 64, 258, -166, 50, 66, 156,
	50, -156, -143, -143, 54, 54, 54, 52, 52, 52,
	-89, -181, 124, -81, 14, 16, -182, -182, -182, -182,
	-31, 89, 258, 9, -70, -2, 108, -116, -168, 55,
	-159, 79, 57, 260, 9, 10, 52, -55, -89, -89,
	-89, 54, -170, -171, 143, 133, -37, -69, -182, 256,
	47, 261, -93, -182, -116, 58, -116, -155, -155, -157,
	-116, 54, 54, 54, -177, -182, 53, -116, 52, 37,
	257, 262, 54, 53, -55, -175, -171, 32, -89, 37,
	127, -116, 145, 54, 258, -51, 146, 261, 52, -181,
	262, -157, -61, 142, 54, -182, -182,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 550, 0, 319, 319, 319, 319, 319, 319, 0,
	69, 603, 0, 0, 0, 0, -2, 309, 310, 0,
	312, 313, 834, 834, 834, 834, 834, 0, 33, 34,
	832, 1, 3, 558, 0, 0, 323, 326, 321, 0,
	603, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	601, 601, 601, 70, 0, 0, 604, 0, 599, 0,
	599, 599, 599, 0, 268, 390, 624, 625, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 0, 0,
	0, 0, 835, 835, 835, 835, 0, 835, 297, 286,
	288, 289, 290, 291, 835, 306, 307, 296, 308, 311,
	314, 315, 316, 317, 318, 27, 562, 0, 0, 550,
	29, 0, 319, 324, 325, 329, 327, 328, 320, 0,
	337, 341, 0, 398, 0, 403, 405, -2, -2, 0,
	440, 441, 442, 443, 444, 0, 0, 0, 0, 0,
	0, 0, 467, 468, 469, 470, 535, 536, 537, 538,
	539, 540, 541, 542, 407, 408, 532, 582, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 523, 0, 497,
	497, 497, 497, 497, 497, 497, 497, 0, 0, 0,
	0, 0, 0, 348, 350, 351, 352, 371, 0, 373,
	0, 0, 41, 45, 0, 808, 586, -2, -2, 0,
	0, 622, 623, -2, 733, -2, 620, 621, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 647, 648, 649,
	650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
	660, 661, 662, 663, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 0, 81, 0, 0, 835, 0, 71, 0,
	0, 0, 0, 0, 835, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 269, 835, 835, 835, 835, 835,
	835, 835, 835, 278, 836, 837, 279, 280, 281, 835,
	835, 283, 0, 298, 0, 292, 28, 833, 22, 0,
	0, 559, 0, 551, 552, 555, 558, 27, 326, 0,
	331, 330, 322, 0, 338, 0, 0, 0, 342, 0,
	344, 345, 0, 401, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 425, 426, 427, 428, 429, 430, 431,
	404, 0, 418, 0, 0, 0, 460, 461, 462, 463,
	464, 465, 0, 333, 27, 0, 438, 0, 0, 0,
	0, 0, 0, 0, 0, 329, 0, 524, 0, 489,
	0, 490, 491, 492, 493, 494, 495, 496, 0, 333,
	0, 0, 43, 0, 389, 0, 0, 0, 0, 0,
	0, 378, 0, 0, 381, 0, 0, 0, 0, 372,
	0, 0, 392, 777, 374, 0, 376, 377, -2, 0,
	0, 0, 39, 40, 0, 46, 808, 48, 49, 0,
	0, 0, 177, 594, 595, 596, 592, 215, 0, 85,
	91, 170, 87, 88, 89, 90, 160, 108, 130, 131,
	160, 160, 160, 160, 160, 174, 174, 174, 174, 142,
	143, 144, 145, 146, 147, 0, 0, 125, 160, 160,
	160, 129, 150, 151, 152, 153, 154, 155, 156, 157,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	162, 162, 162, 164, 164, 0, 64, 0, 74, 0,
	835, 0, 835, 79, 0, 0, 234, 0, 262, 600,
	0, 835, 265, 266, 391, 626, 627, 270, 271, 272,
	273, 274, 275, 276, 277, 282, 285, 299, 293, 294,
	287, 563, 0, 0, 0, 0, 0, 554, 556, 557,
	562, 30, 329, 0, 543, 0, 0, 0, 332, 25,
	399, 400, 402, 419, 0, 421, 423, 343, 339, 0,
	533, -2, 409, 410, 434, 435, 436, 0, 0, 0,
	0, 432, 414, 0, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 459, 508, 509, 0,
	457, 458, 466, 0, 0, 334, 335, 437, 0, 581,
	27, 0, 0, 0, 0, 0, 532, 0, 0, 0,
	0, 530, 527, 0, 0, 498, 0, 0, 0, 0,
	0, 0, 388, 396, 583, 0, 349, 367, 369, 0,
	364, 379, 380, 382, 0, 384, 0, 386, 387, 353,
	354, 355, 0, 0, 0, 0, 375, 396, 0, 396,
	42, 587, 47, 0, 0, 52, 53, 588, 589, 590,
	0, 80, 216, 218, 221, 222, 223, 82, 83, 84,
	0, 201, 0, 0, 0, 0, 0, 211, 196, 197,
	92, 0, 0, 0, 101, 0, 103, 105, 0, 172,
	171, 107, 0, 174, 174, 160, 174, 136, 137, 177,
	0, 177, 177, 177, 0, 0, 167, 167, 128, 119,
	0, 162, 121, 122, 123, 0, 124, 0, 0, 835,
	66, 0, 72, 73, 67, 602, 68, 834, 69, 0,
	615, 235, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 0, 0, 261, 835, 264, 302, 0, 0,
	0, 560, 561, 0, 553, 23, 0, 597, 598, 544,
	545, 346, 420, 422, 424, 0, 333, 411, 432, 415,
	0, 412, 0, 0, 406, 471, 0, 0, 439, -2,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 550, 0, 528, 0, 0, 488, 499, 500, 501,
	502, 575, 0, 0, -2, 0, 0, 550, 0, 0,
	0, 361, 368, 0, 0, 362, 0, 363, 383, 385,
	0, 0, 0, 0, 359, 550, 396, 38, 50, 51,
	0, 0, 57, 178, 0, 219, 0, 0, 0, 189,
	0, 0, 192, 0, 194, 195, 0, 212, 93, 94,
	95, 96, 97, 98, 99, 0, 102, 104, 106, 86,
	173, 0, 177, 177, 174, 177, 138, 0, 139, 140,
	141, 0, 158, 0, 126, 0, 0, 127, 0, 120,
	0, 0, 0, 65, 75, 76, 0, 224, 0, 834,
	0, 249, 250, 251, 252, 253, 254, 255, 834, 0,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 0, 834, 616, 617, 618, 619, 0, 0, 263,
	284, 0, 0, 300, 301, 564, 0, 24, 396, 0,
	340, 534, 0, 413, 0, 433, 416, 472, 336, 0,
	160, 160, 513, 160, 164, 516, 160, 518, 160, 521,
	0, 0, 0, 0, 533, 0, 0, 0, 525, 487,
	531, 0, 31, 0, 575, 565, 577, 579, 0, 27,
	0, 571, 0, 558, 584, 397, 585, 365, 0, 370,
	0, 0, 0, 373, 0, 558, 37, 54, 55, 56,
	217, 220, 0, 198, 160, 0, 0, 190, 191, 193,
	0, 100, 161, 132, 133, 177, 134, 175, 176, 174,
	0, 174, 0, 0, 0, 165, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 228, 0, 229, 231, 232,
	233, 0, 211, 227, 303, 304, 546, 347, 473, 417,
	476, 510, 174, 514, 515, 517, 519, 520, 522, 478,
	477, 479, 0, 0, 482, 0, 0, 0, 0, 0,
	529, 0, 32, 0, 580, -2, 0, 0, 0, 44,
	35, 0, 357, 0, 0, 0, 392, 360, 36, 180,
	0, 200, 202, 207, 208, 0, 0, 203, 211, 135,
	177, 159, 177, 168, 169, 0, 0, 0, 0, 0,
	77, 78, 0, 0, 0, 212, 548, 0, 511, 512,
	0, 0, 0, 0, 503, 486, 526, 0, 578, 0,
	-2, 0, 573, 572, 0, 366, 393, 394, 395, 356,
	179, 181, 0, 187, 0, 0, 199, 0, 209, 210,
	0, 0, 148, 149, 163, 166, 396, 0, 0, 0,
	0, 0, 0, 26, 0, 0, 480, 481, 483, 484,
	0, 0, 0, 0, 568, 27, 0, 358, 182, 183,
	0, 188, 185, 0, 0, 0, 0, 61, 0, 0,
	0, 71, 0, 257, 0, 0, 549, 547, 485, 0,
	0, 0, 576, -2, 574, 184, 186, 204, 205, 0,
	213, 396, 62, 225, 74, 256, 0, 0, 0, 504,
	0, 507, 0, 0, 63, 230, 258, 0, 0, 505,
	0, 214, 0, 226, 0, 0, 0, 0, 0, 0,
	506, 0, 0, 0, 206, 259, 260,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 264,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:310
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:315
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:316
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:320
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:343
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:351
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:355
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:361
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:368
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:374
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:378
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:384
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:388
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:395
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:407
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:419
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:423
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:429
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:435
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:439
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:443
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:448
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:449
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:453
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:457
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:462
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:466
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:472
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:476
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:480
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:484
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:490
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:494
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:500
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:504
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:508
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:522
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:532
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:536
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:542
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:547
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:563
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:578
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:593
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:597
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:601
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:609
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:613
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:618
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:622
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:627
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:631
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:637
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:642
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:647
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:653
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:658
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:664
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:670
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:677
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:684
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:689
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:693
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:697
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:703
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:708
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:719
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:729
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:734
		{
			yyDollar[1].columnType.NotNull = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:739
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:744
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:749
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:754
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:759
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:764
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:769
		{
			yyDollar[1].columnType.OnUpdate = NewValArg(yyDollar[4].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:774
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:779
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:784
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:789
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:794
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:799
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:806
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:811
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 149:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:998
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1008
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1012
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1016
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1020
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1024
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1028
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1032
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1038
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1043
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1048
		{
			yyVAL.optVal = nil
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1052
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1057
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 163:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1061
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1069
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1073
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1079
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1087
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1091
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1095
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1100
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1104
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1109
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1113
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1118
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1122
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1126
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1131
		{
			yyVAL.str = ""
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1135
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1141
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1145
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1151
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1155
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1161
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1165
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1170
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1174
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1180
		{
			yyVAL.str = ""
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1184
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1190
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1194
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1198
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1202
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1206
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1210
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1214
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1220
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1224
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1230
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1234
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1240
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1247
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1253
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1259
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 205:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1265
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 206:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1273
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1285
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1289
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1293
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1297
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1302
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1309
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1313
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1318
		{
			yyVAL.str = ""
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1322
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1326
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1334
		{
			yyVAL.str = yyDollar[1].str
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1338
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1342
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1348
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1352
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1356
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1362
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1366
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 226:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1380
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1394
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1403
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1407
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1411
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1424
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1434
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1439
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1444
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1448
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 256:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1480
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1486
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1490
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 259:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1496
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 260:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1500
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1506
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1512
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1520
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1525
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1533
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1537
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1543
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1547
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1552
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1558
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1562
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1566
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1571
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1575
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1579
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1583
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1587
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1591
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1595
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1599
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1603
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1607
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1611
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1615
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1625
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1629
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1633
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1637
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1641
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1645
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1649
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1659
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1665
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1669
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1675
		{
			yyVAL.str = ""
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1679
		{
			yyVAL.str = "extended "
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1685
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1689
		{
			yyVAL.str = "full "
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1695
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1699
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1703
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1709
		{
			yyVAL.showFilter = nil
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1713
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1717
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1723
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1727
		{
			yyVAL.str = SessionStr
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1731
		{
			yyVAL.str = GlobalStr
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1737
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1741
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1747
		{
			yyVAL.statement = &Begin{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1751
		{
			yyVAL.statement = &Begin{}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1757
		{
			yyVAL.statement = &Commit{}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1763
		{
			yyVAL.statement = &Rollback{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1769
		{
			yyVAL.statement = &OtherRead{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1773
		{
			yyVAL.statement = &OtherRead{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1777
		{
			yyVAL.statement = &OtherRead{}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1781
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1785
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1790
		{
			setAllowComments(yylex, true)
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1794
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1800
		{
			yyVAL.bytes2 = nil
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1804
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1810
		{
			yyVAL.str = UnionStr
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1814
		{
			yyVAL.str = UnionAllStr
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1818
		{
			yyVAL.str = UnionDistinctStr
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1823
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1827
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1831
		{
			yyVAL.str = SQLCacheStr
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1836
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1840
		{
			yyVAL.str = DistinctStr
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1845
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1849
		{
			yyVAL.str = StraightJoinHint
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1854
		{
			yyVAL.selectExprs = nil
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1858
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1864
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1868
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1874
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1878
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1882
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1886
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1891
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1895
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1899
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1906
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1911
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1915
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1921
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1925
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1935
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1939
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1943
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1949
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 356:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1953
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1959
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1963
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1969
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1973
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1986
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1990
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1994
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1998
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2004
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2006
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2010
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2012
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2016
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2018
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2021
		{
			yyVAL.empty = struct{}{}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2023
		{
			yyVAL.empty = struct{}{}
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2026
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2030
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2034
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2041
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2047
		{
			yyVAL.str = JoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2051
		{
			yyVAL.str = JoinStr
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2055
		{
			yyVAL.str = JoinStr
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2061
		{
			yyVAL.str = StraightJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2067
		{
			yyVAL.str = LeftJoinStr
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2071
		{
			yyVAL.str = LeftJoinStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2075
		{
			yyVAL.str = RightJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2079
		{
			yyVAL.str = RightJoinStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2085
		{
			yyVAL.str = NaturalJoinStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2089
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2099
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2103
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2109
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2113
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2118
		{
			yyVAL.indexHints = nil
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2122
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2126
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2130
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2135
		{
			yyVAL.expr = nil
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2139
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2145
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2149
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2153
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2157
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2161
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2165
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2169
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2175
		{
			yyVAL.str = ""
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2179
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2185
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2189
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2195
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2199
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2203
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2207
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2211
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2215
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2219
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2223
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 417:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2227
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2231
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2237
		{
			yyVAL.str = IsNullStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2241
		{
			yyVAL.str = IsNotNullStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2245
		{
			yyVAL.str = IsTrueStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2249
		{
			yyVAL.str = IsNotTrueStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2253
		{
			yyVAL.str = IsFalseStr
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2257
		{
			yyVAL.str = IsNotFalseStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2263
		{
			yyVAL.str = EqualStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2267
		{
			yyVAL.str = LessThanStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2271
		{
			yyVAL.str = GreaterThanStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2275
		{
			yyVAL.str = LessEqualStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2279
		{
			yyVAL.str = GreaterEqualStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2283
		{
			yyVAL.str = NotEqualStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2287
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2292
		{
			yyVAL.expr = nil
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2296
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2302
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2306
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2310
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2316
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2322
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2326
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2332
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2336
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2340
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2344
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2348
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2352
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2356
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2360
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2364
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2368
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2372
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2376
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2380
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2384
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2388
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2392
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2396
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2400
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2404
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2408
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2412
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2416
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2420
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2428
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2442
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2446
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2450
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2468
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2472
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2476
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2486
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2490
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2494
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2498
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2502
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 479:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2506
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 480:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2510
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 481:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2514
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 482:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2518
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 483:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2522
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 484:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2526
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 485:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2530
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 486:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2534
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 487:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2538
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2542
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2552
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2556
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2560
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2564
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2569
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2574
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2579
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2584
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2598
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2602
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2606
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2610
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2616
		{
			yyVAL.str = ""
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2620
		{
			yyVAL.str = BooleanModeStr
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2624
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 506:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2628
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2632
		{
			yyVAL.str = QueryExpansionStr
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2638
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2642
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2648
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2652
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2656
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2660
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2664
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2668
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2674
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2678
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2682
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2686
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2690
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2694
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2698
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2703
		{
			yyVAL.expr = nil
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2707
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2712
		{
			yyVAL.str = string("")
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2716
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2722
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2726
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2732
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2737
		{
			yyVAL.expr = nil
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2741
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2747
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2751
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 534:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2755
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2761
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2765
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2769
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2773
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2777
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2781
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2785
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2789
		{
			yyVAL.expr = &NullVal{}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2795
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2804
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2808
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2813
		{
			yyVAL.exprs = nil
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2817
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2822
		{
			yyVAL.expr = nil
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2826
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2831
		{
			yyVAL.orderBy = nil
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2835
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2841
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2845
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2851
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2856
		{
			yyVAL.str = AscScr
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2860
		{
			yyVAL.str = AscScr
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2864
		{
			yyVAL.str = DescScr
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2869
		{
			yyVAL.limit = nil
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2873
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2877
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2881
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2886
		{
			yyVAL.str = ""
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2890
		{
			yyVAL.str = ForUpdateStr
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2894
		{
			yyVAL.str = ShareModeStr
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2907
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2911
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2915
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2920
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2924
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 570:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2928
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2935
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2939
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2943
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2947
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2952
		{
			yyVAL.updateExprs = nil
		}
	case 576:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2956
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2962
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2966
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2972
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2976
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2982
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2988
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2998
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3002
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3008
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3014
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3018
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3024
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3028
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3032
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3039
		{
			yyVAL.bytes = []byte("charset")
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3046
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3050
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3054
		{
			yyVAL.expr = &Default{}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3063
		{
			yyVAL.byt = 0
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3065
		{
			yyVAL.byt = 1
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3068
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3070
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3073
		{
			yyVAL.str = ""
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3075
		{
			yyVAL.str = IgnoreStr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3079
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3081
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3083
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3085
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3087
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3089
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3091
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3093
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3095
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3097
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3100
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3102
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3104
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3108
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3110
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3114
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3118
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3125
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3131
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3135
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3142
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3372
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3381
		{
			decNesting(yylex)
		}
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3386
		{
			forceEOF(yylex)
		}
	case 835:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3391
		{
			forceEOF(yylex)
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3395
		{
			forceEOF(yylex)
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3399
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
