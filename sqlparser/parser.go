// Code generated by goyacc -o sqlparser/parser.go sqlparser/parser.y. DO NOT EDIT.

//line sqlparser/parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sqlparser/parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sqlparser/parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
	blockStatement       []Statement
	localVariable        *LocalVariable
	localVariables       []*LocalVariable
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const REFERENCES = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const POLICY = 57459
const WHILE = 57460
const UNIQUE = 57461
const KEY = 57462
const SHOW = 57463
const DESCRIBE = 57464
const EXPLAIN = 57465
const DATE = 57466
const ESCAPE = 57467
const REPAIR = 57468
const OPTIMIZE = 57469
const TRUNCATE = 57470
const MAXVALUE = 57471
const PARTITION = 57472
const REORGANIZE = 57473
const LESS = 57474
const THAN = 57475
const PROCEDURE = 57476
const TRIGGER = 57477
const VINDEX = 57478
const VINDEXES = 57479
const STATUS = 57480
const VARIABLES = 57481
const RESTRICT = 57482
const CASCADE = 57483
const NO = 57484
const ACTION = 57485
const PERMISSIVE = 57486
const RESTRICTIVE = 57487
const PUBLIC = 57488
const CURRENT_USER = 57489
const SESSION_USER = 57490
const PAD_INDEX = 57491
const FILLFACTOR = 57492
const IGNORE_DUP_KEY = 57493
const STATISTICS_NORECOMPUTE = 57494
const STATISTICS_INCREMENTAL = 57495
const ALLOW_ROW_LOCKS = 57496
const ALLOW_PAGE_LOCKS = 57497
const BEFORE = 57498
const AFTER = 57499
const EACH = 57500
const ROW = 57501
const SCROLL = 57502
const CURSOR = 57503
const OPEN = 57504
const CLOSE = 57505
const FETCH = 57506
const PRIOR = 57507
const FIRST = 57508
const LAST = 57509
const DEALLOCATE = 57510
const BEGIN = 57511
const START = 57512
const TRANSACTION = 57513
const COMMIT = 57514
const ROLLBACK = 57515
const BIT = 57516
const TINYINT = 57517
const SMALLINT = 57518
const SMALLSERIAL = 57519
const MEDIUMINT = 57520
const INT = 57521
const INTEGER = 57522
const SERIAL = 57523
const BIGINT = 57524
const BIGSERIAL = 57525
const INTNUM = 57526
const REAL = 57527
const DOUBLE = 57528
const PRECISION = 57529
const FLOAT_TYPE = 57530
const DECIMAL = 57531
const NUMERIC = 57532
const SMALLMONEY = 57533
const MONEY = 57534
const TIME = 57535
const TIMESTAMP = 57536
const DATETIME = 57537
const YEAR = 57538
const DATETIMEOFFSET = 57539
const DATETIME2 = 57540
const SMALLDATETIME = 57541
const CHAR = 57542
const VARCHAR = 57543
const VARYING = 57544
const BOOL = 57545
const CHARACTER = 57546
const VARBINARY = 57547
const NCHAR = 57548
const NVARCHAR = 57549
const NTEXT = 57550
const UUID = 57551
const TEXT = 57552
const TINYTEXT = 57553
const MEDIUMTEXT = 57554
const LONGTEXT = 57555
const CITEXT = 57556
const BLOB = 57557
const TINYBLOB = 57558
const MEDIUMBLOB = 57559
const LONGBLOB = 57560
const JSON = 57561
const JSONB = 57562
const ENUM = 57563
const GEOMETRY = 57564
const POINT = 57565
const LINESTRING = 57566
const POLYGON = 57567
const GEOMETRYCOLLECTION = 57568
const MULTIPOINT = 57569
const MULTILINESTRING = 57570
const MULTIPOLYGON = 57571
const ARRAY = 57572
const NOW = 57573
const GETDATE = 57574
const BPCHAR = 57575
const NULLX = 57576
const AUTO_INCREMENT = 57577
const APPROXNUM = 57578
const SIGNED = 57579
const UNSIGNED = 57580
const ZEROFILL = 57581
const ZONE = 57582
const AUTOINCREMENT = 57583
const DATABASES = 57584
const TABLES = 57585
const VITESS_KEYSPACES = 57586
const VITESS_SHARDS = 57587
const VITESS_TABLETS = 57588
const VSCHEMA_TABLES = 57589
const EXTENDED = 57590
const FULL = 57591
const PROCESSLIST = 57592
const NAMES = 57593
const CHARSET = 57594
const GLOBAL = 57595
const SESSION = 57596
const ISOLATION = 57597
const LEVEL = 57598
const READ = 57599
const WRITE = 57600
const ONLY = 57601
const REPEATABLE = 57602
const COMMITTED = 57603
const UNCOMMITTED = 57604
const SERIALIZABLE = 57605
const CURRENT_TIMESTAMP = 57606
const DATABASE = 57607
const CURRENT_DATE = 57608
const CURRENT_TIME = 57609
const LOCALTIME = 57610
const LOCALTIMESTAMP = 57611
const UTC_DATE = 57612
const UTC_TIME = 57613
const UTC_TIMESTAMP = 57614
const REPLACE = 57615
const CONVERT = 57616
const CAST = 57617
const SUBSTR = 57618
const SUBSTRING = 57619
const GROUP_CONCAT = 57620
const SEPARATOR = 57621
const INHERIT = 57622
const MATCH = 57623
const AGAINST = 57624
const BOOLEAN = 57625
const LANGUAGE = 57626
const WITH = 57627
const WITHOUT = 57628
const PARSER = 57629
const QUERY = 57630
const EXPANSION = 57631
const UNUSED = 57632
const GENERATED = 57633
const ALWAYS = 57634
const IDENTITY = 57635
const SEQUENCE = 57636
const INCREMENT = 57637
const MINVALUE = 57638
const CACHE = 57639
const CYCLE = 57640
const OWNED = 57641
const NONE = 57642
const CLUSTERED = 57643
const NONCLUSTERED = 57644
const REPLICATION = 57645
const INCLUDE = 57646
const TYPECAST = 57647
const CHECK = 57648

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	122, 132,
	-2, 122,
	-1, 36,
	155, 444,
	156, 444,
	-2, 434,
	-1, 272,
	110, 777,
	-2, 773,
	-1, 273,
	110, 778,
	-2, 774,
	-1, 343,
	81, 982,
	-2, 81,
	-1, 344,
	81, 933,
	-2, 82,
	-1, 349,
	81, 912,
	-2, 744,
	-1, 351,
	81, 956,
	-2, 746,
	-1, 663,
	52, 41,
	54, 41,
	-2, 43,
	-1, 808,
	110, 780,
	-2, 776,
	-1, 1050,
	5, 28,
	-2, 579,
	-1, 1075,
	5, 27,
	-2, 718,
	-1, 1176,
	5, 27,
	-2, 87,
	-1, 1393,
	5, 28,
	-2, 719,
	-1, 1476,
	5, 27,
	-2, 721,
	-1, 1627,
	5, 28,
	-2, 722,
	-1, 1751,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 15680

var yyAct = [...]int{
	273, 1715, 1486, 1489, 509, 1526, 985, 1078, 1602, 1617,
	1565, 740, 589, 3, 1109, 1290, 1716, 277, 872, 590,
	268, 302, 1263, 1167, 1634, 1112, 1291, 784, 890, 1412,
	914, 657, 475, 1264, 276, 89, 1399, 1178, 89, 251,
	920, 993, 1260, 1134, 980, 245, 963, 873, 655, 1140,
	913, 53, 348, 934, 1094, 1042, 841, 1236, 844, 66,
	250, 975, 89, 89, 353, 833, 746, 1164, 345, 353,
	673, 929, 353, 353, 1083, 860, 810, 522, 89, 473,
	89, 909, 528, 869, 672, 644, 89, 342, 534, 246,
	247, 248, 249, 1024, 691, 275, 687, 613, 260, 1669,
	659, 339, 337, 542, 1148, 556, 52, 1710, 566, 566,
	328, 1316, 1231, 1659, 1418, 335, 950, 947, 264, 476,
	477, 1303, 329, 1304, 1703, 1425, 1759, 1687, 1132, 1754,
	1625, 330, 555, 554, 564, 565, 557, 558, 559, 560,
	561, 562, 563, 556, 1570, 270, 566, 1168, 1169, 1743,
	86, 554, 564, 565, 557, 558, 559, 560, 561, 562,
	563, 556, 986, 1569, 566, 1663, 1696, 1686, 1648, 1255,
	1624, 843, 1387, 486, 279, 1286, 1287, 674, 338, 675,
	564, 565, 557, 558, 559, 560, 561, 562, 563, 556,
	1285, 714, 566, 488, 949, 489, 904, 905, 903, 517,
	1147, 496, 1558, 555, 554, 564, 565, 557, 558, 559,
	560, 561, 562, 563, 556, 521, 1102, 566, 775, 1101,
	1442, 1441, 1103, 1150, 89, 776, 301, 952, 353, 353,
	353, 353, 1144, 353, 1146, 1145, 333, 964, 1517, 864,
	353, 557, 558, 559, 560, 561, 562, 563, 556, 1336,
	1465, 566, 555, 554, 564, 565, 557, 558, 559, 560,
	561, 562, 563, 556, 1335, 976, 566, 353, 699, 531,
	1376, 1383, 521, 84, 80, 81, 82, 1374, 555, 554,
	564, 565, 557, 558, 559, 560, 561, 562, 563, 556,
	347, 1702, 566, 1704, 954, 479, 244, 507, 483, 484,
	1757, 1678, 715, 476, 477, 1713, 530, 1598, 1528, 555,
	554, 564, 565, 557, 558, 559, 560, 561, 562, 563,
	556, 1588, 747, 566, 567, 567, 748, 749, 89, 1346,
	1347, 1505, 513, 514, 1753, 89, 89, 89, 1670, 498,
	1741, 353, 1618, 1214, 870, 345, 1619, 353, 1607, 1351,
	1211, 1473, 621, 622, 623, 624, 625, 626, 627, 628,
	629, 630, 567, 731, 732, 1352, 733, 734, 735, 737,
	736, 716, 717, 718, 722, 720, 719, 721, 693, 695,
	567, 631, 694, 700, 696, 697, 698, 712, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 713,
	723, 724, 725, 726, 727, 728, 729, 730, 567, 1695,
	1420, 1306, 1419, 1559, 1570, 964, 977, 618, 1119, 619,
	1649, 1131, 1623, 1126, 1430, 930, 581, 582, 583, 584,
	585, 586, 587, 567, 1429, 1125, 83, 1114, 1297, 664,
	1432, 931, 670, 639, 748, 749, 502, 1725, 1212, 577,
	1210, 1360, 663, 491, 347, 347, 347, 347, 1549, 347,
	957, 632, 1298, 1431, 1213, 481, 347, 567, 559, 560,
	561, 562, 563, 556, 78, 77, 566, 78, 1450, 89,
	754, 478, 567, 930, 1415, 1093, 89, 1092, 89, 353,
	1091, 89, 738, 544, 89, 1608, 1609, 1610, 89, 931,
	353, 353, 353, 353, 353, 353, 353, 353, 567, 333,
	504, 1653, 506, 487, 353, 353, 1380, 521, 223, 89,
	57, 891, 893, 79, 1655, 1215, 510, 511, 512, 1747,
	515, 579, 580, 1117, 353, 1563, 1396, 519, 89, 567,
	1223, 503, 505, 1058, 353, 59, 60, 61, 62, 63,
	763, 807, 1650, 1036, 555, 554, 564, 565, 557, 558,
	559, 560, 561, 562, 563, 556, 782, 347, 566, 546,
	787, 811, 1330, 678, 685, 266, 555, 554, 564, 565,
	557, 558, 559, 560, 561, 562, 563, 556, 353, 497,
	566, 761, 911, 910, 739, 779, 892, 541, 930, 808,
	1581, 750, 1019, 751, 817, 848, 755, 1219, 521, 758,
	604, 1413, 1414, 1416, 931, 853, 856, 539, 815, 816,
	814, 862, 1580, 1331, 540, 539, 1043, 1579, 1578, 1577,
	1576, 789, 1575, 541, 777, 540, 539, 1573, 490, 89,
	806, 541, 89, 89, 89, 89, 89, 804, 1343, 785,
	786, 1081, 541, 796, 89, 676, 1257, 89, 874, 1752,
	861, 89, 618, 480, 619, 836, 89, 89, 1507, 848,
	353, 861, 501, 1065, 345, 838, 839, 1651, 1652, 1654,
	1656, 1657, 1020, 353, 1218, 1111, 743, 915, 1504, 858,
	1111, 866, 567, 536, 809, 540, 539, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 541, 1728, 898, 347, 1727, 1635, 540, 539,
	1055, 493, 494, 495, 812, 1259, 347, 347, 347, 347,
	347, 347, 347, 347, 482, 541, 1636, 485, 887, 353,
	347, 347, 1701, 353, 1700, 353, 89, 896, 89, 965,
	966, 967, 968, 89, 871, 89, 901, 900, 89, 353,
	791, 895, 50, 918, 875, 849, 850, 878, 540, 539,
	544, 857, 813, 347, 876, 877, 76, 879, 532, 1122,
	982, 1699, 899, 1637, 567, 541, 753, 807, 1503, 1633,
	800, 802, 803, 1110, 978, 979, 801, 764, 765, 766,
	767, 768, 769, 770, 771, 865, 567, 867, 868, 1515,
	1111, 772, 773, 1574, 840, 1111, 333, 333, 333, 333,
	333, 1697, 1444, 1443, 854, 854, 1044, 1121, 525, 529,
	854, 333, 1033, 1034, 1035, 808, 811, 327, 1435, 1434,
	333, 1312, 1151, 1151, 1173, 547, 555, 554, 564, 565,
	557, 558, 559, 560, 561, 562, 563, 556, 1171, 75,
	566, 992, 1151, 997, 1698, 1026, 1025, 854, 1014, 1472,
	1015, 1314, 520, 1016, 1439, 1362, 1136, 1137, 1138, 591,
	781, 1054, 1075, 1053, 1141, 1139, 299, 300, 602, 1165,
	834, 1038, 835, 1128, 1571, 353, 347, 1301, 89, 1300,
	540, 539, 1596, 1764, 1096, 1299, 1098, 70, 73, 347,
	1480, 1749, 1409, 1742, 353, 1120, 780, 541, 915, 1409,
	1709, 521, 71, 1104, 74, 353, 606, 607, 608, 609,
	610, 611, 612, 540, 539, 1064, 353, 1409, 1708, 1591,
	72, 68, 1409, 1694, 1106, 89, 1097, 1596, 1693, 1590,
	541, 1690, 1689, 1088, 1682, 521, 1522, 1127, 1409, 1679,
	1521, 1039, 1040, 1041, 988, 983, 1032, 1480, 1615, 347,
	837, 347, 760, 1099, 292, 291, 294, 295, 296, 297,
	1409, 1592, 1142, 293, 298, 347, 759, 353, 744, 812,
	742, 1179, 1480, 1513, 1480, 521, 1170, 1176, 1115, 1116,
	1118, 499, 1152, 1153, 492, 1155, 1156, 1157, 474, 347,
	1480, 1481, 1409, 1408, 1047, 1282, 521, 353, 1395, 521,
	89, 89, 1339, 1338, 1333, 1334, 1333, 1332, 89, 21,
	1062, 1048, 521, 23, 641, 521, 1516, 353, 1166, 1172,
	989, 1228, 991, 667, 1184, 1158, 23, 1160, 1161, 1162,
	1163, 846, 521, 1597, 474, 1596, 1017, 1073, 1436, 1185,
	1074, 683, 682, 1252, 1183, 1427, 1143, 1147, 1261, 1323,
	69, 1079, 333, 1475, 1079, 1080, 567, 353, 353, 54,
	50, 1080, 1226, 846, 668, 255, 666, 1667, 1060, 1267,
	1057, 874, 1262, 50, 1229, 1230, 1265, 874, 897, 1144,
	666, 1146, 1145, 1391, 641, 1284, 353, 1235, 353, 353,
	915, 808, 915, 1249, 1256, 797, 798, 641, 1048, 930,
	1248, 1095, 640, 1079, 925, 1048, 924, 1272, 926, 927,
	1271, 1059, 1270, 1056, 928, 931, 1426, 23, 1289, 1342,
	347, 1446, 1445, 1224, 1337, 1105, 641, 902, 1283, 1048,
	1490, 1113, 50, 1302, 669, 783, 1288, 1755, 1707, 1684,
	257, 1594, 1123, 1492, 1593, 1585, 1584, 1546, 591, 1514,
	1142, 851, 852, 1459, 1307, 89, 353, 1305, 954, 1313,
	981, 1322, 1321, 89, 50, 1319, 1309, 1276, 353, 1232,
	1233, 976, 646, 649, 650, 651, 647, 353, 648, 652,
	1133, 1326, 1250, 1251, 741, 1253, 1254, 50, 1108, 89,
	1174, 1175, 1722, 347, 970, 353, 1084, 1085, 795, 969,
	65, 1566, 1090, 1447, 353, 1349, 1261, 89, 1228, 1182,
	953, 1491, 1353, 1364, 1324, 1325, 1087, 1327, 1328, 1329,
	757, 1355, 745, 347, 518, 1089, 881, 646, 649, 650,
	651, 647, 908, 648, 652, 1358, 1361, 1084, 1085, 886,
	880, 650, 651, 347, 1493, 1494, 1495, 1496, 1497, 1498,
	1499, 884, 261, 262, 1685, 1365, 885, 353, 614, 353,
	353, 353, 89, 353, 1021, 347, 1372, 882, 1222, 353,
	1340, 1720, 883, 915, 535, 1031, 1030, 523, 1348, 1159,
	854, 681, 1311, 1269, 1095, 1390, 854, 533, 1389, 524,
	353, 1398, 616, 1405, 1216, 1402, 1403, 1404, 500, 1106,
	1714, 1422, 1460, 1407, 1357, 1417, 785, 786, 990, 756,
	1457, 1310, 347, 1181, 347, 1292, 1421, 1452, 984, 1453,
	1454, 1455, 654, 353, 353, 535, 1424, 1179, 915, 1142,
	252, 353, 1451, 258, 259, 1736, 1022, 1023, 1428, 529,
	1456, 353, 621, 622, 623, 624, 625, 626, 627, 628,
	629, 630, 1345, 1296, 1449, 1705, 1029, 1367, 1552, 1438,
	1448, 1440, 253, 617, 1028, 54, 1551, 1463, 1080, 1675,
	1674, 631, 615, 994, 995, 996, 353, 353, 620, 1673,
	1488, 333, 1341, 1672, 788, 1295, 1294, 1476, 1437, 1237,
	353, 537, 1583, 1265, 1354, 1582, 1560, 1464, 1124, 778,
	353, 56, 1049, 1356, 58, 1474, 1186, 1502, 1535, 8,
	1532, 7, 1506, 1350, 1485, 665, 1500, 1066, 1501, 1533,
	6, 1359, 51, 1239, 1, 1508, 353, 353, 89, 1668,
	347, 353, 1600, 1510, 1518, 1531, 5, 1529, 1606, 1589,
	353, 1523, 845, 847, 1130, 1587, 67, 1662, 1595, 1315,
	1344, 632, 1180, 1195, 1530, 987, 1177, 1002, 863, 1616,
	1630, 353, 1487, 922, 912, 472, 64, 1572, 923, 921,
	1562, 1567, 919, 684, 948, 1149, 1547, 1265, 1561, 951,
	690, 688, 689, 1400, 686, 1400, 1400, 1400, 1241, 1406,
	692, 231, 1246, 340, 1240, 347, 653, 677, 538, 1238,
	1519, 1209, 1520, 1208, 998, 1244, 1466, 1467, 889, 1468,
	1469, 1470, 1217, 774, 1018, 516, 1400, 233, 1242, 1243,
	353, 353, 353, 353, 575, 1027, 1599, 353, 1100, 346,
	1658, 1268, 303, 47, 527, 1550, 1245, 1247, 1462, 1063,
	601, 859, 1614, 1525, 353, 1611, 1613, 353, 278, 347,
	347, 353, 1621, 1631, 1191, 799, 290, 1458, 874, 1626,
	287, 289, 288, 790, 1072, 353, 353, 1461, 548, 332,
	1645, 637, 645, 643, 353, 353, 642, 353, 1086, 1082,
	47, 1646, 1638, 1639, 1640, 1641, 1642, 353, 256, 1660,
	1661, 331, 1643, 1644, 334, 1666, 1225, 1386, 1557, 353,
	794, 25, 1478, 1479, 55, 263, 19, 1680, 1676, 18,
	48, 26, 27, 17, 20, 16, 1292, 15, 14, 29,
	13, 1258, 1539, 12, 1192, 1188, 1509, 11, 1193, 1190,
	1189, 10, 28, 9, 74, 1538, 1273, 1274, 1691, 1692,
	1275, 1537, 1536, 1277, 1534, 1194, 1706, 4, 353, 254,
	22, 1187, 1292, 1524, 2, 0, 1711, 1527, 0, 0,
	1717, 0, 0, 0, 0, 353, 1400, 1718, 0, 353,
	1612, 1612, 1719, 0, 1724, 0, 0, 1726, 0, 0,
	1721, 0, 1765, 0, 0, 0, 89, 1564, 353, 1731,
	1045, 0, 1734, 0, 1046, 353, 1733, 0, 0, 0,
	0, 1050, 1051, 1052, 0, 0, 89, 0, 0, 0,
	1061, 0, 1739, 0, 1739, 1067, 1750, 1746, 1068, 1069,
	1070, 1071, 1748, 0, 1732, 0, 0, 1545, 353, 1751,
	0, 0, 1756, 0, 0, 0, 353, 1544, 0, 1761,
	0, 1760, 0, 0, 0, 0, 1601, 1603, 1604, 1605,
	0, 0, 0, 1292, 0, 0, 0, 0, 1739, 0,
	508, 508, 508, 508, 0, 508, 0, 854, 0, 0,
	1628, 0, 508, 1629, 0, 1363, 0, 1632, 0, 0,
	0, 1540, 1541, 1543, 0, 0, 0, 1542, 0, 47,
	0, 1527, 1292, 0, 0, 0, 0, 0, 0, 0,
	1292, 1292, 0, 1664, 576, 0, 0, 578, 0, 0,
	0, 0, 0, 1671, 0, 1388, 0, 0, 0, 0,
	0, 1745, 591, 0, 0, 1683, 0, 0, 0, 0,
	0, 0, 0, 0, 588, 0, 592, 593, 594, 595,
	596, 597, 598, 599, 600, 0, 603, 605, 605, 605,
	605, 605, 605, 605, 605, 1135, 633, 634, 635, 636,
	1136, 1137, 1138, 0, 1423, 0, 0, 656, 1141, 1139,
	299, 300, 0, 0, 1712, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1762, 0, 0, 0, 0, 0,
	1384, 1292, 49, 0, 0, 1723, 0, 0, 526, 0,
	1234, 0, 0, 0, 955, 956, 958, 959, 960, 0,
	961, 962, 0, 0, 1400, 0, 0, 0, 0, 0,
	0, 1737, 0, 0, 0, 0, 0, 971, 972, 973,
	0, 974, 0, 87, 0, 0, 243, 0, 0, 0,
	0, 0, 1490, 0, 0, 0, 0, 1281, 0, 0,
	0, 0, 0, 0, 347, 1492, 0, 0, 267, 0,
	87, 87, 1527, 555, 554, 564, 565, 557, 558, 559,
	560, 561, 562, 563, 556, 0, 87, 566, 87, 550,
	0, 553, 0, 0, 87, 0, 0, 568, 569, 570,
	571, 572, 573, 574, 0, 551, 552, 549, 555, 554,
	564, 565, 557, 558, 559, 560, 561, 562, 563, 556,
	0, 0, 566, 1008, 0, 0, 0, 0, 0, 0,
	0, 508, 0, 1491, 0, 0, 0, 1007, 0, 0,
	947, 0, 508, 508, 508, 508, 508, 508, 508, 508,
	0, 0, 0, 0, 0, 0, 508, 508, 0, 0,
	1143, 1147, 936, 0, 1012, 0, 1493, 1494, 1495, 1496,
	1497, 1498, 1499, 1006, 0, 0, 943, 1586, 932, 0,
	0, 0, 0, 0, 933, 0, 0, 0, 0, 0,
	0, 0, 1366, 1144, 0, 1146, 1145, 0, 0, 1368,
	0, 1201, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1377, 1378, 1379, 0, 0, 1382, 1620, 591, 0,
	0, 47, 1003, 1000, 1001, 0, 999, 0, 0, 1392,
	1393, 1394, 87, 1397, 0, 592, 1381, 939, 0, 935,
	944, 0, 0, 0, 0, 0, 0, 941, 940, 1136,
	1137, 1138, 0, 0, 0, 1010, 1013, 1141, 1139, 299,
	300, 0, 0, 1665, 0, 0, 1202, 0, 0, 0,
	0, 1204, 1197, 1198, 0, 1205, 1200, 1199, 1154, 0,
	1433, 1207, 1203, 0, 334, 334, 334, 334, 334, 0,
	0, 0, 1206, 0, 0, 0, 0, 0, 1196, 656,
	0, 894, 1568, 567, 0, 0, 0, 0, 334, 555,
	554, 564, 565, 557, 558, 559, 560, 561, 562, 563,
	556, 0, 0, 566, 0, 0, 0, 0, 0, 1005,
	0, 0, 0, 0, 0, 0, 87, 0, 567, 0,
	0, 0, 0, 87, 661, 87, 48, 26, 27, 1471,
	0, 23, 24, 48, 26, 27, 0, 0, 1539, 0,
	1004, 0, 0, 937, 0, 1482, 1483, 1484, 28, 938,
	0, 42, 0, 0, 0, 28, 1735, 0, 0, 0,
	0, 0, 0, 0, 0, 508, 1512, 508, 0, 0,
	0, 0, 0, 0, 37, 0, 0, 0, 50, 1009,
	0, 508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 48, 26, 27, 0, 1011, 0, 0, 1740, 945,
	0, 946, 0, 1539, 0, 0, 0, 0, 0, 1553,
	1554, 1555, 1556, 28, 942, 0, 0, 0, 0, 1143,
	1147, 0, 0, 0, 0, 48, 26, 27, 0, 0,
	1037, 0, 0, 0, 0, 0, 0, 1539, 30, 31,
	33, 32, 35, 1545, 0, 1318, 1320, 28, 0, 0,
	0, 0, 1144, 1544, 1146, 1145, 0, 0, 0, 0,
	0, 0, 0, 36, 43, 44, 0, 87, 45, 46,
	34, 0, 0, 0, 87, 0, 87, 0, 0, 87,
	0, 0, 87, 0, 0, 0, 762, 0, 0, 0,
	0, 0, 1076, 1077, 0, 0, 0, 1540, 1541, 1543,
	1622, 0, 0, 1542, 0, 1627, 0, 87, 1545, 0,
	0, 38, 39, 0, 40, 41, 0, 0, 1544, 567,
	334, 0, 0, 0, 0, 0, 87, 0, 0, 1647,
	0, 0, 0, 0, 0, 762, 0, 0, 1369, 1370,
	0, 1371, 1545, 0, 0, 1373, 0, 1375, 48, 26,
	27, 0, 1544, 0, 0, 0, 0, 0, 0, 1681,
	1539, 0, 1540, 1541, 1543, 0, 0, 0, 1542, 1677,
	28, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 267, 267, 0, 0, 855, 855, 267, 0,
	0, 0, 855, 1410, 1411, 0, 1540, 1541, 1543, 0,
	0, 0, 1542, 0, 0, 0, 0, 47, 49, 0,
	0, 0, 714, 0, 0, 49, 0, 0, 0, 0,
	1738, 0, 267, 267, 267, 267, 0, 87, 0, 855,
	87, 87, 87, 87, 87, 0, 0, 0, 0, 508,
	0, 0, 888, 0, 0, 87, 0, 0, 0, 661,
	0, 0, 0, 0, 87, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1545, 1744, 0, 0, 0,
	0, 0, 0, 49, 0, 1544, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 699,
	0, 0, 0, 0, 0, 0, 0, 1266, 0, 47,
	0, 0, 0, 0, 0, 1766, 1767, 49, 0, 0,
	0, 0, 0, 0, 1278, 1279, 1280, 0, 0, 1540,
	1541, 1543, 0, 715, 0, 1542, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 87, 0, 0, 0,
	0, 87, 0, 87, 0, 0, 87, 0, 0, 0,
	1308, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 229, 0, 0, 0, 1317, 0, 0, 0,
	0, 762, 0, 621, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 267, 731, 732, 239, 733, 734, 735,
	737, 736, 716, 717, 718, 722, 720, 719, 721, 693,
	695, 0, 631, 694, 700, 696, 697, 698, 712, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	713, 723, 724, 725, 726, 727, 728, 729, 730, 0,
	49, 267, 0, 0, 0, 0, 0, 224, 0, 0,
	0, 0, 0, 226, 0, 0, 0, 267, 0, 334,
	232, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1385, 0,
	0, 230, 632, 0, 234, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 235, 236, 237, 238, 242, 0, 0, 0, 0,
	241, 240, 0, 0, 0, 0, 0, 0, 1220, 1221,
	0, 0, 0, 0, 1266, 0, 87, 1477, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 1511, 0, 762, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 855, 0, 0, 0, 0, 0, 855, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1266, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1688, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	661, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1758, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 459, 449,
	0, 414, 461, 385, 403, 469, 405, 406, 438, 365,
	423, 154, 400, 383, 92, 388, 358, 395, 359, 386,
	416, 116, 384, 451, 426, 130, 467, 133, 431, 0,
	176, 142, 0, 0, 418, 453, 421, 445, 413, 439,
	373, 430, 462, 401, 434, 463, 0, 0, 0, 352,
	0, 916, 917, 0, 0, 0, 0, 0, 105, 0,
	433, 458, 397, 471, 437, 357, 432, 0, 363, 366,
	468, 456, 392, 393, 1107, 0, 0, 0, 0, 855,
	0, 417, 422, 442, 410, 0, 0, 0, 0, 0,
	0, 0, 0, 389, 0, 429, 0, 0, 0, 370,
	364, 0, 415, 0, 0, 0, 372, 0, 390, 443,
	0, 354, 447, 454, 412, 203, 457, 409, 408, 161,
	0, 108, 0, 182, 120, 402, 131, 440, 470, 460,
	419, 452, 387, 396, 110, 394, 168, 155, 194, 428,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 362, 355, 391, 446,
	448, 377, 436, 367, 398, 441, 399, 420, 382, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 1730, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 87, 360, 0, 177, 196, 214,
	215, 361, 381, 455, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 435,
	169, 107, 195, 175, 376, 380, 374, 375, 424, 425,
	464, 465, 466, 444, 371, 0, 378, 379, 0, 450,
	125, 427, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 404, 356, 407, 0, 0, 0, 0, 0, 0,
	0, 368, 369, 170, 411, 0, 104, 459, 449, 0,
	414, 461, 385, 403, 469, 405, 406, 438, 365, 423,
	154, 400, 383, 92, 388, 358, 395, 359, 386, 416,
	116, 384, 451, 426, 130, 467, 133, 431, 0, 176,
	142, 0, 0, 418, 453, 421, 445, 413, 439, 373,
	430, 462, 401, 434, 463, 0, 0, 0, 352, 0,
	916, 917, 0, 0, 0, 0, 0, 105, 0, 433,
	458, 397, 471, 437, 357, 432, 0, 363, 366, 468,
	456, 392, 393, 0, 0, 0, 0, 0, 0, 0,
	417, 422, 442, 410, 0, 0, 0, 0, 0, 0,
	0, 0, 389, 0, 429, 0, 0, 0, 370, 364,
	0, 415, 0, 0, 0, 372, 0, 390, 443, 0,
	354, 447, 454, 412, 203, 457, 409, 408, 161, 0,
	108, 0, 182, 120, 402, 131, 440, 470, 460, 419,
	452, 387, 396, 110, 394, 168, 155, 194, 428, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 362, 355, 391, 446, 448,
	377, 436, 367, 398, 441, 399, 420, 382, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 360, 0, 177, 196, 214, 215,
	361, 381, 455, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 435, 169,
	107, 195, 175, 376, 380, 374, 375, 424, 425, 464,
	465, 466, 444, 371, 0, 378, 379, 0, 450, 125,
	427, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	404, 356, 407, 0, 0, 0, 0, 0, 0, 0,
	368, 369, 170, 411, 0, 104, 459, 449, 0, 414,
	461, 385, 403, 469, 405, 406, 438, 365, 423, 154,
	400, 383, 92, 388, 358, 395, 359, 386, 416, 116,
	384, 451, 426, 130, 467, 133, 431, 0, 176, 142,
	0, 0, 418, 453, 421, 445, 413, 439, 373, 430,
	462, 401, 434, 463, 0, 0, 0, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 433, 458,
	397, 471, 437, 357, 432, 0, 363, 366, 468, 456,
	392, 393, 0, 0, 0, 0, 0, 0, 0, 417,
	422, 442, 410, 0, 0, 0, 0, 0, 0, 1227,
	0, 389, 0, 429, 0, 0, 0, 370, 364, 0,
	415, 0, 0, 0, 372, 0, 390, 443, 0, 354,
	447, 454, 412, 203, 457, 409, 408, 161, 0, 108,
	0, 182, 120, 402, 131, 440, 470, 460, 419, 452,
	387, 396, 110, 394, 168, 155, 194, 428, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 362, 355, 391, 446, 448, 377,
	436, 367, 398, 441, 399, 420, 382, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 360, 0, 177, 196, 214, 215, 361,
	381, 455, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 435, 169, 107,
	195, 175, 376, 380, 374, 375, 424, 425, 464, 465,
	466, 444, 371, 0, 378, 379, 0, 450, 125, 427,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 404,
	356, 407, 0, 0, 0, 0, 0, 0, 0, 368,
	369, 170, 411, 0, 104, 459, 449, 0, 414, 461,
	385, 403, 469, 405, 406, 438, 365, 423, 154, 400,
	383, 92, 388, 358, 395, 359, 386, 416, 116, 384,
	451, 426, 130, 467, 133, 431, 0, 176, 142, 0,
	0, 418, 453, 421, 445, 413, 439, 373, 430, 462,
	401, 434, 463, 50, 0, 0, 352, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 433, 458, 397,
	471, 437, 357, 432, 0, 363, 366, 468, 456, 392,
	393, 0, 0, 0, 0, 0, 0, 0, 417, 422,
	442, 410, 0, 0, 0, 0, 0, 0, 0, 0,
	389, 0, 429, 0, 0, 0, 370, 364, 0, 415,
	0, 0, 0, 372, 0, 390, 443, 0, 354, 447,
	454, 412, 203, 457, 409, 408, 161, 0, 108, 0,
	182, 120, 402, 131, 440, 470, 460, 419, 452, 387,
	396, 110, 394, 168, 155, 194, 428, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 362, 355, 391, 446, 448, 377, 436,
	367, 398, 441, 399, 420, 382, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 360, 0, 177, 196, 214, 215, 361, 381,
	455, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 435, 169, 107, 195,
	175, 376, 380, 374, 375, 424, 425, 464, 465, 466,
	444, 371, 0, 378, 379, 0, 450, 125, 427, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 404, 356,
	407, 0, 0, 0, 0, 0, 0, 0, 368, 369,
	170, 411, 0, 104, 459, 449, 0, 414, 461, 385,
	403, 469, 405, 406, 438, 365, 423, 154, 400, 383,
	92, 388, 358, 395, 359, 386, 416, 116, 384, 451,
	426, 130, 467, 133, 431, 0, 176, 142, 0, 0,
	418, 453, 421, 445, 413, 439, 373, 430, 462, 401,
	434, 463, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 433, 458, 397, 471,
	437, 357, 432, 0, 363, 366, 468, 456, 392, 393,
	0, 0, 0, 0, 0, 0, 0, 417, 422, 442,
	410, 0, 0, 0, 0, 0, 0, 805, 0, 389,
	0, 429, 0, 0, 0, 370, 364, 0, 415, 0,
	0, 0, 372, 0, 390, 443, 0, 354, 447, 454,
	412, 203, 457, 409, 408, 161, 0, 108, 0, 182,
	120, 402, 131, 440, 470, 460, 419, 452, 387, 396,
	110, 394, 168, 155, 194, 428, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 362, 355, 391, 446, 448, 377, 436, 367,
	398, 441, 399, 420, 382, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 360, 0, 177, 196, 214, 215, 361, 381, 455,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 435, 169, 107, 195, 175,
	376, 380, 374, 375, 424, 425, 464, 465, 466, 444,
	371, 0, 378, 379, 0, 450, 125, 427, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 404, 356, 407,
	0, 0, 0, 0, 0, 0, 0, 368, 369, 170,
	411, 0, 104, 459, 449, 0, 414, 461, 385, 403,
	469, 405, 406, 438, 365, 423, 154, 400, 383, 92,
	388, 358, 395, 359, 386, 416, 116, 384, 451, 426,
	130, 467, 133, 431, 0, 176, 142, 0, 0, 418,
	453, 421, 445, 413, 439, 373, 430, 462, 401, 434,
	463, 0, 0, 0, 352, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 433, 458, 397, 471, 437,
	357, 432, 0, 363, 366, 468, 456, 392, 393, 0,
	0, 0, 0, 0, 0, 0, 417, 422, 442, 410,
	0, 0, 0, 0, 0, 0, 0, 0, 389, 0,
	429, 0, 0, 0, 370, 364, 0, 415, 0, 0,
	0, 372, 0, 390, 443, 0, 354, 447, 454, 412,
	203, 457, 409, 408, 161, 0, 108, 0, 182, 120,
	402, 131, 440, 470, 460, 419, 452, 387, 396, 110,
	394, 168, 155, 194, 428, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 362, 355, 391, 446, 448, 377, 436, 367, 398,
	441, 399, 420, 382, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	360, 0, 177, 196, 214, 215, 361, 381, 455, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 435, 169, 107, 195, 175, 376,
	380, 374, 375, 424, 425, 464, 465, 466, 444, 371,
	0, 378, 379, 0, 450, 125, 427, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 404, 356, 407, 0,
	0, 0, 0, 0, 0, 0, 368, 369, 170, 411,
	0, 104, 459, 449, 0, 414, 461, 385, 403, 469,
	405, 406, 438, 365, 423, 154, 400, 383, 92, 388,
	358, 395, 359, 386, 416, 116, 384, 451, 426, 130,
	467, 133, 431, 0, 176, 142, 0, 0, 418, 453,
	421, 445, 413, 439, 373, 430, 462, 401, 434, 463,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 433, 458, 397, 471, 437, 357,
	432, 0, 363, 366, 468, 456, 392, 393, 0, 0,
	0, 0, 0, 0, 0, 417, 422, 442, 410, 0,
	0, 0, 0, 0, 0, 0, 0, 389, 0, 429,
	0, 0, 0, 370, 364, 0, 415, 0, 0, 0,
	372, 0, 390, 443, 0, 354, 447, 454, 412, 203,
	457, 409, 408, 161, 0, 108, 0, 182, 120, 402,
	131, 440, 470, 460, 419, 452, 387, 396, 110, 394,
	168, 155, 194, 428, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	362, 355, 391, 446, 448, 377, 436, 367, 398, 441,
	399, 420, 382, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 360,
	0, 177, 196, 214, 215, 361, 381, 455, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 435, 169, 107, 195, 175, 376, 380,
	374, 375, 424, 425, 464, 465, 466, 444, 371, 0,
	378, 379, 0, 450, 125, 427, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 404, 356, 407, 0, 0,
	0, 0, 0, 0, 0, 368, 369, 170, 411, 0,
	104, 459, 449, 0, 414, 461, 385, 403, 469, 405,
	406, 438, 365, 423, 154, 400, 383, 92, 388, 358,
	395, 359, 386, 416, 116, 384, 451, 426, 130, 467,
	133, 431, 0, 176, 142, 0, 0, 418, 453, 421,
	445, 413, 439, 373, 430, 462, 401, 434, 463, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 433, 458, 397, 471, 437, 357, 432,
	0, 363, 366, 468, 456, 392, 393, 0, 0, 0,
	0, 0, 0, 0, 417, 422, 442, 410, 0, 0,
	0, 0, 0, 0, 0, 0, 389, 0, 429, 0,
	0, 0, 370, 364, 0, 415, 0, 0, 0, 372,
	0, 390, 443, 0, 354, 447, 454, 412, 203, 457,
	409, 408, 161, 0, 108, 0, 182, 120, 402, 131,
	440, 470, 460, 419, 452, 387, 396, 110, 394, 168,
	155, 194, 428, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 362,
	355, 391, 446, 448, 377, 436, 367, 398, 441, 399,
	420, 382, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 350, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 360, 0,
	177, 196, 214, 215, 361, 381, 455, 206, 207, 208,
	209, 0, 0, 0, 351, 349, 124, 173, 128, 135,
	164, 212, 435, 169, 107, 195, 175, 376, 380, 374,
	375, 424, 425, 464, 465, 466, 444, 371, 0, 378,
	379, 0, 450, 125, 427, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 404, 356, 407, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 170, 411, 0, 104,
	459, 449, 0, 414, 461, 385, 403, 469, 405, 406,
	438, 365, 423, 154, 400, 383, 92, 388, 358, 395,
	359, 386, 416, 116, 384, 451, 426, 130, 467, 133,
	431, 0, 176, 142, 0, 0, 418, 453, 421, 445,
	413, 439, 373, 430, 462, 401, 434, 463, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 433, 458, 397, 471, 437, 357, 432, 0,
	363, 366, 468, 456, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 417, 422, 442, 410, 0, 0, 0,
	0, 0, 0, 0, 0, 389, 0, 429, 0, 0,
	0, 370, 364, 0, 415, 0, 0, 0, 372, 0,
	390, 443, 0, 354, 447, 454, 412, 203, 457, 409,
	408, 161, 0, 108, 0, 182, 120, 402, 131, 440,
	470, 460, 419, 452, 387, 396, 110, 394, 168, 155,
	194, 428, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	391, 446, 448, 377, 436, 367, 398, 441, 399, 420,
	382, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 381, 455, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 435, 169, 107, 195, 175, 376, 380, 374, 375,
	424, 425, 464, 465, 466, 444, 371, 0, 378, 379,
	0, 450, 125, 427, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 404, 356, 407, 0, 0, 0, 0,
	0, 0, 0, 368, 369, 170, 411, 0, 104, 459,
	449, 0, 414, 461, 385, 403, 469, 405, 406, 438,
	365, 423, 154, 400, 383, 92, 388, 358, 395, 359,
	386, 416, 116, 384, 451, 426, 130, 467, 133, 431,
	0, 176, 142, 0, 0, 418, 453, 421, 445, 413,
	439, 373, 430, 462, 401, 434, 463, 0, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 433, 458, 397, 471, 437, 357, 432, 0, 363,
	366, 468, 456, 392, 393, 0, 0, 0, 0, 0,
	0, 0, 417, 422, 442, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 389, 0, 429, 0, 0, 0,
	370, 364, 0, 415, 0, 0, 0, 372, 0, 390,
	443, 0, 354, 447, 454, 412, 203, 457, 409, 408,
	161, 0, 108, 0, 182, 120, 402, 131, 440, 470,
	460, 419, 452, 387, 396, 110, 394, 168, 155, 194,
	428, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 362, 355, 391,
	446, 448, 377, 436, 367, 398, 441, 399, 420, 382,
	93, 183, 671, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 350, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 360, 0, 177, 196,
	214, 215, 361, 381, 455, 206, 207, 208, 209, 0,
	0, 0, 351, 349, 124, 173, 128, 135, 164, 212,
	435, 169, 107, 195, 175, 376, 380, 374, 375, 424,
	425, 464, 465, 466, 444, 371, 0, 378, 379, 0,
	450, 125, 427, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 404, 356, 407, 0, 0, 0, 0, 0,
	0, 0, 368, 369, 170, 411, 0, 104, 459, 449,
	0, 414, 461, 385, 403, 469, 405, 406, 438, 365,
	423, 154, 400, 383, 92, 388, 358, 395, 359, 386,
	416, 116, 384, 451, 426, 130, 467, 133, 431, 0,
	176, 142, 0, 0, 418, 453, 421, 445, 413, 439,
	373, 430, 462, 401, 434, 463, 0, 0, 0, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	433, 458, 397, 471, 437, 357, 432, 0, 363, 366,
	468, 456, 392, 393, 0, 0, 0, 0, 0, 0,
	0, 417, 422, 442, 410, 0, 0, 0, 0, 0,
	0, 0, 0, 389, 0, 429, 0, 0, 0, 370,
	364, 0, 415, 0, 0, 0, 372, 0, 390, 443,
	0, 354, 447, 454, 412, 203, 457, 409, 408, 161,
	0, 108, 0, 182, 120, 402, 131, 440, 470, 460,
	419, 452, 387, 396, 110, 394, 168, 155, 194, 428,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 362, 355, 391, 446,
	448, 377, 436, 367, 398, 441, 399, 420, 382, 93,
	183, 341, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 350, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 360, 0, 177, 196, 214,
	215, 361, 381, 455, 206, 207, 208, 209, 0, 0,
	0, 351, 349, 344, 343, 128, 135, 164, 212, 435,
	169, 107, 195, 175, 376, 380, 374, 375, 424, 425,
	464, 465, 466, 444, 371, 0, 378, 379, 0, 450,
	125, 427, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 404, 356, 407, 0, 0, 0, 0, 0, 0,
	0, 368, 369, 170, 411, 154, 104, 0, 92, 0,
	0, 274, 0, 0, 0, 116, 271, 0, 0, 130,
	313, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	304, 305, 0, 0, 0, 0, 0, 0, 906, 0,
	50, 0, 0, 272, 292, 291, 294, 295, 296, 297,
	0, 0, 105, 293, 298, 299, 300, 907, 0, 0,
	269, 285, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 0, 0, 0, 0, 325,
	0, 284, 0, 0, 280, 281, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 323, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 314, 324,
	320, 321, 318, 319, 317, 316, 315, 326, 306, 307,
	308, 309, 311, 0, 125, 310, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 92, 842, 170, 274, 322,
	104, 0, 116, 271, 0, 0, 130, 313, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 292, 291, 294, 295, 296, 297, 0, 0, 105,
	293, 298, 299, 300, 0, 0, 0, 269, 285, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 265, 0, 0, 0, 325, 0, 284, 0,
	0, 280, 281, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 323,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 314, 324, 320, 321, 318,
	319, 317, 316, 315, 326, 306, 307, 308, 309, 311,
	0, 125, 310, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 92, 0, 170, 274, 322, 104, 0, 116,
	271, 0, 0, 130, 313, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 304, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 521, 272, 292, 291,
	294, 295, 296, 297, 0, 0, 105, 293, 298, 299,
	300, 0, 0, 0, 269, 285, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 0,
	0, 0, 0, 325, 0, 284, 0, 0, 280, 281,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 323, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 314, 324, 320, 321, 318, 319, 317, 316,
	315, 326, 306, 307, 308, 309, 311, 0, 125, 310,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 92,
	0, 170, 274, 322, 104, 0, 116, 271, 0, 0,
	130, 313, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 272, 292, 291, 294, 295, 296,
	297, 0, 0, 105, 293, 298, 299, 300, 0, 0,
	0, 269, 285, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 265, 0, 0, 0,
	325, 0, 284, 0, 0, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 323, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 314,
	324, 320, 321, 318, 319, 317, 316, 315, 326, 306,
	307, 308, 309, 311, 0, 125, 310, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 0, 23, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 170, 154,
	322, 104, 92, 0, 0, 274, 0, 0, 0, 116,
	271, 0, 0, 130, 313, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 304, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 272, 292, 291,
	294, 295, 296, 297, 0, 0, 105, 293, 298, 299,
	300, 0, 0, 0, 269, 285, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 0,
	0, 0, 0, 325, 0, 284, 0, 0, 280, 281,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 323, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 314, 324, 320, 321, 318, 319, 317, 316,
	315, 326, 306, 307, 308, 309, 311, 0, 125, 310,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 92,
	0, 170, 274, 322, 104, 0, 116, 271, 0, 0,
	130, 313, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 272, 292, 291, 294, 295, 296,
	297, 0, 0, 105, 293, 298, 299, 300, 0, 0,
	0, 269, 285, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 0, 0, 0, 0,
	325, 0, 284, 0, 0, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 323, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 314,
	324, 320, 321, 318, 319, 317, 316, 315, 326, 306,
	307, 308, 309, 311, 0, 125, 310, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 0, 0, 0, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 170, 116,
	322, 104, 0, 130, 313, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 304, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 272, 292, 291,
	294, 295, 296, 297, 0, 0, 105, 293, 298, 299,
	300, 0, 0, 0, 0, 285, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 0,
	0, 0, 0, 325, 0, 284, 0, 0, 280, 281,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 323, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 1763, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 314, 324, 320, 321, 318, 319, 317, 316,
	315, 326, 306, 307, 308, 309, 311, 0, 125, 310,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	0, 0, 154, 0, 0, 92, 0, 0, 274, 0,
	0, 170, 116, 322, 104, 0, 130, 313, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 292, 291, 294, 295, 296, 297, 0, 0, 105,
	293, 298, 299, 300, 0, 0, 0, 0, 285, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 0, 0, 0, 0, 325, 0, 284, 0,
	0, 280, 281, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 323,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 314, 324, 320, 321, 318,
	319, 317, 316, 315, 326, 306, 307, 308, 309, 311,
	0, 125, 310, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 0, 0, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 170, 116, 322, 104, 0, 130,
	313, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	304, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 272, 292, 291, 294, 295, 296, 297,
	0, 0, 105, 293, 298, 299, 300, 0, 0, 0,
	0, 285, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 0, 0, 0, 0, 325,
	0, 284, 0, 0, 280, 281, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 323, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 314, 324,
	320, 321, 318, 319, 317, 316, 315, 326, 306, 307,
	308, 309, 311, 0, 125, 310, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 0, 0, 0, 154, 0,
	0, 92, 0, 0, 0, 0, 0, 170, 116, 322,
	104, 0, 130, 0, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 554, 564, 565, 557, 558, 559, 560,
	561, 562, 563, 556, 0, 0, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 0,
	0, 154, 0, 0, 92, 0, 543, 0, 0, 0,
	170, 116, 567, 104, 0, 130, 0, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	0, 545, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 540, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 660, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 662, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 23,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 23,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	0, 0, 792, 0, 0, 793, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 680, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	0, 679, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 660, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 662, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	658, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	1401, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	1729, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	1293, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 662, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	0, 545, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 752,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	638, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 336, 163, 118,
	197, 0, 0, 0, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 170, 116, 0, 104, 0, 130, 0,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 272, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 104,
}

var yyPact = [...]int{
	2255, -1000, -218, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1370, 1416, -1000, -1000, -1000, -1000, -1000, -1000, 1167,
	788, 353, 403, 154, 14486, 398, 2660, 15066, -1000, 108,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1131, -1000, -1000,
	-1000, -1000, -1000, 1333, 1366, 1154, 1332, 1233, -1000, 7778,
	350, 12743, 14196, 6583, -1000, 952, -199, 359, 14776, 340,
	340, 14776, 14776, 340, -1000, -117, 393, 15066, -1000, 15066,
	328, 948, 328, 328, 328, 15066, -1000, 479, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 15066, 945, 1288, 390, 4350, 4350, 4350,
	4350, 177, 4350, -67, 1193, -1000, -1000, -1000, -1000, 4350,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	866, 1278, 8378, 8378, 1370, -1000, 1131, -1000, -1000, -1000,
	1272, -1000, -1000, 629, 1400, -1000, 9843, 459, -1000, 8378,
	1926, 1099, -1000, -1000, 1099, -1000, -1000, 420, -1000, -1000,
	9257, 9257, 9257, 9257, 9257, 9257, 9257, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1099, -1000, 8081, 1099, 1099, 1099, 1099, 1099, 1099,
	1099, 1099, 8378, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
	1099, 1099, 1171, 1099, 1099, 1099, 1099, 13903, 1092, 1151,
	-1000, -1000, -1000, 1319, 10713, 11583, 15066, 1032, -1000, 1100,
	6264, -95, -1000, -1000, -1000, 574, 11293, -1000, -1000, -1000,
	1271, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1007, -1000, 2512, 371, -1000, -1000, 15066, 1152,
	934, 613, 932, 1191, 271, 15066, -1000, 13613, 4350, 357,
	15066, 1305, 1189, 15066, 930, 916, -1000, 5945, -1000, 4350,
	4350, 4350, 4350, 4350, 4350, 4350, 4350, -1000, -1000, -1000,
	-1000, -1000, -1000, 4350, 4350, -1000, -42, -1000, 15066, -1000,
	-1000, -1000, -1000, 1410, 504, 862, 456, 1101, -1000, 624,
	1333, 866, 1233, 11003, 1176, -1000, -1000, 15066, -1000, 8378,
	8378, 723, -1000, 13323, -1000, -1000, 4669, 509, 9257, 709,
	529, 9257, 9257, 9257, 9257, 9257, 9257, 9257, 9257, 9257,
	9257, 9257, 9257, 9257, 9257, 9257, 834, 1171, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 914, -1000, 1131, 917,
	917, 3, 3, 3, 3, 3, 3, 9550, 7184, 866,
	997, 564, 8081, 7778, 7778, 8378, 8378, 15356, 15356, 7778,
	1323, 583, 564, 15356, -1000, 866, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 20, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7778, 7778, 7778, 7778, 197, 15066, -1000,
	15356, 12743, 12743, 12743, 12743, 12743, -1000, 1219, 1205, -1000,
	1246, 1230, 1218, 15066, -1000, 980, 10713, 472, 1099, -1000,
	13033, -1000, -1000, 197, 1046, 12743, 15066, -1000, -1000, 5626,
	1100, -95, 1093, -1000, -75, -79, 6887, 486, -1000, -1000,
	-1000, -1000, 3712, 998, 2021, -131, -28, -1000, -1000, -1000,
	-1000, 1125, -1000, 1125, 241, 1125, 1125, 1125, -1000, 1125,
	1125, 16, 16, 16, 16, 16, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1166, 1161, -1000, 1125, 1125, 1125, -1000,
	1125, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1138, 212, 1138, 1127, 1127, -1000, -1000, 14776, 1315,
	-140, 908, 4350, 1304, 4350, 15066, 1385, 15066, -1000, -1000,
	-1000, 2018, 15066, -1000, 15066, -1000, -1000, 15066, 4350, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 591, -1000, -1000, -1000, -1000, 1247,
	8378, 8378, 5307, 8378, -1000, -1000, -1000, 1278, -1000, 1323,
	1365, -1000, 1263, 1262, 7778, -1000, -1000, 509, 545, -1000,
	-1000, 765, -1000, -1000, -1000, -1000, 443, 1099, -1000, 186,
	-1000, -1000, -1000, -1000, 709, 9257, 9257, 9257, 484, 186,
	754, 86, 58, 3, 370, 370, 2, 2, 2, 2,
	2, 145, 145, -1000, -1000, -1000, -1000, 866, -1000, -1000,
	-1000, 866, 7778, 1095, -1000, -1000, 8378, -1000, 866, 977,
	977, 829, 697, 1079, -1000, 433, 1077, 977, 7778, 594,
	-1000, 8378, 866, -1000, -1000, 977, 866, 977, 977, 1027,
	1099, -1000, 1069, -1000, 570, 1151, 1165, 1185, 1206, -1000,
	-1000, -1000, -1000, 1204, -1000, 1181, -1000, -1000, -1000, -1000,
	-1000, 369, 366, 364, 14776, -1000, 1376, 12743, 1063, -1000,
	-1000, 1093, -95, -58, -1000, -1000, -1000, -1000, 564, -1000,
	-1000, 867, 1091, 3393, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1155, 742, 14776, 300, 304, 477, 362, 859,
	-1000, -1000, -1000, 760, -1000, 14776, 1409, -1000, -1000, 298,
	-1000, 286, 612, 835, 15066, 112, 1147, 1822, -1000, -222,
	-1000, -33, -1000, -1000, 803, 16, 16, 1125, 16, 16,
	16, -1000, -1000, 486, 1269, 486, 486, 486, 486, 831,
	831, -155, -155, -1000, -1000, -1000, 799, 1138, -1000, -1000,
	-1000, 785, -1000, 1159, 1131, -1000, 4988, -1000, -1000, -1000,
	-1000, -1000, 1310, 1178, -1000, -1000, -1000, 153, -1000, 1518,
	2055, 327, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 196, 407, -1000, 4350, -1000, 595, 15066,
	15066, 1250, 564, 564, 430, -1000, -1000, 15066, -1000, -1000,
	-1000, -1000, 1071, -1000, -1000, -1000, 4031, 7778, -1000, 484,
	186, 40, -1000, 9257, 9257, -1000, -1000, 977, 7778, 564,
	-1000, -1000, -1000, 1302, 834, 1302, 9257, 9257, 5307, 9257,
	9257, -130, 1064, 576, -1000, 8378, 647, -1000, -1000, -1000,
	-1000, -1000, 1175, 15356, 1099, -1000, 10423, 14776, 1370, 15356,
	8378, 8378, -1000, -1000, 8378, 1134, -1000, 8378, -1000, -1000,
	-1000, 1099, 1099, 1099, 961, -1000, 1370, 1063, -1000, -1000,
	-1000, -84, -103, -1000, -1000, 3712, -1000, 3712, 12453, -1000,
	1396, 1354, 306, 336, -1000, 849, 843, -1000, 841, -1000,
	-15, -1000, -197, 88, -49, -1000, -1000, 1099, -1000, 1133,
	1308, -1000, 1273, 782, -1000, 818, -211, -1000, -1000, -1000,
	-1000, -1000, -1000, 1099, 1132, 1129, -1000, 1128, -1000, -1000,
	-1000, 1014, 486, 486, 16, 486, 486, 486, -1000, 516,
	-1000, -1000, -1000, -1000, 972, -1000, 970, -1000, 54, 39,
	-1000, 1090, -1000, 968, 15066, 14776, -1000, 1085, -1000, 567,
	1353, 168, 15066, 1385, -1000, 228, -1000, 14776, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 14776, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15066, -1000,
	-1000, -1000, -1000, -1000, 14776, 323, -1000, -1000, 817, 8378,
	-1000, -1000, -1000, 4988, -1000, 1376, 12743, -1000, -1000, 866,
	-1000, 9257, 186, 186, -1000, -1000, 866, 1125, 1125, -1000,
	1125, 1127, -1000, -1000, 1125, 80, 1125, 73, 866, 866,
	462, 2127, -1000, 217, 1891, 1099, -124, -1000, 564, 8378,
	-1000, 1280, 1017, 1049, -1000, -1000, 7481, 866, 964, 426,
	961, 1333, -1000, 564, 564, 564, 11873, 564, 11873, 11873,
	11873, 10133, 14776, 1333, -1000, -1000, -1000, -1000, 3393, -1000,
	958, -1000, 1125, 1125, 454, 454, -206, 275, 273, -1000,
	-1000, -1000, -1000, -199, -1000, -1000, 612, -1000, 8378, 11873,
	-185, -1000, 1082, 1010, 2101, -1000, 213, 866, -1000, 784,
	-1000, 783, 1003, -1000, -1000, -1000, 486, -1000, -1000, -1000,
	-1000, -1000, 16, 816, 16, -36, -37, 764, -1000, 763,
	1089, 1172, 4988, 3712, 355, 1331, -1000, -1000, 1341, 1307,
	14776, -1000, -1000, -1000, 1120, -1000, -1000, -1000, -1000, 1295,
	14776, -1000, -1000, 564, 1374, 1050, -1000, 186, -1000, -1000,
	194, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	9257, 9257, -1000, 9257, 9257, 9257, 866, 811, 564, 214,
	-1000, 1099, -1000, -1000, 1040, 14776, 14776, -1000, -1000, 956,
	-1000, -1000, 940, 940, 940, 472, -1000, -1000, 1098, 12453,
	1301, -1000, 737, -1000, -1000, 621, 171, 617, -1000, 14776,
	-199, -1000, 1099, 553, 938, 1116, 750, -1000, 981, 19,
	-155, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 486, -1000,
	486, -1000, -1000, 905, 901, 12453, 14776, 15066, -1000, -1000,
	14776, -1000, -1000, -1000, -1000, -1000, 133, 2347, 1114, 11873,
	1099, 332, 1372, 1362, -1000, -1000, 160, 160, 160, 160,
	111, -1000, -1000, 1407, -1000, 1099, -1000, 1131, 425, -1000,
	14776, -1000, -1000, -1000, -1000, -1000, 1170, 1910, 110, -1000,
	838, 556, 755, 551, 549, 548, 547, 546, 541, 519,
	-1000, -1000, -1000, 1406, -1000, -1000, -1000, 1402, 1113, -1000,
	1112, 8378, 162, -1000, -1000, 894, 884, -1000, -1000, -1000,
	-1000, -1000, -1000, 926, 1111, 1108, 1001, -1000, 131, 2347,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14776,
	14776, 14776, 14776, 313, 8964, 8964, 12453, 913, 195, 209,
	-1000, 8378, 8378, -1000, -1000, -1000, -1000, 866, 122, -175,
	15356, 1049, 866, 14776, -1000, -1000, 14776, -1000, -160, 1910,
	14776, -1000, 730, -1000, -1000, 666, 724, 666, 666, 666,
	666, 666, 454, 454, 14776, 12453, 553, -1000, -129, 365,
	-1000, -1000, -208, 12453, 12453, -137, 14776, 8378, 2347, -1000,
	1033, 161, -1000, -1000, -1000, -1000, 14776, 1392, 1388, 1379,
	1378, 2313, 1926, 115, 904, 1152, 900, -1000, 14776, 1106,
	564, 1029, -1000, 1236, -134, -179, 1020, -1000, -1000, 1099,
	897, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 612, 612, 893, 888, -1000, -1000, -1000,
	107, 805, 722, 685, 683, -22, -1000, 1359, 1376, 1105,
	883, 865, -1000, -216, -1000, 564, -1000, 14776, 127, -1000,
	-1000, 1293, -1000, -1000, -1000, -1000, -1000, 2347, 2347, -1000,
	-140, -1000, 195, 1258, 12453, -1000, 1174, -1000, 14776, -1000,
	1910, -1000, -1000, 318, 1098, 657, -1000, 654, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 12163, 1098, 11873, 1376, 1098,
	8378, -1000, 2512, 1336, 14776, 2470, -1000, 2248, -1000, -1000,
	191, 858, -153, 866, -1000, 15066, 1170, -1000, -1000, -1000,
	419, 1170, 856, 1098, -1000, 564, 1131, -1000, -1000, -1000,
	580, 184, -1000, -176, -1000, 1104, -1000, 4988, -1000, -1000,
	-1000, -1000, 114, 1099, -180, 14776, -1000, 2347, 8671, -1000,
	848, 1622, 160, 866, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1674, 12, 1029, 1670, 1669, 1667, 1455, 1439, 1430,
	1428, 1664, 1662, 1661, 1655, 1653, 1651, 1647, 1643, 1640,
	1639, 1638, 1637, 1635, 1634, 1633, 1629, 1626, 520, 1625,
	1624, 1621, 88, 1620, 98, 1618, 1617, 55, 171, 56,
	58, 575, 1616, 48, 122, 131, 1611, 74, 1599, 1598,
	102, 1596, 85, 1593, 1592, 115, 1591, 1589, 28, 7,
	20, 34, 1588, 1584, 95, 145, 1583, 1582, 1581, 1580,
	1576, 1575, 76, 19, 22, 21, 33, 1568, 174, 17,
	1561, 75, 1560, 1559, 1558, 1555, 51, 1554, 82, 27,
	39, 77, 1551, 36, 1550, 83, 54, 42, 18, 101,
	84, 1549, 47, 87, 70, 1548, 1545, 776, 1544, 1537,
	1535, 1534, 1533, 1532, 638, 663, 1524, 1523, 1521, 52,
	0, 226, 4, 103, 1518, 59, 1517, 1918, 93, 100,
	31, 1516, 45, 297, 65, 1513, 1511, 57, 97, 99,
	96, 94, 1510, 1504, 1502, 1501, 1500, 1230, 49, 46,
	81, 1499, 1495, 1494, 23, 61, 44, 67, 79, 1493,
	1492, 1489, 40, 1488, 29, 25, 5, 71, 1487, 1486,
	1485, 1484, 50, 30, 1483, 26, 15, 10, 2, 3,
	1482, 1480, 1479, 9, 1477, 37, 1476, 6, 1475, 11,
	1473, 1472, 1470, 1469, 1468, 1467, 1466, 1465, 1464, 1459,
	32, 14, 53, 43, 24, 66, 41, 1458, 1457, 1,
	16, 8, 1452, 1449, 1444, 1442, 1552, 872, 1435, 1433,
	1426, 1424, 610,
}

var yyR1 = [...]int{
	0, 214, 215, 215, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 218,
	218, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 212, 212, 211, 213, 213, 12, 12, 12, 12,
	12, 207, 207, 207, 207, 207, 13, 13, 209, 209,
	14, 14, 100, 100, 104, 104, 104, 105, 105, 105,
	105, 135, 135, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 205, 205, 206, 206, 206, 208,
	208, 210, 210, 210, 210, 210, 210, 210, 210, 191,
	191, 191, 192, 192, 192, 192, 192, 192, 194, 194,
	195, 195, 125, 125, 189, 189, 188, 187, 187, 186,
	186, 185, 196, 196, 20, 169, 170, 170, 170, 170,
	170, 158, 139, 139, 139, 139, 139, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 202, 202,
	202, 203, 203, 203, 203, 203, 203, 203, 203, 198,
	198, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 148, 148, 148, 148, 148,
	148, 197, 197, 193, 193, 193, 193, 193, 143, 143,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	142, 142, 142, 142, 142, 142, 142, 142, 144, 144,
	144, 144, 144, 144, 144, 144, 140, 140, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 146, 146, 146, 146, 146, 146, 146, 146, 157,
	157, 147, 147, 155, 155, 156, 156, 156, 154, 154,
	154, 151, 151, 152, 152, 153, 153, 153, 149, 149,
	149, 150, 150, 150, 160, 178, 178, 178, 180, 180,
	181, 181, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 168, 168, 204, 204, 177, 177, 177,
	174, 174, 174, 174, 174, 174, 174, 174, 167, 167,
	176, 176, 175, 175, 162, 162, 162, 162, 162, 163,
	164, 164, 164, 164, 161, 200, 200, 200, 201, 201,
	165, 165, 166, 166, 171, 171, 171, 172, 172, 172,
	173, 173, 173, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 219, 219, 220, 220,
	220, 220, 220, 220, 220, 184, 182, 182, 183, 183,
	17, 18, 18, 18, 18, 18, 19, 19, 21, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 112, 112, 109, 109, 110, 110, 111, 111,
	111, 113, 113, 113, 136, 136, 136, 23, 23, 25,
	25, 26, 27, 24, 24, 24, 24, 24, 221, 28,
	29, 29, 30, 30, 30, 34, 34, 34, 32, 32,
	33, 33, 39, 39, 38, 38, 40, 40, 40, 40,
	124, 124, 124, 123, 123, 42, 42, 43, 43, 44,
	44, 45, 45, 45, 57, 57, 93, 93, 93, 96,
	96, 46, 46, 46, 46, 47, 47, 48, 48, 49,
	49, 131, 131, 130, 130, 130, 129, 129, 51, 51,
	51, 53, 52, 52, 52, 52, 54, 54, 56, 56,
	55, 55, 58, 58, 58, 58, 59, 59, 94, 94,
	41, 41, 41, 41, 41, 41, 41, 108, 108, 61,
	61, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 71, 71, 71, 71, 71, 71, 62, 62, 62,
	62, 62, 62, 62, 37, 37, 72, 72, 72, 78,
	73, 73, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 69, 69, 69, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 222, 222, 70, 70, 70, 70, 35, 35, 35,
	35, 35, 134, 134, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 138, 138,
	138, 138, 138, 138, 138, 82, 82, 36, 36, 80,
	80, 81, 83, 83, 79, 79, 79, 64, 64, 64,
	64, 64, 64, 64, 64, 66, 66, 66, 84, 84,
	85, 85, 86, 86, 87, 87, 88, 89, 89, 89,
	90, 90, 90, 90, 91, 91, 91, 63, 63, 63,
	63, 63, 63, 92, 92, 92, 92, 97, 97, 74,
	74, 76, 76, 75, 77, 98, 98, 102, 99, 99,
	103, 103, 103, 103, 101, 101, 101, 126, 126, 126,
	106, 106, 114, 114, 115, 115, 107, 107, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 117, 117,
	117, 118, 118, 121, 121, 122, 122, 127, 127, 128,
	128, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 216, 217, 132, 133, 133, 133,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	5, 9, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 14, 13, 14, 6, 5, 5,
	5, 11, 11, 9, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 1, 3, 3, 3,
	3, 2, 3, 1, 1, 1, 1, 2, 2, 3,
	2, 4, 4, 2, 2, 3, 2, 3, 2, 7,
	8, 3, 3, 6, 5, 8, 7, 4, 2, 4,
	6, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 0, 4, 3, 4, 3, 3, 3, 3, 3,
	3, 3, 2, 4, 6, 2, 3, 2, 3, 1,
	3, 0, 2, 0, 3, 3, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 3, 2, 2, 2, 2, 1, 1, 1, 3,
	3, 2, 1, 2, 1, 1, 1, 1, 4, 4,
	4, 4, 4, 1, 5, 2, 2, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 3,
	3, 0, 1, 0, 1, 0, 2, 1, 0, 3,
	3, 0, 1, 2, 6, 0, 1, 4, 1, 2,
	1, 3, 2, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 1, 1, 0, 2, 5,
	2, 3, 3, 2, 3, 2, 3, 4, 1, 1,
	1, 3, 3, 2, 2, 5, 5, 8, 8, 13,
	1, 1, 2, 2, 10, 0, 1, 1, 0, 3,
	0, 1, 1, 3, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 11, 13, 7, 7, 7, 12,
	7, 7, 7, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 6, 4, 2, 4, 2, 2, 2,
	2, 3, 1, 1, 0, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 7, 1, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 0, 4,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 6, 8, 8, 6, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 1, 2, 1, 2, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -214, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	113, 114, 116, 115, 145, 117, 138, 49, 186, 187,
	189, 190, 26, 139, 140, 143, 144, -216, 8, 290,
	53, -215, 324, -86, 15, -30, 5, -28, -221, -28,
	-28, -28, -28, -28, -169, 53, -125, -196, 153, 282,
	119, 134, 152, 120, 136, 71, -107, 122, 124, 120,
	120, 121, 122, 282, 119, 120, -55, -127, 56, -120,
	160, 299, 21, 186, 199, 200, 191, 232, 220, 300,
	158, 217, 221, 269, 323, 65, 189, 278, 128, 164,
	141, 212, 215, 214, 206, 203, 28, 238, 306, 205,
	131, 239, 243, 249, 270, 297, 196, 197, 272, 236,
	32, 133, 301, 34, 149, 273, 241, 235, 230, 234,
	195, 229, 38, 209, 245, 244, 246, 268, 223, 159,
	248, 225, 207, 224, 18, 144, 147, 240, 242, 204,
	161, 126, 151, 305, 274, 202, 148, 162, 143, 277,
	320, 157, 190, 271, 198, 280, 37, 254, 216, 193,
	208, 194, 130, 187, 155, 227, 150, 210, 211, 233,
	192, 228, 188, 152, 145, 279, 255, 307, 226, 222,
	218, 219, 156, 122, 153, 154, 261, 262, 263, 264,
	302, 303, 275, 213, 256, 257, 166, 167, 168, 169,
	170, 171, 172, 120, 107, 221, 113, 259, 121, 32,
	151, -136, 120, -109, 154, 261, 262, 263, 264, 56,
	271, 270, 265, -127, 188, -132, -132, -132, -132, -132,
	-2, -90, 17, 16, -5, -3, -216, 6, 21, 22,
	-34, 39, 40, -29, -40, 98, -41, -127, -60, 73,
	-65, 29, 56, -120, 24, -64, -61, -79, -77, -78,
	107, 108, 96, 97, 104, 74, 109, -69, -67, -68,
	-70, 58, 57, 66, 59, 60, 61, 62, 67, 68,
	69, -121, -75, -216, 43, 44, 291, 292, 293, 294,
	298, 295, 76, 33, 281, 289, 288, 287, 285, 286,
	283, 284, 322, 125, 282, 102, 290, -107, -43, -44,
	-45, -46, -57, -78, -216, -55, 11, -50, -55, -99,
	-135, 188, -103, 271, 270, -122, -101, -121, -119, 269,
	221, 268, 56, -120, 118, 174, 309, 72, 23, 25,
	252, 258, 173, 75, 107, 16, 76, 180, 318, 319,
	106, 291, 113, 47, 283, 284, 281, 178, 293, 294,
	282, 259, 185, 20, 29, 10, 26, 139, 22, 100,
	115, 175, 79, 80, 142, 24, 140, 69, 181, 183,
	19, 50, 132, 11, 308, 13, 14, 310, 125, 124,
	91, 321, 121, 45, 8, 109, 27, 88, 41, 137,
	184, 43, 89, 17, 285, 286, 31, 298, 146, 102,
	48, 35, 73, 67, 51, 276, 179, 71, 15, 46,
	134, 182, 90, 116, 290, 44, 176, 119, 177, 6,
	296, 30, 138, 42, 120, 260, 78, 123, 68, 5,
	136, 9, 49, 52, 287, 288, 289, 33, 77, 12,
	135, 70, -170, -158, 56, -200, 318, 319, 122, -121,
	-115, 125, -115, -121, -121, -115, 290, 120, -55, -55,
	-114, 125, 56, -114, -114, -114, -55, 110, -55, 56,
	30, 282, 56, 151, 120, 152, 122, -133, -216, -122,
	-133, -133, -133, 155, 156, -133, -110, 266, 51, -133,
	-217, 55, -91, 19, 31, -41, -127, -87, -88, -41,
	-86, -2, -28, 35, -32, 22, 64, 11, -124, 72,
	71, 88, -123, 23, -121, 58, 110, -41, -62, 91,
	73, 89, 90, 75, 93, 92, 103, 96, 97, 98,
	99, 100, 101, 102, 94, 95, 106, 322, 81, 82,
	83, 84, 85, 86, 87, -108, -216, -78, -216, 111,
	112, -65, -65, -65, -65, -65, -65, -65, -216, -2,
	-73, -41, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -82, -41, -216, -222, -216, -222, -222, -222, -222,
	-222, -222, -222, -138, 107, 221, 141, 212, -141, -140,
	227, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 220, 300, -216, -216, -216, -216, -56, 27, -55,
	30, 54, -51, -53, -52, -54, 41, 45, 47, 42,
	43, 44, 48, -131, 23, -43, -216, -130, 147, -129,
	23, -127, 58, -55, -50, -218, 54, 11, 52, 54,
	-99, 188, -100, -104, 272, 274, 81, -126, -121, 58,
	29, 30, 55, 54, -159, -139, -143, -140, -145, -144,
	-146, -141, -142, 217, 221, 218, 223, 224, 225, 107,
	222, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	236, 237, 226, 238, 30, 141, 210, 211, 212, 215,
	214, 216, 213, 239, 240, 241, 242, 243, 244, 245,
	246, 202, 203, 205, 206, 207, 209, 208, 121, -55,
	-189, 52, 56, 73, 56, 51, -205, 51, 173, 174,
	-55, -55, 276, -133, 123, -55, 24, 51, -55, 56,
	56, -128, -127, -119, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -112, 260, 267, -55, 9, 91,
	54, 18, 110, 54, -89, 25, 26, -90, -217, -34,
	-66, -121, 59, 62, -33, 42, -55, -41, -41, -71,
	67, 73, 68, 69, -123, 98, -128, -122, -119, -65,
	-72, -75, -78, 63, 91, 89, 90, 75, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -134, 56, 58, -138, 56, -64, -64,
	-121, -39, 22, -38, -40, -217, 54, -217, -2, -38,
	-38, -41, -41, -79, -121, -127, -79, -38, -32, -80,
	-81, 77, -79, -217, 219, -38, -39, -38, -38, -95,
	147, -55, -98, -102, -79, -44, -45, -45, -44, -45,
	41, 41, 41, 46, 41, 46, 41, -52, -127, -217,
	-58, 49, 124, 50, -216, -129, -95, 52, -43, -55,
	-103, -100, 54, 273, 275, 276, 51, 70, -41, -150,
	107, 106, -171, -172, -173, -122, 58, 59, -158, -160,
	-162, -161, -174, -163, 128, 126, 130, 131, 136, -167,
	121, 137, 67, 73, -202, 128, 51, 252, 258, 126,
	137, 136, 323, 65, 129, 308, 310, 29, -153, 325,
	247, -151, 255, -147, 53, -147, -147, 219, -147, -147,
	-147, -147, -147, -149, 221, -149, -149, -149, -149, 53,
	53, -147, -147, -147, -147, -155, 53, 204, -155, -155,
	-156, 53, -156, -121, 23, -187, 302, -188, 56, -133,
	24, -133, -55, -206, 8, 9, 10, -55, -116, 118,
	115, 116, -184, 114, 252, 221, 65, 29, 15, 291,
	147, 307, 56, 148, -55, -55, -55, -133, -111, 11,
	91, 37, -41, -41, -128, -88, -91, -106, 19, 11,
	33, 33, -38, 67, 68, 69, 110, -216, -72, -65,
	-65, -65, -37, 142, 72, -217, -217, -38, 54, -41,
	-217, -217, -217, 54, 52, 23, 54, 11, 110, 54,
	11, -217, -38, -83, -81, 79, -41, -217, -217, -217,
	-217, -217, -63, 30, 33, -2, -216, -216, -59, 54,
	12, 81, -48, -47, 51, 52, -49, 51, -47, 41,
	41, 121, 121, 121, -96, -121, -59, -43, -59, -104,
	-105, 277, 274, 280, 56, 54, -173, 81, 53, -201,
	51, 73, -165, -121, 137, -167, -167, 56, -167, 56,
	56, 67, 19, -121, 9, 137, 137, -201, 58, -127,
	-198, 309, 16, 53, -203, 53, 58, 59, 60, 67,
	-148, 66, -61, 248, 281, 284, 283, 249, 326, -152,
	256, 59, -149, -149, -147, -149, -149, -149, -150, 30,
	-150, -150, -150, -150, -157, 58, -157, -154, 302, 303,
	-154, 59, -155, 59, 51, 52, -2, -186, -185, -122,
	-191, 23, 51, -205, -132, -125, -220, 153, 127, 132,
	131, 56, 126, 130, 147, -190, 153, 127, 128, 132,
	131, 56, 121, 137, 126, 130, 147, 136, -117, -118,
	123, 23, 121, 137, 147, 118, -133, -113, 89, 12,
	-127, -127, 38, 110, -55, -42, 11, 98, -122, -39,
	-37, 72, -65, -65, -217, -40, -137, 107, 217, 141,
	212, 206, 236, 237, 223, 254, 210, 255, -134, -137,
	-65, -65, -122, -65, -65, 299, -86, 80, -41, 78,
	-97, 51, -98, -74, -76, -75, -216, -2, -92, -121,
	-96, -86, -102, -41, -41, -41, 53, -41, -216, -216,
	-216, -217, 54, -86, -59, 274, 278, 279, -172, -173,
	-176, -175, -121, 137, 10, 9, 19, 132, 126, 56,
	56, 56, -200, 136, 320, -202, 323, -148, -216, 53,
	23, 29, 59, -203, 53, -193, 322, -216, -147, 53,
	-147, 53, 53, 55, -150, -150, -149, -150, -150, -150,
	56, 107, 55, 54, 55, 210, 210, 54, 55, 54,
	-55, -121, 54, 81, -192, 19, 161, 162, -55, -206,
	-219, 121, 137, -132, -121, -132, -121, -55, -132, -121,
	128, -162, 58, -41, -59, -43, -217, -65, -217, -147,
	-147, -147, -156, -147, 197, -147, 197, -217, -217, -217,
	54, 19, -217, 54, 19, -216, -36, 296, -41, 28,
	-97, 54, -217, -217, -217, 54, 110, -217, -90, -93,
	-121, 137, -93, -93, -93, -130, -121, -90, 55, 54,
	-147, -147, -164, 157, 158, 30, 159, -164, 320, 137,
	137, -200, -201, -41, -93, 310, 54, 55, -203, 221,
	211, 250, 227, -217, 55, 55, 55, -150, -149, 58,
	-149, 257, 257, 59, 59, 53, 52, 51, -185, -173,
	123, 21, 6, 8, 9, 10, 19, 23, -121, 53,
	27, -121, -84, 13, -149, 56, -65, -65, -65, -65,
	-65, -217, 58, 137, -76, 33, -2, -216, -121, -121,
	54, 55, -217, -217, -217, -58, -178, -180, 302, -179,
	52, 133, 65, 166, 167, 168, 169, 170, 171, 172,
	-175, -89, -201, 51, 67, 160, -201, 51, -165, -121,
	-200, -216, -217, 55, 53, 59, 55, 219, -154, -150,
	-150, 55, 55, -176, -121, -55, -166, -121, 175, -208,
	-210, -7, -9, -8, -11, -10, -12, -13, -14, 20,
	179, 180, 185, 181, 135, 125, 53, -93, -216, 126,
	-85, 14, 16, -217, -217, -217, -217, -35, 91, 302,
	9, -74, -2, 110, -121, -177, 51, -179, 302, 53,
	304, 56, -168, 81, 58, 81, 81, 81, 81, 81,
	81, 81, 9, 10, 53, 53, -41, -197, 159, -199,
	55, 55, 55, 53, 53, -194, 54, 52, 176, -210,
	-212, -121, -211, -121, -121, -121, -207, 35, 182, 183,
	184, -60, -65, -60, -176, 55, -182, -183, 147, 137,
	-41, -73, -217, 300, 48, 305, -98, -217, -121, -121,
	-181, -179, -121, 59, -204, 51, 70, 59, -204, -204,
	-204, -204, -204, -164, -164, -166, -176, -217, 297, 55,
	187, 312, 313, 146, 314, 159, 315, 316, -94, 321,
	-176, -176, -195, 302, -121, -41, -210, 54, -213, -139,
	177, -121, 11, 11, 11, 11, -210, 186, 186, 55,
	-189, -217, 54, -121, 53, 38, 301, 306, -216, 55,
	54, -201, -201, 55, 55, 302, 59, 16, 59, 59,
	59, 59, 313, 146, 315, 16, -59, 53, 55, 55,
	323, -211, -121, 178, 27, -209, -210, -209, -187, -183,
	33, -176, 38, -121, -179, 129, -178, 59, 59, 317,
	-127, -178, -93, -59, -178, -41, 19, -121, 80, -210,
	80, 149, 55, 302, -217, -55, -177, 110, -177, 55,
	-178, -2, 79, 150, 305, 53, -122, 186, -216, 306,
	-166, -209, -65, 146, 55, 80, -217, -217,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 702, 0, 458, 458, 458, 458, 458, 458, 0,
	-2, 756, 0, 0, 0, 0, -2, 448, 449, 0,
	451, 452, 1034, 1034, 1034, 1034, 1034, 0, 33, 34,
	1032, 1, 3, 710, 0, 0, 462, 465, 460, 0,
	756, 0, 0, 0, 83, 0, 345, 0, 0, 754,
	754, 0, 0, 754, 123, 0, 0, 0, 757, 0,
	752, 0, 752, 752, 752, 0, 407, 530, 777, 778,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 0, 0, 0, 0, 1035, 1035, 1035,
	1035, 0, 1035, 436, 425, 427, 428, 429, 430, 1035,
	445, 446, 435, 447, 450, 453, 454, 455, 456, 457,
	27, 714, 0, 0, 702, 29, 0, 458, 463, 464,
	468, 466, 467, 459, 0, 476, 480, 0, 540, 0,
	545, 547, -2, -2, 0, 582, 583, 584, 585, 586,
	0, 0, 0, 0, 0, 0, 0, 610, 611, 612,
	613, 687, 688, 689, 690, 691, 692, 693, 694, 549,
	550, 684, 734, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 675, 0, 641, 641, 641, 641, 641, 641,
	641, 641, 0, 0, 0, 0, 0, 0, 0, 487,
	489, 490, 491, 511, 0, 513, 0, 0, 41, 45,
	0, 1001, 738, -2, -2, 0, 0, 775, 776, -2,
	911, -2, 773, 774, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 0, 136, 0, 0, 346, 347, 0, 124,
	0, 0, 0, 0, 0, 0, 133, 0, 1035, 0,
	0, 0, 0, 0, 0, 0, 406, 0, 408, 1035,
	1035, 1035, 1035, 1035, 1035, 1035, 1035, 417, 1036, 1037,
	418, 419, 420, 1035, 1035, 422, 0, 437, 0, 431,
	28, 1033, 22, 0, 0, 711, 0, 703, 704, 707,
	710, 27, 465, 0, 470, 469, 461, 0, 477, 0,
	0, 0, 481, 0, 483, 484, 0, 543, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 567, 568,
	569, 570, 571, 572, 573, 546, 0, 560, 0, 0,
	0, 602, 603, 604, 605, 606, 607, 0, 472, 27,
	0, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	468, 0, 676, 0, 632, 0, 633, 634, 635, 636,
	637, 638, 639, 640, 668, 0, 670, 671, 672, 673,
	674, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 236, 237, 0, 472, 0, 0, 43, 0, 529,
	0, 0, 0, 0, 0, 0, 518, 0, 0, 521,
	0, 0, 0, 0, 512, 0, 0, 532, 965, 514,
	0, 516, 517, -2, 0, 0, 0, 39, 40, 0,
	46, 1001, 48, 72, 0, 0, 0, 291, 747, 748,
	749, 745, 354, 0, 141, 285, 281, 143, 144, 145,
	146, 271, 209, 271, 271, 271, 271, 271, 243, 271,
	271, 288, 288, 288, 288, 288, 252, 253, 254, 255,
	256, 257, 258, 0, 0, 228, 271, 271, 271, 232,
	271, 234, 235, 261, 262, 263, 264, 265, 266, 267,
	268, 273, 273, 273, 275, 275, 226, 227, 0, 0,
	127, 0, 1035, 0, 1035, 0, 0, 0, 94, 95,
	134, 0, 0, 373, 0, 401, 753, 0, 1035, 404,
	405, 531, 779, 780, 409, 410, 411, 412, 413, 414,
	415, 416, 421, 424, 438, 432, 433, 426, 715, 0,
	0, 0, 0, 0, 706, 708, 709, 714, 30, 468,
	0, 695, 0, 0, 0, 471, 25, 541, 542, 544,
	561, 0, 563, 565, 482, 478, 0, 685, -2, 551,
	552, 576, 577, 578, 0, 0, 0, 0, 574, 556,
	0, 587, 588, 589, 590, 591, 592, 593, 594, 595,
	596, 597, 598, 601, 652, 653, 609, 0, 599, 600,
	608, 0, 0, 473, 474, 579, 0, 733, 27, 0,
	0, 0, 0, 0, 684, 0, 0, 0, 0, 682,
	679, 0, 0, 642, 669, 0, 0, 0, 0, 0,
	0, 528, 536, 735, 0, 488, 507, 509, 0, 504,
	519, 520, 522, 0, 524, 0, 526, 527, 492, 493,
	494, 0, 0, 0, 0, 515, 536, 0, 536, 42,
	739, 47, 0, 0, 75, 76, 740, 741, 742, 743,
	292, 0, 135, 355, 357, 360, 361, 362, 137, 138,
	139, 140, 0, 348, 350, 0, 0, 0, 0, 0,
	328, 329, 148, 0, 150, 0, 0, 153, 154, 0,
	156, 158, 348, 0, 0, 0, 0, 0, 147, 0,
	287, 283, 282, 208, 0, 288, 288, 271, 288, 288,
	288, 245, 246, 291, 0, 291, 291, 291, 291, 0,
	0, 278, 278, 231, 233, 220, 0, 273, 222, 223,
	224, 0, 225, 0, 0, 88, 0, 125, 126, 89,
	755, 90, 109, 0, 96, 97, 98, 0, 1034, 122,
	0, 768, 374, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 0, 0, 400, 1035, 403, 441, 0,
	0, 0, 712, 713, 0, 705, 23, 0, 750, 751,
	696, 697, 485, 562, 564, 566, 0, 472, 553, 574,
	557, 0, 554, 0, 0, 548, 614, 0, 0, 581,
	-2, 617, 618, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 0, 680, 0, 0, 631, 643, 644,
	645, 646, 727, 0, 0, -2, 0, 0, 702, 0,
	0, 0, 501, 508, 0, 0, 502, 0, 503, 523,
	525, 0, 0, 0, 0, 499, 702, 536, 38, 73,
	74, 0, 0, 80, 293, 0, 358, 0, 0, 334,
	0, 0, 0, 351, 320, 0, 0, 323, 0, 325,
	345, 149, 0, 0, 0, 155, 157, 0, 161, 162,
	0, 179, 0, 0, 168, 0, 203, 172, 173, 174,
	175, 176, 177, 0, 271, 271, 199, 0, 286, 142,
	284, 0, 291, 291, 288, 291, 291, 291, 247, 0,
	248, 249, 250, 251, 0, 269, 0, 229, 0, 0,
	230, 0, 221, 0, 0, 0, -2, 128, 129, 0,
	112, 0, 0, 0, 363, 0, 1034, 0, 388, 389,
	390, 391, 392, 393, 394, 1034, 0, 375, 376, 377,
	378, 379, 380, 381, 382, 383, 384, 385, 0, 1034,
	769, 770, 771, 772, 0, 0, 402, 423, 0, 0,
	439, 440, 716, 0, 24, 536, 0, 479, 686, 0,
	555, 0, 575, 558, 615, 475, 0, 271, 271, 657,
	271, 275, 660, 661, 271, 663, 271, 666, 0, 0,
	0, 0, 685, 0, 0, 0, 677, 630, 683, 0,
	31, 0, 727, 717, 729, 731, 0, 27, 0, 723,
	0, 710, 736, 537, 737, 505, 0, 510, 0, 0,
	0, 513, 0, 710, 37, 77, 78, 79, 356, 359,
	0, 330, 271, 271, 0, 0, 0, 0, 0, 321,
	322, 324, 326, 345, 167, 151, 348, 152, 0, 0,
	0, 180, 0, 0, 0, 171, 0, 0, 195, 0,
	197, 0, 0, 272, 238, 239, 291, 240, 241, 242,
	289, 290, 288, 0, 288, 0, 0, 0, 276, 0,
	0, 0, 0, 0, 0, 0, 110, 111, 0, 0,
	0, 386, 387, 367, 0, 368, 370, 371, 372, 0,
	350, 366, 442, 443, 698, 486, 616, 559, 619, 654,
	288, 658, 659, 662, 664, 665, 667, 621, 620, 622,
	0, 0, 625, 0, 0, 0, 0, 0, 681, 0,
	32, 0, 732, -2, 0, 0, 0, 44, 35, 0,
	496, 497, 0, 0, 0, 532, 500, 36, 295, 0,
	707, 333, 348, 340, 341, 0, 0, 348, 349, 350,
	345, 327, 0, 0, 0, 164, 0, 169, 0, 0,
	278, 206, 207, 178, 196, 198, 200, 244, 291, 270,
	291, 279, 280, 0, 0, 0, 0, 0, 130, 131,
	0, 113, 114, 115, 116, 117, 0, 0, 0, 0,
	0, 351, 700, 0, 655, 656, 0, 0, 0, 0,
	647, 629, 678, 0, 730, 0, -2, 0, 725, 724,
	0, 506, 533, 534, 535, 495, 317, 296, 0, 298,
	0, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	331, 332, 335, 0, 342, 343, 336, 0, 0, 351,
	0, 0, 201, 163, 181, 0, 0, 204, 205, 259,
	260, 274, 277, 0, 0, 0, 118, 352, 0, 93,
	99, 101, 102, 103, 104, 105, 106, 107, 108, 0,
	0, 0, 0, 61, 0, 0, 0, 0, 0, 0,
	26, 0, 0, 623, 624, 626, 627, 0, 0, 0,
	0, 720, 27, 0, 498, 294, 0, 299, 0, 0,
	0, 302, 0, 314, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 159, 0, 0,
	166, 170, 538, 0, 0, 120, 0, 0, 0, 100,
	49, 54, 51, 56, 57, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 396, 0, 0,
	701, 699, 628, 0, 0, 0, 728, -2, 726, 318,
	0, 300, 305, 303, 306, 315, 316, 307, 308, 309,
	310, 311, 312, 348, 348, 0, 0, 160, 202, 165,
	0, 0, 0, 0, 0, 0, 192, 0, 536, 0,
	0, 0, 91, 0, 353, 119, 92, 0, 0, 53,
	55, 59, 62, 63, 64, 65, 66, 0, 0, 364,
	127, 395, 0, 0, 0, 648, 0, 651, 0, 297,
	0, 337, 338, 0, 295, 0, 183, 0, 185, 186,
	187, 188, 189, 190, 191, 0, 295, 0, 536, 295,
	0, 52, 0, 0, 0, 0, 68, 0, 369, 397,
	0, 0, 649, 0, 301, 0, 317, 182, 184, 193,
	0, 317, 0, 295, 85, 121, 0, 60, 67, 69,
	70, 0, 365, 0, 319, 0, 344, 0, 84, 539,
	86, -2, 0, 0, 0, 0, 194, 0, 0, 650,
	0, 0, 0, 0, 339, 71, 398, 399,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 324,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 325, 3, 326, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:354
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:359
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:360
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:364
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:387
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:395
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:399
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:405
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:412
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:418
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:422
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:428
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:432
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:439
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:451
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:463
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:467
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:473
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:479
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:483
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:487
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:492
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:493
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:497
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:501
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:506
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:510
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:516
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:520
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:524
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:528
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:534
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:538
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:551
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:555
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:561
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:566
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:570
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:576
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:583
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:590
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:597
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:605
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:615
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:619
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:623
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:627
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:631
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:637
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:644
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:654
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:658
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:664
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:672
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:683
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:687
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:693
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:697
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:701
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:707
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:711
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:715
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:719
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:725
		{
			yyVAL.str = SessionStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:729
		{
			yyVAL.str = GlobalStr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:735
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 84:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:740
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 85:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:760
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 86:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:776
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:791
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:799
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:807
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:811
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:815
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 92:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:826
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].str,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:836
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].str,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:848
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:852
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:858
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:862
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:866
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:872
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:876
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:882
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:894
		{
			yyVAL.bytes = nil
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:898
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:902
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:907
		{
			yyVAL.bytes = nil
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:911
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:915
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:919
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:923
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:927
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:932
		{
			yyVAL.expr = nil
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:936
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:941
		{
			yyVAL.expr = nil
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:945
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:950
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:954
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:959
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:963
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:969
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:974
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:979
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:985
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:990
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:996
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1001
		{
			yyVAL.bytes = nil
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1005
		{
			yyVAL.bytes = nil
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1011
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1018
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1025
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1030
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1034
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1038
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1042
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1048
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1053
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1064
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1076
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1081
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1086
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1091
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1096
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1101
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1106
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1111
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1116
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1121
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1126
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1131
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[5].expr), NotForReplication: bool(yyDollar[3].boolVal)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[7].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1137
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[7].expr), ConstraintName: yyDollar[3].colIdent, NotForReplication: bool(yyDollar[5].boolVal)}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1142
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1147
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1152
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1158
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1164
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1170
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1176
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1183
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1187
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 170:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1191
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1197
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1201
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1205
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1209
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1213
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1217
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1221
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1225
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1231
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1235
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1240
		{
			yyVAL.sequence = &Sequence{}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1244
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1249
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1254
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1259
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1264
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1269
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1274
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1279
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1284
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1289
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1294
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1299
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1304
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1311
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1315
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1319
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1323
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1327
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1331
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1336
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1340
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1345
		{
			yyVAL.bytes = nil
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1355
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1360
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1366
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1370
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1374
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1378
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1382
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1386
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1390
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1394
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1398
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1402
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1408
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1414
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1420
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1426
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1432
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1438
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1444
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1448
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1454
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1458
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1462
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1466
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1470
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1474
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1478
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1482
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1488
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1492
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1498
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1502
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1506
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1510
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1514
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1518
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1522
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1526
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1530
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1534
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1538
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1542
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1546
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1550
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1570
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1578
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1593
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1597
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1601
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1605
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1609
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1627
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1632
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1637
		{
			yyVAL.optVal = nil
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1641
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1646
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1650
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1658
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1662
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1668
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1676
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1680
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1684
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1689
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1693
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1698
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1702
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1707
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1711
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1715
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1720
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1724
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1728
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1733
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1737
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1741
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1747
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1752
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1756
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1760
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1766
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1770
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1776
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1780
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1786
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1790
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1795
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1799
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1803
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1807
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1811
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1815
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1819
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1823
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1827
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1833
		{
			yyVAL.str = ""
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1837
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1843
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1847
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1853
		{
			yyVAL.indexPartition = nil
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1857
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 319:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1861
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1867
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1871
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1875
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1879
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1883
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1887
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1891
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1895
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1901
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1905
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1911
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1915
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1921
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1926
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1932
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1937
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1944
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 337:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1951
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 338:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1958
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 339:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1967
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1979
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1983
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1987
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1991
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 344:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:1997
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2008
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2012
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2016
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2022
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2026
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2031
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2038
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2042
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2047
		{
			yyVAL.str = ""
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2051
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2055
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2063
		{
			yyVAL.str = yyDollar[1].str
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2067
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2071
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2077
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2081
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2085
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2091
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 364:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:2095
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 365:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:2109
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 366:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2123
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 367:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2132
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 368:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2136
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 369:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:2140
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2153
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 371:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2163
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 372:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2168
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2173
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2177
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2209
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2215
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2219
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 398:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2225
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 399:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2229
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2235
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2241
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 402:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2249
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2254
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2262
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2266
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2272
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2276
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2281
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2287
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2291
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2295
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2300
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2304
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2308
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2312
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2316
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2320
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2324
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2328
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2332
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2336
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2340
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2344
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2354
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2358
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2362
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2366
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2370
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2374
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2378
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2388
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2394
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2398
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2404
		{
			yyVAL.str = ""
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2408
		{
			yyVAL.str = "extended "
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2414
		{
			yyVAL.str = ""
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2418
		{
			yyVAL.str = "full "
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2424
		{
			yyVAL.str = ""
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2428
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2432
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2438
		{
			yyVAL.showFilter = nil
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2442
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2446
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2452
		{
			yyVAL.str = ""
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2456
		{
			yyVAL.str = SessionStr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2460
		{
			yyVAL.str = GlobalStr
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2466
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2470
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2476
		{
			yyVAL.statement = &Begin{}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2480
		{
			yyVAL.statement = &Begin{}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2486
		{
			yyVAL.statement = &Commit{}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2492
		{
			yyVAL.statement = &Rollback{}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2498
		{
			yyVAL.statement = &OtherRead{}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2502
		{
			yyVAL.statement = &OtherRead{}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2506
		{
			yyVAL.statement = &OtherRead{}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2510
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2514
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2519
		{
			setAllowComments(yylex, true)
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2523
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2529
		{
			yyVAL.bytes2 = nil
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2533
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2539
		{
			yyVAL.str = UnionStr
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2543
		{
			yyVAL.str = UnionAllStr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2547
		{
			yyVAL.str = UnionDistinctStr
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2552
		{
			yyVAL.str = ""
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2556
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2560
		{
			yyVAL.str = SQLCacheStr
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2565
		{
			yyVAL.str = ""
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2569
		{
			yyVAL.str = DistinctStr
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2574
		{
			yyVAL.str = ""
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2578
		{
			yyVAL.str = StraightJoinHint
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2583
		{
			yyVAL.selectExprs = nil
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2587
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2593
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2597
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2603
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2607
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2611
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 479:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2615
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2620
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2624
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2628
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2635
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2640
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2644
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2650
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2654
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2664
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2668
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2672
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2678
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 495:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2682
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2688
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2693
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2697
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2703
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2707
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2720
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2724
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2728
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2732
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2738
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2740
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2744
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2746
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2750
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2752
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2755
		{
			yyVAL.empty = struct{}{}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2757
		{
			yyVAL.empty = struct{}{}
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2760
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2764
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2768
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2775
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2781
		{
			yyVAL.str = JoinStr
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2785
		{
			yyVAL.str = JoinStr
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2789
		{
			yyVAL.str = JoinStr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2795
		{
			yyVAL.str = StraightJoinStr
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2801
		{
			yyVAL.str = LeftJoinStr
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2805
		{
			yyVAL.str = LeftJoinStr
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2809
		{
			yyVAL.str = RightJoinStr
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2813
		{
			yyVAL.str = RightJoinStr
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2819
		{
			yyVAL.str = NaturalJoinStr
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2823
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2833
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2837
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2843
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2847
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2852
		{
			yyVAL.indexHints = nil
		}
	case 533:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2856
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 534:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2860
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2864
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2869
		{
			yyVAL.expr = nil
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2873
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2878
		{
			yyVAL.columns = nil
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2882
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2888
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2892
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2896
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2900
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2904
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2908
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2912
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2918
		{
			yyVAL.str = ""
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2922
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2928
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2932
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2938
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2942
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2946
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2950
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2954
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2958
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2962
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 558:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2966
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 559:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2970
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2974
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2980
		{
			yyVAL.str = IsNullStr
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2984
		{
			yyVAL.str = IsNotNullStr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2988
		{
			yyVAL.str = IsTrueStr
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2992
		{
			yyVAL.str = IsNotTrueStr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2996
		{
			yyVAL.str = IsFalseStr
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3000
		{
			yyVAL.str = IsNotFalseStr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3006
		{
			yyVAL.str = EqualStr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3010
		{
			yyVAL.str = LessThanStr
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3014
		{
			yyVAL.str = GreaterThanStr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3018
		{
			yyVAL.str = LessEqualStr
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3022
		{
			yyVAL.str = GreaterEqualStr
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3026
		{
			yyVAL.str = NotEqualStr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3030
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3035
		{
			yyVAL.expr = nil
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3039
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3045
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3049
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3053
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3059
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3065
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3069
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3075
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3079
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3083
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3087
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3091
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3095
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3099
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3103
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3107
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3111
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3115
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3119
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3123
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3127
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3131
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3135
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3139
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3143
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3147
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3151
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3155
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3159
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3163
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3171
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3185
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3189
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3193
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3201
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3215
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3219
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 616:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3223
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3233
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3237
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 619:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3241
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 620:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3245
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 621:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3249
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 622:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3253
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 623:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3257
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 624:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3261
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 625:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3265
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 626:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3269
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 627:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3273
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 628:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:3277
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 629:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3281
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 630:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3285
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3289
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3299
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3303
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3307
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3311
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3316
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3321
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3326
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3331
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3335
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3349
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3353
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3357
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3361
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3367
		{
			yyVAL.str = ""
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3371
		{
			yyVAL.str = BooleanModeStr
		}
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3375
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 650:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3379
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3383
		{
			yyVAL.str = QueryExpansionStr
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3389
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3393
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3399
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3403
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3407
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3411
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3415
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3419
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3425
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3429
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3433
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3437
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3441
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3445
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3449
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3453
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3459
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3463
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3467
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3471
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3475
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3479
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3483
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3488
		{
			yyVAL.expr = nil
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3492
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3497
		{
			yyVAL.str = string("")
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3501
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3507
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3511
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3517
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3522
		{
			yyVAL.expr = nil
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3526
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3532
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3536
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 686:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3540
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3546
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3550
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3554
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3558
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3562
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3566
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3570
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3574
		{
			yyVAL.expr = &NullVal{}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3580
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3589
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3593
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3598
		{
			yyVAL.exprs = nil
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3602
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3607
		{
			yyVAL.expr = nil
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3611
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3616
		{
			yyVAL.orderBy = nil
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3620
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3626
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3630
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3636
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3641
		{
			yyVAL.str = AscScr
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3645
		{
			yyVAL.str = AscScr
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3649
		{
			yyVAL.str = DescScr
		}
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3654
		{
			yyVAL.limit = nil
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3658
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3662
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3666
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 714:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3671
		{
			yyVAL.str = ""
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3675
		{
			yyVAL.str = ForUpdateStr
		}
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3679
		{
			yyVAL.str = ShareModeStr
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3692
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3696
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3700
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 720:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3705
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3709
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 722:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3713
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3720
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3724
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3728
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 726:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3732
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3737
		{
			yyVAL.updateExprs = nil
		}
	case 728:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3741
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3747
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3751
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3757
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3761
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3767
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3773
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3783
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3787
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3793
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3799
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3803
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3809
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3813
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3817
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3821
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3828
		{
			yyVAL.bytes = []byte("charset")
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3835
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3839
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3843
		{
			yyVAL.expr = &Default{}
		}
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3852
		{
			yyVAL.byt = 0
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3854
		{
			yyVAL.byt = 1
		}
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3857
		{
			yyVAL.empty = struct{}{}
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3859
		{
			yyVAL.empty = struct{}{}
		}
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3862
		{
			yyVAL.str = ""
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3864
		{
			yyVAL.str = IgnoreStr
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3868
		{
			yyVAL.empty = struct{}{}
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3870
		{
			yyVAL.empty = struct{}{}
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3872
		{
			yyVAL.empty = struct{}{}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3874
		{
			yyVAL.empty = struct{}{}
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3876
		{
			yyVAL.empty = struct{}{}
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3878
		{
			yyVAL.empty = struct{}{}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3880
		{
			yyVAL.empty = struct{}{}
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3882
		{
			yyVAL.empty = struct{}{}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3884
		{
			yyVAL.empty = struct{}{}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3886
		{
			yyVAL.empty = struct{}{}
		}
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3889
		{
			yyVAL.empty = struct{}{}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3891
		{
			yyVAL.empty = struct{}{}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3893
		{
			yyVAL.empty = struct{}{}
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3897
		{
			yyVAL.empty = struct{}{}
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3899
		{
			yyVAL.empty = struct{}{}
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3903
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3907
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3914
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3920
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3924
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3931
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4208
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4217
		{
			decNesting(yylex)
		}
	case 1034:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:4222
		{
			forceEOF(yylex)
		}
	case 1035:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:4227
		{
			forceEOF(yylex)
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4231
		{
			forceEOF(yylex)
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4235
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
